SUBROUTINE PHYIM_PROCESS_TRANSFER
********************************************************************************
*   Program name :- PHYIM_PROCESS_TRANSFER
*   Created:- 12/1/2003
*------------------------------------------------------------------------------*
*

* In Properties:
* --------------
*  
*
* Out Properties:
* ---------------
*  
********************************************************************************
$INCLUDE WWINSERT RBO.H
$INCLUDE ICS.CPYLIB PHY.INV
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV_SERIAL
$INCLUDE ICS.CPYLIB TRANSFER

* Insert method code here
ERRMSG = ""
OPEN '','PHY.INV' TO PHY.INV ELSE 
	ERRMSG = "PHY.INV FILE IS MISSING"
	GOTO 99999
END	
OPEN "","INVENTORY" TO INVENTORY ELSE
	ERRMSG = "INVENTORY FILE IS MISSING"
      	GOTO 99999
END
OPEN '','INV_SERIAL' TO INV_SERIAL ELSE
	ERRMSG = 'INV_SERIAL FILE IS MISSING'
	GOTO 99999
END
OPEN "","PHY.XREF" TO PHY.XREF ELSE
	ERRMSG = "PHY.XREF FILE IS MISSING"
      	GOTO 99999
END
DEFFUN CALC.STK.QTY(COST.QTY,MAT INV.CNV.REC,ROND,LN)

ERRMSG = RBO.getProperty('','ID',ID)
ERRMSG = RBO.getProperty('','PHYSI_TEMP_INPUT',SERIAL)

DIM SAVE.PHYSI.REC(PHYSI.REC.SIZE)

TEMP.SERIAL = SERIAL<1,1>
TEMP.PROD = SERIAL<1,2>
PROD.NUM = SERIAL<1,2>
LN = SERIAL<1,3>
USERID = SERIAL<1,4>

CONO = ID[1,3]
SERIAL.NO = 0
GEN.DIV='00'
INPUT.VAL = ""

MATREAD PHYSI.REC FROM PHY.INV,ID ELSE
	ERRMSG = "RECORD DOESN'T EXIST"
	GOTO 99999
END

MATREAD INV.REC FROM INVENTORY,CONO:TEMP.PROD ELSE
	ERRMSG = "RECORD DOESN'T EXIST"
	GOTO 99999
END

$INCLUDE ICSBP INV.UM.CNV

*ISTK.ID = CONO:TEMP.SERIAL"R%8"
ISTK.ID = CONO:TEMP.SERIAL
MATREAD ISTK.REC FROM INV_SERIAL, CONO:TEMP.SERIAL  ELSE
	MAT ISTK.REC = ''
END
OUT.PARAM = ""
PROCESS.TRANSFER: 
	D.TRAN.PRT.DATE=DATE()
   	D.TRAN.PROD.NO = PROD.NUM
	D.TRAN.EMP = USERID ;*@LOGNAME
   	D.TRAN.SERIAL = TEMP.SERIAL
	D.TRAN.RECP = ISTK.RECP
   	D.TRAN.PROD.NO= ISTK.PROD
   	D.TRAN.FROM.WHSE = ISTK.WHSE
   	D.TRAN.FROM.LOC = ISTK.LOC
   	D.TRAN.TO.WHSE = PHYSI.WHSE
   	D.TRAN.TO.LOC = PHYSI.LOC
   	D.TRAN.QTY = ISTK.CUR.QTY
   	D.TRAN.DATE.ENTER=DATE()
   	D.TRAN.PERIOD=PHYSI.PERIOD
   	D.TRAN.TOT.QTY = ISTK.CUR.QTY
   	D.TRAN.REASON.DESC = "PHYSICAL"
   	D.TRAN.DATE.ENTER = DATE()
   	D.TRAN.CODE='N'
*
   	PROCESS.FLAG='Y'
   	NEW.ERRMSG=''
   	MAT TRAN.REC=''
	ALERTMSG = ""
	CNTVAL = 1
   	CALL TRAN_UPDATE(CONO,D.TRAN.CODE,MAT TRAN.REC,PROCESS.FLAG,CO.ICS.LOC.TRAN,NEW.ERRMSG)
   	IF NEW.ERRMSG='' THEN
      		ALERTMSG<1,CNTVAL> = 'Transfer Unsuccessful. Note new Daily Transfer Number ':D.TRAN.CODE
		CNTVAL += 1
      		TEMP.SERIAL = '' ; TEMP.RECEIPT = ''
   	END ELSE
      		ALERTMSG<1,CNTVAL> = NEW.ERRMSG
		CNTVAL += 1
      		ERRMSG=''
      		MAT SAVE.PHYSI.REC = MAT PHYSI.REC
      		READU PHY.SEQ FROM PHY.XREF,CONO:D.TRAN.FROM.WHSE:"!":D.TRAN.FROM.LOC THEN
         		MATREADU PHYSI.REC FROM PHY.INV,CONO:PHY.SEQ THEN
            			SFND = 0
            			REC.CNT = DCOUNT(PHYSI.PRODUCT,@VM)
            			FOR DD = 1 TO REC.CNT UNTIL (SFND)
               			IF PHYSI.PRODUCT<1,DD> = PROD.NUM THEN
                  				IF PHYSI.SERIAL<1,DD> = TEMP.SERIAL THEN
                     				IF PHYSI.RECP.NO<1,DD> = ISTK.RECP THEN
                        					SFND = DD
                     				END
                  				END
               			END
            			NEXT DD
            			IF SFND # 0 THEN
               			PHYSI.TRAN.FROM<1,SFND> = D.TRAN.FROM.WHSE:'!':D.TRAN.FROM.LOC
               			PHYSI.TRAN.TO<1,SFND> = D.TRAN.TO.WHSE:'!':D.TRAN.TO.LOC
               			MATWRITE PHYSI.REC ON PHY.INV,CONO:PHY.SEQ
            			END ELSE
               			RELEASE PHY.INV,CONO:PHY.SEQ
            			END
         		END ELSE
            			RELEASE PHY.INV,CONO:PHY.SEQ
         		END
      		END ELSE
         		RELEASE PHY.XREF,CONO:D.TRAN.FROM.WHSE:"!":D.TRAN.FROM.LOC
      		END
      		MAT PHYSI.REC = MAT SAVE.PHYSI.REC
      		PHYSI.PREV.QTY = ISTK.CUR.QTY
      		PHYSI.PREV.DIA = ISTK.CUR.DIAM
      		PHYSI.PREV.SQTY = ISTK.CUR.STK.QTY
      		ROND=0.5
      		IF PHYSI.PREV.QTY+0 < 0 THEN ROND = -(0.5)
      		TEMP.PREV.QTY = CALC.STK.QTY(PHYSI.PREV.QTY,MAT INV.CNV.REC,ROND,'')
      		TEMP.PREV.QTY = OCONV(TEMP.PREV.QTY,ICR.CNV)
		
		OUT.PARAM<1,1> = TEMP.PREV.QTY
		OUT.PARAM<1,2> = PHYSI.PREV.DIA
		OUT.PARAM<1,3> = PHYSI.PREV.SQTY
		OUT.PARAM<1,4> = TEMP.SERIAL
		OUT.PARAM<1,5> = TEMP.RECEIPT
	END
	VAL = RBO.setProperty('','PHYSI_TEMP_OUTPUT',OUT.PARAM)
	IF ALERTMSG # "" THEN
		VAL = RBO.setProperty('','ServerStatus','A')
		VAL = RBO.setProperty('','ServerMessage',ALERTMSG)
	END
	RELEASE
RETURN



99999 ;* ERROR CONTROL BLOCK
	IF ERRMSG # "" THEN
		VAL = RBO.setProperty('','ServerStatus','1')
		VAL = RBO.setProperty('','ServerMessage',ERRMSG)
	END ELSE
		VAL = RBO.setProperty('','ServerStatus','')
	END
	RELEASE
RETURN
