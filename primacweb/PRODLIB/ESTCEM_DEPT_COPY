SUBROUTINE ESTCEM_DEPT_COPY

********************************************************************************
*   Program name :- ESTCEM_DEPT_COPY
*   Created:- 6/14/2005
*   Written by   :- Ramakrishna Pusuluri
********************************************************************************

$INCLUDE WWINSERT RBO.H
$INCLUDE JES.CPYLIB SCOMMON.ESTIMATE
$DEFINE ESTIMATE
$INCLUDE JES.CPYLIB ESTIMATE
$DEFINE ESTIMATEMATL
$INCLUDE JES.CPYLIB ESTIMATE.MATL
$INCLUDE JES.CPYLIB ESTIMATE.BIND.SPOIL
$INCLUDE JES.CPYLIB ESTIMATE.PRESS.SPOIL
$INCLUDE JES.CPYLIB ESTIMATE.PAPER.GROUP
$DEFINE EQUIPMENT
$INCLUDE JES.CPYLIB EQUIPMENT
$DEFINE COMPANY
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE ICS.CPYLIB INV_RECP_WHSE
$DEFINE JESFILEVARS
$INCLUDE JES.CPYLIB JES.FILE.VARS
$DEFINE FILEVARS
$INCLUDE CPYLIB FILE.VARS
$INCLUDE CPYLIB CHAR

ERRMSG = ""
OPEN "ESTIMATE" TO ESTIMATE ELSE ERRMSG="CANNOT OPEN ESTIMATE FILE";GOTO 90000
OPEN "ESTIMATE.MATL" TO ESTIMATE.MATL ELSE ERRMSG="CANNOT OPEN ESTIMATE.MATL FILE";GOTO 90000
OPEN "ESTIMATE.BIND.SPOIL" TO ESTIMATE.BIND.SPOIL ELSE ERRMSG="CANNOT OPEN ESTIMATE.BIND.SPOIL FILE";GOTO 90000
OPEN "ESTIMATE.PRESS.SPOIL" TO ESTIMATE.PRESS.SPOIL ELSE ERRMSG="CANNOT OPEN ESTIMATE.PRESS.SPOIL FILE";GOTO 90000
OPEN "ESTIMATE.PAPER.GROUP" TO ESTIMATE.PAPER.GROUP ELSE ERRMSG="CANNOT OPEN ESTIMATE.PAPER.GROUP FILE";GOTO 90000
OPEN "EQUIPMENT" TO EQUIPMENT ELSE ERRMSG="CANNOT OPEN EQUIPMENT FILE";GOTO 90000
OPEN "COMPANY" TO COMPANY ELSE ERRMSG="CANNOT OPEN COMPANY FILE";GOSUB 90000
OPEN "INVENTORY" TO INVENTORY ELSE ERRMSG="CANNOT OPEN INVENTORY FILE";GOSUB 90000
OPEN "INV.WHSE" TO INV.WHSE ELSE ERRMSG="CANNOT OPEN INV.WHSE FILE";GOSUB 90000
OPEN "WAREHOUSE" TO WAREHOUSE ELSE ERRMSG="CANNOT OPEN WAREHOUSE FILE";GOSUB 90000
OPEN "INV_RECP_WHSE" TO INV_RECP_WHSE ELSE ERRMSG="CANNOT OPEN INV_RECP_WHSE FILE";GOSUB 90000
OPEN "","ESTIMATE.DEPT" TO FESTIMATE.DEPT ELSE ERRMSG = "CANNOT LOCATE ESTIMATE.DEPT FILE";GOSUB 90000

OPEN "","ESTIMATE.DEPT" TO ESTIMATE.DEPT ELSE ERRMSG = "CANNOT LOCATE ESTIMATE.DEPT FILE";GOSUB 90000

OPEN "CONTROL" TO CONTROL ELSE ERRMSG="CANNOT OPEN CONTROL FILE";GOSUB 90000
 STATUS = RBO.getProperty('','DREFCREF',VALUECONTENT)
 STATUS = RBO.getProperty('','PMCProperty',PMCProperty)

 CONO   	= PMCProperty<1,4>
 FEST   	= FIELD(VALUECONTENT,"^",1)
 FCOMP  	= FIELD(VALUECONTENT,"^",2)
 TCOMP  	= FIELD(VALUECONTENT,"^",3)
 MODE  	= FIELD(VALUECONTENT,"^",4)
 EST.NO 	= FIELD(VALUECONTENT,"^",5)
 FIRST.DEPT 	= FIELD(VALUECONTENT,"^",6)
 LAST.DEPT  	= FIELD(VALUECONTENT,"^",7)
 CCOPY.FLAG   = FIELD(VALUECONTENT,"^",8)

 TEMP.TYPE 	= ""
 TEMP.OPV	= ""
 TEMP.CODE    = ""
 TEMP.QTY	= ""
 TEMP.STD	= ""
 ESTDEPTINFO  = ""

* DIV.CODE = "01"
 EST.KEY = EST.NO
	MATREAD EST.REC FROM ESTIMATE,CONO:EST.NO ELSE
              MAT EST.REC=""
		ERRMSG = 'Cannot open ESTIMATE file!'
       END
      READ EREC FROM ESTIMATE, CONO:FEST ELSE
      	      ERRMSG = "Cannot locate estimate.":CONO:FEST:" Try again! "	      
      END

   AC = COUNT(EST.A9A,",") + (EST.A9A # "")
   FOR AP = 1 TO AC
      AA = FIELD(EST.A9A,",",AP)
      AA1 = FIELD(AA,"-",1)
      AA2 = FIELD(AA,"-",2)
      IF AA2="" THEN AA2=AA1
      FOR AAP = AA1 TO AA2
         EST.REC(AAP)<1,TCOMP> = EREC<AAP,FCOMP>
      NEXT AAP
   NEXT AP
   EST.COMPONENT.CNT = DCOUNT(EST.PROD.DESC,VM)

*
***   CALL EST.CALC.STK (CONO,"")
	GOSUB EST_CALC_STK
*
*T25979 v
  FOR DPTR = FIRST.DEPT TO LAST.DEPT
      FOR CC = 1 TO DCOUNT(EST.QTY<1>,@VM)
         TESTD.ID = DPTR:"!":TCOMP:"!":EST.QTY<1,CC>
   	  LOCATE TESTD.ID IN EST.DEPT.COMP<1>,1 SETTING P THEN
            DEL EST.DEPT.COMP<1,P>
            DEL EST.DEPT.COMP.VCOST<1,P>
            DEL EST.DEPT.COMP.HRS<1,P>
            DEL EST.DEPT.COMP.DCOST<1,P>
            DEL EST.DEPT.COMP.COST<1,P>
            DEL EST.DEPT.COMP.SALE<1,P>
            DEL EST.DEPT.COMP.TSALE<1,P>
            DEL EST.DEPT.COMP.VSALE<1,P>
            DELETE ESTIMATE.DEPT, CONO:EST.KEY:"!":TESTD.ID  	     
         END
      NEXT CC
      EST.COMP.FLAG<1,DPTR,TCOMP> = ''
   NEXT DPTR
*T25979 ^
   FOR DPTR = FIRST.DEPT TO LAST.DEPT
      FFND = 1
      FESTD.ID = DPTR:"!":FCOMP:"!":EREC<42>
      READ DREC FROM FESTIMATE.DEPT, CONO:FEST:"!":FESTD.ID ELSE FFND = 0
      TESTD.ID = DPTR:"!":TCOMP:"!":EST.QTY<1,1>  ;*T25979
      IF FFND THEN
	 IF MODE = "C" THEN
*            CALL EST.OSP.UPD(CONO,"P",DPTR,TCOMP,EST.QTY<1,1>,"")
		VALUECONTENT = "P":"^":DPTR:"^":TCOMP:"^":EST.QTY<1,1>:"^":"":"^":EST.NO:"^":DPTR:"^":TEMP.TYPE:"^":TEMP.OPV:"^":TEMP.CODE:"^":TEMP.QTY:"^":TEMP.STD
		STATUS = RBO.setProperty('','PMCProperty',PMCProperty)
		STATUS = RBO.setProperty('','DREFCREF',VALUECONTENT)

		CALL ESTCEM_OSP_UPD
		STATUS = RBO.getProperty('', 'ESTDEPTINFO', ESTDEPTINFO)
		RESULT_OF_FORMULA = ESTDEPTINFO

		FOR RES = 1 TO DCOUNT(RESULT_OF_FORMULA,"~")
			FACTOR_VALUE = FIELD(RESULT_OF_FORMULA,"~",RES)
			IF FIELD(FACTOR_VALUE,"=",1) = "EST.DEPT.OSP" THEN
				EST.DEPT.OSP = FIELD(FACTOR_VALUE,"=",2)
			END
			IF FIELD(FACTOR_VALUE,"=",1) = "EST.DEPT.OSP.ID" THEN
				EST.DEPT.OSP.ID = FIELD(FACTOR_VALUE,"=",2)
			END
			IF FIELD(FACTOR_VALUE,"=",1) = "EST.DEPT.OSP.UM" THEN
				EST.DEPT.OSP.UM = FIELD(FACTOR_VALUE,"=",2)
			END
			IF FIELD(FACTOR_VALUE,"=",1) = "EST.DEPT.OSP.QTY" THEN
				EST.DEPT.OSP.QTY = FIELD(FACTOR_VALUE,"=",2)
			END
			IF FIELD(FACTOR_VALUE,"=",1) = "EST.DEPT.OSP.PRICE" THEN
				EST.DEPT.OSP.PRICE = FIELD(FACTOR_VALUE,"=",2)
			END
		NEXT RES
         END
         WRITE DREC ON FESTIMATE.DEPT, CONO:EST.KEY:"!":TESTD.ID
         CCOPY.FLAG = 1

         LOCATE TESTD.ID IN EST.DEPT.COMP<1>,1 SETTING P ELSE
            EST.DEPT.COMP<1,P> = TESTD.ID
            EST.COMP.FLAG<1,DPTR,TCOMP> = "Y"
         END
      END
   NEXT DPTR
*   GOSUB 80000
   CURR.REF.NO = ""
*   GOSUB 70000
	IF ESTDEPTINFO = "" THEN   
	   ESTDEPTINFO = "EST.KEY=":EST.KEY:"~EST.CUST.NAME=":EST.CUST.NAME:"~EST.COMPONENT.CNT=":EST.COMPONENT.CNT:"~EST.DEPT.COMP=":EST.DEPT.COMP
	   ESTDEPTINFO := "~EST.DEPT=":EST.DEPT:"~EST.DEPT.DESC=":EST.DEPT.DESC:"~EST.COMP.FLAG=":EST.COMP.FLAG
	   ESTDEPTINFO := "~EST.PROD.COMP.COMBINE=":EST.PROD.COMP.COMBINE:"~EST.PROD.PQTY=":EST.PROD.PQTY:"~EST.PROD.PCST=":EST.PROD.PCST
	   ESTDEPTINFO := "~EST.BOOK.BIND.REQ=":EST.BOOK.BIND.REQ:"~EST.PROD.BS.REQ=":EST.PROD.BS.REQ:"~EST.PROD.PS.REQ=":EST.PROD.PS.REQ
	   ESTDEPTINFO := "~EST.PROD.MR.REQ=":EST.PROD.MR.REQ:"~EST.PROD.M.WT=":EST.PROD.M.WT:"~EST.PROD.PSS.OSS=":EST.PROD.PSS.OSS
	   ESTDEPTINFO := "~EST.PROD.OS.PROD=":EST.PROD.OS.PROD:"~EST.PROD.OS.TYPE=":EST.PROD.OS.TYPE:"~EST.PROD.OS.USAGE=":EST.PROD.OS.USAGE:"~CCOPY.FLAG=":CCOPY.FLAG
	END ELSE
	   ESTDEPTINFO := "~EST.KEY=":EST.KEY:"~EST.CUST.NAME=":EST.CUST.NAME:"~EST.COMPONENT.CNT=":EST.COMPONENT.CNT:"~EST.DEPT.COMP=":EST.DEPT.COMP
	   ESTDEPTINFO := "~EST.DEPT=":EST.DEPT:"~EST.DEPT.DESC=":EST.DEPT.DESC:"~EST.COMP.FLAG=":EST.COMP.FLAG:"~EST.PROD.COMP.COMBINE=":EST.PROD.COMP.COMBINE
	   ESTDEPTINFO := "~EST.PROD.PQTY=":EST.PROD.PQTY:"~EST.PROD.PCST=":EST.PROD.PCST:"~EST.BOOK.BIND.REQ=":EST.BOOK.BIND.REQ:"~EST.PROD.BS.REQ=":EST.PROD.BS.REQ:"~EST.PROD.PS.REQ=":EST.PROD.PS.REQ
	   ESTDEPTINFO := "~EST.PROD.MR.REQ=":EST.PROD.MR.REQ:"~EST.PROD.M.WT=":EST.PROD.M.WT:"~EST.PROD.PSS.OSS=":EST.PROD.PSS.OSS:"~EST.PROD.OS.PROD=":EST.PROD.OS.PROD:"~EST.PROD.OS.TYPE=":EST.PROD.OS.TYPE:"~EST.PROD.OS.USAGE=":EST.PROD.OS.USAGE:"~CCOPY.FLAG=":CCOPY.FLAG
	END

*	 	MATREAD EST.REC FROM ESTIMATE, EST.ID THEN
*		FOR S=1 TO DCOUNT(EST.COMP.FLAG,VM)
*			FINALCOMPS=FINALCOMPS :EST.COMP.FLAG<1,S,COMPNO> :VM
*		NEXT
*	 	END ELSE
*        	FINALCOMPS= '' 
*       	END


   STATUS = RBO.setProperty('', 'ESTDEPTINFO', ESTDEPTINFO)
   STATUS = RBO.setProperty('', 'ServerMessage', ERRMSG)
   RETURN
90000*
   STATUS = RBO.setProperty('', 'ServerMessage', ERRMSG)
RETURN

*****************************************************************************************
************************************* SUBROUTINES ***************************************
*****************************************************************************************


*****************************************************************************************
* CALL EST.CALC.STK
*****************************************************************************************

EST_CALC_STK:

      QCNT = COUNT(EST.QTY,VM) + (EST.QTY # "")
      CCNT = COUNT(EST.PROD.OS.TYPE,VM) + (EST.PROD.OS.TYPE # "")
*
*---- RE-CALCULATE PAPER REQUIREMENTS
*
      FOR COMP = 1 TO CCNT
         CHECK.FLAG = 0

         IF EST.PROD.OS.TYPE<1,COMP> # "" AND EST.PROD.PRESS.ID<1,COMP> # "" THEN
            WEB.CNT = COUNT(EST.PROD.OS.USAGE<1,COMP>,SM)+1
            FOR MPTR = 1 TO WEB.CNT
               MATREAD ESTM.REC FROM ESTIMATE.MATL,CONO:EST.PROD.OS.TYPE<1,COMP>:EST.PROD.OS.USAGE<1,COMP,MPTR> ELSE
                  MAT ESTM.REC = ""
               END
         BEGIN CASE
               CASE EST.PROD.OS.TYPE<1,COMP> = "S"
*		  CALL EST.PROD.SUB.1A(CONO,"",COMP,MPTR)
		  GOSUB EST_PROD_SUB_1A
	       CASE EST.PROD.OS.TYPE<1,COMP> = "R"
*                  CALL EST.PROD.SUB.1B(CONO,"",COMP,MPTR)
		   GOSUB EST_PROD_SUB_1B
               END CASE
               COST = FIELD(EST.PROD.PCST<1,COMP,MPTR>,"!",1)
               FOR QPTR = 2 TO QCNT
                  IF FIELD(EST.PROD.PCST<1,COMP,MPTR>,"!",QPTR) = "" THEN
*                     MACRO REPVAL;EST.PROD.PCST<1,COMP,MPTR>;"!";QPTR;COST
		      CALL ESTCEM_MACRO_REPVAL(EST.PROD.PCST<1,COMP,MPTR>,"!",QPTR,COST)
                  END ELSE
                     COST = FIELD(EST.PROD.PCST<1,COMP,MPTR>,"!",QPTR)
                  END
               NEXT QPTR
            NEXT MPTR
         END
         IF CHECK.FLAG THEN
            ERRMSG = "Please check stock pricing for component ":COMP:". Press <RETURN> to continue "
	    RETURN
         END
      NEXT COMP
*      CALL EST.CALC.STK.PRICE(CONO,"")
       GOSUB EST_CALC_STK_PRICE

*** OUTPUT FROM THIS SUBROUTINE ***
*EST.PROD.PCST
*ERRMSG
***
99999
RETURN

*****************************************************************************************
* CALL EST.PROD.SUB.1A
*****************************************************************************************
EST_PROD_SUB_1A:

*NCTR = 1
*XVAR = ''
*PCTR = 1
**MYCNTR=1
**TEMPVAR=''

*EST.PROD.PASSES=''
EST.PROD.M.WT=''
EST.PROD.PSS.OSS=''
BIND.SPOIL=''
TEMPEQTY=''
RUN.SHT=''
SPL.SHT=''
TOT.SHT=''
**ORD.LBS=''
COST=''
NXTVAR=''


*EST.PROD.INV.ID = EST_INV_ID

   IF FILEINFO(WAREHOUSE,0)=0 THEN
      OPEN '','WAREHOUSE' TO WAREHOUSE ELSE
         ERRMSG='WAREHOUSE FILE IS MISSING'
         GOTO 99999
      END
   END
*---- INITIALIZATION
*
   PRICE.FLAG = CO.JES.PARAM<1,11>
   IF PRICE.FLAG = "" THEN PRICE.FLAG = "X"
   INV.ID = EST.PROD.INV.ID<1,COMP,MPTR>
   IF PRICE.FLAG # "X" AND INV.ID # "" THEN
      ICOST = ""
      MATREAD INV.REC FROM INVENTORY, CONO:INV.ID ELSE
         MAT INV.REC = ""
      END
      WCNT=DCOUNT(INV.WHSE.CODE,VM)
      FOR WP = 1 TO WCNT
         WHSE = INV.WHSE.CODE<1,WP>
         IWH.ID = CONO:INV.ID:"!":WHSE
         MATREAD IWH.REC FROM INV.WHSE,IWH.ID ELSE
            MAT IWH.REC = ""
         END
         SCOST = ""
         BEGIN CASE
            CASE PRICE.FLAG = "L"
               IF IWH.LIST.COST # "" THEN
                  SCOST = INT(IWH.LIST.COST / 100 + 0.99)
               END
            CASE PRICE.FLAG = "A"
               IF IWH.AVG.COST # "" THEN
                  SCOST = INT(IWH.AVG.COST / 100 + 0.99)
               END
            CASE PRICE.FLAG = "S"
               IF IWH.STD.COST # "" THEN
                  SCOST = INT(IWH.STD.COST / 100 + 0.99)
               END
            CASE PRICE.FLAG = "R"
               DIV.POS='' ; FISCAL.FLAG='IC' ; TRAN.PERIOD=''
		
	       
*	       CALL GET.LAST.COST(IWH.ID,MAT IWH.REC,WAREHOUSE,CONTROL,ERR.FLG,ERRMSG,DIV.POS,FISCAL.FLAG,TRAN.PERIOD,LAST.PRICE)
	       GOSUB GET_LAST_COST

	       BEGIN CASE
                  CASE ERR.FLG=''
                     SCOST=INT(LAST.PRICE/100+0.99)
                  CASE ERR.FLG="-1"
                     CONTINUE
                  CASE ERR.FLG='-2'
*			GOSUB 93000		  
               END CASE
         END CASE
         BEGIN CASE
            CASE SCOST = ""
            CASE ICOST = ""
               ICOST = SCOST
            CASE SCOST > ICOST
               ICOST = SCOST
         END CASE
      NEXT WP
      IF ICOST+0 > 0 THEN
         ICOST = INT(ICOST * (INV.M.WT * 100 / INV.COST.WT) + 0.5)
      END
   END
   QLC = COUNT(EST.QTY,VM) + (EST.QTY # "")
   PLC = COUNT(EST.PROD.PQTY<1,COMP,MPTR>,"!") + (EST.PROD.PQTY<1,COMP,MPTR> # "")
   FOR X = PLC TO QLC+1 STEP -1
*     MACRO DELVAL;EST.PROD.PQTY<1,COMP,MPTR>;"!";X
*     MACRO DELVAL;EST.PROD.PCST<1,COMP,MPTR>;"!";X

      CALL ESTCEM_MACRO_DELVAL(EST.PROD.PQTY<1,COMP,MPTR>,"!",X)
      CALL ESTCEM_MACRO_DELVAL(EST.PROD.PCST<1,COMP,MPTR>,"!",X)

   NEXT X
   LOCATE EST.PROD.OS.PROD<1,COMP,MPTR> IN ESTM.PROD<1>,1 SETTING MP ELSE
      MP = 999
   END
   MATREAD ESTPG.REC FROM ESTIMATE.PAPER.GROUP, CONO:EST.PROD.OS.USAGE<1,COMP,MPTR> ELSE
      ERRMSG = "Invalid paper group"
      RETURN
   END
   IF NOT(NUM(EST.PROD.BIND.SPOIL<1,COMP,1>)) THEN
      MATREAD BST.REC FROM ESTIMATE.BIND.SPOIL,CONO:EST.PROD.BIND.SPOIL<1,COMP,1> ELSE
         MAT BST.REC = ""
      END
   END
   IF NOT(NUM(EST.PROD.PRESS.SPOIL<1,COMP,1>)) THEN
      MATREAD PST.REC FROM ESTIMATE.PRESS.SPOIL,CONO:EST.PROD.PRESS.SPOIL<1,COMP,1> ELSE
         MAT PST.REC = ""
      END
   END
*
*---- MAIN PROCESSING
*
100*
   OUT1 = 0
   OUT2 = 0
   OSW = EST.PROD.OS.WIDTH<1,COMP,MPTR>
   OSL = EST.PROD.OS.LENGTH<1,COMP,MPTR>
   OSG = EST.PROD.OS.GRAIN<1,COMP,MPTR>
   PSW = EST.PROD.PS.WIDTH<1,COMP,MPTR>
   PSL = EST.PROD.PS.LENGTH<1,COMP,MPTR>
   PSG = EST.PROD.PS.GRAIN<1,COMP,MPTR>
   IF OSG # PSG OR OSG = "" OR PSG = "" THEN
      CUT.W = INT(OSW/PSL-1+0.9999)
      OUT.W = INT(OSW/PSL)
      CUT.L = INT(OSL/PSW-1+0.9999)
      OUT.L = INT(OSL/PSW)
      CUT1 = CUT.W+CUT.L
      OUT1 = OUT.W*OUT.L
      REM.W = OSW - (PSL * OUT.W)
      IF REM.W >= PSW AND (OSG = "" OR PSG = "") THEN
         CUT.W = INT(REM.W/PSW-1+0.9999)
         OUT.W = INT(REM.W/PSW)
         CUT.L = INT(OSL/PSL-1+0.9999)
         OUT.L = INT(OSL/PSL)
         CUT1 = CUT1 + CUT.W + CUT.L
         OUT1 = OUT1 + (OUT.W * OUT.L)
      END
   END
   IF OSG = PSG OR OSG = "" OR PSG = "" THEN
      CUT.W = INT(OSW/PSW-1+0.9999)
      OUT.W = INT(OSW/PSW)
      CUT.L = INT(OSL/PSL-1+0.999)
      OUT.L = INT(OSL/PSL)
      CUT2 = CUT.W+CUT.L
      OUT2 = OUT.W*OUT.L
      REM.L = OSL - (PSL * OUT.L)
      IF REM.L >= PSW AND (OSG = "" OR PSG = "") THEN
         CUT.W = INT(OSW/PSL-1+0.9999)
         OUT.W = INT(OSW/PSL)
         CUT.L = INT(REM.L/PSW-1+0.9999)
         OUT.L = INT(REM.L/PSW)
         CUT2 = CUT2 + CUT.W + CUT.L
         OUT2 = OUT2 + (OUT.W * OUT.L)
      END
   END
   BEGIN CASE
      CASE OSG = "" OR PSG = ""
         IF OUT1 > OUT2 THEN
            NUMBER.OUT = OUT1
         END ELSE
            NUMBER.OUT = OUT2
         END
      CASE OSG # PSG
         NUMBER.OUT = OUT1
      CASE OSG = PSG
         NUMBER.OUT = OUT2
   END CASE
   BW = EST.PROD.BASIS.WT<1,COMP,MPTR>
   BSW = ESTPG.WIDTH/10000
   BSL = ESTPG.LENGTH/10000
   OSW = EST.PROD.OS.WIDTH<1,COMP,MPTR>/10000
   OSL = EST.PROD.OS.LENGTH<1,COMP,MPTR>/10000
   M.WEIGHT = 2 * BW * (OSW * OSL) / (BSW * BSL)
   M.WEIGHT = INT(M.WEIGHT * 100 + 0.5) / 100

*******
   EST.PROD.M.WT<1,COMP,MPTR> = M.WEIGHT * 100
   EST.PROD.PSS.OSS<1,COMP,MPTR> = NUMBER.OUT
*******   

   NUMBER.UP = EST.PROD.NO.UP<1,COMP,1>+0
   IF NUMBER.UP = 0 THEN NUMBER.UP = 1
   FORMS = EST.PROD.FORMS<1,COMP,1>+0
   IF FORMS = 0 THEN FORMS = 1
   MF = EST.PROD.PASSES<1,COMP,MPTR>
   
   FOR QPTR = 1 TO QLC
      EQTY = EST.QTY<1,QPTR>
      BEGIN CASE
         CASE EST.PROD.BIND.SPOIL<1,COMP,1> = "MULT"
            BIND.SPOIL = 0
            FOR MQ = 1 TO 3
               QTY = FIELD(EST.BOOK.BIND.QTY<1,1,MQ>,"!",QPTR)+0
               BSP = EST.BOOK.BIND.SPOIL<1,1,MQ>
               BEGIN CASE
                  CASE QTY = 0
                     BSM = 0
                  CASE NUM(BSP)
                     BSM = INT(QTY*(BSP/100)+0.99)
                  CASE 1
                     MATREAD BST.REC FROM ESTIMATE.BIND.SPOIL,CONO:BSP ELSE MAT BST.REC = ""
                     LOCATE QTY IN BST.QTY<1>,1 BY "AR" SETTING BP ELSE NULL
                     BEGIN CASE
                        CASE BP = 1
                           BSPCT = BST.PCT<1,BP>
                        CASE BP > COUNT(BST.QTY,VM) + 1
                           BSPCT = BST.PCT<1,BP-1>
                        CASE BST.EXTR = "Y"
                           BSPCT = INT(BST.PCT<1,BP>-(BST.QTY<1,BP>-QTY)/(BST.QTY<1,BP>-BST.QTY<1,BP-1>)*(BST.PCT<1,BP>-BST.PCT<1,BP-1>)+0.5)
                        CASE 1
                           BSPCT = BST.PCT<1,BP>
                     END CASE
                     BSM = INT(QTY*(BSPCT/10000)+0.99)
                     IF BSM < BST.MIN.QTY THEN BSM = BST.MIN.QTY
               END CASE
               BIND.SPOIL = BIND.SPOIL + BSM

*               MACRO REPVAL;EST.BOOK.BIND.REQ<1,COMP,MQ>;"!";QPTR;BSM
		CALL ESTCEM_MACRO_REPVAL(EST.BOOK.BIND.REQ<1,COMP,MQ>,"!",QPTR,BSM)

            NEXT MQ
         CASE NUM(EST.PROD.BIND.SPOIL<1,COMP,1>)
            BIND.SPOIL = INT(EQTY * (EST.PROD.BIND.SPOIL<1,COMP,1>/100) + 0.99)
         CASE 1
            LOCATE EQTY IN BST.QTY<1>,1 BY "AR" SETTING BP ELSE NULL
            BEGIN CASE
               CASE BP = 1
                  BSPCT = BST.PCT<1,BP>
               CASE BP > COUNT(BST.QTY,VM) + 1
                  BSPCT = BST.PCT<1,BP-1>
               CASE BST.EXTR = "Y"
                  BSPCT = INT(BST.PCT<1,BP>-(BST.QTY<1,BP>-EQTY)/(BST.QTY<1,BP>-BST.QTY<1,BP-1>)*(BST.PCT<1,BP>-BST.PCT<1,BP-1>)+0.5)
               CASE 1
                  BSPCT = BST.PCT<1,BP>
            END CASE
            BIND.SPOIL = INT(EQTY * (BSPCT/10000) + 0.99)
            IF BIND.SPOIL < BST.MIN.QTY THEN BIND.SPOIL = BST.MIN.QTY
      END CASE

*       MACRO REPVAL;EST.PROD.BS.REQ<1,COMP,1>;"!";QPTR;BIND.SPOIL
	CALL ESTCEM_MACRO_REPVAL(EST.PROD.BS.REQ<1,COMP,1>,"!",QPTR,BIND.SPOIL)

      PROD.QTY = EQTY + BIND.SPOIL
      RUN.SHT = INT(PROD.QTY / NUMBER.UP + 0.99)
      RUN.IMP = RUN.SHT              ;* Impressions per pass
      IF NUM(EST.PROD.PRESS.SPOIL<1,COMP,1>) THEN
         SPL.SHT = INT(RUN.IMP * (EST.PROD.PRESS.SPOIL<1,COMP,1>/100) + 0.99)
      END ELSE
         LOCATE RUN.IMP IN PST.QTY<1>,1 BY "AR" SETTING P ELSE NULL
         BEGIN CASE
            CASE P = 1
               PSPCT = PST.PCT<1,P>
            CASE P > COUNT(PST.QTY,VM) + 1
               PSPCT = PST.PCT<1,P-1>
            CASE PST.EXTR = "Y"
               PSPCT = INT(PST.PCT<1,P>-(PST.QTY<1,P>-RUN.IMP)/(PST.QTY<1,P>-PST.QTY<1,P-1>)*(PST.PCT<1,P>-PST.PCT<1,P-1>)+0.5)
            CASE 1
               PSPCT = PST.PCT<1,P>
         END CASE
         SPL.SHT = INT(RUN.IMP * (PSPCT/10000) + 0.99)
      END
      SPL.SHT = SPL.SHT * MF

*       MACRO REPVAL;EST.PROD.PS.REQ<1,COMP,MPTR>;"!";QPTR;SPL.SHT
	CALL ESTCEM_MACRO_REPVAL(EST.PROD.PS.REQ<1,COMP,MPTR>,"!",QPTR,SPL.SHT)

      MR.SHT = EST.PROD.INIT.MR.CNT<1,COMP,MPTR> * EST.PROD.INIT.MR.IMP<1,COMP,MPTR>
      MR.SHT = MR.SHT + (EST.PROD.SUBS.MR.CNT<1,COMP,MPTR> * EST.PROD.SUBS.MR.IMP<1,COMP,MPTR>)

*      MACRO REPVAL;EST.PROD.MR.REQ<1,COMP,MPTR>;"!";QPTR;MR.SHT
       CALL ESTCEM_MACRO_REPVAL(EST.PROD.MR.REQ<1,COMP,MPTR>,"!",QPTR,MR.SHT)

      TOT.SHT = MR.SHT + ((RUN.SHT + SPL.SHT) * FORMS)
      IF NUMBER.OUT = 0 THEN
         ORD.SHT = 0
      END ELSE
         ORD.SHT = INT(TOT.SHT / NUMBER.OUT + 0.99)
      END
*      MACRO REPVAL;EST.PROD.PQTY<1,COMP,MPTR>;"!";QPTR;ORD.SHT
       CALL ESTCEM_MACRO_REPVAL(EST.PROD.PQTY<1,COMP,MPTR>,"!",QPTR,ORD.SHT)

      IF PRICE.FLAG = "X" OR EST.PROD.INV.ID<1,COMP,MPTR> = "" THEN
         LOCATE ORD.SHT IN ESTM.END.QTY<1,MP>,1 BY "AR" SETTING PP ELSE NULL
         IF PP > COUNT(ESTM.END.QTY<1,MP>,SM) + 1 THEN PP = PP - 1
         COST = ESTM.QCOST<1,MP,PP>
      END ELSE
         COST = ICOST
      END
      IF COST # "" THEN
*         MACRO REPVAL;EST.PROD.PCST<1,COMP,MPTR>;"!";QPTR;COST
          CALL ESTCEM_MACRO_REPVAL(EST.PROD.PCST<1,COMP,MPTR>,"!",QPTR,COST)
      END

*      MACRO REPVAL;EST.PROD.IMP<1,COMP,MPTR>;"!";QPTR;(RUN.SHT + SPL.SHT) * MF
       CALL ESTCEM_MACRO_REPVAL(EST.PROD.IMP<1,COMP,MPTR>,"!",QPTR,(RUN.SHT + SPL.SHT) * MF)
   NEXT QPTR

*   ESTDEPTINFO = "EST.PROD.PQTY=":EST.PROD.PQTY:"``":"EST.PROD.PCST=":EST.PROD.PCST:"``":"EST.BOOK.BIND.REQ=":EST.BOOK.BIND.REQ:"``EST.PROD.BS.REQ=":EST.PROD.BS.REQ:"``EST.PROD.PS.REQ=":EST.PROD.PS.REQ:"``EST.PROD.MR.REQ=":EST.PROD.MR.REQ:"``EST.PROD.M.WT=":EST.PROD.M.WT:"``EST.PROD.PSS.OSS=":EST.PROD.PSS.OSS
*   STATUS = RBO.getProperty('', 'ESTDEPTINFO',ESTDEPTINFO)
RETURN


*****************************************************************************************
* CALL EST.PROD.SUB.1B
*****************************************************************************************
EST_PROD_SUB_1B:

   IF FILEINFO(WAREHOUSE,0)=0 THEN        
      OPEN '','WAREHOUSE' TO WAREHOUSE ELSE
         ERRMSG='WAREHOUSE FILE IS MISSING' 
	 RETURN
      END                                  
   END                                    
   PRICE.FLAG = CO.JES.PARAM<1,11>
   IF PRICE.FLAG = "" THEN PRICE.FLAG = "X"
   INV.ID = EST.PROD.INV.ID<1,COMP,MPTR>
   IF PRICE.FLAG # "X" AND INV.ID # "" THEN
      ICOST = ""
      MATREAD INV.REC FROM INVENTORY, CONO:INV.ID ELSE
         MAT INV.REC = ""
      END
      WCNT=DCOUNT(INV.WHSE.CODE,VM)
      FOR WP = 1 TO WCNT
         WHSE = INV.WHSE.CODE<1,WP>
         IWH.ID = CONO:INV.ID:"!":WHSE
         MATREAD IWH.REC FROM INV.WHSE,IWH.ID ELSE
            MAT IWH.REC = ""
         END
         SCOST = ""
         BEGIN CASE
            CASE PRICE.FLAG = "L"
               IF IWH.LIST.COST # "" THEN
                  SCOST = INT(IWH.LIST.COST / 100 + 0.99)
               END
            CASE PRICE.FLAG = "A"
               IF IWH.AVG.COST # "" THEN
                  SCOST = INT(IWH.AVG.COST / 100 + 0.99)
               END
            CASE PRICE.FLAG = "S"
               IF IWH.STD.COST # "" THEN
                  SCOST = INT(IWH.STD.COST / 100 + 0.99)
               END
            CASE PRICE.FLAG = "R"
               DIV.POS='' ; FISCAL.FLAG='IC' ; TRAN.PERIOD=''

*	       CALL GET.LAST.COST(IWH.ID,MAT IWH.REC,WAREHOUSE,CONTROL,ERR.FLG,ERRMSG,DIV.POS,FISCAL.FLAG,TRAN.PERIOD,LAST.PRICE)
               GOSUB GET_LAST_COST

	       BEGIN CASE
                  CASE ERR.FLG=''
                     SCOST=INT(LAST.PRICE/100+0.99)
                  CASE ERR.FLG="-1"
                     CONTINUE
                  CASE ERR.FLG='-2'
*                     GOSUB 93000
               END CASE
         END CASE
         BEGIN CASE
            CASE SCOST = ""
            CASE ICOST = ""
               ICOST = SCOST
            CASE SCOST > ICOST
               ICOST = SCOST
         END CASE
      NEXT WP
   END
   QLC = COUNT(EST.QTY,VM) + (EST.QTY # "")
   PLC = COUNT(EST.PROD.PQTY<1,COMP,MPTR>,"!") + (EST.PROD.PQTY<1,COMP,MPTR> # "")
   FOR X = PLC TO QLC+1 STEP -1

*      MACRO DELVAL;EST.PROD.PQTY<1,COMP,MPTR>;"!";X
*      MACRO DELVAL;EST.PROD.PCST<1,COMP,MPTR>;"!";X

      CALL ESTCEM_MACRO_DELVAL(EST.PROD.PQTY<1,COMP,MPTR>,"!",X)
      CALL ESTCEM_MACRO_DELVAL(EST.PROD.PCST<1,COMP,MPTR>,"!",X)

   NEXT X
   LOCATE EST.PROD.OS.PROD<1,COMP,MPTR> IN ESTM.PROD<1>,1 SETTING MP ELSE
      ERRMSG = "Cannot locate product in material record"
      RETURN
   END
   MATREAD ESTPG.REC FROM ESTIMATE.PAPER.GROUP, CONO:EST.PROD.OS.USAGE<1,COMP,MPTR> ELSE
      ERRMSG = "Invalid paper group"
      RETURN
   END
   MATREAD EQUIPMENT.REC FROM EQUIPMENT, CONO:EST.PROD.PRESS.ID<1,COMP> ELSE
      ERRMSG = "Invalid press ID"
      RETURN
   END
   IF NOT(NUM(EST.PROD.BIND.SPOIL<1,COMP,1>)) THEN
      MATREAD BST.REC FROM ESTIMATE.BIND.SPOIL,CONO:EST.PROD.BIND.SPOIL<1,COMP,1> ELSE
         MAT BST.REC = ""
      END
   END
   IF NOT(NUM(EST.PROD.PRESS.SPOIL<1,COMP,1>)) THEN
      MATREAD PST.REC FROM ESTIMATE.PRESS.SPOIL,CONO:EST.PROD.PRESS.SPOIL<1,COMP,1> ELSE
         MAT PST.REC = ""
      END
   END
*
*---- MAIN PROCESSING
*
1000*
   BW = EST.PROD.BASIS.WT<1,COMP,MPTR>
   BSW = ESTPG.WIDTH/10000
   BSL = ESTPG.LENGTH/10000
   OSW = EST.PROD.OS.WIDTH<1,COMP,MPTR>/10000
      * TASK 16090 *
   IF EST.PROD.OS.LENGTH<1,COMP,1> NE "" THEN
      OSL = EST.PROD.OS.LENGTH<1,COMP,1>/10000
   END ELSE
      OSL = EQP.PRESS.CUTOFF.LEN/10000
   END
   M.WEIGHT = 2 * BW * (OSW * OSL) / (BSW * BSL)
   M.WEIGHT = INT(M.WEIGHT * 100 + 0.5) / 100

****
   EST.PROD.M.WT<1,COMP,MPTR> = M.WEIGHT * 100
   EST.PROD.PSS.OSS<1,COMP,MPTR> = 1
****   
   NUMBER.UP = EST.PROD.NO.UP<1,COMP,1>+0
   IF NUMBER.UP = 0 THEN NUMBER.UP = 1
   FORMS = EST.PROD.FORMS<1,COMP,1>+0
   IF FORMS = 0 THEN FORMS = 1
   FOR QPTR = 1 TO QLC
      EQTY = EST.QTY<1,QPTR>
      BEGIN CASE
         CASE EST.PROD.BIND.SPOIL<1,COMP,1> = "MULT"
            BIND.SPOIL = 0
            FOR MQ = 1 TO 3
               QTY = FIELD(EST.BOOK.BIND.QTY<1,1,MQ>,"!",QPTR)+0
               BSP = EST.BOOK.BIND.SPOIL<1,1,MQ>
               BEGIN CASE
                  CASE QTY = 0
                     BSM = 0
                  CASE NUM(BSP)
                     BSM = INT(QTY*(BSP/100)+0.99)
                  CASE 1
                     MATREAD BST.REC FROM ESTIMATE.BIND.SPOIL,CONO:BSP ELSE MAT BST.REC = ""
                     LOCATE QTY IN BST.QTY<1>,1 BY "AR" SETTING BP ELSE NULL
                     BEGIN CASE
                        CASE BP = 1
                           BSPCT = BST.PCT<1,BP>
                        CASE BP > COUNT(BST.QTY,VM) + 1
                           BSPCT = BST.PCT<1,BP-1>
                        CASE BST.EXTR = "Y"
                           BSPCT = INT(BST.PCT<1,BP>-(BST.QTY<1,BP>-QTY)/(BST.QTY<1,BP>-BST.QTY<1,BP-1>)*(BST.PCT<1,BP>-BST.PCT<1,BP-1>)+0.5)
                        CASE 1
                           BSPCT = BST.PCT<1,BP>
                     END CASE
                     BSM = INT(QTY*(BSPCT/10000)+0.99)
                     IF BSM < BST.MIN.QTY THEN BSM = BST.MIN.QTY
               END CASE
               BIND.SPOIL = BIND.SPOIL + BSM
*               MACRO REPVAL;EST.BOOK.BIND.REQ<1,COMP,MQ>;"!";QPTR;BSM
		CALL ESTCEM_MACRO_REPVAL(EST.BOOK.BIND.REQ<1,COMP,MQ>,"!",QPTR,BSM)

            NEXT MQ
         CASE NUM(EST.PROD.BIND.SPOIL<1,COMP,1>)
            BIND.SPOIL = INT(EQTY * (EST.PROD.BIND.SPOIL<1,COMP,1>/100) + 0.99)
         CASE 1
            LOCATE EQTY IN BST.QTY<1>,1 BY "AR" SETTING BP ELSE NULL
            BEGIN CASE
               CASE BP = 1
                  BSPCT = BST.PCT<1,BP>
               CASE BP > COUNT(BST.QTY,VM) + 1
                  BSPCT = BST.PCT<1,BP-1>
               CASE BST.EXTR = "Y"
                  BSPCT = INT(BST.PCT<1,BP>-(BST.QTY<1,BP>-EQTY)/(BST.QTY<1,BP>-BST.QTY<1,BP-1>)*(BST.PCT<1,BP>-BST.PCT<1,BP-1>)+0.5)
               CASE 1
                  BSPCT = BST.PCT<1,BP>
            END CASE
            BIND.SPOIL = INT(EQTY * (BSPCT/10000) + 0.99)
            IF BIND.SPOIL < BST.MIN.QTY THEN BIND.SPOIL = BST.MIN.QTY
      END CASE

*     MACRO REPVAL;EST.PROD.BS.REQ<1,COMP,MPTR>;"!";QPTR;BIND.SPOIL
      CALL ESTCEM_MACRO_REPVAL(EST.PROD.BS.REQ<1,COMP,MPTR>,"!",QPTR,BIND.SPOIL)

      PROD.QTY = EQTY + BIND.SPOIL
      RUN.SHT = INT(PROD.QTY / NUMBER.UP + 0.99)
      RUN.IMP = RUN.SHT              ;* Impressions per pass
      IF NUM(EST.PROD.PRESS.SPOIL<1,COMP,1>) THEN
         SPL.SHT = INT(RUN.IMP * (EST.PROD.PRESS.SPOIL<1,COMP,1>/100) + 0.99)
      END ELSE
         LOCATE RUN.IMP IN PST.QTY<1>,1 BY "AR" SETTING P ELSE NULL
         BEGIN CASE
            CASE P = 1
               PSPCT = PST.PCT<1,P>
            CASE P > COUNT(PST.QTY,VM) + 1
               PSPCT = PST.PCT<1,P-1>
            CASE PST.EXTR = "Y"
               PSPCT = INT(PST.PCT<1,P>-(PST.QTY<1,P>-RUN.IMP)/(PST.QTY<1,P>-PST.QTY<1,P-1>)*(PST.PCT<1,P>-PST.PCT<1,P-1>)+0.5)
            CASE 1
               PSPCT = PST.PCT<1,P>
         END CASE
         SPL.SHT = INT(RUN.IMP * (PSPCT/10000) + 0.99)
      END
*     MACRO REPVAL;EST.PROD.PS.REQ<1,COMP,MPTR>;"!";QPTR;SPL.SHT
      CALL ESTCEM_MACRO_REPVAL(EST.PROD.PS.REQ<1,COMP,MPTR>,"!",QPTR,SPL.SHT)

      MR.SHT = EST.PROD.INIT.MR.CNT<1,COMP,MPTR> * EST.PROD.INIT.MR.IMP<1,COMP,MPTR>
      MR.SHT = MR.SHT + (EST.PROD.SUBS.MR.CNT<1,COMP,MPTR> * EST.PROD.SUBS.MR.IMP<1,COMP,MPTR>)

*     MACRO REPVAL;EST.PROD.MR.REQ<1,COMP,MPTR>;"!";QPTR;MR.SHT
      CALL ESTCEM_MACRO_REPVAL(EST.PROD.MR.REQ<1,COMP,MPTR>,"!",QPTR,MR.SHT)

      TOT.SHT = MR.SHT + ((RUN.SHT + SPL.SHT) * FORMS)
      ORD.SHT = TOT.SHT
      ORD.LBS = INT(M.WEIGHT*(ORD.SHT/1000)+0.5)

*     MACRO REPVAL;EST.PROD.PQTY<1,COMP,MPTR>;"!";QPTR;ORD.LBS
      CALL ESTCEM_MACRO_REPVAL(EST.PROD.PQTY<1,COMP,MPTR>,"!",QPTR,ORD.LBS)

      IF PRICE.FLAG = "X" OR EST.PROD.INV.ID<1,COMP,MPTR> = "" THEN
         LOCATE ORD.LBS IN ESTM.END.QTY<1,MP>,1 BY "AR" SETTING PP ELSE NULL
         IF PP > COUNT(ESTM.END.QTY<1,MP>,SM) + 1 THEN PP = PP - 1
         COST = ESTM.QCOST<1,MP,PP>
      END ELSE
         COST = ICOST
      END
      IF COST # "" THEN

*        MACRO REPVAL;EST.PROD.PCST<1,COMP,MPTR>;"!";QPTR;COST
	 CALL ESTCEM_MACRO_REPVAL(EST.PROD.PCST<1,COMP,MPTR>,"!",QPTR,COST)
      END

*     MACRO REPVAL;EST.PROD.IMP<1,COMP,MPTR>;"!";QPTR;(RUN.SHT + SPL.SHT)
      CALL ESTCEM_MACRO_REPVAL(EST.PROD.IMP<1,COMP,MPTR>,"!",QPTR,(RUN.SHT + SPL.SHT))

   NEXT QPTR
   
*   ESTDEPTINFO = "EST.PROD.PQTY=":EST.PROD.PQTY:"``":"EST.PROD.PCST=":EST.PROD.PCST:"``":"EST.BOOK.BIND.REQ=":EST.BOOK.BIND.REQ:"``EST.PROD.BS.REQ=":EST.PROD.BS.REQ:"``EST.PROD.PS.REQ=":EST.PROD.PS.REQ:"``EST.PROD.MR.REQ=":EST.PROD.MR.REQ:"``EST.PROD.M.WT=":EST.PROD.M.WT:"``EST.PROD.PSS.OSS=":EST.PROD.PSS.OSS
*   STATUS = RBO.getProperty('', 'ESTDEPTINFO',ESTDEPTINFO)
   STATUS = RBO.setProperty('', 'ServerMessage', ERRMSG)

RETURN


*****************************************************************************************
* CALL EST.CALC.STK.PRICE
*****************************************************************************************
EST_CALC_STK_PRICE:

      PRODS = ""
      PQTYS = ""
      PFLGS = ""
      QCNT = COUNT(EST.QTY,VM) + (EST.QTY # "")
      CCNT = COUNT(EST.PROD.OS.TYPE,VM) + (EST.PROD.OS.TYPE # "")
      PRICE.FLAG = CO.JES.PARAM<1,11>
      IF PRICE.FLAG = "" THEN PRICE.FLAG = "X"
*
*---- MAIN PROCESSING
*
      FOR COMP = 1 TO CCNT
         WEB.CNT = EST.PROD.WEB.CNT<1,COMP>+0
         IF WEB.CNT = 0 THEN WEB.CNT = 1
         FOR MPTR = 1 TO WEB.CNT
            IF PRICE.FLAG # "X" AND EST.PROD.INV.ID<1,COMP,MPTR> # "" THEN GOTO 190
            PROD = EST.PROD.OS.PROD<1,COMP,MPTR>:"!":EST.PROD.OS.TYPE<1,COMP>:"!":EST.PROD.OS.USAGE<1,COMP,MPTR>
            LOCATE PROD IN PRODS<1>,1 SETTING PPTR ELSE
               PRODS<1,PPTR> = PROD
            END
            PFLGS<1,PPTR> = PFLGS<1,PPTR> + 1
            PLC = COUNT(EST.PROD.PQTY<1,COMP,MPTR>,"!") + (EST.PROD.PQTY<1,COMP,MPTR> # "")
            FOR X = PLC TO QCNT+1 STEP -1
*              EST.PROD.PQTY = DELETE(EST.PROD.PQTY,1,COMP,X)

*               MACRO DELVAL;EST.PROD.PQTY<1,COMP,MPTR>;"!";X
		CALL ESTCEM_MACRO_DELVAL(EST.PROD.PQTY<1,COMP,MPTR>,"!",X)

*              EST.PROD.PCST = DELETE(EST.PROD.PCST,1,COMP,X)
*               MACRO DELVAL;EST.PROD.PCST<1,COMP,MPTR>;"!";X
		CALL ESTCEM_MACRO_DELVAL(EST.PROD.PCST<1,COMP,MPTR>,"!",X)
            NEXT X
            FOR QPTR = 1 TO QCNT
               PQTY = FIELD(EST.PROD.PQTY<1,COMP,MPTR>,"!",QPTR)
               PQTYS<1,PPTR,QPTR> = PQTYS<1,PPTR,QPTR> + PQTY
            NEXT QPTR
190      NEXT MPTR
      NEXT COMP
*
*---- CALCULATE STOCK PRICING
*
      PCNT = COUNT(PRODS,VM) + (PRODS # "")
      FOR PPTR = 1 TO PCNT
         IF PFLGS<1,PPTR> = 1 THEN GOTO 290
         PROD = PRODS<1,PPTR>
         PROD = FIELD(PRODS<1,PPTR>,"!",1)
         TYPE = FIELD(PRODS<1,PPTR>,"!",2)
         USAGE = FIELD(PRODS<1,PPTR>,"!",3)
         MATREAD ESTM.REC FROM ESTIMATE.MATL, CONO:TYPE:USAGE ELSE
            GOTO 290
         END
         LOCATE PROD IN ESTM.PROD<1>,1 SETTING MP ELSE GOTO 290
         FOR QPTR = 1 TO QCNT
            PQTY = PQTYS<1,PPTR,QPTR>
            LOCATE PQTY IN ESTM.END.QTY<1,MP>,1 BY "AR" SETTING PP ELSE NULL
            IF PP > COUNT(ESTM.END.QTY<1,MP>,SM) + 1 THEN PP = PP - 1
*           COST = INT(ORD.LBS / 100 * ESTM.QCOST<1,MP,PP> + 0.5)
            COST = ESTM.QCOST<1,MP,PP>
            IF COST = "" THEN GOTO 280
            FOR COMP = 1 TO CCNT
               WEB.CNT = EST.PROD.WEB.CNT<1,COMP>+0
               IF WEB.CNT = 0 THEN WEB.CNT = 1
               FOR MPTR = 1 TO WEB.CNT
*                 IF EST.PROD.OS.PROD<1,COMP,MPTR> = PROD THEN
*                    EST.PROD.PCST<1,COMP,QPTR> = COST
*                    MACRO REPVAL;EST.PROD.PCST<1,COMP,MPTR>;"!";QPTR;COST
*                 END
                  BEGIN CASE
                  CASE EST.PROD.OS.PROD<1,COMP,MPTR> # PROD
                  CASE EST.PROD.OS.TYPE<1,COMP,MPTR> # TYPE
                  CASE EST.PROD.OS.USAGE<1,COMP,MPTR> # USAGE
                  CASE 1
*                     MACRO REPVAL;EST.PROD.PCST<1,COMP,MPTR>;"!";QPTR;COST
		     CALL ESTCEM_MACRO_REPVAL(EST.PROD.PCST<1,COMP,MPTR>,"!",QPTR,COST)
                  END CASE
               NEXT MPTR
            NEXT COMP
280      NEXT QPTR
290   NEXT PPTR

*** OUTPUT FROM THIS SUBROUTINE ***
*EST.PROD.PQTY
*EST.PROD.PCST
*EST.PROD.OS.PROD
*EST.PROD.OS.TYPE
*EST.PROD.OS.USAGE
************************************
RETURN

*****************************************************************************************
* CALL GET.LAST.COST(IWH.ID,MAT IWH.REC,WAREHOUSE,CONTROL,ERR.FLG,ERRMSG,DIV.POS,FISCAL.FLAG,TRAN.PERIOD,LAST.PRICE)
*****************************************************************************************
GET_LAST_COST:

*   DEFFUN DIVISION.POSITION(CONO,CONTROL,DIV.CODE)
*   DEFFUN CURRENT.PERIOD(CONO,CONTROL,DIV.POS,FISCAL.FLAG)
    DEFFUN DIVISION.POSITION(CONO,CONTROL.FILE,DIV.CODE)
    DEFFUN CURRENT.PERIOD(CONO,CONTROL.FILE,DIV.POS,FISCAL.FLAG)
*
   IF FILEINFO(INV_RECP_WHSE,0)=0 THEN
      OPEN '','INV_RECP_WHSE' TO INV_RECP_WHSE ELSE 
         ERRMSG='INV_RECP_WHSE FILE IS MISSING.'
         ERR.FLG='-2'
      END
   END
*
   CONO=IWH.ID[1,3]
   WHSE=OCONV(IWH.ID,"G1!1")
   PERIOD=TRAN.PERIOD
   RCP.CNT=DCOUNT(IWH.RECP.NO,VM)
*
   IF RCP.CNT>0 THEN
      ERR.FLG=''; ERRMSG=''
      LAST.PRICE=''
      IF PERIOD='' THEN
         IF DIV.POS='' THEN
            WHSE.ID=CONO:WHSE
            MATREAD WHSE.REC FROM WAREHOUSE,WHSE.ID THEN 
               IF WHS.DIV='' THEN WHS.DIV='00'
               ;* get division position
               DIV.POS=DIVISION.POSITION(CONO,CONTROL,WHSE.DIV)
               IF DIV.POS<1,1>='' THEN
                  DIV.POS=DIV.POS<1,2>
               END ELSE
                  ERR.FLG=DIV.POS<1,1>
                  ERRMSG=DIV.POS<1,2>
               END
            END ELSE
               ERRMSG='WAREHOUSE RECORD ':WHSE.ID:' IS MISSING.'
               ERR.FLG="-2"
            END
         END
         ;* get the current period
         IF FISCAL.FLAG='' THEN FISCAL.FLAG='IC'
         PERIOD=CURRENT.PERIOD(CONO,CONTROL,DIV.POS,FISCAL.FLAG) 
         IF PERIOD<1,1>='' THEN
            PERIOD=PERIOD<1,2>
         END ELSE 
            ERR.FLG=PERIOD<1,1>
            ERRMSG=PERIOD<1,2>
         END
      END
      IF ERR.FLG='' THEN
         GOSUB FIND.RECP.NO
         IF (FOUND) THEN
            GOSUB GET.LAST.PRICE
         END
         IF LAST.PRICE='' THEN
            ERRMSG='Cannot get last price'
            ERR.FLG='-1'
         END
      END
   END ELSE
      ERRMSG='Cannot get last cost'
      ERR.FLG="-1"                 
   END
RETURN
**************************************************************************
*
**************
FIND.RECP.NO: 
**************
*
   IF PERIOD='ALL' THEN
      IRW.ID=CONO:IWH.RECP.NO<1,RCP.CNT>:"!":WHSE
   END ELSE
      LOCATE PERIOD IN IWH.RECP.PERIOD<1> SETTING BEG.POS THEN
         FOUND=0
         FOR P=BEG.POS TO RCP.CNT UNTIL FOUND
            IF IWH.RECP.PERIOD<1,P+1> > PERIOD THEN
               FOUND=1
               IRW.ID=CONO:IWH.RECP.NO<1,P>:"!":WHSE
            END
         NEXT P
         IF NOT(FOUND) THEN 
            IRW.ID=CONO:IWH.RECP.NO<1,RCP.CNT>:"!":WHSE
            FOUND=1
         END
      END ELSE
         IF IWH.RECP.PERIOD<1,RCP.CNT> <= PERIOD THEN
            IRW.ID=CONO:IWH.RECP.NO<1,RCP.CNT>:"!":WHSE
            FOUND=1
         END ELSE
            FOUND=0
            FOR P=RCP.CNT TO 1 STEP -1 UNTIL FOUND
               IF IWH.RECP.PERIOD<1,P> <= PERIOD THEN
                  FOUND=1
                  IRW.ID=CONO:IWH.RECP.NO<1,P>:"!":WHSE
               END
            NEXT P
         END
      END
   END
RETURN
***************
GET.LAST.PRICE: 
***************
   MATREAD IRW.REC FROM INV_RECP_WHSE,IRW.ID THEN
      LAST.PRICE=IRW.UNIT.COST                   
   END                                           
RETURN
END
*****************************************************************************************
************************************* SUBROUTINES END ***********************************
*****************************************************************************************
