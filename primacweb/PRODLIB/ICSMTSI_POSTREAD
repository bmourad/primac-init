  SUBROUTINE ICSMTSI_POSTREAD
*********************************************************************
*
* REVISION - [12.0]
*
* PROGRAM  - ICSMTSI_POSTREAD
*
* AUTHOR   - ALEJANDRO DELGADO
*
* DATE     - 12/27/2002
*
* DESCRIPTION
*
* The program builds the need RBO string for Material Substitution Inq.
*
*********************************************************************
*
*---- FILE COPY STATEMENTS
*
  $INCLUDE WWINSERT RBO.H
  $INCLUDE ICS.CPYLIB INVENTORY
  $INCLUDE ICS.CPYLIB CATEGORY
  $INCLUDE ICS.CPYLIB WAREHOUSE
  $INCLUDE ICS.CPYLIB INV.WHSE
  $INCLUDE ICS.CPYLIB INV.STATS
  $INCLUDE ICS.CPYLIB INV.CNV
  $INCLUDE CPYLIB CHAR
  $INCLUDE CPYLIB FILE.VARS
*
**** OPEN FILES
*
  ERRMSG = "" ; IN_PARAM = "" ; OUT_PARAM = ""
  IN_PARAM<1,1> = 'INVENTORY'
  IN_PARAM<1,2> = 'CATEGORY'
  IN_PARAM<1,3> = 'INV.WHSE'
  IN_PARAM<1,4> = 'WAREHOUSE'
  IN_PARAM<1,5> = 'INV.STATS'
  CALL GetInvOpenFiles(ERRMSG,IN_PARAM,OUT_PARAM,MAT FILE.VARS)
  IF ERRMSG # "" THEN GOTO SET.ERROR
*
*---- INITIALIZATION
*
  ERRMSG = RBO.getProperty('','ID',ID)
  ERRMSG = RBO.getProperty('','DIV_NUM',DIV.NUM)
  ERRMSG = RBO.getProperty('','WHSE_NUM',WHSE.NUM)
  ERRMSG = RBO.getProperty('','INV_LINE',PROD.LINE)
  ERRMSG = RBO.getProperty('','INV_BAS_WT',BASIS.WEIGHT)
  ERRMSG = RBO.getProperty('','INV_COLOR',COLOR)
  ERRMSG = RBO.getProperty('','INV_PAP_FINISH',FINISH)
  ERRMSG = RBO.getProperty('','INV_PAP_WIDTH',WIDTH)
  ERRMSG = RBO.getProperty('','WIDTH_PLUS',WIDTH.PLUS)
  ERRMSG = RBO.getProperty('','INV_PAP_LEN',SEL.LEN)
  ERRMSG = RBO.getProperty('','LENGTH_PLUS',LENGTH.PLUS)
  CONO = ID[1,3]
*WRITE THE VALIDATIONS FOR WIDTH.PLUS & LENGTH.PLUS
LEN.PLUS = ""
WID.PLUS = ""
WID.SEL = ""
LEN.SEL = ""
PROD.SEL = ""
ERRMSG1 = ""

BEGIN CASE
  CASE INV.PAP.TYPE = "REGULAR"
  CASE CATG.TYPE = "P" OR CATG.TYPE = "F" OR CATG.TYPE = "I"
  CASE 1
    IF PROD.SEL = "" THEN
     WID.SEL = WIDTH.PLUS
    END
    IF LEN.PLUS + 0 # 0 THEN
      WIDTH.PLUS = 0
    END ELSE
      IF WID.PLUS = "" THEN
        WIDTH.PLUS = 2500
      END
    END
END CASE

BEGIN CASE
  CASE INV.PAP.TYPE # "SHEET" AND INV.PAP.TYPE # ""
  CASE CATG.TYPE # "S"
  CASE 1
    IF PROD.SEL = "" THEN
        LEN.SEL = LENGTH.PLUS
    END
    IF WID.PLUS + 0 # 0 THEN
      LENGTH.PLUS = 0
    END ELSE
      IF LEN.PLUS = "" THEN
        LENGTH.PLUS = 2500
      END
    END
END CASE
*END


*
*---- Get selected items
  SEL.PROD = "" ; SEL.DESC = ""
  SEL.BAS = ""; SEL.COL = ""; SEL.FIN = ""
  SEL.WID = ""; *SEL.LEN = ""
  SEL.ON.HAND = '' ; SEL.RESV = ''
  SEL.ON.ORDER = '' ; SEL.ALLOC = ''
  BY.STMT = "" ; SYSLIST = ""
  STMT = 'SSELECT INVENTORY WITH CONO = "':CONO:'"'
  IF BASIS.WEIGHT = "" THEN
    BY.STMT = BY.STMT : ' BY BAS.WT'
  END ELSE
    STMT = STMT : ' AND WITH BAS.WT = "':BASIS.WEIGHT:'"'
  END
  IF COLOR = "" THEN
    BY.STMT = BY.STMT : ' BY F27'
  END ELSE
    STMT = STMT : ' AND WITH F27 = "':COLOR:'"'
  END
  IF FINISH = "" THEN
    BY.STMT = BY.STMT : ' BY F34'
  END ELSE
    STMT = STMT : ' AND WITH F34 = "':FINISH:'"'
  END
  IF PROD.LINE = "" THEN
    BY.STMT = BY.STMT : ' BY F5'
  END ELSE
    STMT = STMT : ' AND WITH F5 = "':PROD.LINE:'"'
  END
  IF WIDTH = "" THEN
    BY.STMT = BY.STMT : ' BY WIDTH'
  END ELSE
    IF WIDTH.PLUS + 0 # 0 THEN
      BY.STMT = BY.STMT : ' BY WIDTH'
*      STMT = STMT : ' AND WITH WIDTH >= "':(WIDTH-WIDTH.PLUS):'"'
*      STMT = STMT : ' AND WITH WIDTH <= "':(WIDTH+WIDTH.PLUS):'"'
      STMT = STMT : ' AND WITH WIDTH >= "':OCONV(WIDTH-WID.SEL,"MD4"):'"'
      STMT = STMT : ' AND WITH WIDTH <= "':OCONV(WIDTH+WID.SEL,"MD4"):'"'
    END ELSE
*      IF WIDTH + 0 = 0 THEN
*        BY.STMT = BY.STMT : ' BY WIDTH'
*      END ELSE
        STMT = STMT : ' AND WITH WIDTH = "':OCONV(WIDTH,"MD4"):'"'
*      END
    END
  END
  IF SEL.LEN = "" THEN
    BY.STMT = BY.STMT : ' BY LENGTH'
  END ELSE
    IF LENGTH.PLUS + 0 # 0 THEN
      BY.STMT = BY.STMT : ' BY LENGTH'
      STMT = STMT : ' AND WITH LENGTH >= "':OCONV((SEL.LEN-LENGTH.PLUS),"MD4"):'"'
      STMT = STMT : ' AND WITH LENGTH <= "':OCONV((SEL.LEN+LENGTH.PLUS),"MD4"):'"'
    END ELSE
*      IF SEL.LEN + 0 = 0 THEN
*       BY.STMT = BY.STMT : ' BY LENGTH'
*      END ELSE
        STMT = STMT : ' AND WITH LENGTH = "':OCONV(SEL.LEN,"MD4"):'"'
      *END
    END
  END
  STMT = STMT : BY.STMT
  
  PERFORM STMT RTNLIST SYSLIST CAPTURING RESPONSE
  RESPONSE = ""; DATA = 1; LINES = 0
  INV.ON.PO = ''; INV.ALLOC = ''; INV.ON.HAND = ''; INV.RESV = ''; INV.INPRCS = ''
  LOOP
    READNEXT SEL.ID FROM SYSLIST ELSE DATA = 0
  WHILE DATA DO
    MATREAD INV.REC FROM INVENTORY, SEL.ID ELSE CONTINUE

    ERRMSG = "" ; IN_PARAM = "" ; OUT_PARAM = "" ; MAT INV.CNV.REC = "" ; PROD.ID = ""
    *CALL GET.INV.UM.CNV(ERRMSG,IN_PARAM,OUT_PARAM,MAT INV.CNV.REC,MAT INV.REC)
$INCLUDE ICSBP INV.UM.CNV    
*PROD.ID = TRIM(SEL.ID[4,15])
    WHSE.CNT = DCOUNT(INV.WHSE.CODE,VM)
    ERRMSG1 = ''
    FOR I = WHSE.CNT TO 1 STEP -1
      IF WHSE.NUM # "ALL" THEN
        IF INV.WHSE.CODE<1,I> # WHSE.NUM THEN CONTINUE
      END
      IF DIV.NUM # "ALL" THEN
        MATREAD WHSE.REC FROM WAREHOUSE, CONO:INV.WHSE.CODE<1,I> ELSE
          MAT WHSE.REC = ""
        END
        IF WHS.DIV # DIV.NUM AND DIV.NUM # "00" THEN CONTINUE
      END
      LOCATE SEL.ID[4,15] IN SEL.PROD<1>,1 SETTING LINES ELSE
        INS SEL.ID[4,15]       BEFORE SEL.PROD<1,LINES>
        INS INV.FULL.DESC BEFORE SEL.DESC<1,LINES>
        INS INV.BAS.WT    BEFORE SEL.BAS<1,LINES>
        INS INV.COLOR     BEFORE SEL.COL<1,LINES>
        INS INV.PAP.FINSH BEFORE SEL.FIN<1,LINES>
        INS INV.PAP.WIDTH BEFORE SEL.WID<1,LINES>
        INS INV.PAP.LEN   BEFORE SEL.LEN<1,LINES>
      END
	
	FOUND = 1
      MATREAD IWH.REC FROM INV.WHSE, SEL.ID:'!':INV.WHSE.CODE<1,I> ELSE
	 ERRMSG1 = ERRMSG1:"~":'WAREHOUSE (':INV.WHSE.CODE<1,I>:') IS NOT SETUP FOR PRODUCT ':SEL.ID[4,15]

        INV.WHSE.CODE = DELETE(INV.WHSE.CODE,1,I,0)
        INV.ON.PO = DELETE(INV.ON.PO,LINES,I,0)
        INV.ALLOC = DELETE(INV.ALLOC,LINES,I,0)
        INV.ON.HAND = DELETE(INV.ON.HAND,LINES,I,0)
        INV.RESV = DELETE(INV.RESV,LINES,I,0)
        FOUND = 0
	END
 *     
	IF FOUND THEN
        INV.ON.PO<LINES,I> = 0
        MATREAD INV.STAT.REC FROM INV.STATS, CONO:SEL.ID[4,15]:'!':INV.WHSE.CODE<1,I> ELSE FOUND = 0 
	IF FOUND THEN
         PO.CNT = COUNT(ISTAT.PO,VM) + (ISTAT.PO # '')
          FOR J = 1 TO PO.CNT
            INV.ON.PO<LINES,I> = INV.ON.PO<LINES,I> + ISTAT.PO.QTY<1,J>
            ALC.CNT = COUNT(ISTAT.PO.JOB.QTY<1,J>,SVM) + (ISTAT.PO.JOB.QTY<1,J> # '')
            FOR K = 1 TO ALC.CNT
              INV.ALLOC<LINES,I> = INV.ALLOC<LINES,I> + ISTAT.PO.JOB.QTY<1,J,K>
            NEXT K
          NEXT J
        END

        IF IWH.ON.HAND < 0 THEN
          INV.ON.HAND<LINES,I> = INT(((IWH.ON.HAND / ICR.DV1) * ICR.MT1) / ICR.DV2 - .5)
        END ELSE
          INV.ON.HAND<LINES,I> = INT(((IWH.ON.HAND / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5)
        END
        IF IWH.RESV < 0 THEN
          INV.RESV<LINES,I> = INT(((IWH.RESV / ICR.DV1) * ICR.MT1) / ICR.DV2 - .5)
        END ELSE
          INV.RESV<LINES,I> = INT(((IWH.RESV / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5)
        END
        IF INV.ON.PO<LINES,I> < 0 THEN
          INV.ON.PO<LINES,I> = INT(((INV.ON.PO<LINES,I> / ICR.DV1) * ICR.MT1) / ICR.DV2 - .5)
        END ELSE
          INV.ON.PO<LINES,I> = INT(((INV.ON.PO<LINES,I> / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5)
        END
        IF INV.ALLOC<LINES,I> < 0 THEN
          INV.ALLOC<LINES,I> = INT(((INV.ALLOC<LINES,I> / ICR.DV1) * ICR.MT1) / ICR.DV2 - .5)
        END ELSE
          INV.ALLOC<LINES,I> = INT(((INV.ALLOC<LINES,I> / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5)
        END
     END
    NEXT I
  REPEAT

  PROD.CNT = DCOUNT(SEL.PROD, VM)
  FOR N = 1 TO PROD.CNT
    MATREAD INV.REC FROM INVENTORY, CONO:SEL.PROD<1,N> ELSE CONTINUE
    ERRMSG = "" ; IN_PARAM = "" ; OUT_PARAM = "" ; MAT INV.CNV.REC = ""
   * CALL GET.INV.UM.CNV(ERRMSG,IN_PARAM,OUT_PARAM,MAT INV.CNV.REC,MAT INV.REC)
    $INCLUDE ICSBP INV.UM.CNV
    SEL.BAS<1,N> = OCONV(SEL.BAS<1,N>, "MD2")
    SEL.WID<1,N> = OCONV(SEL.WID<1,N>, "MD4")
    SEL.ON.HAND<1,N> = OCONV(SUM(INV.ON.HAND<N>),ICR.CNV)
    SEL.RESV<1,N> = OCONV(SUM(INV.RESV<N>),ICR.CNV)
    SEL.LEN<1,N> = OCONV(SEL.LEN<1,N>,"MD4")
    SEL.ON.ORDER<1,N> = OCONV(SUM(INV.ON.PO<N>),ICR.CNV)
    SEL.ALLOC<1,N> = OCONV(SUM(INV.ALLOC<N>),ICR.CNV)
  NEXT N
*
  STATUS = RBO.setProperty('','SEL_PROD',SEL.PROD)
  STATUS = RBO.setProperty('','SEL_DESC',SEL.DESC)
  STATUS = RBO.setProperty('','SEL_BAS',SEL.BAS)
  STATUS = RBO.setProperty('','SEL_COL',SEL.COL)
  STATUS = RBO.setProperty('','SEL_FIN',SEL.FIN)
  STATUS = RBO.setProperty('','SEL_WID',SEL.WID)
  STATUS = RBO.setProperty('','SEL_LEN',SEL.LEN)
  STATUS = RBO.setProperty('','SEL_ON_HAND',SEL.ON.HAND)
  STATUS = RBO.setProperty('','SEL_ON_ORDER',SEL.ON.ORDER)
  STATUS = RBO.setProperty('','SEL_RESV',SEL.RESV)
  STATUS = RBO.setProperty('','SEL_ALLOC',SEL.ALLOC)
  STATUS = RBO.setProperty('','WIDTH_PLUS',WIDTH.PLUS)
  STATUS = RBO.setProperty('','LENGTH_PLUS',LENGTH.PLUS)
  STATUS = RBO.setProperty('','ERRMSGS',ERRMSG1)
  
  RETURN
*
SET.ERROR: 
*
  STATUS = RBO.setProperty('','ServerStatus',1)
  STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
  RETURN

   END
