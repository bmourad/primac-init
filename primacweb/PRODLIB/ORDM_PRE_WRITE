SUBROUTINE ORDM_PRE_WRITE
********************************************************************************
*   Program name :- ORDM_PRE_WRITE
*   Created:- 3/11/2005
*   By :- SUHAIL
********************************************************************************
$INCLUDE WWINSERT RBO.H
$INCLUDE CPYLIB COMMON1
$INCLUDE JCS.CPYLIB COM.JCS.LINK  
$INCLUDE ICS.CPYLIB COM.INV.MAIN  
$INCLUDE ICS.CPYLIB COM.INV.SERIAL
$INCLUDE JCS.CPYLIB COM.INV.STATS 
$INCLUDE PMC.CPYLIB COM.CUST
$INCLUDE OPS.CPYLIB COM.ORDER
$INCLUDE ICS.CPYLIB COM.INV.CNV
$DEFINE CUSTOMER
$INCLUDE PMC.CPYLIB CUSTOMER
$DEFINE CATEGORY
$INCLUDE ICS.CPYLIB CATEGORY
$DEFINE COMPOPS
$INCLUDE PMC.CPYLIB COMP.OPS
$DEFINE INVENTORY
$INCLUDE ICS.CPYLIB INVENTORY
$DEFINE INVWHSE
$INCLUDE ICS.CPYLIB INV.WHSE
$DEFINE ORDER
$INCLUDE OPS.CPYLIB ORDER
$DEFINE ORDERDETAILINQ
$INCLUDE OPS.CPYLIB ORDER.DETAIL.INQ
$INCLUDE OPS.CPYLIB ORDER.DETAIL
$DEFINE FNGDSTATS
$INCLUDE ICS.CPYLIB FNGD.STATS
$DEFINE FNGDORDERSTATS
$INCLUDE ICS.CPYLIB FNGD.ORDER.STATS
$INCLUDE JCS.CPYLIB JOB.CREDIT.STATS
$DEFINE JOB
$INCLUDE JCS.CPYLIB JOB
$INCLUDE PMC.CPYLIB COMPANY
$DEFINE INVCNV
$INCLUDE ICS.CPYLIB INV.CNV
* Insert method code here

OPEN '','CUSTOMER' TO CUSTOMER ELSE
	ERRMESG = 'CANNOT OPEN CUSTOMER FILE'
       GOTO 93000
END

OPEN '','CONTROL' TO CONTROL ELSE
	ERRMESG = 'CANNOT OPEN CONTROL FILE'
	GOTO 93000
END

OPEN '','CATEGORY' TO CATEGORY ELSE
	ERRMESG = 'CANNOT OPEN CATEGORY FILE'
	GOTO 93000
END

OPEN '','INVENTORY' TO INVENTORY ELSE
	ERRMESG = 'CANNOT OPEN INVENTORY FILE'
	GOTO 93000
END

OPEN '','INV.WHSE' TO INV.WHSE ELSE
	ERRMESG = 'CANNOT OPEN INV.WHSE FILE'
	GOTO 93000
END

OPEN '','ORDER' TO ORDER ELSE
	ERRMESG = 'CANNOT OPEN ORDER FILE'
	GOTO 93000
END   
OPEN "","CREDIT.AUTH.CODE" TO CREDIT.AUTH.CODE ELSE
      ERRMESG = "Cannot locate the CREDIT.AUTH.CODE file"
      GOTO 93000
END
OPEN "","PICK.TICKET.PRT" TO PICK.TICKET.PRT ELSE
	ERRMESG = "Cannot locate the PICK.TICKET.PRT file"
	GOTO 93000
END
OPEN "","CREDIT_STATS" TO CREDIT_STATS ELSE
       ERRMESG = "Cannot locate the CREDIT_STATS file"
	GOTO 93000
END
OPEN "","JOB" TO JOB ELSE
      ERRMESG = "Cannot locate the JOB  file"
      GOTO 93000
END
OPEN "","FNGD.STATS" TO FNGD.STATS ELSE
      ERRMESG = "Cannot locate the FNGD.STATS file"
      GOTO 93000
END

OPEN "","FNGD.ORDER.STATS" TO FNGD.ORDER.STATS ELSE
      ERRMESG = "Cannot locate the FNGD.ORDER.STATS file"
      GOTO 93000
END

OPEN "","ORDER.DETAIL" TO ORDER.DETAIL ELSE
      ERRMESG = "Cannot locate the ORDER.DETAIL file"
      GOTO 93000
END
*OPEN "","ORDER.DETAIL.INQ" TO ORDER.DETAIL.INQ ELSE
*      ERRMESG = "Cannot locate the ORDER.DETAIL.INQ file"
*      GOTO 93000
*END


JOB.BALANCE = ''
ORD.BALANCE = ''
ORD.CUST = ''
ORDNO = ''
CUR.BALANCE = ''
OLD.TOT.AMT = 0
UPDCRED = ''
NEWREC = ''
MAT COMP.REC = ""
*MAT FNGD.STATS = ''
*MAT FNGD.ORDER.STATS = ''

DEFFUN SYSVARS.SUB(SYSVAR)
DEFFUN ORD_LINE_UPD(CONO,ORDNO,SHPNO,STAT,ERR,MAT ORD.DET.INQ)
DEFFUN JOB_FNGD_UPD1(CONO,ORDNO,JOBNO,JB.BLD,EST.BLD,MAT COMP.REC,RET.VAL,PROMPTMSG,ERRMSG,FLAG)


PORT.NO = "TTY"; CALL SYSVARS.SUB(PORT.NO)
*MAT ORD.REC = ''
STATUS = RBO.getProperty('','PMCProperty', PMCProperty)

STATUS = RBO.getProperty('','ORDER_NUM',ORDNO)
STATUS = RBO.getProperty('','ORD_STATUS)',ORD.STATUS)
STATUS = RBO.getProperty('','ORD_PO',ORD.PO)

STATUS = RBO.getProperty('','ORD_DATE',ORD.DATE)
STATUS = RBO.getProperty('','ORD_RCV_DATE',ORD.RCV.DATE)
STATUS = RBO.getProperty('','ORD_REQ_DATE',ORD.REQ.DATE)
STATUS = RBO.getProperty('','ORD_DUE',ORD.DUE)

STATUS = RBO.getProperty('','ORD_JOB',ORD.JOB)
STATUS = RBO.getProperty('','ORD_CRED_AUTH',ORD.CRED.AUTH)
STATUS = RBO.getProperty('','ORD_CUST',ORD.CUST)
STATUS = RBO.getProperty('','ORD_DIV',ORD.DIV)
STATUS = RBO.getProperty('','ORD_CSR_CODE',ORD.CSR.CODE)
STATUS = RBO.getProperty('','ORD_PRINT',ORD.PRINT)
STATUS = RBO.getProperty('','ORD_SLSMN',ORD.SLSMN)
STATUS = RBO.getProperty('','ORD_SHIP_TO',ORD.SHIP.TO)

STATUS = RBO.getProperty('','ORD_AC_CHG_CD',ORD.AC.CHG.CD)
STATUS = RBO.getProperty('','ORD_AC_SLC',ORD.AC.SLC)
STATUS = RBO.getProperty('','ORD_AC_AMOUNT',ORD.AC.AMOUNT)
STATUS = RBO.getProperty('','ORD_AC_DESC',ORD.AC.DESC)
STATUS = RBO.getProperty('','ORD_AC_INV',ORD.AC.INV)
STATUS = RBO.getProperty('','ORD_AC_HIDDEN',ORD.AC.HIDDEN)
STATUS = RBO.getProperty('','ORD_AC_CHG_CAT',ORD.AC.CHG.CAT)



STATUS = RBO.getProperty('','CRDTVAL',CRDTVAL)
STATUS = RBO.getProperty('','CREATEJOB',CREATEJOB)
STATUS = RBO.getProperty('','PRINT_PKT_OPT',PRINT_PKT_OPT)
STATUS = RBO.getProperty('','CREATE_ESTIMATE',CREATE_ESTIMATE)

STATUS = RBO.getProperty('','OLD_CUST',OLD.CUST)
STATUS = RBO.getProperty('','FLAG_METH',FLAG)
STATUS = RBO.getProperty('','NEW_FLAG',NFLAG)
STATUS = RBO.getProperty('','RET_VALUE',RET.VAL)
STATUS = RBO.getProperty('','XFLAG',XFLAG)

ORD.DATE = ICONV(ORD.DATE,"D2/")
ORD.RCV.DATE = ICONV(ORD.RCV.DATE,"D2/")
ORD.REQ.DATE = ICONV(ORD.REQ.DATE,"D2/")
ORD.DUE = ICONV(ORD.DUE,"D2/")

ICR.CNV = "MD0"; ICR.CNV1 = "MD0,"
ICR.DV1 = 1; ICR.MT1 = 1; ICR.DV2 = 1000
ICR.TYPE = 3; ICR.SCAL = 0


MAT ORD.DET.INQ = ''
  IF ORD.CRED.AUTH # "" AND ORD.CRED.AUTH # "" THEN
     CRDTVAL = FIELD(ORD.CRED.AUTH,"!",1)
     UPDCRED = 1
  END ELSE
     UPDCRED = 0
  END
CONO = PMCProperty<1,4>
USER.ID = PMCProperty<1,3>
OLD.TOT.AMT = SUM(ODQ.AMT)

RETARR = ''
FILE.SAVE = 0

************** IF NOT NEW REC THEN DO THE FOLLOWING PROCESSING
   IF NFLAG # 1 THEN
     STAT = "L"; SHPNO = "ALL"
     MAT ORD.DET.INQ = ""
     CALL ORD_LINE_UPD(CONO,ORDNO,SHPNO,STAT,ERR,MAT ORD.DET.INQ)
     SHPNO = ""

     O.ODQ.PROD = ODQ.PROD
     O.ODQ.WHSE = ODQ.WHSE
     O.ODQ.SEQ  = ODQ.PROD.SEQ
     O.ODQ.KIT  = ODQ.KIT
     ORIG.PROD = ""
     ORIG.IWH.RESV = ""
     ORIG.IWH.QTY = ""
     ORIG.ALOC.AVL = ""

     NUM.PROD = DCOUNT(ODQ.PROD,@VM)
     FOR P = 1 TO NUM.PROD
        IWH.ID = CONO:ODQ.PROD<1,P>
        MATREAD INV.REC FROM INVENTORY, IWH.ID THEN
          IWH.ID = IWH.ID:"!":ODQ.WHSE<1,P>
          MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
             MAT CATG.REC = ""
          END
          MATREAD IWH.REC FROM INV.WHSE, IWH.ID THEN
             ERR.FLG='';ERRMSG='';PERIOD='';OPEN.FLAG = 1
             CALL BUILD_IWH_FI(IWH.ID,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
             MATREAD FGS.REC FROM FNGD.STATS, IWH.ID ELSE
                MAT FGS.REC = ""
             END
             PFND = 1
             LOCATE IWH.ID IN ORIG.PROD<1>,1 SETTING LINDX ELSE PFND = 0
             IF PFND = 0 OR ODQ.KIT<1,P> = 'M' THEN
                IF ODQ.KIT<1,P> = 'M' THEN
                   LINDX = DCOUNT(ORIG.PROD<1>,@VM) + 1
                END
                ORIG.IWH.QTY=INSERT(ORIG.IWH.QTY,1,LINDX,1,IWH.RESV)
                ORIG.PROD   =INSERT(ORIG.PROD,1,LINDX,1,IWH.ID)
                TEMP.STR = CONVERT(@VM,@SVM,IWH.RSV.FI)
                ORIG.IWH.RESV = INSERT(ORIG.IWH.RESV,1,LINDX,1,TEMP.STR)
                TEMP.STR = CONVERT(@VM,@SVM,FGS.A.QTY)
                ORIG.ALOC.AVL = INSERT(ORIG.ALOC.AVL,1,LINDX,1,TEMP.STR)
             END
          END ELSE
             MAT INV.REC = ""
          END
        END
     NEXT P
     LINKJOB = ORD.JOB
     GOSUB 6000
     OLD.TOT.AMT = SUM(ODQ.AMT)
   END
 
*************** vvvvvvvvvvvvv GET THE VALUES OF ORDERLINEMAINT

     STATUS = RBO.getProperty('','ODQ_PROD',ODQ.PROD)
     STATUS = RBO.getProperty('','ODQ_WHSE',ODQ.WHSE)
     STATUS = RBO.getProperty('','ODQ_PRICE',ODQ.PRICE)
     STATUS = RBO.getProperty('','ODQ_A_QTY',ODQ.A.QTY)
     STATUS = RBO.getProperty('','ODQ_R_QTY',ODQ.R.QTY)
     STATUS = RBO.getProperty('','ODQ_G_QTY',ODQ.G.QTY)
     STATUS = RBO.getProperty('','ODQ_JOB',ODQ.JOB)
     STATUS = RBO.getProperty('','ODQ_FI_QTY',ODQ.FI.QTY)
     STATUS = RBO.getProperty('','ODQ_J_QTY',ODQ.JOB.QTY)
     *BELOW THREE LINES HAVE BEEN PLACED IN ORD_LINE_UPD METHOD
     *STATUS = RBO.getProperty('','OSD_JOB_COMMENTS',OSD.COMMENT)
     *STATUS = RBO.getProperty('',' OSD_SHP_TERMS',OSD.SHP.TERMS)
     *STATUS = RBO.getProperty('',' OSD_PO',OSD.PO)

TEMP_VAL1 = ODQ.G.QTY
TEMP_VAL2 = ODQ.R.QTY
TEMP_VAL3 = ODQ.A.QTY


PNUM = DCOUNT(ODQ.PROD,@VM)


MATREAD CUST.REC FROM CUSTOMER,CONO:ORD.CUST ELSE STOP

FOR X =1 TO PNUM
	*MATREAD INV.REC FROM INVENTORY,CONO:ODQ.PROD<X> THEN
	*$INCLUDE ICSBP INV.UM.CNV
	
	ODQ.G.QTY<1,X> = INT(((TEMP_VAL1<1,X> / ICR.MT1) * ICR.DV1) * ICR.DV2 + .5);*     ORIGINAL QTY
	TEMP_G_QTY = INT((TEMP_VAL1<1,X> * (1 + (CUST.ADDL.OPS<1,1> / 10000))) + .5);*    
	ODQ.O.QTY<1,X> = INT(((TEMP_G_QTY / ICR.MT1) * ICR.DV1) * ICR.DV2 + .5);*         ORDER QTY
		
	ODQ.R.QTY<1,X> = INT(((TEMP_VAL2<1,X> / ICR.MT1) * ICR.DV1) * ICR.DV2 + .5);*     RESERVE QTY THIS VALUE IS UNCERTAIN AS IT MAY NOT REQUIRE CONV UNDER SOME CASES
	ODQ.A.QTY<1,X> = INT(((TEMP_VAL3<1,X> / ICR.MT1) * ICR.DV1) * ICR.DV2 + .5)	;*     ALLOCATED QTY
*END
NEXT X

     *ODQ.FI.QTY = ODQ.R.QTY
     IF ODQ.PROD = "" THEN
        MAT ORD.DET.INQ = ""	
     END
     GOSUB 6000       


*************** ^^^^^^^^^^^^^

   MATREAD OPCO.REC FROM CONTROL, CONO:"OPS" ELSE
      ERRMESG = "Cannot locate Order Processing company setup"
      GOTO 93000
   END

   IF ORD.STATUS = "NEW" THEN
	ORD.STAT.DATE = DATE()
   END   

   IF ORDNO # 'N' AND NFLAG # 1 THEN
      NEWREC = 0
   END ELSE
      NEWREC = 1
   END

   JOB.BALANCE = SUM(CUST.JOB.BAL)
   ORD.BALANCE = SUM(CUST.ORD.BAL)
   STAT="U"

   LOCATE ORDNO IN CUST.ORD.NUM<1>,1 SETTING FND THEN
      ORD.BALANCE = ORD.BALANCE - CUST.ORD.BAL<1,FND>
   END

   CUR.BALANCE = SUM(ODQ.AMT) - ORD.TOT.INV
   IF CUR.BALANCE < 0 THEN CUR.BALANCE = 0
   TOT.BALANCE = JOB.BALANCE + ORD.BALANCE + CUR.BALANCE
   AVAIL = ''

   BEGIN CASE
      CASE CUST.CREDIT = "E"
         AVAIL = CUST.CR.LIMIT * 100 - CUST.AR.BAL - TOT.BALANCE
	  IF NOT(UPDCRED) AND SUM(ODQ.AMT) # OLD.TOT.AMT AND AVAIL < 0 THEN
	     GOSUB 1900
	  END
      CASE CUST.CREDIT = "CASH"
	  AVAIL = CUST.AR.BAL + CUST.AR.BAL + TOT.BALANCE
	  IF NOT(UPDCRED) AND SUM(ODQ.AMT) # OLD.TOT.AMT AND AVAIL > 0 THEN
            GOSUB 1900
         END
      CASE NOT(UPDCRED) AND SUM(ODQ.AMT) # OLD.TOT.AMT
         GOSUB 1900
   END CASE

   IF NEWREC THEN
      B.QTY = 0
      NUM.PRODS = DCOUNT(ODQ.PROD,@VM)
      FOR P = 1 TO NUM.PRODS
         IF ODQ.KIT<1,P> = "N" THEN
            B.QTY = B.QTY + ODQ.O.QTY<1,P> - ODQ.R.QTY<1,P> - ODQ.A.QTY<1,P> - ODQ.S.QTY<1,P>
         END
      NEXT P
      EST.BLD = 0
      BEGIN CASE
         CASE B.QTY < 1
            JB.BLD = 0
         CASE OPCO.JOB.BLD = "N"
            JB.BLD = 0
         CASE OPCO.JOB.BLD = "A"
            JB.BLD = 1
         CASE 1
            *ECD.NUM = 54; ECD.ACTION = 4; CALL SCRN.EDIT   
            IF CREATEJOB = "" AND XFLAG < 3 OR XFLAG = "" THEN
		  XFLAG = 3
		  STATUS = RBO.setProperty('','XFLAG',XFLAG)
		  RETARR = @VM : XFLAG
		  GOTO 99000
	     END ELSE
		 IF CREATEJOB = "Y" THEN
               	JB.BLD = 1
            	 END ELSE
               	JB.BLD = 0
            	 END
	     END
      END CASE
      IF ORDNO = "N" THEN
         STATUS = RBO.getProperty('','NEW_ORD_NUM',NEWORDNO)
         IF NEWORDNO = "" OR NEWORDNO = 0 OR NEWORDNO = "0" THEN 
         	READU ORDNO FROM CONTROL, CONO:"ORDER" ELSE
            		ORDNO = 10000
         	END
         	ORDMESG = ""
         	LOOP
            	ORDNO = ORDNO + 1
            	IF ORDNO > 9999999 THEN ORDNO = 10000  ;*T22724
            		READU O.REC FROM ORDER, CONO:ORDNO ELSE
              		IF NOT(JB.BLD) OR OPCO.ORD.JOB = "N" THEN
                  			ORDMESG = "Please note down the assigned order number : " : ORDNO
               		END ELSE
                  			READ O.REC FROM JOB, CONO:ORDNO ELSE
                     			ORDMESG = "Please note down the assigned order / job number : " : ORDNO
                  			END
               		END
            		END
         		WHILE ORDMESG = "" DO
            		RELEASE ORDER, CONO:ORDNO
         	REPEAT
             *ORDNO = 1148
         	WRITE ORDNO ON CONTROL, CONO:"ORDER"
              STATUS = RBO.setProperty('','NEW_ORD_NUM',ORDNO)              
         END
         ELSE
		ORDNO = NEWORDNO
         END 
      END
      SHPNO = ""
      CALL ORD_LINE_UPD(CONO,ORDNO,SHPNO,STAT,ERR,MAT ORD.DET.INQ)
	  IF ERR # "" AND ERR # 0 AND FLAG # 12 THEN
             FLAG = 12
             RETARR = ERR : @VM : FLAG
             GOTO 93000
    	   END ELSE
             FLAG = ''
     	   END

      GOSUB 6100
      
      IF JB.BLD THEN
          BEGIN CASE
            CASE OPCO.EST.BLD = "A"
               EST.BLD = 1
            CASE OPCO.EST.BLD = "P"
*               ECD.NUM = 50; ECD.ACTION = 4 ; CALL SCRN.EDIT
               
		  IF CREATE_ESTIMATE = "" AND XFLAG < 5 OR XFLAG = "" THEN
			XFLAG = 5
			RETARR = @VM : XFLAG
			STATUS = RBO.setProperty('','XFLAG',XFLAG)
			GOTO 99000		
		  END ELSE
	   	  	IF CREATE_ESTIMATE = "Y" THEN EST.BLD = 1
		  END
          END CASE
          IF OPCO.ORD.JOB = "N" THEN
             JOBNO = "N"
          END ELSE
             JOBNO = ORDNO
          END
          MAT JOB.REC = ""
         
          STATUS = RBO.setProperty('', 'JB_BLD', JB.BLD)
          STATUS = RBO.setProperty('', 'EST_BLD', EST_BLD)

*        CALL JOB_FNGD_UPD(CONO,ORDNO,JOBNO,JB.BLD,EST.BLD,MAT COMP.REC)
	  CALL JOB_FNGD_UPD1(CONO,ORDNO,JOBNO,JB.BLD,EST.BLD,MAT COMP.REC,RET.VAL,PROMPTMSG,ERRMSG,FLAG)
	  IF PROMPTMSG # "" THEN 
		RETARR = PROMPTMSG :@VM: ORDMESG
		GOTO 93000
	  END
	  IF ERRMSG # "" THEN GOTO 93000
      END
      GOTO 11111
   END ELSE
WRITE ORDNO : SHPNO ON CONTROL,'02HLL'
     STAT = "U"
     ERR = ""
     CALL ORD_LINE_UPD(CONO,ORDNO,SHPNO,STAT,ERR,MAT ORD.DET.INQ)            
     IF ERR # "" AND ERR # 0 AND FLAG # 12 THEN
         FLAG = 12
         RETARR = ERR : @VM : FLAG
         GOTO 93000
     END ELSE
         FLAG = ''
     END

     GOSUB 6100
     GOTO 11111
   END
   	
*********SUBROUTINES
6000*
   OJQ.A.QTY = ""
   QCNT = DCOUNT(ODQ.JOB,@VM)
   FOR Q = 1 TO QCNT
      JCNT = DCOUNT(ODQ.JOB<1,Q>,@SVM)
      FOR OJ = 1 TO JCNT
         IF ODQ.JOB.QTY<1,Q,OJ> > 0 THEN
            LOCATE ODQ.JOB<1,Q,OJ> IN ORD.JOB<1>,1 SETTING L ELSE
               ORD.JOB<1,L> = ODQ.JOB<1,Q,OJ>
            END
            LOCATE ODQ.JOB<1,Q,OJ> IN LINKJOB<1>,1 SETTING L ELSE
               LINKJOB<1,L> = ODQ.JOB<1,Q,OJ>
            END
            OJQ.A.QTY<1,L> = OJQ.A.QTY<1,L> + ODQ.JOB.QTY<1,Q,OJ>
         END
      NEXT OJ
   NEXT Q
*   LINES = DCOUNT(LINKJOB,VM)
RETURN


****v
11111*
   IF UPDCRED THEN
      MATREADU JOCS.REC FROM CREDIT_STATS, CONO:ORDNO ELSE
         MAT JOCS.REC = ""
      END
      JOCS.CRED.CODE = INSERT(JOCS.CRED.CODE,1,1,0,CUST.CREDIT)
      JOCS.CRED.AUTH = INSERT(JOCS.CRED.AUTH,1,1,0,ORD.CRED.AUTH)
      JOCS.CUST.NO = INSERT(JOCS.CUST.NO,1,1,0,ORD.CUST)
      JOCS.CRED.AVAIL = INSERT(JOCS.CRED.AVAIL,1,1,0,AVAIL)
      JOCS.CRED.LIMIT = INSERT(JOCS.CRED.LIMIT,1,1,0,CUST.CR.LIMIT)
      JOCS.CHG.DATE = INSERT(JOCS.CHG.DATE,1,1,0,DATE())
      MATWRITE JOCS.REC ON CREDIT_STATS, CONO:ORDNO
   END
   
   STAT = "L"; SHPNO = "ALL"
   CALL ORD_LINE_UPD(CONO,ORDNO,SHPNO,STAT,ERR,MAT ORD.DET.INQ)   
   O.ODQ.PROD = ODQ.PROD
   O.ODQ.WHSE = ODQ.WHSE
   O.ODQ.SEQ  = ODQ.PROD.SEQ
   O.ODQ.KIT  = ODQ.KIT   
   PCNT = DCOUNT(O.ODQ.PROD,@VM)
   FOR P = 1 TO PCNT
      PROD = O.ODQ.PROD<1,P>; WHSE = O.ODQ.WHSE<1,P>
      PROD.SEQ = O.ODQ.SEQ<1,P>; KIT.TYPE = O.ODQ.KIT<1,P>
      PTR = 1; FND = 0
      LOOP
         LOCATE PROD IN ODQ.PROD<1>,PTR SETTING L THEN
            IF (WHSE = ODQ.WHSE<1,L>) AND (PROD.SEQ=ODQ.PROD.SEQ<1,L>) AND (KIT.TYPE = ODQ.KIT<1,L>) THEN
               PTR = 0; FND = 1
            END
         END ELSE
            PTR = 0
         END
      WHILE PTR DO
         PTR = L + 1
      REPEAT
      IF NOT(FND) THEN
         IWH.ID = CONO:PROD:"!":WHSE
         MATREADU FGS.REC FROM FNGD.STATS, IWH.ID THEN
            PTR = 1
            LOOP
               LOCATE ORDNO IN FGS.ORDER<1>,PTR SETTING OLOC THEN
                  IF PROD.SEQ=FGS.SEQ<1,OLOC> AND KIT.TYPE=FGS.KIT<1,OLOC> THEN 
                     FGS.ORDER = DELETE(FGS.ORDER,1,OLOC,0)
                     FGS.O.QTY = DELETE(FGS.O.QTY,1,OLOC,0)
                     FGS.B.QTY = DELETE(FGS.B.QTY,1,OLOC,0)
                     FGS.SEQ   = DELETE(FGS.SEQ,1,OLOC,0)
                     FGS.KIT   = DELETE(FGS.KIT,1,OLOC,0)
                  END
               END ELSE
                  PTR = 0
               END
            UNTIL PTR = 0 DO
               PTR = 1
            REPEAT
            IF FGS.ORDER # "" OR FGS.JOB # "" THEN
               MATWRITE FGS.REC ON FNGD.STATS, IWH.ID
            END ELSE
               DELETE FNGD.STATS, IWH.ID
            END
         END
         RELEASE FNGD.STATS, IWH.ID
         MATREADU FOS.REC FROM FNGD.ORDER.STATS, IWH.ID:"!":ORDNO:"!":PROD.SEQ:"!":KIT.TYPE THEN
            DELETE FNGD.ORDER.STATS, IWH.ID:"!":ORDNO:"!":PROD.SEQ:"!":KIT.TYPE
         END
         RELEASE FNGD.ORDER.STATS, IWH.ID:"!":ORDNO:"!":PROD.SEQ:"!":KIT.TYPE
      END
   NEXT P
*
   IF (OLD.CUST # "") AND (OLD.CUST # ORD.CUST) THEN
     MATREAD CUST.REC FROM CUSTOMER,CONO:OLD.CUST THEN
         LOCATE ORDNO IN CUST.ORD.NUM<1>,1 SETTING OFND THEN
            CUST.ORD.NUM = DELETE(CUST.ORD.NUM,1,OFND,0)
            CUST.ORD.BAL = DELETE(CUST.ORD.BAL,1,OFND,0)
            MATWRITE CUST.REC ON CUSTOMER, CONO:OLD.CUST
         END
      END
      RELEASE CUSTOMER, CONO:OLD.CUST
   END
   FILE.SAVE = 1
   GOTO 93000
****^

*** v ---- DECIDE IF PICK.TICKET NEEDS TO BE PRINTED
6100*
WRITE ORD.PRINT : @VM : OPCO.SHP.FRM : @VM : ORD.SHIP.TO : @VM : ORDNO ON CONTROL,'05HLL'
   IF ORD.PRINT # "N" AND OPCO.SHP.FRM # "R" THEN
      SHPWHS = ""
      FOR X = 1 TO DCOUNT(ORD.SHIP.TO,@VM)
         SHPNO = ORD.SHIP.TO<1,X>
         IF SHPNO # "000" THEN
            MATREAD ORD.DET.REC FROM ORDER.DETAIL, CONO:ORDNO:"!":SHPNO ELSE
               MAT ORD.DET.REC = ""
            END
            PCNT = DCOUNT(OSD.PROD,@VM)
            FOR P = 1 TO PCNT
               PICK.QTY = 0
               SCNT = DCOUNT(OSD.FI.QTY<1,P>,@SVM)
               FOR S = 1 TO SCNT
                  PICK.QTY = PICK.QTY + (OSD.FI.QTY<1,P,S> - OSD.P.QTY<1,P,S>)
               NEXT S
WRITE PICK.QTY : @VM : OSD.FI.QTY : @VM : OSD.WHSE : @VM : CONO:ORDNO:"!":SHPNO ON CONTROL,'01HLL'
               IF PICK.QTY > 0 THEN
                  SHPWH = SHPNO:"!":OSD.WHSE<1,P>
                  LOCATE SHPWH IN SHPWHS,1 SETTING FND ELSE
                     PKT.ID = CONO:ORDNO:"!":SHPWH
                     READ REC FROM PICK.TICKET.PRT, PKT.ID ELSE
                        SHPWHS<FND> = SHPWH
                     END
                  END
               END
            NEXT P
         END
      NEXT X

      SHPWHSCNT = DCOUNT(SHPWHS,@AM)
      IF SHPWHSCNT THEN
 	  IF PRINT_PKT_OPT = "" AND XFLAG < 4 OR XFLAG = "" THEN
		XFLAG = 4
		STATUS = RBO.setProperty('','XFLAG',XFLAG)
		RETARR = @VM : XFLAG
		GOTO 99000
	  END ELSE
         	IF PRINT_PKT_OPT = "Y" THEN
            		FOR T = 1 TO SHPWHSCNT
               		SHPWH = SHPWHS<T>
               		PKT.ID = CONO:ORDNO:"!":SHPWH
               		READ REC FROM PICK.TICKET.PRT, PKT.ID ELSE
                  			WRITE "" ON PICK.TICKET.PRT, PKT.ID
               		END
            		NEXT T
         	END
	  END
      END
   END
   RETURN
*** ^



* v   CHECK IF THE CREDIT AUTHORIZATION CODE IS CORRECT ELSE RETURN ERROR BACK
	* CRDTVAL IS SET TO "~" IN ASP PAGE IF NO INPUT IS REQUIRED
1900*
   JOB.BALANCE = SUM(CUST.JOB.BAL)
   ORD.BALANCE = SUM(CUST.ORD.BAL)
   IF ORD.STATUS<1,1> # "NEW" THEN
      LOCATE ORDNO IN CUST.ORD.NUM<1>,1 SETTING FND THEN
         ORD.BALANCE = ORD.BALANCE - CUST.ORD.BAL<1,FND>
      END
   END
   CUR.BALANCE = SUM(ODQ.AMT) - ORD.TOT.INV
   IF CUR.BALANCE < 0 THEN CUR.BALANCE = 0
   TOT.BALANCE = JOB.BALANCE + ORD.BALANCE + CUR.BALANCE
   EPTR=0
   BEGIN CASE
      CASE CUST.CREDIT = "N"
         ERRMSG = "There is NO CREDIT for this customer"
         IF XFLAG GE 1 THEN
         	GOTO 1909	
	  END ELSE
         	XFLAG = 1
		STATUS = RBO.setProperty('','XFLAG',XFLAG)
		RETARR = ERRMSG : @VM : XFLAG
		GOTO 99000
	  END
	  
      CASE CUST.CREDIT = "E"
         AVAIL = CUST.CR.LIMIT * 100 - CUST.AR.BAL - TOT.BALANCE
         IF AVAIL < 0 THEN
            ERRMSG = "A/R = ":OCONV(CUST.AR.BAL,"MD2,$<")
            ERRMSG = ERRMSG : " & ORD/JOB = ":OCONV(TOT.BALANCE,"MD2,$<")
            ERRMSG = ERRMSG : " & AVAIL = ":OCONV(AVAIL,"MD2,$<")
            EPTR = INDEX(ERRMSG," & AVAIL",1)
         END ELSE
            GOTO 1909
         END
      CASE CUST.CREDIT = "CASH"
         AVAIL = CUST.AR.BAL + CUST.AR.BAL + TOT.BALANCE
         IF AVAIL > 0 THEN
            ERRMSG = "A/R = ":OCONV(CUST.AR.BAL,"MD2,$<")
            ERRMSG = ERRMSG : " & ORD/JOB = ":OCONV(TOT.BALANCE,"MD2,$<")
            ERRMSG = ERRMSG : " & TOTAL BAL = ":OCONV(AVAIL,"MD2,$<")
            EPTR = INDEX(ERRMSG," & AVAIL",1)
         END ELSE
            GOTO 1909
         END
      CASE 1
         ERRMSG = "A/R = ":OCONV(CUST.AR.BAL,"MD2,$<")
         ERRMSG = ERRMSG : " & JOB = ":OCONV(TOT.BALANCE,"MD2,$<")
         ERRMSG = ERRMSG : " & TOTAL BAL = ":OCONV(CUST.AR.BAL+TOT.BALANCE,"MD2,$<")
         EPTR = INDEX(ERRMSG," & TOTAL",1)
   END CASE
   *IF EPTR AND LEN(ERRMSG) > 79 THEN
   *   EMSGLEFT = ERRMSG[EPTR,99]
   *   ERRMSG   = ERRMSG[1,EPTR-1] : "!" : EMSGLEFT
   *END
   
   PORT.NO = "TTY"; CALL SYSVARS.SUB(PORT.NO)
   CMD = "SSELECT CREDIT.AUTH.CODE WITH CONO = " : CONO
   UDTEXECUTE CMD
   DATA = 1
   CRDTCODES = ''
   LOOP
      READNEXT CODE ELSE DATA = 0
   WHILE DATA DO
	CRDTCODES := CODE[4,99] : "!"
   REPEAT

   IF CRDTVAL = "" AND XFLAG < 2 OR XFLAG = "" THEN
	XFLAG = 2
	STATUS = RBO.setProperty('','XFLAG',XFLAG)
       RETARR = ERRMSG : @VM : XFLAG : @VM : PORT.NO : @VM : CRDTCODES
	GOTO 99000
   END ELSE
       ORD.CRED.AUTH = ''
       READ TREC FROM CREDIT.AUTH.CODE, CONO:CRDTVAL THEN
         ORD.CRED.AUTH = CRDTVAL:"!":USER.ID:"!":PORT.NO
         UPDCRED = 1
       END ELSE
         ERRMESG = 'Invalid Credit Authorization Code'
      	  GOTO 93000	
       END	
   END
1909*
   RETURN
* ^

99000*
	RELEASE
	STATUS = RBO.setProperty('','IP_FLAG',2)
	STATUS = RBO.setProperty('', 'FILE_SAVE', FILE.SAVE)
   	STATUS = RBO.setProperty('', 'RETARR', RETARR)
   	STATUS = RBO.setProperty('', 'ServerMessage', ERRMESG)

	
RETURN

* End of method code
93000*
   RELEASE
   STATIUS = RBO.setProperty('','FLAG_METH',FLAG)
   STATUS = RBO.setProperty('','IP_FLAG',1)
   STATUS = RBO.setProperty('', 'FILE_SAVE', FILE.SAVE)
   STATUS = RBO.setProperty('', 'RETARR', RETARR)
   STATUS = RBO.setProperty('', 'ServerMessage', ERRMESG)
   STATUS = RBO.setProperty('', 'NEW_ORDNO', ORDMESG)
RETURN

