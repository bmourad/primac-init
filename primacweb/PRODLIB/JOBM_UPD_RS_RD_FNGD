SUBROUTINE JOBM_UPD_RS_RD_FNGD
********************************************************************************
*   Program name :- JOBM_UPD_RS_RD_FNGD
*   Created:- 8/5/2003
*------------------------------------------------------------------------------*
*
* In Properties:
* --------------
*  
*
* Out Properties:
* ---------------
*  
********************************************************************************
$INCLUDE WWINSERT RBO.H

* Insert method code here
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB INV.STATS
$INCLUDE ICS.CPYLIB INV.JOB.STATS
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE ICS.CPYLIB INV.FNGD
$INCLUDE ICS.CPYLIB FNGD.BOM
$INCLUDE OPS.CPYLIB JOB.FNGD.STATS
$INCLUDE ICS.CPYLIB INV_RECP_WHSE
$INCLUDE CPYLIB CHAR

ERRMSG = ""
OPEN "","INV_RECP_WHSE" TO INV_RECP_WHSE ELSE
	ERRMSG = "CANNOT OPEN INV_RECP_WHSE FILE"
      	GOTO 99999
END
OPEN '','CONTROL' TO CONTROL ELSE
	ERRMSG<1,-1> = 'INVENTORY FILE IS MISSING'
    	GOTO 99999
END

OPEN '','INVENTORY' TO INVENTORY ELSE
	ERRMSG<1,-1> = 'INVENTORY FILE IS MISSING'
    	GOTO 99999
END
OPEN "","WAREHOUSE" TO WAREHOUSE ELSE
	ERRMSG<1,-1> = "WAREHOUSE IS MISSING"
	GOTO 99999
END

OPEN '','CATEGORY' TO CATEGORY ELSE
	ERRMSG<1,-1> = 'CATEGORY FILE IS MISSING'
    	GOTO 99999
END

OPEN "","INV.STATS" TO INV.STATS ELSE
	ERRMSG<1,-1> = "INV.STATS FILE IS MISSING"
	GOTO 99999
END

OPEN "","INV.JOB.STATS" TO INV.JOB.STATS ELSE
	ERRMSG<1,-1> = "INV.JOB.STATS FILE IS MISSING"
	GOTO 99999
END

OPEN "","INV.WHSE" TO INV.WHSE ELSE
	ERRMSG<1,-1> = "INV.WHSE IS MISSING"
	GOTO 99999
END

OPEN "","INV.FNGD" TO INV.FNGD ELSE
	ERRMSG<1,-1> = "INV.FNGD FILE IS MISSING"
	GOTO 99999
END

OPEN "","FNGD.BOM" TO FNGD.BOM ELSE
	ERRMSG<1,-1> = "FNGD.BOM FILE IS MISSING"
	GOTO 99999
END
OPEN "","JOB.FNGD.STATS" TO JOB.FNGD.STATS ELSE
	ERRMSG<1,-1> = "UNABLE TO OPEN JOB.FNGD.STATS FILE"
	GOTO 99999
END


  RQD.DATE.MV = 1
  RQD.AMT.MV = 2
  RQD.QTY.MV = 3
*

VAL = RBO.getProperty('','Cono',CONO)
VAL = RBO.getProperty('','JOB_RESV_MATL',JOB_RESV_MATL)
VAL = RBO.getProperty('','JOB_RESV_WHSE',JOB_RESV_WHSE)
VAL = RBO.getProperty('','RET_PROD_LIST',JFS_PROD);*LIST OF FNGD PRODS
VAL = RBO.getProperty('','JFS_M_QTY',JFS_M_QTY);*LIST OF FNGD MANF QTY
VAL = RBO.getProperty('','RET_WHSE_LIST',JFS_WHSE);*LIST OF FNGD WHSE 
VAL = RBO.getProperty('','JOB_DIV',JOB_DIV)
VAL = RBO.getProperty('','SAVE_INV_JS_REC',SAVE.INV.JS.REC)

PCNT = DCOUNT(JFS_PROD,VM)
TEMP.INV.JS.REC = ""
MATL.TYPE = ""
DESC=""
REQD_PROD = ""; REQD_WHSE = ""; REQD_QTY = ""
UMS = ""
FOR P = 1 TO PCNT
	MPROD = JFS_PROD<1,P>
	MQTY = JFS_M_QTY<1,P> 
    	LOOP WHILE MPROD # "" DO
      		MATREAD IOF.REC FROM INV.FNGD, CONO:MPROD<1> ELSE
        		GOTO 1070
      		END
      		IF IOF.BOM = "" THEN GOTO 1070
      		MATREAD BOM.REC FROM FNGD.BOM, CONO:IOF.BOM ELSE
       		ERRMSG<1,-1> = "Cannot locate Bill Of Material # ":IOF.BOM
        		GOTO 1070
      		END
     		LOCATE MPROD<1> IN BOM.PROD<1>,1 SETTING FND THEN
       		BOM.PROD = DELETE(BOM.PROD,1,FND,0)
      		END
      		BCNT = DCOUNT(BOM.PROD,VM)
      		FOR B = 1 TO BCNT
       		IF BOM.PROD<1,B> = "" THEN
          			MAT IOF.REC = ""
        		END ELSE
          			MATREAD IOF.REC FROM INV.FNGD, CONO:BOM.PROD<1,B> ELSE
            				MAT IOF.REC = ""
	          		END
       	 	END
        		IF IOF.BOM = "" THEN
          			REQD.PROD<-1> = BOM.PROD<1,B>
	          		REQD.WHSE<-1> = JFS_WHSE<1,P>
       	   		IF BOM.Q.TYPE<1,B> = "F" THEN
            				REQD.QTY<-1> = BOM.Q.RATIO<1,B> /100
          			END ELSE
            				REQD.QTY<-1> = INT(SUM(MQTY<1>)* BOM.Q.RATIO<1,B>/1000)
	          		END
       	 	END ELSE
          			MPROD<-1> = BOM.PROD<1,B>
          			IF BOM.Q.TYPE<1,B> = "F" THEN
	            			REQD.QTY<-1> = BOM.Q.RATIO<1,B> 
       	   		END ELSE
            				REQD.QTY<-1> = INT(SUM(MQTY<1>)  * BOM.Q.RATIO<1,B>/1000)
          			END
	    		END
      		NEXT B
1070*
      		MPROD = DELETE(MPROD,1,0,0)
      		MQTY = DELETE(MQTY,1,0,0)
	REPEAT
NEXT P

DCNT = DCOUNT(REQD.PROD,AM)
*
*---- Check for duplicate products
*
FOR D = 1 TO DCNT
	IF REQD.QTY<D> > 0 THEN
      		PDNO = REQD.PROD<D>; WHNO = REQD.WHSE<D>
      		DD = D + 1
      		LOOP
        		LOCATE PDNO IN REQD.PROD,DD SETTING FND THEN
          			IF WHNO = REQD.WHSE<FND> THEN
            				REQD.QTY<D> = REQD.QTY<D> + REQD.QTY<FND>
            				REQD.QTY<FND> = 0
          			END
        		END ELSE
          			DD = 0
        		END
      		WHILE DD DO
        		DD = FND + 1
      		REPEAT
    	END
NEXT D

RQD.QTY.TEMP = ""
RSV.SERIAL = ""
CONV.FRMT = ""
FOR D = 1 TO DCNT
	PDNO = REQD.PROD<D>; WHNO = REQD.WHSE<D>
    	IWH.ID=CONO:PDNO:"!":WHNO
    	IF REQD.QTY<D> <= 0 THEN GOTO 1090
    	MATREAD INV.REC FROM INVENTORY, CONO:PDNO ELSE
      		ERRMSG<1,-1> = "Cannot locate Inventory Product # ":PDNO
      		GOTO 1090
    	END
	
    	LOCATE WHNO IN INV.WHSE.CODE<1>,1 SETTING FND ELSE
      		WHNO = ""
      		WCNT = DCOUNT(INV.WHSE.CODE<1>,VM)
      		FOR W = 1 TO WCNT WHILE WHNO = ""
        		MATREAD WHSE.REC FROM WAREHOUSE, CONO:INV.WHSE.CODE<1,W> THEN
          			IF JOB_DIV = WHS.DIV OR WHS.DIV = "00" THEN WHNO = INV.WHSE.CODE<1,W>
        		END
      		NEXT W
      		IF WHNO = "" THEN
        		ERRMSG<1,-1> = "No warehouses setup in division (":JOB_DIV:") for Product # ":PDNO
        		GOTO 1090
      		END
    	END
    	PTR = 1
LOOP
      	LOCATE PDNO IN JOB_RESV_MATL<1>,PTR SETTING MLOC THEN
       	IF WHNO = JOB_RESV_WHSE<1,MLOC> THEN
          		PTR = 0; MLOC = 0
        	END
      	END ELSE
       	PTR = 0
      	END
    	WHILE PTR DO
    		PTR = MLOC + 1
    	REPEAT
    	IF NOT(MLOC) THEN GOTO 1090
    	MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
    		ERRMSG<1,-1> = "Cannot locate Product line (":INV.LINE:") for Product # ":PDNO
      		GOTO 1090
    	END
	IF CATG.RSV.SERIAL = 'Y' THEN
		RSV.SERIAL<1,MLOC>='Y'
      	END ELSE RSV.SERIAL<1,MLOC>='N'
	
	MATREAD IWH.REC FROM INV.WHSE, CONO:PDNO:"!":WHNO ELSE
    		ERRMSG<1,-1> = "Cannot locate Warehouse (":WHNO:") for Product # ":PDNO
      		GOTO 1090
    	END
    	JOB_RESV_MATL<1,MLOC> = PDNO
       MATREAD INV.REC FROM INVENTORY,CONO:PDNO THEN
         DESC<1,MLOC>=INV.FULL.DESC
       END
    	JOB_RESV_WHSE<1,MLOC> = WHNO
    	JOB.RESV.DATE<1,MLOC> = "ORD REQD"
	MATL.TYPE<1,MLOC> = INV.PAP.TYPE
	UMS<1,MLOC> = INV.UNIT<1,2>
    	JOB.ALOC.QTY<1,MLOC> = 0.00
    	JOB.RESV.QTY<1,MLOC> = 0.00
    	JOB.USED.QTY<1,MLOC> = 0.00
    	JOB.ALOC.AMT<1,MLOC> = 0
    	JOB.RESV.AMT<1,MLOC> = 0
    	JOB.USED.AMT<1,MLOC> = 0
    	BEGIN CASE
    		CASE CATG.COST.TYPE = "SD"
       		REQD.AMT = IWH.STD.COST
	      	CASE CATG.COST.TYPE = "AV"
       	 	REQD.AMT = IWH.AVG.COST
	      	CASE CATG.COST.TYPE = "LT"
       	 	REQD.AMT = IWH.LIST.COST
	      	CASE 1
       		DIV.POS='';FISCAL.FLAG='JC';TRAN.PERIOD=''
        		ERR.FLG='';ERRMSG=''
			LAST.PRICE=0
       	 	CALL GET.LAST.COST(IWH.ID,MAT IWH.REC,WAREHOUSE,CONTROL,ERR.FLG,ERRMSG,DIV.POS,FISCAL.FLAG,TRAN.PERIOD,LAST.PRICE)
	       	REQD.AMT=LAST.PRICE+0
     	END CASE
     	LOCATE PDNO IN JFS.PROD<1>,1 SETTING FND THEN
		*REQD.DATE<1,MLOC> = JFS.DATE<1,FND>
		SAVE.INV.JS.REC<RQD.DATE.MV,MLOC> = JFS.DATE<1,FND>
     	END ELSE
		SAVE.INV.JS.REC<RQD.DATE.MV,MLOC> = ""
	END
	*REQD.AMT<1,MLOC> = REQD.AMT
     	SAVE.INV.JS.REC<RQD.AMT.MV,MLOC> = REQD.AMT

	$INCLUDE ICSBP INV.UM.CNV
	CONV.FRMT<1,MLOC> = ICR.CNV

	SWAP "," WITH "" IN ICR.CNV1
	IF ICR.SCAL THEN
     		MLTP = ("1":STR("0",ICR.SCAL)) + 0
     	END ELSE
       	MLTP = 1
     	END

	RQD.QTY<1,MLOC> = REQD.QTY<D> * MLTP
       RQD.QTY<1,MLOC>=OCONV(INT(((RQD.QTY<1,MLOC>/ ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)

     	SAVE.INV.JS.REC<RQD.QTY.MV,MLOC> = REQD.QTY<D> * MLTP
     *SAVE.INV.JS.REC<RQD.QTY.MV,MLOC>	=OCONV(INT(((SAVE.INV.JS.REC<RQD.QTY.MV,MLOC>/ ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)

      BALANCE<1,MLOC> = SAVE.INV.JS.REC<RQD.QTY.MV,MLOC> - JOB.ALOC.QTY<1,MLOC> - JOB.RESV.QTY<1,MLOC> - JOB.USED.QTY<1,MLOC>
	*BALANCE<1,MLOC> = RQD.QTY<1,MLOC> - JOB.ALOC.QTY<1,MLOC> - JOB.RESV.QTY<1,MLOC> - JOB.USED.QTY<1,MLOC>
	*BALANCE = OCONV(INT(((BALANCE / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)
	
	IF BALANCE<1,MLOC> >= 0 THEN
		BALANCE<1,MLOC> = OCONV(INT(((BALANCE<1,MLOC>/ICR.DV1)*ICR.MT1)/ICR.DV2 + .5),ICR.CNV1)
	END ELSE
		BALANCE<1,MLOC> = 0
	END
	RQD.QTY.TEMP<RQD.QTY.MV,MLOC> = OCONV(INT(((SAVE.INV.JS.REC<RQD.QTY.MV,MLOC>/ ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)

	TEMP.INV.JS.REC<RQD.QTY.MV,MLOC> = OCONV(INT(((SAVE.INV.JS.REC<RQD.QTY.MV,MLOC> / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)
	TEMP.INV.JS.REC<RQD.AMT.MV,MLOC> = OCONV(SAVE.INV.JS.REC<RQD.AMT.MV,MLOC>,"MD4")
	*RQD.AMT<1,MLOC> = OCONV(RQD.AMT<1,MLOC>,"MD4")
1090*
NEXT D
SWAP " " WITH " " IN DESC

VAL = RBO.setProperty('','JOB_RESV_MATL',JOB_RESV_MATL)
VAL = RBO.setProperty('','JOB_RESV_WHSE',JOB_RESV_WHSE)
VAL = RBO.setProperty('','JOB_RESV_DATE',JOB.RESV.DATE)
VAL = RBO.setProperty('','JOB_ALOC_QTY',JOB.ALOC.QTY)
VAL = RBO.setProperty('','JOB_RESV_QTY',JOB.RESV.QTY)
VAL = RBO.setProperty('','JOB_USED_QTY',JOB.USED.QTY)
VAL = RBO.setProperty('','JOB_ALOC_AMT',JOB.ALOC.AMT)
VAL = RBO.setProperty('','JOB_RESV_AMT',JOB.RESV.AMT)
VAL = RBO.setProperty('','JOB_USED_AMT',JOB.USED.AMT)
VAL = RBO.setProperty('','MATL_TYPE',MATL.TYPE)
VAL = RBO.setProperty('','REQD_PRICE',TEMP.INV.JS.REC<RQD.AMT.MV>)
VAL = RBO.setProperty('','REQD_DATE',TEMP.INV.JS.REC<RQD.DATE.MV>)
*VAL = RBO.setProperty('','REQD_QTY',SAVE.INV.JS.REC<RQD.QTY.MV>)
VAL = RBO.setProperty('','REQD_QTY',RQD.QTY)
VAL = RBO.setProperty('','RSV_REQD_QTY',RQD.QTY.TEMP<RQD.QTY.MV>)

VAL = RBO.setProperty('','REQD_BALANCE',BALANCE)
VAL = RBO.setProperty('','Ums',UMS)


VAL=RBO.setProperty('','RSV_SERIAL',RSV.SERIAL)
VAL=RBO.setProperty('','CNV_FORMAT',CONV.FRMT)
VAL=RBO.setProperty('','STAT_DESC',DESC)
*VAL = RBO.setProperty('','SAVE_INV_JS_REC',SAVE.INV.JS.REC)

99999
IF ERRMSG # "" THEN
	STATUS = RBO.setProperty('','ServerStatus','1')
	STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
END ELSE
	STATUS = RBO.setProperty('','ServerStatus','')
	STATUS = RBO.setProperty('','ServerMessage','')
END
* End of method code
RETURN

