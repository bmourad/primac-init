SUBROUTINE ICSSRA_WRITEDATA
********************************************************************************
*   Program name :- ICSSRA_WRITEDATA
*   Created:- 6/26/2003
*------------------------------------------------------------------------------*
**PROGRAMMER : G.PURUSHOTHAM RAO

* In Properties:
* --------------
*  
*
* Out Properties:
* ---------------
*  
********************************************************************************
$INCLUDE WWINSERT RBO.H

$INCLUDE CPYLIB COMMON1
$INCLUDE ICS.CPYLIB COM.INV.MAIN 
$INCLUDE ICS.CPYLIB COM.INV.SERIAL
$INCLUDE ICS.CPYLIB COM.INV.LINK

$DEFINE FILEVARS
$INCLUDE CPYLIB FILE.VARS

$DEFINE INVENTORY
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB WAREHOUSE
$DEFINE INVWHSE
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV.HIST
$DEFINE INVWHSELOC
$INCLUDE ICS.CPYLIB INV.WHSE.LOC
$INCLUDE ICS.CPYLIB INV.STATS
$INCLUDE ICS.CPYLIB INV.CNV
$DEFINE CATEGORY
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB INV.REC.ADJ
$INCLUDE PMC.CPYLIB COMPANY
$DEFINE PO
$INCLUDE PMC.CPYLIB PO
$INCLUDE APS.CPYLIB VEND.STATS
$INCLUDE APS.CPYLIB VEND.PO.STATS
$INCLUDE APS.CPYLIB VEND.PROD.STATS
$INCLUDE ICS.CPYLIB INV.JOB.STATS ;*T26216
$INCLUDE JCS.CPYLIB JOB ;*T26216 
$INCLUDE CPYLIB CHAR

$INCLUDE POS.CPYLIB ACCRUED.LIAB.HIST
$DEFINE INVSERIAL
$INCLUDE ICS.CPYLIB INV_SERIAL
$DEFINE INVRECEIPTS
$INCLUDE ICS.CPYLIB INV_RECEIPTS
$DEFINE INVRECPWHSE
$INCLUDE ICS.CPYLIB INV_RECP_WHSE
$DEFINE INVAUDITHIST
$INCLUDE ICS.CPYLIB INV_AUDIT_HIST
$DEFINE ICSID
$INCLUDE ICS.CPYLIB ICS.ID 
$INCLUDE PMC.CPYLIB FISCAL

* Insert method code here
ERR_NUM = 0

DEFFUN DIVISION_POSITION(COMP.NO,CONTROL.FILE,DIV.NO)
DEFFUN CALC_STK_QTY(COST.QTY,MAT INV.CNV.REC,LN,ROND)
DEFFUN CALC_COST_QTY(STK.QTY,MAT INV.CNV.REC,LN,ROND)
*DEFFUN CALC.COST.QTY(STK.QTY,MAT INV.CNV.REC,LN,ROND)

DEFFUN CURRENT_PERIOD(COMP.NO,CONTROL.FILE,DIV.POS,FISCAL.FLAG)

DEFFUN CALC_EXT_COST(COST.QTY,UNIT.COST,COST.WT,ROND)
MAT ORG.IWH.REC=''
OPEN.FLAG=1
TODAY = DATE()

OPEN '','INVENTORY' TO INVENTORY ELSE ERRMSG = 'INVENTORY FILE IS MISSING'; GOTO 93000
OPEN '','WAREHOUSE' TO WAREHOUSE ELSE ERRMSG = 'WAREHOUSE FILE IS MISSING'; GOTO 93000
OPEN '','CATEGORY' TO CATEGORY ELSE ERRMSG = 'CATEGORY FILE IS MISSING'; GOTO 93000
OPEN '','INV.WHSE' TO INV.WHSE ELSE ERRMSG = 'INV.WHSE FILE IS MISSING'; GOTO 93000
OPEN '','INV.HIST' TO INV.HIST ELSE ERRMSG = 'INV.HIST FILE IS MISSING'; GOTO 93000
OPEN '','INV.WHSE.LOC' TO INV.WHSE.LOC ELSE ERRMSG = 'INV.WHSE.LOC FILE IS MISSING'; GOTO 93000
OPEN '','INV_SERIAL' TO INV_SERIAL ELSE ERRMSG='INV_SERIAL FILE IS MISSING'; GOTO 93000
OPEN '','INV.STATS' TO INV.STATS ELSE ERRMSG = 'INV.STATS FILE IS MISSING'; GOTO 93000
OPEN '','INV_AUDIT_HIST' TO INV_AUDIT_HIST ELSE ERRMSG = 'INV_AUDIT_HIST FILE IS MISSING'; GOTO 93000
OPEN '','INV.REC.ADJ' TO INV.REC.ADJ ELSE ERRMSG = 'INV.REC.ADJ FILE IS MISSING'; GOTO 93000
OPEN '','PREFIX' TO PREFIX ELSE ERRMSG = 'PREFIX FILE IS MISSING'; GOTO 93000
OPEN '','COMPANY' TO COMPANY ELSE ERRMSG = 'COMPANY FILE IS MISSING'; GOTO 93000
OPEN '','CONTROL' TO CONTROL ELSE ERRMSG = 'CONTROL FILE IS MISSING'; GOTO 93000
OPEN '','SECURITY' TO SECURITY ELSE ERRMSG = 'SECURITY FILE IS MISSING'; GOTO 93000
OPEN '','ICS.SCREENS' TO M.SCREENS ELSE ERRMSG = 'ICS.SCREENS FILE IS MISSING'; GOTO 93000
OPEN '','INVENTORY.XREF' TO INVENTORY.XREF ELSE ERRMSG = 'INVENTORY.XREF FILE IS MISSING'; GOTO 93000
OPEN '','ACCRUED.LIAB.HIST' TO ACCRUED.LIAB.HIST ELSE ERRMSG = 'ACCRUED.LIAB.HIST FILE IS MISSING'; GOTO 93000
OPEN '','INV.JOB.STATS' TO INV.JOB.STATS ELSE ERRMSG = 'INV.JOB.STATS FILE IS MISSING'; GOTO 93000
OPEN '','INV_RECEIPTS' TO INV_RECEIPTS ELSE  ERRMSG="INV_RECEIPTS FILE IS MISSING";GOTO 93000
OPEN '','INV_RECP_WHSE' TO INV_RECP_WHSE ELSE ERRMSG="INV_RECP_WHSE FILE IS MISSING";GOTO 93000
OPEN '','JOB' TO JOB ELSE ERRMSG="JOB FILE IS MISSING";GOTO 93000

STATUS=RBO.getProperty('','PMCProperty',PMCProperty)
LOGIN.NAME = PMCProperty<1,3>
CONO = PMCProperty<1,4>
STATUS=RBO.getProperty('','ID',PRODUCT.ID)
STATUS=RBO.getProperty('','WHSE_NO',WHSE.NUM)

GEN.DIV = "00";GEN.DEPT = "00";GEN.CCTR = "000" 
DV.DP.CC = ""
****************
* WE HAVE TO GET DATA FROM ASP PAGE

SAJ.DIAM = ""
WRK.SER.DIAM = ""
WRK.SER.STK.QTY = ""

MATREAD COMP.REC FROM COMPANY, CONO ELSE
   ERRMSG = "Invalid Company ID (":CONO:")"
    GOTO 93000
END

IF CO.POS = "Y" THEN
  OPEN '','PO' TO PO ELSE ERRMSG = 'PO FILE IS MISSING'; GOTO 93000
END

IF CO.APS.R.INTRF > 1 THEN
  OPEN '','VEND.STATS' TO VEND.STATS ELSE ERRMSG = 'VEND.STATS FILE IS MISSING'; GOTO 93000
  OPEN '','VEND.PO.STATS' TO VEND.PO.STATS ELSE ERRMSG = 'VEND.PO.STATS FILE IS MISSING'; GOTO 93000
  OPEN '','VEND.PROD.STATS' TO VEND.PROD.STATS ELSE ERRMSG = 'VEND.PROD.STATS FILE IS MISSING'; GOTO 93000
END

MATREAD INV.REC FROM INVENTORY, CONO:PRODUCT.ID ELSE
  ERRMSG = 'CANNOT LOCATE PRODUCT - ':PRODUCT.ID 
  GOTO 93000
END

$INCLUDE ICSBP INV.UM.CNV

CATG.ID = CONO:INV.LINE
MATREAD CATG.REC FROM CATEGORY,CATG.ID THEN
END

IWH.ID=CONO:PRODUCT.ID:'!':WHSE.NUM
PROD = PRODUCT.ID

IH.ID = CONO : PROD
MATREADU IH.REC FROM INV.HIST, IH.ID ELSE
       MAT IH.REC = ''
END
DIV.POS='' ;*ADDED NEW
MATREAD IWH.REC FROM INV.WHSE,IWH.ID THEN 
;* REMOVED MATREADU
*ADDED NEW ON 22/09/2005
	DIV.POS=DIVISION_POSITION(CONO,CONTROL,WHS.DIV)
        BEGIN CASE 
          CASE DIV.POS<1,1>=''
            DIV.POS=DIV.POS<1,2>
          CASE DIV.POS<1,1>='-2'
            ERRMSG=DIV.POS<1,2>
            GOSUB 93000
        END CASE
*END
END ;*MATREAD IWH.REC
*ADDED NEW ON 22/09/2005
CUR.PERIOD=CURRENT_PERIOD(CONO,CONTROL,DIV.POS,"IC")
BEGIN CASE
  CASE CUR.PERIOD<1,1>=''
    CUR.PERIOD=CUR.PERIOD<1,2>
  CASE CUR.PERIOD<1,1>='-2'
    ERRMSG=CUR.PERIOD<1,2>
    GOSUB 93000
END CASE
*END

*STATUS=RBO.getProperty('','RECEIPT_NO',IWH.RECP.NO)
STATUS=RBO.getProperty('','STR',IWH.RECP.NO)

STATUS=RBO.getProperty('','SERIAL_NO',WRK.SER)
SWAP '#' WITH AM IN WRK.SER

STATUS=RBO.getProperty('','WRK_SER_QTY',WRK.SER.QTY)
*STATUS=RBO.getProperty('','WRK_SER_QTYS',WRK.SER.QTY.VAL)
*SWAP '#' WITH AM IN WRK.SER.QTY.VAL
SWAP '#' WITH AM IN WRK.SER.QTY

STATUS=RBO.getProperty('','WRK_SER_LOC',WRK.SER.LOC)
SWAP '#' WITH AM IN WRK.SER.LOC

STATUS=RBO.getProperty('','SAJ_QTY',SAJ.QTY)
SWAP '#' WITH AM IN SAJ.QTY
STATUS=RBO.getProperty('','SAJ_TOT_QTY',SAJ.TOT.QTY)
SWAP '#' WITH AM IN SAJ.TOT.QTY
*SAJ_TOT_QTY=DCOUNT(SAJ_TOT_QTY,"#")

STATUS=RBO.getProperty('','SAJ_PERIOD',SAJ.PERIOD)
SWAP '#' WITH AM IN SAJ.PERIOD
***********||||||||||||||||||||||
MATREADU INV.STAT.REC FROM INV.STATS, IWH.ID ELSE MAT INV.STAT.REC = ""
RCNT = DCOUNT(IWH.RECP.NO,@VM)

*T27990 FOR R=1 TO RCNT
  
 * WHILE ERRMSG = ''
ERRMSG = ""
FOR R=1 TO RCNT 

  IF SAJ.TOT.QTY<R> # '' THEN
    
    INVR.ID = CONO:IWH.RECP.NO<1,R>
    MATREADU INVR.REC FROM INV_RECEIPTS,INVR.ID THEN
      IRW.ID=CONO:IWH.RECP.NO<1,R>:"!":WHSE.NUM
      MATREADU IRW.REC FROM INV_RECP_WHSE,IRW.ID THEN
        IF CO.POS = "Y" THEN
          GOSUB CHECK.PO
        END ELSE
          MAT PO.REC = ""
          PO.FOUND = 0
        END

	*SCNT = DCOUNT(WRK.SER<R>,@VM)
    SCNT=DCOUNT(IRW.SERIAL.NO,VM)
    FOR S=1 TO SCNT
    	  STR1 = ''
    	  STR2 = ''  
         MAT INAH.REC=''
         ISTK.ID = CONO:WRK.SER<R,S>
         IF SAJ.QTY<R,S> # "" THEN
	  	SAJ.QTY<R,S>=ICONV(SAJ.QTY<R,S>,ICR.CNV)
         	STR1=CALC_COST_QTY(SAJ.QTY<R,S>,MAT INV.CNV.REC,'','')
	  	SAJ.QTY<R,S> = STR1
	  END
	  WRK.SER.QTY<R,S> = ICONV(WRK.SER.QTY<R,S>,ICR.CNV)	
	  STR2=CALC_COST_QTY(WRK.SER.QTY<R,S>,MAT INV.CNV.REC,'','')
	  WRK.SER.QTY<R,S> = STR2
	  IF SAJ.QTY<R,S> # "0.00" AND SAJ.QTY<R,S> # "" THEN 
         IWLO.ID=CONO:PROD:"!":WHSE.NUM:"!":WRK.SER.LOC<R,S>
         MATREADU IWLO.REC FROM INV.WHSE.LOC, IWLO.ID THEN
             DIFF.QTY = SAJ.QTY<R,S> - WRK.SER.QTY<R,S>
             IF DIFF.QTY > 0 THEN ROND=.5 ELSE ROND=(-.5)
                MATREAD INV.REC FROM INVENTORY,CONO:PRODUCT.ID THEN
                  INV.COST.WT=INV.COST.WT
                END
                MATREAD IWH.REC FROM INV.WHSE,CONO:PRODUCT.ID!WHSE.NUM THEN
                  IWH.COST.FI<1,R>=IWH.COST.FI<1,R>
                END
*                 DIFF.COST=CALC_EXT_COST(DIFF.QTY,IWH.COST.FI<1,R>,INV.COST.WT,ROND)
                 DIFF.COST=INT((IWH.COST.FI<1,R>*DIFF.QTY)/(INV.COST.WT*1000)+ROND)
          *    DIFF.COST=(IWH.COST.FI<1,R>/10000)*(DIFF.QTY/10)/(INV.COST.WT/100)
           *   DIFF.COST=INT(DIFF.COST+ROND)
              GL.TOT-=DIFF.COST
              STATUS=RBO.setProperty('','TEMP',IWLO.LOC.ON.HAND:"++":DIFF.QTY)
              IF IWLO.LOC.ON.HAND + DIFF.QTY LT 0 THEN
                RELEASE INV.WHSE.LOC,IWLO.ID
                ERRMSG = "LOCATION ":WRK.SER.LOC<R,S>:" CANNOT GO NEGATIVE"
                GOSUB 93000
              END ELSE


                LOCATE WRK.SER<R,S> IN IWLO.SERIAL<1>,1  SETTING SLOC ELSE
                  RELEASE INV.WHSE.LOC,IWLO.ID
                  ERRMSG='SERIAL ':WRK.SER<R,S>:' IS MISSING IN LOCATION RECORD. ':IWLO.ID
                  GOSUB 93000
                END

                IF ERRMSG='' THEN               
                  ISTK.ID = CONO:WRK.SER<R,S>
                  MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID THEN
               *   STATUS=RBO.setProperty('','READVAL',ISTK.RSVB.QTY:"--":DIFF.QTY)
			IF ISTK.RSVB.QTY+DIFF.QTY < 0 THEN
                      ERRMSG='Tracking unit ':WRK.SER<R,S>:' cannot go negative.'
                      GOSUB 93000
                    END ELSE
                      GOSUB SET.INAH
                      IWH.ORG.FI<1,R> = IWH.ORG.FI<1,R> + DIFF.QTY
                      IWH.RSV.FI<1,R> = IWH.RSV.FI<1,R> + DIFF.QTY
                      IWH.QTY.FI<1,R> = IWH.QTY.FI<1,R> + DIFF.QTY
                      ACTION=2
                      TMP.ARR = WRK.SER<R,S>
WRITE "BEFORE" ON CONTROL,"BEF"
*T27990 v             CALL ICS.IWH.SUB(CONO,SAJ.PERIOD<R>,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG)
                      CALL ICS_IWH_SUB(CONO,SAJ.PERIOD<R>,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG,ERRMSG)
WRITE "MID" ON CONTROL,"MID"
                      IF ERRMSG # '' THEN
                        GOSUB 93000
                        ACTION=9
                        CALL ICS_IWH_SUB(CONO,SAJ.PERIOD<R>,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG,ERRMSG)
                        CONTINUE
                      END
*T27990 ^
WRITE ERRMSG ON CONTROL,"HI"
*                      CALL ICS_IWH_SUB(CONO,SAJ.PERIOD<R>,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG)

			
			RELEASE
                      ;*
                      IWH.ON.HAND+=DIFF.QTY
                      IH.CNT = DCOUNT(IH.DATE,VM)
                      IDATE = DATE()
                      LOCATE IDATE IN IH.DATE<1> SETTING PP ELSE NULL
                      BEGIN CASE
                        CASE PP = IH.CNT
                          IH.AMOUNT<1,PP> = IH.AMOUNT<1,PP> + DIFF.QTY
                        CASE PP > IH.CNT
                          IH.AMOUNT<1,PP> = IH.AMOUNT<1,PP> + DIFF.QTY
                          IH.DATE<1,PP> = IDATE
                        CASE 1
                          IH.AMOUNT<1,PP> = IH.AMOUNT<1,PP> + DIFF.QTY
                      END CASE
                      IF (PO.FOUND) THEN
                        IWH.ON.ORDER = IWH.ON.ORDER - PO.QTY.OPEN<1,PO.LN>
                        IF IWH.ON.ORDER < 0 THEN IWH.ON.ORDER = 0
                        GOSUB UPD.ISTAT.PO
                        IWH.ON.ORDER = IWH.ON.ORDER + PO.QTY.OPEN<1,PO.LN>
                        IF IWH.ON.ORDER < 0 THEN IWH.ON.ORDER = 0
                      END
                     * IF CO.APS.R.INTRF > 2 THEN 
                      IF CO.APS.R.INTRF >= 2 AND PO.FOUND THEN 
                       GOSUB UPD.VEND.STATS
                      END
                    END
                  END
                END
              END
            END ELSE
              RELEASE INV.WHSE.LOC, IWLO.ID
              ERRMSG='Location ':WRK.SER.LOC<R,S>:' is missing for this product.'
              GOSUB 93000
            END
          END
        NEXT S
	IF ERRMSG # '' THEN CONTINUE ;*T27990
        IF PO.FOUND THEN
*	   OVERRECV = PO.TOT.RECEVED<1,R> - PO.TOT.ONORD<1,R>
	   OVERRECV = PO.TOT.RECEVED<1,PO.LN> - PO.TOT.ONORD<1,PO.LN>
*	   UNDRALOC = PO.TOT.ONORD<1,R> - SUM(PO.JB.ONORD<1,R>)
	   UNDRALOC = PO.TOT.ONORD<1,PO.LN> - SUM(PO.JB.ONORD<1,PO.LN>)
	
          GOSUB UPD.ALLOC.RESV
	  MATWRITE PO.REC ON PO, CONO : INVR.PO
        END
        IF PO.ACCRUE='Y' THEN
          GOSUB UPD.ACCR
        END
      END ELSE
        RELEASE INV_RECP_WHSE,IRW.ID
        ERRMSG= 'INV_RECP_WHSE RECORD ':IRW.ID:' IS MISSING.'
        GOSUB 93000
      END
    END ELSE
      RELEASE INV_RECEIPTS,INVR.ID
      ERRMSG='INV_RECEIPTS RECORD ':INVR.ID:' IS MISSING.'
      GOSUB 93000
    END
  END ELSE
    
    GOSUB 93000
  END
NEXT R
*T27990 v
IF ERRMSG = '' THEN
  IF CUR.PERIOD=INAH.PERIOD THEN
    CALL INV_AVG_COST_MAINT(MAT IWH.REC,INV.COST.WT,CUR.PERIOD)
  END
  ACTION=3                                                          
  INAH.PROD=PROD
  INAH.WHSE=WHSE.NUM
*T27990 CALL ICS.IWH.SUB (CONO,'','','','',ACTION,OPEN.FLAG)
  *CALL ICS_IWH_SUB (CONO,'','','','',ACTION,OPEN.FLAG,ERRMSG) ;*COMMENTED COZ GIVING ERROR FOR ACTION=3-UNOPENED FILES
  CALL ICS_IWH_SUB_3(CONO,'','','','',ACTION,OPEN.FLAG,ERRMSG)
  MATWRITE IH.REC ON INV.HIST, IH.ID
  IF ISTAT.PO="" AND ISTAT.JOB="" THEN
    DELETE INV.STATS, IWH.ID
  END ELSE
    MATWRITE INV.STAT.REC ON INV.STATS, IWH.ID
  END
END ELSE RELEASE
*T27990 ^
RETURN
*
********
* 


*
**************
SET.INAH: 
**************
*

IF CATG.TYPE = "L" OR CATG.TYPE = "RL" OR CATG.TYPE = "PC" THEN
  INAH.CUR.DIAM=WRK.SER.DIAM<R,S>
  IF INAH.CUR.DIAM<0 THEN INAH.CUR.DIAM=0
  INAH.NEW.DIAM=SAJ.DIAM<R,S>
  IF INAH.NEW.DIAM<0 THEN INAH.NEW.DIAM=0
END
IF CATG.TYPE # "L" THEN
*T27990 INAH.CUR.STK.QTY=WRK.SER.STK.QTY<R,S>
  INAH.NEW.STK.QTY=SAJ.QTY<R,S>/ICR.DV1*ICR.MT1/ICR.DV2
  INAH.NEW.STK.QTY=INT(INAH.NEW.STK.QTY+ROND)
END
INAH.PROD=PROD
INAH.WHSE=WHSE.NUM
INAH.TYPE='A'
INAH.DATE=TODAY
INAH.SYS.DATE=TODAY
INAH.SYS.TIME=TIME()
INAH.SRC='IQ'
IF PO.ACCRUE='Y' THEN
  INAH.ACCT=CATG.INV
  INAH.ACCR.ACCT= CATG.ACCRU.LIAB
END
INAH.LOC=WRK.SER.LOC<R,S>
INAH.SERIAL=WRK.SER<R,S>
INAH.RECP.NO=IWH.RECP.NO<1,R>
INAH.CUR.QTY = WRK.SER.QTY<R,S>
*INAH.CUR.QTY = WRK.SER.QTY.VAL<R,S>
INAH.NEW.QTY = SAJ.QTY<R,S>
INAH.QTY=INAH.NEW.QTY - INAH.CUR.QTY

INAH.EXT.COST=DIFF.COST
INAH.OPER.ID = @LOGNAME
INAH.UNIT.COST=INVR.UNIT.COST
INAH.PERIOD=SAJ.PERIOD<R>
INAH.DV.DP.CC= DV.DP.CC
INAH.TRAN= INVR.PO
INAH.JOB= INVR.VEND

RETURN

*
**************
CHECK.PO: 
**************
*
PO.FOUND = 1
PO.ID = CONO:INVR.PO
MATREADU PO.REC FROM PO,PO.ID THEN
  PO.LN = INVR.PO.LN
  BEGIN CASE
    CASE PO.PROD.NUM<1,PO.LN> =''
      PLOC=0
    CASE WHSE.NUM # PO.WHSE<1,PO.LN>
      PLOC=0
    CASE INVR.UNIT.COST # INT((PO.GROS.PRICE<1,PO.LN> * (1- (PO.DISCOUNT<1,PO.LN>/10000))) / INV.SBR + .5)
      PLOC=0
    CASE 1
      PLOC=1
  END CASE
  IF PLOC = 0 THEN
    MAT PO.REC = ""
    PO.FOUND = 0
    RELEASE PO,PO.ID
  END
END ELSE
  PO.FOUND=0
END
RETURN
*
***************
UPD.ISTAT.PO: 
***************
*
LOCATE INVR.PO IN ISTAT.PO<1>,1 SETTING SFND ELSE
  ISTAT.PO<1,SFND> = INVR.PO
  ISTAT.PO.VEND<1,SFND> = INVR.VEND
  ISTAT.PO.DATE<1,SFND> = PO.DATE
  ISTAT.PO.QTY<1,SFND> = PO.QTY.OPEN<1,PO.LN>
  ISTAT.PO.JOB<1,SFND> = ""
  ISTAT.PO.JOB.QTY<1,SFND> = ""
  ISTAT.PO.JOB.AMT<1,SFND> = ""
END
ISTAT.PO.QTY<1,SFND> = ISTAT.PO.QTY<1,SFND> - PO.QTY.OPEN<1,PO.LN>
IF PO.TOT.RECEVED<1,PLOC>+DIFF.QTY<0 THEN
  PO.TOT.RECEVED<1,PLOC> = 0 
END ELSE 
  PO.TOT.RECEVED<1,PLOC> = PO.TOT.RECEVED<1,PLOC> + DIFF.QTY 
END
PO.QTY.OPEN<1,PO.LN> = PO.TOT.ONORD<1,PO.LN> - PO.TOT.CANCEL<1,PO.LN> - PO.TOT.RECEVED<1,PO.LN>
IF PO.QTY.OPEN<1,PO.LN> < 0 THEN PO.QTY.OPEN<1,PO.LN> = 0
ISTAT.PO.QTY<1,SFND> = ISTAT.PO.QTY<1,SFND> + PO.QTY.OPEN<1,PO.LN>
IF ISTAT.PO.QTY<1,SFND> = 0 THEN
  ISTAT.PO = DELETE(ISTAT.PO,1,SFND,0)
  ISTAT.PO.VEND = DELETE(ISTAT.PO.VEND,1,SFND,0)
  ISTAT.PO.DATE = DELETE(ISTAT.PO.DATE,1,SFND,0)
  ISTAT.PO.QTY = DELETE(ISTAT.PO.QTY,1,SFND,0)
  ISTAT.PO.JOB = DELETE(ISTAT.PO.JOB,1,SFND,0)
  ISTAT.PO.JOB.QTY = DELETE(ISTAT.PO.JOB.QTY,1,SFND,0)
  ISTAT.PO.JOB.AMT = DELETE(ISTAT.PO.JOB.AMT,1,SFND,0)
END
RETURN
*
***************
UPD.VEND.STATS: 
***************
*
VSTAT.ID = CONO : INVR.VEND :"!R"
VPS.ID = VSTAT.ID :"!": INVR.PO
VPDS.ID = VPS.ID :"!": PROD : "!": WHSE.NUM:"@":PO.PROD.SEQ<1,PO.LN>
WRITE VPDS.ID ON CONTROL,"IIW"
MATREADU VPDS.REC FROM VEND.PROD.STATS, VPDS.ID ELSE
  RELEASE VEND.PROD.STATS, VPDS.ID
  MAT VPDS.REC = ''
END
WRITE VPDS.REC.FI.DATE ON CONTROL,"VPP"
PTR = 1
LOOP
  IWH.COST.FI<1,R>=IRW.UNIT.COST                                                               
 LOCATE IWH.RECV.FI<1,R> IN VPDS.REC.FI.DATE<1>,PTR SETTING DFND ELSE DFND=0
 * LOCATE IWH.RECV.FI<1,R> IN VPDS.REC.FI.DATE<1>,PTR SETTING DFND ELSE DFND = 0

  STATUS=RBO.setProperty('','TEMPVAL',IRW.UNIT.COST)
  BEGIN CASE
    CASE DFND = 0
      PTR = 0
    CASE IWH.COST.FI<1,R> # VPDS.REC.UN.COST<1,DFND>
      PTR = DFND + 1
    CASE VPDS.REC.QTY<1,DFND> + INT(DIFF.QTY/10) LT 0
      PTR = DFND + 1
    CASE 1
      PTR = 0
  END CASE
WHILE PTR DO
REPEAT
STATUS=RBO.setProperty('','TEMP',PTR)

IF DFND = 0 THEN
  RELEASE VEND.PROD.STATS, VPDS.ID
  ERRMSG = "Warning Vend.Prod.Stats was not adjusted!" 
  GOSUB 93000
END ELSE
  MATREADU VPS.REC FROM VEND.PO.STATS, VPS.ID THEN
    PTR = 1
    LOOP
      LOCATE PROD IN VPS.PROD<1>,PTR SETTING PFND ELSE PFND = 0
      BEGIN CASE
        CASE PFND = 0
          PTR = 0
       * CASE WHSE.NUM # VPS.WHSE<1,PFND>
          CASE WHSE.NUM:"@":PO.PROD.SEQ<1,PO.LN> # VPS.WHSE<1,PFND>
          PTR = PFND + 1
        CASE 1
          PTR = 0
      END CASE
    WHILE PTR DO
    REPEAT
    IF PFND = 0 THEN
      RELEASE VEND.PO.STATS, VPS.ID
      RELEASE VEND.PROD.STATS, VPDS.ID
    END ELSE
      MATREADU VSTAT.REC FROM VEND.STATS, VSTAT.ID ELSE
        MAT VSTAT.REC = ""
      END
      LOCATE INVR.PO IN VSTAT.PO<1>,1 SETTING POFND ELSE POFND = 0
      TEMP.AMT = INT(((INVR.UNIT.COST/100) * (VPDS.REC.QTY<1,DFND>/(INV.COST.WT/100)))/100 + .5)
      VPS.REC.AMT<1,PFND> = VPS.REC.AMT<1,PFND> - TEMP.AMT
      VPS.REC.QTY<1,PFND> = VPS.REC.QTY<1,PFND> + INT(DIFF.QTY/10)
      IF POFND THEN
        VSTAT.PO.RECV<1,POFND> = VSTAT.PO.RECV<1,POFND> - TEMP.AMT
      END
      VPDS.REC.QTY<1,DFND> = VPDS.REC.QTY<1,DFND> + INT(DIFF.QTY/10)
      IF VPDS.REC.QTY<1,DFND> < 0 THEN VPDS.REC.QTY<1,DFND> = 0
      TEMP.AMT = INT(((IWH.COST.FI<1,R>/100) * (VPDS.REC.QTY<1,DFND>/(INV.COST.WT/100)))/100 + .5)
      VPS.REC.AMT<1,PFND> = VPS.REC.AMT<1,PFND> + TEMP.AMT
      IF VPS.REC.QTY<1,PFND> < 0 THEN
        VPS.REC.QTY<1,PFND> = 0
        VPS.REC.AMT<1,PFND> = 0
      END ELSE
        IF VPS.REC.AMT<1,PFND> < 0 THEN VPS.REC.AMT<1,PFND> = 0
      END
      IF POFND THEN
        VSTAT.PO.RECV<1,POFND> = VSTAT.PO.RECV<1,POFND> + TEMP.AMT
        IF VSTAT.PO.RECV<1,POFND> < 0 THEN VSTAT.PO.RECV<1,POFND> = 0
        MATWRITE VSTAT.REC ON VEND.STATS, VSTAT.ID
      END ELSE
        RELEASE VEND.STATS, VSTAT.ID
      END
      MATWRITE VPDS.REC ON VEND.PROD.STATS, VPDS.ID
      MATWRITE VPS.REC ON VEND.PO.STATS, VPS.ID
    END
  END ELSE
    RELEASE VEND.PO.STATS, VPS.ID
    RELEASE VEND.PROD.STATS, VPDS.ID
  END
END
RETURN
*
******************
UPD.ACCR: 
******************
*
IF PO.ACCRUE = "Y" THEN
  INAH.ACCR.ACCT=CATG.ACCRU.LIAB
  ;* Upate Accrued Liability History
  READU ALH.CT FROM CONTROL,CONO:"ALHCOUNTER" ELSE ALH.CT=0
  ALH.CT = ALH.CT + 1
  IF ALH.CT > 999999 THEN ALH.CT = 1
  WRITE ALH.CT ON CONTROL,CONO:"ALHCOUNTER"
  MAT ALH.REC = ""
  ALH.ID = CONO:STR("0",6-LEN(ALH.CT)):ALH.CT
  ALH.DATE = INAH.DATE
  ALH.REF = "R*":INVR.PO:"*":PROD 
  ALH.SRC = INAH.SRC
  ALH.MON = INAH.PERIOD
  ALH.AMT = GL.TOT
  GL.TOT=0
  ALH.ACCT = INAH.ACCT
  IF WHS.DIV THEN ALH.DV.DP.CC = WHS.DIV:"00":"000"
  MATWRITE ALH.REC ON ACCRUED.LIAB.HIST,ALH.ID
END
RETURN

*
*
*
*****************
UPD.ALLOC.RESV: 
*****************
*
*T27755 v
IF DIFFX < 0 THEN
* IF OVERRECV < 0 THEN DIFFX+=OVERRECV
  IF OVERRECV > 0 THEN DIFFX+=OVERRECV
* IF UNDRALOC < 0 THEN DIFFX += UNDRALOC
  IF UNDRALOC > 0 THEN DIFFX += UNDRALOC
END
*T27755 ^
JCNT=DCOUNT(PO.JOB.NO<1,PO.LN>,SM)
WRK.PO.JOB.NO=''; WRK.PO.JB.ONORD=''; WRK.PO.JB.RECEVED=''
WRK.PO.JB.OPEN=''
JJC=0
IF DIFFX+0 # 0 THEN ;*T28289
  IF DIFFX < 0 THEN
    FOR JJ=JCNT TO 1 STEP -1
      JJC += 1
      WRK.PO.JOB.NO<1,1,JJC>=PO.JOB.NO<1,PO.LN,JJ>
      WRK.PO.JB.ONORD<1,1,JJC>=PO.JB.ONORD<1,PO.LN,JJ>
      WRK.PO.JB.RECEVED<1,1,JJC>=PO.JB.RECEVED<1,PO.LN,JJ>
      WRK.PO.JB.OPEN<1,1,JJC>=PO.JB.OPEN<1,PO.LN,JJ>
    NEXT JJ
    PO.JOB.NO<1,PO.LN>=WRK.PO.JOB.NO
    PO.JB.ONORD<1,PO.LN>=WRK.PO.JB.ONORD
    PO.JB.RECEVED<1,PO.LN>=WRK.PO.JB.RECEVED
    PO.JB.OPEN<1,PO.LN>=WRK.PO.JB.OPEN
  END
  FOR JLOC=1 TO JCNT
    DIFFY=0
    PJOBNO=PO.JOB.NO<1,PO.LN,JLOC>
    TQTY=PO.JB.OPEN<1,PO.LN,JLOC>
    TCOST=IWH.COST.FI<1,R>
*T27755 v In this case Qty is positive so rounding must also be.
* NEW.COST=CALC_EXT_COST(TQTY,TCOST,INV.COST.WT,ROND)
    NEW.COST=CALC_EXT_COST(TQTY,TCOST,INV.COST.WT,+.5)
    LOCATE PJOBNO IN ISTAT.PO.JOB<1,SFND>,1 SETTING SJFND ELSE
      ISTAT.PO.JOB<1,SFND,SJFND>=PJOBNO
      ISTAT.PO.JOB.QTY<1,SFND,SJFND>=PO.JB.OPEN<1,PO.LN,JLOC>
      ISTAT.PO.JOB.AMT<1,SFND,SJFND>=NEW.COST
    END
    MATREADU INV.JS.REC FROM INV.JOB.STATS, IWH.ID:"!":PJOBNO ELSE
      MAT INV.JS.REC=''
    END
*T27755 v
    HOLD.IJS.RECP.NO = IJS.RECP.NO
    HOLD.IJS.FI.QTY = IJS.FI.QTY
*T27755 ^
    LOCATE INVR.PO IN IJS.PO<1>, 1 SETTING FNDP ELSE
      IJS.PO<1,FNDP>=INVR.PO
      IJS.JOB.ALOC=IJS.JOB.ALOC + PO.JB.OPEN<1,PO.LN,JLOC>
      IJS.PO.JOB.QTY<1,FNDP>=PO.JB.OPEN<1,PO.LN,JLOC>
      IJS.PO.JOB.AMT<1,FNDP>=NEW.COST
    END
    MATREADU JOB.REC FROM JOB, CONO:PJOBNO ELSE MAT JOB.REC=''
    PTR=1
    LOOP
      LOCATE PROD IN JOB.RESV.MATL<1>,PTR SETTING MLOC ELSE MLOC=0
      IF MLOC THEN
        IF JOB.RESV.WHSE<1,MLOC>=WHSE.NUM THEN
          PTR=0
        END ELSE
          PTR=MLOC + 1
        END
      END
    WHILE MLOC AND PTR DO REPEAT
    IF MLOC=0 THEN
      MLOC=DCOUNT(JOB.RESV.MATL,VM)+1
      JOB.RESV.MATL<1,MLOC>=PROD
      JOB.RESV.WHSE<1,MLOC>=WHSE.NUM
      JOB.RESV.DATE<1,MLOC>=DATE()
      JOB.ALOC.QTY<1,MLOC>=PO.JB.OPEN<1,PO.LN,JLOC>
      JOB.RESV.QTY<1,MLOC>=0
      JOB.USED.QTY<1,MLOC>=0
      JOB.ALOC.AMT<1,MLOC>=NEW.COST
      JOB.RESV.AMT<1,MLOC>=0
      JOB.USED.AMT<1,MLOC>=0
    END
    BEGIN CASE
      CASE DIFFX > 0
        IF PO.JB.OPEN<1,PO.LN,JLOC> >= DIFFX THEN
          PO.JB.RECEVED<1,PO.LN,JLOC> += DIFFX
          ISTAT.PO.JOB.QTY<1,SFND,SJFND> -= DIFFX
          IJS.PO.JOB.QTY<1,FNDP> -= DIFFX
          IJS.JOB.ALOC -= DIFFX
          TQTY=DIFFX
          TCOST=IWH.COST.FI<1,R>
          NEW.COST=CALC_EXT_COST(TQTY,TCOST,INV.COST.WT,ROND)
          ISTAT.PO.JOB.AMT<1,SFND,SJFND> -= NEW.COST
          IJS.PO.JOB.AMT<1,FNDP> -= NEW.COST
          JOB.ALOC.QTY<1,MLOC> -= DIFFX
          JOB.ALOC.AMT<1,MLOC> -= NEW.COST
          DIFFY=DIFFX
          DIFFX=0
        END ELSE
          IF PO.JB.OPEN<1,PO.LN,JLOC> > 0 THEN
            DIFFX -= PO.JB.OPEN<1,PO.LN,JLOC>
*T27755 v
*         DIFFY=PO.JB.OPEN<1,PO.LN,JLOC> * (-1)
            DIFFY=PO.JB.OPEN<1,PO.LN,JLOC>
*         PO.JB.RECEVED<1,PO.LN,JLOC> -= PO.JB.OPEN<1,PO.LN,JLOC>
            PO.JB.RECEVED<1,PO.LN,JLOC> += PO.JB.OPEN<1,PO.LN,JLOC>
            ISTAT.PO.JOB.QTY<1,SFND,SJFND> -= PO.JB.OPEN<1,PO.LN,JLOC>
            IJS.PO.JOB.QTY<1,FNDP> -= PO.JB.OPEN<1,PO.LN,JLOC>
            IJS.JOB.ALOC -= PO.JB.OPEN<1,PO.LN,JLOC>
            TQTY=PO.JB.OPEN<1,PO.LN,JLOC>
            TCOST=IWH.COST.FI<1,R>
            NEW.COST=CALC_EXT_COST(TQTY,TCOST,INV.COST.WT,ROND)
            ISTAT.PO.JOB.AMT<1,SFND,SJFND> -= NEW.COST
            IJS.PO.JOB.AMT<1,FNDP> -= NEW.COST
            JOB.ALOC.QTY<1,MLOC> -= PO.JB.OPEN<1,PO.LN,JLOC>
            JOB.ALOC.AMT<1,MLOC> -= NEW.COST
          END
        END
      CASE 1
        IF PO.JB.RECEVED<1,PO.LN,JLOC> >= ABS(DIFFX)  THEN
          PO.JB.RECEVED<1,PO.LN,JLOC> += DIFFX
          ISTAT.PO.JOB.QTY<1,SFND,SJFND> -= DIFFX
          IJS.PO.JOB.QTY<1,FNDP> -= DIFFX
          IJS.JOB.ALOC -= DIFFX
          TQTY=DIFFX
          TCOST=IWH.COST.FI<1,R>
          NEW.COST=CALC_EXT_COST(TQTY,TCOST,INV.COST.WT,ROND)
          ISTAT.PO.JOB.AMT<1,SFND,SJFND> -= NEW.COST
          IJS.PO.JOB.AMT<1,FNDP> -= NEW.COST
          JOB.ALOC.QTY<1,MLOC> -= DIFFX
          JOB.ALOC.AMT<1,MLOC> -= NEW.COST
          DIFFY=DIFFX
          DIFFX=0
        END ELSE
          IF PO.JB.RECEVED<1,PO.LN,JLOC> > 0 THEN
            ISTAT.PO.JOB.QTY<1,SFND,SJFND> += PO.JB.RECEVED<1,PO.LN,JLOC>
            IJS.PO.JOB.QTY<1,FNDP> += PO.JB.RECEVED<1,PO.LN,JLOC>
            IJS.JOB.ALOC += PO.JB.RECEVED<1,PO.LN,JLOC>
            TQTY=PO.JB.RECEVED<1,PO.LN,JLOC>
            TCOST=IWH.COST.FI<1,R>
*T27755 v NEW.COST=CALC_EXT_COST(TQTY,TCOST,INV.COST.WT,ROND)
            NEW.COST=CALC_EXT_COST(TQTY,TCOST,INV.COST.WT,+.5)
            ISTAT.PO.JOB.AMT<1,SFND,SJFND> += NEW.COST
            IJS.PO.JOB.AMT<1,FNDP> += NEW.COST
            JOB.ALOC.QTY<1,MLOC> += PO.JB.RECEVED<1,PO.LN,JLOC>
            JOB.ALOC.AMT<1,MLOC> += NEW.COST
*T27755 v DIFFX -= PO.JB.RECEVED<1,PO.LN,JLOC>
            DIFFX += PO.JB.RECEVED<1,PO.LN,JLOC>
*T27755 v DIFFY=PO.JB.RECEVED<1,PO.LN,JLOC>
            DIFFY=PO.JB.RECEVED<1,PO.LN,JLOC> * (-1)
            PO.JB.RECEVED<1,PO.LN,JLOC>=0
          END
        END
    END CASE
    PO.JB.OPEN<1,PO.LN,JLOC>=PO.JB.ONORD<1,PO.LN,JLOC>-PO.JB.RECEVED<1,PO.LN,JLOC>
    IF PO.JB.OPEN<1,PO.LN,JLOC> < 0 THEN PO.JB.OPEN<1,PO.LN,JLOC>=0
    RESV.QTY=DIFFY
    RESV.ARR=''
    *
    *CODE FROM FIFO.RESV.SUB    FOR STD.PRICE etc..
    *
    GOSUB FIFO_RESV_SUB
    IF ERRMSG # '' THEN 
	GOSUB 93000
	RETURN  ;*T28289
    END
    GOSUB SET.RESERVES
*T27755 v  JOB.RESV.QTY<1,MLOC>+=(DIFFY-RESV.QTY)
    IF DIFFY > 0 THEN TMP = DIFFY - RESV.QTY ELSE TMP = DIFFY + RESV.QTY
    JOB.RESV.QTY<1,MLOC> += TMP
*T27755 ^
    JOB.RESV.AMT<1,MLOC>+=STD.PRICE
    IF JOB.CUST # "" THEN
      JOB.ID=CONO:PJOBNO
      MATWRITE JOB.REC ON JOB,JOB.ID
    END ELSE
      RELEASE JOB,JOB.ID
    END
    IF ISTAT.PO.JOB.QTY<1,SFND,SJFND>=0 THEN
      ISTAT.PO.JOB=DELETE(ISTAT.PO.JOB,1,SFND,SJFND)
      ISTAT.PO.JOB.QTY=DELETE(ISTAT.PO.JOB.QTY,1,SFND,SJFND)
      ISTAT.PO.JOB.AMT=DELETE(ISTAT.PO.JOB.AMT,1,SFND,SJFND)
    END
    IF IJS.PO.JOB.QTY<1,FNDP>=0 THEN
      IJS.PO=DELETE(IJS.PO,1,FNDP,0)
      IJS.PO.JOB.QTY=DELETE(IJS.PO.JOB.QTY,1,FNDP,0)
      IJS.PO.JOB.AMT=DELETE(IJS.PO.JOB.AMT,1,FNDP,0)
    END
    IF IJS.JOB.ALOC+0=0 AND IJS.JOB.QTY+0=0 AND IJS.JOB.USED+0=0 AND IJS.PO="" AND IJS.REQ.QTY+0=0 THEN
      DELETE INV.JOB.STATS, IWH.ID:"!":PJOBNO
      LOCATE PJOBNO IN ISTAT.JOB<1>,1 SETTING ISJ THEN
        ISTAT.JOB=DELETE(ISTAT.JOB,1,ISJ,0)
      END
    END ELSE
      MATWRITE INV.JS.REC ON INV.JOB.STATS , IWH.ID:"!":PJOBNO
    END
  NEXT JLOC
  IF JJC THEN
    JJC=0
    FOR JJ=JCNT TO 1 STEP -1
      JJC += 1
      WRK.PO.JOB.NO<1,1,JJC>=PO.JOB.NO<1,PO.LN,JJ>
      WRK.PO.JB.ONORD<1,1,JJC>=PO.JB.ONORD<1,PO.LN,JJ>
      WRK.PO.JB.RECEVED<1,1,JJC>=PO.JB.RECEVED<1,PO.LN,JJ>
      WRK.PO.JB.OPEN<1,1,JJC>=PO.JB.OPEN<1,PO.LN,JJ>
    NEXT JJ
    PO.JOB.NO<1,PO.LN>=WRK.PO.JOB.NO
    PO.JB.ONORD<1,PO.LN>=WRK.PO.JB.ONORD
    PO.JB.RECEVED<1,PO.LN>=WRK.PO.JB.RECEVED
    PO.JB.OPEN<1,PO.LN>=WRK.PO.JB.OPEN
  END
  DIFFX=0
END ;*T28289
RETURN
*
******************                                        
SET.RESERVES: 
******************                                        
*                                                         
*T27692 v
*RCNT=DCOUNT(IJS.RECP.NO<1>,VM)                         
IRCNT=DCOUNT(IJS.RECP.NO<1>,VM)                         
*FOR RR=1 TO RCNT                                       
*T27755 v
BEGIN CASE
  CASE SUM(IJS.FI.QTY) >= SUM(HOLD.IJS.FI.QTY)
    FOR RR=1 TO IRCNT                                       
      RECP.NO=IJS.RECP.NO<1,RR>                           
      IRW.ID=CONO:RECP.NO:"!":WHSE.NUM
      MATREADU IRW.REC FROM INV_RECP_WHSE_TEMP,IRW.ID ELSE
        MATREADU IRW.REC FROM INV_RECP_WHSE,IRW.ID ELSE  
          MAT IRW.REC=''                                
        END                                              
      END                                                 
      LOCATE RECP.NO IN IWH.RECP.NO<1> SETTING RPOS THEN  
        IRW.RSVB.QTY=IWH.RSV.FI<1,RPOS>                  
        LOCATE PJOBNO IN IRW.JOB<1> SETTING JPOS THEN   
          DIFF=IJS.FI.QTY<1,RR>-IRW.JRSVD.QTY<1,JPOS>   
          IRW.JRSVD.QTY<1,JPOS>=IJS.FI.QTY<1,RR>        
        END ELSE                                         
          IRW.JOB<1,JPOS>=PJOBNO                       
          IRW.JRSVD.QTY<1,JPOS>+=IJS.FI.QTY<1,RR>       
          DIFF=IJS.FI.QTY<1,RR>                      
        END                                           
        MATWRITEU IRW.REC ON INV_RECP_WHSE_TEMP,IRW.ID
        LOCATE IRW.ID IN IID.IRW SETTING JUNK ELSE    
          IID.IRW<1,-1>=IRW.ID                       
        END                                           
      END                                              
    NEXT RR                                             
  CASE 1
    ORCNT=DCOUNT(HOLD.IJS.RECP.NO,VM)
    WORK.IJS.FI.QTY =''
    FOR RR = 1 TO IRCNT
      LOCATE IJS.RECP.NO<1,RR> IN HOLD.IJS.RECP.NO<1>,1 SETTING RRFND THEN
        WORK.IJS.FI.QTY<1,RRFND> = IJS.FI.QTY<1,RR>
      END
    NEXT RR
    FOR RR = 1 TO ORCNT
      RECP.NO=HOLD.IJS.RECP.NO<1,RR>                           
      IRW.ID=CONO:RECP.NO:"!":WHSE.NUM
      MATREADU IRW.REC FROM INV_RECP_WHSE_TEMP,IRW.ID ELSE
        MATREADU IRW.REC FROM INV_RECP_WHSE,IRW.ID ELSE  
          MAT IRW.REC=''                                
        END                                              
      END                                                 
      LOCATE RECP.NO IN IWH.RECP.NO<1> SETTING RPOS THEN  
        IRW.RSVB.QTY=IWH.RSV.FI<1,RPOS>                  
        LOCATE PJOBNO IN IRW.JOB<1> SETTING JPOS THEN   
          DIFF=WORK.IJS.FI.QTY<1,RR>-IRW.JRSVD.QTY<1,JPOS>   
          IRW.JRSVD.QTY<1,JPOS>+=DIFF        
        END ELSE                                         
          IRW.JOB<1,JPOS>=PJOBNO                       
          IRW.JRSVD.QTY<1,JPOS>+=WORK.IJS.FI.QTY<1,RR>       
        END                                           
        MATWRITEU IRW.REC ON INV_RECP_WHSE_TEMP,IRW.ID
        LOCATE IRW.ID IN IID.IRW SETTING JUNK ELSE    
          IID.IRW<1,-1>=IRW.ID                       
        END                                           
      END                                              
    NEXT RR                                             
END CASE
*T27755 ^
RETURN
*
**************
FIFO_RESV_SUB:
	CUR.PRICE=0
	STD.PRICE=0
	ERRMSG=''
	BEGIN CASE
	  CASE RESV.QTY>0 AND CATG.TRACK.QOH#'Y'
	    BEGIN CASE
	      CASE CATG.COST.TYPE='SD'
		CHECK.COST=IWH.STD.COST
	      CASE CATG.COST.TYPE='AV'
		CHECK.COST=IWH.AVG.COST
	      CASE CATG.COST.TYPE='LT'
		CHECK.COST=IWH.LIST.COST
	      CASE 1
		CHECK.COST=0
	    END CASE
	    CHECK.QTY=RESV.QTY
	    FLOC=DCOUNT(IJS.RECP.NO,VM)
	    BEGIN CASE
	      CASE FLOC < 1
		FLOC=1
		IJS.RECP.NO<1,FLOC>=0
		IJS.FI.ORG<1,FLOC>=CHECK.QTY
		IJS.FI.QTY<1,FLOC>=CHECK.QTY
		IJS.FI.AMT<1,FLOC>=CHECK.COST
	      CASE IJS.RECP.NO<1,FLOC>=0 AND IJS.FI.AMT<1,FLOC>=CHECK.COST
		IJS.FI.ORG<1,FLOC>+=CHECK.QTY
		IJS.FI.QTY<1,FLOC>+=CHECK.QTY
	      CASE 1
		FLOC=FLOC+ 1
		IJS.RECP.NO<1,FLOC>=0
		IJS.FI.ORG<1,FLOC>=CHECK.QTY
		IJS.FI.QTY<1,FLOC>=CHECK.QTY
		IJS.FI.AMT<1,FLOC>=CHECK.COST
	    END CASE
	    IJS.JOB.QTY+=CHECK.QTY
	    STD.PRICE+=INT((CHECK.COST/10000)*((CHECK.QTY/10)/(INV.COST.WT/100)))
	    CUR.PRICE=0
	    RESV.QTY=0
	  CASE RESV.QTY>0
	    IF CATG.TRK.LVL='S' THEN
	      USAGE=RESV.ARR<4> ;* if 1 then it is a usage
	      BEGIN CASE
		CASE CATG.RSV.SERIAL='Y' AND CATG.COST.TYPE='AC'
		  ;*RESV.ARR is set in SERIAL.RESERVE.SEL program
		  ;*and contains list of receipts,serials
		  ;*and qty to be reserved.
		  ;*if it is not passed in then current
		  ;*receipt that is being processed will be
		  ;*reserved and serials that belong to that receipt 
		  ;*in fifo order.
		  GOSUB 10701
		CASE CATG.RSV.SERIAL='N' AND CATG.COST.TYPE='AC'
		  IF RESV.ARR<1>#'' THEN
		    GOSUB 10701
		  END ELSE
		    ;* do not reserve any serials/receipts
		    ;* since for this scenario reserve is kept
		    ;* at the warehouse level
	*T28320 v
	*           IF (RESV.QTY-IWH.ON.HAND)<=0 THEN
		    IF (RESV.QTY-(IWH.ON.HAND - IWH.RESV))<=0 THEN
		      IWH.RESV+=RESV.QTY
		      IJS.JOB.QTY+=RESV.QTY
		      RESV.QTY=0
		    END
		  END
	*T28320 v This ability has been removed.
	*       CASE CATG.RSV.SERIAL='Y' AND CATG.COST.TYPE#'AC'
	*         IF RESV.ARR<1>#'' THEN
	*           GOSUB 10701
	*         END ELSE
	*           GOSUB 10601
	*         END
		CASE 1
		  GOSUB 10601
	      END CASE
	    END ELSE
	      GOSUB 10601
	    END
	    IF RESV.QTY <> 0 THEN
	*T27341 v
	       RQTY = CALC_STK_QTY(RESV.QTY,MAT INV.CNV.REC,'.5','')
	*      ERRMSG='RSV QTY IS MORE THAN AVAIL, QTY.LEFT=':OCONV(INT(RESV.QTY/10),"MD2")
	       ERRMSG='RSV QTY IS MORE THAN AVAIL, QTY LEFT=':OCONV(RQTY,ICR.CNV)
	*T27341 ^
	    END
	  CASE RESV.QTY < 0
	    RESV.QTY=0-RESV.QTY
	    IF CATG.TRK.LVL='S' AND CATG.COST.TYPE='AC' AND CATG.RSV.SERIAL='N' THEN
	      IWH.RESV-=RESV.QTY
	      IJS.JOB.QTY-=RESV.QTY
	      RESV.QTY=0
	    END
	    QCNT=DCOUNT(IJS.RECP.NO,VM)
	    FOR Q=QCNT TO 1 STEP -1 WHILE RESV.QTY <> 0
	      IF CATG.TRK.LVL='S' THEN
		IF RESV.ARR<1>#'' THEN
		  LOCATE IJS.RECP.NO<1,Q> IN RESV.ARR<1> SETTING RRIDX THEN
		    CHECK.QTY=IJS.FI.QTY<1,Q>-SUM(RESV.ARR<3,RRIDX>)
		    IF CHECK.QTY=0 THEN CONTINUE
		  END ELSE
		    CONTINUE
		  END
		END
	      END
	      RSV.RECP=IJS.RECP.NO<1,Q>
	      LOCATE RSV.RECP IN IWH.RECP.NO<1> SETTING FNO ELSE NULL
	      CHECK.QTY=IJS.FI.QTY<1,Q>
	      BEGIN CASE
		CASE CHECK.QTY > RESV.QTY
		  CHECK.QTY=RESV.QTY
		  STD.PRICE-=INT((IJS.FI.AMT<1,Q>/10000)*((CHECK.QTY/10)/(INV.COST.WT/100)))
		  IJS.FI.ORG<1,Q>-=CHECK.QTY
		  IJS.FI.QTY<1,Q>-=CHECK.QTY
		CASE IJS.FI.ORG<1,Q> <> CHECK.QTY
		  STD.PRICE-=INT((IJS.FI.AMT<1,Q>/10000)*((CHECK.QTY/10)/(INV.COST.WT/100)))
		  IJS.FI.ORG<1,Q>-=CHECK.QTY
		  IJS.FI.QTY<1,Q>=0
		CASE IJS.JMT.SEQ<1,Q>=''
	*T27755 v STD.PRICE-=INT((IJS.FI.AMT<1,Q>/100)*((CHECK.QTY/10)/(INV.COST.WT/100)))
		  STD.PRICE-=INT((IJS.FI.AMT<1,Q>/10000)*((CHECK.QTY/10)/(INV.COST.WT/100)))
		  IJS.RECP.NO=DELETE(IJS.RECP.NO,1,Q,0)
		  IJS.FI.ORG=DELETE(IJS.FI.ORG,1,Q,0)
		  IJS.FI.QTY=DELETE(IJS.FI.QTY,1,Q,0)
		  IJS.FI.AMT=DELETE(IJS.FI.AMT,1,Q,0)
		  IJS.JMT.SEQ=DELETE(IJS.JMT.SEQ,1,Q,0)
		  IJS.JMT.QTY=DELETE(IJS.JMT.QTY,1,Q,0)
		CASE 1
		  STD.PRICE-=INT((IJS.FI.AMT<1,Q>/10000)*((CHECK.QTY/10)/(INV.COST.WT/100)))
		  IJS.FI.ORG<1,Q>-=CHECK.QTY
		  IJS.FI.QTY<1,Q>=0
	      END CASE
	      IJS.JOB.QTY-=CHECK.QTY
	      IF RSV.RECP > 0 THEN
		IWH.RSV.FI<1,FNO>+=CHECK.QTY
		IWH.RESV-=CHECK.QTY
		CUR.PRICE -=INT((IWH.COST.FI<1,FNO>/10000)*((CHECK.QTY/10)/(INV.COST.WT/100)))
	      END
	      RESV.QTY-=CHECK.QTY
	    NEXT Q
	    IF RESV.QTY <> 0 THEN
	*T27341 v
	       RQTY = CALC_STK_QTY(RESV.QTY,MAT INV.CNV.REC,'.5','')
	*      ERRMSG='ADJUST QTY IS MORE THAN AVAIL, QTY.LEFT=':OCONV(INT(RESV.QTY/10),"MD2")
	       ERRMSG='ADJUST QTY IS MORE THAN AVAIL, QTY LEFT=':OCONV(RQTY,ICR.CNV)
	*T27341 ^
	    END
	END CASE
RETURN
**************************************************************************
*
**************
10001: 
**************
*
UPD.FLAG=0
PTR=1
LOOP
  LOCATE RECP.NO IN IJS.RECP.NO<1>,PTR BY 'AR' SETTING FLOC THEN
    IF IJS.FI.AMT<1,FLOC>=CHECK.COST THEN
      IJS.FI.ORG<1,FLOC>+=CHECK.QTY
      IJS.FI.QTY<1,FLOC>+=CHECK.QTY
      UPD.FLAG=1
    END ELSE
      PTR=FLOC+ 1
    END
  END ELSE
    IJS.RECP.NO=INSERT(IJS.RECP.NO,1,FLOC,0,RECP.NO)
    IJS.FI.ORG=INSERT(IJS.FI.ORG,1,FLOC,0,CHECK.QTY)
    IJS.FI.QTY=INSERT(IJS.FI.QTY,1,FLOC,0,CHECK.QTY)
    IJS.FI.AMT=INSERT(IJS.FI.AMT,1,FLOC,0,CHECK.COST)
    IJS.JMT.SEQ=INSERT(IJS.JMT.SEQ,1,FLOC,0,'')
    IJS.JMT.QTY=INSERT(IJS.JMT.QTY,1,FLOC,0,'')
    UPD.FLAG=1
  END
UNTIL UPD.FLAG REPEAT
IJS.JOB.QTY+=CHECK.QTY
IWH.RESV+=CHECK.QTY
IWH.RSV.FI<1,FNO>-=CHECK.QTY
STD.PRICE+=INT((CHECK.COST/10000)*((CHECK.QTY/10)/(INV.COST.WT/100)))
CUR.PRICE+=INT((IWH.COST.FI<1,FNO>/10000)*((CHECK.QTY/10)/(INV.COST.WT/100)))
RESV.QTY-=CHECK.QTY
RETURN
*
**************
10501: 
**************
*
;* if Reserving then RESV.ARR contains all of the
;* serials reserved or to be reserved for a job.
;* if Using then RESV.ARR contains only receipt/serial
;* for that usage transaction. 
UPD.FLAG=0
PTR=1
CHECK.QTY=0
LOOP
  LOCATE RECP.NO IN IJS.RECP.NO<1>,PTR BY 'AR' SETTING FLOC THEN
    IF IJS.FI.AMT<1,FLOC>=CHECK.COST THEN
      IF (USAGE) THEN 
        DIFF=TOT.CHECK.QTY
      END ELSE
        DIFF=TOT.CHECK.QTY-IJS.FI.ORG<1,FLOC>
      END
      IJS.FI.ORG<1,FLOC>+=DIFF
      IF (USAGE) THEN
        DIFF=TOT.CHECK.QTY
      END ELSE
        DIFF=TOT.CHECK.QTY-IJS.FI.QTY<1,FLOC>
      END
      IJS.FI.QTY<1,FLOC>+=DIFF
      CHECK.QTY=DIFF
      UPD.FLAG=1
    END ELSE
      PTR=FLOC+ 1
    END
  END ELSE
    IF TOT.CHECK.QTY>0 THEN
      IJS.RECP.NO=INSERT(IJS.RECP.NO,1,FLOC,0,RECP.NO)
      IJS.FI.ORG=INSERT(IJS.FI.ORG,1,FLOC,0,TOT.CHECK.QTY)
      IJS.FI.QTY=INSERT(IJS.FI.QTY,1,FLOC,0,TOT.CHECK.QTY)
      IJS.FI.AMT=INSERT(IJS.FI.AMT,1,FLOC,0,CHECK.COST)
      IJS.JMT.SEQ=INSERT(IJS.JMT.SEQ,1,FLOC,0,'')
      IJS.JMT.QTY=INSERT(IJS.JMT.QTY,1,FLOC,0,'')
      CHECK.QTY=TOT.CHECK.QTY
      UPD.FLAG=1
    END ELSE
      UPD.FLAG=1
    END
  END
UNTIL UPD.FLAG REPEAT
IJS.JOB.QTY+=CHECK.QTY
IWH.RESV+=CHECK.QTY
IWH.RSV.FI<1,FNO>-=CHECK.QTY
STD.PRICE+=INT((CHECK.COST/10000)*((CHECK.QTY/10)/(INV.COST.WT/100)))
CUR.PRICE+=INT((IWH.COST.FI<1,FNO>/10000)*((CHECK.QTY/10)/(INV.COST.WT/100)))
RESV.QTY-=CHECK.QTY
RETURN
*
*******
10601: 
*******
*
QCNT=DCOUNT(IWH.RSV.FI,VM)
FOR FNO=1 TO QCNT WHILE RESV.QTY <> 0
  IF IWH.RSV.FI<1,FNO>+ 0 <> 0 THEN
    RECP.NO=IWH.RECP.NO<1,FNO>
    BEGIN CASE
      CASE CATG.COST.TYPE='FI'
        CHECK.COST=IWH.COST.FI<1,FNO>
      CASE CATG.COST.TYPE='LC'
        CHECK.COST=IWH.COST.FI<1,QCNT>
      CASE CATG.COST.TYPE='SD'
        CHECK.COST=IWH.STD.COST
      CASE CATG.COST.TYPE='AV'
        CHECK.COST=IWH.AVG.COST
      CASE CATG.COST.TYPE='LT'
        CHECK.COST=IWH.LIST.COST
      CASE 1
        CHECK.COST=0
    END CASE
    IF RESV.QTY > IWH.RSV.FI<1,FNO> THEN
      CHECK.QTY=IWH.RSV.FI<1,FNO>
    END ELSE
      CHECK.QTY=RESV.QTY
    END
    GOSUB 10001
  END
NEXT FNO
RETURN
*
*********
10701: 
*********
*
;* RESV.ARR<1,R>=receipt numbers
;* RESV.ARR<2,R,S>=serial numbers per receipt
;* RESV.ARR<3,R,S>=quantity per serial 
;* RESV.ARR<4>=1  if usage then USAGE otherwise ''
QCNT=DCOUNT(RESV.ARR<1>,VM)
FOR QQ=1 TO QCNT
  RECP.NO=RESV.ARR<1,QQ>
  LOCATE RECP.NO IN IWH.RECP.NO<1> SETTING FNO THEN
    CHECK.COST=IWH.COST.FI<1,FNO>
  END ELSE
    CHECK.COST=0
  END
  TOT.CHECK.QTY=SUM(RESV.ARR<3,QQ>)
  IF (USAGE) THEN
    IF IWH.RSV.FI<1,FNO> >= TOT.CHECK.QTY THEN
      GOSUB 10501
    END ELSE
      EXIT
    END
  END ELSE
    GOSUB 10501
  END
NEXT QQ
RETURN
*
*

**************
*FOR CLEARING ANY LOCKS
***
*RELEASE 
***
*
93000 
IF ERRMSG # "" THEN ERR_NUM = 1

  STATUS = RBO.setProperty('','ServerStatus',ERR_NUM)        
  STATUS = RBO.setProperty('','ServerMessage',ERRMSG) 

99999 
RETURN
