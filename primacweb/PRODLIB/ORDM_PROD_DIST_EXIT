SUBROUTINE ORDM_PROD_DIST_EXIT
********************************************************************************
*   Program name :- ORDM_PROD_DIST_EXIT
*   Created:- 2/16/2006
*   Programmer :- Suhail Hussain S
********************************************************************************
$INCLUDE WWINSERT RBO.H

$INCLUDE CPYLIB COMMON1
$INCLUDE JCS.CPYLIB COM.JCS.LINK  
$INCLUDE ICS.CPYLIB COM.INV.MAIN  
$INCLUDE ICS.CPYLIB COM.INV.SERIAL
$INCLUDE JCS.CPYLIB COM.INV.STATS 
$INCLUDE PMC.CPYLIB COM.CUST 
$INCLUDE OPS.CPYLIB COM.ORDER
$INCLUDE OPS.CPYLIB COM.OPS.LINK

$DEFINE INVENTORY
$DEFINE ORDER
$DEFINE ORDERDETAILINQ
$DEFINE CUSTOMER
$DEFINE INVWHSE

$INCLUDE OPS.CPYLIB ORDER
$INCLUDE OPS.CPYLIB ORDER.DETAIL
$INCLUDE OPS.CPYLIB ORDER.DETAIL.INQ
$INCLUDE OPS.CPYLIB ORDER.RELEASE
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE PMC.CPYLIB CUSTOMER
$INCLUDE PMC.CPYLIB SHIP.TO
$INCLUDE CPYLIB CHAR

OPEN "","ORDER" TO ORDER ELSE ERRMSG = "CANNOT OPEN ORDER FILE";GOTO 91000
OPEN "","ORDER.DETAIL" TO ORDER.DETAIL ELSE ERRMSG = "CANNOT OPEN ORDER.DETAIL FILE";GOTO 91000
OPEN "","ORDER.RELEASE" TO ORDER.RELEASE ELSE ERRMSG = "CANNOT OPEN ORDER.RELEASE FILE";GOTO 91000
OPEN "","INVENTORY" TO INVENTORY ELSE ERRMSG = "CANNOT OPEN INVENTORY FILE";GOTO 91000
OPEN "","SHIP.TO" TO SHIP.TO ELSE ERRMSG = "CANNOT OPEN SHIP.TO FILE";GOTO 91000
OPEN "","INV.WHSE" TO INV.WHSE ELSE ERRMSG = "CANNOT OPEN INV.WHSE FILE";GOTO 91000
OPEN "","CUSTOMER" TO CUSTOMER ELSE ERRMSG = "CANNOT OPEN CUSTOMER FILE";GOTO 91000
OPEN "","CONTROL" TO CONTROL ELSE STOP

STATUS = RBO.getProperty("","PMCProperty",PMCProperty)
STATUS = RBO.getProperty("","INARR",INARR)
STATUS = RBO.getProperty("","GRIDARR",PD_ARRAY)
STATUS = RBO.getProperty("","DISPARR",OSDARRAY)
STATUS = RBO.getProperty("","RETARR",OSD_FULL_ARR)

CONO      = PMCProperty<1,4>
LINES     = INARR<1,1>
ORG.QTY   = INARR<1,2>
OSD_INDX  = INARR<1,3>
ORDNO     = INARR<1,4>
SHIPTO    = INARR<1,5>
OSDPO     = INARR<1,6>
OSDSHPTERMS= INARR<1,7>
ORD.SHIP.TO = INARR<1,8>
DIST_MODE = INARR<1,9>
RELNO     = INARR<1,10>
ORR_QTY   = INARR<1,11>

DELIM     = "ð"
PPTR      = 1
SHPNO = SHIPTO
GEN.SHPNO = "000"
OLD.SHPNO = SHPNO
DISPARR = ""
DST.SUBS = ""; DST.WHSE = ""
DST.QTY = ""; ORG.QTY = ""; ORD.QTY = ""
MAT ORD.DET.SUM = ""
MAT ORD.DET.INQ = ""

   SWAP DELIM WITH VM IN ORG.QTY
   SWAP "#" WITH VM IN ORR_QTY

   IF CONO = "" THEN ERRMSG = "SESSION EXPIRED";GOTO 91000
*** NULLIFY THE PROPERTIES
   STATUS = RBO.setProperty("","WARNINGARR","")
   STATUS = RBO.setProperty("","RETARR","")
   STATUS = RBO.setProperty("","DISPARR","")
   STATUS = RBO.setProperty("","GRIDARR","")
   STATUS = RBO.setProperty("","REMOTE_ARR1","")

*** vvvv PROCESS AND GET THE ORD.DET.SUM AND ORD.DET.REC ARRAYS

   SWAP "#" WITH VM IN ORD.SHIP.TO
   LOCATE SHPNO IN ORD.SHIP.TO<1>,1 SETTING SPTR ELSE
      ERRMSG = "Cannot locate the current ship to # ":SHPNO;GOTO 91000
   END
   RNO = SPTR
   FOR X = 1 TO DCOUNT(ORD.SHIP.TO,VM)
      TEMPORD_REC = FIELD(OSD_FULL_ARR,"¥",X,1)
      IF X = RNO THEN TEMPORD_REC = OSDARRAY
      MATPARSE ORD.DET.REC FROM TEMPORD_REC,"ð"
      FOR P = 1 TO ORD.DET.REC.SIZE
        ORD.DET.SUM(P,X) = ORD.DET.REC(P)
      NEXT P
   NEXT X
   
   MATPARSE ORD.DET.REC FROM OSDARRAY ,DELIM

   PDNO     = OSD.PROD<1,OSD_INDX>
   WHNO     = OSD.WHSE<1,OSD_INDX>
   UNPRC    = OSD.PRICE<1,OSD_INDX>
   PROD.SEQ = OSD.PROD.SEQ<1,OSD_INDX>
   PROD.KIT = OSD.KIT<1,OSD_INDX>

   LOCATE OLD.SHPNO IN ORD.SHIP.TO<1>,1 SETTING S ELSE GOTO 91000
   MCNT = DCOUNT(OSD.PROD,VM)
   PCNT = 0; BREF = ""; PROD.SUBS = ""
   FOR P = 1 TO MCNT
      MATREAD INV.REC FROM INVENTORY, CONO:OSD.PROD<1,P> THEN
         IF INV.SUBS # "" THEN
            PCNT = PCNT + 1
            BREF<PCNT> = P
            PROD.SUBS<PCNT> = INV.SUBS            
         END
      END
   NEXT P
   REFNO = ""; PDNOS = ""; WHNOS = ""
   FOR M = 1 TO PCNT
     P = BREF<M>
     LOCATE OSD.PROD<1,P> IN PDNOS<1>,1 SETTING PLOC ELSE
        PDNOS<1,PLOC> = OSD.PROD<1,P>
     END
     LOCATE OSD.WHSE<1,P> IN WHNOS<PLOC>,1 SETTING WLOC ELSE
        WHNOS<PLOC,WLOC> = OSD.WHSE<1,P>
     END
     REFNO<PLOC,WLOC> = P
   NEXT M
   LOCATE PDNO IN PDNOS<1>,1 SETTING PLOC ELSE 
      ERRMSG = "Cannot locate product (":PDNO:") for this order." 
      GOTO 91000
   END
   LOCATE WHNO IN WHNOS<PLOC>,1 SETTING WLOC ELSE 
      ERRMSG = "Warehouse (":WHNO:") is not valid for product (":PDNO:") on this order"
      GOTO 91000
   END
   PPTR = REFNO<PLOC,WLOC>
   LOCATE PPTR IN BREF,1 SETTING BPTR ELSE BPTR = 1
   DST.SUBS<PPTR> = ""; DST.WHSE<PPTR> = ""
   DST.QTY<PPTR> = ""; ORG.QTY<PPTR> = ""; ORD.QTY<PPTR> = ""
   FOR M = 1 TO MCNT
    LOCATE M IN BREF,1 SETTING X ELSE
      LIMIT = PCNT
      FOR P = 1 TO LIMIT
        LOCATE OSD.PROD<1,M> IN PROD.SUBS<P>,1 SETTING X THEN
          PTR = 1
          LOOP
            LOCATE OSD.PROD<1,M> IN DST.SUBS<PPTR>,PTR SETTING SLOC THEN
              IF OSD.WHSE<1,M> = DST.WHSE<PPTR,SLOC> THEN
                DST.QTY<PPTR,SLOC> = DST.QTY<PPTR,SLOC> + OSD.G.QTY<1,M>
                ORD.QTY<PPTR,SLOC> = ORD.QTY<PPTR,SLOC> + OSD.O.QTY<1,M>
                PTR = 0
              END
            END ELSE
              DST.SUBS<PPTR,SLOC> = OSD.PROD<1,M>
              DST.WHSE<PPTR,SLOC> = OSD.WHSE<1,M>
              DST.QTY<PPTR,SLOC> = OSD.G.QTY<1,M>
              ORD.QTY<PPTR,SLOC> = OSD.O.QTY<1,M>
              PTR = 0
            END
          WHILE PTR DO
            PTR = SLOC + 1
          REPEAT
          LIMIT = 0
        END
      NEXT P
    END
   NEXT M
   ALL.G.QTY = OSD.G.QTY<1,PPTR> + SUM(DST.QTY)
   ALL.O.QTY = OSD.O.QTY<1,PPTR> + SUM(ORD.QTY)
   ORG.QTY = DST.QTY
*** ^^^

   MAT INV.REC = ""
   GOSUB 7000
   GOSUB 5000
   GOTO 93000
RETURN

********** PROCESS INPUTS
7000*
  FOR LN = 1 TO DCOUNT(PD_ARRAY,VM)
     VALUE = PD_ARRAY<1,LN,1>
     MATREAD INV.REC FROM INVENTORY, CONO:VALUE ELSE MAT INV.REC = ""
     $INCLUDE ICSBP INV.UM.CNV
     DST.SUBS<PPTR,LN> = VALUE
     VALUE = PD_ARRAY<1,LN,2>
     MATREAD IWH.REC FROM INV.WHSE, CONO:DST.SUBS<PPTR,LN>:"!":VALUE ELSE MAT IWH.REC = ""
     DST.WHSE<PPTR,LN> = VALUE
     VALUE = PD_ARRAY<1,LN,4>
     BEGIN CASE
       CASE ORD.QTY<PPTR,LN> + 0 = 0
         PCT = 1 + CUST.ADDL.OPS<1,1> / 10000
       CASE DST.QTY<PPTR,LN> + 0 > 0
         PCT = ORD.QTY<PPTR,LN> / DST.QTY<PPTR,LN>
       CASE 1
         PCT = 1
     END CASE
     DST.QTY<PPTR,LN> = INT(VALUE / ICR.MT1 * ICR.DV1 * ICR.DV2 + .5)
     ORD.QTY<PPTR,LN> = INT(VALUE * PCT + .5)
     ORD.QTY<PPTR,LN> = INT(ORD.QTY<PPTR,LN> / ICR.MT1 * ICR.DV1 * ICR.DV2 + .5)
   NEXT LN
   LINES = DCOUNT(DST.SUBS<PPTR>,VM)
   MAT INV.REC = ""
RETURN
***********

5000*
  IF LINES < 1 THEN GOTO 5099
  PDNUM = PDNO; WHNUM = WHNO
  GOSUB 5100
  BP = P; TOT.DST.QTY = OSD.G.QTY<1,BP>
  TOT.ORD.QTY = OSD.O.QTY<1,BP>
  ALL.G.QTY = ALL.G.QTY - TOT.DST.QTY
  ALL.O.QTY = ALL.O.QTY - TOT.ORD.QTY
  IF TOT.DST.QTY < 1 THEN GOTO 5080
  LIMIT = LINES
  FOR LN = 1 TO LIMIT
    IF ORG.QTY<PPTR,LN> + 0 < DST.QTY<PPTR,LN> + 0 THEN
      PDNUM = DST.SUBS<PPTR,LN>; WHNUM = DST.WHSE<PPTR,LN>
      GOSUB 5100
      ADD.QTY = DST.QTY<PPTR,LN> - ORG.QTY<PPTR,LN>
      IF TOT.DST.QTY < ADD.QTY THEN
        OSD.G.QTY<1,P> = OSD.G.QTY<1,P> + TOT.DST.QTY
        DST.QTY<PPTR,LN> = DST.QTY<PPTR,LN> - TOT.DST.QTY
        OSD.O.QTY<1,P> = OSD.O.QTY<1,P> + TOT.ORD.QTY
        ORD.QTY<PPTR,LN> = ORD.QTY<PPTR,LN> - TOT.ORD.QTY
        TOT.DST.QTY = 0; TOT.ORD.QTY = 0; LIMIT = 0
      END ELSE
        IF OSD.G.QTY<1,BP> > 0 THEN
          PCT = OSD.O.QTY<1,BP> / OSD.G.QTY<1,BP>
        END ELSE
          PCT = 1
        END
        OSD.G.QTY<1,P> = OSD.G.QTY<1,P> + ADD.QTY
        DST.QTY<PPTR,LN> = DST.QTY<PPTR,LN> - ADD.QTY
        TOT.DST.QTY = TOT.DST.QTY - ADD.QTY
        ADD.QTY = INT(ADD.QTY * PCT + .5)
        OSD.O.QTY<1,P> = OSD.O.QTY<1,P> + ADD.QTY
        ORD.QTY<PPTR,LN> = ORD.QTY<PPTR,LN> - ADD.QTY
        TOT.ORD.QTY = TOT.ORD.QTY - ADD.QTY
      END
    END
  NEXT LN
  OSD.G.QTY<1,BP> = TOT.DST.QTY
  OSD.O.QTY<1,BP> = TOT.ORD.QTY
  ALL.G.QTY = ALL.G.QTY + TOT.DST.QTY
  ALL.O.QTY = ALL.O.QTY + TOT.ORD.QTY
5080*
  FOR P = 1 TO ORD.DET.REC.SIZE
    ORD.DET.SUM(P,S) = ORD.DET.REC(P)
  NEXT P
  STATUS = "L"
  SHPNO = SHIPTO
  CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)
  SHPNO = GEN.SHPNO
  STATUS = "D"
  CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)
  FOR P = 1 TO ORD.DET.REC.SIZE
    ORD.DET.REC(P) = ORD.DET.SUM(P,SPTR)
  NEXT P
  PDNUM = PDNO; WHNUM = WHNO
  GOSUB 5100; BP = P
  FOR LN = 1 TO LINES
    IF ORG.QTY<PPTR,LN> + 0 <> DST.QTY<PPTR,LN> + 0 THEN
      PDNUM = DST.SUBS<PPTR,LN>; WHNUM = DST.WHSE<PPTR,LN>
      GOSUB 5100
      OSD.G.QTY<1,P> = DST.QTY<PPTR,LN>
      OSD.O.QTY<1,P> = ORD.QTY<PPTR,LN>
    END
  NEXT LN
  OSD.G.QTY<1,BP> = ALL.G.QTY - SUM(DST.QTY<PPTR>)
  OSD.O.QTY<1,BP> = ALL.O.QTY - SUM(ORD.QTY<PPTR>)
  FOR P = 1 TO ORD.DET.REC.SIZE
    ORD.DET.SUM(P,SPTR) = ORD.DET.REC(P)
  NEXT P
  STATUS = "L"
  CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)
  STATUS = "D"
  CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)
  FOR P = 1 TO ORD.DET.REC.SIZE
     ORD.DET.REC(P) = ORD.DET.SUM(P,SPTR)
  NEXT P
5099*
  RETURN

5100*
  PTR = 1
  LOOP
    LOCATE PDNUM IN OSD.PROD<1>,PTR SETTING P THEN
      IF (WHNUM = OSD.WHSE<1,P>) AND (PROD.KIT = OSD.KIT<1,P>) AND (PROD.SEQ = OSD.PROD.SEQ<1,P>) THEN
        PTR = 0
      END
    END  ELSE
      OSD.PROD<1,P> = PDNUM
      OSD.WHSE<1,P> = WHNUM
      OSD.PROD.SEQ<1,P> = PROD.SEQ
      OSD.KIT<1,P>      = PROD.KIT
      OSD.G.QTY<1,P> = 0
      OSD.O.QTY<1,P> = 0
      OSD.R.QTY<1,P> = 0
      OSD.A.QTY<1,P> = 0
      OSD.F.QTY<1,P> = 0
      OSD.S.QTY<1,P> = 0
      OSD.I.QTY<1,P> = 0
      OSD.PRICE<1,P> = UNPRC
      OSD.COMMENT<1,P> = ""
      OSD.JOB<1,P> = ""
      OSD.JOB.QTY<1,P> = ""
      OSD.RECP.NO<1,P> = ""
      OSD.FI.QTY<1,P> = ""
      OSD.REL.NO<1,P> = ""
      OSD.REL.QTY<1,P> = ""
      OSD.P.QTY<1,P> = ""
      PTR = 0
    END
  WHILE PTR DO
    PTR = P + 1
  REPEAT
RETURN

BUILD_DISPLAY_GRID:
   DISPARR<1,1> = SHIPTO
   DISPARR<1,2> = OSDPO
   DISPARR<1,3> = OSDSHPTERMS

   PRODCNT = DCOUNT(OSD.PROD,@VM)
   FOR INDX = 1 TO PRODCNT
     MATREAD INV.REC FROM INVENTORY, CONO:OSD.PROD<1,INDX> ELSE
       MAT INV.REC = "";INV.FULL.DESC = "Unknown"
     END
    
     $INCLUDE ICSBP INV.UM.CNV
   
     IF OSD.KIT<1,INDX> = "K" THEN
       RESV.PRINT = OSD.KIT.R.QTY<1,INDX>
       ORDER.PRICE = OSD.KIT.PRICE<1,INDX>
       ORDER.PRINT = OSD.KIT.G.QTY<1,INDX>    
     END ELSE
       RESV.PRINT = OSD.R.QTY<1,INDX>
       ORDER.PRICE = OSD.PRICE<1,INDX>
       ORDER.PRINT = OSD.G.QTY<1,INDX>
     END
 
     TMP.ID=CONO:OSD.PROD<1,INDX>:"!":OSD.WHSE<1,INDX>
     
     DISPARR<1,4,INDX> = OSD.PROD<1,INDX>
     DISPARR<1,5,INDX> = OSD.WHSE<1,INDX>
     DISPARR<1,6,INDX> = INV.UNIT<1,3>
     DISPARR<1,7,INDX> = OCONV(INT(((ORDER.PRINT / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)
     DISPARR<1,8,INDX> = OCONV(INT(((RESV.PRINT / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)
     DISPARR<1,9,INDX> = OCONV(INT(((OSD.A.QTY<1,INDX> / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)
     IF ORDER.PRICE > 0 THEN
       DISPARR<1,10,INDX> = OCONV(ORDER.PRICE,"MD4")
     END ELSE
       DISPARR<1,10,INDX> = ""
     END
     GOSUB 7920
     DISPARR<1,15,INDX> = INV.FULL.DESC
     IF OSD.JOB<1,INDX,2> # "" THEN
       DISPARR<1,16,INDX> = "MULTI"
     END ELSE
       DISPARR<1,16,INDX> = OSD.JOB<1,INDX>
     END
   NEXT INDX
   
   MATBUILD RETARR FROM ORD.DET.REC USING "ð"
   STATUS = RBO.setProperty("","RETARR",RETARR)
   STATUS = RBO.setProperty("","DISPARR",DISPARR)
RETURN

7920* 
  IF OSD.COMMENT<1,INDX> = "" THEN
    STATUS = ""
  END ELSE
    STATUS = "*"
  END
  DISPARR<1,11,INDX> =  STATUS
  DISPARR<1,17,INDX> =  OSD.COMMENT<1,INDX>
  PTR = 1

  LOOP
    LOCATE OSD.PROD<1,INDX> IN ODQ.PROD<1>,PTR SETTING PPTR THEN
      BEGIN CASE
        CASE (OSD.WHSE<1,INDX> # ODQ.WHSE<1,PPTR>) OR (OSD.KIT<1,INDX> # ODQ.KIT<1,PPTR>) OR (OSD.PROD.SEQ<1,INDX> # ODQ.PROD.SEQ<1,PPTR>) 
        CASE ODQ.G.QTY<1,PPTR>+0 > 0;*T20234
          STATUS = "*"
          PTR = 0
        CASE 1
          STATUS = ""
          PTR = 0
      END CASE
    END ELSE
      STATUS = ""
      PTR = 0
    END
  WHILE PTR DO
    PTR = PPTR + 1
  REPEAT
  DISPARR<1,12,INDX> =  STATUS

  STATUS = ""
  IF OSD.REL.NO<1,INDX> # "" THEN
    STATUS = "*"
  END ELSE
    OCNT = DCOUNT(ORD.REL.NO,@VM)
    FOR O = 1 TO OCNT UNTIL STATUS # ""
      MATREAD ORR.REC FROM ORDER.RELEASE, CONO:ORD.REL.NO<1,O> THEN
        IF ORR.STATUS<1,1> # "COMPLETED" AND ORR.SHIP.TO = SHIPTO AND ORR.QTY<1,INDX>+0 > 0 THEN
          STATUS = "*"
        END
      END
    NEXT O
  END
  DISPARR<1,13,INDX> =  STATUS

  IF OSD.KIT<1,INDX> = "N" THEN
    BEGIN CASE
      CASE OSD.O.QTY<1,INDX> < 1
        STATUS = "O"
      CASE OSD.I.QTY<1,INDX> >= OSD.O.QTY<1,INDX>
        STATUS = "I"
      CASE OSD.S.QTY<1,INDX> >= OSD.O.QTY<1,INDX>
        STATUS = "S"
      CASE OSD.A.QTY<1,INDX> < 1
        STATUS = "O"
      CASE OSD.F.QTY<1,INDX> >= OSD.A.QTY<1,INDX>
        STATUS = "F"
      CASE 1
        STATUS = "M"
    END CASE
  END
  IF OSD.KIT<1,INDX> = "K" THEN
    BEGIN CASE
      CASE OSD.KIT.O.QTY<1,INDX> < 1
        STATUS = "O"
      CASE OSD.KIT.I.QTY<1,INDX> >= OSD.KIT.O.QTY<1,INDX>
        STATUS = "I"
      CASE OSD.KIT.S.QTY<1,INDX> >= OSD.KIT.O.QTY<1,INDX>
        STATUS = "S"
      CASE OSD.KIT.A.QTY<1,INDX> < 1
        STATUS = "O"
      CASE OSD.KIT.F.QTY<1,INDX> >= OSD.KIT.A.QTY<1,INDX>
        STATUS = "F"
      CASE 1
        STATUS = "M"
    END CASE
  END
  DISPARR<1,14,INDX> =  STATUS

   GRID_FLAG = "0"
   BEGIN CASE
      CASE OSD.KIT<1,INDX> = "M"
         GRID_FLAG = "M"
      CASE SUM(OSD.P.QTY<1,INDX>)
         GRID_FLAG = "5"
      CASE OSD.KIT<1,INDX> = "K"
         IF (SUM(OSD.FI.QTY<1,INDX>) + SUM(OSD.FI.QTY<1,INDX+1>)) > 0 THEN
            GRID_FLAG = "3"
         END
      CASE OSD.I.QTY<1,INDX> > 0
         GRID_FLAG = "1"
      CASE OSD.S.QTY<1,INDX> > 0
         GRID_FLAG = "2"
      CASE OSD.R.QTY<1,INDX> > 0 OR OSD.RECP.NO<1,INDX> # ""
         GRID_FLAG = "3"
      CASE OSD.KIT.R.QTY<1,INDX> > 0
         GRID_FLAG = "3"
      CASE OSD.A.QTY<1,INDX> > 0 OR OSD.JOB<1,INDX> # ""
         GRID_FLAG = "4"
   END CASE
  DISPARR<1,18,INDX> =  GRID_FLAG

RETURN

3200:
   COMPARR = ""
   FOR X = 1 TO DCOUNT(ORD.SHIP.TO,VM)
      REC_ARR = ""
      FOR Z = 1 TO ORD.DET.REC.SIZE
         ORD.DET.REC(Z) = ORD.DET.SUM(Z,X)
      NEXT P
      MATBUILD REC_ARR FROM ORD.DET.REC USING "ð"
      IF COMPARR = "" THEN
         COMPARR = REC_ARR
      END ELSE
         COMPARR := "¥" : REC_ARR
      END
   NEXT X
   FOR P = 1 TO ORD.DET.REC.SIZE
     ORD.DET.REC(P) = ORD.DET.SUM(P,RNO)
   NEXT P
   MATBUILD OSDRecArr FROM ORD.DET.REC USING "ð"
RETURN

93000*
   OSDARR = ""
   GOSUB 3200
   IF DIST_MODE = "ORDER" THEN
      GOSUB BUILD_DISPLAY_GRID
      STATUS = RBO.setProperty("","DISPARR",DISPARR)
   END ELSE
      IF DIST_MODE = "RELEASE" THEN
         GOSUB BUILD_REL_GRID
         STATUS = RBO.setProperty("","DISPARR",GRID_ARR)
      END
   END
   STATUS = RBO.setProperty("","GRIDARR",DIST_MODE)
   STATUS = RBO.setProperty("","WARNINGARR",COMPARR)
   STATUS = RBO.setProperty("","RETARR",OSDRecArr)
RETURN

BUILD_REL_GRID:
  GRID_ARR = ""
  LINES = DCOUNT(OSD.PROD,VM)
  OLD.START.LINE = 0; GOSUB 7900
RETURN

7900*
  START.LINE = 1
  LAST.LINE = LINES
  IF START.LINE = OLD.START.LINE THEN GOTO 7990
  FOR N = START.LINE TO LAST.LINE
    GOSUB 7910
  NEXT N
7990*
  RETURN
*---- Display a single line
7910*
  GOSUB 9000
  ORDER.AMT = OSD.G.QTY<1,N>
  SHIP.AMT  = OSD.S.QTY<1,N>
  RESV.AMT  = OSD.R.QTY<1,N>  
  GRID_ARR<1,N,1> = OSD.PROD<1,N>
  GRID_ARR<1,N,2> = OSD.WHSE<1,N>
  GRID_ARR<1,N,3> = INV.UNIT<1,3>
  GRID_ARR<1,N,4> = OCONV(INT(((ORDER.AMT / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)
  GRID_ARR<1,N,5> = OCONV(INT(((SHIP.AMT / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)
  GRID_ARR<1,N,6> = ORR_QTY<1,N>     ;*OCONV(INT(((ORR.QTY<1,N> / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)
  GRID_ARR<1,N,7> = OCONV(INT(((RESV.AMT / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)
  RQTY = 0; PTR = 1
  LOOP
    LOCATE RELNO IN OSD.REL.NO<1,N>,PTR SETTING FND THEN
      RQTY = RQTY + OSD.REL.QTY<1,N,FND>
    END ELSE
      PTR = 0
    END
  WHILE PTR DO
    PTR = FND + 1
  REPEAT
  GRID_ARR<1,N,8> = INV.FULL.DESC
  GRID_ARR<1,N,9> = OCONV(INT(((RQTY / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)

*** TO GET THE MAX & MIN VALS OF THE REL AND RESV QTY
  MAXV = ""
  MAXV = OSD.O.QTY<1,N> - OSD.S.QTY<1,N>
  IF MAXV < 0 THEN MAXV = 0
  GRID_ARR<1,N,10> = MAXV : "ð" : OSD.R.QTY<1,N>
RETURN
*
9000*
  MATREAD INV.REC FROM INVENTORY, CONO:OSD.PROD<1,N> ELSE
    MAT INV.REC = ""; INV.FULL.DESC = "Unknown"
  END  
$INCLUDE ICSBP INV.UM.CNV
RETURN


91000*
  STATUS = RBO.setProperty("","ServerStatus",1)
  STATUS = RBO.setProperty("","ServerMessage",ERRMSG)
RETURN

