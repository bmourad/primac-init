SUBROUTINE ICSRSRE_POSTWRITE
*********************************************************************
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - EPRIMAC
* PROGRAM     - ICSRSRE_POSTWRITE
* BY          - KHAJA ZIAUDDIN
* DATE        - 06/25/2003  (mm/dd/yyyy)
* DESCRIPTION   
* T27904 - Kauser -3rd March 2005 - Implemented the Rev12 Changes          
*ENDDOC
*************************************************************
$INCLUDE WWINSERT RBO.H
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV_SERIAL
$INCLUDE PMC.CPYLIB PO
$INCLUDE ICS.CPYLIB PO.MAN.XREF
$INCLUDE ICS.CPYLIB PO.RSKI.XREF 
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE ICS.CPYLIB DAILY_STOCK

DEFFUN CALC_STK_QTY(COST.QTY,MAT INV.CNV.REC,ROND,LN)
DEFFUN CALC_COST_QTY(STK.QTY,MAT INV.CNV.REC,ROND,LN)


OPEN "","CONTROL" TO CONTROL ELSE
   ERRMSG = "CANNOT OPEN CONTROL FILE";GOTO 93000
END

DIM HOLD.ISTK.REC(ISTK.REC.SIZE) ; MAT HOLD.ISTK.REC=""
DIM S.REC(25)
EQU S.SERIAL        TO S.REC(1);*
EQU S.PO.LINE.NO    TO S.REC(2)
EQU S.QTY           TO S.REC(3);*
EQU S.LOC           TO S.REC(4);*
EQU S.MILL.ID       TO S.REC(5);*
EQU S.QTY.ENTERED   TO S.REC(6)
EQU S.WHSE          TO S.REC(7);*
EQU S.PROD.NO       TO S.REC(9)
EQU S.INV.FULL.DESC TO S.REC(10);*
EQU S.INV.PAP.TYPE  TO S.REC(11)
EQU S.TOT.WEIGHT    TO S.REC(12)
EQU S.UNIT          TO S.REC(13) ; *UOM
EQU S.INV.UNIT      TO S.REC(14)
EQU S.INV.M.WT      TO S.REC(15)
EQU S.STK.QTY       TO S.REC(16)
EQU S.INV.PAP.WIDTH TO S.REC(17)
EQU S.POST.DATE     TO S.REC(19);*
EQU S.STATUS        TO S.REC(20)
EQU S.EDIT.DATE     TO S.REC(21)
EQU S.UN.PRICE      TO S.REC(24)
*
MAT S.REC = ''
OPEN '','PO' TO PO ELSE
   ERRMSG = 'PO FILE IS MISSING'
   GOTO 93000
END
OPEN '','DAILY_STOCK' TO DAILY_STOCK ELSE
   ERRMSG = 'DAILY_STOCK FILE IS MISSING'
   GOTO 93000
END
OPEN '','INV_SERIAL' TO INV_SERIAL ELSE
   ERRMSG = 'INV_SERIAL FILE IS MISSING'
   GOTO 93000
END
OPEN '','PO.RSKI.XREF' TO PO.RSKI.XREF ELSE
   ERRMSG = 'PO.RSKI.XREF FILE IS MISSING'
   GOTO 93000
END
OPEN '','PO.MAN.XREF' TO PO.MAN.XREF ELSE
   ERRMSG = 'PO.RSMAN.XREF FILE IS MISSING'
   GOTO 93000
END
NEW.MANIFEST = ''
MAT S.REC = ''
WARNMSG = ''
SERIAL = ''
Dt = ''
MAT DSR.REC = ''
REF.NO = ''
STATUS = RBO.getProperty('','PMCProperty',PMCPROPERTY)
STATUS = RBO.getDBVals('@ID',ID)
STATUS = RBO.getDBVals('DSR_SERIAL',SERIAL)
STATUS = RBO.getProperty('','Date',Dt)

STATUS = RBO.getDBVals('DSR_PO_LINE',DSR.PO.LINE)
STATUS = RBO.getDBVals('DSR_PROD',DSR.PROD)
STATUS = RBO.getDBVals('DSR_MILL_ID',DSR.MILL.ID)
STATUS = RBO.getDBVals('DSR_QTY',DSR.QTY)
STATUS = RBO.getDBVals('DSR_WHSE',DSR.WHSE)
STATUS = RBO.getDBVals('DSR_LOC',DSR.LOC)
STATUS = RBO.getDBVals('DSR_UN_PRICE',DSR.UN.PRICE)
STATUS = RBO.getDBVals('DSR_UOM',DSR.UOM)
STATUS = RBO.getProperty('','StkQty',StkQty)
****done after write
STATUS = RBO.getProperty('','Manifest',Manifest)
STATUS = RBO.getProperty('','ShipmentTot',ShipmentTot)
STATUS = RBO.getProperty('','Period',Period)
STATUS = RBO.getProperty('','ManualEntry',MANUAL.ENTRY)
STATUS=RBO.getProperty('','QtyEntered',QtyEntered)
*WRITE QtyEntered ON CONTROL, "QTYENT"
*****
CONO = PMCPROPERTY<1,4>
POS = INDEX(ID,"!",1)
PO.CODE = ID[1,POS-1]
PO.NO = PO.CODE[4,99]
MANIFEST = ID[POS+1,99]
POLINE = ''
PROD = ''
QTY = ''
UOM = ''
WHSE = ''
LOC = ''
MILLID = ''
MAN_NO=Manifest
MAN_TOT=ShipmentTot
MAN_PERIOD=Period
OLD.DSR.ID = '' ; * T27904
NEW.OPEN = ''
MATREAD RSXRF.REC FROM PO.RSKI.XREF, CONO:PO.NO ELSE MAT RSXRF.REC = ""

MATREAD PO.REC FROM PO,PO.CODE ELSE  MAT PO.REC = ""

K = 1
FOR X = 1 TO DCOUNT(SERIAL,@VM)
   FOR Y = 1 TO DCOUNT(SERIAL<1,X>,@SM)
       *IF SERIAL<1,X,Y> # ""  THEN
      POLINE<1,K> = DSR.PO.LINE<1,X>
      PROD<1,K> = DSR.PROD<1,X>
      UOM<1,K> = DSR.UOM<1,X>
      WHSE<1,K> = DSR.WHSE<1,X>

      REF.NO<1,K> = SERIAL<1,X,Y>   
      QTY<1,K> = DSR.QTY<1,X,Y>
      LOC<1,K> = DSR.LOC<1,X,Y>
      MILLID<1,K> = DSR.MILL.ID<1,X,Y>
      K = K + 1
       *END
   NEXT Y
NEXT X


*** FOR TESTING, TO BE REMOVED
*STATUS = RBO.setProperty('','ServerMessage',DSR.MILL.ID : ' : ':MILLID)
*GOTO 93000

S.SERIAL = REF.NO

*FOR SS = 1 TO DCOUNT(REF.NO,@VM)
*   MATREAD ISTK.REC FROM INV_SERIAL, CONO:REF.NO<1,SS> THEN
*   FOUND=1
*   **S.SERIAL<1,SS> = REF.NO<1,SS>
*   S.PO.LINE.NO<1,SS> = ISTK.PO.LINE      
*   S.PROD.NO<1,SS> = ISTK.PROD            
*   S.MILL.ID<1,SS> = ISTK.MILL.ID    
*   S.QTY<1,SS> = ISTK.ORG.QTY            
*   S.QTY.ENTERED<1,SS> = ISTK.QTY.ENTERED 
*   S.STK.QTY<1,SS> = ISTK.ORG.STK.QTY    
*   S.WHSE<1,SS> = ISTK.WHSE               
*   S.LOC<1,SS> = ISTK.LOC                 
*   S.POST.DATE<1,SS> = ISTK.POST.DATE     
*   S.EDIT.DATE<1,SS> = ISTK.EDIT.DATE     
*   S.UN.PRICE<1,SS> = ISTK.UNIT.COST
*   S.INV.FULL.DESC<1,SS> = INV.FULL.DESC
*   S.INV.PAP.TYPE<1,SS> = INV.PAP.TYPE
*   S.INV.M.WT<1,SS> = INV.M.WT
*   S.INV.PAP.WIDTH<1,SS> = INV.PAP.WIDTH
*   S.UNIT<1,SS> = ISTK.UOM
*   FOR I = 1 TO 4
*     S.INV.UNIT<1,SS,I> = INV.UNIT<1,I>
*   NEXT I
*   END ELSE
*   FOUND = 0
*   END
*NEXT SS


*IF FOUND = 0 THEN
*   MATREAD DSR.REC FROM DAILY_STOCK, ID ELSE MAT DSR.REC = ""
FOR SS = 1 TO DCOUNT(PROD,@VM)
   S.PO.LINE.NO<1,SS> = POLINE<1,SS>
   S.PROD.NO<1,SS> =  PROD<1,SS>          
   S.MILL.ID<1,SS> =  MILLID<1,SS>
     ** S.QTY.ENTERED<1,SS> =  QTY<1,SS>
   S.QTY.ENTERED<1,SS> =  QtyEntered<1,SS>
   S.WHSE<1,SS> = WHSE<1,SS>
   S.LOC<1,SS> = LOC<1,SS>
   S.UNIT<1,SS> = UOM<1,SS>
NEXT
*END 

PROB = 0
TOT = ""; SUM = ""
*LMR v At this point S.QTY contains nothing!
LINE.CNT = DCOUNT(REF.NO,@VM)
FOR LPTR = 1 TO LINE.CNT
   IF S.POST.DATE<1,LPTR> = "" THEN
      POLINE = S.PO.LINE.NO<1,LPTR>
      TOT<1,POLINE> = TOT<1,POLINE> + S.QTY<1,LPTR>
      IF S.WHSE<1,LPTR> = PO.WHSE<1,POLINE> THEN 
         SUM<1,POLINE> = SUM<1,POLINE> + S.QTY<1,LPTR>
      END
   END
NEXT LPTR

PLCNT = DCOUNT(PO.PROD.NUM,@VM)
FOR I = 1 TO PLCNT
   IF PO.QTY.OPEN<1,I> <> "" THEN
      NEW.OPEN<1,I> = PO.QTY.OPEN<1,I> - TOT<1,I>
   *   IF NEW.OPEN < 0 AND PO.QTY.OPEN<1,I> > 0 THEN
   *     IF INT(NEW.OPEN / PO.QTY.OPEN<1,I>) = 0 THEN
   *       NEW.OPEN = 0
   *     END
   *   END
*STATUS=RBO.setProperty('','TEMP',NEW.OPEN)
      *IF NEW.OPEN<1,I> < 0 THEN 
      IF (TOT<1,I> + PO.TOT.RECEVED<1,I>) > PO.TOT.ONORD<1,I> THEN 
        NEW.OPEN<1,I> = 0
         WARNMSG<1,-1> = "Warning! Received more than ordered for P/O line #":I
      END
   END
   NEW.ALLOC = SUM(PO.JB.OPEN<1,I>) - SUM<1,I>
   IF NEW.ALLOC < 0 THEN NEW.ALLOC = 0
   IF NEW.OPEN < NEW.ALLOC THEN
      ERRMSG = "Remaining allocation exceeds P/O open for P/O line #":I
      LINE.STATUS<1,I> = ERRMSG
      ERRMSG=""
   END 
NEXT I

REF.PTR = 1
NEW.SERIAL = 0

S.CNT = DCOUNT(S.SERIAL,@VM)
FOR SS=1 TO S.CNT
   ISTK.ID = CONO:S.SERIAL<1,SS>
   MATREAD ISTK.REC FROM INV_SERIAL,ISTK.ID THEN
      ISTK.MANIFEST.NO = MANIFEST
      ISTK.QTY.ENTERED = S.QTY.ENTERED<1,SS>
      ISTK.PLACE = 'M' 

   *T27904 v
      IF DSR.TYPE = "J" THEN
         NEW.SERIAL = 1
         LOCATE S.SERIAL<1,SS> IN RSXRF.RS.NO,1 SETTING VAR ELSE
            RSXRF.RS.NO = INSERT(RSXRF.RS.NO,1,-1,0,S.SERIAL<1,SS>)
            RSXRF.LN.NO = INSERT(RSXRF.LN.NO,1,-1,0,S.PO.LINE.NO<1,SS>)
            PO.NO.OF.ROLLS<1,S.PO.LINE.NO<1,SS>> += 1
         END
         IF ISTK.PO.LINE + 0 = 0 THEN ISTK.PO.LINE = 1
         IF ISTK.PROD # PO.PROD.NUM<1,ISTK.PO.LINE> THEN
            ISTK.PROD = PO.PROD.NUM<1,ISTK.PO.LINE>
            ISTK.WHSE = PO.WHSE<1,ISTK.PO.LINE>
            ISTK.UOM = PO.JB.UNITS<1,ISTK.PO.LINE>
         END
      END
*T27904 ^
      IF MANUAL.ENTRY=1 THEN
         ISTK.PO.LINE=S.PO.LINE.NO<1,SS>
         ISTK.PROD=S.PROD.NO<1,SS>
         ISTK.WHSE=S.WHSE<1,SS>
         ISTK.LOC=S.LOC<1,SS>
         ISTK.PRINT.DATE=''
         ISTK.UOM=S.UNIT<1,SS>
* LMR S.UN.PRICE has not been set. See also line 279
         ISTK.UNIT.COST=S.UN.PRICE<1,SS>
      END

      MATWRITE ISTK.REC ON INV_SERIAL,ISTK.ID

   END ELSE
      NEW.SERIAL = 1
      RSXRF.RS.NO = INSERT(RSXRF.RS.NO,1,-1,0,S.SERIAL<1,SS>)
      RSXRF.LN.NO = INSERT(RSXRF.LN.NO,1,-1,0,S.PO.LINE.NO<1,SS>)
      PO.NO.OF.ROLLS<1,S.PO.LINE.NO<1,SS>> += 1
      MAT ISTK.REC=""
      ISTK.PO.NO = PO.NO
      ISTK.PO.LINE=S.PO.LINE.NO<1,SS>
      ISTK.PROD=S.PROD.NO<1,SS>
      ISTK.WHSE=S.WHSE<1,SS>
      ISTK.LOC=S.LOC<1,SS>
      ISTK.PRINT.DATE=''
      ISTK.UOM=S.UNIT<1,SS>
      ISTK.UNIT.COST=S.UN.PRICE<1,SS>
      ISTK.MILL.ID = S.MILL.ID<1,SS>
      ISTK.MANIFEST.NO=MANIFEST
      ISTK.QTY.ENTERED=S.QTY.ENTERED<1,SS>
      ISTK.PLACE = 'M'      
      MATWRITE ISTK.REC ON INV_SERIAL,ISTK.ID
   END
NEXT SS

*T27904 v
IF OLD.DSR.ID # '' THEN DELETE DAILY_STOCK, OLD.DSR.ID
*T27904 ^
** get the deleted Serial Numbers and make the Manifest No. field empty for INV_SERIAL
STATUS = RBO.getProperty('','DelRefno',DELREFNO)
FOR X = 1 TO DCOUNT(DELREFNO,@VM)
   MATREAD ISTK.REC FROM INV_SERIAL, CONO:DELREFNO<1,X> THEN
      ISTK.MANIFEST.NO = ' ' 
      MATWRITE ISTK.REC ON INV_SERIAL, CONO:DELREFNO<1,X>
   END
NEXT
* end of deleted serial numbers

    *RSMAN.RS.NO = S.SERIAL
RSMAN.RS.NO = REF.NO
RSMAN.LINE.NO  = S.PO.LINE.NO
RSMAN.STATUS = ""
RSMAN.ENTRY.DATE = Dt
IF RSMAN.RS.NO = "" THEN
   DELETE PO.MAN.XREF, CONO:PO.NO:"!":MANIFEST
   DELETE DAILY_STOCK,CONO:PO.NO:"!":MANIFEST
   LOCATE MANIFEST IN PO.MAN<1>,1 SETTING PPTR THEN
      PO.MAN = DELETE(PO.MAN,1,PPTR,0)
      NEW.MANIFEST = 0
   END
END ELSE
   ****DONE CHANGES 
   RSMAN.REC(2)=MAN_TOT
   RSMAN.REC(3)=MAN_NO 
   RSMAN.REC(6)=MAN_PERIOD 
   MATWRITE RSMAN.REC ON PO.MAN.XREF, CONO:PO.NO:"!":MANIFEST
   ****STATUS = RBO.setProperty('','kkk',RSMAN.REC(4):"~":MAN_NO)
END
WARNMSG<1,-1> = NEW.SERIAL

IF NEW.SERIAL THEN
   RSXRF.MAN.NO = MANIFEST
   RSXRF.ENTRY.DATE = Dt
   RSXRF.STATUS = ""
   RSXRF.PRT.FLG = ""
   MATWRITE RSXRF.REC ON PO.RSKI.XREF, CONO: PO.NO
END
IF NEW.MANIFEST THEN
   PO.MAN = INSERT(PO.MAN,1,-1,0,MANIFEST)
END
PO.CHG.FLG = 1
 * IF NOT(MANUAL.ENTRY) THEN
IF MANUAL.ENTRY=0 THEN
*LMR   MATREADU PO.REC FROM PO,PO.CODE THEN ;*Already read above
   MATWRITE PO.REC ON PO, CONO:PO.NO
END ELSE 
   RELEASE PO, CONO:PO.NO
END
*END
  *  MATWRITE PO.REC ON PO, CONO:PO.NO

STATUS = RBO.setProperty('','WarnMsg',WARNMSG)
STATUS=RBO.setProperty('','temp','POSTWRITE')
RETURN


93000 
STATUS = RBO.setProperty('','ServerStatus',1)
STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
RETURN
