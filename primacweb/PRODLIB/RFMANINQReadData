SUBROUTINE RFMANINQReadData
********************************************************************************
*   Program name :- RFMANINQReadData
*   Created:- BY ZUBAIR ON 2/3/2004
*------------------------------------------------------------------------------*
*

* In Properties:
* --------------
*  
*
* Out Properties:
* ---------------
*  T28441		* Handle multi-same-prods on PO.
********************************************************************************
$INCLUDE WWINSERT RBO.H
$INCLUDE PMC.CPYLIB PO
$INCLUDE ICS.CPYLIB PO.RSKI.XREF
$INCLUDE PMC.CPYLIB VEND
$INCLUDE ICS.CPYLIB PO.MAN.XREF
$INCLUDE ICS.CPYLIB INV_SERIAL
$INCLUDE ICS.CPYLIB DAILY_STOCK
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE PMC.CPYLIB CUSTOMER
$INCLUDE JCS.CPYLIB JOB

* Insert method code here

OPEN '','PO' TO PO ELSE ERRMSG = 'CANNOT OPEN PO FILE'; GOTO 99999
OPEN '','PO.RSKI.XREF' TO PO.RSKI.XREF ELSE ERRMSG = 'CANNOT OPEN PO.RSKI.XREF'; GOTO 99999
OPEN "","VEND" TO VEND ELSE ERRMSG = "CANNOT OPEN VEND FILE"; GOTO 99999
OPEN "","PO.MAN.XREF" TO PO.MAN.XREF ELSE ERRMSG = "CANNOT OPEN PO.MAN.XREF"; GOTO 99999
OPEN "","INV_SERIAL" TO INV_SERIAL ELSE ERRMSG = "CANNOT OPEN INV_SERIAL FILE"; GOTO 99999
OPEN "","DAILY_STOCK" TO DAILY_STOCK ELSE ERRMSG = "CANNOT OPEN DAILY_STOCK FILE"; GOTO 99999
OPEN "","INVENTORY" TO INVENTORY ELSE ERRMSG = "CANNOT OPEN INVENTORY FILE"; GOTO 99999
OPEN "","CATEGORY" TO CATEGORY ELSE ERRMSG = "CANNOT OPEN CATEGORY FILE"; GOTO 99999
OPEN "","INV.WHSE" TO INV.WHSE ELSE ERRMSG = "CANNOT OPEN INV.WHSE FILE"; GOTO 99999
OPEN "","CUSTOMER" TO CUSTOMER ELSE ERRMSG = "CANNOT OPEN CUSTOMER FILE"; GOTO 99999
OPEN "","JOB" TO JOB ELSE ERRMSG = "CANNOT OPEN JOB FILE"; GOTO 99999

DIM HOLD.ISTK.REC(ISTK.REC.SIZE) ; MAT HOLD.ISTK.REC=""
MAT ISTK.REC = ""
ROLL.ARR=""
ServerMessage = ''

STATUS = RBO.getProperty('','PMCProperty',PMCProperty)
CONO = PMCProperty<1,4>
STATUS = RBO.getProperty('','PO_ID',PO_ID)
STATUS = RBO.getProperty('','MAN_ID',MAN_ID)

MATREADU PO.REC FROM PO, CONO:PO_ID LOCKED
  ERRMSG = "P/O is locked"; GOTO 99999
END ELSE
  ERRMSG = "Invalid P/O number. Try again! "; GOTO 99999
END

MATREADU RSXRF.REC FROM PO.RSKI.XREF, CONO:PO_ID LOCKED 
  RELEASE
  ERRMSG = 'P/O record is locked by user ' ; * :GETUSERNAME(STATUS())
  GOTO 99999
END ELSE
  RELEASE
  ERRMSG ="Invalid P/O for this function"
  GOTO 99999
END

MATREAD VEND.REC FROM VEND, CONO:PO.VEND.NO ELSE
  MAT VEND.REC = ""
  VEND.DESC = "???????????????"
END

*METHOD FOR CHECKING MAN NO 
*GOSUB ENT.MANIFEST.NBR

MAN_ID = UPCASE(TRIM(MAN_ID))
MATREADU RSMAN.REC FROM PO.MAN.XREF, CONO:PO_ID:"!":MAN_ID LOCKED
  ERRMSG = "P/O XREF IS locked"; GOTO 99999
END ELSE
 *Creating new manifest with roll/skids that are not assigned to a manifest yet.
  MAT RSMAN.REC = ""
  MANIFEST = MAN_ID
* ECD.RET.VALUE = MANIFEST
  RSMAN.RS.NO = RSXRF.RS.NO
  RSMAN.LINE.NO = RSXRF.LN.NO;*T28441
  RCNT = DCOUNT(RSXRF.RS.NO,@VM)

  MAT HOLD.ISTK.REC = MAT ISTK.REC
  FOR RPTR = 1 TO RCNT
    ROLLMAN = ''
    MATREAD ISTK.REC FROM INV_SERIAL,CONO:RSXRF.RS.NO<1,RPTR> THEN
*T28441     IF ISTK.MANIFEST.NO # '' THEN
      IF ISTK.MANIFEST.NO # '' AND ISTK.MANIFEST.NO # MAN_ID THEN

        LOCATE RSXRF.RS.NO<1,RPTR> IN RSMAN.RS.NO<1>,1 SETTING SPTR THEN
          RSMAN.RS.NO = DELETE(RSMAN.RS.NO,1,SPTR,0)
          DEL RSMAN.LINE.NO<1,SPTR>;*T28441
        END
      END
    END
  NEXT RPTR
  MAT ISTK.REC = MAT HOLD.ISTK.REC
  IF RSMAN.RS.NO = '' THEN
    ERRMSG = 'There are no unassigned Serials, Cannot add Manifest'
    GOTO 99999
  END
  NEW.MANIFEST = 1
  RSMAN.MAN.NO = MANIFEST
END
S.SERIAL = RSMAN.RS.NO
S.PO.LINE.NO=RSMAN.LINE.NO
*MANIFEST = ECD.RET.VALUE
*---

NEW.REC = 0

MATREAD DSR.REC FROM DAILY_STOCK, CONO:PO_ID:"!":MAN_ID ELSE
    MAT DSR.REC = ""
    DSR.PO = PO_ID
    DSR.SHPMNT.NO = MAN_ID
    DSR.DATE = RSMAN.ENTRY.DATE
    *DSR.EMP = @LOGNAME
    DSR.VEND = PO.VEND.NO
    NEW.REC = 1
* LOAD OLD DATA
    GOSUB LOAD.DAILY.STOCK
END
PROD.CNT = DCOUNT(DSR.PROD,@VM)

IF PROD.CNT = 0 THEN
  ERRMSG = "No Serial Stock on P/O. Try again! "
  GOTO 99999
END

PROD.PTR = 1
* = DSR.DATE
NUM.PROD = DCOUNT(DSR.PROD,@VM)
FOR P = 1 TO NUM.PROD
  NUM.SERIAL = DCOUNT(DSR.SERIAL<1,P>,@SVM)
  FOR S = 1 TO NUM.SERIAL
    MATREAD ISTK.REC FROM INV_SERIAL, CONO:DSR.SERIAL<1,P,S> ELSE
      MAT ISTK.REC = ""
    END
    LOCATE DSR.SERIAL<1,P,S> IN ROLL.ARR<1>,1 SETTING RPOS THEN
      ROLL.ARR<1,RPOS> = DSR.SERIAL<1,P,S>
      ROLL.ARR<2,RPOS> = ""
      ROLL.ARR<3,RPOS> = ""
      ROLL.ARR<4,RPOS> = ISTK.QTY.ENTERED
    END ELSE
      ROLL.ARR<1,-1> = DSR.SERIAL<1,P,S>
      ROLL.ARR<2,-1> = ""
      ROLL.ARR<3,-1> = ""
      ROLL.ARR<4,-1> = ISTK.QTY.ENTERED
    END
  NEXT S
NEXT P
ROLL.CNT = DCOUNT(DSR.SERIAL<1,PROD.PTR>,@SM)
GOSUB LOAD.HEADER.DATA
GOSUB LOAD.MLINE.DATA

* GETTING DATA
STATUS = RBO.setProperty('','VEND_DESC',SCR_VEND_DESC)
STATUS = RBO.setProperty('','JOB_NO',SCR_JOB_NO)
STATUS = RBO.setProperty('','CUST_NAME',SCR_CUST_NAME)
STATUS = RBO.setProperty('','PROD_ID',SCR_PROD_ID)
STATUS = RBO.setProperty('','PROD_DESC',SCR_PROD_DESC1)
STATUS = RBO.setProperty('','PROD_BS_WGT',SCR_PROD_DESC2)
STATUS = RBO.setProperty('','MAN_TOT_WGT',SCR_TOT_WGT)
STATUS = RBO.setProperty('','REC_QTY',SCR_59)
STATUS = RBO.setProperty('','PROD_REC_QTY',SCR_56)

STATUS = RBO.setProperty('','SCR_53',SCR_53)
STATUS = RBO.setProperty('','SCR_54',SCR_54)
STATUS = RBO.setProperty('','ENTRY_DATE',SCR_55)
STATUS = RBO.setProperty('','QTY_UOM',SCR_60)

*STATUS = RBO.setProperty('','SCR_11',SCR_11) ; LINE NO
STATUS = RBO.setProperty('','SERIAL_NO',SCR_12)
STATUS = RBO.setProperty('','MILL_ROLL_NO',SCR_13)
STATUS = RBO.setProperty('','ROLL_WGT',SCR_14)
STATUS = RBO.setProperty('','WHSE',SCR_15)
STATUS = RBO.setProperty('','LOC',SCR_16)
STATUS = RBO.setProperty('','PROD_STATUS',SCR_17)

*REF.NO = 1
*OLD.START = ""
*GOSUB DISP.MLINE.DATA
RETURN

*METHODS

****************
LOAD.DAILY.STOCK: 
****************
NUM.SERIAL = DCOUNT(S.SERIAL,@VM)

FOR N = 1 TO NUM.SERIAL
  MATREAD ISTK.REC FROM INV_SERIAL,CONO:S.SERIAL<1,N> ELSE            
    MAT ISTK.REC = ""                                                  
    ERRMSG = "Serial information record cannot be found":S.SERIAL<1,N>
    GOTO 99999
  END                                                                  
  INV.ID = CONO:ISTK.PROD
  IWH.ID = INV.ID:"!":ISTK.WHSE
  GOSUB CHECK.DATA
*T28441  LOCATE ISTK.PROD IN DSR.PROD<1>,1 SETTING PINDEX THEN
  LOCATE ISTK.PO.LINE IN DSR.PO.LINE<1>,1 SETTING PINDEX THEN
    LOCATE S.SERIAL<1,N> IN DSR.SERIAL<1,PINDEX>,1 SETTING SINDEX ELSE
      DSR.SERIAL<1,PINDEX,SINDEX> = S.SERIAL<1,N>
      DSR.LOC<1,PINDEX,SINDEX> = ISTK.LOC
      DSR.MILL.ID<1,PINDEX,SINDEX> = ISTK.MILL.ID
      DSR.POST.DATE<1,PINDEX,SINDEX> = ISTK.POST.DATE
    END
  END ELSE
    DSR.PROD<1,PINDEX> = ISTK.PROD
    DSR.WHSE<1,PINDEX> = ISTK.WHSE
* C 40208
    DSR.PO<1,PINDEX> = ISTK.PO.NO
    DSR.PO.LINE<1,PINDEX> = ISTK.PO.LINE
    DSR.UOM<1,PINDEX> = ISTK.UOM
    LOCATE S.SERIAL<1,N> IN DSR.SERIAL<1,PINDEX>,1 SETTING SINDEX ELSE
      DSR.SERIAL<1,PINDEX,SINDEX> = S.SERIAL<1,N>
      DSR.LOC<1,PINDEX,SINDEX> = ISTK.LOC
      DSR.MILL.ID<1,PINDEX,SINDEX> = ISTK.MILL.ID
      DSR.POST.DATE<1,PINDEX,SINDEX> = ISTK.POST.DATE
    END
  END
NEXT N

RETURN
*
************
CHECK.DATA:*
*********
INV.PRESENT = 1
IWH.PRESENT = 1
S.STATUS = ""
MAT INV.REC = ""
MATREAD INV.REC FROM INVENTORY,INV.ID ELSE
  INV.PRESENT = 0
  IWH.PRESENT = 0
  MAT INV.REC = ""
  MAT IWH.REC = ""
  ERRMSG = "Inventory record cannot be found - ":ISTK.PROD
  GOTO 99999
  S.STATUS = "INV.REC. MISSING"
END
IF INV.PRESENT THEN
  MATREAD IWH.REC FROM INV.WHSE,IWH.ID ELSE
    MAT IWH.REC = ""
    ERRMSG = "Inventory warehouse record cannot be found - ":IWH.ID
    GOTO 99999
    S.STATUS = "IWH.REC":IWH.ID:" IS MISSING"
  END
END
IF S.STATUS = '' THEN
  MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
    ERRMSG = "Product Line '":INV.LINE:"' Missing"; GOTO 99999
    S.STATUS = ERRMSG
  END
  IF S.STATUS = '' THEN
    IF CATG.INV="" OR CATG.ACCRU.LIAB="" OR CATG.AP.ACCT="" THEN
      ERRMSG = "Acct Details Missing for Prod Line '":INV.LINE:"'"; GOTO 99999
      S.STATUS = ERRMSG
    END
  END
END
RETURN
****************
LOAD.HEADER.DATA: 
*****************
JCNT = DCOUNT(PO.JOB.NO<1,PROD.PTR>,@SM)
CCNT = DCOUNT(PO.CUST.NO<1,PROD.PTR>,@SM)

BEGIN CASE
  CASE JCNT = 1
    JOBNO = PO.JOB.NO<1,PROD.PTR>
    CNAME = "???????????????"
    MATREAD JOB.REC FROM JOB, CONO:JOBNO THEN
      CNAME = "Customer # ":JOB.CUST
      MATREAD CUST.REC FROM CUSTOMER, CONO:JOB.CUST THEN CNAME = CUST.NAME
    END
  CASE CCNT = 1
    JOBNO = "MULTIPLE"
    CUSTNO = PO.CUST.NO<1,PROD.PTR>
    CNAME = "Customer # ":CUSTNO
    MATREAD CUST.REC FROM CUSTOMER, CONO:CUSTNO THEN CNAME = CUST.NAME
  CASE JCNT > 1
    JOBNO = "MULTIPLE"
    CUSTNO = ""
    CNAME = ''
  CASE 1
    JOBNO = ""
    CNAME = ""
END CASE
PROD.NO = DSR.PROD<1,PROD.PTR>
MATREAD INV.REC FROM INVENTORY, CONO:PROD.NO THEN
  IDESC1 = INV.DESC
  BASWGT = INT(INV.BAS.WT/100)
  BEGIN CASE
    CASE MOD(INV.PAP.WIDTH,10000) = 0
      IWIDTH = OCONV(INT(INV.PAP.WIDTH/10000),"MD0")
    CASE MOD(INV.PAP.WIDTH,1000) = 0
      IWIDTH = OCONV(INT(INV.PAP.WIDTH/1000),"MD1")
    CASE MOD(INV.PAP.WIDTH,100) = 0
      IWIDTH = OCONV(INT(INV.PAP.WIDTH/100),"MD2")
    CASE MOD(INV.PAP.WIDTH,10) = 0
      IWIDTH = OCONV(INT(INV.PAP.WIDTH/10),"MD3")
    CASE 1
      IWIDTH = OCONV(INV.PAP.WIDTH,"MD4")
  END CASE
  IDESC2 = BASWGT:"# ":IWIDTH:'"'
END ELSE
  MAT INV.REC = ""
  IDESC1 = "???????????????"
  IDESC2 = ""
END
*SCV.REC(1)<ESN>  = DATE()
*SCR_MAN_NO  = MAN_ID
*SCR_PO_NO  = PO_ID

SCR_VEND_DESC  = VEND.DESC
SCR_JOB_NO  = JOBNO
SCR_CUST_NAME  = CNAME
SCR_PROD_ID  = PROD.NO
SCR_PROD_DESC1  = IDESC1
SCR_PROD_DESC2  = IDESC2

*SCV.REC(10)<ESN> = OCONV(RSMAN.MAN.TOT.WGT<1>,"MD2,") ; * 38020
SCR_TOT_WGT = OCONV(RSMAN.MAN.TOT.WGT<1>,"MD2,")

*SCV.REC(53)<ESN> = PROD.PTR
SCR_53 = PROD.PTR

*SCV.REC(54)<ESN> = PROD.CNT
SCR_54 = PROD.CNT

*SCV.REC(55)<ESN> = DSR.DATE
SCR_55 = OCONV(DSR.DATE<1,1>,"D2/")

PROD.ENTERED = ""
IF DSR.SERIAL<1,PROD.PTR> # "" THEN
  NUM.SERIAL = DCOUNT(DSR.SERIAL<1,PROD.PTR>,@SVM)
  FOR S = 1 TO NUM.SERIAL
    MATREAD ISTK.REC FROM INV_SERIAL, CONO:DSR.SERIAL<1,PROD.PTR,S> ELSE
      MAT ISTK.REC = ""
    END
    LOCATE DSR.SERIAL<1,PROD.PTR,S> IN ROLL.ARR<1>,1 SETTING RPOS THEN
      ISTK.QTY.ENTERED = ROLL.ARR<4,RPOS>
    END
    IF DSR.UOM<1,PROD.PTR> = "LBS" OR DSR.UOM<1,PROD.PTR> = "MSI" THEN
      PROD.ENTERED+=ISTK.QTY.ENTERED
    END ELSE
      PROD.ENTERED+=ISTK.QTY.ENTERED * 100
    END
  NEXT S
END
ENTERED = ""
IF DSR.SERIAL # "" THEN
  NUM.PROD = DCOUNT(DSR.PROD,@VM)
  FOR P = 1 TO NUM.PROD
    NUM.SERIAL = DCOUNT(DSR.SERIAL<1,P>,@SVM)
    FOR S = 1 TO NUM.SERIAL
      MATREAD ISTK.REC FROM INV_SERIAL, CONO:DSR.SERIAL<1,P,S> ELSE
        MAT ISTK.REC = ""
      END
      LOCATE DSR.SERIAL<1,P,S> IN ROLL.ARR<1>,1 SETTING RPOS THEN
        ISTK.QTY.ENTERED = ROLL.ARR<4,RPOS>
      END
      IF DSR.UOM<1,P> = "LBS" OR DSR.UOM<1,P> = "MSI" THEN
        ENTERED+=ISTK.QTY.ENTERED
      END ELSE
        ENTERED+=ISTK.QTY.ENTERED*100
      END
    NEXT S
  NEXT P
END
*SCV.REC(59)<ESN> = OCONV(ENTERED,"MD2,")  
SCR_59 = OCONV(ENTERED,"MD2,")  

*SCV.REC(56)<ESN> = OCONV(PROD.ENTERED,"MD2,")
SCR_56 = OCONV(PROD.ENTERED,"MD2,")

*SCV.REC(60)<ESN> = DSR.UOM<1,PROD.PTR>
SCR_60 = DSR.UOM<1,PROD.PTR>

RETURN
*
****************
LOAD.MLINE.DATA: 
****************
*
SCR_11 = ""
SCR_12 = ""
SCR_13 = ""
SCR_14 = ""
SCR_15 = ""
SCR_16 = ""
SCR_17 = ""

LCNT = DCOUNT(DSR.SERIAL<1,PROD.PTR>,@SM)
FOR REF = 1 TO LCNT
  SCR_11<1,REF> = REF
  SCR_12<1,REF> = DSR.SERIAL<1,PROD.PTR,REF>
  SERIAL.ID = CONO:DSR.SERIAL<1,PROD.PTR,REF>

  MATREAD ISTK.REC FROM INV_SERIAL,SERIAL.ID THEN
    LOCATE DSR.SERIAL<1,PROD.PTR,REF> IN ROLL.ARR<1>,1 SETTING RPOS THEN
      ISTK.QTY.ENTERED = ROLL.ARR<4,RPOS>
    END

    IF ISTK.UOM='LBS' OR ISTK.UOM='MSI' THEN
      SCR_14<1,REF> = OCONV(ISTK.QTY.ENTERED,"MD2")
    END ELSE
      SCR_14<1,REF> = ISTK.QTY.ENTERED
    END
    SCR_13<1,REF> = DSR.MILL.ID<1,PROD.PTR,REF>
    SCR_15<1,REF> = DSR.WHSE<1,PROD.PTR>
    SCR_16<1,REF> = DSR.LOC<1,PROD.PTR,REF>
    IF ISTK.POST.DATE # "" THEN
      SCR_17<1,REF> = "Posted on ":OCONV(ISTK.POST.DATE,"D2/")
    END ELSE
      SCR_17<1,REF> = DSR.LOC.STATUS<1,PROD.PTR,REF>
    END
  END
NEXT REF
RETURN

* End of method code
99999
STATUS = RBO.setProperty('','ServerStatus',1)
STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
RETURN
