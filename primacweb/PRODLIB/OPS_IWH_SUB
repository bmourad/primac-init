SUBROUTINE OPS.IWH.SUB (CONORECPNO,PERIOD,LOC.SEQ,LAST,ACTION,OPEN.FLAG)
$INCLUDE CPYLIB COMMON1
$INCLUDE JCS.CPYLIB COM.JCS.LINK  
$INCLUDE ICS.CPYLIB COM.INV.MAIN  
$INCLUDE ICS.CPYLIB COM.INV.SERIAL
$INCLUDE JCS.CPYLIB >COM.INV.STATS 
$INCLUDE PMC.CPYLIB COM.CUST 
$INCLUDE OPS.CPYLIB COM.ORDER
$INCLUDE ICS.CPYLIB COM.INV.CNV   
$INCLUDE OPS.CPYLIB COM.OPS.LINK
*************************************************************************
* REVISION     - [12.0]
*ACTION - build IWH.REC,build INV.RECEIPTS, update INV.RECEIPTS file.
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.) 
* SYSTEM      - PRIMAC                                                   
* PROGRAM     - OPS_IWH_SUB                                                  
* BY          - KHAJA ZIAUDDIN                                             
* DATE        - 07/10/2003	(mm/dd/yyyy)                                                 
* DESCRIPTION                                                            
* This program builds .FI arrays found in INV.WHSE file from new
* REV12 files (INV_SERIAL,INV_RECEIPTS etc.).
* It also updates all new files (INV_SERIAL, INV_RECIEPTS, INV_RECP_WHSE,
* INV_AUDIT_HIST, FNGD_AUDIT_TAG) plus old files with new data structure
* INV.WHSE and INV.WHSE.LOC, based on the .FI arrays passed back from
* process.
* It should be called with action 1 every time program reads INV.WHSE
* file and some kind of manipulation of .FI arrays is needed.
* If update of INV.WHSE file is needed it can be called first with
* action 2 and then 3 to update files or with 4 which performs step
* 2, and 3 at once.
* DO NOT USE this program for inquiry purposes, because it locks records.
* Use BUILD.IWH.FI program for inquiries, rpts etc.
* Transfers and receipt cost adjustments do not use this sub.
* This program uses TEMP files to keep track of records status
* so if there is an error action 9 should be used to clear all temporary
* records. 
* In order to function properly all INAH. attributes must be set.
* Make sure that common areas are same. Calling program
* has to have ORG.IWH.REC dimensioned:
* DIM ORG.IWH.REC(IWH.REC.SIZE) ; MAT ORG.IWH.REC= ""
* If making any changes to this program make sure to understand how
* .FI arrays change in rev11 depending on what kind of process is
* building it. There are numerous comments in program so take time
* to understand what is going on before making any changes, since
* it can affect numerous processes.
* It also does not perform any kind of checks of the integrity of
* the data so all checks need to be performed in calling programs.
* All records in _TEMP files have to be locked as long as they
* exist in the file. If any records are found in TEMP files and
* are not locked, it would indicate that some of the process was
* ABORTED and they will be removed from temp file.
*
* Here is the list of arguments and what they are:
*
* PERIOD             -UP TO WHAT PERIOD TO BUILD .FI ARRAY 
* MAT ORG.IWH.REC    -USED BY THE PROGRAM. DO NOT CHANGE THE VALUES OF
*                     THIS ARRAY ANYWHERE OUTSIDE OR INSIDE THIS PROGRAM.
* LOC.SEQ            -COUNTER, TAKE A LOOK AT THE PROGRAMS.
* LAST               -WHEN RECEVEING MULTIPLE LOCATIONS OR SERIALS
*                     IS THIS THE LAST SERIAL OR LOCATION FOR GIVEN
*                     RECEIPT.
* ACTION             -WHAT TO DO
* ACTION=1           -BUILD IWH.REC .FI ATTRIBUTES
*                     Before executing this command INAH.PROD, INAH.WHSE
*                     and PERIOD must be set. PERIOD must be set 
*                     if you want to exclude stock received in future 
*                     periods.
* ACTION=2          -BUILD ISTK.REC,INVR.REC,IRW.REC,INAH.REC ...
*                   -all necesary INAH. values MUST be set prior to this
*                    action. It will write all records in _TEMP files.
* ACTION=3          -move files from _TEMP to live files and release lock
* ACTION=4          ACTION 2 follwed by ACTION 3
* ACTION=9          clear temp records (uses IID.ARR of ids.)
*                   It will clear all _TEMP records. _Temp records must
*                   be cleared if no update is going to take place.
*                     
* Explanation of variales:
*
* RECP.ARR<1> - contains all receipts
* RECP.ARR<2> - contains periods for all receipts
* RECP.ARR<3> - contains entry dates for all receipts
*TASK
*
*T25740 epitka 01/31/2002 * REV12
*************************************************************************
*
$INCLUDE WWINSERT RBO.H

$DEFINE INVENTORY
$INCLUDE ICS.CPYLIB INVENTORY
$DEFINE INVWHSE
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB SAVE.STOCK.REC
$DEFINE INVWHSELOC
$INCLUDE ICS.CPYLIB INV.WHSE.LOC
$DEFINE INVRECEIPTS
$INCLUDE ICS.CPYLIB INV_RECEIPTS
$DEFINE INVRECPWHSE
$INCLUDE ICS.CPYLIB INV_RECP_WHSE
$DEFINE INVSERIAL
$INCLUDE ICS.CPYLIB INV_SERIAL
$DEFINE INVAUDITHIST
$INCLUDE ICS.CPYLIB INV_AUDIT_HIST
$DEFINE DAILYFNGDRECEIPT
$INCLUDE OPS.CPYLIB DAILY_FNGD_RECEIPT
$DEFINE ICSID
$INCLUDE ICS.CPYLIB ICS.ID
$DEFINE CATEGORY
$INCLUDE ICS.CPYLIB CATEGORY
$DEFINE INVCNV
$INCLUDE ICS.CPYLIB INV.CNV
$DEFINE FILEVARS
$INCLUDE CPYLIB FILE.VARS
$INCLUDE CPYLIB CHAR
*
CONO=CONORECPNO[1,3]
DEFFUN CALC_STK_QTY(COST.QTY,MAT INV.CNV.REC,ROND,LN)
*
*
IF ACTION='1' THEN
  IF (OPEN.FLAG) THEN
    OPEN.FLAG=0
    ;* even if the OPEN.FLAG=0 we still need to test every file if it is
    ;* open or since some of the files might have been opened and there 
    ;* migth be some lockes that we don't want to loose.
    IF FILEINFO(INVENTORY,0)=0 THEN
      OPEN '','INVENTORY' TO INVENTORY ELSE 
        ERRMSG="INVENTORY FILE IS MISSING";GOTO 93000 
      END
    END
    IF FILEINFO(INV.WHSE,0)=0 THEN
      OPEN '','INV.WHSE' TO INV.WHSE ELSE 
        ERRMSG="INV.WHSE FILE IS MISSING";GOTO 93000
      END
    END
    IF FILEINFO(INV_RECEIPTS,0)=0 THEN
      OPEN '','INV_RECEIPTS' TO INV_RECEIPTS ELSE 
        ERRMSG="INV_RECEIPTS FILE IS MISSING";GOTO 93000
      END
    END
    IF FILEINFO(INV_RECEIPTS_TEMP,0)=0 THEN
      OPEN '','INV_RECEIPTS_TEMP' TO INV_RECEIPTS_TEMP ELSE 
        ERRMSG="INV_RECEIPTS_TEMP FILE IS MISSING";GOTO 93000
      END
    END
    IF FILEINFO(INV_RECP_WHSE,0)=0 THEN
      OPEN '','INV_RECP_WHSE' TO INV_RECP_WHSE ELSE 
        ERRMSG="INV_RECP_WHSE FILE IS MISSING";GOTO 93000
      END
    END
    IF FILEINFO(INV_RECP_WHSE_TEMP,0)=0 THEN
      OPEN '','INV_RECP_WHSE_TEMP' TO INV_RECP_WHSE_TEMP ELSE 
        ERRMSG="INV_RECP_WHSE_TEMP FILE IS MISSING";GOTO 93000
      END
    END
    IF FILEINFO(INV_SERIAL,0)=0 THEN
      OPEN '','INV_SERIAL' TO INV_SERIAL ELSE 
        ERRMSG="INV_SERIAL FILE  IS MISSING";GOTO 93000
      END
    END
    IF FILEINFO(INV_SERIAL_TEMP,0)=0 THEN
      OPEN '','INV_SERIAL_TEMP' TO INV_SERIAL_TEMP ELSE 
        ERRMSG="INV_SERIAL_TEMP FILE IS MISSING";GOTO 93000
      END
    END
    IF FILEINFO(INV_AUDIT_HIST,0)=0 THEN
      OPEN '','INV_AUDIT_HIST' TO INV_AUDIT_HIST ELSE 
        ERRMSG="INV_AUDIT_HIST FILE  IS MISSING";GOTO 93000
      END
    END
    IF FILEINFO(FNGD_AUDIT_TAG,0)=0 THEN
      OPEN '','FNGD_AUDIT_TAG' TO FNGD_AUDIT_TAG ELSE
        ERRMSG='FNGD_AUDIT_TAG FILE IS MISSING';GOTO 93000
      END
    END
    IF FILEINFO(INV_AUDIT_HIST_TEMP,0)=0 THEN
      OPEN '','INV_AUDIT_HIST_TEMP' TO INV_AUDIT_HIST_TEMP ELSE 
        ERRMSG="INV_AUDIT_HIST_TEMP FILE IS MISSING";GOTO 93000
      END
    END
    IF FILEINFO(FNGD_AUDIT_TAG,0)=0 THEN
      OPEN '','FNGD_AUDIT_TAG' TO FNGD_AUDIT_TAG ELSE
        ERRMSG="FNGD_AUDIT_TAG FILE IS MISSING";GOTO 93000
      END
    END
    IF FILEINFO(INV.WHSE.LOC,0)=0 THEN
      OPEN '','INV.WHSE.LOC' TO INV.WHSE.LOC ELSE 
        ERRMSG="INV.WHSE.LOC FILE IS MISSING";GOTO 93000
      END
    END
    IF FILEINFO(INV.WHSE.LOC.TEMP,0)=0 THEN
      OPEN '','INV.WHSE.LOC.TEMP' TO INV.WHSE.LOC.TEMP ELSE 
        ERRMSG="INV.WHSE.LOC.TEMP FILE IS MISSING";GOTO 93000
      END
    END
    IF FILEINFO(CATEGORY,0)=0 THEN
      OPEN '','CATEGORY' TO CATEGORY ELSE 
        ERRMSG="CATEGORY FILE IS MISSING";GOTO 93000
      END
    END
    IF FILEINFO(CONTROL,0)=0 THEN
      OPEN '','CONTROL' TO CONTROL ELSE 
        ERRMSG="CONTROL FILE IS MISSING";GOTO 93000
      END
    END
  END
  ;* if inventory has not been read yet then read it now
  IF INV.LINE='' THEN
    INV.ID = CONO:INAH.PROD
    MATREAD INV.REC FROM INVENTORY,INV.ID THEN
      IF INV.COST.WT+0=0 THEN INV.COST.WT=100 
      IF INV.SBR+0=0 THEN INV.SBR=1           
    END ELSE
      MAT INV.REC=''
    END
  END
  CATG.ID = CONO:INV.LINE
  MATREAD CATG.REC FROM CATEGORY,CATG.ID THEN   NULL
END
*
NULL.REC=''
RECP.ARR=""
RECP.ARR<1> = IWH.RECP.NO
RECP.ARR<2>= IWH.RECP.PERIOD
RECP.ARR<3>=IWH.RECP.ENT.DATE
F.RECP.NO='' ; F.RECP.PERIOD='' ; F.RECP.ENT.DATE=''
ERRMSG=""
IWH.ID = CONO:INAH.PROD:"!":INAH.WHSE 
*
EQU ORIG.IWH.RSV.FI TO ORG.IWH.REC(41)
EQU ORIG.IWH.ORG.FI  TO ORG.IWH.REC(40)
EQU ORIG.IWH.QTY.FI TO ORG.IWH.REC(42)
EQU ORIG.IWH.COST.FI TO ORG.IWH.REC(43)
*
DIM HOLD.IWH.REC(IWH.REC.SIZE) ; MAT HOLD.IWH.REC = ""
DIM HOLD.INAH.REC(INAH.REC.SIZE) ; MAT HOLD.INAH.REC = ""   ;* T27384
IF CATG.TRK.LVL='G' THEN
  MAT HOLD.IWH.REC = MAT IWH.REC
  MAT IWH.REC = MAT ORG.IWH.REC
*
  ORIG.IWH.RSV.FI = IWH.RSV.FI
  ORIG.IWH.ORG.FI = IWH.ORG.FI
  ORIG.IWH.QTY.FI = IWH.QTY.FI
  ORIG.IWH.COST.FI = IWH.COST.FI
  MAT IWH.REC = MAT HOLD.IWH.REC
END
*
RSV.FLAG=0
BEGIN CASE
  CASE ACTION = 1
    GOSUB BUILD.IWH.REC
    MAT IID.REC=""
  CASE ACTION = 2
    GOSUB BUILD.REC
  CASE ACTION = 3
    GOSUB UPDATE.REC
  CASE ACTION = 4
    GOSUB BUILD.REC
    GOSUB UPDATE.REC
  CASE ACTION = 9
    GOSUB DELETE.TMP.REC
END CASE
*
GOTO 93000
*
*************************************************************************
*
******************
BUILD.REC: 
******************
*
INAH.OPER.ID = @LOGNAME
INAH.SYS.DATE=DATE()
INAH.SYS.TIME=TIME()
DEPL.METHOD='AC'
;*
;* build INV.RECEIPTS based on IWH.REC 
;*
FI.CNT = DCOUNT(IWH.RECV.FI,VM)
IF FI.CNT >DCOUNT(RECP.ARR<1>,VM) THEN
  GOSUB GET.INAH.SEQ
  ;*
  ;* if this is adjustment then
  ;* new receipt needs to be created
  ;* if this is a receipt then create only
  ;* one receipt and a serial for each location.
  ;* currently OPS receiving screens allows only one
  ;* location per receipt.
  ;*
  IF LOC.SEQ="" THEN LOC.SEQ=1
  IF LOC.SEQ=1 THEN
    GOSUB CREATE.INVR
  END
  ;*
  IF INAH.QTY # "" THEN
    ;*receipt
    ORG.QTY = INAH.QTY
    CUR.QTY = INAH.QTY
    RESV.QTY= INAH.QTY
  END ELSE
    ;*adjustment
    ORG.QTY = IWH.ORG.FI<1,FI.CNT>
    CUR.QTY = IWH.QTY.FI<1,FI.CNT>
    RESV.QTY = IWH.RSV.FI<1,FI.CNT>
  END
  INAH.QTY = CUR.QTY
  ;*
  GOSUB CREATE.SERIAL
  ;*
  ;* set INV_RECP_WHSE values
  ;*
  GOSUB SET.IRW
  ;*
  INVR.SERIAL.NO<1,-1>=S.ID[4,99]
  INVR.AUDIT.NO<1,-1> = INAH.SEQ
  ;*
  ;* update location serials and qty
  ;*
  IWLO.ID=CONO:INAH.PROD:"!":INAH.WHSE:"!":INAH.LOC
  IF RECORDLOCKED(INV.WHSE.LOC.TEMP,IWLO.ID)=0 THEN 
    DELETE INV.WHSE.LOC.TEMP,IWLO.ID
  END
  MATREADU IWLO.REC FROM INV.WHSE.LOC.TEMP,IWLO.ID ELSE
    MATREADU IWLO.REC FROM INV.WHSE.LOC,IWLO.ID ELSE
      MAT IWLO.REC=''
    END
  END
  LOCATE IWLO.ID IN IID.IWLO<1> SETTING JUNK ELSE
    IID.IWLO<1,-1>=IWLO.ID
  END
  IWLO.SERIAL<1,-1> = S.ID[4,99]
  IWLO.LOC.ON.HAND+=INAH.QTY
  MATWRITEU IWLO.REC ON INV.WHSE.LOC.TEMP,IWLO.ID
  ;*
  ;* set INV_AUDIT_HIST receipt and serial #
  ;*
  INAH.ID = CONO:INAH.SEQ
  INAH.RECP.NO = RECP.NO
  INAH.SERIAL = S.ID[4,99]
  INAH.EXT.COST=INT((IWH.COST.FI<1,FI.CNT>/10000) * ((INAH.QTY/10)/ (INV.COST.WT/100)) + .5)
  IID.INAH<1,-1> = INAH.ID
  MATWRITEU INAH.REC ON INV_AUDIT_HIST_TEMP,INAH.ID
  IF LAST = "Y" THEN
    MATWRITEU INVR.REC ON INV_RECEIPTS_TEMP,INVR.ID
    RECP.ARR<1,-1> = RECP.NO
    RECP.ARR<2,-1> = INAH.PERIOD
    RECP.ARR<3,-1>=INVR.ENT.DATE
    IWH.RECP.NO = RECP.ARR<1>
    IWH.RECP.PERIOD = RECP.ARR<2>
    IWH.RECP.ENT.DATE=RECP.ARR<3>
IRW.ID=CONO:RECP.NO:"!":INAH.WHSE
    IID.IRW<1,-1> = IRW.ID
    MATWRITEU IRW.REC ON INV_RECP_WHSE_TEMP,IRW.ID
  END
END
RETURN
*
*****************
UPDATE.REC: 
*****************
;*
;* update INV.RECEIPTS file
;* update INV_RECP_WHSE file
;* update INV_SERIAL file
;* update INV_AUDIT_HIST file
;* update INV.WHSE file
;* update INV.WHSE.LOC file
;*
RECP.CNT = DCOUNT(IID.INVR<1>,VM)
FOR R = 1 TO RECP.CNT
  INVR.ID = IID.INVR<1,R>
  MATREADU INVR.REC FROM INV_RECEIPTS_TEMP,INVR.ID THEN
    IF INVR.POST.DATE ="" THEN
      INVR.POST.DATE=DATE()
    END
    MATWRITE INVR.REC ON INV_RECEIPTS,INVR.ID
    DELETE INV_RECEIPTS_TEMP,INVR.ID
  END
NEXT RECP.CNT
;*
RCPWHSE.CNT = DCOUNT(IID.IRW<1>,VM)
FOR R = 1 TO RCPWHSE.CNT
  IRW.ID = IID.IRW<1,R>
  MATREADU IRW.REC FROM INV_RECP_WHSE_TEMP,IRW.ID THEN
    MATWRITE IRW.REC ON INV_RECP_WHSE,IRW.ID
    DELETE INV_RECP_WHSE_TEMP,IRW.ID
  END
NEXT R
;*
SER.CNT = DCOUNT(IID.ISTK,VM)
FOR S = 1 TO SER.CNT
  S.ID = IID.ISTK<1,S>
  MATREADU ISTK.REC FROM INV_SERIAL_TEMP,S.ID THEN
    MATWRITE ISTK.REC ON INV_SERIAL,S.ID
    DELETE INV_SERIAL_TEMP,S.ID
  END
NEXT S
;*
INAH.CNT = DCOUNT(IID.INAH,VM)
FOR IH = 1 TO INAH.CNT
  INAH.ID = IID.INAH<1,IH>
  MATREADU INAH.REC FROM INV_AUDIT_HIST_TEMP,INAH.ID THEN
    MATWRITE INAH.REC ON INV_AUDIT_HIST,INAH.ID
    WRITE NULL.REC ON FNGD_AUDIT_TAG,INAH.ID
    DELETE INV_AUDIT_HIST_TEMP,INAH.ID
  END
NEXT IH
;*
LOC.CNT = DCOUNT(IID.IWLO,VM)
FOR LOC=1 TO LOC.CNT
  IWLO.ID=IID.IWLO<1,LOC>
  MATREADU IWLO.REC FROM INV.WHSE.LOC.TEMP,IWLO.ID  THEN
    MATWRITE IWLO.REC ON INV.WHSE.LOC,IWLO.ID
    DELETE INV.WHSE.LOC.TEMP,IWLO.ID
  END
NEXT LOC
;*
;*remove FIFO from INV.WHSE
;*
IWH.VDR.FI = ""   
IWH.PO.NO.FI = "" 
IWH.PO.LN.FI = "" 
IWH.ORG.FI = ""   
IWH.RSV.FI = ""   
IWH.QTY.FI = ""   
IWH.COST.FI = ""  
IWH.ACT.COST = "" 
IWH.SALE.FI = ""  
GOSUB RESORT.IWH.RECPS
  IWH.HOLD.ONHAND=0 ;*T27396
  IWH.PERIOD.ONHAND=0 ;*T27396
MATWRITE IWH.REC ON INV.WHSE,IWH.ID 
;*
;* null out ORIG arrays
;*
ORIG.IWH.RSV.FI =""
ORIG.IWH.ORG.FI =""
ORIG.IWH.QTY.FI =""
ORIG.IWH.COST.FI =""
;*
;* clear all arrays
;*
MAT IID.REC = ""
MAT INAH.REC=""
MAT IWLO.REC=""
MAT ISTK.REC=""
MAT INVR.REC=""
MAT IRW.REC=""
MAT IWH.REC=""
RETURN
*
****************
BUILD.IWH.REC: 
****************
;*
;*build IWH.REC information from receipts.
;*do not include future period receipts in receipt array
;* if PERIOD variable passed. If not then include all receipts, 
;* current and future.
;*
*
IWH.ORG.FI = ""
IWH.RSV.FI = ""
IWH.QTY.FI = ""
IWH.COST.FI=""
IWH.VDR.FI=''
IWH.PO.NO.FI=''
IWH.PO.LN.FI=''
IWH.RECV.FI=''
IWH.DATE.FI=''
IWH.ACT.COST=''
IWH.COST.FI=''
IWH.SALE.FI=''
IWH.RECP.NO=''
IWH.RECP.PERIOD=''
IWH.RECP.ENT.DATE=''

IWH.HOLD.ONHAND=''  ;*T27396
IWH.PERIOD.ONHAND=''  ;*T27396
* T27384 v ; Retain the value of INAH.REC and the end of the subroutine
*            restore it, because of the read of INV_AUDIT_HIST to 
*            retrieve original receipt period per warehouse.
  SAVE.WHSE = INAH.WHSE
  MAT HOLD.INAH.REC = MAT INAH.REC
* T27384 ^
*
IF PERIOD='' THEN PERIOD='9999999'
RCNT=0
RECP.CNT = DCOUNT(RECP.ARR<1>,VM)
FOR RECP.PTR = 1 TO RECP.CNT
  SKIP=0
  RECP.NO=RECP.ARR<1,RECP.PTR>
  IF RECP.ARR<2,RECP.PTR> <= PERIOD THEN
    INVR.ID=CONO:RECP.NO
    IF RECORDLOCKED(INV_RECEIPTS_TEMP,INVR.ID)=0 THEN  
      DELETE INV_RECEIPTS_TEMP,INVR.ID                 
    END                                                
    MATREADU INVR.REC FROM INV_RECEIPTS_TEMP,INVR.ID ELSE
      MATREADU INVR.REC FROM INV_RECEIPTS,INVR.ID ELSE
        SKIP=1
      END
    END
    IF NOT(SKIP) THEN
* T27384 v
*       IRW.ID=CONO:RECP.NO:"!":INAH.WHSE
        IRW.ID=CONO:RECP.NO:"!":SAVE.WHSE
* T27384 ^
      IF RECORDLOCKED(INV_RECP_WHSE_TEMP,IRW.ID)=0 THEN  
        DELETE INV_RECP_WHSE_TEMP,IRW.ID                 
      END                                                
      MATREADU IRW.REC FROM INV_RECP_WHSE_TEMP,IRW.ID ELSE
        MATREADU IRW.REC FROM INV_RECP_WHSE,IRW.ID THEN
          RCNT+=1
          IWH.ORG.FI<1,RCNT>=IRW.ORG.QTY   
          IWH.RSV.FI<1,RCNT>=IRW.RSVB.QTY   
          IWH.QTY.FI<1,RCNT>=IRW.CUR.QTY        
          IWH.COST.FI<1,RCNT>=IRW.UNIT.COST   
          IWH.VDR.FI<1,RCNT> = INVR.VEND          
          IWH.PO.NO.FI<1,RCNT>=INVR.PO            
          IWH.PO.LN.FI<1,RCNT>=INVR.PO.LN         
          IWH.RECV.FI<1,RCNT>=INVR.ENT.DATE       
          IWH.DATE.FI<1,RCNT>=INVR.POST.DATE      
          IWH.COST.FI<1,RCNT>=INVR.UNIT.COST   
          IWH.SALE.FI<1,RCNT>=INVR.UN.SALE
          IWH.RECP.PERIOD<1,RCNT>=INVR.PERIOD     
          IWH.RECP.ENT.DATE<1,RCNT>=INVR.ENT.DATE 
          IWH.RECP.NO<1,RCNT>=RECP.NO             
        END
      END
    END
  END
NEXT RECP.PTR

*T27396 v Loop added here.
  IF PERIOD < 9999999 THEN
    RECP.CNT=DCOUNT(IWH.RECP.NO,VM)
    FOR RIDX = 1 TO RECP.CNT
      RECP.NO = IWH.RECP.NO<1,RIDX>
      MATREAD INVR.REC FROM INV_RECEIPTS,CONO:RECP.NO THEN
        FOR AA = 1 TO DCOUNT(INVR.AUDIT.NO,VM)
          MATREAD INAH.REC FROM INV_AUDIT_HIST,CONO:INVR.AUDIT.NO<1,AA> THEN
            IF INAH.TYPE = 'I' AND INAH.WHSE = SAVE.WHSE AND INAH.SRC[1,1]#'C' THEN
              IF INAH.PERIOD > PERIOD THEN
                IF INAH.DEPL.RECP # '' THEN
                  IF INAH.DEPL.QTY='' THEN INAH.DEPL.QTY = INAH.QTY
                END ELSE
                  INAH.DEPL.RECP = INAH.RECP.NO
                  INAH.DEPL.QTY = INAH.QTY
                END
                FOR BB = 1 TO DCOUNT(INAH.DEPL.RECP,VM)
                  LOCATE INAH.DEPL.RECP<1,BB> IN IWH.RECP.NO<1> SETTING RFND THEN
                    IWH.RSV.FI<1,RFND>-=INAH.DEPL.QTY<1,BB>
                    IWH.QTY.FI<1,RFND>-=INAH.DEPL.QTY<1,BB>
                    IF IWH.RSV.FI<1,RFND> < 0 THEN IWH.RSV.FI<1,RFND>=0
                    IF IWH.QTY.FI<1,RFND> < 0 THEN IWH.QTY.FI<1,RFND>=0
                  END
                NEXT BB
              END
            END
          END
        NEXT AA
      END
    NEXT RIDX
  END
*T27396 ^
IWH.HOLD.ONHAND=IWH.ON.HAND
MAT ORG.IWH.REC = MAT IWH.REC
MAT INAH.REC = MAT HOLD.INAH.REC      ;* T27384
RETURN
*
*****************
CREATE.INVR: 
*****************
*
MAT INVR.REC = ""
INVR.PROD = INAH.PROD
INVR.CUST = IWH.VDR.FI<1,FI.CNT> ;* customer number is stored in vendor # 
INVR.JOB  = IWH.PO.NO.FI<1,FI.CNT> ;*job # is in PO #
INVR.ENT.DATE = IWH.RECV.FI<1,FI.CNT>
INVR.PERIOD = INAH.PERIOD
INVR.ORG.QTY=IWH.ORG.FI<1,FI.CNT>
INVR.UNIT.COST=IWH.COST.FI<1,FI.CNT>
INVR.ORG.WHSE = INAH.WHSE
;* this was before in FNGD.RECEIPT.HIST file v
INVR.ORDER=DFR.ORDER
INVR.SHIP.TO=DFR.SHIP.TO
INVR.ORD.QTY=DFR.QTY
INVR.ORD.SQTY=DFR.SQTY
INVR.PICK.FLG=DFR.PICK.FLG
INVR.UN.SALE=DFR.UN.SALE
INVR.TOT.COST=DFR.TOT.COST
INVR.TOT.AMT=DFR.TOT.AMT
INVR.STATUS='FNGD'
;* ^
RECP.NO=CONORECPNO[4,99]
INVR.ID=CONO:RECP.NO
IID.INVR<1,-1>=INVR.ID
RETURN
*
*****************
SET.IRW: 
*****************
*
;* only for receipt tracked items when creating new receipt.
;*
IF LOC.SEQ=1 THEN
  MAT IRW.REC=""
  IRW.ORG.QTY+=IWH.ORG.FI<1,FI.CNT>
  IRW.CUR.QTY+=IWH.QTY.FI<1,FI.CNT>
  IRW.RSVB.QTY+=IWH.RSV.FI<1,FI.CNT>
  IF (INAH.SRC='IR' OR INAH.SRC='IS' OR INAH.SRC='IQ' OR INAH.ADJ.CODE='PHY')  THEN 
    IRW.UNIT.COST=IWH.COST.FI<1,FI.CNT>
  END
END
IRW.SERIAL.NO<1,-1>=S.ID[4,99]
IRW.ON.HAND+=IWH.ORG.FI<1,FI.CNT>
INVR.DEPL.QTY+=IWH.ORG.FI<1,FI.CNT>
RETURN
*
********************
CREATE.SERIAL: 
********************
*
GOSUB GET.INV.UM.CNV
MAT ISTK.REC=""
S.ID = CONO:"R":RECP.NO:"!":INAH.WHSE:"!":INAH.LOC
ISTK.PROD=INAH.PROD
ISTK.WHSE = INAH.WHSE
ISTK.LOC = INAH.LOC
ISTK.ORG.QTY = ORG.QTY
ISTK.ORG.STK.QTY=CALC_STK_QTY(ORG.QTY,MAT INV.CNV.REC,'.5','')
ISTK.CUR.QTY = CUR.QTY
ISTK.CUR.STK.QTY=CALC_STK_QTY(CUR.QTY,MAT INV.CNV.REC,'.5','')
ISTK.RSVB.QTY=RESV.QTY
ISTK.PO.NO = INVR.PO
ISTK.PO.LINE= INVR.PO.LN
ISTK.UOM=INVR.UOM
ISTK.UNIT.COST = INVR.UNIT.COST
ISTK.ENTRY.DATE= INVR.ENT.DATE
ISTK.PRINT.DATE=DATE()
ISTK.POST.DATE = DATE()
ISTK.EDIT.DATE = DATE()
ISTK.RECP=RECP.NO
ISTK.RECP.PERIOD= INVR.PERIOD
ISTK.LA.PO=INVR.PO
ISTK.AUDIT.NO= INAH.SEQ
ISTK.RECP.PERIOD=INAH.PERIOD
IID.ISTK<1,-1> = S.ID
MATWRITEU ISTK.REC ON INV_SERIAL_TEMP,S.ID
RETURN
*
*
****************
DELETE.TMP.REC: 
****************
*
;* delete INV.RECEIPTS_TEMP record
;* delete INV_RECP_WHSE_TEMP record
;* delete INV_SERIAL_TEMP record
;* delete INV_AUDIT_HIST_TEMP record
;* delete INV.WHSE_TEMP record
;* delete INV.WHSE.LOC_TEMP record
;*
RECP.CNT = DCOUNT(IID.INVR<1>,VM)
FOR R = 1 TO RECP.CNT
  INVR.ID = IID.INVR<1,R>
  DELETE INV_RECEIPTS_TEMP,INVR.ID
NEXT RECP.CNT
;*
RCPWHSE.CNT = DCOUNT(IID.IRW<1>,VM)
FOR R = 1 TO RCPWHSE.CNT
  IRW.ID = IID.IRW<1,R>
  DELETE INV_RECP_WHSE_TEMP,IRW.ID
NEXT R
;*
SER.CNT = DCOUNT(IID.ISTK,VM)
FOR S = 1 TO SER.CNT
  S.ID = IID.ISTK<1,S>
  DELETE INV_SERIAL_TEMP,S.ID
NEXT S
;*
INAH.CNT = DCOUNT(IID.INAH,VM)
FOR IH = 1 TO INAH.CNT
  INAH.ID = IID.INAH<1,IH>
  DELETE INV_AUDIT_HIST_TEMP,INAH.ID
NEXT IH
;*
LOC.CNT = DCOUNT(IID.IWLO,VM)
FOR LOC=1 TO LOC.CNT
  IWLO.ID=IID.IWLO<1,LOC>
  DELETE INV.WHSE.LOC.TEMP,IWLO.ID
NEXT LOC
;*
;*remove FIFO from INV.WHSE
;*
IWH.VDR.FI = ""   
IWH.PO.NO.FI = "" 
IWH.PO.LN.FI = "" 
IWH.ORG.FI = ""   
IWH.RSV.FI = ""   
IWH.QTY.FI = ""   
IWH.COST.FI = ""  
IWH.ACT.COST = "" 
IWH.SALE.FI = ""  
IWH.RECV.FI = ""
;*
;* null out ORIG arrays
;*
ORIG.IWH.RSV.FI =""
ORIG.IWH.ORG.FI =""
ORIG.IWH.QTY.FI =""
ORIG.IWH.COST.FI =""
;*
;* clear all arrays
;*
MAT IID.REC = ""
MAT INAH.REC=""
MAT IWLO.REC=""
MAT ISTK.REC=""
MAT INVR.REC=""
MAT IRW.REC=""
MAT IWH.REC=""
RETURN
*
*****************
RESORT.IWH.RECPS: 
*****************
*
;* before we write IWH.REC out resort recp.arr 
;* by period, by entry date, by receipt number.
;* first add back future period receipts 
SRN=IWH.RECP.NO<1>
SRP=IWH.RECP.PERIOD<1>
SRD=IWH.RECP.ENT.DATE<1>
MAT HOLD.IWH.REC = MAT IWH.REC
MATREADU IWH.REC FROM INV.WHSE,IWH.ID THEN
  RCNT=DCOUNT(IWH.RECP.NO<1>,VM)
  FOR R=1 TO RCNT
    LOCATE IWH.RECP.NO<1,R> IN SRN<1> SETTING POS ELSE
      SRN<1,-1>=IWH.RECP.NO<1,R>
      SRP<1,-1>=IWH.RECP.PERIOD<1,R>    
      SRD<1,-1>=IWH.RECP.ENT.DATE<1,R>  
    END
  NEXT R
  MAT IWH.REC = MAT HOLD.IWH.REC
END
IWH.RECP.NO=''
IWH.RECP.PERIOD=''
IWH.RECP.ENT.DATE=''
RCNT=DCOUNT(SRN,VM)
SSQ='' ; SST=''
FOR R=1 TO RCNT
  SSQ<1,R>=SRP<1,R>"R%6":SRD<1,R>"R%5":SRN<1,R>"R%9"
NEXT R
FOR R=1 TO RCNT
  LOCATE SSQ<1,R> IN SST<1> BY 'AR' SETTING RPOS ELSE NULL
  SST<1> = INSERT(SST<1>,1,RPOS,0,SSQ<1,R>)
  IWH.RECP.NO<1>=INSERT(IWH.RECP.NO<1>,1,RPOS,0,SRN<1,R>)
  IWH.RECP.PERIOD<1>=INSERT(IWH.RECP.PERIOD<1>,1,RPOS,0,SRP<1,R>)
  IWH.RECP.ENT.DATE<1>=INSERT(IWH.RECP.ENT.DATE<1>,1,RPOS,0,SRD<1,R>)
NEXT R
RETURN
*
*************
GET.INAH.SEQ: 
*************
*
CALL GET_AUDIT_ID(CONO,ID,CONTROL,INV_AUDIT_HIST)
INAH.SEQ=ID
RETURN
*
*****************
GET.INV.UM.CNV: 
*****************
*
$INCLUDE ICSBP INV.UM.CNV
RETURN
*
*

93000*
STATUS = RBO.setProperty('','ServerStatus',1)
STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
RETURN

