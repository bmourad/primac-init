SUBROUTINE PAPSLM_PopSerial
********************************************************************************
*   Program name :- PAPSLM_PopSerial
*   Created:- 26/06/2003
*   Author:- Mohammed Abdul Malik
*------------------------------------------------------------------------------*
*
*
* In Properties:
* --------------
*  
*
* Out Properties:
* ---------------
*  
********************************************************************************
$INCLUDE CPYLIB COMMON1
$DEFINE FILEVARS			;* File.Vars variable is defined
$INCLUDE CPYLIB FILE.VARS
$INCLUDE ICS.CPYLIB COM.INV.MAIN  
$INCLUDE ICS.CPYLIB COM.INV.SERIAL
$INCLUDE ICS.CPYLIB COM.INV.LINK  

$INCLUDE WWINSERT RBO.H
$DEFINE INVENTORY
$INCLUDE ICS.CPYLIB INVENTORY
$DEFINE INVSERIAL
$INCLUDE ICS.CPYLIB INV_SERIAL
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE ICS.CPYLIB INV.CNV
$DEFINE CATEGORY
$INCLUDE ICS.CPYLIB CATEGORY
$DEFINE INVRECEIPTS
$INCLUDE ICS.CPYLIB INV_RECEIPTS
$DEFINE INVRECPWHSE
$INCLUDE ICS.CPYLIB INV_RECP_WHSE
$DEFINE INVWHSE
$INCLUDE ICS.CPYLIB INV.WHSE
$DEFINE INVAUDITHIST
$INCLUDE ICS.CPYLIB INV_AUDIT_HIST
$DEFINE PO
$INCLUDE PMC.CPYLIB PO
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE CPYLIB CHAR
ERRMSG=''
;**** OPEN FILES
;*
OPEN '','INVENTORY' TO INVENTORY ELSE
  ERRMSG = 'INVENTORY FILE IS MISSING'; GOTO 93000
END
OPEN '','WAREHOUSE' TO WAREHOUSE ELSE
  ERRMSG = 'WAREHOUSE FILE IS MISSING'; GOTO 93000
END
OPEN '','INVENTORY.XREF' TO INVENTORY.XREF ELSE
  ERRMSG = 'INVENTORY.XREF FILE IS MISSING'; GOTO 93000
END
OPEN '','CATEGORY' TO CATEGORY ELSE
  ERRMSG = 'CATEGORY FILE IS MISSING'; GOTO 93000
END
OPEN '','INV.STATS' TO INV.STATS ELSE
  ERRMSG = 'INV.STATS FILE IS MISSING'; GOTO 93000
END
OPEN '','INV.JOB.STATS' TO INV.JOB.STATS ELSE
  ERRMSG = 'INV.JOB.STATS FILE IS MISSING' ; GOTO 93000
END
OPEN '','INV.WHSE.LOC' TO INV.WHSE.LOC ELSE
  ERRMSG = 'INV.WHSE.LOC IS MISSING'; GOTO 93000
END
OPEN '','INV.WHSE' TO INV.WHSE ELSE
  ERRMSG = 'INV.WHSE IS MISSING'; GOTO 93000
END
OPEN '','INV.HIST' TO INV.HIST ELSE
  ERRMSG = 'INV.HIST IS MISSING'; GOTO 93000
END
OPEN '','JOB' TO JOB ELSE
  ERRMSG = 'JOB IS MISSING'; GOTO 93000
END
OPEN '','COMPANY' TO COMPANY ELSE
  ERRMSG = 'COMPANY FILE IS MISSING'; GOTO 93000
END
OPEN '','VEND' TO VEND ELSE
  ERRMSG = 'VENDOR FILE IS MISSING'; GOTO 93000
END
OPEN '','ICS.SCREENS' TO M.SCREENS ELSE
  ERRMSG = 'ICS.SCREENS FILE IS MISSING'; GOTO 93000
END
OPEN '','CONTROL' TO CONTROL ELSE
  ERRMSG = 'CONTROL FILE IS MISSING'; GOTO 93000
END
OPEN '','VENDOR.XREF' TO VENDOR.XREF ELSE
  ERRMSG = 'VENDOR.XREF FILE IS MISSING'; GOTO 93000
END
OPEN '','PREFIX' TO PREFIX ELSE
  ERRMSG = 'PREFIX FILE IS MISSING'; GOTO 93000
END
OPEN '','ACCRUED.LIAB.HIST' TO ACCRUED.LIAB.HIST ELSE
  ERRMSG = 'ACCRUED.LIAB.HIST FILE IS MISSING'; GOTO 93000
END
OPEN "SLIT.TRANS" TO SLIT.TRANS ELSE 
  ERRMSG = "SLIT.TRANS FILE IS MISSING" ; GOTO 93000
END
OPEN "DIVISION" TO DIVISION ELSE 
  ERRMSG = "DIVISION FILE IS MISSING" ; GOTO 93000
END
OPEN '','INV_RECEIPTS' TO INV_RECEIPTS ELSE
  ERRMSG = 'INV_RECEIPTS IS MISSING'; GOTO 93000
END
OPEN '','INV_RECP_WHSE' TO INV_RECP_WHSE ELSE
  ERRMSG = 'INV_RECP_WHSE IS MISSING'; GOTO 93000
END
OPEN '','INV_SERIAL' TO INV_SERIAL ELSE
  ERRMSG = 'INV_SERIAL IS MISSING'; GOTO 93000
END
OPEN '','INV_AUDIT_HIST' TO INV_AUDIT_HIST ELSE
  ERRMSG = 'INV_AUDIT_HIST IS MISSING'; GOTO 93000
END
OPEN '','INV_AUDIT_TAG' TO INV_AUDIT_TAG ELSE
  ERRMSG = 'INV_AUDIT_TAG IS MISSING';GOTO 93000
END
;*
;***** GET COMPANY NAME
;*
STATUS=RBO.getProperty('','PMCProperty',PMCProperty)
CONO=PMCProperty<1,4>
*MAT COMP.REC = ''
MATREAD COMP.REC FROM COMPANY,CONO ELSE
	MAT COMP.REC = ""
END	
IF CO.POS = 'Y' THEN
  OPEN '','PO' TO PO ELSE
    ERRMSG = 'PO FILE IS MISSING'; GOTO 93000
  END
END
IF CO.APS.R.INTRF > 1 THEN
  OPEN '','VEND.STATS' TO VEND.STATS ELSE 
    ERRMSG = "VEND.STATS FILE IS MISSING" ; GOTO 93000
  END
  OPEN '','VEND.PO.STATS' TO VEND.PO.STATS ELSE
    ERRMSG = 'VEND.PO.STATS FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','VEND.PROD.STATS' TO VEND.PROD.STATS ELSE
    ERRMSG = 'VEND.PROD.STATS FILE IS MISSING' ; GOTO 93000
  END
END
*

IF FILEINFO(INV_SERIAL,0)=0 THEN
  OPEN '','INV_SERIAL' TO INV_SERIAL ELSE
    ERRMSG<1,-1>='INV_SERIAL FILE IS MISSING'
  END
END
IF FILEINFO(WAREHOUSE,0)=0 THEN
  OPEN '','WAREHOUSE' TO WAREHOUSE ELSE
    ERRMSG<1,-1>='WAREHOUSE FILE IS MISSING'
   END
END

IF FILEINFO(INVENTORY,0)=0 THEN
  OPEN '','INVENTORY' TO INVENTORY  ELSE
    ERRMSG<1,-1>='INVENTORY FILE IS MISSING'
   END
END

  OPEN '','PO' TO PO ELSE
    ERRMSG = 'PO FILE IS MISSING'; GOTO 93000
  END

  OPEN '','INV.WHSE' TO INV.WHSE ELSE
    ERRMSG = 'INV.WHSE IS MISSING' ; GOTO 93000
  END
  OPEN '','CATEGORY' TO CATEGORY ELSE
    ERRMSG = 'CATEGORY FILE IS MISSING' ; GOTO 93000
  END

  OPEN '','INV_RECP_WHSE' TO INV_RECP_WHSE ELSE
    ERRMSG='INV_RECP_WHSE IS MISSING';GOTO 93000
  END

IF ERRMSG THEN GOTO 93000
;* get an ID AND PROD NUMBER
OPEN.FLAG=1
MAT ORG.IWH.REC=''
TEMP_IWH.ON.HAND=""            ;**** This TEMP_IWH.ON.HAND is to hold IWH.ON.HAND for temp being


STATUS=RBO.getProperty('','SLT_LOG_SERIAL',SLT_LOG_SERIAL)
STATUS=RBO.getProperty('','SLT_ENT_DATE',SLT_ENT_DATE)
STATUS=RBO.getProperty('','SLT_PERIOD',SLT_PERIOD)
STATUS=RBO.getProperty('','SLT_DIVISION',SLT_DIVISION)
TEMP_SLT_ENT_DATE =""
*******ICONV(DATE(),"D2/")
SLT.ENT.DATE=DATE()

SER.STK.QTY=""
SLT.LOG.SLIT.QTY =""
SLT.LOG.USED.AMT = ""
SLT.LOG.UN.PRICE = ""
MAT ISTK.REC = ""
	MATREAD ISTK.REC FROM INV_SERIAL, CONO:SLT_LOG_SERIAL THEN
	 MATREAD INV.REC FROM INVENTORY, CONO:ISTK.PROD THEN
         MATREAD WHSE.REC FROM WAREHOUSE, CONO:ISTK.WHSE ELSE MAT WHSE.REC = ''

        **    IF ISTK.POST.DATE='' THEN
        **      ERRMSG='Serial has not been received into inventory'
        **      GOSUB 93000
	 **     END
       
	     IF ISTK.RECP.PERIOD>SLT_PERIOD THEN 
                ERRMSG='Serial received in period ':ISTK.RECP.PERIOD:' cannot be slitted'
                ERRMSG:=' in period ':SLT_PERIOD
              GOTO 93000
            END

            IF ISTK.RSVB.QTY < ISTK.CUR.QTY  THEN
              ERRMSG='Serial has not been received into inventory'
              GOTO 93000
            END 

	STATUS = RBO.setProperty('','xy',ISTK.RSVB.QTY :" ISTK.POST.DATE ***  ":ISTK.POST.DATE:"  ISTK.RSVB.QTY*** ":ISTK.RSVB.QTY:"   ISTK.CUR.QTY*** ":ISTK.CUR.QTY:"WHS.DIV# ":WHS.DIV:"SLT.DIVISION : ":SLT_DIVISION )  
            IF ISTK.RSVB.QTY LE 1 THEN
              ERRMSG = 'SERIAL NUMBER HAS NO QUANTITY AVAILABLE TO SLIT'
 
***RETURN 
            END

 		$INCLUDE ICSBP INV.UM.CNV
                   CATG.ID=CONO:INV.LINE

                        MATREAD CATG.REC FROM CATEGORY,CATG.ID ELSE MAT CATG.REC=''
* T26556 v
                        IF CATG.TRK.LVL # 'S' THEN
                          ERRMSG = 'Only Serial tracked products are allowed.'
                        END
* T26556 ^
                        IF CATG.COST.TYPE='AC' THEN 
                          DEPL.METHOD='AC'
                        END ELSE
                          DEPL.METHOD='FI'
                        END     ;*******   
			   IWH.ID=CONO:ISTK.PROD:"!":ISTK.WHSE
                        MATREAD IWH.REC FROM INV.WHSE,IWH.ID THEN 

                         * SLT.LOG.SERIAL = SLT_LOG_SERIAL     
*                          IF DEPL.METHOD='FI' THEN
                            INAH.PROD=ISTK.PROD
                            INAH.WHSE=ISTK.WHSE

				 ACTION=1
                            TMP.CNT='' ; LAST='' ; TMP.ARR=''
                            PERIOD=SLT_PERIOD
				 OPEN.FLAG = 1
                             MAT ORG.IWH.REC = MAT IWH.REC
 *STATUS = RBO.setProperty('','testProp',IWH.ON.HAND)
                          SLT.LOG.TRIM.QTY=ISTK.CUR.QTY
                          *  LOG.INV.LINE = INV.LINE
                          LOG.PAP.WIDTH = INV.PAP.WIDTH
                          *  LOG.COLOR = INV.COLOR
*STATUS = RBO.setProperty('','xy',"PROD " : INAH.PROD : " : WHSE S": INAH.WHSE) 
*RETURN
* T27990                    CALL ICS_IWH_SUB(CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG)
                            CALL ICS_IWH_SUB (CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG,ERRMSG)
             RELEASE
			*RETURN
*                          END ELSE
                            RECP.NO=ISTK.RECP
                            INVR.ID = CONO:RECP.NO
                            MATREAD INVR.REC FROM INV_RECEIPTS,INVR.ID THEN
                              IRW.ID=CONO:ISTK.RECP:"!":ISTK.WHSE
                              MATREAD IRW.REC FROM INV_RECP_WHSE,IRW.ID ELSE
                                ERRMSG='INV_RECP_WHSE record ':IRW.ID:' is missing.'
                              END 
                            END ELSE
                              ERRMSG='INV_RECEIPTS record ':INVR.ID:' is missing.'
                            END
*                          END
                        END ELSE
                          MAT IWH.REC=''
                        END
                          ;* maybe +5 should not be added because
                          ;* if it is converted back might show
                          ;* more costing qty. than there really is.
                          SER.STK.QTY=INT(((ISTK.CUR.QTY/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
                          SER.STK.QTY=OCONV(SER.STK.QTY,ICR.CNV)
STATUS = RBO.setProperty('','testProp',"SER.STK.QTY^^^ : ":SER.STK.QTY :"ISTK.CUR.QTY== ":ISTK.CUR.QTY)
                          SLT.LOG.USED.STK.QTY=SER.STK.QTY
                          SLT.LOG.USED.QTY=ISTK.CUR.QTY
                          SLT.LOG.SLIT.STK.QTY = 0
                          SLT.LOG.SLIT.AMT = 0


    SLT.LOG.USED.AMT=((SLT.LOG.USED.QTY/1000)*(SLT.LOG.UN.PRICE/10000))
    SLT.LOG.USED.AMT=ICONV(SLT.LOG.USED.AMT,"MD2")

*_____________________________________

  DIFF.QTY=-(SLT.LOG.TRIM.QTY);PRICE='';TYPE='';ERRMSG='';RET.ARR=''
*STATUS = RBO.setProperty('','ServerMessage',"DEPL.METHOD- ":DEPL.METHOD:" RECP.NO- ":ISTK.RECP:" SLT.ENT.DATE- ":SLT.ENT.DATE:" DIFF.QTY  ":DIFF.QTY:" TYPE- ":TYPE :" SLT_PERIOD- ":SLT_PERIOD)   
*RETURN
  CALL QTY_CHANGE_SUB(CONO,SLIT.CODE,MAT IWH.REC, MAT INV.REC, MAT PO.REC,DEPL.METHOD,ISTK.RECP,SLT.ENT.DATE,SLT_PERIOD,DIFF.QTY,PRICE,TYPE,ERRMSG,RET.ARR)
  RELEASE
ERR = ''
IF ERRMSG='' THEN  
    TEMP.COST=ABS(RET.ARR<1>)
    SLT.LOG.UN.PRICE=(TEMP.COST/(ABS(DIFF.QTY)/10))
    SLT.LOG.UN.PRICE=ICONV(SLT.LOG.UN.PRICE,"MD4")

 END ELSE
   * GOSUB 93000 ; 
	ERR=1
  END

***********************
*GET.USED.SLIT.TRIM.AMT: 
***********************
  IF NOT(ERR) THEN
    *   SLT.LOG.USED.AMT=INT((SLT.LOG.USED.QTY/1000)*(SLT.LOG.UN.PRICE/10000)+.5)
    SLT.LOG.USED.AMT=((SLT.LOG.USED.QTY/1000)*(SLT.LOG.UN.PRICE/10000))
    SLT.LOG.USED.AMT=ICONV(SLT.LOG.USED.AMT,"MD2")
    TRIM.QTY = SLT.LOG.USED.QTY-SLT.LOG.SLIT.QTY
    *    SLT.LOG.TRIM.AMT=INT((TRIM.QTY/1000)*(SLT.LOG.UN.PRICE/10000)+.5)
    SLT.LOG.TRIM.AMT=((TRIM.QTY/1000)*(SLT.LOG.UN.PRICE/10000))
    SLT.LOG.TRIM.AMT=ICONV(SLT.LOG.TRIM.AMT,"MD2")
  END
*RETURN




*_____________________________________
	 END ELSE 
		MAT INV.REC=''
        END
         
       END ELSE 
		MAT ISTK.REC=''
	END
			STATUS=RBO.setProperty('','SLT_LOG_USED_STK_QTY',SLT.LOG.USED.STK.QTY)
			STATUS=RBO.setProperty('','SLT_LOG_USED_QTY',SLT.LOG.USED.QTY)
			STATUS=RBO.setProperty('','SLT_LOG_TRIM_QTY',SLT.LOG.TRIM.QTY)
			**STATUS=RBO.setProperty('','SLT_LOG_TRIM_AMT',SLT.LOG.TRIM.AMT)
			**STATUS=RBO.setProperty('','LOG_PAP_WIDTH',LOG.PAP.WIDTH) 

**------------------ BUILDING THE PARENT LINES

  IF ICR.CNV="MD0" THEN
    DQTY = OCONV(ICONV(SLT.LOG.USED.STK.QTY,"MD2"),"MD2")
  END ELSE
    DQTY = SLT.LOG.USED.STK.QTY 
  END

			***STATUS=RBO.setProperty('','xy',"xy HERE " :XY)
			STATUS=RBO.setProperty('','DQTY',DQTY)
			STATUS=RBO.setProperty('','SLT_LOG_USED_AMT',OCONV(SLT.LOG.USED.AMT,"MD2"))
			STATUS=RBO.setProperty('','SLT_LOG_SLIT_QTY',OCONV(SLT.LOG.SLIT.QTY/10,"MD2"))
			STATUS=RBO.setProperty('','SLT_LOG_SLIT_AMT',SLT.LOG.SLIT.AMT/100)
			STATUS=RBO.setProperty('','SLT_LOG_TRIM_QTY',OCONV(SLT.LOG.TRIM.QTY/10,"MD2"))
			STATUS=RBO.setProperty('','SLT_LOG_TRIM_AMT',OCONV(SLT.LOG.TRIM.AMT,"MD2"))

*************************************************************************
93000*
	IF ERRMSG # "" THEN
		STATUS = RBO.setProperty('','ServerStatus',1)        
		STATUS = RBO.setProperty('','ServerMessage',ERRMSG)  
	END
RETURN                                                       


