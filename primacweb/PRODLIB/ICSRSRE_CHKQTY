SUBROUTINE ICSRSRE_CHKQTY
********************************************************************************
*   Program name :- ICSRSRE_CHKQTY
*   Created:- 2/13/2007
*------------------------------------------------------------------------------*
*

* In Properties:
* --------------
*  
*
* Out Properties:
* ---------------
*  
********************************************************************************
$INCLUDE WWINSERT RBO.H
$INCLUDE ICS.CPYLIB DAILY_STOCK
$INCLUDE PMC.CPYLIB PO
$INCLUDE ICS.CPYLIB PO.MAN.XREF
$INCLUDE ICS.CPYLIB PO.RSKI.XREF
$INCLUDE ICS.CPYLIB INV_SERIAL 
$INCLUDE CPYLIB CHAR

OPEN '','PO' TO PO ELSE
   ERRMSG = 'PO FILE IS MISSING'
   GOTO 93000
END
OPEN '','DAILY_STOCK' TO DAILY_STOCK ELSE
   ERRMSG = 'DAILY_STOCK FILE IS MISSING'
   GOTO 93000
END
OPEN '','CONTROL' TO CONTROL ELSE
   ERRMSG = 'CONTROL FILE IS MISSING'
   GOTO 93000
END

OPEN '','INV_SERIAL' TO INV_SERIAL ELSE
   ERRMSG = 'INV_SERIAL FILE IS MISSING'
   GOTO 93000
END
OPEN '','PO.RSKI.XREF' TO PO.RSKI.XREF ELSE
   ERRMSG = 'PO.RSKI.XREF FILE IS MISSING'
   GOTO 93000
END
OPEN '','PO.MAN.XREF' TO PO.MAN.XREF ELSE
   ERRMSG = 'PO.RSMAN.XREF FILE IS MISSING'
   GOTO 93000
END

DIM HOLD.ISTK.REC(ISTK.REC.SIZE) ; MAT HOLD.ISTK.REC=""
DIM S.REC(25)
EQU S.SERIAL        TO S.REC(1);*
EQU S.PO.LINE.NO    TO S.REC(2)
EQU S.QTY           TO S.REC(3);*
EQU S.LOC           TO S.REC(4);*
EQU S.MILL.ID       TO S.REC(5);*
EQU S.QTY.ENTERED   TO S.REC(6)
EQU S.WHSE          TO S.REC(7);*
EQU S.PROD.NO       TO S.REC(9)
EQU S.INV.FULL.DESC TO S.REC(10);*
EQU S.INV.PAP.TYPE  TO S.REC(11)
EQU S.TOT.WEIGHT    TO S.REC(12)
EQU S.UNIT          TO S.REC(13) ; *UOM
EQU S.INV.UNIT      TO S.REC(14)
EQU S.INV.M.WT      TO S.REC(15)
EQU S.STK.QTY       TO S.REC(16)
EQU S.INV.PAP.WIDTH TO S.REC(17)
EQU S.POST.DATE     TO S.REC(19);*
EQU S.STATUS        TO S.REC(20)
EQU S.EDIT.DATE     TO S.REC(21)
EQU S.UN.PRICE      TO S.REC(24)
*
MAT S.REC = ''



STATUS = RBO.getProperty('','PONUM',ID)
STATUS = RBO.getProperty('','Serial',SERIAL)

CONO=ID[1,3]
PO.NO=ID[4,99]
WARNMSG=""
POLINE = ''
PROD = ''
QTY = ''
UOM = ''
WHSE = ''
LOC = ''
MILLID = ''

MATREAD RSXRF.REC FROM PO.RSKI.XREF, ID ELSE MAT RSXRF.REC = ""

MATREAD PO.REC FROM PO,ID ELSE  MAT PO.REC = ""
SERIALVAL=DCOUNT(SERIAL,@VM)
FOR SSV=1 TO SERIALVAL
MATREAD ISTK.REC FROM INV_SERIAL,CONO:SERIAL<1,SSV> THEN
  
  K = 1
  *FOR X = 1 TO DCOUNT(SERIAL,@VM)
  * FOR Y = 1 TO DCOUNT(SERIAL<1,X>,@SM)
       *IF SERIAL<1,X,Y> # ""  THEN
      POLINE<1,-1> = ISTK.PO.LINE
      PROD<1,-1> = ISTK.PROD
      UOM<1,-1> = ISTK.UOM
      WHSE<1,-1> = ISTK.WHSE
      QtyEntered<1,-1>=ISTK.QTY.ENTERED 
      REF.NO<1,-1> = SERIAL<1,SSV>   
      QTY<1,-1> = ISTK.ORG.STK.QTY 
      LOC<1,-1> = ISTK.LOC
      MILLID<1,-1> = ISTK.MILL.ID  
    K = K + 1
       *END
   *NEXT Y
  *NEXT X

END
NEXT SSV

 S.SERIAL = REF.NO
 FOR SS = 1 TO DCOUNT(PROD,@VM)
   S.PO.LINE.NO<1,SS> = POLINE<1,SS>
   S.PROD.NO<1,SS> =  PROD<1,SS>          
   S.MILL.ID<1,SS> =  MILLID<1,SS>
     ** S.QTY.ENTERED<1,SS> =  QTY<1,SS>
   S.QTY.ENTERED<1,SS> =  QtyEntered<1,SS>
   S.WHSE<1,SS> = WHSE<1,SS>
   S.LOC<1,SS> = LOC<1,SS>
   S.UNIT<1,SS> = UOM<1,SS>
   S.QTY<1,SS>=QTY<1,SS>
 NEXT SS
PROB = 0
TOT = ""; SUM = ""
*LMR v At this point S.QTY contains nothing!
LINE.CNT = DCOUNT(REF.NO,@VM)
FOR LPTR = 1 TO LINE.CNT
   IF S.POST.DATE<1,LPTR> = "" THEN
      POLINE = S.PO.LINE.NO<1,LPTR>
      TOT<1,POLINE> = TOT<1,POLINE> + S.QTY<1,LPTR>
      IF S.WHSE<1,LPTR> = PO.WHSE<1,POLINE> THEN 
         SUM<1,POLINE> = SUM<1,POLINE> + S.QTY<1,LPTR>
      END
   END
NEXT LPTR
WRITE TOT ON CONTROL,"TOT"
PLCNT = DCOUNT(PO.PROD.NUM,@VM)
FOR I = 1 TO PLCNT
   IF PO.QTY.OPEN<1,I> <> "" THEN
      NEW.OPEN<1,I> = PO.QTY.OPEN<1,I> - TOT<1,I>
   *   IF NEW.OPEN < 0 AND PO.QTY.OPEN<1,I> > 0 THEN
   *     IF INT(NEW.OPEN / PO.QTY.OPEN<1,I>) = 0 THEN
   *       NEW.OPEN = 0
   *     END
   *   END
*STATUS=RBO.setProperty('','TEMP',NEW.OPEN)
      *IF NEW.OPEN<1,I> < 0 THEN 
WRITE TOT<1,I> ON CONTROL,"TEMP"
      IF (TOT<1,I> + PO.TOT.RECEVED<1,I>) > PO.TOT.ONORD<1,I> THEN 
        NEW.OPEN<1,I> = 0
         WARNMSG<1,-1> = "Warning! Received more than ordered for P/O line #":I
      END
   END
   NEW.ALLOC = SUM(PO.JB.OPEN<1,I>) - SUM<1,I>
   IF NEW.ALLOC < 0 THEN NEW.ALLOC = 0
   IF NEW.OPEN < NEW.ALLOC THEN
      ERRMSG = "Remaining allocation exceeds P/O open for P/O line #":I
      LINE.STATUS<1,I> = ERRMSG
      ERRMSG=""
   END 
NEXT I

  
*END


STATUS = RBO.setProperty('','WarnMsg',WARNMSG)

RETURN

93000 
STATUS = RBO.setProperty('','ServerStatus',1)
STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
RETURN
