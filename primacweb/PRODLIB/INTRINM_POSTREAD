SUBROUTINE INTRINM_POSTREAD
*********************************************************************
* SYSTEM      - EPRIMAC
* PROGRAM     - INTRINM_POSTREAD
* BY          - KHAJA ZIAUDDIN
* DATE		- 08/06/2003   (mm/dd/yyyy)
* DESCRIPTION - 
* TASK
*
*ENDDOC
*********************************************************************
$INCLUDE WWINSERT RBO.H
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE ICS.CPYLIB INV_SERIAL
$INCLUDE ICS.CPYLIB INTR_DIV_TRANSFER
$INCLUDE ICS.CPYLIB INV.WHSE.LOC

OPEN '','INVENTORY' TO INVENTORY ELSE ERRMSG = 'INVENTORY FILE IS MISSING'; GOTO 93000
OPEN '','CATEGORY'  TO CATEGORY ELSE ERRMSG = 'CATEGORY FILE IS MISSING'; GOTO 93000
OPEN '','INV.WHSE' TO INV.WHSE ELSE ERRMSG = 'INV.WHSE FILE IS MISSING'; GOTO 93000
OPEN '','INV_SERIAL' TO INV_SERIAL ELSE ERRMSG = 'INV_SERIAL FILE IS MISSING'; GOTO 93000
OPEN "","COMPANY" TO COMPANY ELSE ERRMSG = "CANNOT OPEN COMPANY FILE"; GOTO 93000
OPEN '','INV.WHSE.LOC' TO INV.WHSE.LOC ELSE ERRMSG = 'CANNOT OPEN INV.WHSE.LOC FILE'; GOTO 93000
OPEN '','CONTROL' TO CONTROL ELSE ERRMSG = 'CANNOT OPEN  CONTROL FILE';GOTO 93000

MAT IDM.REC = ''
STATUS = RBO.getDBVals("IDM_PROD_NO",PRODNO)
STATUS = RBO.getDBVals("IDM_SERIAL", IDM.SERIAL)
STATUS = RBO.getDBVals("IDM_TO_DIV",IDM.TO.DIV)
STATUS = RBO.getDBVals("IDM_SERIAL_QTY", IDM.SERIAL.QTY)
STATUS = RBO.getDBVals("IDM_SERIAL_MILL", IDM.SERIAL.MILL)
STATUS = RBO.getDBVals("IDM_FROM_WHSE",IDM.FROM.WHSE)
STATUS = RBO.getDBVals("IDM_STATUS", IDM.STATUS)
STATUS = RBO.getDBVals("IDM_RECV_POST",IDM.RECV.POST)
STATUS = RBO.getDBVals("IDM_RECV_MON",IDM.RECV.MON)
STATUS = RBO.getProperty('','new_item', NEWITEM)
STATUS = RBO.getProperty('','ID',ID)
CONO  = ID[1,3]
RS.ARRAY = ''
  MATREAD COMP.REC FROM COMPANY, CONO ELSE
      ERRMSG = ERRMSG : @VM : "Invalid Company ID (":CONO:")" 
       GOTO 93000
  END
  STATUS = RBO.setProperty('','CO_INTR_WHSE',CO.INTR.WHSE) 
  INQUIRY.FLG = 0 

  *IF IDM.STATUS GT 1 THEN
  *   INQUIRY.FLG = 1
  *END 

  IF NEWITEM = 0 THEN
     PROD.ARRAY = PRODNO
     IDM.PROD.NO = PRODNO
     U.M = ''
     TRANSQTY = ''
     VALID.ROLL = 1
     K = 1
     ERRMSG = ''
     SERVSTAT = 1
     CONV = 0
     BEGIN CASE
         CASE IDM.STATUS = 1
            ERRMSG = ERRMSG : @VM : 'THE TRANSIT MUST BE TRANSFERRED OUT BEFORE RECEIVING IT'
            SERVSTAT = 3
            GOTO 91000 
         CASE IDM.STATUS = 4
            ERRMSG = ERRMSG : @VM : 'THE TRANSIT HAS BEEN COMPLETED' 
            SERVSTAT = 2
            STATUS = RBO.setProperty('','ServerStatus',SERVSTAT)
            STATUS = RBO.setProperty('','RecvMon',IDM.RECV.MON)
            STATUS = RBO.setProperty('','RecvPost',IDM.RECV.POST)
            *GOSUB 91000 ; 
            INQUIRY.FLG = 1
     END CASE

     PROD.QTY = 0
     PROD.CNT = DCOUNT(IDM.PROD.NO,@VM)
     FOR PROD.PTR = 1 TO PROD.CNT
        PROD.ID = IDM.PROD.NO<1,PROD.PTR>
        GOSUB VALIDATE.INV
        ROLL.CNT = DCOUNT(IDM.SERIAL<1,PROD.PTR>,@SVM)
        PROD.QTY = 0
        FOR ROLL.PTR = 1 TO ROLL.CNT
            SERIAL.ID = IDM.SERIAL<1,PROD.PTR,ROLL.PTR>
            IF INQUIRY.FLG = 0 AND IDM.RECV.POST<1,PROD.PTR,ROLL.PTR> = '' THEN GOSUB VALIDATE.SERIAL
            
            *MATREAD ISTK.REC FROM INV_SERIAL, CONO:IDM.SERIAL<1,PROD.PTR,ROLL.PTR> THEN
              *RS.ARRAY<1,PROD.PTR,ROLL.PTR> = OCONV(INT(((ISTK.CUR.QTY/ICR.DV1)*ICR.MT1)/ICR.DV2+.5), ICR.CNV)
              **RS.ARRAY<PROD.PTR,ROLL.PTR,4> = ISTK.MILL.ID<1,PROD.PTR,ROLL.PTR>
              *MILLID<1,PROD.PTR,ROLL.PTR> = ISTK.MILL.ID<1,PROD.PTR,ROLL.PTR>
	       *K = K + 1
            *END ELSE

            *RS.ARRAY<1,PROD.PTR,ROLL.PTR> = INT(((IDM.SERIAL.QTY<1,PROD.PTR,ROLL.PTR>/ICR.DV1)*ICR.MT1)/ICR.DV2+.5);*COMMENTED
            RS.ARRAY<PROD.PTR,ROLL.PTR,1> = INT(((IDM.SERIAL.QTY<1,PROD.PTR,ROLL.PTR>/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
            **RS.ARRAY<PROD.PTR,ROLL.PTR,4> = IDM.SERIAL.MILL<1,PROD.PTR,ROLL.PTR>
            IDM.SERIAL.QTY<1,PROD.PTR,ROLL.PTR> = OCONV(RS.ARRAY<PROD.PTR,ROLL.PTR,1>,ICR.CNV1);*ADDED

            MILLID<1,PROD.PTR,ROLL.PTR> = IDM.SERIAL.MILL<1,PROD.PTR,ROLL.PTR>
	     K = K + 1
            *END
            PROD.QTY += RS.ARRAY<1,PROD.PTR,ROLL.PTR>
	     *PROD.QTY += RS.ARRAY<1,ROLL.PTR,1>
        NEXT ROLL.PTR
 	       MATREAD INV.REC FROM INVENTORY, CONO:PROD.ARRAY<1,1> THEN
       	  $INCLUDE ICSBP INV.UM.CNV
		END ELSE
       	  ICR.CNV1 = 'MD2'
	       END
     		CONV = ICR.CNV1 	
	   TRANSQTY<1,-1> = OCONV(PROD.QTY,ICR.CNV1)	
        *TRANSQTY<1,-1> = OCONV(PROD.QTY*100, "MD2")
        *TRANSQTY<1,-1> = OCONV(PROD.QTY, "MD2");*changed
     NEXT PROD.PTR
     
*     MATREAD INV.REC FROM INVENTORY, CONO:PROD.ARRAY<1,1> THEN
*         $INCLUDE ICSBP INV.UM.CNV
*     END ELSE
*         ICR.CNV1 = 'MD2'
*     END
*     CONV = ICR.CNV1
*     FOR ROLL.PTR = 1 TO ROLL.CNT
*        PROD.QTY += RS.ARRAY<1,ROLL.PTR,1>
*     NEXT ROLL.PTR
*     TRANSQTY = OCONV(PROD.QTY,ICR.CNV1)

****
* the following code is to format the qty in required format "SerialQty"
*     FOR PROD.PTR = 1 TO PROD.CNT
*         FOR ROLL.PTR = 1 TO ROLL.CNT
*             IDM.SERIAL.QTY<1,PROD.PTR,ROLL.PTR> = OCONV(RS.ARRAY<PROD.PTR,ROLL.PTR,1>,ICR.CNV1)
*         NEXT ROLL.PTR
*     NEXT PROD.PTR
*STATU = RBO.getDBVals('SerialQty',TEST2)
*STATUS = RBO.setProperty('','SerialQty',IDM.SERIAL.QTY)
*STATUS = RBO.setDBVals('SerialQty',IDM.SERIAL.QTY)

****
  END 

  STATUS = RBO.setProperty('','ISTK_LOC',ISTK.LOC)
  STATUS = RBO.setProperty('','ISTK_WHSE',ISTK.WHSE)
  STATUS = RBO.setProperty('','ISTK_RSVB_QTY',ISTK.RSVB.QTY)
  STATUS = RBO.setProperty('','ISTK_CUR_QTY',ISTK.CUR.QTY)
  
  STATUS = RBO.setProperty('','UM', U.M)
  STATUS = RBO.setDBVals("IDM_SERIAL_QTY", RS.ARRAY)
  STATUS = RBO.setDBVals("IDM_SERIAL_MILL",MILLID)
  STATUS = RBO.setProperty('','TransQty', TRANSQTY)
  STATUS = RBO.setProperty('','SerialQty',IDM.SERIAL.QTY)
  STATUS = RBO.setProperty('','ServerMessage', ERRMSG)
  STATUS = RBO.setProperty('','CONV',CONV)
  STATUS = RBO.setProperty('','SERIAL_ARR',IDM.SERIAL.QTY)

RETURN


****************************
* SUBROUTINES
****************************

*************
VALIDATE.INV: 
*************
*MAT INV.CNV.REC = ''
   MATREAD INV.REC FROM INVENTORY, CONO:PROD.ID THEN
      MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE THEN
	$INCLUDE ICSBP INV.UM.CNV
         BEGIN CASE           
            CASE CATG.TYPE="L" 
               U.M="LBS"        
            CASE CATG.TYPE="S" 
               U.M="SHT"        
            CASE CATG.TYPE="RL"
               U.M="PC"        
            CASE CATG.TYPE="PC"
               U.M="FT "
            CASE 1 
               IF INQUIRY.FLG = 0 THEN
                  ERRMSG='PRODUCT ':PROD.ID:' IS NOT A PAPER PRODUCT LINE' 
                  *GOSUB 91000 ; 
                  VALID.PRODUCT = 0
               END
         END CASE 
         *BASWGT = INT(INV.BAS.WT/100)
         *BEGIN CASE
         *   CASE MOD(INV.PAP.WIDTH,10000) = 0
         *      IWIDTH = OCONV(INT(INV.PAP.WIDTH/10000),"MD0")
         *   CASE MOD(INV.PAP.WIDTH,1000) = 0
         *      IWIDTH = OCONV(INT(INV.PAP.WIDTH/1000),"MD1")
         *   CASE MOD(INV.PAP.WIDTH,100) = 0
         *      IWIDTH = OCONV(INT(INV.PAP.WIDTH/100),"MD2")
         *   CASE MOD(INV.PAP.WIDTH,10) = 0
         *      IWIDTH = OCONV(INT(INV.PAP.WIDTH/10),"MD3")
         *   CASE 1
         *      IWIDTH = OCONV(INV.PAP.WIDTH,"MD4")
         *END CASE
          MATREAD IWH.REC FROM INV.WHSE, CONO:PROD.ID:'!':CO.INTR.WHSE THEN
            *IF INQUIRY.FLG = 0 THEN
               IF IWH.ON.HAND-IWH.RESV LE 1 THEN
                  ERRMSG = ERRMSG : @VM : 'PRODUCT ':PROD.ID:' HAS NO QUANTITY AVAILABLE TO TRANSFER' 
                  *GOSUB 91000 ; 
                  VALID.PRODUCT = 0 ; RETURN
               END
               IF CATG.TRK.LVL # 'S' THEN
                  ERRMSG = ERRMSG : @VM : 'PRODUCT ':PROD.ID:' IS NOT SERIAL TRACKED' 
                  *GOSUB 91000 ; 
                  VALID.PRODUCT = 0 ; RETURN
               END
               LOCATE IDM.FROM.WHSE IN INV.WHSE.CODE<1>,1 SETTING ZPOS ELSE
                  ERRMSG = ERRMSG : @VM : 'WAREHOUSE #':IDM.FROM.WHSE:' IS NOT SETUP FOR PRODUCT ':PROD.ID 
                  *GOSUB 91000 ; 
                  VALID.PRODUCT = 0 ; RETURN
               END
            *END
         END ELSE
            *IF INQUIRY.FLG = 0 THEN
               ERRMSG = ERRMSG : @VM : 'INV.WHSE #':CONO:PROD.ID:'!':IDM.FROM.WHSE:'IS NOT ON FILE' 
               *GOSUB 91000 ; 
               VALID.PRODUCT = 0
            *END
         END
      END ELSE
         ERRMSG = ERRMSG : @VM : 'INVALID PRODUCT LINE ASSOCIATED TO THE PRODUCT ':PROD.ID 
         *GOSUB 91000 ; 
         VALID.PRODUCT = 0
      END
   END ELSE
      ERRMSG = ERRMSG : @VM : 'INVALID PRODUCT ':PROD.ID 
      *GOSUB 91000 ; 
      VALID.PRODUCT = 0 ; MAT INV.REC = ''
   END
  *
RETURN

VALIDATE.SERIAL: 
*
     LOCATE SERIAL.ID IN IDM.SERIAL.QTY<PROD.PTR>,1 SETTING P THEN
         IF P <> ROLL.PTR THEN
             ERRMSG = ERRMSG : @VM : 'DUPLICATE SERIAL #':SERIAL.ID 
             VALID.ROLL = 0 ; RETURN
         END
     END
     MATREAD ISTK.REC FROM INV_SERIAL, CONO:SERIAL.ID THEN
         IF ISTK.POST.DATE = "" THEN
             ERRMSG = ERRMSG : @VM : 'SERIAL NUMBER (':SERIAL.ID:') HAS NOT BEEN RECIEVED INTO INVENTORY.' 
             VALID.ROLL = 0 ; RETURN
         END
     END ELSE
         ERRMSG = ERRMSG : @VM : 'SERIAL NUMBER (':SERIAL.ID:') DOES NOT EXIST.' 
         VALID.ROLL = 0
     END

    IF VALID.ROLL = 0 THEN RETURN
     IF ISTK.PROD # PROD.ARRAY<1,PROD.PTR> THEN
           ERRMSG = ERRMSG : @VM : 'THE SERIAL NUMBER (':SERIAL.ID:') IS NOT TIED TO PRODUCT ':PROD.ARRAY<1,PROD.PTR> 
           VALID.ROLL = 0 ; RETURN
     END
     IF ISTK.LOC # IDM.TO.DIV THEN
           ERRMSG = ERRMSG : @VM : 'SERIAL NUMBER (':SERIAL.ID:') DOES NOT BELONG TO INTR-DIVISIONAL LOCATION (':IDM.TO.DIV:')' 
           VALID.ROLL = 0 ; RETURN
     END
     IF ISTK.WHSE # CO.INTR.WHSE THEN
           ERRMSG = ERRMSG : @VM : 'SERIAL NUMBER (':SERIAL.ID:') DOES NOT BELONG TO INTR-DIVISIONAL WHSE (':CO.INTR.WHSE:')' 
           VALID.ROLL = 0 ; RETURN
     END
     IF ISTK.RSVB.QTY LE 1 THEN
           ERRMSG = ERRMSG : @VM : 'SERIAL NUMBER (':SERIAL.ID:') HAS NO QUANTITY AVAILABLE TO TRANSFER' 
           VALID.ROLL = 0 ; RETURN
     END
     IF ISTK.RSVB.QTY # ISTK.CUR.QTY THEN
           ERRMSG = ERRMSG : @VM : 'SERIAL NUMBER (':SERIAL.ID:') HAS QUANTITY RESERVED AND CAN NOT BE TRANSFERRED' 
           VALID.ROLL = 0 ; RETURN
     END
     IF IDM.SERIAL.QTY<1,PROD.PTR,ROLL.PTR> # ISTK.CUR.QTY THEN
           ERRMSG = ERRMSG : @VM : 'SERIAL NUMBER (':SERIAL.ID:') HAS QUANTITY RESERVED AND CAN NOT BE TRANSFERRED' 
           VALID.ROLL = 0 ; RETURN
     END
     IWLO.ID = CONO:PROD.ARRAY<1,PROD.PTR>:'!':ISTK.WHSE:'!':ISTK.LOC
     MATREAD IWLO.REC FROM INV.WHSE.LOC, IWLO.ID THEN
           LOCATE SERIAL.ID IN IWLO.SERIAL<1>,1 SETTING ROS ELSE
              ERRMSG = ERRMSG : @VM : 'SERIAL NUMBER (':SERIAL.ID:') DOES NOT EXIST FOR WHSE #':ISTK.WHSE:' AND LOCATION #':ISTK.LOC 
              VALID.ROLL = 0 ; RETURN
           END
     END ELSE
           ERRMSG = ERRMSG : @VM : 'SERIAL NUMBER (':SERIAL.ID:' DOES NOT EXIST FOR WHSE #':ISTK.WHSE:' AND LOCATION #':ISTK.LOC 
           VALID.ROLL = 0 ; RETURN
     END
*
RETURN

*****
91000
*****

*****
93000
*****
  STATUS = RBO.setProperty('','CONV',CONV)
  STATUS = RBO.setProperty('','ServerStatus',SERVSTAT)
  STATUS = RBO.setProperty('','ServerMessage', ERRMSG)
RETURN




