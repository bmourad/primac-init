SUBROUTINE ICSRSRE_READ
*********************************************************************
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - EPRIMAC
* PROGRAM     - ICSRSRE_READ
* BY          - KHAJA ZIAUDDIN
* DATE        - 06/21/2003  (mm/dd/yyyy)
* DESCRIPTION   
* T27904 - Kauser - 3rd March 2005 - Rev12 Changes implemented		   
*ENDDOC
*************************************************************

$INCLUDE WWINSERT RBO.H
$INCLUDE PMC.CPYLIB PO
$INCLUDE ICS.CPYLIB PO.MAN.XREF
$INCLUDE ICS.CPYLIB PO.RSKI.XREF 
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV_SERIAL
$INCLUDE ICS.CPYLIB DAILY_STOCK
$INCLUDE ICS.CPYLIB INV.CNV
*$INCLUDE ICS.CPYLIB INV_SERIAL_DELETED
ROND = ''
STATS = 0
DEFFUN CALC_STK_QTY(COST.QTY,MAT INV.CNV.REC,ROND,LN)
DEFFUN CALC_COST_QTY(STK.QTY,MAT INV.CNV.REC,ROND,LN)

OPEN '','PO' TO PO ELSE
   STATS = 1
   ERRMSG = 'PO FILE IS MISSING'
   GOTO 93000
END

OPEN "","INV_SERIAL_DELETED" TO INV_SERIAL_DELETED ELSE
   STATS = 1
   ERRMSG = "CANNOT OPEN INV_SERIAL_DELETED FILE";GOTO 93000
END

OPEN '','PO.RSKI.XREF' TO PO.RSKI.XREF ELSE
   STATS = 1
   ERRMSG = 'PO.RSKI.XREF FILE IS MISSING'
   GOTO 93000
END
OPEN '','PO.MAN.XREF' TO PO.MAN.XREF ELSE
   STATS = 1
   ERRMSG = 'PO.RSMAN.XREF FILE IS MISSING'
   GOTO 93000
END
OPEN '','INVENTORY' TO INVENTORY ELSE
   STATS = 1
   ERRMSG = 'INVENTORY FILE IS MISSING'
   GOTO 93000
END
OPEN '','CATEGORY' TO CATEGORY ELSE
   STATS = 1
   ERRMSG = 'CATEGROY FILE IS MISSING'
   GOTO 93000
END
OPEN '','INV_SERIAL' TO INV_SERIAL ELSE
   STATS = 1
   ERRMSG = 'INV_SERIAL FILE IS MISSING'
   GOTO 93000
END
OPEN '','DAILY_STOCK' TO DAILY_STOCK ELSE
   STATS = 1
   ERRMSG = 'DAILY_STOCK FILE IS MISSING'
   GOTO 93000
END
OPEN '','INVENTORY' TO INVENTORY ELSE
   STATS = 1
   ERRMSG = 'INVENTORY FILE IS MISSING'
   GOTO 93000
END
OPEN "","CONTROL" TO CONTROL ELSE
   ERRMSG = "CANNOT OPEN CONTROL FILE";GOTO 93000 
END

STATUS = RBO.getProperty('','ID',ID)
STATUS = RBO.getProperty('','USER_ID',USER_ID)
STATUS = RBO.getProperty('','new_item',NEWITEM)
STATUS = RBO.getProperty('','OLD_DSR_ID',OLD_DSR_ID)
POS= 0
PO.CODE = ''
CONO = ''
MANIFEST = ''
S.SERIAL = ''
S.UNIT = ''
S.QTY.ENTERED = ''
S.INV.PAP.TYPE= ''
S.STK.QTY=''
S.UN.PRICE=''
IF OLD_DSR_ID # '' THEN
    NEW_DSR_ID = ID
    ID = OLD_DSR_ID
*STATUS = RBO.setProperty('','Complete',"old : " : OLD_DSR_ID : " ID : " : ID : " NEW : " : NEW_DSR_ID)
END

POS = INDEX(ID,"!",1)
PO.CODE = ID[1,POS-1]
CONO = ID[1,3]
MANIFEST = ID[POS+1,99]
SS = 1
UNPRICELIST=''
QTYOPENLIST = ''
ROLLSKIDLIST = ''
CATGLIST = ''
RSKIRSNOLIST = ''
PRODNUMLIST = ''
PO.LINE.PTR = ''
PO.LINE.CNT = ''
DSR.UOM = ''
S.INV.SBR = '' ;*T28300
RQX=''; OQX='' ;*T28300
MANRSNOLIST = ''
S.INV.M.WT = ''
S.INV.PAP.WIDTH = ''
S.INV.UNIT = ''
S.EDIT.DATE=''
TEXT = ''

MAT INV.REC = ''
MAT RSMAN.REC = ''
MAT DSR.REC = ''
*MAT ISTK.REC = ''
MAT RSXRF.REC = ''

MATREAD RSMAN.REC FROM PO.MAN.XREF,ID THEN
	STATUS = RBO.setProperty('','newitem',0)
	STATUS = RBO.setProperty('','ReceiptsDate',OCONV(RSMAN.ENTRY.DATE,"D2/"))	
	S.SERIAL = RSMAN.RS.NO
	MATREAD DSR.REC FROM DAILY_STOCK, ID THEN
	*	STATUS = RBO.setProperty('','newitem',0)
		STATUS = RBO.setProperty('','Period',DSR.PERIOD)
	*	STATUS = RBO.setProperty('','ReceiptsDate',OCONV(DSR.DATE,"D2/"))
		STATUS = RBO.setProperty('','ShipmentTot',OCONV(DSR.SHPMNT.TOT,"MD2"))
	END
	NEWITEM = 0
END ELSE
	STATUS = RBO.setProperty('','newitem',1)
	NEWITEM = 1
END

*T27904 v
*         IF OLD_DSR_ID # '' THEN DELETE DAILY_STOCK, OLD.DSR.ID
*T27904 ^
NEWREC = ''
OLDREC = ''
PO_UNIT =''
PO_WHSE=''
ManualEntry = 0
$INCLUDE ICSBP INV.UM.CNV
MATREAD PO.REC FROM PO,PO.CODE THEN
  PO_UNIT=PO.UNIT.FLG
*PO_UNIT=PO.JB.UNITS
   PO_WHSE=PO.WHSE
   STATUS = RBO.setProperty('','PO_UNIT',PO_UNIT)
   STATUS = RBO.setProperty('','POWHSE',PO_WHSE)
   *** Check whether PO in the PO table has got Roll/ Skid products, else the PO cannot be used to receive Serial Stocks 
   MATREADU RSXRF.REC FROM PO.RSKI.XREF, PO.CODE THEN
      RSKIRSNOLIST<1,-1> = RSXRF.RS.NO
      STATUS = RBO.setProperty('','RSKIRSNO',RSKIRSNOLIST)
   END ELSE
     MATREAD RSMAN.REC FROM PO.MAN.XREF,ID ELSE MAT RSMAN.REC = ''
     OLDREC<1,-1> = RSMAN.RS.NO

     MAT RSXRF.REC = ""
     IF PO.CODE = "*BAD*" THEN
       STATS = 1
       ERRMSG ="No errors present!"
     END ELSE
         * ERRMSG ="Invalid P/O for this function"
       PO.LINE.CNT = DCOUNT(PO.PROD.NUM,@VM)
*STATUS = RBO.setProperty('','TEST',PO.PROD.NUM : " *11* " : PO.LINE.CNT)
       BCFLAG=0
       FOR PO.LINE.PTR=1 TO PO.LINE.CNT WHILE BCFLAG=0
         MATREAD INV.REC FROM INVENTORY, CONO:PO.PROD.NUM<1,PO.LINE.PTR> ELSE MAT INV.REC = ""
         MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE ELSE MAT CATG.REC=''
            IF CATG.TRK.LVL='S' THEN
               BCFLAG=1
            END ELSE
		 STATS = 1
*	This code is commented in BP file
*******
*		 ERRMSG = 'PO line item is not a serial track item.' 
*******
*ManualEntry = 1
		 *STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
 	     END
       NEXT PO.LINE.PTR
       IF BCFLAG=0 THEN
	  STATS = 1
*	This code is commented in BP file
*******
*         ERRMSG = "Invalid P/O for this function"
*******
**ManualEntry = 1
         GOTO 93000
       END
     END
   END
       PO.LINE.CNT = DCOUNT(PO.PROD.NUM,@VM)

       FOR PO.LINE.PTR=1 TO PO.LINE.CNT 
         MATREAD INV.REC FROM INVENTORY, CONO:PO.PROD.NUM<1,PO.LINE.PTR> ELSE MAT INV.REC = ""
         MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE ELSE MAT CATG.REC=''
         UNPRICELIST<1,-1>=PO.GROS.PRICE<1,PO.LINE.PTR>
         PRODNUMLIST<1,-1> = PO.PROD.NUM<1,PO.LINE.PTR>
         QTYOPENLIST<1,-1> = OCONV(PO.QTY.OPEN<1,PO.LINE.PTR>,ICR.CNV<1,SS>)
         ROLLSKIDLIST<1,-1> = PO.NO.OF.ROLLS<1,PO.LINE.PTR>
         IF CATG.TRK.LVL = "" THEN CATG.TRK.LVL = " "
          CATGLIST<1,-1> = CATG.TRK.LVL 	
	   STATUS = RBO.setProperty('','ProdNum',PRODNUMLIST)
	   STATUS = RBO.setProperty('','Catg',CATGLIST)
	   STATUS = RBO.setProperty('','QtyOpen',QTYOPENLIST)
          STATUS=RBO.setProperty('','UnPrice',UNPRICELIST)
	   STATUS = RBO.setProperty('','RollSkid',ROLLSKIDLIST)
	   ** Set the Owning Division and Vendor No for the PO
	   STATUS = RBO.setProperty('','OwnDiv',PO.DIV.OWNER)
	   STATUS = RBO.setProperty('','VendNo',PO.VEND.NO)

       NEXT PO.LINE.PTR
	ERRMSG = ''
	CALL SI.CK.DIV.SEC.SUB(CONO,PO.DIV.OWNER,USER_ID,ERRMSG)
  IF ERRMSG # '' THEN
    GOTO 93000
  END
END ELSE 
   MAT PO.REC = ''
   STATS = 1

*******
*   ERRMSG = "P/O Record cannot be found"
*******

ManualEntry = 1
  * GOTO 93000
END

PROD = ''
PRODDESC = ''
POLINE = ''
SERIAL = ''
QTY = ''
UOM = ''
WHSE = ''
LOC = ''
MILLID = ''
POSTDATE = ''

PRODLIST = ''
PRODDESC = ''
POLINELIST = ''
SERIALLIST = ''
PRODDESCLIST = ''
QTYLIST = ''
UOMLIST = ''
WHSELIST = ''
LOCLIST = ''
MILLIDLIST = ''
POSTDATELIST = ''
MYQTY=''
COMPLETE=''
IF NEWITEM = 0 THEN

  DSR.ID = PO.CODE:"!":MANIFEST
 
   MATREADU DSR.REC FROM DAILY_STOCK,DSR.ID THEN
      LINE.CNT = 0
      S.CNT = DCOUNT(S.SERIAL,@VM) 
     LINE.CNT = S.CNT 
    FOR SS=1 TO S.CNT
      MATREAD ISTK.REC FROM INV_SERIAL,CONO:S.SERIAL<1,SS> ELSE  
	*uncommenting from here          
        MATREAD ISTK.REC FROM INV_SERIAL_DELETED,CONO:DSR.SERIAL<1,SS> ELSE  
          MAT ISTK.REC = ""      
	   STATS = 1                                            
          ERRMSG = "Serial information record cannot be found":DSR.SERIAL<1,SS>
          GOTO 93000                                                         
        END                                                                  
	*till here
      END
*ADDED
	 POLINE<1,SS> = ISTK.PO.LINE
	 S.UNIT<1,SS> = PO.JB.UNITS<1,POLINE<1,SS>> ;*T28300  
STATUS = RBO.setProperty('','POUOM',S.UNIT)

*ENDED
*      FIND S.SERIAL<1,SS> IN DSR.SERIAL SETTING FLD,VL,SVL THEN

*         PROD<1,SS> = ISTK.PROD ;*DSR.PROD<1,VL,SVL>
*        WHSE<1,SS> = ISTK.WHSE; *DSR.WHSE<1,VL,SVL>
*	  PRODDESC<1,SS> = INV.FULL.DESC : "  , ":INV.PAP.TYPE
*	  SERIAL<1,SS> = S.SERIAL<1,SS>
  *      S.UN.PRICE<1,SS> = DSR.UN.PRICE<1,VL>
*         S.UNIT<1,SS> = DSR.UOM<1,VL>
	 * UOM<1,SS> = ISTK.UOM ;*DSR.UOM<1,VL,SVL>
*          UOM<1,SS> = DSR.UOM<1,VL,SVL>
	*************************************DONT USE THIS QTY***********  
*  	 TMPQTY =''
*	 TMPQTY =CALC_STK_QTY(DSR.QTY<1,VL,SVL>,MAT INV.CNV.REC,ROND,'')
 *  	 QTY<1,SS>=OCONV(TMPQTY,ICR.CNV)
	************************************************
*	  POLINE<1,SS> = ISTK.PO.LINE
*        LOC<1,SS> = DSR.LOC<1,VL,SVL>
*         MILLID<1,SS> = DSR.MILL.ID<1,VL,SVL>
*        POSTDATE<1,SS> =  OCONV(ISTK.POST.DATE,"D2/")
*         S.QTY.ENTERED<1,SS> = ISTK.QTY.ENTERED
*T27904 v
*	    IF S.QTY.ENTERED<1,SS> = "" THEN
*              S.QTY.ENTERED<1,SS> = DSR.QTY.ENTERED<1,VL,SVL>
*            END
*T27904 ^
*       S.INV.PAP.TYPE<1,SS> = INV.PAP.TYPE     
*        S.INV.M.WT<1,SS> = INV.M.WT             
*       S.INV.PAP.WIDTH<1,SS> = INV.PAP.WIDTH 
*        S.UNIT<1,SS> = PO.JB.UNITS<1,POLINE<1,SS>> ;*T28300  
*	WRITE S.UNIT:@AM:ISTK.PO.LINE ON CONTROL,'01YY'

*        FOR I = 1 TO 4                          
*           S.INV.UNIT<1,SS,I> = INV.UNIT<1,I>    
*            S.INV.UNIT<1,SS,-1>=INV.UNIT<1,I>
*        NEXT I                                  
*	 S.INV.SBR<1,SS> = INV.SBR ;*T28300
*        GOSUB GET.CONV  
*	 GOSUB 45000                        
*      END
 	   FIND S.SERIAL<1,SS> IN DSR.SERIAL SETTING FLD,VL,SVL THEN
            S.EDIT.DATE<1,SS> = DSR.EDIT.DATE
            PROD<1,SS> = DSR.PROD<1,VL>
            WHSE<1,SS> = DSR.WHSE<1,VL>
            S.UN.PRICE<1,SS> = DSR.UN.PRICE<1,VL>
            UOM<1,SS> = DSR.UOM<1,VL,SVL>
	     S.STATUS=DSR.STATUS
            QTY<1,SS> = DSR.QTY<1,VL,SVL>
            S.STK.QTY<1,SS> =DSR.STK.QTY<1,VL,SVL>
            LOC<1,SS> = DSR.LOC<1,VL,SVL>
            MILLID<1,SS> = DSR.MILL.ID<1,VL,SVL>
            POSTDATE<1,SS> =  OCONV(ISTK.POST.DATE,"D2/")
            COMPLETE<1,SS>=DSR.COMPLETE<1,VL>
            PRODDESC<1,SS> = INV.FULL.DESC
            S.QTY.ENTERED<1,SS> = ISTK.QTY.ENTERED
*T27904 v
            IF S.QTY.ENTERED<1,SS> = "" THEN
               S.QTY.ENTERED<1,SS> = DSR.QTY.ENTERED<1,VL,SVL>
            END
*T27904 ^
            S.INV.PAP.TYPE<1,SS> = INV.PAP.TYPE     
            S.INV.M.WT<1,SS> = INV.M.WT             
            S.INV.PAP.WIDTH<1,SS> = INV.PAP.WIDTH   
	     FOR I = 1 TO 4                          
               S.INV.UNIT<1,SS,-1>=INV.UNIT<1,I>
            NEXT I
            S.INV.SBR<1,SS> = INV.SBR ;*T28300
	     GOSUB 45000
            GOSUB GET.CONV                          
         END
    NEXT SS
  END ELSE
      MAT DSR.REC=""
      S.CNT=DCOUNT(S.SERIAL<1>,@VM)
      LINE.CNT = S.CNT
      FOR SS=1 TO S.CNT
         MATREAD ISTK.REC FROM INV_SERIAL,CONO:S.SERIAL<1,SS> ELSE            
            MATREAD ISTK.REC FROM INV_SERIAL_DELETED,CONO:S.SERIAL<1,SS> ELSE
               MAT ISTK.REC = ""                                                  
               ERRMSG = "Serial information record cannot be found":S.SERIAL<1,SS>
               GOTO 93000                                                         
            END                                                                  
         END
         INV.ID=CONO:ISTK.PROD
         IWH.ID=INV.ID:"!":ISTK.WHSE
        * GOSUB CHECK.DATA
         GOSUB SET.S.REC
         GOSUB GET.CONV
      NEXT SS
  END
*******************************************
* added by Kauser for REV12 changes
   IF PO.DATE = '' AND DSR.TYPE = 'J' AND OLD_DSR_ID = '' THEN
	STATUS = RBO.setProperty('','OLD_DSR_ID',ID)
	STATS = 2
	ERRMSG = "JANUS"
	GOTO 93000
   END

   IF OLD_DSR_ID # '' THEN
	GOSUB JANUS.PO.CHANGE
   END 	
*******************************************
STATUS = RBO.setProperty('','MTEST',S.QTY.ENTERED)
STATUS = RBO.setProperty('','CALCQTY',MYQTY)

*PROD = CHANGE(PROD,@SM,@VM)
*PRODDESC = CHANGE(PRODDESC,@SM,@VM)
*POLINE = CHANGE(POLINE,@SM,@VM)
*SERIAL = CHANGE(SERIAL,@SM,@VM)
*QTY = CHANGE(QTY,@SM,@VM)
*UOM = CHANGE(UOM,@SM,@VM)
*WHSE = CHANGE(WHSE,@SM,@VM)
*LOC = CHANGE(LOC,@SM,@VM)
*MILLID = CHANGE(MILLID,@SM,@VM)
*POSTDATE = CHANGE(POSTDATE,@SM,@VM)


	STATUS = RBO.setProperty('','Prod',PROD)
	STATUS = RBO.setProperty('','ProdDesc',PRODDESC)
	STATUS = RBO.setProperty('','PoLine',POLINE)
	STATUS = RBO.setProperty('','Serial',SERIAL)
	STATUS = RBO.setProperty('','Qty',QTY)
	STATUS = RBO.setProperty('','UOM',UOM)
	STATUS = RBO.setProperty('','Whse',WHSE)
	STATUS = RBO.setProperty('','Loc',LOC)
	STATUS = RBO.setProperty('','MillId',MILLID)
	STATUS = RBO.setProperty('','PostDate',POSTDATE)
       STATUS=RBO.setProperty('','Complete',COMPLETE)
	STATUS = RBO.setProperty('','TEST',S.SERIAL)
  *END

END 
*NEWITEM = 0  ENDED
*STATUS = RBO.setProperty('','ServerStatus',RSKIRSNOLIST : " ^^^ " : DCOUNT(RSKIRSNOLIST,@VM))
FOR X = 1 TO DCOUNT(RSKIRSNOLIST,@VM)

*FOR X=1 TO DCOUNT(DSR.SERIAL,@VM)

	MATREAD ISTK.REC FROM INV_SERIAL, CONO:RSKIRSNOLIST<1,X> THEN
     *MATREAD ISTK.REC FROM INV_SERIAL,CONO:DSR.SERIAL<1,X> THEN

          MATREAD INV.REC FROM INVENTORY, CONO:ISTK.PROD ELSE MAT INV.REC=''
	   MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE MAT CATG.REC = ''
	   MATREAD RSMAN.REC FROM PO.MAN.XREF,ID ELSE MAT RSMAN.REC = ''

*	   IF CATG.TRK.LVL = 'S' THEN
	   	TEXT<1,-1> = ISTK.PROD

	*	PRODDESCLIST<1,-1> = INV.FULL.DESC : "  , ":INV.LINE
*  STATUS = RBO.setProperty('','ServerStatus',PRODDESC)
LOCATE ISTK.PO.LINE IN DSR.PO.LINE	<1>,1 SETTING POS ELSE POS=0

*	      LOCATE ISTK.PROD IN DSR.PROD<1>,1 SETTING POS ELSE POS = 0 
*	      IF "X" : TRIM(MANIFEST) = "X" : TRIM(ISTK.MANIFEST.NO) THEN
*		 STATUS = RBO.setProperty('','ServerStatus','IFFF')   	
		   PRODLIST<1,-1> = ISTK.PROD

		   PRODDESCLIST<1,-1> = INV.FULL.DESC:"":",":INV.PAP.TYPE
		   POLINELIST<1,-1> = ISTK.PO.LINE
		   SERIALLIST<1,-1> = RSKIRSNOLIST<1,X>
*SERIALLIST<1,-1> = DSR.SERIAL<1,X>


		   LOCATE RSKIRSNOLIST<1,X> IN DSR.SERIAL<1,POS>,1 SETTING POS2 ELSE NULL
		   IF ISTK.QTY.ENTERED = "" THEN ISTK.QTY.ENTERED = DSR.QTY<1,POS,POS2>
		   QTYLIST<1,-1> = ISTK.QTY.ENTERED
		   IF ISTK.UOM = "" THEN
		 	ISTK.UOM = DSR.UOM<1,POS>
		   END
		   UOMLIST<1,-1> = ISTK.UOM
		   IF ISTK.WHSE = "" THEN 
			ISTK.WHSE = DSR.WHSE<1,POS>
		   END
		   WHSELIST<1,-1> = ISTK.WHSE
		   IF ISTK.LOC = "" THEN
			ISTK.LOC = DSR.LOC<1,POS,POS2>
		   END
		   LOCLIST<1,-1> = ISTK.LOC
		   IF ISTK.MILL.ID = "" THEN
		      ISTK.MILL.ID = DSR.MILL.ID<1,POS,POS2>
		   END
		   MILLIDLIST<1,-1> = ISTK.MILL.ID
		   POSTDATELIST<1,-1> = OCONV(DSR.POST.DATE,"D2/")
*		END 
	END
   NEXT X
SWAP '"' WITH "" IN PRODDESCLIST
SWAP "'" WITH "" IN PRODDESCLIST

		STATUS = RBO.setProperty('','ProdList',PRODLIST)
		STATUS = RBO.setProperty('','ProdDescList',PRODDESCLIST)
		STATUS = RBO.setProperty('','PoLineList',POLINELIST)
		STATUS = RBO.setProperty('','SerialList',SERIALLIST)
		STATUS = RBO.setProperty('','QtyList',QTYLIST)
		STATUS = RBO.setProperty('','UmList',UOMLIST)
		STATUS = RBO.setProperty('','WhseList',WHSELIST)
		STATUS = RBO.setProperty('','LocList',LOCLIST)
		STATUS = RBO.setProperty('','MillIdList',MILLIDLIST)
		STATUS = RBO.setProperty('','PostDateList',POSTDATELIST)

*		STATUS = RBO.setProperty('','Prod',PRODLIST)
*		STATUS = RBO.setProperty('','ProdDesc',PRODDESCLIST)
*		STATUS = RBO.setProperty('','PoLine',POLINELIST)
*		STATUS = RBO.setProperty('','Serial',SERIALLIST)
*		STATUS = RBO.setProperty('','Qty',QTYLIST)
*		STATUS = RBO.setProperty('','UOM',UOMLIST)
*		STATUS = RBO.setProperty('','Whse',WHSELIST)
*		STATUS = RBO.setProperty('','Loc',LOCLIST)
*		STATUS = RBO.setProperty('','MillId',MILLIDLIST)
*		STATUS = RBO.setProperty('','PostDate',POSTDATELIST)


IDLIST = ''
DATA = ''
CMD = "SSELECT PO.MAN.XREF WITH PO_NO = ": PO.CODE[4,99]
UDTEXECUTE CMD
DATA = 1
LOOP
   READNEXT CODE ELSE DATA = 0
WHILE DATA DO
   IDLIST<1,-1> = CODE
REPEAT
 
FOR X = 1 TO DCOUNT(IDLIST,@VM)
   MATREAD RSMAN.REC FROM PO.MAN.XREF, IDLIST<1,X> THEN
      MANRSNOLIST<1,-1> = RSMAN.RS.NO
   END
NEXT
STATUS = RBO.setProperty('','MANRSNO',MANRSNOLIST)

MATREAD RSMAN.REC FROM PO.MAN.XREF, ID THEN
	STATUS = RBO.setProperty('','ManifestTotal',OCONV(RSMAN.MAN.TOT.WGT,"MD2"))
END

RETURN

**********
SET.S.REC: 
**********
*
   S.PO.LINE.NO<1,SS> = ISTK.PO.LINE      
   PROD<1,SS> = ISTK.PROD            
   MILLID<1,SS> = ISTK.MILL.ID    
   QTY<1,SS> = ISTK.ORG.QTY            
   MYQTY<1,SS> = ISTK.QTY.ENTERED 
   S.STK.QTY<1,SS> = ISTK.ORG.STK.QTY    
   WHSE<1,SS> = ISTK.WHSE               
   LOC<1,SS> = ISTK.LOC                 
   POSTDATE<1,SS> = OCONV(ISTK.POST.DATE,"D2/")
   S.EDIT.DATE<1,SS> = ISTK.EDIT.DATE     
   S.UN.PRICE<1,SS> = ISTK.UNIT.COST
   PRODDESC<1,SS> = INV.FULL.DESC
   S.INV.PAP.TYPE<1,SS> = INV.PAP.TYPE
   S.INV.M.WT<1,SS> = INV.M.WT
   S.INV.PAP.WIDTH<1,SS> = INV.PAP.WIDTH
*  S.UNIT<1,SS> = ISTK.UOM
   UOM<1,SS> = PO.JB.UNITS<1,S.PO.LINE.NO<1,SS>> ;*T28300
   WRITE S.UNIT ON CONTROL,'01YYY'
   FOR I = 1 TO 4
      S.INV.UNIT<1,SS,I> = INV.UNIT<1,I>
   NEXT I
   S.INV.SBR<1,SS> = INV.SBR ;*T28300
   RETURN
******************************************************************
GET.CONV: 
***********
*
*IF NOT(INV.PRESENT) THEN
*  MYQTY = S.QTY.ENTERED<1,SS>
*  RETURN
*END
*BEGIN CASE
*  CASE S.INV.UNIT<1,SS,2> = "SHT" AND S.INV.UNIT<1,SS,3> = "LBS"
*    ICR.CNV<SS,1> = "MD0"; ICR.DV2<SS,1> = 1
*    ICR.DV1<SS,1> = S.INV.M.WT<1,SS>; ICR.MT1<SS,1> = 1
*  CASE S.INV.UNIT<1,SS,2> = "PC" AND S.INV.UNIT<1,SS,3> = "MSI"
*    ICR.CNV<SS,1> = "MD0"; ICR.DV2<SS,1> = 1
*    ICR.DV1<SS,1>=S.INV.PAP.WIDTH<1,SS>/100;ICR.MT1<SS,1>=10
*  CASE S.INV.UNIT<1,SS,2> = "FT" AND S.INV.UNIT<1,SS,3> = "MSI"
*    ICR.CNV<SS,1> = "MD0"; ICR.DV2<SS,1> = 12
*    ICR.DV1<SS,1>=S.INV.PAP.WIDTH<1,SS>/100;ICR.MT1<SS,1>=100
*  CASE 1
*    ICR.CNV<SS,1> = "MD2"; ICR.DV2<SS,1> = 1
*    ICR.DV1<SS,1> = 10; ICR.MT1<SS,1> = INV.SBR
*END CASE
*T28300 v
   BEGIN CASE
      CASE S.INV.UNIT<1,SS,2> = "SHT" AND S.INV.UNIT<1,SS,3> = "LBS"
	  ICR.CNV<SS,1> = "MD0"; ICR.DV2<SS,1> = 1
         ICR.DV1<SS,1> = S.INV.M.WT<1,SS>; ICR.MT1<SS,1> = 1
         IF S.UNIT<1,SS> = S.INV.UNIT<1,SS,2> THEN RQX<1,SS> = 1
         IF S.UNIT<1,SS> = 'LBS' THEN OQX<1,SS> = 1; RQX<1,SS> = 1
      CASE S.INV.UNIT<1,SS,2> = "PC" AND S.INV.UNIT<1,SS,3> = "MSI"
	  ICR.CNV<SS,1> = "MD0"; ICR.DV2<SS,1> = 1
         ICR.DV1<SS,1>=S.INV.PAP.WIDTH<1,SS>/100;ICR.MT1<SS,1>=10
         IF S.UNIT<1,SS> = 'PC' THEN RQX<1,SS> = 1
         IF S.UNIT<1,SS> = 'MSI' THEN OQX<1,SS> = 1; RQX<1,SS> = 1
         IF S.UNIT<1,SS> = 'FT' THEN
           ICR.DV1<SS,2>=S.INV.PAP.WIDTH<1,SS>/100; ICR.MT1<SS,2>=100
           ICR.DV2<SS,2>=12; OQX<1,SS> = 1; RQX<1,SS> = 1
         END
      CASE S.INV.UNIT<1,SS,2> = "FT" AND S.INV.UNIT<1,SS,3> = "MSI"
	  ICR.CNV<SS,1> = "MD0"; ICR.DV2<SS,1> = 12
         ICR.DV1<SS,1>=S.INV.PAP.WIDTH<1,SS>/100;ICR.MT1<SS,1>=100
         IF S.UNIT<1,SS> = 'FT' THEN RQX<1,SS> = 1
         IF S.UNIT<1,SS> = 'MSI' THEN OQX<1,SS> = 1; RQX<1,SS> = 1
         IF S.UNIT<1,SS> = 'PC' THEN
           ICR.DV1<SS,2>=S.INV.PAP.WIDTH<1,SS>/100;ICR.MT1<SS,2>=10
           ICR.DV2<SS,2>=1; OQX<1,SS> = 1; RQX<1,SS> = 1
         END
      CASE 1
	  ICR.CNV<SS,1> = "MD2"; ICR.DV2<SS,1> = 1
         ICR.DV1<SS,1> = 10; ICR.MT1<SS,1> = S.INV.SBR<1,SS>
         IF S.UNIT<1,SS> # S.INV.UNIT<1,SS,2> THEN
           OQX<1,SS>=1 ; RQX<1,SS> =1
         END ELSE RQX<1,SS> = 1
   END CASE

*BEGIN CASE
*  CASE S.UNIT<1,SS>="SHT" AND S.INV.UNIT<1,SS,3>="LBS"
*    ICR.CNV<SS,2> = "MD0"; ICR.DV2<SS,2> = 1
*    ICR.DV1<SS,2> = S.INV.M.WT<1,SS>; ICR.MT1<SS,2> = 1
*  CASE S.UNIT<1,SS>="PC" AND S.INV.UNIT<1,SS,3>="MSI"
*    ICR.CNV<SS,2> = "MD0"; ICR.DV2<SS,2> = 1
*    ICR.DV1<SS,2>=S.INV.PAP.WIDTH<1,SS>/100;ICR.MT1<SS,2>=10
*  CASE S.UNIT<1,SS>="FT" AND S.INV.UNIT<1,SS,3>="MSI"
*    ICR.CNV<SS,2> = "MD0"; ICR.DV2<SS,2> = 12
*    ICR.DV1<SS,2>=S.INV.PAP.WIDTH<1,SS>/100;ICR.MT1<SS,2>=100
*  CASE 1
*    ICR.CNV<SS,2> = "MD2"; ICR.DV2<SS,2> = 1
*    ICR.DV1<SS,2> = 10; ICR.MT1<SS,2> = 1
*END CASE

*IF S.UNIT<1,SS> # S.INV.UNIT<1,SS,2> THEN 
*  DIFF.UM<SS> = "Y" 
*END ELSE
*  DIFF.UM<SS> = "N"
*END
*

*T28300 ^
RETURN
***********
45000 *
***********
*WHEN READING FIRST IT COMES HERE
IF S.UNIT<1,SS> = "LBS" OR S.UNIT<1,SS> = "MSI" THEN 
  MYQTY<1,SS> = OCONV(S.QTY.ENTERED<1,SS>,"MD2")
END ELSE
   MYQTY<1,SS> = S.QTY.ENTERED<1,SS>
END
RETURN
*******************************************
*******************************************
* REV12 CHANGES, Added new label
*
***************
JANUS.PO.CHANGE: 
***************
*
*   OLD.DSR.ID = DSR.ID
*   ABORT.FLAG = 0
*   SCREEN FIELD;;57
*   SCREEN INPUT;;57
*   IF S$VALUE = 'END' THEN ABORT.FLAG = 1;RETURN
JPOS = INDEX(NEW_DSR_ID,"!",1)
JPO.CODE = NEW_DSR_ID[1,POS-1]
CONO = NEW_DSR_ID[1,3]
JMANIFEST = NEW_DSR_ID[POS+1,99]
   MATREAD PO.REC FROM PO, JPO.CODE ELSE
      STATS = 3
      ERRMSG = 'PO # not on file.'
      STATUS = RBO.setProperty('','OLD_DSR_ID',OLD_DSR_ID)	
      GOSUB 93000
*      GOTO JANUS.PO.CHANGE
   END
   JPO.NO = JPO.CODE 
   READU CHECKIT FROM DAILY_STOCK, NEW_DSR_ID LOCKED
      STATS = 3
      ERRMSG = 'Daily Stock record is locked by user - ':GETUSERNAME(STATUS())
      STATUS = RBO.setProperty('','OLD_DSR_ID',OLD_DSR_ID)	
      GOSUB 93000
*      GOTO JANUS.PO.CHANGE
   END ELSE CHECKIT = ''
   IF CHECKIT # '' THEN
      STATS = 3
      ERRMSG = 'There is already a daily stock record with the same PO and Manifest #.'
      STATUS = RBO.setProperty('','OLD_DSR_ID',OLD_DSR_ID)	
      GOSUB 93000
*      GOTO JANUS.PO.CHANGE
   END
   DSR.ID = NEW_DSR_ID
   RSMAN.MAN.NO = MANIFEST
*   S$DATA(2)<S$SCR> = PO.NO
*   SCREEN DISPLAY;;2
*   S$DATA(5)<S$SCR> = MANIFEST
*   SCREEN DISPLAY;;5
   MATREADU RSXRF.REC FROM PO.RSKI.XREF, CONO: JPO.NO LOCKED
      STATS = 3	
      ERRMSG = 'P/O record is locked by user - ':GETUSERNAME(STATUS())
      GOTO 93000 
   END ELSE MAT RSXRF.REC = ''
*   *** UPDATE THE DAILY STOCK RECORD ***
   FOR S = 1 TO S.CNT
      LNO = POLINE<1,S> 
      DSR.PROD<1,S> = PO.PROD.NUM<1,LNO>
      DSR.WHSE<1,S> = PO.WHSE<1,LNO>
      DSR.UOM<1,S> = PO.JB.UNITS<1,LNO>
      S.PROD.NO<1,S> = PO.PROD.NUM<1,LNO>
      S.WHSE<1,S> = PO.WHSE<1,LNO>
      S.UNIT<1,S> = PO.JB.UNITS<1,LNO>
   NEXT S
   RETURN

********************************************
93000
STATUS = RBO.setProperty('','ServerStatus',STATS)
STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
STATUS = RBO.setProperty('','ManualEntry',ManualEntry)
RETURN
 



