SUBROUTINE GET_TPROD
********************************************************************************
*   Program name :- GET_TPROD
*   Created:- 1/9/2006
*------------------------------------------------------------------------------*
*

* In Properties:
* --------------
*  
*
* Out Properties:
* ---------------
*  
********************************************************************************
$INCLUDE WWINSERT RBO.H

$INCLUDE PMC.CPYLIB COMP.OPS
$INCLUDE PMC.CPYLIB CUSTOMER
$INCLUDE PMC.CPYLIB SHIP.TO
$INCLUDE OPS.CPYLIB ORDER
$INCLUDE OPS.CPYLIB BOL
$INCLUDE OPS.CPYLIB PICK.TICKET
$INCLUDE OPS.CPYLIB ORDER.RELEASE
$INCLUDE OPS.CPYLIB ORDER.DETAIL
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE ICS.CPYLIB INV_SERIAL       
$INCLUDE ICS.CPYLIB INV_RECEIPTS     
$INCLUDE ICS.CPYLIB INV_RECP_WHSE 
$INCLUDE CPYLIB CHAR


OPEN "","ORDER" TO ORDER ELSE
	    ERRMSG = "CANNOT OPEN ORDER FILE"
	    GOTO 4099
END
OPEN "","ORDER.DETAIL" TO ORDER.DETAIL ELSE
	    ERRMSG = "CANNOT OPEN ORDER.DETAIL FILE"
	    GOTO 4099
END

OPEN "","CUSTOMER" TO CUSTOMER ELSE
	    ERRMSG = "CANNOT OPEN CUSTOMER FILE"
	    GOTO 4099
END

OPEN "","INV_SERIAL" TO INV_SERIAL  ELSE
	    ERRMSG = "CANNOT OPEN INV_SERIAL FILE"
	    GOTO 4099
END

OPEN "","INV_RECEIPTS" TO INV_RECEIPTS ELSE
	    ERRMSG = "CANNOT OPEN INV_RECEIPTS FILE"
	    GOTO 4099
END

OPEN "","INV_RECP_WHSE" TO INV_RECP_WHSE ELSE
	    ERRMSG = "CANNOT OPEN INV_RECP_WHSE FILE"
	    GOTO 4099
END




OPEN "","ORDER.RELEASE" TO ORDER.RELEASE ELSE
	    ERRMSG = "CANNOT OPEN ORDER.RELEASE FILE"
	    GOTO 4099
END


OPEN "","INVENTORY" TO INVENTORY ELSE
	    ERRMSG = "CANNOT OPEN INVENTORY FILE"
	    GOTO 4099
END
OPEN "","CATEGORY" TO CATEGORY ELSE
	    ERRMSG = "CANNOT OPEN CATEGORY FILE"
	    GOTO 4099
END

OPEN "","SHIP.TO" TO SHIP.TO ELSE
	    ERRMSG = "CANNOT OPEN SHIP.TO FILE"
	    GOTO 4099
END
OPEN "","PICK.TICKET" TO PICK.TICKET ELSE
	    ERRMSG = "CANNOT OPEN PICK.TICKET FILE"
	    GOTO 4099
END

OPEN "","INV.WHSE" TO INV.WHSE ELSE
	    ERRMSG = "CANNOT OPEN INV.WHSE FILE"
	    GOTO 4099
END

OPEN "","INV_RECEIPTS_TEMP" TO INV_RECEIPTS_TEMP ELSE
	    ERRMSG = "CANNOT OPEN INV_RECEIPTS_TEMP FILE"
	    GOTO 4099
END

OPEN "","INV_RECP_WHSE_TEMP" TO INV_RECP_WHSE_TEMP ELSE
	    ERRMSG = "CANNOT OPEN INV_RECP_WHSE_TEMP FILE"
	    GOTO 4099
END

OPEN "","INV_SERIAL_TEMP" TO INV_SERIAL_TEMP ELSE
	    ERRMSG = "CANNOT OPEN INV_SERIAL_TEMP FILE"
	    GOTO 4099
END

OPEN "","CONTROL" TO CONTROL ELSE
	    ERRMSG="CANNOT OPEN CONTROL FILE"
	    GOTO 4099
END


DEFFUN DIVISION_POSITION(CONO,CONTROL.FILE,DIV.CODE)
DEFFUN CURRENT_PERIOD(CONO,CONTROL.FILE,DIV.POS,FISCAL.FLAG)
DEFFUN CalcStkQty(COST.QTY,MAT INV.CNV.REC,ROND,LN)

PRODDESC='';PDESC='';DEFLOC='';FIRST=1;SPTR='';TMPQTY='';TEMP.SID = '';SID = '';TEMP.AVAIL='';TEMP.LOC.AVAIL='';TEMP.DESC = '';ERRMSG1='';BOLPROD=''
BOLORDER='';BOLWHSE='';BOLKIT='';BOLSEQ='';BOLRECPNO='';BOLLOC='';SPTR='';IPTR=1;BOLRECPNO = '';BOLTYPE = '';BOLBOMNO = ''
BOLREL = '';BOLPKTK = '';BOLPOSTFLG = '';MAT BOL.REC = '';RQTY = '';AQTY = ''
STATUS = RBO.getProperty("","PMCProperty",PMCProperty)
STATUS=RBO.getProperty('','BOL_ORDNO',BOL.ORDER)
STATUS=RBO.getProperty('','BOL_SHIP_TO',SHPNO)
STATUS=RBO.getProperty('','BOL_PKTKT',BOL_PKTKT)
STATUS=RBO.getProperty('','BOL_RELEASE',BOL_RLS)
STATUS=RBO.getProperty('','ID',ID)
STATUS=RBO.getProperty('','BOL_CUST',CUSTNO) 
STATUS=RBO.getProperty('','BOL_TYPE',TYPE)

CONO=PMCProperty<1,4>
RELNO=BOL_RLS
ORDNO=BOL.ORDER
VALUE=BOL_PKTKT
*---- SETUP UNIT MEASURE CONVERSION AND DISPLAY
   ICR.CNV = "MD0"; ICR.CNV1 = "MD0,"
   ICR.DV1 = 1; ICR.MT1 = 1; ICR.DV2 = 1000
   ICR.TYPE = 3; ICR.SCAL = 0
*----

TEMP.TYPE =TYPE
NUM.ON.SCRN=""
LN=1
BOL.ORDER<1,1> = ORDNO
*TEMP.SID=''


IF ID # 'N' THEN
   BOLNO=ID[4,99]
END ELSE
   BOLNO='N'
END

 TYPE=''
UPDCNT=0
BEGIN CASE 
     CASE TEMP.TYPE = 'T'
	GOSUB 7510
     CASE TEMP.TYPE = 'R'
	GOSUB 7520
     CASE TEMP.TYPE = 'O'
	GOSUB 7500
     CASE 1
	GOSUB 7500
END CASE 
   NUM.ON.SCRN = ""
   K = 0
   NUM.PROD = DCOUNT(BOL.PROD,VM) 
   FOR I = 1 TO NUM.PROD
      IF TEMP.AVAIL<1,I> > 0 THEN
         K = K + 1
         NUM.ON.SCRN<1,K> = I
      END	
	       PRINT.AVAIL = TEMP.AVAIL<1,I>
              PQTY = INT(((PRINT.AVAIL / ICR.DV1 ) * ICR.MT1) / ICR.DV2 + .5 )
		TMPQTY<1,I> = OCONV(PQTY,ICR.CNV)
	 *  	PQTY = SUM(BOL.QTY<1,I>)
   	*	PQTY = INT(((PQTY / ICR.DV1 ) * ICR.MT1) / ICR.DV2 + .5 )
     *         BOL.QTY<1,I> = OCONV(BOL.QTY<1,I>,ICR.CNV)
		BOLPROD<1,I>=BOL.PROD<1,I>	
		BOLORDER<1,I>=BOL.ORDER<1,I>
              BOLWHSE<1,I>=BOL.WHSE<1,I> 
		BOLKIT<1,I>=BOL.KIT<1,I>
		BOLSEQ<1,I>=BOL.SEQ<1,I>
		BOLRECPNO<1,I>=BOL.RECP.NO<1,I>
		BOLLOC<1,I>=BOL.LOC<1,I>
              BOLTYPE<1,I> = BOL.TYPE<1,I>
		BOLBOMNO<1,I> = BOL.BOM.NUM<1,I>
		BOLREL<1,I>= BOL.RELEASE<1,I>
		BOLPKTK<1,I>= BOL.PKTKT<1,I>
		BOLPOSTFLG<1,I>= BOL.POST.FLAG<1,I>
	      		MATREAD INV.REC FROM INVENTORY,CONO:BOL.PROD<1,I> THEN
				PRODDESC<1,I>=BOL.PROD<1,I>:"_":INV.FULL.DESC
				PDESC<1,I>=INV.FULL.DESC
	     		END
	     	MATREAD IWH.REC FROM INV.WHSE,CONO:OSD.PROD<1,1>:"!":OSD.WHSE<1,1> THEN
			STATUS = RBO.setProperty('', 'DEFLOC',BOLLOC)
	     	END
      *END
   NEXT I
    BEGIN CASE
      CASE UPDCNT = 1
         LINES = DCOUNT(BOL.PROD,VM)
         OLD.START.LINE = 0
      CASE UPDCNT > 1
         LINES = DCOUNT(NUM.ON.SCRN,VM)
         OLD.START.LINE = 0
      CASE 1
         ERRMSG1<1,-1> = "No lines added. Press <RETURN> to continue."
        * GOTO 4099
         
    END CASE
	       STATUS = RBO.setProperty('','BOL_VALID_PROD',NUM.ON.SCRN)
		STATUS=RBO.setProperty('','OSD_FI_QTY',TMPQTY)
		STATUS = RBO.setProperty('','OSD_ORDNUM',BOLORDER) *ORDNO  
   		STATUS = RBO.setProperty('','INV_FNGD_NO',BOLPROD) * BOL.PROD 
		STATUS = RBO.setProperty('','INV_FNGD_DESC',PRODDESC)
   		STATUS = RBO.setProperty('','INV_PROD_DSC',PDESC)
   		STATUS = RBO.setProperty('','PRODWHSE', BOLWHSE ) * BOL.WHSE 
		***v
		STATUS = RBO.setProperty('','BOL_KIT',BOLKIT)
		STATUS = RBO.setProperty('','BOL_SEQ', BOLSEQ)	
		STATUS = RBO.setProperty('','BOL_RECP_NO', BOLRECPNO)
		STATUS = RBO.setProperty('','BOL_TYPE', BOLTYPE)
		STATUS = RBO.setProperty('','BOL_LOC', BOLLOC )
		STATUS = RBO.setProperty('','BOL_BOM_NUM', BOLBOMNO)   
		STATUS = RBO.setProperty('','BOL_RELEASE',BOLREL)
		STATUS = RBO.setProperty('','BOL_PKTKT',BOLPKTK)
		STATUS = RBO.setProperty('','BOL_POST_FLAG',BOLPOSTFLG)
		STATUS = RBO.setProperty('','TEMP_AVAIL',TEMP.AVAIL)
		STATUS = RBO.setProperty('','TEMP_LOC_AVAIL',TEMP.LOC.AVAIL)
		STATUS=RBO.setProperty('','TEMP_SID',TEMP.SID)
		TEMP.BOL.MAT = ''
		MATBUILD TEMP.BOL.MAT FROM BOL.REC USING "^"
		STATUS=RBO.setProperty('','BOL_MATARR',TEMP.BOL.MAT)
 


IF ERRMSG1 # '' THEN 
	   ERRMSG=ERRMSG1	
	   GOTO 4099
END

* End of method code
RETURN

* Insert method code here

*---- ENTER PICKING TICKET NUMBER
7510 *
   
   MATREAD PKT.REC FROM PICK.TICKET, CONO:VALUE ELSE
      ERRMSG = "Pick Ticket is not on File":VALUE
      GOTO 4099
   END
   BEGIN CASE
      CASE SUM(PKT.SHIP.QTY) > 0
         ERRMSG = "Ticket has already been shipped"
         GOTO 4099
      CASE PKT.BOL # "" AND PKT.BOL # BOLNO
         ERRMSG = "Ticket is on Bill of Lading ":PKT.BOL :"~":BOLNO
         GOTO 4099
   END CASE
   DASH.FOUND = 0
   CHARCNT = LEN(VALUE)
   FOR XX = CHARCNT TO 1 STEP (-1) UNTIL DASH.FOUND
      IF VALUE[XX,1] = "-" THEN
         ORD.VALUE = VALUE[1,XX-1]
         DASH.FOUND = 1
      END
   NEXT XX
   IF ORD.VALUE # BOL.ORDER<1,1> AND BOL.ORDER<1,1> # "" THEN
      ERRMSG = "Pick Ticket is NOT for the same Order":ORD.VALUE :"~":BOL.ORDER<1,1>
      GOTO 4099
   END
   IF PKT.SHIP.TO # SHPNO THEN
      ERRMSG = "Pick Ticket is NOT for the same Ship-To.":SHPNO      
      GOTO 4099
   END
   PKTKT = VALUE
   RELNO = PKT.REL.NO
   ORDNO = ORD.VALUE
   GOSUB 7600
   IF BAD.ORD THEN GOTO 4099
   IF RELNO = "" THEN
      IF ORD.REL.NO # "" THEN
         ERRMSG = "Release required for shipment! "
         GOTO 4099
      END
   END ELSE
      MATREAD ORR.REC FROM ORDER.RELEASE, CONO:RELNO ELSE
         ERRMSG = "Release is NOT on File"
         
         GOTO 4099
      END
      IF (ORR.STATUS<1,1> # "") AND (ORR.BOL # BOLNO) THEN
         ERRMSG = "Release ":RELNO:" ":ORR.STATUS<1,1>
         
         GOTO 4099
      END
   END
   IPTR = LN-1
   PCNT = DCOUNT(OSD.PROD,VM)
   FOR PPTR = 1 TO PCNT
      PROD = OSD.PROD<1,PPTR>
      WHSE = OSD.WHSE<1,PPTR>
      PROD.SEQ = OSD.PROD.SEQ<1,PPTR>
      PSEQ     = OSD.PROD.SEQ<1,PPTR>
      KIT      = OSD.KIT<1,PPTR>
      BOM.NUMBER = OSD.BOM.NUM<1,PPTR>
      PTR = 1
      LOOP
         LOCATE PROD IN PKT.PROD<1>,PTR SETTING TPTR THEN
            IF (PKT.WHSE<1,TPTR> = WHSE) AND (PKT.KIT<1,TPTR> = KIT) AND (PKT.SEQ<1,TPTR> = PROD.SEQ) THEN PTR = 0
         END ELSE
            TPTR=0; PTR=0
         END
      UNTIL PTR = 0 DO
         PTR = TPTR+1
      REPEAT
      IF TPTR = 0 THEN GOTO 7519
      IF PKT.SHIP.QTY<1,TPTR> > 0 THEN GOTO 7519
      GOSUB 7650
      IF NOT(BAD.PROD) THEN
         RCNT = DCOUNT(PKT.RECP.NO<1,TPTR>,SM)
	  IF RCNT = 0 THEN RCNT = 1
         LOCATE RELNO IN OSD.REL.NO<1,PPTR> SETTING REL.POS ELSE REL.POS = 0
         FOR RPTR = 1 TO RCNT
            RECP = PKT.RECP.NO<1,TPTR,RPTR>
	    
            IF ((KIT="K" OR KIT="M") AND OSD.REL.NO<1,PPTR,RPTR>="") OR (REL.POS) THEN      ;*T24693
               WLOC=""; WGHT=""
               WLOC = PKT.SERIAL.LOC<1,TPTR,RPTR>;* T20852
               RQTY = PKT.R.QTY<1,TPTR,RPTR>+0;* T20852
               AQTY = RQTY
               GOSUB 7550
            END
7518     NEXT RPTR
      END

7519 NEXT PPTR
	*STATUS=RBO.setProperty('','TESTPRODUCT',TEMP.SID:"~":BOL.TYPE:"~":BOL.ORDER:"~":BOL.PROD:"~":BOL.WHSE:"~":BOL.LOC:"~":BOL.KIT:"~":BOL.SEQ:"~":BOL.BOM.NUM:"~":BOL.RECP.NO) 
		
		*GOTO 8900
		
   RETURN

***** Added for Release
7520 *
MATREAD ORD.DET.REC FROM ORDER.DETAIL, CONO:ORDNO:"!":SHPNO ELSE
  ERRMSG = "Cannot locate Order / Ship to # ":ORDNO:" / ":SHPNO
  GOTO 4099
END

MATREAD ORR.REC FROM ORDER.RELEASE, CONO:RELNO ELSE
  ERRMSG = "Release is NOT on File"
  GOTO 4099
END

*LN=DCOUNT(OSD.PROD,VM)
IPTR =LN-1
*IF TYPE = "" THEN
*	IPTR = DCOUNT(BOL.PROD,VM)
*   END ELSE
*      IPTR = LN-1
*END


PCNT = DCOUNT(OSD.PROD,VM)
FOR PPTR = 1 TO PCNT
  PROD = OSD.PROD<1,PPTR>
  WHSE = OSD.WHSE<1,PPTR>
  PROD.SEQ = OSD.PROD.SEQ<1,PPTR>
  PSEQ     = OSD.PROD.SEQ<1,PPTR>
  KIT      = OSD.KIT<1,PPTR>
  BOM.NUMBER = OSD.BOM.NUM<1,PPTR>
  GOSUB 7650
  IF NOT(BAD.PROD) THEN
    RCNT = DCOUNT(OSD.RECP.NO<1,PPTR>,SM)
    IF RCNT = 0 THEN RCNT = 1
    FOR RPTR = 1 TO RCNT
      RECP = OSD.RECP.NO<1,PPTR,RPTR>
      IF ((KIT = "K" OR KIT = "M") AND OSD.REL.NO<1,PPTR,RPTR> = "") OR OSD.REL.NO<1,PPTR,RPTR> = RELNO THEN
        PKTKT=""; WLOC=""; WGHT=""
        RQTY = OSD.REL.QTY<1,PPTR,RPTR>+0
        AQTY = RQTY
        GOSUB 7550
      END
    NEXT RPTR
  END ELSE GOTO 4099
NEXT PPTR
	*GOTO 8900		
RETURN
	
*****till here for release	
****for order
7500 *
   MATREAD ORD.DET.REC FROM ORDER.DETAIL,CONO:ORDNO:"!":SHPNO ELSE
      MAT ORD.DET.REC = ""
      ERRMSG = "Cannot locate ORDER.DETAIL for specified Ship-to.":CONO:ORDNO:"!":SHPNO
      GOTO 4099
      BAD.ORD = 1
      RETURN
   END
	
   IF TYPE = "" THEN
	IPTR = DCOUNT(BOL.PROD,VM)
   END ELSE
      IPTR = LN-1
   END
	
  
   PCNT = DCOUNT(OSD.PROD,VM)
   FOR PPTR = 1 TO PCNT
      PROD = OSD.PROD<1,PPTR>
      WHSE = OSD.WHSE<1,PPTR>
      KIT  = OSD.KIT<1,PPTR>
      PSEQ = OSD.PROD.SEQ<1,PPTR>
      BOM.NUMBER = OSD.BOM.NUM<1,PPTR>
      GOSUB 7650
       IF NOT(BAD.PROD) THEN
         RCNT = DCOUNT(OSD.RECP.NO<1,PPTR>,SM)
         IF RCNT = 0 THEN RCNT = 1
         FOR RPTR = 1 TO RCNT
            RECP = OSD.RECP.NO<1,PPTR,RPTR>
            RELNO = OSD.REL.NO<1,PPTR,RPTR>   ;*T24693
            PKTKT=""; WLOC=""; WGHT=""
            RQTY = OSD.FI.QTY<1,PPTR,RPTR>+0
            AQTY = RQTY
            GOSUB 7550
         NEXT RPTR
       END
       ***   IT WAS HERE
    NEXT PPTR
	*GOTO 8900
RETURN

7600 *
   BAD.ORD = 0
   MATREAD ORD.REC FROM ORDER, CONO:ORDNO ELSE
      ERRMSG = "Invalid Order number."
      GOSUB 4099
      BAD.ORD = 1
      RETURN
   END
   IF ORD.STATUS<1,1> = "CLOSED" OR ORD.STATUS<1,1> = "CANCEL" THEN
      ERRMSG = "Order has either been closed or cancelled"
      GOSUB 4099
      BAD.ORD = 1
      RETURN
   END
   IF ORD.CUST # CUSTNO THEN
      ERRMSG = "This order belongs to customer ":ORD.CUST
      GOSUB 4099
      BAD.ORD = 1
      RETURN
   END
   MATREAD ORD.DET.REC FROM ORDER.DETAIL, CONO:ORDNO:"!":SHPNO ELSE
      MAT ORD.DET.REC = ""
      ERRMSG = "Cannot locate ORDER.DETAIL for specified Ship-to.":CONO:ORDNO:"!":SHPNO
      GOSUB 4099
      BAD.ORD = 1
      RETURN
   END
 RETURN

7650 *
   BAD.PROD = 0
   MATREAD INV.REC FROM INVENTORY, CONO:PROD ELSE
      ERRMSG1<1,-1> = "Invalid Product number."
     * GOSUB 4099
      BAD.PROD = 1
      RETURN
   END
   MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
      ERRMSG1<1,-1> = "Cannot locate CATEGORY ":INV.LINE:" for product ":PROD
      *GOSUB 4099
      BAD.PROD = 1
      RETURN
   END
   MATREAD IWH.REC FROM INV.WHSE, CONO:PROD:"!":WHSE ELSE
      ERRMSG1<1,-1> = "Cannot locate INV.WHSE - ":PROD:"!":WHSE
      *GOSUB 4099
      BAD.PROD = 1
      RETURN
   END
 RETURN

8900 *
******
	     POSD=DCOUNT(BOL.PROD,VM)
		
	     FOR I=1 TO POSD
	     	MATREAD INV.REC FROM INVENTORY,CONO:BOL.PROD<1,I> THEN
			PRODDESC<1,I>=BOL.PROD<1,I>:"_":INV.FULL.DESC
			PDESC<1,I>=INV.FULL.DESC
	     	END
	     NEXT I

	     	MATREAD IWH.REC FROM INV.WHSE,CONO:OSD.PROD<1,1>:"!":OSD.WHSE<1,1> THEN
			DEFLOC=IWH.LOC
			STATUS = RBO.setProperty('', 'DEFLOC',DEFLOC)
	     	END
	     *NEXT I
			
		******
	    FOR I = 1 TO DCOUNT(TEMP.AVAIL,@VM)
	     IF TEMP.AVAIL<1,I> > 0 THEN
		PRINT.AVAIL = TEMP.AVAIL<1,I>
              PQTY = INT(((PRINT.AVAIL / ICR.DV1 ) * ICR.MT1) / ICR.DV2 + .5 )
		TMPQTY<1,I> = OCONV(PQTY,ICR.CNV)
            END
           NEXT I

		
	       STATUS=RBO.setProperty('','OSD_FI_QTY',TMPQTY)
		STATUS = RBO.setProperty('','OSD_ORDNUM',BOL.ORDER) *ORDNO  
   		STATUS = RBO.setProperty('','INV_FNGD_NO',BOL.PROD) * BOL.PROD 
		STATUS = RBO.setProperty('','INV_FNGD_DESC',PRODDESC)
   		STATUS = RBO.setProperty('','INV_PROD_DSC',PDESC)
   		STATUS = RBO.setProperty('','PRODWHSE', BOL.WHSE ) * BOL.WHSE 
		***v
		STATUS = RBO.setProperty('','BOL_KIT',BOL.KIT  )
		STATUS = RBO.setProperty('','BOL_SEQ', BOL.SEQ )	
		STATUS = RBO.setProperty('','BOL_RECP_NO', BOL.RECP.NO )
		
		STATUS = RBO.setProperty('','BOL_LOC', BOL.LOC )
		***^
		


RETURN

7550 *
   
   IF FIRST THEN
      BOL.ORDER = ""
      FIRST = 0
   END
   SID = PROD:"!":WHSE:"!":ORDNO:"!":RECP
   SPTR = DCOUNT(TEMP.SID<1>,VM) + 1
   
   IF SPTR THEN
      UPDCNT = UPDCNT + 1
      IPTR = IPTR + 1
      TEMP.SID = INSERT(TEMP.SID,1,IPTR,0,SID)
      BOL.TYPE = INSERT(BOL.TYPE,1,IPTR,0,TEMP.TYPE)
      BOL.ORDER = INSERT(BOL.ORDER,1,IPTR,0,ORDNO)
      BOL.PROD = INSERT(BOL.PROD,1,IPTR,0,PROD)
	
      BOL.WHSE = INSERT(BOL.WHSE,1,IPTR,0,WHSE)
      BOL.LOC = INSERT(BOL.LOC,1,IPTR,0,"")
      BOL.KIT = INSERT(BOL.KIT,1,IPTR,0,KIT)
      BOL.SEQ = INSERT(BOL.SEQ,1,IPTR,0,PSEQ)
      BOL.BOM.NUM = INSERT(BOL.BOM.NUM,1,IPTR,0,BOM.NUMBER)
      BOL.RECP.NO = INSERT(BOL.RECP.NO,1,IPTR,0,"")
      TEMP.AVAIL = INSERT(TEMP.AVAIL,1,IPTR,0,AQTY)
      BEGIN CASE
         CASE WLOC = ""
            BOL.QTY = INSERT(BOL.QTY,1,IPTR,0,"")
         CASE RQTY <= AQTY
            BOL.QTY = INSERT(BOL.QTY,1,IPTR,0,RQTY)
         CASE 1
            BOL.QTY = INSERT(BOL.QTY,1,IPTR,0,AQTY)
      END CASE
      BOL.RELEASE = INSERT(BOL.RELEASE,1,IPTR,0,RELNO)   ;*T24693
      BOL.PKTKT = INSERT(BOL.PKTKT,1,IPTR,0,PKTKT)
      BOL.SHP.WT = INSERT(BOL.SHP.WT,1,IPTR,0,WGHT)
      BOL.SHP.AMT = INSERT(BOL.SHP.AMT,1,IPTR,0,"")
      BOL.POST.FLAG = INSERT(BOL.POST.FLAG,1,IPTR,0,"")
      BOL.SKD.CNT = INSERT(BOL.SKD.CNT,1,IPTR,0,"");* T20661
      BOL.CRTN.CNT = INSERT(BOL.CRTN.CNT,1,IPTR,0,"");* T20661
      TEMP.LOC.AVAIL = INSERT(TEMP.LOC.AVAIL,1,IPTR,0,"")
      TEMP.DESC = INSERT(TEMP.DESC,1,IPTR,0,"")
   END
 IF WLOC # "" THEN

      RSVBLE.QTY=0;RSVD.QTY=0
      BOL.LOC<1,IPTR> = WLOC
      BOL.RECP.NO<1,IPTR> = RECP
      ISTK.ID=CONO:"R":RECP:"!":WHSE:"!":WLOC
      IF RECORDLOCKED(INV_SERIAL_TEMP,ISTK.ID)=0 THEN     
         DELETE INV_SERIAL_TEMP,ISTK.ID                    
      END                                                 
      MATREADU ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID ELSE  
         MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID THEN    
            IF (RELNO='') THEN                             
               LOCATE ORDNO IN ISTK.ORDER<1> SETTING OPOS THEN  
                  RSVD.QTY=ISTK.ORSVD.QTY<1,OPOS>              
               END                                           
            END ELSE                                        
               LOCATE RELNO IN ISTK.RELNO<1> SETTING RELPOS THEN
                  RSVD.QTY=ISTK.RRSVD.QTY<1,RELPOS>            
               END                                           
            END                                             
            ;* return back quantity that has been reserved  
            ;* for this order/release into reservable qty   
            RSVBLE.QTY=ISTK.RSVB.QTY+RSVD.QTY                
         END ELSE
            RELEASE INV_SERIAL_TEMP,ISTK.ID
            RELEASE INV_SERIAL,ISTK.ID
         END
      END
      IF RQTY > RSVBLE.QTY THEN
         ERRMSG1<1,-1>='Receipt ':RECP:' does not have enough reservable qty. for whse/loc ':WHSE:'/':WLOC
        * GOSUB 4099
      END
   END ELSE
 	

      CHKQTY=0
      INVR.ID=CONO:RECP
      IF RECORDLOCKED(INV_RECEIPTS_TEMP,INVR.ID)=0 THEN           
         DELETE INV_RECEIPTS_TEMP,INVR.ID                          
      END
		                                                        
      MATREADU INVR.REC FROM INV_RECEIPTS_TEMP,INVR.ID ELSE       
	
         MATREADU INVR.REC FROM INV_RECEIPTS,INVR.ID THEN          
            IRW.ID=CONO:RECP:"!":WHSE
				  
            IF RECORDLOCKED(INV_RECP_WHSE_TEMP,IRW.ID)=0 THEN       
               DELETE INV_RECP_WHSE_TEMP,IRW.ID                      
            END
	     
            MATREADU IRW.REC FROM INV_RECP_WHSE_TEMP,IRW.ID ELSE    
               MATREADU IRW.REC FROM INV_RECP_WHSE,IRW.ID THEN       
                  SCNT=DCOUNT(IRW.SERIAL.NO,VM)                       
                  FOR S=1 TO SCNT
                     RSVBLE.QTY =0;RSVD.QTY=0
                     ISTK.ID=CONO:IRW.SERIAL.NO<1,S>                   
                     IF RECORDLOCKED(INV_SERIAL_TEMP,ISTK.ID)=0 THEN   
                        DELETE INV_SERIAL_TEMP,ISTK.ID                  
                     END                                               
                     MATREAD ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID ELSE
                        MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID THEN  
                           IF RELNO='' THEN
                              LOCATE ORDNO IN ISTK.ORDER<1> SETTING OPOS THEN
                                 RSVD.QTY=ISTK.ORSVD.QTY<1,OPOS>
                              END
                           END ELSE
                              LOCATE RELNO IN ISTK.RELNO<1> SETTING RELPOS THEN   
                                 RSVD.QTY=ISTK.RRSVD.QTY<1,RELPOS>
                              END
                           END
                           ;* return back quantity that has been reserved
                           ;* for this order/release into reservable qty
                           RSVBLE.QTY=ISTK.RSVB.QTY+RSVD.QTY
                           IF RSVBLE.QTY > 0 THEN                     
                              WLOC=ISTK.LOC
                              PTR = 1
                              LOOP
                                 LOCATE WLOC IN BOL.LOC<1,IPTR>,PTR BY "AL" SETTING P THEN
                                    IF BOL.RECP.NO<1,IPTR,P> >= RECP THEN PTR = 0
                                 END ELSE
                                    PTR = 0
                                 END
                              UNTIL PTR = 0 DO
                                 PTR = P + 1
                              REPEAT
                              IF BOL.LOC<1,IPTR,P>=WLOC AND BOL.RECP.NO<1,IPTR,P>=RECP THEN
                                 TEMP.LOC.AVAIL<1,IPTR,P>+=RSVBLE.QTY
                              END ELSE
                                 BOL.LOC = INSERT(BOL.LOC,1,IPTR,P,WLOC)
                                 BOL.RECP.NO = INSERT(BOL.RECP.NO,1,IPTR,P,RECP)
                                 BOL.QTY = INSERT(BOL.QTY,1,IPTR,P,0)
                                 BOL.POST.FLAG = INSERT(BOL.POST.FLAG,1,IPTR,P,"")
                                 TEMP.LOC.AVAIL=INSERT(TEMP.LOC.AVAIL,1,IPTR,P,RSVBLE.QTY)
                              END
                              CHKQTY+=RSVBLE.QTY
                           END                                                   
                        END ELSE
                           RELEASE INV_SERIAL_TEMP,ISTK.ID
                           RELEASE INV_SERIAL, ISTK.ID
                        END
                     END                                                     
                  NEXT S                                                    
               END                                                           
               RELEASE INV_RECP_WHSE,IRW.ID
            END                                                             
            RELEASE INV_RECP_WHSE_TEMP,IRW.ID
         END
         RELEASE INV_RECEIPTS,INVR.ID        
      END

      RELEASE INV_RECEIPTS_TEMP,INVR.ID
      IF CHKQTY < RQTY THEN
         ERRMSG1<1,-1>="Cannot locate reserved quantity in inventory"
         *GOSUB 4099
      END
   END
RETURN		


4099 *
STATUS = RBO.setProperty('','ServerStatus',1)        
STATUS = RBO.setProperty('','ServerMessage',ERRMSG) 
RETURN



