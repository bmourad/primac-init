SUBROUTINE ORDM_ORD_LINE_CANCEL
********************************************************************************
*   Program name :- ORDM_ORD_LINE_CANCEL
*   Created:- 3/24/2006
*   Programmer :- Suhail Hussain S
********************************************************************************
$INCLUDE WWINSERT RBO.H
$INCLUDE OPS.CPYLIB ORDER
$INCLUDE OPS.CPYLIB ORDER.DETAIL
$INCLUDE OPS.CPYLIB ORDER.RELEASE
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE ICS.CPYLIB FNGD.STATS
$INCLUDE ICS.CPYLIB FNGD.ORDER.STATS
$INCLUDE ICS.CPYLIB FNGD.JOB.STATS
$INCLUDE CPYLIB FILE.VARS
$INCLUDE CPYLIB CHAR
$INCLUDE ICS.CPYLIB INV_RECEIPTS

   OPEN "","ORDER" TO ORDER ELSE ERRMSG = "CANNOT OPEN ORDER FILE";GOTO 91000
   OPEN "","ORDER.DETAIL" TO ORDER.DETAIL ELSE ERRMSG = "CANNOT OPEN ORDER.DETAIL FILE";GOTO 91000
   OPEN "","ORDER.RELEASE" TO ORDER.RELEASE ELSE ERRMSG = "CANNOT OPEN ORDER.RELEASE FILE";GOTO 91000
   OPEN "","INVENTORY" TO INVENTORY ELSE ERRMSG = "CANNOT OPEN INVENTORY FILE";GOTO 91000
   OPEN "","CATEGORY" TO CATEGORY ELSE ERRMSG = "CANNOT OPEN CATEGORY FILE";GOTO 91000
   OPEN "","INV.WHSE" TO INV.WHSE ELSE ERRMSG = "CANNOT OPEN INV.WHSE FILE";GOTO 91000
   OPEN "","FNGD.STATS" TO FNGD.STATS ELSE ERRMSG = "CANNOT OPEN FNGD.STATS FILE";GOTO 91000
   OPEN "","FNGD.ORDER.STATS" TO FNGD.ORDER.STATS ELSE ERRMSG = "CANNOT OPEN  FILE";GOTO 91000
   OPEN "","FNGD.JOB.STATS" TO FNGD.JOB.STATS ELSE ERRMSG = "CANNOT OPEN FNGD.JOB.STATS FILE";GOTO 91000
   OPEN "","CONTROL" TO CONTROL ELSE ERRMSG = "CANNOT OPEN CONTROL FILE";GOTO 91000
   OPEN "","INV_RECEIPTS" TO INV_RECEIPTS ELSE ERRMSG = "CANNOT OPEN INV_RECEIPTS FILE";GOTO 91000


   STATUS = RBO.getProperty("","PMCProperty",PMCProperty)
   STATUS = RBO.getProperty("","RETARR",OSDARR)
   STATUS = RBO.getProperty("","INARR",INARR)
   CONO = PMCProperty<1,4>
   ORDNO = INARR<1,1>
   ORD.CUST = INARR<1,2>
   LN.NO = INARR<1,3>
   OPEN.FLAG = 1
   MATPARSE ORD.DET.REC FROM OSDARR,"ð"
   TEMP.INDX = "";ORIG.PROD=""
   TEMP.INDX = LN.NO
   OLD.QTY = OSD.JOB.QTY<1,TEMP.INDX>
   FOR P = 1 TO DCOUNT(OSD.PROD,VM)
      TEMP.KEY = CONO:OSD.PROD<1,P>:"!":OSD.WHSE<1,2>
      LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX ELSE
         ORIG.PROD = INSERT(ORIG.PROD,1,LINDX,1,TEMP.KEY)
      END
   NEXT P
   TEMP.MFJ = "";TEMP.MFK = ""
   TEMP.MFJ = OSD.JOB<1,TEMP.INDX>
   TEMP.MFK = OSD.KIT<1,TEMP.INDX>

   ERR.MSG = 0;ERRMSG = ""
   NUM.PROD = DCOUNT(OSD.PROD,VM)
   GOSUB 5000

5000*
   GOSUB 7800   
   IF LNFLG = 5 THEN
      ERRMSG = "Cannot Cancel !! Product is on an open Picking Ticket"
      GOTO 91000
   END
   IF LN.NO THEN
      LN = LN.NO
      PDNO = OSD.PROD<1,TEMP.INDX>;IWH.ID = CONO:PDNO
      MATREAD INV.REC FROM INVENTORY, IWH.ID THEN
         MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE THEN
            WHNO = OSD.WHSE<1,LN>;IWH.ID = IWH.ID:"!":WHNO
               MATREAD IWH.REC FROM INV.WHSE, IWH.ID THEN
                  ERR.FLG='';ERRMSG='';PERIOD=''                                        
                  CALL BUILD_IWH_FI(IWH.ID,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG) 
                  $INCLUDE ICSBP INV.UM.CNV
                  MATREAD FGS.REC FROM FNGD.STATS, IWH.ID ELSE
                     MAT FGS.REC = ""
                  END
                  OSD.G.QTY<1,TEMP.INDX> = 0
                  OSD.O.QTY<1,TEMP.INDX> = 0
                  OSD.R.QTY<1,TEMP.INDX> = 0
                  IF OSD.KIT<1,TEMP.INDX> = "K" THEN
                     OSD.KIT.G.QTY<1,TEMP.INDX> = 0
                     OSD.KIT.O.QTY<1,TEMP.INDX> = 0
                     OSD.KIT.R.QTY<1,TEMP.INDX> = 0
                     OSD.REL.NO<1,TEMP.INDX> = ""
                     OSD.REL.QTY<1,TEMP.INDX> = ""
                     OSD.RECP.NO<1,TEMP.INDX> = ""
                     OSD.FI.QTY<1,TEMP.INDX> = ""
                     OSD.REL.NO<1,TEMP.INDX> = ""
                     OSD.OLD.QTY<1,TEMP.INDX> = ""
                     NUM.ORDER = DCOUNT(OSD.PROD,VM)
                     *START.PT = NUM.ON.SCRN<1,TEMP.INDX>
                     START.PT = LN.NO
                     NUM.PROD = 0
                  FOR I = START.PT+1 TO NUM.ORDER
                     IF OSD.KIT<1,I> = "K" THEN I = NUM.ORDER + 1
                     IF OSD.KIT<1,I> = "N" THEN I = NUM.ORDER + 1
                     IF OSD.KIT<1,I> = "M" THEN
                        NUM.PROD = NUM.PROD + 1
                     END
                  NEXT I
                  FOR I = 1 TO NUM.PROD
                     OSD.REL.NO<1,START.PT + I> = ""
                     OSD.REL.QTY<1,START.PT + I> = ""
                     OSD.RECP.NO<1,START.PT + I> = ""
                     OSD.FI.QTY<1,START.PT + I> = ""
                     OSD.REL.NO<1,START.PT + I> = ""
                     OSD.G.QTY<1,START.PT + I> = 0
                     OSD.O.QTY<1,START.PT + I> = 0
                     OSD.R.QTY<1,START.PT + I> = 0
                     OSD.OLD.QTY<1,START.PT + I> = ""
                  NEXT I
                  OLD.START.LINE = 0
               END ELSE
                  RTOT = 0;RTYPE = "B"
                  RQTY = OSD.FI.QTY<1,TEMP.INDX>
                  RSV.NO = OSD.RECP.NO<1,TEMP.INDX>
                  REL.NO = OSD.REL.NO<1,TEMP.INDX>
                  REL.QTY = OSD.REL.QTY<1,TEMP.INDX>
                  PROD.SEQ = OSD.PROD.SEQ<1,TEMP.INDX>
                  KIT.TYPE = TEMP.MFK
                  WHNO = OSD.WHSE<1,TEMP.INDX>
                  *CALL ORDER.RESERVE.SEL(CONO,("R-":TEMP.INDX),ORD.CUST,ORDNO,SHPNO,PDNO,WHNO,RTYPE,RTOT,RQTY,RSV.NO,REL.NO,REL.QTY,"","",PROD.SEQ,KIT.TYPE,"")
                  ACTION = ("R-":TEMP.INDX);CUSTNO = ORD.CUST;RESV.TOT = RTOT;TMP.FI.QTY = RQTY;TMP.FI.NO = RSV.NO
                  TMP.REL.NO = REL.NO;TMP.REL.QTY = REL.QTY;RELNO="";RELQTY="";PICK.QTY=""
                  GOSUB ORDER_RESERVE_SEL
                  RECP.CNT = DCOUNT(OSD.RECP.NO<1,TEMP.INDX>,SVM)
                  FOR N = 1 TO RECP.CNT
                     RECP.NO = OSD.RECP.NO<1,TEMP.INDX,N>
                     LOCATE RECP.NO IN IWH.RECP.NO<1>,1 SETTING FNO THEN
                        IWH.RSV.FI<1,FNO> = IWH.RSV.FI<1,FNO> + OSD.FI.QTY<1,TEMP.INDX,N>
                     END
                  NEXT N
                  RECP.CNT = DCOUNT(RSV.NO,SVM)
                  FOR N = 1 TO RECP.CNT
                     RECP.NO = RSV.NO<1,1,N>
                     LOCATE RECP.NO IN IWH.RECP.NO<1>,1 SETTING FNO THEN
                        IWH.RSV.FI<1,FNO> = IWH.RSV.FI<1,FNO> - RQTY<1,1,N>
                     END
                  NEXT N
                  TEMP.KEY = CONO:OSD.PROD<1,TEMP.INDX>:"!":OSD.WHSE<1,TEMP.INDX>
                  LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
                     ORIG.IWH.QTY<1,LINDX> = ORIG.IWH.QTY<1,LINDX> - OSD.R.QTY<1,TEMP.INDX> + RTOT
                     TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
                     ORIG.IWH.RESV<1,LINDX> = TEMP.STR
                  END
                  OSD.RECP.NO<1,TEMP.INDX> = RSV.NO
                  OSD.FI.QTY<1,TEMP.INDX> = RQTY
                  OSD.REL.NO<1,TEMP.INDX> = REL.NO
                  OSD.REL.QTY<1,TEMP.INDX> = REL.QTY
                  ATOT = 0;AQTY = "";RCNT = DCOUNT(OSD.JOB<1,TEMP.INDX>,SVM)
                  FOR R = 1 TO RCNT
                     LOCATE OSD.JOB<1,TEMP.INDX,R> IN FGS.JOB<1>,1 SETTING JPTR THEN
                        AQTY<1,JPTR> = OSD.JOB.QTY<1,TEMP.INDX,R>
                     END
                     OSD.JOB.QTY<1,TEMP.INDX,R> = 0
                  NEXT R
                  ATYPE = "B"
                  *CALL ORDER.JOB.SEL(CONO,ORDNO,PDNO,WHNO,ATYPE,ATOT,AQTY)
                  GOSUB ORDER_JOB_SEL
                  FOR R = 1 TO RCNT
                     LOCATE TEMP.MFJ<1,1,R> IN FGS.JOB<1>,1 SETTING RINDX THEN
                        FGS.A.QTY<1,RINDX> = FGS.A.QTY<1,RINDX> - OLD.QTY<1,1,R>
                     END
                  NEXT R
                  RCNT = DCOUNT(AQTY,VM)
                  FOR R = 1 TO RCNT
                     IF AQTY<1,R> > 0 THEN
                        LOCATE FGS.JOB<1,R> IN OSD.JOB<1,TEMP.INDX>,1 SETTING JPTR ELSE
                           OSD.JOB<1,TEMP.INDX,JPTR> = FGS.JOB<1,R>
                        END
                        OSD.JOB.QTY<1,TEMP.INDX,JPTR> = AQTY<1,R>
                        FGS.A.QTY<1,4> = FGS.A.QTY<1,R> + AQTY<1,R>
                     END
                  NEXT R
                  TEMP.STR = CONVERT(VM,SVM,FGS.A.QTY)
                  ORIG.ALOC.AVL<1,LINDX> = TEMP.STR
                  OSD.A.QTY<1,TEMP.INDX> = ATOT
                  OSD.REL.NO<1,TEMP.INDX> = ""
                  OSD.REL.QTY<1,TEMP.INDX> = ""
                  N = LN
               END
            END ELSE
               ERRMSG = "Cannot locate warehouse (":OSD.WHSE<1,TEMP.INDX>:") for item # ":OSD.PROD<1,TEMP.INDX>
               GOTO 91000
            END
         END ELSE
            ERRMSG = "Cannot locate Product Line # ":INV.LINE
            GOTO 91000
         END
      END ELSE
         ERRMSG = "Cannot locate finished goods # ":OSD.PROD<1,TEMP.INDX>
         GOTO 91000
      END
   END
   
   MATBUILD TEMPMAT FROM ORD.DET.REC USING "ð"
   STATUS = RBO.setProperty("","RETARR",TEMPMAT)
RETURN 

7800* 
  TEMP.INDX = LN.NO
  LNFLG = 0
  ERR.MSG = 0
  BEGIN CASE
    CASE LN.NO = "" OR LN.NO = "END"
      LN.NO = 0
    CASE LN.NO < 1
    CASE OSD.KIT<1,TEMP.INDX> = "M"
      ERR.MSG = 1
      ERRMSG = "Cannot change a Product that is a member of a Kit"
      GOTO 91000
    CASE SUM(OSD.P.QTY<1,TEMP.INDX>)
      LNFLG = 5
    CASE OSD.KIT<1,TEMP.INDX> = "K"
      IF (SUM(OSD.FI.QTY<1,TEMP.INDX>) + SUM(OSD.FI.QTY<1,TEMP.INDX+1>)) > 0 THEN
        LNFLG = 3
      END
    CASE OSD.I.QTY<1,TEMP.INDX> > 0
      LNFLG = 1
    CASE OSD.S.QTY<1,TEMP.INDX> > 0
      LNFLG = 2
    CASE OSD.R.QTY<1,TEMP.INDX> > 0 OR OSD.RECP.NO<1,TEMP.INDX> # ""
      LNFLG = 3
    CASE OSD.KIT.R.QTY<1,TEMP.INDX> > 0
      LNFLG = 3
    CASE OSD.A.QTY<1,TEMP.INDX> > 0 OR OSD.JOB<1,TEMP.INDX> # ""
      LNFLG = 4
  END CASE
RETURN

**** ORDER.RESERVE.SEL .......START
ORDER_RESERVE_SEL:

*     ACTION = ("R-":LN);CUSTNO = ORD.CUST;RESV.TOT = RTOT;TMP.FI.QTY = RQTY;TMP.FI.NO = RSV.NO
*     TMP.REL.NO = REL.NO;TMP.REL.QTY = REL.QTY;RELNO = "";RELQTY = "";PICK.QTY = "" 

  TOP.LINES = DCOUNT(IWH.QTY.FI,VM)
  ACTION = FIELD(ACTION,"-",1)
  MATREAD FOS.REC FROM FNGD.ORDER.STATS, CONO:PDNO:"!":WHNO:"!":ORDNO:"!":PROD.SEQ:"!":KIT.TYPE ELSE
    MAT FOS.REC = ""
  END
  MTOT.RSV = SUM(IWH.RSV.FI)
  MTOT.QTY = SUM(IWH.QTY.FI)
  
  *MATREAD ORD.DET.REC FROM ORDER.DETAIL, CONO:ORDNO:"!":SHPNO ELSE
  *  MAT ORD.DET.REC = ""
  *END
  PTR = 1
  LOOP
    LOCATE PDNO IN OSD.PROD<1>,PTR SETTING PPTR ELSE PPTR = 0
    BEGIN CASE
      CASE PPTR = 0
        PTR = 0
      CASE (OSD.WHSE<1,PPTR> = WHNO) AND (OSD.PROD.SEQ<1,PPTR> = PROD.SEQ) AND (OSD.KIT<1,PPTR> = KIT.TYPE)
        PTR = 0
    END CASE
  UNTIL PTR = 0 DO
    PTR = PPTR + 1
  REPEAT
  ORIG.RSV.QTY = ""
  IF PPTR > 0 THEN
    RCNT = DCOUNT(OSD.RECP.NO<1,PPTR>,SM)
    FOR RPTR = 1 TO RCNT
      FREF = OSD.RECP.NO<1,PPTR,RPTR>
      LOCATE FREF IN IWH.RECP.NO<1>,1 SETTING FPTR THEN
        ORIG.RSV.QTY<1,FPTR> = ORIG.RSV.QTY<1,FPTR> + OSD.FI.QTY<1,PPTR,RPTR>
      END
    NEXT RPTR
  END
*
  RSV.QTY = ""
  REL.FLG = ""
  REL.NO  = ""
  REL.DATE = ""
  REL.QTY = ""
  MIN.QTY = "";* T20852
  RCNT = DCOUNT(TMP.FI.NO,SM)
  FOR RPTR = 1 TO RCNT
    FREF = TMP.FI.NO<1,1,RPTR>
    LOCATE FREF IN IWH.RECP.NO<1>,1 SETTING FPTR THEN
      RSV.QTY<1,FPTR> = RSV.QTY<1,FPTR> + TMP.FI.QTY<1,1,RPTR>
      MIN.QTY<1,FPTR> = MIN.QTY<1,FPTR> + PICK.QTY<1,1,RPTR>;* T20852
      P = DCOUNT(REL.FLG<1,FPTR>,SM)+ 1
      REL.FLG<1,FPTR,P> = "X"
      REL.NO<1,FPTR,P> = TMP.REL.NO<1,1,RPTR>
      REL.QTY<1,FPTR,P> = TMP.REL.QTY<1,1,RPTR>
      IF REL.NO<1,FPTR,P> = "" THEN
        MAT ORR.REC = ""
      END ELSE
        MATREAD ORR.REC FROM ORDER.RELEASE, CONO:REL.NO<1,FPTR,P> ELSE
          MAT ORR.REC = ""
        END
      END
      REL.DATE<1,FPTR,P> = ORR.DATE
    END
  NEXT RPTR
*
  FOR N = 1 TO TOP.LINES
    BLN = DCOUNT(REL.FLG<1,N>,SM)
    BEGIN CASE
      CASE BLN = 0
        REL.FLG<1,N> = "X"
        REL.QTY<1,N> = RSV.QTY<1,N>
      CASE REL.NO<1,N,BLN> = ""
        REL.QTY<1,N,BLN> = ""
        REL.QTY<1,N,BLN> = RSV.QTY<1,N> - SUM(REL.QTY<1,N>)
      CASE 1
        BLN = BLN + 1
        REL.FLG<1,N,BLN> = "X"
        REL.QTY<1,N,BLN> = RSV.QTY<1,N> - SUM(REL.QTY<1,N>)
    END CASE
  NEXT N
*
  IF RTYPE = "B" THEN
    IF ACTION = "R" THEN
      GOSUB 2000
      GOSUB 2500
    END
  END
  RTOT = RESV.TOT;RQTY = TMP.FI.QTY;RSV.NO = TMP.FI.NO;REL.NO = TMP.REL.NO;REL.QTY = TMP.REL.QTY
RETURN

2000 *
  RESV.DIF = RESV.TOT - SUM(RSV.QTY)
  BEGIN CASE
    CASE RESV.DIF > 0
      LIMIT = TOP.LINES
*
*---- Adjust current buckets
*
      FOR F = 1 TO LIMIT
        AVL = IWH.RSV.FI<1,F> + ORIG.RSV.QTY<1,F> - RSV.QTY<1,F>   ;* NA 03-01-94
        BEGIN CASE
          CASE AVL < 1
          CASE RSV.QTY<1,F> < 1
          CASE AVL < RESV.DIF
            RSV.QTY<1,F> = RSV.QTY<1,F> + AVL
            RESV.DIF = RESV.DIF - AVL
          CASE 1
            RSV.QTY<1,F> = RSV.QTY<1,F> + RESV.DIF
            RESV.DIF = 0; LIMIT = 0
        END CASE
      NEXT F
*
*---- Adjust new buckets
*
      FOR F = 1 TO LIMIT
        AVL = IWH.RSV.FI<1,F> + ORIG.RSV.QTY<1,F> - RSV.QTY<1,F>   ;* NA 03-01-94
        BEGIN CASE
          CASE AVL < 1
          CASE AVL < RESV.DIF
            RSV.QTY<1,F> = RSV.QTY<1,F> + AVL
            RESV.DIF = RESV.DIF - AVL
          CASE 1
            RSV.QTY<1,F> = RSV.QTY<1,F> + RESV.DIF
            RESV.DIF = 0; LIMIT = 0
        END CASE
      NEXT F
    CASE RESV.DIF < 0
      RESV.DIF = 0 - RESV.DIF
      LIMIT = TOP.LINES
      FOR F = LIMIT TO 1 STEP -1 UNTIL RESV.DIF = 0
        BEGIN CASE
          CASE RSV.QTY<1,F> < 1
          CASE RSV.QTY<1,F> < RESV.DIF
            RESV.DIF = RESV.DIF - RSV.QTY<1,F>
            RSV.QTY<1,F> = 0
          CASE 1
            RSV.QTY<1,F> = RSV.QTY<1,F> - RESV.DIF
            RESV.DIF = 0
        END CASE
      NEXT F
  END CASE
  RESV.TOT = SUM(RSV.QTY)
RETURN
*
*---- REBUILD ORDER DETAIL DATA
2500 *
   TMP.FI.NO = ""
   TMP.FI.QTY = ""
   TMP.REL.NO = ""
   TMP.REL.QTY = ""
   P = 0
   FCNT = TOP.LINES
   FOR FPTR = 1 TO FCNT
    RQTY = RSV.QTY<1,FPTR>
    IF RQTY > 0 THEN
      RCNT = DCOUNT(REL.FLG<1,FPTR>,SM)
      FOR RPTR = 1 TO RCNT            ;* NA 02-25-94
        IF REL.NO<1,FPTR,RPTR> = "" THEN REL.QTY<1,FPTR,RPTR> = ""            ;* NA 02-25-94
      NEXT RPTR            ;* NA 02-25-94
      FOR RPTR = 1 TO RCNT
        P = P + 1
        TMP.FI.NO<1,1,P> = IWH.RECP.NO<1,FPTR>
        TMP.FI.QTY<1,1,P> = REL.QTY<1,FPTR,RPTR>
        TMP.REL.NO<1,1,P> = REL.NO<1,FPTR,RPTR>
        TMP.REL.QTY<1,1,P> = REL.QTY<1,FPTR,RPTR>
        RQTY = RQTY - REL.QTY<1,FPTR,RPTR>
      NEXT RPTR
      IF RQTY > 0 THEN
        TMP.FI.NO<1,1,P> = IWH.RECP.NO<1,FPTR>
        TMP.FI.QTY<1,1,P> = TMP.FI.QTY<1,1,P> + RQTY
      END
    END
   NEXT FPTR
RETURN
**** ORDER.RESERVE.SEL .......END

**** ORDER.JOB.SEL .........START
***** THE FOLLOWING THREE BLOCKS OF CODE ARE PART OF THE ORDER.JOB.SEL SUBROUTINE WHICH IS ALL THAT NEEDED FROM IT FOR THIS FILE
ORDER_JOB_SEL:
   ALOC.TOT = ATOT;ALOC.QTY = AQTY
   LINES = DCOUNT(FGS.JOB,VM)
   S.A.QTY = ""; S.CUST = ""; S.DATE = ""
   LN = 0; IWH.ID = CONO:PDNO:"!":WHNO
   FOR I = 1 TO LINES
      MATREAD FJS.REC FROM FNGD.JOB.STATS, IWH.ID:"!":FGS.JOB<1,I> ELSE MAT FJS.REC = ""
      S.CUST<I> = FJS.CUST
      S.DATE<I> = FJS.DATE
      LOCATE ORDNO IN FJS.ORD<1>,1 SETTING OLOC THEN
        IF FJS.ORD.QTY<1,OLOC> > ALOC.QTY<1,I> THEN
          S.A.QTY<I> = FJS.A.QTY - FJS.ORD.QTY<1,OLOC>
        END ELSE
          S.A.QTY<I> = FJS.A.QTY - ALOC.QTY<1,I>
        END
      END ELSE
        S.A.QTY<I> = FJS.A.QTY
      END
      IF S.A.QTY<I> < 0 THEN S.A.QTY<I> = 0
      S.A.QTY<I> = FJS.M.QTY - FJS.F.QTY - S.A.QTY<I>
      IF S.A.QTY<I> < 0 THEN S.A.QTY<I> = 0
      IF LN = 0 THEN
        IF FJS.M.QTY - FJS.A.QTY > 0 THEN
          LN = I
        END
      END
   NEXT I
   IF LN = 0 THEN LN = 1
   *
   *---- Adjust job allocations
   IF ATYPE = "B" THEN
      ALOC.DIF = ALOC.TOT - SUM(ALOC.QTY)
      BEGIN CASE
         CASE ALOC.DIF > 0
           LIMIT = LINES
         *
         *---- Adjust current allocated jobs
         *
           FOR A = 1 TO LIMIT
             AVL = S.A.QTY<A> - ALOC.QTY<1,A>
             BEGIN CASE
               CASE ALOC.QTY<1,A> < 1
               CASE AVL < 1
               CASE AVL < ALOC.DIF
                 ALOC.QTY<1,A> = ALOC.QTY<1,A> + AVL
                 ALOC.DIF = ALOC.DIF - AVL
               CASE 1
                 ALOC.QTY<1,A> = ALOC.QTY<1,A> + ALOC.DIF
                 ALOC.DIF = 0; LIMIT = 0
             END CASE
           NEXT A
         *
         *---- Allocate new jobs
         *
           FOR A = 1 TO LIMIT
             AVL = S.A.QTY<A> - ALOC.QTY<1,A>
             BEGIN CASE
               CASE AVL < 1
               CASE AVL < ALOC.DIF
                 ALOC.QTY<1,A> = ALOC.QTY<1,A> + AVL
                 ALOC.DIF = ALOC.DIF - AVL
               CASE 1
                 ALOC.QTY<1,A> = ALOC.QTY<1,A> + ALOC.DIF
                 ALOC.DIF = 0; LIMIT = 0
             END CASE
           NEXT A
         CASE ALOC.DIF < 0
           ALOC.DIF = 0 - ALOC.DIF
           LIMIT = LINES
           FOR A = 1 TO LIMIT
             BEGIN CASE
               CASE ALOC.QTY<1,A> < 1
               CASE ALOC.QTY<1,A> < ALOC.DIF
                 ALOC.DIF = ALOC.DIF - ALOC.QTY<1,A>
                 ALOC.QTY<1,A> = 0
               CASE 1
                 ALOC.QTY<1,A> = ALOC.QTY<1,A> - ALOC.DIF
                 ALOC.DIF = 0; LIMIT = 0
             END CASE
           NEXT A
      END CASE
      ALOC.TOT = SUM(ALOC.QTY)
   END
   ATOT = ALOC.TOT;AQTY = ALOC.QTY
RETURN

91000*
   STATUS = RBO.setProperty("","ServerStatus",1)
   STATUS = RBO.setProperty("","ServerMessage",ERRMSG)
RETURN
