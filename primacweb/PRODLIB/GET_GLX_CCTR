SUBROUTINE GET_GLX_CCTR
********************************************************************************
*   Program name :- GET_GLX_CCTR
*   Created:- 12/9/2002
*------------------------------------------------------------------------------*
*
* In Properties:
* --------------
* ID,PERIOD,ACCT,DIV,DEPT
*
* Out Properties:
* ---------------
* CostCenterCodes,CostCenterCodesDescs
********************************************************************************
$INCLUDE WWINSERT RBO.H

* Insert method code here
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE PMC.CPYLIB DIVISION
$INCLUDE PMC.CPYLIB DEPARTMENT
$INCLUDE PMC.CPYLIB COST.CNTR
$INCLUDE GLS.CPYLIB GLX
$INCLUDE GLS.CPYLIB GLM
$INCLUDE GLS.CPYLIB COA.BAL
$INCLUDE GLS.CPYLIB ACCT.TYPE
$INCLUDE GLS.CPYLIB ACCT.CATG
$INCLUDE GLS.CPYLIB ACCT.SUB.CATG
$INCLUDE GLS.CPYLIB CATG.AND.SUB
$INCLUDE GLS.CPYLIB GLX
$INCLUDE CPYLIB CHAR

* Open files
ERRMSG = ''
CALL RBO_OPEN_FILE('GLX',GLX,ERRMSG)
CALL RBO_OPEN_FILE('GLM',GLM.FILE,ERRMSG)
CALL RBO_OPEN_FILE('GLA',GLA.FILE,ERRMSG)
CALL RBO_OPEN_FILE('DIVISION',DIVISION,ERRMSG)
CALL RBO_OPEN_FILE('DEPARTMENT',DEPARTMENT,ERRMSG)
CALL RBO_OPEN_FILE('COST.CNTR',COST.CNTR,ERRMSG)
CALL RBO_OPEN_FILE('CO.COA.BAL',CO.COA.BAL,ERRMSG)
CALL RBO_OPEN_FILE('CC.COA.BAL',CC.COA.BAL,ERRMSG)
CALL RBO_OPEN_FILE('DP.COA.BAL',DP.COA.BAL,ERRMSG)
CALL RBO_OPEN_FILE('DV.COA.BAL',DV.COA.BAL,ERRMSG)
CALL RBO_OPEN_FILE('CONTROL',CONTROL,ERRMSG)
CALL RBO_OPEN_FILE('COMPANY',COMPANY,ERRMSG)
IF ERRMSG THEN
  CALL RBO_ERROR_SUB(ERRMSG)
  RETURN
END

* Get properties
STATUS = RBO.getProperty('','ID',ID)
STATUS = RBO.getProperty('','PERIOD',PERIOD)
STATUS = RBO.getProperty('','ACCT',ACCT)
STATUS = RBO.getProperty('','DIV',DIV)
STATUS = RBO.getProperty('','DEPT',DEPT)

* Initialize variables
ALL.DIV = ''
GEN.DIV = '00'
ALL.DEPT = ''
GEN.DEPT = '00'
ALL.CCTR = ''
GEN.CCTR = '000'
LINE.CODE = ''

* Get CONO
CONO = ID[1,3]
MATREAD COMP.REC FROM COMPANY, CONO ELSE
  ERRMSG = 'Invalid Company ID (':CONO:').'
  CALL RBO_ERROR_SUB(ERRMSG); RETURN
END

* Get period
READ FISCAL.REC FROM CONTROL, CONO : 'FISCAL' ELSE FISCAL.REC = ''
READ PERIOD.REC FROM CONTROL, CONO : 'ACCT.PERIODS' ELSE 
  PERIOD.REC = ''
  PERIOD.REC<1> = 12
END
NUM.PERIODS = PERIOD.REC<1>
SEL.PERIOD = FISCAL.REC<1>
IF PERIOD THEN SEL.PERIOD = PERIOD

IF SEL.PERIOD # FISCAL.REC<1> THEN
  GLM = GLA.FILE
END ELSE
  GLM = GLM.FILE
END
YR.OFFSET = (SEL.PERIOD[1,4] - FISCAL.REC<1>[1,4]) * NUM.PERIODS
PER.OFFSET = SEL.PERIOD[5,2] + YR.OFFSET
OPN = CB.OPN + PER.OFFSET

IF PERIOD[5,2] = NUM.PERIODS THEN
  OPNVAL = 55
END ELSE
  OPNVAL = OPN+1
END

IN.ACCT.LEN = LEN(CO.ACCT.PIC)
BASE.LEN = FIELD(CO.ACCT.STRUC,"-",1)
IF NOT(NUM(BASE.LEN)) OR BASE.LEN > IN.ACCT.LEN THEN
  ERRMSG = 'Error in the account structure.'
  CALL RBO_ERROR_SUB(ERRMSG); RETURN
END

* Select CCTRs
XCODE = 0
XDESC = 'Select'
XCODE<2> = 'S'
XDESC<2> = 'Summary'
GOSUB SELECT.CCTR

* Set properties
STATUS = RBO.setProperty('','CostCenterCodes',"S" : VM : CONVERT(AM,VM,XCODE))
STATUS = RBO.setProperty('','CostCenterCodesDescs',"S-Summary" : VM : CONVERT(AM,VM,XDESC))

* End of method code
RETURN

SELECT.CCTR:
  ;* Select Cost Centers
  IF SEL.PERIOD = FISCAL.REC<1> THEN
    READ ALL.CCTR FROM GLX, CONO : DIV : DEPT : ACCT ELSE ALL.CCTR = ''
  END ELSE
    SELID = CONO : DIV : DEPT : ACCT
    GOSUB GET.ALL.CCTR
  END
  IF ALL.CCTR = '' THEN
    ERRMSG<1,-1> = 'No activities for department - ' : DEPT
  END
  ;* Insert Cost Center descriptions
  XCODE = ALL.CCTR
  XDESC = ''
  XLINES = DCOUNT(ALL.CCTR,AM)
  FOR XLN = 1 TO XLINES
    IF XCODE<XLN> = GEN.CCTR THEN
      MAT CCTR.REC = ''
      CCTR.DESC = 'General Cost Center'
    END ELSE
      MATREAD CCTR.REC FROM COST.CNTR, CONO : XCODE<XLN> ELSE
        MAT CCTR.REC = ''
        CCTR.DESC = 'Unknown'
      END
    END
    XDESC<XLN> =  XCODE<XLN> :"-": CCTR.DESC
  NEXT XLN
RETURN

GET.ALL.CCTR:
  STMT = 'SSELECT GLA WITH CONO_DV_DP_ACCT = ' : QUOTE(SELID)
  STMT:= ' AND WITH PERIOD = ' : QUOTE(SEL.PERIOD)
  UDTEXECUTE STMT CAPTURING CAP RETURNING RET
  ALL.CCTR = ''; LCD.CT = 1
  LOOP
    READNEXT GLAID ELSE EXIT
    LOCATE GLAID[8,3] IN ALL.CCTR,1 SETTING DFND ELSE
      ALL.CCTR<LCD.CT> = GLAID[8,3]
      LCD.CT = LCD.CT + 1
    END
  REPEAT
RETURN

