*********************************************************************
* REVISION    - [12.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - ICSBP
* PROGRAM     - ICS.EOM.CLOSE
* BY          - ZIAD YAMOUT, C.B.A
* DATE        - 02/28/87
* DESCRIPTION -
*MODIFIED   - (05/17/05) BY ZAHOOR AHMED
*         FOR printflag and EOD.ERROR flag

*ENDDOC
*********************************************************************
*
***** INSERT FILE EQUATE
*
$INCLUDE WWINSERT RBO.H
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE PMC.CPYLIB SALESDATES
$INCLUDE PMC.CPYLIB FISCAL
$INCLUDE PMC.CPYLIB EOM.TRANS
$INCLUDE PMC.CPYLIB EOM.TRANS.HIST              ; * T25975
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV.WHSE.LOC
$INCLUDE ICS.CPYLIB INV.STATS
$INCLUDE ICS.CPYLIB INV.JOB.STATS
$INCLUDE ICS.CPYLIB INV_AUDIT_HIST
$INCLUDE ICS.CPYLIB INV_AUDIT_BAL
$INCLUDE ICS.CPYLIB INV_SERIAL
$INCLUDE ICS.CPYLIB INV_RECP_WHSE
$INCLUDE ICS.CPYLIB INV_RECEIPTS
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE PMC.CPYLIB PO
$INCLUDE ICS.CPYLIB PO.RSKI.XREF
$INCLUDE ICS.CPYLIB PO.MAN.XREF
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE GLS.CPYLIB GLA
$INCLUDE PMC.CPYLIB COA
$INCLUDE GLS.CPYLIB COA.SYS
$INCLUDE PMC.CPYLIB POST.REJECTS
$INCLUDE CPYLIB CHAR
*
DIM SAVE.ITB.REC(15)
MAT SAVE.ITB.REC = ""
***** SETUP ERRMSG ROUTINE
*
ERRMSG=''
REJECT.RPT.PRT=''
* ERROR.FLAG is for any error from EOD_CLOSE_PreProcess & Printfalg is view/mail/print/file
Printfalg = ''
ERROR.FLAG = ''
EMAIL_ADDR = ''

*
STATUS = RBO.getProperty('','ID',ID)
STATUS = RBO.getProperty('','PMCProperty',PMCProperty)
STATUS = RBO.getProperty('','PRINT_FLAG',PRINT.FLAG)
STATUS = RBO.getProperty('','ERR_FLAG',ERROR.FLAG)
STATUS = RBO.getProperty('','MAIL_FLAG',Mailflag)
STATUS = RBO.getProperty('','EmailAddress',EMAIL_ADDR)
CONO = ID[1,3]
STATUS = RBO.getProperty('','DM_Flag',D.M.FLG)
STATUS = RBO.getProperty('','FR_CURR_PER',FR.CURR.PER)
STATUS = RBO.getProperty('','FR_CURR_DATE',FR.CURR.DATE)
STATUS = RBO.getProperty('','FR_NEXT_PER',FR.NEXT.PER)
STATUS = RBO.getProperty('','FR_NEXT_DATE',FR.NEXT.DATE)
STATUS = RBO.getProperty('','FR_PRINT',FR.PRINT)
STATUS = RBO.getProperty('','FR_CLOSE_DATE',FR.CLOSE.DATE)
STATUS = RBO.getProperty('','FR_D_M_FLG',FR.D.M.FLG)
STATUS = RBO.getProperty('','DivPos',POS)
STATUS = RBO.getProperty('','AllDivsCount',ALL.DIVS.COUNT)
FOR P = 1 TO DCOUNT(FR.CURR.PER,VM)
   IF INDEX(FR.CURR.DATE<1,P>,'/',1) > 0 THEN FR.CURR.DATE<1,P> = ICONV(FR.CURR.DATE<1,P>,'D2/')
   IF INDEX(FR.NEXT.DATE<1,P>,'/',1) > 0 THEN FR.NEXT.DATE<1,P> = ICONV(FR.NEXT.DATE<1,P>,'D2/')
   IF INDEX(FR.CLOSE.DATE<1,P>,'/',1) > 0 THEN FR.CLOSE.DATE<1,P> = ICONV(FR.CLOSE.DATE<1,P>,'D2/')
NEXT P
*
*Get the printflag view/Email/File/Print
*
BEGIN CASE
   CASE PRINT.FLAG = 'PrintData'
      Printfalg = 'View'
   CASE PRINT.FLAG = 'EmailData'
      Printfalg = 'Email'
   CASE PRINT.FLAG = 'File'
      Printfalg = 'Print'
   CASE 1
      Printfalg = 'Print'
END CASE
STATUS = RBO.getProperty('','DivCode',DIV.CODE)
IF DIV.CODE = '' THEN DIV.CODE = 'ALL'
IF D.M.FLG = "PERIOD" THEN
   RPT.PER = "PERIOD"
   EOY = 1
   FOR I = 1 TO ALL.DIVS.COUNT UNTIL NOT(EOY)
      IF I # POS THEN
         IF FR.CURR.PER<1,I>[5,2] # '01' THEN EOY = 0
      END ELSE
         IF FR.NEXT.PER<1,I>[5,2] # '01' THEN EOY = 0
      END
      DIV.EOY = 0
      IF FR.NEXT.PER<1,POS>[5,2] = 01 THEN DIV.EOY = 1
   NEXT I
END ELSE
   RPT.PER = "DAY"
   EOY = 0
   DIV.EOY = 0
END
*
**** INTITIALIZATION
*
TODAY = DATE()
UNKNOWN = "NOT ON FILE"
SYS.FISCAL = "ICFISCAL"
PROG.ID = @TTY:"!":CONO:"!ICS.EOM"
NORETURN=0
EOM.LIST3='' ; EOM.LIST2='' ; EOM.LIST1=''
IAT.LIST1='' ; INAH.EOM.LIST='' ; IRW.LIST9='' ; IWH.LIST1=''
*
***** OPEN FILES
*
TRANFILE='ICS.EOM.TRANS':CONO:DIV.CODE
REJECTFILE='ICS.POST.REJECTS':CONO:DIV.CODE
ICFTRANS='ICF.EOM.TRANS':CONO:DIV.CODE
ICFREJECTS='ICF.POST.REJECTS':CONO:DIV.CODE
OPEN "","CONTROL" TO CONTROL ELSE
   ERRMSG="CONTROL FILE MISSING"
   GOTO 93000
END
OPEN "",TRANFILE TO EOM.TRANS ELSE
   ERRMSG = "YOU NEED TO RUN END OF ":RPT.PER:" POSTING BEFORE YOU CLOSE THE PERIOD"   
   GOTO 93000
END
OPEN "",REJECTFILE TO POST.REJECTS ELSE
   ERRMSG = "YOU NEED TO RUN END OF ":RPT.PER:" POSTING BEFORE YOU CLOSE THE PERIOD"
   GOTO 93000
END
OPEN "","COMPANY" TO COMPANY ELSE ERRMSG="COMPANY FILE MISSING";GOTO 93000
OPEN "","SECURITY" TO SECURITY ELSE ERRMSG="SECURITY FILE MISSING";GOTO 93000
OPEN "","INVENTORY" TO INVENTORY ELSE
   ERRMSG="INVENTORY FILE MISSING";GOTO 93000
END
OPEN "","INV.WHSE" TO INV.WHSE ELSE
   ERRMSG="INV.WHSE FILE MISSING";GOTO 93000
END
OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE
   ERRMSG="INV.WHSE.LOC FILE MISSING";GOTO 93000
END
OPEN "","INV_AUDIT_HIST" TO INV_AUDIT_HIST ELSE
   ERRMSG="INV_AUDIT_HIST FILE MISSING";GOTO 93000
END
OPEN "","INV_AUDIT_TAG" TO INV_AUDIT_TAG ELSE
   ERRMSG="INV_AUDIT_TAG FILE MISSING";GOTO 93000
END
OPEN "","INV_AUDIT_BAL" TO INV_AUDIT_BAL ELSE
   ERRMSG="INV_AUDIT_BAL FILE MISSING";GOTO 93000
END
OPEN "","INV_RECEIPTS" TO INV_RECEIPTS ELSE
   ERRMSG="INV_RECEIPTS FILE MISSING";GOTO 93000
END
OPEN "","INV_RECEIPTS_TEMP" TO INV_RECEIPTS_TEMP ELSE
   ERRMSG="INV_RECEIPTS_TEMP FILE MISSING";GOTO 93000
END
OPEN "","INV_SERIAL" TO INV_SERIAL ELSE
   ERRMSG="INV_SERIAL FILE MISSING";GOTO 93000
END
OPEN "","INV_SERIAL_DELETED" TO INV_SERIAL_DELETED ELSE
   ERRMSG="INV_SERIAL_DELETED FILE MISSING";GOTO 93000     ;*T24023
END
OPEN "","INV_RECP_WHSE" TO INV_RECP_WHSE ELSE
   ERRMSG="INV_RECP_WHSE FILE MISSING";GOTO 93000
END
OPEN "","INV_RECP_WHSE_TEMP" TO INV_RECP_WHSE_TEMP ELSE
   ERRMSG="INV_RECP_WHSE FILE MISSING";GOTO 93000
END
OPEN "","CATEGORY" TO CATEGORY ELSE
   ERRMSG="CATEGORY FILE MISSING";GOTO 93000
END
OPEN "","INV.STATS" TO INV.STATS ELSE
   ERRMSG="INV.STATS FILE MISSING";GOTO 93000
END
OPEN "","INV.JOB.STATS" TO INV.JOB.STATS ELSE
   ERRMSG="INV.JOB.STATS FILE MISSING";GOTO 93000
END
OPEN "","PO" TO PO ELSE ERRMSG="PO FILE IS MISSING";GOTO 93000
OPEN "","PO.RSKI.XREF" TO PO.RSKI.XREF ELSE
   ERRMSG="PO.RSKI.XREF FILE IS MISSING";GOTO 93000
END
OPEN "","PO.RSKI.XREF.DELETED" TO PO.RSKI.XREF.DELETED ELSE
   ERRMSG="PO.RSKI.XREF.DELETED FILE IS MISSING";GOTO 93000     ;*T24023
END
OPEN "","PO.MAN.XREF" TO PO.MAN.XREF ELSE
   ERRMSG="PO.MAN.XREF FILE IS MISSING";GOTO 93000
END
OPEN "","PO.MAN.XREF.DELETED" TO PO.MAN.XREF.DELETED ELSE
   ERRMSG="PO.MAN.XREF.DELETED FILE IS MISSING";GOTO 93000     ;*T24023
END
OPEN "","WAREHOUSE" TO WAREHOUSE ELSE ERRMSG="WAREHOUSE FILE IS MISSING";GOTO 93000
OPEN "","EOD.HIST" TO EOD.HIST ELSE ERRMSG="EOD.HIST FILE IS MISSING";GOTO 93000
OPEN "","ICS.EOM.TRANS.HIST" TO ICS.EOM.TRANS.HIST ELSE ERRMSG="ICS.EOM.TRANS.HIST FILE IS MISSING";GOTO 93000
*
*If ERROR.FLAG = 1 from EOD_CLOSE_PreProcess then call Generatereport_Sub
*
WRITE " ERROR.FLAG" : ERROR.FLAG ON CONTROL, "ERR"
IF ERROR.FLAG = 1 THEN
   GOTO 90000
END
MATREAD COMP.REC FROM COMPANY,CONO ELSE
   ERRMSG = "CANNOT LOCATE COMPANY # ":CONO; GOTO 93000
END
IN.ACCT.LEN = LEN(CO.ACCT.PIC)
ACCT.LEN = IN.ACCT.LEN + 10
EQV.FLG=''
IF CO.GLS # "N" THEN
   IF CO.GL.LINK<1,5> = "Y" THEN
      OPEN "","GLA" TO GLA ELSE ERRMSG="GLA FILE IS MISSING";GOTO 93000
   END
   OPEN "","COA" TO COA ELSE ERRMSG="COA FILE IS MISSING";GOTO 93000
   EQV.FLG = 1
   OPEN "","COA.EQUIV" TO COA.EQUIV ELSE EQV.FLG = 0
END
READ PERIOD.REC FROM CONTROL, CONO:"ACCT.PERIODS" ELSE
   PERIOD.REC = 12
END
NUM.PERIODS = PERIOD.REC
READ SECURITY.REC FROM CONTROL, CONO:'DIV.SECURITY' ELSE
   SECURITY.REC = 'N'; SECURITY.REC<2> = 'N'
END
DIV.POS=POS
WRITE CO.OPS : " ~~ " ON CONTROL, "JJJ"
IF CO.OPS = "Y" THEN
   READ FNGD.EOM FROM CONTROL, CONO:"FNGD.EOM" ELSE FNGD.EOM = ""
   BEGIN CASE
      CASE FNGD.EOM<7,POS> = "PERIOD" AND D.M.FLG = "PERIOD" 
         OPEN "",ICFTRANS TO TEMP.EOM ELSE
            ERRMSG = "YOU NEED TO RUN ICF END OF ":D.M.FLG:" POSTING BEFORE YOU CLOSE THE ":D.M.FLG
            STATUS = RBO.setProperty('','EOD_ERROR',ERRMSG)
            GOTO 93000
 *          GOTO 90000 ;*Ignore Further Process call Generatereport_Sub
         END
         OPEN "",ICFREJECTS TO TEMP.POST ELSE
            ERRMSG = "YOU NEED TO RUN ICF END OF ":D.M.FLG:" POSTING BEFORE YOU CLOSE THE ":D.M.FLG
            STATUS = RBO.setProperty('','EOD_ERROR',ERRMSG)
            GOTO 93000
*            GOTO 90000 ;*Ignore Further Process call Generatereport_Sub
         END
      CASE FNGD.EOM<7,POS> = "DAY" AND D.M.FLG = "PERIOD"
         ERRMSG = 'YOU NEED TO RUN ICF END OF PERIOD POSTING/LISTING BEFORE YOU CLOSE THE PERIOD'
         GOTO 93000
      CASE FNGD.EOM<1,POS> = "" AND D.M.FLG = "PERIOD" 
         ERRMSG = 'YOU NEED TO RUN ICF END OF PERIOD POSTING BEFORE YOU CLOSE THE PERIOD'
         GOTO 93000
      CASE FNGD.EOM<2,POS> = "" AND D.M.FLG = "PERIOD" 
         ERRMSG = 'YOU NEED TO PRINT THE ICF END OF PERIOD SUMMARY REPORT BEFORE CLOSING'
         GOTO 93000
   END CASE
   FNGD.EOM<3,POS> = FR.CURR.DATE<1,POS>
   FNGD.EOM<4,POS> = FR.CURR.PER<1,POS>
   WRITE FNGD.EOM ON CONTROL, CONO:"FNGD.EOM"
END

CLEARFILE POST.REJECTS
PRR.SEQ = 10000
CURR.PERIOD=FR.CURR.PER<1,DIV.POS>; NEXT.PERIOD=FR.NEXT.PER<1,DIV.POS>
CURR.ODATE=FR.CURR.DATE<1,DIV.POS> ; * T26556
*FISCAL.FLAG='IC'
*CALL GET.NEXT.PERIOD (CONO,DIV.CODE,FISCAL.FLAG,NEXT.PERIOD,ERR.FLG,ERR)
*
***** MAIN PROCESSING
*

IF D.M.FLG = "PERIOD" THEN
   IWH.LIST1 = ""
   IF DIV.CODE='ALL' THEN
      *T27362 v
      CMD='SELECT INV.WHSE WITH CONO="':CONO:'"'
      UDTEXECUTE CMD CAPTURING ERROR RETURNING MSG 
   END ELSE
    *  CMD='SELECT INV.WHSE WITH IWH_DIV="':DIV.CODE:'"'
      CMD='SELECT INV.WHSE WITH CONO = "':CONO:'" AND WITH IWH_DIV="':DIV.CODE:'"'
      UDTEXECUTE CMD CAPTURING ERROR RETURNING MSG
   *   IF MSG<1,1,1> = "41" THEN                 
   *      SELECT INV.WHSE TO IWH.LIST1
   *   END                                       
   END
WRITE " ~~ " ON CONTROL, "788"
   IF SYSTEM(11) > 0 THEN
      SELECT INV.WHSE TO IWH.LIST1
*T27362 ^
      WRITE "INV.WHSE" ON CONTROL , PROG.ID
      DATA = 1
      LOOP
         READNEXT IWH.ID FROM IWH.LIST1 ELSE DATA = 0
 *     ERR=0
      WHILE DATA DO
         ERR=0
         PROD.NUM = FIELD(IWH.ID,"!",1)[4,99]      ;* C40690
         WHSE = FIELD(IWH.ID,"!",2)                ;* C40690
         GOSUB PROCESS.INV.WHSE
         IF NOT(ERR) THEN
            GOSUB PROCESS.INV_RECP_WHSE
            IF NOT(ERR) THEN
               GOSUB PROCESS.INV_AUDIT_BAL
            END
         END
         RELEASE INV.WHSE,IWH.ID
      REPEAT
   END
WRITE " ~~ " ON CONTROL, "789"
*T27362
   IF CO.GLS = "N" OR CO.GL.LINK<1,5>#'Y' THEN  
      GOSUB PROCESS.EOM.TRANS.2
   END ELSE
      GOSUB PROCESS.EOM.TRANS.1
      GOSUB PROCESS.EOM.TRANS.2
   END
   SELECT EOM.TRANS TO EOM.LIST3
   READ ICFISCAL FROM CONTROL, CONO : "ICFISCAL" ELSE ICFISCAL = ""
   READNEXT ETR.ID ELSE
      IF D.M.FLG = "PERIOD" THEN
         IF FR.NEXT.PER<1,POS> = "" THEN
       	FR.NEXT.PER<1,POS> = ICFISCAL<3>
         END
         IF FR.NEXT.DATE<1,POS> = "" THEN
		FR.NEXT.DATE<1,POS> = ICFISCAL<4>
         END
         FR.CURR.PER<1,POS> = FR.NEXT.PER<1,POS>
         FR.CURR.DATE<1,POS> = FR.NEXT.DATE<1,POS>
         FR.CLOSE.DATE<1,POS> = TODAY
         STATUS = RBO.setProperty('','FR_CURR_PER',FR.CURR.PER)
         STATUS = RBO.setProperty('','FR_CURR_DATE',FR.CURR.DATE)
         STATUS = RBO.setProperty('','FR_CLOSE_DATE',FR.CLOSE.DATE)
      END
      FR.NEXT.PER<1,POS> = ""; FR.NEXT.DATE<1,POS> = ""
      FR.PRINT<1,POS> = ""; FR.D.M.FLG<1,POS> = ""
      STATUS = RBO.setProperty('','FR_NEXT_PER',FR.NEXT.PER)
      STATUS = RBO.setProperty('','FR_NEXT_DATE',FR.NEXT.DATE)
      STATUS = RBO.setProperty('','FR_PRINT',FR.PRINT)
      STATUS = RBO.setProperty('','FR_D_M_FLG',FR.D.M.FLG)
      DELETE CONTROL, PROG.ID
      GOSUB 90000
      GOSUB PROCESS.INV_AUDIT_TAG
      *CMD='DELETE.FILE ': TRANFILE :' FORCE'
      *UDTEXECUTE CMD CAPTURING JUNK
      *IF REJECT.RPT.PRT = '' THEN
       *  CMD='DELETE.FILE ': REJECTFILE : ' FORCE'
       *  UDTEXECUTE CMD CAPTURING JUNK
      *END
      IF ERRMSG # '' THEN GOTO 93000
      GOTO 99999
   END
   NORETURN=1
   GOTO 90000
**************************************************************************
**** S U B R O U T I N E S ***********************************************
**************************************************************************
*
******************
PROCESS.INV.WHSE: 
******************
*
   ERR=0
   IF IWH.ID[1,3] # CONO THEN ERR=1
   IF NOT(ERR) THEN
      MATREADU IWH.REC FROM INV.WHSE, IWH.ID THEN
*T27362 v Save receipt data to restore prior to write - BUILD.IWH.FI will
*         only build receipt data thru next period.
         SAVE.IWH.RECP.NO = IWH.RECP.NO
         SAVE.IWH.RECP.PERIOD = IWH.RECP.PERIOD
         SAVE.IWH.RECP.ENT.DATE = IWH.RECP.ENT.DATE
*T27362 ^
         IF IWH.RECP.NO#'' THEN
            ERR.FLG=''; ERRMSG=''
            ;*include receipts one period in the future so avg.cost
            ;*can be recalculated for qty received in future period.
            PERIOD=NEXT.PERIOD<1,1>
            GOSUB BUILD.IWH.FI
         END ELSE
            ERR=1
         END
      END ELSE
         MAT PRR.REC = "" ; ERR=1
         PRR.FILE = "INV.WHSE"
         PRR.ID = IWH.ID[4,99]
         PRR.ERR = "CANNOT LOCATE"
         PRR.SEQ = PRR.SEQ + 1
         MATWRITE PRR.REC ON POST.REJECTS, PRR.SEQ
         RELEASE INV.WHSE, IWH.ID
      END
   END
   IF NOT(ERR) THEN
      MATREAD INV.REC FROM INVENTORY,  FIELD(IWH.ID,"!",1) ELSE
         MAT INV.REC = ""
      END
      IF INV.COST.WT + 0 = 0 THEN INV.COST.WT = 100
      MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
         MAT CATG.REC = ""
      END
      LCNT = DCOUNT(IWH.LOC,VM)
      LQTY = 0;LWIP = 0
      SQTY=0; S.ARR=''
      RQTY=0
      FOR L = LCNT TO 1 STEP -1 UNTIL (ERR)
         IWLO.ID = IWH.ID:"!":IWH.LOC<1,L>
         MATREADU IWLO.REC FROM INV.WHSE.LOC,IWLO.ID ELSE MAT IWLO.REC=''
         SCNT=DCOUNT(IWLO.SERIAL<1>,VM)
         SQTY = 0
         S.ARR='' ;*T27362
         FOR S = SCNT TO 1 STEP -1 
            ISTK.ID=CONO:IWLO.SERIAL<1,S>
*         MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID THEN
            MATREAD ISTK.REC FROM INV_SERIAL,ISTK.ID THEN
               LQTY+=ISTK.CUR.QTY
               SQTY+=ISTK.CUR.QTY
               RQTY+=ISTK.RSVB.QTY
               IF ISTK.CUR.QTY = 0 THEN
                  IF ISTK.RECP # '' THEN
*T28067 v
                     FUTR.DEPL=0
                     FOR F = 1 TO DCOUNT(ISTK.AUDIT.NO,VM)
                        MATREAD INAH.REC FROM INV_AUDIT_HIST,CONO:ISTK.AUDIT.NO<1,F> THEN
                           IF INAH.QTY < 0 AND INAH.PERIOD > CURR.PERIOD THEN
                              FUTR.DEPL -= INAH.QTY
                           END
                        END
                     NEXT F
                     IF FUTR.DEPL = 0 THEN
*T28067 ^

                        S.ARR<1,-1>=ISTK.ID[4,99]
*                  MATWRITE ISTK.REC ON INV_SERIAL_DELETED,ISTK.ID
*                  DELETE INV_SERIAL,ISTK.ID
                        DEL IWLO.SERIAL<1,S> ;*Added T27362
                     END ;*T28067
                  END
*            END ELSE
*               RELEASE INV_SERIAL,ISTK.ID
               END
            END ELSE
               DEL IWLO.SERIAL<1,S>
*            RELEASE INV_SERIAL,ISTK.ID
            END
         NEXT S
         ;* check location on hand vs. sum of all serial qty's for the loc
         IF SQTY#IWLO.LOC.ON.HAND+0 THEN
            MAT PRR.REC='' ; ERR=1
            PRR.FILE='INV.WHSE.LOC'
            PRR.ID=IWLO.ID[4,99]
            PRR.ERR='INV.WHSE.LOC ON HAND QTY=':IWLO.LOC.ON.HAND:' AND SUM = ':SQTY
            PRR.SEQ+=1
            MATWRITE PRR.REC ON POST.REJECTS,PRR.SEQ
*         RELEASE INV.WHSE,IWH.ID
            RELEASE INV.WHSE.LOC,IWLO.ID
         END ELSE
*T27362 v Need to purge zero serials regardless of TRK.LVL
*         IF CATG.TRK.LVL='S' THEN
            SCNT = DCOUNT(S.ARR,VM)
            FOR S = 1 TO SCNT
               SERIAL=S.ARR<1,S>
               ISTK.ID=CONO:SERIAL
               *MATREAD ISTK.REC FROM INV_SERIAL,ISTK.ID THEN
               MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID THEN
*T27362
                  IF CATG.TRK.LVL = 'S' THEN
                     RSXRF.ID=CONO:ISTK.PO.NO
                     MATREADU RSXRF.REC FROM PO.RSKI.XREF,RSXRF.ID THEN
                        LOCATE SERIAL IN RSXRF.RS.NO<1>,1 SETTING XP THEN
                           RSXRF.RS.NO = DELETE(RSXRF.RS.NO,1,XP,0)
                        END
                        IF RSXRF.RS.NO = "" THEN
                           MATWRITE RSXRF.REC ON PO.RSKI.XREF.DELETED,RSXRF.ID
                           DELETE PO.RSKI.XREF,RSXRF.ID
                        END ELSE
                           MATWRITE RSXRF.REC ON PO.RSKI.XREF,RSXRF.ID
                        END
                     END ELSE
                        RELEASE PO.RSKI.XREF,RSXRF.ID
                     END
                     PO.ID = RSXRF.ID
                     MATREADU PO.REC FROM PO, PO.ID THEN
                        RSMAN.ID = PO.ID:'!':ISTK.MANIFEST.NO
                        MATREADU RSMAN.REC FROM PO.MAN.XREF, RSMAN.ID THEN
                           LOCATE SERIAL IN RSMAN.RS.NO<1>,1 SETTING XPTR THEN
                              RSMAN.RS.NO = DELETE(RSMAN.RS.NO,1,XPTR,0)
                           END
                           IF RSMAN.RS.NO = "" THEN
                              MATWRITE RSMAN.REC ON PO.MAN.XREF.DELETED,RSMAN.ID
                              DELETE PO.MAN.XREF, RSMAN.ID
                              LOCATE ISTK.MANIFEST.NO IN PO.MAN<1>,1 SETTING MPTR THEN
                                 PO.MAN = DELETE(PO.MAN,1,MPTR,0)
                              END
                           END ELSE
                              MATWRITE RSMAN.REC ON PO.MAN.XREF, RSMAN.ID
                           END
                        END ELSE
                           RELEASE PO.MAN.XREF, RSMAN.ID
                           LOCATE ISTK.MANIFEST.NO IN PO.MAN<1>,1 SETTING MPTR THEN
                              PO.MAN = DELETE(PO.MAN,1,MPTR,0)
                           END
                        END
                        MATWRITE PO.REC ON PO,PO.ID
                     END ELSE
                        RELEASE PO, CONO:ISTK.PO.NO
                     END
                  END ;*T27362
                  MATWRITE ISTK.REC ON INV_SERIAL_DELETED,ISTK.ID
                  DELETE INV_SERIAL,ISTK.ID
               END ELSE
                  RELEASE INV_SERIAL,ISTK.ID
               END
            NEXT S
*T27362 END 
            MATWRITE IWLO.REC ON INV.WHSE.LOC,IWLO.ID
         END
*   MATWRITE IWLO.REC ON INV.WHSE.LOC,IWLO.ID 
      NEXT L
      IF NOT(ERR) THEN
         IF LQTY <> IWH.ON.HAND + 0 THEN
            MAT PRR.REC = "" ; ERR=1
            PRR.FILE = "INV.WHSE"
            PRR.ID = IWH.ID[4,99]
            PRR.ERR = "INV.WHSE ON HAND= ":IWH.ON.HAND:" AND LOC SUM = ":LQTY
            PRR.SEQ = PRR.SEQ + 1
            MATWRITE PRR.REC ON POST.REJECTS, PRR.SEQ
            RELEASE INV.WHSE, IWH.ID
         END
         IF CATG.TRK.LVL='G' THEN
            ;* for generally tracked items reservable qty. should
            ;* allways be same as current qty.
            IF RQTY#IWH.ON.HAND+0 THEN
               MAT PRR.REC = "" ; ERR=1
               PRR.FILE = "INV.WHSE"
               PRR.ID = IWH.ID[4,99]
               PRR.ERR='INV.WHSE ON HAND=':IWH.ON.HAND:' AND TRACKING SUM= ':RQTY
               PRR.SEQ = PRR.SEQ + 1
               MATWRITE PRR.REC ON POST.REJECTS, PRR.SEQ
               RELEASE INV.WHSE, IWH.ID
            END
         END
         IF NOT(ERR) THEN
            CALL INV.AVG.COST.MAINT(MAT IWH.REC,INV.COST.WT,CURR.PERIOD)
            IF DIV.EOY THEN
               ;* add code to delete receipts that have a quantity of 0 
               ;* once we decide how to do it.
            END
         END
      END
   END
   RETURN
*
**********************
PROCESS.INV_RECP_WHSE: 
**********************
*
   ERR=0
   RSVB=0
   CUR.QTY=0
   CUR.QTY=0
   CMD='SELECT INV_RECP_WHSE WITH PROD_WHSE_IDX="':CONO:PROD.NUM:'!':WHSE:'"' 
   UDTEXECUTE CMD CAPTURING ERROR RETURNING MSG 
*T27362 v
*IF MSG<1,1,1> = "41" THEN  
   IF SYSTEM(11) > 0 THEN
      SELECT INV_RECP_WHSE TO IRW.LIST9
   END ELSE
      ERR=1
      IF IWH.RECP.NO<1>#'' THEN
         MAT PRR.REC = "" ; ERR=1                  
         PRR.FILE = "INV_RECP_WHSE"                     
         PRR.ID='NO IDS'
         PRR.ERR='No INV_RECP_WHSE records exist for prod ':PROD.NUM:' and whse ':WHSE
         PRR.SEQ = PRR.SEQ + 1                     
         MATWRITE PRR.REC ON POST.REJECTS, PRR.SEQ 
         RELEASE INV.WHSE,IWH.ID
      END
   END
   IF NOT(ERR) THEN
      FIRST.TIME=1
      WDATA = 1
      LOOP
         READNEXT IRW.ID FROM IRW.LIST9 ELSE WDATA=0
      WHILE WDATA AND NOT(ERR) DO
         MATREAD IRW.REC FROM INV_RECP_WHSE, IRW.ID THEN
            IF SUM(IRW.JRSVD.QTY)#IRW.CUR.QTY-IRW.RSVB.QTY THEN              
               MAT PRR.REC = ""   ; ERR=1                                     
               PRR.FILE = "INV_RECP_WHSE"                                     
               PRR.ID = IRW.ID[4,99]                                          
               PRR.ERR='RESERVED QTY MISMATCH FOR ':IRW.ID                    
               PRR.SEQ = PRR.SEQ + 1                                          
               MATWRITE PRR.REC ON POST.REJECTS, PRR.SEQ
               RELEASE INV.WHSE,IWH.ID
            END ELSE                                                         
               IF IRW.RSVB.QTY>IRW.CUR.QTY THEN                               
                  MAT PRR.REC = ""  ; ERR=1                                    
                  PRR.FILE = "INV_RECP_WHSE"                                   
                  PRR.ID = IRW.ID[4,99]                                        
                  PRR.ERR='RESERVED QTY VS. CURRENT QTY MISMATCH  FOR ':IRW.ID 
                  PRR.SEQ = PRR.SEQ + 1                                        
                  MATWRITE PRR.REC ON POST.REJECTS, PRR.SEQ
                  RELEASE INV.WHSE,IWH.ID
               END ELSE                                                       
                  IF IRW.CUR.QTY+0<0 OR IRW.RSVB.QTY+0<0 THEN                      
                     MAT PRR.REC = ""   ; ERR=1                                 
                     PRR.FILE = "INV_RECP_WHSE"                                 
                     PRR.ID = IRW.ID[4,99]                                      
                     PRR.ERR='NEGATIVE QTY  FOR ':IRW.ID                        
                     PRR.SEQ = PRR.SEQ + 1                                      
                     MATWRITE PRR.REC ON POST.REJECTS, PRR.SEQ
                     RELEASE INV.WHSE,IWH.ID
                  END                       
               END                         
            END                           
            RSVB+=IRW.RSVB.QTY
            CUR.QTY+=IRW.CUR.QTY
            INVR.ID=OCONV(IRW.ID,"G!1")
         END
      REPEAT
      IF NOT(ERR) THEN
         IF RSVB<>(IWH.ON.HAND-IWH.RESV)+0 THEN
            MAT PRR.REC = "" ; ERR=1
            PRR.FILE = "INV.WHSE"
            PRR.ID = IWH.ID[4,99]
            PRR.ERR = "INV.WHSE RESERVABLE QTY = ":IWH.ON.HAND-IWH.RESV:" AND RECEIPT RESERVABLE  = ":RSVB
            PRR.SEQ = PRR.SEQ + 1
            MATWRITE PRR.REC ON POST.REJECTS, PRR.SEQ
            RELEASE INV.WHSE, IWH.ID
         END ELSE
            IF CUR.QTY<>IWH.ON.HAND+0 THEN
               MAT PRR.REC = "" ; ERR=1      
               PRR.FILE = "INV.WHSE"         
               PRR.ID = IWH.ID[4,99]         
               PRR.ERR='INV.WHSE ON HAND QTY= ':IWH.ON.HAND:' AND TOTAL RECEIPTS QTY= ':CUR.QTY
               MATWRITE PRR.REC ON POST.REJECTS,PRR.SEQ   
               RELEASE INV.WHSE,IWH.ID                 
            END
         END
      END
   END
   RETURN
*
**********************
PROCESS.INV_AUDIT_BAL: 
**********************
*
   ERR=0
   CMD = 'SSELECT INV_AUDIT_HIST BY INAH_PERIOD '
   CMD:=' WITH PROD_WHSE_IDX = "'
   CMD:=CONO:PROD.NUM:'!':WHSE:'"'
   CMD:= ' AND WITH INAH_PERIOD>=':CURR.PERIOD
   UDTEXECUTE CMD CAPTURING ERROR RETURNING MSG
*T27362 v
*IF MSG<1,1,1> = "41" THEN 
   IF SYSTEM(11) > 0 THEN
      SELECT INV_AUDIT_HIST TO INAH.EOM.LIST
   END
   INAH.DATA = 1;PREV.PROD = "";PREV.WHSE = ""
   ;*
   ;* update current periods INV_AUDIT_BAL and 
   ;* calculate begining balances for the next period.
   ;* also calc total onhand and cost (QOH and COH)
   ;* remember that IWH.ON.HAND includes all periods.
   ;*
   ITB.ID=CONO:PROD.NUM:'!':WHSE:'!':CURR.PERIOD
   MATREAD ITB.REC FROM INV_AUDIT_BAL,ITB.ID ELSE MAT ITB.REC=''
   QOH=ITB.BEG ; COH=ITB.BEG.AMT
   MAT ITB.REC=''
   ITB.BEG=QOH ; ITB.BEG.AMT=COH
   LOOP
      READNEXT INAH.ID FROM INAH.EOM.LIST ELSE INAH.DATA = 0
   WHILE INAH.DATA DO
      MATREAD INAH.REC FROM INV_AUDIT_HIST, INAH.ID ELSE
         MAT INAH.REC = ""
      END
      IF INAH.ID[4,1]#'C' THEN
         IF INAH.PERIOD=CURR.PERIOD THEN
            BEGIN CASE
               CASE INAH.PROD # PROD.NUM
               CASE INAH.WHSE # WHSE
               CASE INAH.TYPE = "R"
                  ITB.RECV = ITB.RECV + INAH.QTY
                  ITB.RECV.AMT = ITB.RECV.AMT + INAH.EXT.COST
               CASE INAH.TYPE = "S"
                  ITB.SALE = ITB.SALE + INAH.QTY
                  ITB.SALE.AMT = ITB.SALE.AMT + INAH.EXT.COST
               CASE INAH.TYPE = "A"
                  ITB.SHRNK = ITB.SHRNK + INAH.QTY
                  ITB.SHRNK.AMT = ITB.SHRNK.AMT + INAH.EXT.COST
               CASE INAH.TYPE = "I"
                  ITB.TRAN.IN = ITB.TRAN.IN + INAH.QTY
                  ITB.TRAN.IN.AMT = ITB.TRAN.IN.AMT + INAH.EXT.COST
               CASE INAH.TYPE = "O"
                  ITB.TRAN.OUT = ITB.TRAN.OUT + INAH.QTY
                  ITB.TRAN.OUT.AMT = ITB.TRAN.OUT.AMT + INAH.EXT.COST
            END CASE
         END
         ;* include all periods into total
         QOH+=INAH.QTY
         COH+=INAH.EXT.COST
      END
   REPEAT
   ;*
   ;* write out current period record
   ;*
   MATWRITE ITB.REC ON INV_AUDIT_BAL,ITB.ID
   ;*
   ;* calculate ending balance for current period
   ;*
   END.BAL=ITB.BEG+ITB.RECV+ITB.TRAN.IN+ITB.SALE+ITB.SHRNK+ITB.TRAN.OUT
   END.BAL.AMT=ITB.BEG.AMT+ITB.RECV.AMT+ITB.TRAN.IN.AMT+ITB.SALE.AMT+ITB.SHRNK.AMT+ITB.TRAN.OUT.AMT
   ;*
   ;* now write ending balace for current period as a
   ;* beginging balance for the next period.
   ;*
   ITB.ID=CONO:PROD.NUM:"!":WHSE:"!":NEXT.PERIOD<1,1>
   MATREADU ITB.REC FROM INV_AUDIT_BAL,ITB.ID ELSE MAT ITB.REC=''
   MAT ITB.REC=''
   ITB.BEG =  END.BAL
   ITB.BEG.AMT = END.BAL.AMT
   MATWRITE ITB.REC ON INV_AUDIT_BAL, ITB.ID
   ;* now put these begining balances in IWH record too.
   IWH.BAL.PERIOD<1,-1>=NEXT.PERIOD<1,1>
   IWH.BEG.QTY<1,-1>=END.BAL+0
   IWH.BEG.AMT<1,-1>=END.BAL.AMT+0
   ;*
   ;* now compare total onhand and cost against IWH.ON.HAND
   ;*
   IF QOH+0 # IWH.ON.HAND+0 THEN
      MAT PRR.REC = "" ; ERR=1
      PRR.FILE = "INV.WHSE"
      PRR.ID = IWH.ID[4,99]
      PRR.ERR = "INV.WHSE ON HAND QTY = ":IWH.ON.HAND:" AND INV_AUDIT_BAL = ":QOH      ; * this is including future periods.
      PRR.SEQ = PRR.SEQ + 1
      MATWRITE PRR.REC ON POST.REJECTS, PRR.SEQ
      RELEASE INV.WHSE, IWH.ID
   END
   IF DIV.EOY THEN 
      IWH.BEG.INV = IWH.ON.HAND
      IWH.BEG.VALUE = COH    
   END
   ;*                          
   ;*remove FIFO from INV.WHSE 
   ;*                          
   IWH.VDR.FI = ""             
   IWH.PO.NO.FI = ""           
   IWH.PO.LN.FI = ""           
   IWH.ORG.FI = ""             
   IWH.RSV.FI = ""             
   IWH.QTY.FI = ""             
   IWH.COST.FI = ""            
   IWH.ACT.COST = ""           
   MATWRITE IWH.REC ON INV.WHSE,IWH.ID
   RETURN
*
**********************
PROCESS.INV_AUDIT_TAG: 
**********************
*
   SELECT INV_AUDIT_TAG TO IAT.LIST1
   DATA = 1
   LOOP
      READNEXT INAH.ID FROM IAT.LIST1 ELSE DATA = 0
   WHILE DATA = 1 DO
*T27362 v
      IF INAH.ID[1,3] = CONO THEN
         MATREAD INAH.REC FROM INV_AUDIT_HIST, INAH.ID THEN
            IF INAH.GLA.DATE = "P" THEN
               INAH.GLA.DATE = TODAY
               MATWRITE INAH.REC ON INV_AUDIT_HIST, INAH.ID
               DELETE INV_AUDIT_TAG, INAH.ID
            END
         END
      END
*T27362 ^
   REPEAT
   RETURN
*
********************
PROCESS.EOM.TRANS.1: 
********************
*
   ACCOUNTS = "";AMOUNTS = ""
   SELECT EOM.TRANS TO EOM.LIST1
   WRITE "EOM.TRANS (1)" ON CONTROL , PROG.ID
   DATA = 1
   LOOP
      READNEXT ETR.ID FROM EOM.LIST1 ELSE DATA = 0
   WHILE DATA DO
      IF ETR.ID[1,3] = CONO THEN 
         MATREADU ETR.REC FROM EOM.TRANS, ETR.ID THEN 
            ACCT = ETR.ID[1,ACCT.LEN]
            TYPE = FIELD(FIELD(ETR.ID,"!",3),"*",1)
            LOCATE ACCT IN ACCOUNTS,1 SETTING FND ELSE
               ACCOUNTS<FND> = ACCT
               AMOUNTS<FND> = ""
            END
            IF TYPE = "D" THEN
               AMOUNTS<FND,1> = AMOUNTS<FND,1> + ETR.AMT
            END ELSE
               AMOUNTS<FND,2> = AMOUNTS<FND,2> + ETR.AMT
            END
         END ELSE
            RELEASE EOM.TRANS, ETR.ID
         END
      END
   REPEAT
   MAT GLA.REC = ""
   GLA.DATE = TODAY
   GLA.SRC = "IA"
   GLA.MON = CURR.PERIOD
*T26556 v
*  ODATE = " " : OCONV(FR.CURR.DATE,"D2/")
   ODATE = " " : OCONV(CURR.ODATE,"D2/")
*T26556 ^
   ACNT=DCOUNT(ACCOUNTS,AM)
   READU COUNTER FROM CONTROL, CONO : "GLACOUNTER" ELSE COUNTER = 0
   WRITE "GLA ":COUNTER ON CONTROL, PROG.ID
   FOR I = 1 TO ACNT
      IF EQV.FLG = 1 THEN
         READ ACCT FROM COA.EQUIV, ACCOUNTS<I> ELSE ACCT = ACCOUNTS<I>
      END ELSE
         ACCT = ACCOUNTS<I>
      END
      COA.ID = CONO : ACCT[11,IN.ACCT.LEN]
      MATREAD COA.REC FROM COA, COA.ID ELSE COA.DESC = UNKNOWN
      GLA.DESC = COA.DESC "L#25" : ODATE
      FOR J = 1 TO 2
         IF AMOUNTS<I,J> # "" THEN 
            LOOP
               COUNTER = COUNTER + 1
               IF COUNTER > 999998 THEN COUNTER = 1
               GLA.ID = ACCT : STR("0",6-LEN(COUNTER)) : COUNTER
               READ DUMMY FROM GLA, GLA.ID ELSE DUMMY = ""
            WHILE DUMMY # "" DO REPEAT
            GLA.AMT = AMOUNTS<I,J>
            MATWRITE GLA.REC ON GLA, GLA.ID
         END
      NEXT J
   NEXT I
   WRITE COUNTER ON CONTROL, CONO : "GLACOUNTER"
   RETURN
*
********************
PROCESS.EOM.TRANS.2: 
********************
*
   SELECT EOM.TRANS TO EOM.LIST2
   WRITE "EOM.TRANS (2)" ON CONTROL , PROG.ID
   DATA = 1
   LOOP
      READNEXT ETR.ID FROM EOM.LIST2 ELSE DATA = 0
   WHILE DATA DO
      IF ETR.ID[1,3] = CONO THEN 
         MATREADU ETR.REC FROM EOM.TRANS, ETR.ID THEN
            CURR.PER = FR.CURR.PER<1,DIV.POS>
            MAT ETH.REC = MAT ETR.REC
            DONE = 0
            SEQ = 0
            ETH.ID = FIELD(ETR.ID,"*",1):"*":CURR.PER
            LOOP UNTIL DONE = 1 DO
               SEQ = SEQ + 1
               ETH.KEY = ETH.ID:"*":SEQ
               READ CHECKIT FROM ICS.EOM.TRANS.HIST, ETH.KEY ELSE DONE = 1
            REPEAT
            MATWRITE ETH.REC ON ICS.EOM.TRANS.HIST, ETH.KEY
            DELETE EOM.TRANS, ETR.ID
         END ELSE
            RELEASE EOM.TRANS,ETR.ID
         END
      END
   REPEAT
   WRITE "EOM.TRANS (3)" ON CONTROL, PROG.ID
   IF SECURITY.REC<2> = 'Y' THEN EOD.HID = '!':DIV.CODE ELSE EOD.HID = ''
   READU EOD.HIST.REC FROM EOD.HIST, CONO:SYS.FISCAL:CURR.PERIOD:EOD.HID ELSE;* T23278
      EOD.HIST.REC = ""
   END
   EOD.HIST.REC = INSERT(EOD.HIST.REC,-1,0,0,TODAY)
   WRITE EOD.HIST.REC ON EOD.HIST,CONO:SYS.FISCAL:CURR.PERIOD:EOD.HID
   RETURN

**********Routine to Build INV.WHSE FIFO Data *************
*
BUILD.IWH.FI: 
   RECP.NO=IWH.RECP.NO<1>
   RECP.PERIOD=IWH.RECP.PERIOD<1>
*
   IWH.ORG.FI = ""
   IWH.RSV.FI = ""
   IWH.QTY.FI = ""
   IWH.COST.FI=""
   IWH.VDR.FI=''
   IWH.PO.NO.FI=''
   IWH.PO.LN.FI=''
   IWH.RECV.FI=''
   IWH.DATE.FI=''
   IWH.ACT.COST=''
   IWH.COST.FI=''
   IWH.SALE.FI=''
   IWH.RECP.NO=''
   IWH.RECP.PERIOD=''
   IWH.RECP.ENT.DATE=''
*
   WHSE = OCONV(IWH.ID,"G1!1")
   RCNT=0
   RECP.CNT = DCOUNT(RECP.NO<1>,VM)
   FOR RR = 1 TO RECP.CNT
      RECP=RECP.NO<1,RR>
      IF RECP.PERIOD<1,RR> <= PERIOD<1,1> THEN
         INVR.ID=CONO:RECP
         MATREAD INVR.REC FROM INV_RECEIPTS,INVR.ID ELSE CONTINUE
         IRW.ID=CONO:RECP:"!":WHSE
         MATREAD IRW.REC FROM INV_RECP_WHSE,IRW.ID ELSE CONTINUE
         RCNT+=1
         IWH.ORG.FI<1,RCNT>=IRW.ORG.QTY   
         IWH.RSV.FI<1,RCNT>=IRW.RSVB.QTY   
         IWH.QTY.FI<1,RCNT>=IRW.CUR.QTY        
         IWH.COST.FI<1,RCNT>=IRW.UNIT.COST   
         IWH.VDR.FI<1,RCNT> = INVR.VEND          
         IWH.PO.NO.FI<1,RCNT>=INVR.PO            
         IWH.PO.LN.FI<1,RCNT>=INVR.PO.LN         
         IWH.RECV.FI<1,RCNT>=INVR.ENT.DATE       
         IWH.DATE.FI<1,RCNT>=INVR.POST.DATE      
         IWH.COST.FI<1,RCNT>=INVR.UNIT.COST   
         IWH.SALE.FI<1,RCNT>=INVR.UN.SALE           
         IWH.RECP.PERIOD<1,RCNT>=INVR.PERIOD     
         IWH.RECP.ENT.DATE<1,RCNT>=INVR.ENT.DATE 
         IWH.RECP.NO<1,RCNT>=RECP             
      END
   NEXT RR
   RETURN

90000 *
   READ JUNK FROM POST.REJECTS,'10001' THEN
      UserID = PMCProperty<1,3>
      IF D.M.FLG = 'DAY' THEN RPTID = 'IC302' ELSE RPTID = 'IC312'
   *IN_PARAM = UserID:"!ICSEODC!111!":RPTID:"!":CONO:"!Print"
      IN_PARAM = UserID:"!ICSEODC!111!":RPTID:"!":CONO:"!":Printfalg:"!":Mailflag
      IN_PARAM<2> = ''
      IN_PARAM<3> = 'EOD.REJECT.LISTING'
      IN_PARAM<4> = 'P'
      IN_PARAM<5> = 'PMCPROCS'
      IN_PARAM<6> = REJECTFILE
      IN_PARAM<7> = 'REJECTS'
      IN_PARAM<8> = EMAIL_ADDR ;*Email Address as Entered by the user
      OUT_PARAM=''
      UDTEXECUTE 'SSELECT ':REJECTFILE CAPTURING JUNK
      CALL GenerateReport_Sub(ERRMSG,IN_PARAM,OUT_PARAM)
      IF ERRMSG # "" THEN GOTO 93000 ;*to check if any error in GenerateReport_Sub
      REJECT.RPT.PRT='WARNING !!! MAKE SURE TO PICKUP CLOSING REJECTS REPORT FROM PRINTER'
      STATUS=RBO.setProperty('','RejectRptPrinted',REJECT.RPT.PRT)
      STATUS=RBO.setProperty('','ReportImage',OUT_PARAM<2>)
   END ELSE
      IF Printfalg # "Print" THEN ERRMSG  = "There is no data to ":Printfalg 
    *  GOTO 93000
   END

   IF NOT(NORETURN) THEN RETURN
   FR.PRINT<1,POS> = "X";* T23278
   STATUS = RBO.setProperty('','FR_PRINT',FR.PRINT)
   ERRMSG = "E R R O R !!! CANNOT PROCESS ALL TRANSACTIONS"
93000 WRITEV ERRMSG ON CONTROL, PROG.ID,2
   STATUS = RBO.setProperty('','ServerStatus',1)
   STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
*** END OF JOB ***
99999 
   MATWRITE FISCAL.REC ON CONTROL, CONO:SYS.FISCAL
END
