SUBROUTINE PHYIM_validateSerial
********************************************************************************
*   Program name :- PHYIM_validateSerial
*   Created:- 8/7/2003
*------------------------------------------------------------------------------*
*

* In Properties:
* --------------
*  
*
* Out Properties:
* ---------------
*  
********************************************************************************
$INCLUDE WWINSERT RBO.H
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB PHY.INV
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV_SERIAL
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE ICS.CPYLIB TRANSFER
* Insert method code here
ID = ''
CONO = ''
ESN = 1
MODE = 'A'
SERIAL = ''
PROD.NUM = ''
EOS=0
ERR=0
LN = ''

OPEN '','CONTROL' TO CONTROL ELSE
	ERRMSG = 'CONTROL FILE IS MISSING'
	GOTO 90000
END
OPEN '','INV_SERIAL' TO INV_SERIAL ELSE
	ERRMSG = 'INV_SERIAL FILE IS MISSING'
	GOTO 90000
END

* Insert method code here
IF FILEINFO(INV_SERIAL_TEMP,0)=0 THEN 
	OPEN '','INV_SERIAL_TEMP' TO INV_SERIAL_TEMP ELSE STOP "INV_SERIAL_TEMP FILE IS MISSING"
END


ERRMSG = RBO.getProperty('','ID',ID)
ERRMSG = RBO.getProperty('','PHYSI_TEMP_INPUT',SERIAL)

MODE = SERIAL<1,4>
TEMP.PROD.NO = SERIAL<1,2>
LN = SERIAL<1,3>
SERIAL = SERIAL<1,1>
CONO = ID[1,3]
SERIAL.NO = 0
*DEFFUN GET.SERIAL.SEQ(CONO,CONTROL.FILE,INV_SERIAL.FILE)
DEFFUN CALC.STK.QTY(COST.QTY,MAT INV.CNV.REC,ROND,LN)
DEFFUN GET_SERIAL_SEQ

GEN.DIV='00'

   DIM SAVE.PHYSI.REC(PHYSI.REC.SIZE)

   EQU INV.UOM.STK TO INV.UNIT<1,2>
   EQU INV.UOM.CST TO INV.UNIT<1,3>

   DIM TEMP.REC(18)
   EQU TEMP.PROD      TO TEMP.REC(1)
   EQU TEMP.SERIAL    TO TEMP.REC(2)
   EQU TEMP.ONHAND    TO TEMP.REC(3)
   EQU TEMP.DIA       TO TEMP.REC(4)
   EQU TEMP.COST      TO TEMP.REC(5)
   EQU TEMP.DESC      TO TEMP.REC(6)
   EQU TEMP.PO        TO TEMP.REC(7)
   EQU TEMP.VENDOR    TO TEMP.REC(16)
   EQU TEMP.RECEIPT   TO TEMP.REC(17)
   EQU TEMP.UNIT      TO TEMP.REC(18)


  OPEN "","INVENTORY" TO INVENTORY ELSE
      ERRMSG = "INVENTORY FILE IS MISSING"
      GOTO 90000
   END

   OPEN "","CATEGORY" TO CATEGORY ELSE
      ERRMSG = "CATEGORY FILE IS MISSING"
      GOTO 90000
   END

   OPEN "","PHY.INV" TO PHY.INV ELSE
      ERRMSG = "PHY.INV FILE IS MISSING"
      GOTO 90000
   END

   OPEN "","INV.WHSE" TO INV.WHSE ELSE
      ERRMSG = "INV.WHSE FILE IS MISSING"
      GOTO 90000
   END

   OPEN "","INV_SERIAL" TO INV_SERIAL ELSE
      ERRMSG = "INV_SERIAL FILE IS MISSING"
      GOTO 90000
   END

   OPEN "","PHY.XREF" TO PHY.XREF ELSE
      ERRMSG = "PHY.XREF FILE IS MISSING"
      GOTO 90000
   END

   OPEN "","WAREHOUSE" TO WAREHOUSE ELSE
      ERRMSG = "WAREHOUSE FILE IS MISSING"
      GOTO 90000
   END

OUT.PARAM = ""

MATREAD PHYSI.REC FROM PHY.INV,ID THEN
	MATREAD INV.REC FROM INVENTORY,CONO:TEMP.PROD.NO THEN
  		MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE THEN
      			BEGIN CASE
				* This Part is implemented in VALIDATEPRODUCT
				*CASE INV.M.LINE='FNGD' AND PHYSI.PREV.QTY<1,LN>+0=0
            			*	EOS=1
            			*	TEMP.SERIAL = "NEW"
            			*	TEMP.RECEIPT = "NEW"
				*CASE MODE="C" AND CATG.TRK.LVL = "S"
				*	GOSUB CHECK.SERIAL - This Part is implemented in With Other 2 routines
         			CASE CATG.TRK.LVL = "S"
					*THIS IS IMPLEMENTED IN ANOTHER METHOD
            				*IF SERIAL = "N" THEN
                  			*	EOS=1
		    			*	GOSUB GET.SERIAL
		    			*	ISTK.SEQ=SERIAL.NO
                  			*	TEMP.SERIAL = SERIAL.NO
					*	TEMP.RECEIPT = ISTK.RECP
					*	MAT ISTK.REC = ""
					*	STATUS = RBO.setProperty('','PHYSI_TEMP_OUTPUT',SERIAL.NO)
                  			*END ELSE
						*THIS PART IS IMPLEMENTED IN JS 
                  				*LOCATE SERIAL IN PHYSI.SERIAL<1>,1 SETTING FND ELSE FND=0
                  				*IF FND AND FND # LN THEN
                     			*	ERRMSG = "SERIAL NUMBER ALREADY ON THIS LIST"
                     			*	GOTO 90000
                  				*END ELSE
                     				*TEMP.SERIAL = SERIAL
                     				*OUT.PARAM = "CHECK_SERIAL" : @VM : ISTK.RECP
							*STATUS = RBO.setProperty('','PHYSI_TEMP_OUTPUT',OUT.PARAM)
							*GOSUB CHECK.SERIAL
		       				*STATUS = RBO.setProperty('','PHYSI_TEMP_OUTPUT',TEMP.SERIAL)
                     				*IF ERRMSG THEN
                        				*	GOTO 90000
                     				*END ELSE
                        				*	IF TEMP.SERIAL#"" THEN
                           				*		EOS=1
                           				*		TEMP.RECEIPT = ISTK.RECP
	      		      				*		STATUS = RBO.setProperty('','PHYSI_TEMP_OUTPUT',TEMP.SERIAL)
	                 				*	END
                     				*END
                  				*END
               			*END
				* This part is implemented in .JS
             			*CASE MODE='C' AND CATG.TRK.LVL='R'
            			*	TEMP.RECEIPT=PHYSI.RECP.NO<1,LN>
	    			*	STATUS = RBO.setProperty('','PHYSI_TEMP_OUTPUT',TEMP.RECEIPT)
            			*	EOS=1
				* This is Implemented in .JS
         			*CASE CATG.TRK.LVL="G"
            			*	TEMP.SERIAL = ""
            			*	TEMP.RECEIPT = ""
            			*	EOS=1
				*	STATUS = RBO.setProperty('','PHYSI_TEMP_OUTPUT',TEMP.SERIAL)
      			END CASE
  		END
	END
END

*I_P_RECPT = ""
*IF INV.M.LINE='FNGD' THEN
*	IF TEMP.RECEIPT[1,3] = 'NEW' THEN
*		I_P_RECPT = "I"
*	END
*END
*STATUS = RBO.setProperty('','PHYSI_STATUS',I_P_RECPT)

*THE RECEIPTS ARE ONLY FOR FNGD PRODUCTS
*CALL PHYIM_validateReceipt('', OUT_PARAM, ERRMSG)
*STATUS = RBO.setProperty('','PHYSI_TEMP_RECEIPT',OUT_PARAM)
*IF ERRMSG # '' THEN GOTO 90000
* End of method code
RETURN


CHECK.SERIAL:
	ISTK.ID = CONO:TEMP.SERIAL"R%8" 
   	MATREADU ISTK.REC FROM INV_SERIAL, CONO:TEMP.SERIAL"R%8" THEN
      		IF ISTK.PROD = TEMP.PROD THEN
         		PHY.TRK.ID=ISTK.ID
         		IF PHYSI.WHSE # ISTK.WHSE OR PHYSI.LOC # ISTK.LOC THEN
            			IF PHYSI.TRAN.TO # '' THEN
               			ERRMSG = 'THIS SERIAL HAS BEEN TRANSFERRED OUT TO WHSE ':ISTK.WHSE:' AND LOC ':ISTK.LOC
               			RETURN
            			END
            			ERRMSG = "THIS SERIAL ID IS CURRENTLY IN WAREHOUSE ":ISTK.WHSE
            			ERRMSG:=" AND LOCATION ":ISTK.LOC
           			GOTO 90000
            			ERRMSG = ""
            			MATREAD WHSE.REC FROM WAREHOUSE,CONO:PHYSI.WHSE THEN
               			IF WHS.DIV='' THEN
                  				FROM.DIV=GEN.DIV
               			END ELSE
                  				FROM.DIV=WHS.DIV
              			END
            			END
            			MATREAD WHSE.REC FROM WAREHOUSE,CONO:ISTK.WHSE THEN
               			IF WHS.DIV='' THEN
                  				TO.DIV = GEN.DIV
               			END ELSE
                  				TO.DIV=WHS.DIV
               			END
            			END
            *ECD.NUM=24;ECD.ACTION=4;CALL SCRN.EDIT
            *IF ECD.RET.VALUE = "Y" THEN
               		IF FROM.DIV # TO.DIV THEN
                  			ERRMSG='WAREHOUSE DIVISIONS DO NOT MATCH. TRANSFER NOT POSSIBLE'
               		END ELSE
                  			GOSUB PROCESS.TRANSFER
               		END
            *END
         		END ELSE
            			PHYSI.PREV.QTY<1,1> = ISTK.CUR.QTY
            			PHYSI.PREV.DIA<1,1> = ISTK.CUR.DIAM
            			PHYSI.PREV.SQTY<1,1> = ISTK.CUR.STK.QTY
            			ROND=0.5
            			IF PHYSI.PREV.QTY+0<0 THEN ROND=-(0.5)
            			TEMP.PREV.QTY<1,1>=CALC.STK.QTY(PHYSI.PREV.QTY<1,1>,MAT INV.CNV.REC,ROND,'')
            			TEMP.PREV.QTY<1,1>=OCONV(TEMP.PREV.QTY<1,1>,ICR.CNV)
            *SCV.REC(9)<ESN,1>=TEMP.PREV.QTY<1,1>
            *ECD.NUM=9;ECD.SUB.NUM=LN;ECD.ACTION=5;CALL SCRN.EDIT
            *SCV.REC(11)<ESN,1>=PHYSI.PREV.DIA<1,1>
            *ECD.NUM=11;ECD.SUB.NUM=LN;ECD.ACTION=5;CALL SCRN.EDIT
         		END
      		END ELSE
         		ERRMSG = 'THIS SERIAL BELONGS TO PRODUCT ':ISTK.PROD
      		END
   	END ELSE
      		ERRMSG = 'NOT ON FILE. ENTER "N" FOR NEW'
   	END
RETURN


PROCESS.TRANSFER: 
   D.TRAN.PRT.DATE=DATE()
   D.TRAN.PROD.NO = PROD.NUM
   D.TRAN.EMP=@LOGNAME
   D.TRAN.SERIAL = TEMP.SERIAL
   D.TRAN.RECP = ISTK.RECP
   D.TRAN.PROD.NO= ISTK.PROD
   D.TRAN.FROM.WHSE = ISTK.WHSE
   D.TRAN.FROM.LOC = ISTK.LOC
   D.TRAN.TO.WHSE = PHYSI.WHSE
   D.TRAN.TO.LOC = PHYSI.LOC
   D.TRAN.QTY = ISTK.CUR.QTY
   D.TRAN.DATE.ENTER=DATE()
   D.TRAN.PERIOD=PHYSI.PERIOD
   D.TRAN.TOT.QTY = ISTK.CUR.QTY
   D.TRAN.REASON.DESC = "PHYSICAL"
   D.TRAN.DATE.ENTER = DATE()
   D.TRAN.CODE='N'
*
   PROCESS.FLAG='Y'
   NEW.ERRMSG=''
   MAT TRAN.REC=''
   CALL TRAN_UPDATE(CONO,D.TRAN.CODE,MAT TRAN.REC,PROCESS.FLAG,CO.ICS.LOC.TRAN,NEW.ERRMSG)
   IF NEW.ERRMSG='' THEN
      ERRMSG='Transfer Unsuccessful. Note new Daily Transfer Number ':D.TRAN.CODE
      GOTO 90000
      TEMP.SERIAL='' ; TEMP.RECEIPT=''
   END ELSE
      ERRMSG=NEW.ERRMSG
      GOTO 90000
      ERRMSG=''
      MAT SAVE.PHYSI.REC = MAT PHYSI.REC
      READU PHY.SEQ FROM PHY.XREF,CONO:D.TRAN.FROM.WHSE:"!":D.TRAN.FROM.LOC THEN
         MATREADU PHYSI.REC FROM PHY.INV,CONO:PHY.SEQ THEN
            SFND = 0
            REC.CNT = DCOUNT(PHYSI.PRODUCT,@VM)
            FOR DD = 1 TO REC.CNT UNTIL (SFND)
               IF PHYSI.PRODUCT<1,DD> = PROD.NUM THEN
                  IF PHYSI.SERIAL<1,DD> = TEMP.SERIAL THEN
                     IF PHYSI.RECP.NO<1,DD> = ISTK.RECP THEN
                        SFND = DD
                     END
                  END
               END
            NEXT DD
            IF SFND # 0 THEN
               PHYSI.TRAN.FROM<1,SFND> = D.TRAN.FROM.WHSE:'!':D.TRAN.FROM.LOC
               PHYSI.TRAN.TO<1,SFND> = D.TRAN.TO.WHSE:'!':D.TRAN.TO.LOC
               MATWRITE PHYSI.REC ON PHY.INV,CONO:PHY.SEQ
            END ELSE
               RELEASE PHY.INV,CONO:PHY.SEQ
            END
         END ELSE
            RELEASE PHY.INV,CONO:PHY.SEQ
         END
      END ELSE
         RELEASE PHY.XREF,CONO:D.TRAN.FROM.WHSE:"!":D.TRAN.FROM.LOC
      END
      MAT PHYSI.REC = MAT SAVE.PHYSI.REC
      PHYSI.PREV.QTY<1,1> = ISTK.CUR.QTY
      PHYSI.PREV.DIA<1,1> = ISTK.CUR.DIAM
      PHYSI.PREV.SQTY<1,1> = ISTK.CUR.STK.QTY
      ROND=0.5
      IF PHYSI.PREV.QTY<1,1>+0<0 THEN ROND=-(0.5)
      TEMP.PREV.QTY<1,1>=CALC.STK.QTY(PHYSI.PREV.QTY<1,1>,MAT INV.CNV.REC,ROND,'')
      TEMP.PREV.QTY<1,1>=OCONV(TEMP.PREV.QTY<1,1>,ICR.CNV)
      *SCV.REC(9)<ESN,1>=TEMP.PREV.QTY<1,1>
      *ECD.NUM=9;ECD.SUB.NUM=LN;ECD.ACTION=5;CALL SCRN.EDIT
      *SCV.REC(11)<ESN,1>=PHYSI.PREV.DIA<1,1>
      *ECD.NUM=11;ECD.SUB.NUM=LN;ECD.ACTION=5;CALL SCRN.EDIT
   END
RETURN


GET.SERIAL:

	READU SERIAL.SEQ FROM CONTROL, CONO:"ISTK.SEQ" ELSE
		SERIAL.SEQ = 0
	END
	FND=0
	LOOP
		SERIAL.SEQ += 1
	  	IF SERIAL.SEQ > 9999999 THEN SERIAL.SEQ = 1
  		SERIAL.SEQ =  SERIAL.SEQ"R%7"
	  	CALL CHECK_DIGIT("C",SERIAL.SEQ,"10RL",CKDIG,VALID)
  		SERIAL.NO=SERIAL.SEQ:CKDIG
	  	ISTK.ID = CONO:SERIAL.NO
  		IF VALID THEN
    			IF RECORDLOCKED(INV_SERIAL_TEMP,ISTK.ID) = 0 THEN
	      			DELETE INV_SERIAL_TEMP,ISTK.ID
    			END
    			READU CHECKREC FROM INV_SERIAL_TEMP,ISTK.ID LOCKED
	      		NULL
    		END ELSE
      			READU CHECKREC FROM INV_SERIAL,ISTK.ID THEN
        			RELEASE INV_SERIAL, ISTK.ID
	        		RELEASE INV_SERIAL_TEMP,ISTK.ID
      			END ELSE
        			FND = 1
	      		END
    		END
	END
	UNTIL FND DO
		RELEASE INV_SERIAL,ISTK.ID
	REPEAT
	WRITE SERIAL.SEQ ON CONTROL,CONO:"ISTK.SEQ"

RETURN

90000:
STATUS = RBO.setProperty('','ServerStatus',1)
STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
RETURN
END
