SUBROUTINE PHYPAPP1_ROLL_POSTING
********************************************************************************
*   Program name :- PHYPAPP1_ROLL_POSTING
*   Created:- 5/4/2005
*------------------------------------------------------------------------------*
*
* In Properties:
* --------------
*  
*
* Out Properties:
* ---------------
*  
********************************************************************************
$INCLUDE WWINSERT RBO.H

* Insert method code here
$INCLUDE ICS.CPYLIB COM.INV.MAIN  
$INCLUDE ICS.CPYLIB COM.INV.SERIAL
$INCLUDE ICS.CPYLIB COM.INV.LINK  
$INCLUDE ICS.CPYLIB PHYSICAL.INV
$DEFINE INVENTORY
$INCLUDE ICS.CPYLIB INVENTORY
$DEFINE INVWHSE
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV.HIST
$DEFINE INVWHSELOC
$INCLUDE ICS.CPYLIB INV.WHSE.LOC
$DEFINE INVAUDITHIST
$INCLUDE ICS.CPYLIB INV_AUDIT_HIST
$DEFINE INVSERIAL
$INCLUDE ICS.CPYLIB INV_SERIAL
$DEFINE INVRECEIPTS
$INCLUDE ICS.CPYLIB INV_RECEIPTS
$DEFINE CATEGORY
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE ICS.CPYLIB INV.CNV
$DEFINE JOBSTATS
$INCLUDE JCS.CPYLIB JOB.STATS
$INCLUDE JCS.CPYLIB JOB
$INCLUDE CPYLIB FILE.VARS
$INCLUDE CPYLIB CHAR
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE PMC.CPYLIB FISCAL
DIM HOLD.IWLO.REC(IWLO.REC.SIZE)
*                                                           
DEFFUN DIVISION_POSITION(CONO,CONTROL.FILE,DIV.CODE)        
DEFFUN CURRENT_PERIOD(CONO,CONTROL.FILE,DIV.POS,FISCAL.FLAG)
*
*
OPEN '','INVENTORY' TO INVENTORY ELSE
  ERRMSG='INVENTORY FILE IS MISSING'; GOTO 93000
END
OPEN '','INV.WHSE' TO INV.WHSE ELSE
  ERRMSG='INV.WHSE FILE IS MISSING'; GOTO 93000
END
OPEN '','INV.WHSE.LOC' TO INV.WHSE.LOC ELSE
  ERRMSG='INV.WHSE.LOC FILE IS MISSING'; GOTO 93000
END
OPEN '','INV.WHSE.LOC.TEMP' TO INV.WHSE.LOC.TEMP ELSE
  ERRMSG='INV.WHSE.LOC.TEMP FILE IS MISSING'; GOTO 93000
END
OPEN '','PHYSICAL.INV' TO PHYSICAL.INV ELSE
  ERRMSG='PHYSICAL.INV FILE IS MISSING'; GOTO 93000
END
OPEN '','INV_AUDIT_TAG' TO INV_AUDIT_TAG ELSE
  ERRMSG='INV_AUDIT FILE IS MISSING'; GOTO 93000
END
OPEN '','INV_AUDIT_HIST' TO INV_AUDIT_HIST ELSE
  ERRMSG='INV_AUDIT_HIST FILE IS MISSING'; GOTO 93000
END
OPEN '','COMPANY' TO COMPANY ELSE
  ERRMSG='COMPANY FILE IS MISSING';GOTO 93000
END
OPEN '','CONTROL' TO CONTROL ELSE
  ERRMSG='CONTROL FILE IS MISSING';GOTO 93000
END
OPEN '','WAREHOUSE' TO WAREHOUSE ELSE
  ERRMSG='WAREHOUSE FILE IS MISSING';GOTO 93000
END
OPEN '','JOB.STATS' TO JOB.STATS ELSE
  ERRMSG='JOB.STATS FILE IS MISSING';GOTO 93000
END
OPEN '','JOB' TO JOB ELSE
  ERRMSG='JOB FILE IS MISSING';GOTO 93000
END
OPEN '','INV.HIST' TO INV.HIST ELSE
  ERRMSG='INV.HIST FILE IS MISSING';GOTO 93000
END
OPEN '','INV_SERIAL' TO INV_SERIAL ELSE
  ERRMSG='INV_SERIAL FILE IS MISSING';GOTO 93000
END
OPEN '','INV_SERIAL_TEMP' TO INV_SERIAL_TEMP ELSE
  ERRMSG='INV_SERIAL_TEMP FILE IS MISSING';GOTO 93000
END
OPEN '','INV_SERIAL_DELETED' TO INV_SERIAL_DELETED ELSE
  ERRMSG='INV_SERIAL_DELETED FILE IS MISSING';GOTO 93000
END
OPEN '','INV_RECEIPTS' TO INV_RECEIPTS ELSE
  ERRMSG='INV_RECEIPTS FILE IS MISSING';GOTO 93000
END
OPEN '','INV_RECEIPTS_TEMP' TO INV_RECEIPTS_TEMP ELSE
  ERRMSG='INV_RECEIPTS_TEMP FILE IS MISSING';GOTO 93000
END
OPEN '','CATEGORY' TO CATEGORY ELSE
  ERRMSG='CATEGORY FILE IS MISSING';GOTO 93000
END


PERIOD = ""
STATUS = RBO.getProperty('','ID',PPSD_ID)
STATUS = RBO.getProperty('','PPDField01',DIV_CODE)
STATUS = RBO.getProperty('','SUG_PERIOD',PERIOD)
STATUS = RBO.getProperty('','PROCESS_ID',POST_PROCESS)
STATUS = RBO.getProperty('','ROLL_TYPE',ROLL_TYPE)
  PRPT_ID = FIELD(PPSD_ID, "!", 4) ;* PMC_REPORTS ID

  FIRST_REPORT_ID = FIELD(PRPT_ID,",",1)
  SECOND_REPORT_ID =	 FIELD(PRPT_ID,",",2)

   UserID = FIELD(PPSD_ID, "!", 1) ;* User ID
   PPSID = FIELD(PPSD_ID, "!", 2) ;* PMC_PROCESS ID
   SessionID = FIELD(PPSD_ID, "!", 3) ;* IE Session ID
*   PRPT_ID = FIRST_REPORT_ID;* PMC_REPORTS ID
   CONO = FIELD(PPSD_ID, "!", 5)
   IF FIELD(PPSD_ID, "!", 6) = "Email" THEN
      Email_Flag = "M"
   END ELSE
      Email_Flag = "V"
   END

   IF PERIOD = "" THEN
     GOSUB FIRST_PART
	IF CHK_FLAG = 0 THEN 
	   GOSUB SECOND_PART
	END ELSE
	   GOSUB GET_PERIOD 
       END 
     GOTO 99999 
   END ELSE
     GOSUB AFTER_PROCESS
     GOSUB SECOND_PART	
     GOTO 99999 
   END
**************
FIRST_PART:
**************
   CMD = "SSELECT PHYSICAL.INV WITH TYPE = '":ROLL_TYPE:"' AND WITH PRINT.DATE AND WITH CONO = ":CONO
   IF DIV_CODE # "ALL" THEN
     CMD := " AND WITH WHSE.DIV = ":DIV_CODE
   END
   CMD := " BY PLINE BY WHSE BY LOC"
   UDTEXECUTE CMD  

RECORD_IDS = ""
CHK_FLAG = 0

  DATA=1
 LOOP
  READNEXT STR_ID ELSE DATA=0
  WHILE DATA DO
   CHK_FLAG = 1	
  IF RECORD_IDS # "" THEN
     RECORD_IDS = STR_ID
  END ELSE
     RECORD_IDS = RECORD_IDS:"^":STR_ID
  END 
 REPEAT
*WRITE "RECORD IDS ":RECORD_IDS:" CHK FLAG ":CHK_FLAG ON CONTROL,"01ROLLPOST"
RETURN

**************
SECOND_PART:
**************
*POST_PROCESS = "ROLL.INV.IN.REJ"
PPSD_ID = UserID:"!":PPSID:"!":SessionID:"!":SECOND_REPORT_ID:"!":CONO:"!":FIELD(PPSD_ID, "!", 6)
STATUS = RBO.setProperty('','ID',PPSD_ID)
STATUS = RBO.setProperty('','PPDField01',DIV_CODE)
STATUS = RBO.setProperty('','PROCESS_ID',POST_PROCESS) ; *ADDED FOR SECOND PROCS

CALL GenerateReport
RETURN 
**************
AFTER_PROCESS:
**************
SER.ARR="" ;*array of serial numbers on INV_SERIAL_TEMP file
OPEN.FLAG=1
MATREAD COMP.REC FROM COMPANY, CONO ELSE MAT COMP.REC = ''     ;* T26497
*
;*                                          
;* get the period                           
;*                                          

GEN.DIV = '00';GEN.DEPT = '00';GEN.CCTR = '000' 
MAT ORG.IWH.REC=''

   CMD = "SSELECT PHYSICAL.INV WITH TYPE = ":ROLL_TYPE:" AND WITH PRINT.DATE AND WITH CONO =":CONO
   IF DIV_CODE # "ALL" THEN
     CMD := " AND WITH WHSE.DIV = ":DIV_CODE
   END
   CMD := " BY PLINE BY WHSE BY LOC"
   UDTEXECUTE CMD  
**********************

DATA=1
LOOP
  READNEXT PHS.ID ELSE DATA=0
WHILE DATA DO
  MATREADU PHS.INV.REC FROM PHYSICAL.INV,PHS.ID THEN
    PHS.NO.POST = '' ;*T27380
    TYPE=FIELD(PHS.ID,'!',1)
    TYPE=TYPE[4,LEN(TYPE)]
    WHSE=FIELD(PHS.ID,'!',3)
    MATREAD WHSE.REC FROM WAREHOUSE,CONO:WHSE ELSE 
      MAT WHSE.REC = ""                                 
    END                                                 
    IF WHS.DIV = "" THEN WHS.DIV = GEN.DIV                
    DIV.POS=DIVISION_POSITION(CONO,CONTROL,WHS.DIV)         
    BEGIN CASE                                              
      CASE DIV.POS<1,1>=''                                  
        DIV.POS=DIV.POS<1,2>                                
        CUR.PERIOD=CURRENT_PERIOD(CONO,CONTROL,DIV.POS,"IC")
        IF CUR.PERIOD<1,1>='' THEN                          
          CUR.PERIOD=CUR.PERIOD<1,2>                        
        END ELSE                                            
          IF CUR.PERIOD<1,1>='-2' OR CUR.PERIOD<1,1>='-1' THEN                      
            PHS.NO.POST=CUR.PERIOD<1,2>                          
          END                                               
        END                                                 
      CASE DIV.POS<1,1>='-1'                                
        PHS.NO.POST=DIV.POS<1,2>                                 
      CASE DIV.POS<1,1>='-2'                                
        PHS.NO.POST=DIV.POS<1,2>
    END CASE                                                
  * T26497 v
    IF CO.INTR.WHSE # '' AND WHSE = CO.INTR.WHSE THEN
      PHS.NO.POST = 'USING AN INTER-DIVISIONAL WHSE (':WHSE:') IS RESTRICTED'
    END
  * T26497 ^
    IF PHS.NO.POST='' THEN
      DV.DP.CC = WHS.DIV:GEN.DEPT:GEN.CCTR           
      LOC=FIELD(PHS.ID,'!',4)
      CNT=DCOUNT(PHS.INV.PROD,VM)
      FOR P=CNT TO 1 STEP -1
        ERRMSG='' ;*T27990
        PROD = PHS.INV.PROD<1,P>
        MATREAD INV.REC FROM INVENTORY,CONO:PROD THEN
          CATG.ID = CONO:INV.LINE
          MATREAD CATG.REC FROM CATEGORY,CATG.ID THEN
            IF CATG.COST.TYPE='AC' THEN
              DEPL.METHOD='AC'
            END ELSE
              DEPL.METHOD='FI'
            END
          END ELSE
            PHS.NO.POST<1,P>='CATEGORY ':INV.LINE:' IS MISSING.'
            CONTINUE
          END
        END ELSE
          PHS.NO.POST<1,P>='INVENTORY # ':PROD:' IS NOT ON LINE'
          CONTINUE
        END
$INCLUDE ICSBP INV.UM.CNV
        IWH.ID=CONO:PROD:'!':WHSE 
        IH.ID=CONO:PROD
        MATREADU IWH.REC FROM INV.WHSE,IWH.ID THEN
          INAH.PROD = PROD
          INAH.WHSE = WHSE
          MAT ORG.IWH.REC = MAT IWH.REC 
          ACTION=1; * build INV.WHSE fifo buckets 
          TMP.CNT='' ; LAST='' ; TMP.ARR=''
*T27990   CALL ICS.IWH.SUB (CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG)
          CALL ICS_IWH_SUB (CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG,ERRMSG)
        END ELSE
          PHS.NO.POST<1,P>='INV.WHSE # ':IWH.ID:' IS NOT ON LINE'
          CONTINUE
        END
        MATREADU IH.REC FROM INV.HIST,IH.ID ELSE
          MAT IH.REC=''
        END
        LOCATE LOC IN IWH.LOC<1>,1 SETTING LLOC ELSE
          LOCATE "R" IN PHS.ADJ.TYPE<1,P>,1 SETTING FNDT ELSE
            PHS.NO.POST<1,P>="LOCATION # ":LOC:" NOT SETUP FOR THIS PRODUCT"
            CONTINUE
          END
          LLOC=DCOUNT(IWH.LOC,VM)+1
          IWH.LOC<1,LLOC>=LOC
        END
        IWLO.ID=IWH.ID:'!':LOC
        IF RECORDLOCKED(INV.WHSE.LOC.TEMP,IWLO.ID)=0 THEN
          DELETE INV.WHSE.LOC.TEMP,IWLO.ID
        END
        READU CHECK.REC FROM INV.WHSE.LOC.TEMP,IWLO.ID ELSE
          MATREADU IWLO.REC FROM INV.WHSE.LOC,IWLO.ID ELSE
            MAT IWLO.REC=""
            IWLO.LOC.ON.HAND=0
          END
        END
        IF IWLO.LOC.ON.HAND+0 # PHS.CUR.QTY<1,P>+0 THEN
          PHS.NO.POST<1,P>='ON HAND DOES NOT MATCH PHYSICAL'
          CONTINUE
        END
        SCNT=DCOUNT(PHS.R.S.ID<1,P>,SVM)
        GOSUB PROCESS.SERIAL
        IF PHS.JOB # '' AND PHS.NO.POST<1,P>='' THEN
          MATREADU JSTAT.REC FROM JOB.STATS,CONO:PHS.JOB ELSE MAT JSTAT.REC=''
          MATREADU JOB.REC FROM JOB,CONO:PHS.JOB ELSE
            MAT JOB.REC=""
            PHS.NO.POST<1,P>="JOB ":PHS.JOB:" RECORD IS NOT ON FILE"
            GOTO 900
          END
          FNGD.CNT=DCOUNT(JSTAT.SHP.PROD,VM)
          FNGD=0
          FOR FG=1 TO FNGD.CNT UNTIL FNGD
            BEGIN CASE
              CASE PHS.INV.PROD<1,P> # JSTAT.SHP.PROD<1,FG>
              CASE WHSE # JSTAT.SHP.WHSE<1,FG>
              CASE LOC # JSTAT.SHP.LOC<1,FG>
              CASE PHS.R.S.ID<1,P,R> # JSTAT.SHP.R.S.ID<1,FG>
              CASE 1
                FNGD=FG
                TR.CNT=DCOUNT(JSTAT.SHP.TRANS<1,FG>,SVM)
                JSTAT.SHP.TRANS<1,FG,TR.CNT+1>="ADJ"
                REC.QTY=INAH.CUR.QTY-INAH.NEW.QTY
                IF (JSTAT.SHP.QTY<1,FNGD>-REC.QTY) < 0 THEN
                  PHS.NO.POST<1,P>='CANNOT ADJUST QUANTITY ON JOB STATS'
                  GOTO 900
                END
                JSTAT.SHP.QTY<1,FNGD>=JSTAT.SHP.QTY<1,FNGD>-REC.QTY
                JOB.QTY<1,2>=JOB.QTY<1,2>-INT((((REC.QTY/ICR.DV1) * ICR.MT1)/ICR.DV2)/ICR.SCAL)
            END CASE
          NEXT FG
          IF FNGD # 0 THEN
            IF JSTAT.SHP.QTY<1,FNGD>=0 THEN
              JSTAT.SHP.PROD=DELETE(JSTAT.SHP.PROD,1,FNGD,0)
              JSTAT.SHP.WHSE=DELETE(JSTAT.SHP.WHSE,1,FNGD,0)
              JSTAT.SHP.LOC=DELETE(JSTAT.SHP.LOC,1,FNGD,0)
              JSTAT.SHP.R.S.ID=DELETE(JSTAT.SHP.R.S.ID,1,FNGD,0)
              JSTAT.SHP.QTY=DELETE(JSTAT.SHP.QTY,1,FNGD,0)
              JSTAT.SHP.MLTP=DELETE(JSTAT.SHP.MLTP,1,FNGD,0)
              JSTAT.SHP.PCS=DELETE(JSTAT.SHP.PCS,1,FNGD,0)
              JSTAT.SHP.LOC.DESC=DELETE(JSTAT.SHP.LOC.DESC,1,FNGD,0)
              JSTAT.SHP.TRANS=DELETE(JSTAT.SHP.TRANS,1,FNGD,0)
            END
            MATWRITE JSTAT.REC ON JOB.STATS,CONO:PHS.JOB
            MATWRITE JOB.REC ON JOB,CONO:PHS.JOB
          END ELSE
            PHS.NO.POST<1,P>='CAN NOT ADJUST QUANTITY ON JOB STATS'; GOTO 900
          END
        END
900     
        IF PHS.NO.POST<1,P> # '' THEN
          RELEASE INV.WHSE,IWH.ID
          RELEASE INV.WHSE.LOC,IWH.ID:"!":INAH.LOC
          RELEASE JOB.STATS,CONO:PHS.JOB
          RELEASE JOB,CONO:PHS.JOB
          ACTION=9 ;*delete tmp serials
          TMP.ARR<1> = SER.ARR<1,P>
*T27990   CALL ICS_IWH_SUB (CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG)
          CALL ICS_IWH_SUB (CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG,ERRMSG)
          CONTINUE
        END
        IF INAH.PERIOD=CUR.PERIOD THEN
          CALL INV_AVG_COST_MAINT(MAT IWH.REC,INV.COST.WT,CUR.PERIOD)
        END
        ACTION = 3
*T27990 CALL ICS_IWH_SUB (CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG)
        CALL ICS_IWH_SUB (CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG,ERRMSG)
        MATWRITE IH.REC ON INV.HIST,IH.ID
        ;*
        FOR R=1 TO PHS.INV.REC.SIZE
          PHS.INV.REC(R)=DELETE(PHS.INV.REC(R),1,P,0)
        NEXT R
      NEXT P
    END
    IF PHS.INV.PROD='' THEN
      DELETE PHYSICAL.INV,PHS.ID
    END ELSE
      MATWRITE PHS.INV.REC ON PHYSICAL.INV,PHS.ID
    END
  END
REPEAT
RETURN
*
****************
PROCESS.SERIAL: 
****************
*
PHS.NO.POST<1,P>=''; ADJ.QTY=""; ADJ.COST=''; ADJ.UN.COST=''
FOR S=1 TO SCNT WHILE PHS.NO.POST<1,P>=''
  MAT INAH.REC=''
  INAH.SERIAL.NO = PHS.R.S.ID<1,P,S>
  SERIAL.NO = INAH.SERIAL.NO
  SER.ARR<1,P,-1> = SERIAL.NO
  INAH.TYPE = "A"
  INAH.PROD=PHS.INV.PROD<1,P>
  INAH.WHSE=WHSE
  INAH.DATE = PHS.DATE.ENT<1,P,S>
  INAH.PERIOD = PERIOD
  INAH.LOC=LOC
  INAH.SRC = "IA"
  INAH.ADJ.CODE=PHS.ADJ.CODE<1,P,S>
  INAH.DV.DP.CC=DV.DP.CC
  INAH.ACCT=CATG.INV
  INAH.ADJ.ACCT=CATG.ADJ
  INAH.CUR.QTY=PHS.CUR.WGHT<1,P,S>
  INAH.NEW.QTY=PHS.NEW.WGHT<1,P,S> + 0
  INAH.QTY = INAH.NEW.QTY - INAH.CUR.QTY
  INAH.CUR.DIAM = PHS.CUR.DIAM<1,P,S>
  INAH.NEW.DIAM = PHS.NEW.DIAM<1,P,S>
  INAH.CUR.STK.QTY  = PHS.CUR.SHEET<1,P,S>
  INAH.NEW.STK.QTY   = PHS.NEW.SHEET<1,P,S>
  INAH.OPER.ID = PHS.OPER.ID<1,P,S>
  INAH.JOB = INAH.OPER.ID
  PO.VEND.NO=PHS.OPER.ID<1,P,S>
  PO.CODE=PHS.ADJ.CODE<1,P,S>
  ISTK.ID=CONO:SERIAL.NO
  DELETED.FLG=0;*T27484
  IF RECORDLOCKED(INV_SERIAL_TEMP,ISTK.ID)=0 THEN
    DELETE INV_SERIAL_TEMP,ISTK.ID
  END
  READU CHECK.REC FROM INV_SERIAL_TEMP,ISTK.ID ELSE
*T27484 v
*   MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID THEN
    MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID ELSE
      MATREADU ISTK.REC FROM INV_SERIAL_DELETED,ISTK.ID THEN 
        DELETED.FLG=1
        ERR.MSG='' ; ERR.FLG=0 
        ALOC=INAH.LOC
        AWHSE=INAH.WHSE
        CALL ACTIVATE_DELETED_SERIAL (ISTK.ID,ERR.MSG,ERR.FLG,AWHSE,ALOC)
        IF ERR.FLG='-1' THEN 
          PHS.NO.POST<1,P>='CANNOT ACTIVATE DELETED SERIAL.' 
          PHS.NO.POST<1,P>:=' SOME SUPPORTING RECORDS ARE MISSING' 
          RELEASE INV_SERIAL,ISTK.ID 
          RELEASE INV_SERIAL_TEMP,ISTK.ID
          RELEASE INV_SERIAL_DELETED,ISTK.ID 
          CONTINUE 
        END ELSE 
          MATREADU ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID ELSE
            MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID THEN 
              MATREADU IWLO.REC FROM INV.WHSE.LOC.TEMP,IWLO.ID ELSE
                MATREADU IWLO.REC FROM INV.WHSE.LOC,IWLO.ID ELSE 
                  MAT IWLO.REC=''
                  IWLO.LOC.ON.HAND=0 
                END
              END
            END
          END
        END
* End of merge 27484 from below v
      END ;*T27484End of deleted read
    END;*T27484 End of active read
    MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID THEN;*T27484
      IF INAH.CUR.QTY+0 <> ISTK.CUR.QTY+0 THEN
        IF DELETED.FLG THEN GOSUB DELETE.REACT.SERIAL ;*T27484
        PHS.NO.POST<1,P>='SERIAL QTY DOES NOT MATCH PHYSICAL'; GOTO 99
      END
      IF ISTK.RECP.PERIOD>INAH.PERIOD THEN
        IF DELETED.FLG THEN GOSUB DELETE.REACT.SERIAL ;*T27484
        PHS.NO.POST<1,P>='SERIAL RECEIVED IN PERIOD ':ISTK.RECP.PERIOD:' CANNOT BE ADJUSTED IN PERIOD ':INAH.PERIOD
        GOTO 99
      END
      IF INAH.NEW.QTY < ISTK.CUR.QTY-ISTK.RSVB.QTY THEN
        IF DELETED.FLG THEN GOSUB DELETE.REACT.SERIAL ;*T27484
        PHS.NO.POST<1,P>= 'CANNOT ADJUST BELOW RESERVED QTY.'
        GOTO 99         
      END
      DIFF.QTY=INAH.NEW.QTY-INAH.CUR.QTY
      TYPE='A'
      INVR.ID = CONO:ISTK.RECP
      IF RECORDLOCKED(INV_RECEIPTS_TEMP,INVR.ID)=0 THEN
        DELETE INV_RECEIPTS_TEMP,INVR.ID
      END
      READU CHECK.REC FROM INV_RECEIPTS_TEMP,INVR.ID ELSE
        MATREADU INVR.REC FROM INV_RECEIPTS,INVR.ID THEN
          PRICE = INVR.UNIT.COST
          INAH.UNIT.COST = PRICE
        END
      END
* T27484 Move below 25 lines above ^
*   END ELSE
*     MATREADU ISTK.REC FROM INV_SERIAL_DELETED,ISTK.ID THEN 
*       ERR.MSG='' ; ERR.FLG=0 
*       ALOC=INAH.LOC
*       AWHSE=INAH.WHSE
*       CALL ACTIVATE.DELETED.SERIAL (ISTK.ID,ERR.MSG,ERR.FLG,AWHSE,ALOC)
*       IF ERR.FLG='-1' THEN 
*         PHS.NO.POST<1,P>='CANNOT ACTIVATE DELETED SERIAL.' 
*         PHS.NO.POST<1,P>:=' SOME SUPPORTING RECORDS ARE MISSING' 
*         RELEASE INV_SERIAL,ISTK.ID 
*         RELEASE INV_SERIAL_TEMP,ISTK.ID
*         RELEASE INV_SERIAL_DELETED,ISTK.ID 
*         CONTINUE 
*       END ELSE 
*         MATREADU ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID ELSE
*           MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID THEN 
*             MATREADU IWLO.REC FROM INV.WHSE.LOC.TEMP,IWLO.ID ELSE
*               MATREADU IWLO.REC FROM INV.WHSE.LOC,IWLO.ID ELSE 
*                 MAT IWLO.REC=''
*                 IWLO.LOC.ON.HAND=0 
*               END
*             END
*           END
*         END
*       END
*End of merged block
    END ELSE
      IF PHS.ADJ.TYPE<1,P,S>='R' THEN
        MAT ISTK.REC=''
        ISTK.PO.NO=PO.CODE
        ISTK.PO.LINE=1
        ISTK.PROD=PROD
        ISTK.WHSE=WHSE
        ISTK.UNIT.COST=PHS.UN.COST<1,P,S>
        PRICE = ISTK.UNIT.COST
        MATWRITE ISTK.REC ON INV_SERIAL,ISTK.ID
        DIFF.QTY=INAH.NEW.QTY
        ;* since this is a new serial this adjustment
        ;* is in fact receipt
        TYPE='R'
      END ELSE
        PHS.NO.POST<1,P>='CANNOT CHANGE A NON EXISTING SERIAL # ':SERIAL.NO
        GOTO 99
      END
    END
    RET.ARR='' ; ERRMSG=''
    ;* TYPE is set up in code above and can have 
    ;* different values 'A' or 'R'
    CALL QTY_CHANGE_SUB(CONO,PO.CODE,MAT IWH.REC,MAT INV.REC,MAT PO.REC,DEPL.METHOD,ISTK.RECP,PHS.DATE.ENT<1,P,S>,PERIOD,DIFF.QTY,PRICE,TYPE,ERRMSG,RET.ARR)
    IF ERRMSG # '' THEN
      PHS.NO.POST<1,P>=ERRMSG; GOTO 99
    END
    TOT.PRICE=RET.ARR<1>
    TRANS.PRICE=RET.ARR<2>
    TRANS.UN.PRICE=RET.ARR<3>
    TRANS.QTY=RET.ARR<4>
    TMP.ARR = SERIAL.NO
    ACTION=2 ;* build records
*T27990 v CALL ICS.IWH.SUB (CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG)
    ERRMSG=''
    CALL ICS_IWH_SUB (CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG,ERRMSG)
    IF ERRMSG # '' THEN
      PHS.NO.POST<1,P>=ERRMSG
      CONTINUE
    END
*T27990 ^
*
    IWH.ON.HAND=IWH.ON.HAND+DIFF.QTY
    IH.CNT=DCOUNT(IH.DATE,VM)
    IDATE=PHS.DATE.ENT<1,P>
    LOCATE IDATE IN IH.DATE<1> SETTING PP ELSE NULL
    BEGIN CASE
      CASE PP=IH.CNT
        IH.AMOUNT<1,PP>=IH.AMOUNT<1,PP>+DIFF.QTY
      CASE PP > IH.CNT
        IH.AMOUNT<1,PP>=IH.AMOUNT<1,PP>+DIFF.QTY
        IH.DATE<1,PP>=IDATE
      CASE 1
        IH.AMOUNT<1,PP>=IH.AMOUNT<1,PP>+DIFF.QTY
    END CASE
    TQCNT=DCOUNT(TRANS.QTY,VM)
    IF TQCNT > 1 THEN
      FOR I=1 TO TQCNT
        ADJ.QTY<1,S,I>=TRANS.QTY<1,I>
        ADJ.COST<1,S,I>=TRANS.PRICE<1,I>
        ADJ.UN.COST<1,S,I>=TRANS.UN.PRICE<1,I>
      NEXT I
    END ELSE
      ADJ.QTY<1,S>=TRANS.QTY
      ADJ.COST<1,S>=TRANS.PRICE
      ADJ.UN.COST<1,S>=TRANS.UN.PRICE
    END
  END
*END;*T27484
99 
NEXT S
RETURN
*
* Delete previously reactivated serial if in error
*
DELETE.REACT.SERIAL:
*
  HOLD.IWLO=0
  IWLO.ID=CONO:ISTK.PROD:"!":AWHSE:"!":ALOC
  IF RECORDLOCKED(INV.WHSE.LOC.TEMP,IWLO.ID)=0 THEN
    DELETE INV.WHSE.LOC.TEMP,IWLO.ID
  END
  MATREADU IWLO.REC FROM INV.WHSE.LOC.TEMP,IWLO.ID THEN
    MAT HOLD.IWLO.REC=MAT IWLO.REC
    HOLD.IWLO=1
    MATREADU IWLO.REC FROM INV.WHSE.LOC,IWLO.ID ELSE
      MAT IWLO.REC=''
    END
  END ELSE
    MATREADU IWLO.REC FROM INV.WHSE.LOC,IWLO.ID ELSE
      MAT IWLO.REC=''
    END
  END
  LOCATE SERIAL.NO IN IWLO.SERIAL<1> SETTING SPOS THEN
    DEL IWLO.SERIAL<1,SPOS>
  END
  MATWRITEU ISTK.REC ON INV_SERIAL_DELETED,ISTK.ID
  MATWRITEU IWLO.REC ON INV.WHSE.LOC,IWLO.ID
  DELETE INV_SERIAL,ISTK.ID
  IF HOLD.IWLO THEN
    MAT IWLO.REC = MAT HOLD.IWLO.REC
    LOCATE SERIAL.NO IN IWLO.SERIAL<1> SETTING SPOS THEN
      DEL IWLO.SERIAL<1,SPOS>
    END
    MATWRITEU IWLO.REC ON INV.WHSE.LOC.TEMP,IWLO.ID
  END
RETURN

**************
GET_PERIOD:
**************
	CONTROL=''
	DIV.POS=DIVISION_POSITION(CONO,CONTROL,DIV.CODE)
	DIV.POS = DIV.POS<1,2>
	FISCAL.FLAG ="IC"
	
MATREAD FISCAL.REC FROM CONTROL, CONO:FISCAL.FLAG:"FISCAL" THEN 
  CURR.PERIOD = FR.CURR.PER<1,DIV.POS>
END ELSE
  ERRMSG = FISCAL.FLAG:" Control Fiscal record is missing"         
END 

IF CURR.PERIOD # "" THEN
	STATUS = RBO.setProperty('','SUG_PERIOD',CURR.PERIOD)
	STATUS = RBO.setProperty('','ServerMessage','')
END ELSE
CALL GetNextPeriod(CONO,DIV.CODE,DIV.POS,FISCAL.FLAG,NEXT.PERIOD,ERR.FLG,ERR)
	STATUS = RBO.setProperty('','SUG_PERIOD',NEXT.PERIOD)
	STATUS = RBO.setProperty('','ServerMessage','Period cannot be more then two periods greater than current period ')
END
STATUS = RBO.setProperty('','ServerStatus',2)

RETURN 

93000*
* End of method code
99999 
RETURN
END

