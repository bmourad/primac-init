SUBROUTINE IVCM_REV_ALLOC_NEW
********************************************************************************
*   Program name :- IVCM_REV_ALLOC_NEW
*   Created:- 11/26/2004
*------------------------------------------------------------------------------*
*

* In Properties:
* --------------
*  JOB_EST, JOB_NO, REF_NO, JOB_INV_BAL, IVC_NO, DI_ALLOC_DIV_MV, DI_ALLOC_AMT_MV, DI_IVC_CHG_CAT, DI_IVC_MENU
*
*
* Out Properties:
* ---------------
* ALL_DIV, ALL_DEP, ALL_DIS, ALL_CCT, ALL_EST, ALL_PER, ALL_SEQ, ALL_PER_SUM, GRID_TOT_AMT
*
*  
********************************************************************************
$INCLUDE WWINSERT RBO.H

$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE PMC.CPYLIB CUSTOMER
$INCLUDE JCS.CPYLIB INVOICE
$INCLUDE PMC.CPYLIB INVOICE.CODE
$INCLUDE PMC.CPYLIB TAX
$INCLUDE PMC.CPYLIB TERMS 
$INCLUDE PMC.CPYLIB VOID.INVOICES
$INCLUDE PMC.CPYLIB SALES.CODE
$INCLUDE PMC.CPYLIB SHIP.VIA
$INCLUDE JCS.CPYLIB JOB
$INCLUDE JCS.CPYLIB JOB.SHIP
$INCLUDE JES.CPYLIB ESTIMATE.JOB
$INCLUDE PMC.CPYLIB COA
$INCLUDE PMC.CPYLIB GLTABLE
$INCLUDE PMC.CPYLIB COUNTRY.CODE
$INCLUDE CPYLIB CHAR

* Insert method code here

*
*---- Opening of the Files
*
ERRMSG = ''

OPEN 'COMPANY' TO COMPANY ELSE
      ERRMSG='CANNOT OPEN COMPANY FILE'
      GOTO 99999
END
OPEN 'CONTROL' TO CONTROL ELSE
      ERRMSG='CANNOT OPEN CONTROL FILE'
      GOTO 99999
END
OPEN 'INVOICE' TO INVOICE ELSE
      ERRMSG='CANNOT OPEN INVOICE FILE'
      GOTO 99999
END
OPEN 'INVOICE.CODE' TO INVOICE.CODE ELSE
      ERRMSG='CANNOT OPEN INVOICE.CODE FILE'
      GOTO 99999
END
OPEN 'TAX' TO TAX ELSE
      ERRMSG='CANNOT OPEN TAX FILE'
      GOTO 99999
END
OPEN 'TERMS' TO TERMS ELSE
      ERRMSG='CANNOT OPEN TERMS FILE'
      GOTO 99999
END
OPEN 'VOID.INVOICES' TO VOID.INVOICES ELSE
      ERRMSG='CANNOT OPEN VOID.INVOICES FILE'
      GOTO 99999
END
OPEN 'SALES.CODE' TO SALES.CODE ELSE
      ERRMSG='CANNOT OPEN SALES.CODE FILE'
      GOTO 99999
END
OPEN 'SHIP.VIA' TO SHIP.VIA ELSE
      ERRMSG='CANNOT OPEN SHIP.VIA FILE'
      GOTO 99999
END
OPEN 'JOB' TO JOB ELSE
      ERRMSG='CANNOT OPEN JOB FILE'
      GOTO 99999
END
OPEN 'JOB.SHIP' TO JOB.SHIP ELSE
      ERRMSG='CANNOT OPEN JOB.SHIP FILE'
      GOTO 99999
END
OPEN 'ESTIMATE.JOB' TO ESTIMATE.JOB ELSE
      ERRMSG='CANNOT OPEN ESTIMATE.JOB FILE'
      GOTO 99999
END
OPEN 'COA' TO COA ELSE
      ERRMSG='CANNOT OPEN COA FILE'
      GOTO 99999
END

*		OPEN 'GLTABLE' TO GLTABLE ELSE
*		      ERRMSG='CANNOT OPEN GLTABLE FILE'
*		      GOTO 99999
*		END
OPEN 'COUNTRY.CODE' TO COUNTRY.CODE ELSE
      ERRMSG='CANNOT OPEN COUNTRY.CODE FILE'
      GOTO 99999
END

*
*-- Input parameters
*

STATUS=RBO.getProperty('','PMCProperty',PMCProperty)
CONO = PMCProperty<1,4>
VAL = RBO.getProperty('','JOB_EST',JOB.EST) ; * has to get JOB.ESTIMATE
VAL = RBO.getProperty('','JOB_NO',JOB.NO) ; * job no
VAL = RBO.getProperty('','REF_NO',REF.NO) ; * is the row no
VAL = RBO.getProperty('','JOB_INV_BAL',LINE.AMT); * amount
VAL = RBO.getProperty('','IVC_NO',IVC.NO); * invoice no
VAL = RBO.getProperty('','DI_ALLOC_DIV_MV',DI_IVC.ALLOC.DIV); * 
VAL = RBO.getProperty('','DI_ALLOC_AMT_MV',DI_IVC.ALLOC.AMT); * 
VAL = RBO.getProperty('','DI_IVC_CHG_CAT',DI_IVC.CHG.CAT)
VAL = RBO.getProperty('','DI_IVC_MENU',DI.IVC.MENU)

*MENU="INVOICE" OR "PREBILL"

IVC.ALLOC.DIV<1,REF.NO> = DI_IVC.ALLOC.DIV
IVC.ALLOC.AMT<1,REF.NO> = DI_IVC.ALLOC.AMT

MENU=DI.IVC.MENU
	
	GCCT = "000"
	GDEP = "00"
	GDIV = "00"
AMT.REM = LINE.AMT

*	IF IVC.ALLOC.DIV<1,REF.NO> # "" THEN
*	CO.REV.DIST = ""
*	END ELSE
		IF JOB.EST # '' THEN
			CO.REV.DIST = "E"
		END ELSE
			CO.REV.DIST = "J"
		END
*	END
*
*--- Progrmming 
*
  ADD.SUBS = PROG.FLAG[2,1]
  PROG.FLAG = PROG.FLAG[1,1]
  TOGGLE.FLAG = 0
  IF PROG.FLAG = 'I' AND ADD.SUBS = 0 THEN
    REF.CNT = DCOUNT(IVC.CHG.CODE, VM)
    FOR XX = 1 TO REF.CNT
      IF IVC.CHG.JOB<1,XX> # '' AND IVC.CHG.JOB<1,XX> # JOB.NO THEN TOGGLE.FLAG = 1
    NEXT XX
  END
BAL.FLG = ""

 MATREAD GLTABLE.REC FROM CONTROL, CONO:'GLTABLE' ELSE
    ERRMSG = 'CANNOT LOCATE CONTROL, GLTABLE'
    GOTO 99999
  END
 MATREAD JOB.REC FROM JOB, CONO:JOB.NO ELSE
    ERRMSG = "CANNOT LOCATE JOB FILE"
    GOTO 99999
  END

*
*-- Invoice Revenue Allocation
*

IVC.CHG.CODE<1,REF.NO> = DI_IVC.CHG.CAT

*7000* INV ALLOC
* 17927
  IF PROG.FLAG = "I" AND IVC.ALLOC.DIV<1,REF.NO> # "" THEN
    COA.LEVEL = 2
  END ELSE
    COA.LEVEL = 0
  END
* 22870
  IF IVC.CHG.JOB<1,REF.NO> # "" THEN
    JOBNO = IVC.CHG.JOB<1,REF.NO>
  END
CO.ALLOC.FLG = "Y"
  IF CO.ALLOC.FLG = "Y" THEN
    BAL.FLG = ""
    IF PROG.FLAG # "I" THEN
*        IF ICODE = "JOB" OR ICODE = "JOB1"  OR INC.CATEGORY = "OTH" THEN
      IF IVC.CHG.CODE<1,REF.NO> = "JOB" OR IVC.CHG.CODE<1,REF.NO> = "JOB1" OR IVC.CHG.CAT<1,REF.NO> = "OTH" THEN
        MATREAD SLC.REC FROM SALES.CODE, CONO:JOB.SALES.CODE ELSE
          MAT SLC.REC = ""
        END
      END ELSE
        MATREAD SLC.REC FROM SALES.CODE, CONO:IVC.TAX.JURS<1,REF.NO> ELSE
          MAT SLC.REC = ""
        END
      END
    END
PROG.FLAG = "I"


  BEGIN CASE
      CASE PROG.FLAG = "I"
* COMMENTED THE BELOW CASE AS IT IS NOT VALIDATING			
*      CASE IVC.CHG.CODE<1,REF.NO> = "JOB" OR IVC.CHG.CODE<1,REF.NO> = "JOB1" OR IVC.CHG.CAT<1,REF.NO> = "OTH"

        IF SLC.GL.ACCT = "" THEN
          MATREAD COA.REC FROM COA, CONO:GLTB.SALES ELSE COA.LEVEL = 0				
        END ELSE
          MATREAD COA.REC FROM COA, CONO:SLC.GL.ACCT ELSE COA.LEVEL = 0			
        END

*VAL = RBO.setProperty('','BILL_TO', '------Checking---44---' : PROG.FLAG : "---" : CO.REV.DIST : " ====" : COA.LEVEL : "####" : SLC.GL.ACCT )

* T20298 ---v----
       CASE IVC.CHG.CODE<1,REF.NO> = "DSC"
*      CASE IVC.CHG.CODE<1,REF.NO> = "DSC" OR INC.CATEGORY = "DSC"
* T20298 ---^---
        IF SLC.DS.ACCT = "" THEN
          MATREAD COA.REC FROM COA, CONO:GLTB.TRADE.DISC ELSE COA.LEVEL = 0
        END ELSE
          MATREAD COA.REC FROM COA, CONO:SLC.DS.ACCT ELSE COA.LEVEL = 0
        END
     CASE IVC.CHG.CAT<1,REF.NO> = "MSC"
        MATREAD SLC.REC FROM SALES.CODE, CONO:IVC.TAX.JURS<1,REF.NO> ELSE
          MAT SLC.REC = ""
        END
        BEGIN CASE
          CASE SLC.GL.ACCT # ""
            MATREAD COA.REC FROM COA, CONO : SLC.GL.ACCT ELSE COA.LEVEL = 0
          CASE 1
            MATREAD COA.REC FROM COA, CONO:GLTB.SALES ELSE COA.LEVEL = 0
        END CASE
      CASE 1
        IF SLC.GL.ACCT # "" THEN
          MATREAD COA.REC FROM COA, CONO:SLC.GL.ACCT  ELSE COA.LEVEL = 0
        END ELSE
          MATREAD COA.REC FROM COA, CONO:GLTB.SALES ELSE COA.LEVEL = 0
        END
    END CASE

    IF COA.LEVEL < 1 THEN 
	ALL.DIV<1,LN> = GDIV
 	RETURN
    END
*
*--- Start of the Revenue Allocation
*
****************************************************************************************************************
****************************************************************************************************************
*    CALL INV.ALLOC.MAINT(CONO, BAL.FLG, IVC.NO, JOBNO, MENU, PROG.FLAG, REF.NO, COA.LEVEL)

*VAL = RBO.setProperty('','CATG_DESC', 'MY VALUES JOB.NO ---' : JOB.NO : '--JOB.EST--' : JOB.EST :'--': CO.REV.DIST )


 IF CO.REV.DIST # "" THEN
    BEGIN CASE
      CASE CO.REV.DIST = "E" 
        IF JOB.EST # "" THEN
*		VAL = RBO.setProperty('','CATG_DESC', 'AT 4000 sub EE 1--11 ivc-alloc-div--' : CO.REV.DIST) 
		GOSUB 4000
        END ELSE
          	IF JOB.NO # "" THEN
*			VAL = RBO.setProperty('','CATG_DESC', 'AT 5000 sub EE 1--11')
	  		GOSUB 5000
	       END ELSE
*			VAL = RBO.setProperty('','CATG_DESC', 'AT 6000 sub EE 1--11')
	              GOSUB 6000
          	END
        END
      CASE CO.REV.DIST = "J" 
        IF JOB.NO # "" THEN
*			VAL = RBO.setProperty('','CATG_DESC', 'AT 4000 sub JJJ 1--11')
          GOSUB 5000
        END ELSE
*			VAL = RBO.setProperty('','CATG_DESC', 'AT 5000 sub JJJ 1--11')
          GOSUB 6000
        END
      CASE 1
*			VAL = RBO.setProperty('','CATG_DESC', 'AT 6000 sub JJJ 1--11')
        GOSUB 6000
    END CASE
  END ELSE
    BEGIN CASE
      CASE IVC.ALLOC.DIV<1,REF.NO> = ""
          BEGIN CASE 
          CASE JOB.EST # ""
*			VAL = RBO.setProperty('','BILL_TO', 'AT 4000 sub 2--22' : '---ref-no---' : REF.NO : '--JOB-EST--' : JOB.EST : '--IVC-ALLOC-DIV--' : IVC.ALLOC.DIV<1,REF.NO> )
            GOSUB 4000
          CASE JOB.NO # ""
*			VAL = RBO.setProperty('','BILL_TO', 'AT 5000 sub 2--22' : '---ref-no---' : REF.NO : '--JOB-EST--' : JOB.EST : '--IVC-ALLOC-DIV--' : IVC.ALLOC.DIV<1,REF.NO>)
            GOSUB 5000
        END CASE
      CASE 1
*			VAL = RBO.setProperty('','BILL_TO', 'AT 6000 sub 2--22' : '---ref-no---' : REF.NO : '--JOB-EST--' : JOB.EST : '--IVC-ALLOC-DIV--' : IVC.ALLOC.DIV<1,REF.NO> )
      	GOSUB 6000
	END CASE
  END
RETURN

*VAL = RBO.setProperty('','CCTR_CODES', 'END OF THE STATEMENT 444' : '--REF-NO--' : REF.NO)
****************************************************************************************************************
****************************************************************************************************************

4000 * GET ESTIMATE
  MATREAD ESTJ.REC FROM ESTIMATE.JOB, CONO:JOB.NO ELSE
    ERRMSG = "No estimate for this job"
    GOTO 99999
  END
  LB.CNT = DCOUNT(ESTJ.LB.DEPT,VM)
  MT.CNT = DCOUNT(ESTJ.MT.DEPT,VM)
  OS.CNT = DCOUNT(ESTJ.OS.DEPT,VM)
  SP.CNT = DCOUNT(ESTJ.SP.DEPT,VM)
  MS.CNT = DCOUNT(ESTJ.MS.DEPT,VM)
*
  DIM EST.TOT(2)
  MAT EST.TOT = ""
  IF COA.LEVEL = 0 THEN 
    HOLD.DIV = GDIV
  END ELSE
    HOLD.DIV = JOB.DIV
  END
4200 *
  IF LB.CNT = 0 THEN GOTO 4210
  FOR X = 1 TO LB.CNT
    BEGIN CASE
      CASE COA.LEVEL = 3
        DEPT.CCST = ESTJ.LB.DEPT<1,X>:ESTJ.LB.CCTR<1,X>
      CASE COA.LEVEL = 2
        DEPT.CCST = ESTJ.LB.DEPT<1,X>:GCCT
      CASE COA.LEVEL < 2
        DEPT.CCST = GDEP:GCCT
    END CASE
    DEPT.CCST.SALE = ESTJ.LB.SALE<1,X>
    GOSUB 4500
  NEXT X
4210 *
  IF MT.CNT = 0 THEN GO 4220
  FOR Y = 1 TO MT.CNT
    BEGIN CASE
      CASE COA.LEVEL = 3
        DEPT.CCST = ESTJ.MT.DEPT<1,Y>:ESTJ.MT.CCTR<1,Y>
      CASE COA.LEVEL = 2
        DEPT.CCST = ESTJ.MT.DEPT<1,Y>:GCCT
      CASE COA.LEVEL < 2
        DEPT.CCST = GDEP:GCCT
    END CASE
    DEPT.CCST.SALE = ESTJ.MT.SALE<1,Y>
    GOSUB 4500
  NEXT Y
4220 *
  IF OS.CNT = 0 THEN GOTO 4230
  FOR Z = 1 TO OS.CNT
    BEGIN CASE
      CASE COA.LEVEL = 3
        DEPT.CCST = ESTJ.OS.DEPT<1,Z>:ESTJ.OS.CCTR<1,Z>
      CASE COA.LEVEL = 2
        DEPT.CCST = ESTJ.OS.DEPT<1,Z>:GCCT
      CASE COA.LEVEL < 2
        DEPT.CCST = GDEP:GCCT
    END CASE
    DEPT.CCST.SALE = ESTJ.OS.SALE<1,Z>
    GOSUB 4500
  NEXT Z
4230 *
  IF SP.CNT = 0 THEN GOTO 4240
  FOR R = 1 TO SP.CNT
    BEGIN CASE
      CASE COA.LEVEL = 3
        DEPT.CCST = ESTJ.SP.DEPT<1,R>:ESTJ.SP.CCTR<1,R>
      CASE COA.LEVEL = 2
        DEPT.CCST = ESTJ.SP.DEPT<1,R>:GCCT
      CASE COA.LEVEL < 2
        DEPT.CCST = GDEP:GCCT
    END CASE
    DEPT.CCST.SALE = ESTJ.SP.SALE<1,R>
    GOSUB 4500
  NEXT R
4240 *
  IF MS.CNT = 0 THEN GOTO 4250
  FOR S = 1 TO MS.CNT
    BEGIN CASE
      CASE COA.LEVEL = 3
        DEPT.CCST = ESTJ.MS.DEPT<1,S>:ESTJ.MS.CCTR<1,S>
      CASE COA.LEVEL = 2
        DEPT.CCST = ESTJ.MS.DEPT<1,S>:GCCT
      CASE COA.LEVEL < 2
        DEPT.CCST = GDEP:GCCT
    END CASE
    DEPT.CCST.SALE = ESTJ.MS.SALE<1,S>
    GOSUB 4500
  NEXT S
4250 *
  GOTO 4520
*
4500 * LOAD EST IN ARRAY
  LOCATE HOLD.DIV:DEPT.CCST IN EST.TOT(1)  SETTING DCP ELSE GOTO 4510
  EST.TOT(2)<DCP> = EST.TOT(2)<DCP> + DEPT.CCST.SALE
  GOTO 4515
*
4510 * INSERT NEW DEPT.CSST
  EST.TOT(1)<DCP> = HOLD.DIV:DEPT.CCST
  EST.TOT(2)<DCP> = DEPT.CCST.SALE
4515 *
  RETURN
4520 *
  IF EST.TOT(1) = "" THEN GOTO 4599
  DONE = 0
  E = 0
  LOOP
  WHILE DONE = 0
    E = E + 1
    IF EST.TOT(1)<E> = "" THEN DONE = 1
    ALL.SEQ<1,E> = E
 IF EST.TOT(1)<E>[1,2] # "" THEN
    ALL.DIV<1,E> = EST.TOT(1)<E>[1,2]
    ALL.DEP<1,E> = EST.TOT(1)<E>[3,2]
    ALL.CCT<1,E> = EST.TOT(1)<E>[5,3]
    ALL.EST<1,E> = OCONV(EST.TOT(2)<E>,'MD2')
    EST.PER = EST.TOT(2)<E> / ESTJ.TOT.SALE
*T25874 ALL.DIS<1,E> = INT(LINE.AMT * EST.PER)
    ALL.DIS<1,E> = OCONV((LINE.AMT * EST.PER),'MD2')
    ALL.PER<1,E> = OCONV(EST.PER * 1000000 ,'MD4')
 END
  REPEAT
  TOT.DIS = SUM(ALL.DIS)
  AMT.REM = OCONV(LINE.AMT,'MD2') - TOT.DIS
*  IF AMT.REM # 0 THEN

IF ALL.EST<1,1> = "0.00" THEN
* CHECK THIS LATER
   ALL.DIS<1,1> = ALL.DIS<1,1> + AMT.REM
   ALL.DIS<1,1> = OCONV(ALL.DIS<1,1> * 100.00,'MD2')
   ALL.PER<1,1> = "100.0000"
  END
  ALL.SEQ = DELETE(ALL.SEQ,1,E,0)
  LINES = E - 1
  LN = 1

VAL = RBO.setProperty('','ALL_DIV',ALL.DIV<1>)
VAL = RBO.setProperty('','ALL_DEP',ALL.DEP<1>)
VAL = RBO.setProperty('','ALL_DIS',ALL.DIS<1>)
VAL = RBO.setProperty('','ALL_CCT',ALL.CCT<1>)
VAL = RBO.setProperty('','ALL_EST',ALL.EST<1>)
VAL = RBO.setProperty('','ALL_PER',ALL.PER<1>)
VAL = RBO.setProperty('','ALL_SEQ',ALL.SEQ<1>)
VAL = RBO.setProperty('','GRID_TOT_AMT',ESTJ.TOT.SALE<1>)
VAL = RBO.setProperty('','ALL_PER_SUM',SUM(ALL.PER<1>))

*VAL = RBO.setProperty('','BILL_TO',' ICOUNT 4000--' : ALL.DIS<1,0>: '--REF-NO--' : REF.NO : '--EST-EST--' : ALL.EST<1>)

4599 *
  RETURN

**********************************************************
5000 * GET JOB ACTUAL
*
  MATREAD JOB.REC FROM JOB, CONO:JOB.NO ELSE
    ERRMSG = "No record for this job"
    GOTO 99999
  END
  IF COA.LEVEL = 0 THEN 
    HOLD.DIV = GDIV
  END ELSE
    HOLD.DIV = JOB.DIV
  END
  LB.CNT = DCOUNT(JOB.LB.DEPT,VM)
  MT.CNT = DCOUNT(JOB.MT.DEPT,VM)
  OS.CNT = DCOUNT(JOB.OS.DEPT,VM)
  SP.CNT = DCOUNT(JOB.SP.DEPT,VM)
  MS.CNT = DCOUNT(JOB.MS.DEPT,VM)
*
  DIM JOB.TOT(2)
  MAT JOB.TOT = ""
5200 *
  IF LB.CNT = 0 THEN GOTO 5210
  FOR X = 1 TO LB.CNT
    BEGIN CASE
      CASE COA.LEVEL = 3
        DEPT.CCST = JOB.LB.DEPT<1,X>:JOB.LB.CCTR<1,X>
      CASE COA.LEVEL = 2
        DEPT.CCST = JOB.LB.DEPT<1,X>:GCCT
      CASE COA.LEVEL < 2
        DEPT.CCST = GDEP:GCCT
    END CASE
    DEPT.CCST.SALE = JOB.LB.SALE<1,X>
    GOSUB 5500
  NEXT X
5210 *
  IF MT.CNT = 0 THEN GO 5220
  FOR Y = 1 TO MT.CNT
    BEGIN CASE
      CASE COA.LEVEL = 3
        DEPT.CCST = JOB.MT.DEPT<1,Y>:JOB.MT.CCTR<1,Y>
      CASE COA.LEVEL = 2
        DEPT.CCST = JOB.MT.DEPT<1,Y>:GCCT
      CASE COA.LEVEL < 2
        DEPT.CCST = GDEP:GCCT
    END CASE
    DEPT.CCST.SALE = JOB.MT.SALE<1,Y>
    GOSUB 5500
  NEXT Y
5220 *
  IF OS.CNT = 0 THEN GOTO 5230
  FOR Z = 1 TO OS.CNT
    BEGIN CASE
      CASE COA.LEVEL = 3
        DEPT.CCST = JOB.OS.DEPT<1,Z>:JOB.OS.CCTR<1,Z>
      CASE COA.LEVEL = 2
        DEPT.CCST = JOB.OS.DEPT<1,Z>:GCCT
      CASE COA.LEVEL < 2
        DEPT.CCST = GDEP:GCCT
    END CASE
    DEPT.CCST.SALE = JOB.OS.SALE<1,Z>
    GOSUB 5500
  NEXT Z
5230 *
  IF SP.CNT = 0 THEN GOTO 5240
  FOR R = 1 TO SP.CNT
    BEGIN CASE
      CASE COA.LEVEL = 3
        DEPT.CCST = JOB.SP.DEPT<1,R>:JOB.SP.CCTR<1,R>
      CASE COA.LEVEL = 2
        DEPT.CCST = JOB.SP.DEPT<1,R>:GCCT
      CASE COA.LEVEL < 2
        DEPT.CCST = GDEP:GCCT
    END CASE
    DEPT.CCST.SALE = JOB.SP.SALE<1,R>
    GOSUB 5500
  NEXT R
5240 *
  IF MS.CNT = 0 THEN GOTO 5250
  FOR S = 1 TO MS.CNT
    BEGIN CASE
      CASE COA.LEVEL = 3
        DEPT.CCST = JOB.MS.DEPT<1,S>:JOB.MS.CCTR<1,S>
      CASE COA.LEVEL = 2
        DEPT.CCST = JOB.MS.DEPT<1,S>:GCCT
      CASE COA.LEVEL < 2
        DEPT.CCST = GDEP:GCCT
    END CASE
    DEPT.CCST.SALE = JOB.MS.SALE<1,S>
    GOSUB 5500
  NEXT S
5250 *
  GOTO 5520
*
5500 * LOAD EST IN ARRAY
  LOCATE HOLD.DIV:DEPT.CCST IN JOB.TOT(1)  SETTING DCP ELSE GOTO 5510
  JOB.TOT(2)<DCP> = JOB.TOT(2)<DCP> + DEPT.CCST.SALE
  GOTO 5515
*
5510 * INSERT NEW DEPT.CSST
  JOB.TOT(1)<DCP> = HOLD.DIV:DEPT.CCST
  JOB.TOT(2)<DCP> = DEPT.CCST.SALE
5515*
  RETURN
5520 *
*     IF JOB.TOT(1) = "" THEN GOTO 5599
  IF SUM(JOB.TOT(2)) = 0 THEN GOTO 5599
  DONE = 0
  E = 0
  LOOP
  WHILE DONE = 0
    E = E + 1
    IF JOB.TOT(1)<E> = "" THEN DONE = 1
    ALL.SEQ<1,E> = E
 IF JOB.TOT(1)<E>[1,2] # "" THEN
    ALL.DIV<1,E> = JOB.TOT(1)<E>[1,2]
    ALL.DEP<1,E> = JOB.TOT(1)<E>[3,2]
    ALL.CCT<1,E> = JOB.TOT(1)<E>[5,3]
    ALL.EST<1,E> = OCONV(JOB.TOT(2)<E>,'MD2')
    IF JOB.TOT.SALE+0 # 0 THEN
      JOB.PER = JOB.TOT(2)<E> / JOB.TOT.SALE
    END ELSE
      JOB.PER = 1
    END
*T25874 ALL.DIS<1,E> = INT(LINE.AMT * JOB.PER)
    ALL.DIS<1,E> = OCONV((LINE.AMT * JOB.PER),'MD2')
    ALL.PER<1,E> = OCONV(JOB.PER * 1000000,'MD4')
 END
  REPEAT
  TOT.DIS = SUM(ALL.DIS)
   AMT.REM = OCONV(LINE.AMT,'MD2') - TOT.DIS
  AMT.REM = LINE.AMT - TOT.DIS
*  IF AMT.REM # 0 THEN
IF ALL.EST<1,1> = "0.00" THEN
* CHECK THIS LATER
   ALL.DIS<1,1> = ALL.DIS<1,1> + AMT.REM
   ALL.DIS<1,1> = OCONV(ALL.DIS<1,1> * 100.00,'MD2')
   ALL.PER<1,1> = "100.0000"
  END
  ALL.SEQ = DELETE(ALL.SEQ,1,E,0)
  LINES = E - 1
  LN = 1

VAL = RBO.setProperty('','ALL_DIV',ALL.DIV<1>)
VAL = RBO.setProperty('','ALL_DEP',ALL.DEP<1>)
VAL = RBO.setProperty('','ALL_DIS',ALL.DIS<1>)
VAL = RBO.setProperty('','ALL_CCT',ALL.CCT<1>)
VAL = RBO.setProperty('','ALL_EST',ALL.EST<1>)
VAL = RBO.setProperty('','ALL_PER',ALL.PER<1>)
VAL = RBO.setProperty('','ALL_SEQ',ALL.SEQ<1>)
VAL = RBO.setProperty('','ALL_PER_SUM',SUM(ALL.PER<1>))
VAL = RBO.setProperty('','GRID_TOT_AMT',JOB.TOT.SALE )

*VAL = RBO.setProperty('','BILL_TO',' ICOUNT 5000 --' : ALL.DIS<1,0>: '--REF-NO--' : REF.NO : MENU)

5599 *
  RETURN

**********************************************************

6000 * GET INVOICE ALLOCATION
  IF MENU = "MANUAL" THEN
    ICNT = DCOUNT(IVC.ALLOC.DIV<1,REF.NO>,SVM)
    T.ALL = SUM(IVC.ALLOC.AMT<1,REF.NO>)
    FOR I = 1 TO ICNT
      ALL.SEQ<1,I> = I
      ALL.DIV<1,I> = IVC.ALLOC.DIV<1,REF.NO,I>[1,2]
      ALL.DEP<1,I> = IVC.ALLOC.DIV<1,REF.NO,I>[3,2]
      ALL.CCT<1,I> = IVC.ALLOC.DIV<1,REF.NO,I>[5,3]
      ALL.EST<1,I> = 0
*
      T.PER = IVC.ALLOC.AMT<1,REF.NO,I>/ T.ALL
*T25874   DI_IVC.ALLOC.AMT<1,REF.NO,I> = (LINE.AMT * T.PER)
      IVC.ALLOC.AMT<1,REF.NO,I> = ICONV((LINE.AMT * T.PER),'MD0')
*
      ALL.DIS<1,I> = IVC.ALLOC.AMT<1,REF.NO,I>
      ALL.PER<1,I> = IVC.ALLOC.AMT<1,REF.NO,I> / LINE.AMT
      ALL.PER<1,I> = ALL.PER<1,I> * 1000000
    NEXT I
  END ELSE
    ICNT = DCOUNT(IVC.ALLOC.DIV<1,REF.NO>,SVM)
    T.ALL = SUM(IVC.ALLOC.AMT<1,REF.NO>)
    FOR I = 1 TO ICNT
      ALL.SEQ<1,I> = I
      ALL.DIV<1,I> = IVC.ALLOC.DIV<1,REF.NO,I>[1,2]
      ALL.DEP<1,I> = IVC.ALLOC.DIV<1,REF.NO,I>[3,2]
      ALL.CCT<1,I> = IVC.ALLOC.DIV<1,REF.NO,I>[5,3]
      ALL.EST<1,I> = "0.00"
*
      T.PER = IVC.ALLOC.AMT<1,REF.NO,I>/ T.ALL
*T25874   IVC.ALLOC.AMT<1,REF.NO,I> = (LINE.AMT * T.PER)
      IVC.ALLOC.AMT<1,REF.NO,I> = ICONV((LINE.AMT * T.PER),'MD0')
*
      ALL.DIS<1,I> = OCONV(IVC.ALLOC.AMT<1,REF.NO,I>,'MD2')
      ALL.PER<1,I> = IVC.ALLOC.AMT<1,REF.NO,I> / LINE.AMT
      ALL.PER<1,I> = OCONV(ALL.PER<1,I> * 1000000,'MD4')
    NEXT I
  END
  LINES = ICNT
  LN = 1
VAL = RBO.setProperty('','ALL_DIV',ALL.DIV<1>)
VAL = RBO.setProperty('','ALL_DEP',ALL.DEP<1>)
VAL = RBO.setProperty('','ALL_DIS',ALL.DIS<1>)
VAL = RBO.setProperty('','ALL_CCT',ALL.CCT<1>)
VAL = RBO.setProperty('','ALL_EST',ALL.EST<1>)
VAL = RBO.setProperty('','ALL_PER',ALL.PER<1>)
VAL = RBO.setProperty('','ALL_SEQ',ALL.SEQ<1>)
VAL = RBO.setProperty('','ALL_PER_SUM',SUM(ALL.PER<1>))
VAL = RBO.setProperty('','GRID_TOT_AMT',ESTJ.TOT.SALE<1>)

*VAL = RBO.setProperty('','BILL_TO',' ICOUNT 6000--' : ALL.DIS<1,0>: '--REF-NO--' : REF.NO : MENU)

RETURN

****************************************************************************************************************
****************************************************************************************************************
*
************* End of the Revenue allocation
*   
    IF BAL.FLG = "P" THEN
      ERRMSG = "Revenue Distribution Could be Wrong check Line"
      GOTO 99999
      ACTION = "C"
    END
  END
*

99999 *
IF ERRMSG # '' THEN
	VAL = RBO.setProperty('','ServerStatus','E')
	VAL = RBO.setProperty('','ServerMessage',ERRMSG)
END ELSE
	VAL = RBO.setProperty('','ServerStatus','')
	VAL = RBO.setProperty('','ServerMessage','')
END
* End of method code
RETURN

