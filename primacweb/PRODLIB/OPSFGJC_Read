SUBROUTINE OPSFGJC_Read
********************************************************************************
*   Program name :- OPSFGJC_Read
*   Created:- 11/4/2003
*------------------------------------------------------------------------------*
*

* In Properties:
* --------------
*  
*
* Out Properties:
* ---------------
*  
********************************************************************************
$INCLUDE WWINSERT RBO.H

* Insert method code here
$INCLUDE CPYLIB COMMON1
$INCLUDE JCS.CPYLIB COM.JCS.LINK  
$INCLUDE ICS.CPYLIB COM.INV.MAIN  
$INCLUDE ICS.CPYLIB COM.INV.SERIAL
$INCLUDE JCS.CPYLIB COM.INV.STATS 
$INCLUDE PMC.CPYLIB COM.CUST      
$INCLUDE OPS.CPYLIB COM.ORDER     
$INCLUDE OPS.CPYLIB COM.OPS.LINK
$INCLUDE PMC.CPYLIB COM.COMPANY
  
$DEFINE JOB
$DEFINE JOBMATL
$DEFINE INVENTORY
$DEFINE INVWHSE
$DEFINE INVWHSELOC
$DEFINE INVSTATS
$DEFINE INVJOBSTATS
$DEFINE COSTCNTWIP
$DEFINE JOBFNGDSTATS
$DEFINE ORDER
$DEFINE ORDERDETAILINQ
$DEFINE INVRECEIPTS
$DEFINE CATEGORY
$DEFINE FNGDSTATS
$DEFINE CUSTOMER
$DEFINE COMPANY

$DEFINE FILEVARS
$INCLUDE CPYLIB FILE.VARS
$INCLUDE JCS.CPYLIB JOB
$INCLUDE JCS.CPYLIB REVERSE.WIP.HIST
$INCLUDE OPS.CPYLIB ORDER
$INCLUDE OPS.CPYLIB ORDER.DETAIL
$INCLUDE OPS.CPYLIB ORDER.DETAIL.INQ
$INCLUDE OPS.CPYLIB JOB.FNGD.STATS
$INCLUDE OPS.CPYLIB FNGD.WIP.HIST
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV_RECEIPTS
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB INV.JOB.STATS
$INCLUDE ICS.CPYLIB FNGD.STATS
$INCLUDE ICS.CPYLIB FNGD.JOB.STATS
$INCLUDE PMC.CPYLIB JOB.SALES.STATS
$INCLUDE PMC.CPYLIB CUSTOMER
$INCLUDE PMC.CPYLIB COST.CNTR
$INCLUDE PMC.CPYLIB FISCAL
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE CPYLIB CHAR
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE PMC.CPYLIB DIVISION
$INCLUDE PMC.CPYLIB SECURITY

DIM OLD.FWH.REC(10)
MAT OLD.FWH.REC = ""
ERRMSG = ""
PORT.NO = "TTY"
MANU.AMT = ''
CALL SYSVARS.SUB(PORT.NO)
      OPEN '','COMPANY' TO COMPANY ELSE
         ERRMSG='COMPANY FILE IS MISSING'; GOTO 1000
      END
      OPEN '','CONTROL' TO CONTROL ELSE
         ERRMSG='CONTROL FILE IS MISSING'; GOTO 1000
      END      
      OPEN '','FNGD.WIP.HIST' TO FNGD.WIP.HIST ELSE
         ERRMSG='FNGD.WIP.HIST FILE IS MISSING'; GOTO 1000
      END
      
      OPEN '','FNGD.RECEIPT.HIST' TO FNGD.RECEIPT.HIST ELSE
         ERRMSG='FNGD.RECEIPT.HIST FILE IS MISSING'; GOTO 1000
      END
      OPEN "","SHIP.TO" TO SHIP.TO ELSE
         ERRMSG = "Cannot locate the SHIP.TO file";GOTO 1000
      END

*
*---- Get company
*
STATUS = RBO.getProperty('','MODE',MODE)
STATUS = RBO.getProperty('','CONFIRM',CONFIRM)
STATUS = RBO.getProperty('','ID',ID)
CONO   = ID[1,3]
JOBNO  = ID[4,99]

      MATREAD COMP.REC FROM COMPANY, CONO ELSE
         ERRMSG = "Invalid Company ID (":CONO:")"
         GOTO 1000
      END
      MATREAD OPCO.REC FROM CONTROL, CONO:"OPS" ELSE
         ERRMSG = "Cannot locate Order Processing company setup"
         GOTO 1000
      END

****************************JOB.MAINT.OPEN START****************************************
      OPEN "","JOB" TO JOB ELSE
         ERRMSG = "JOB"; GOTO 1000
      END
      OPEN "","JOB.TIME" TO JOB.TIME ELSE
         ERRMSG = "JOB.TIME"; GOTO 1000
      END
      OPEN "","JOB.MATL" TO JOB.MATL ELSE
         ERRMSG = "JOB.MATL"; GOTO 1000
      END
      OPEN "","JOB.OSP" TO JOB.OSP ELSE
         ERRMSG = "JOB.OSP"; GOTO 1000
      END
      OPEN "","JOB.SHIP" TO JOB.SHIP ELSE
         ERRMSG = "JOB.SHIP"; GOTO 1000
      END
      OPEN "","JOB.MISC" TO JOB.MISC ELSE
         ERRMSG = "JOB.MISC"; GOTO 1000
      END
      OPEN "","COST.CNTR.WIP" TO COST.CNTR.WIP ELSE
         ERRMSG = "COST.CNTR.WIP"; GOTO 1000
      END
      OPEN "","CUSTOMER" TO CUSTOMER ELSE
         ERRMSG = "CUSTOMER"; GOTO 1000
      END
      OPEN "","CUSTOMER.XREF" TO CUSTOMER.XREF ELSE
         ERRMSG = "CUSTOMER.XREF"; GOTO 1000
      END
      OPEN "","SALESMAN" TO SALESMAN ELSE
         ERRMSG = "SALESMAN"; GOTO 1000
      END
      OPEN '','CSR.CODE' TO CSR.CODE ELSE
         ERRMSG = 'CSR.CODE' ; GOTO 1000
      END
      OPEN "","JOB.STATS" TO JOB.STATS ELSE
         ERRMSG = "JOB.STATS"; GOTO 1000
      END
      OPEN "","DIVISION" TO DIVISION ELSE
         ERRMSG = "DIVISION"; GOTO 1000
      END
      OPEN "","COST.CNTR" TO COST.CNTR ELSE
         ERRMSG = "COST.CNTR"; GOTO 1000
      END
      OPEN "","INVENTORY" TO INVENTORY ELSE
         ERRMSG = "INVENTORY"; GOTO 1000
      END
      OPEN "","WAREHOUSE" TO WAREHOUSE ELSE
         ERRMSG = "WAREHOUSE"; GOTO 1000
      END
      OPEN "","INV.FNGD" TO INV.FNGD ELSE
         ERRMSG = "INV.FNGD"; GOTO 1000
      END
      OPEN "","CATEGORY" TO CATEGORY ELSE
         ERRMSG = "CATEGORY"; GOTO 1000
      END
      OPEN "","INVENTORY.XREF" TO INVENTORY.XREF ELSE
         ERRMSG = "INVENTORY.XREF"; GOTO 1000
      END
      OPEN "","INV.WHSE" TO INV.WHSE ELSE
         ERRMSG = "INV.WHSE"; GOTO 1000
      END
      OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE
         ERRMSG = "INV.WHSE.LOC"; GOTO 1000
      END
      OPEN "","INV_RECEIPTS" TO INV_RECEIPTS ELSE
         ERRMSG = "INV_RECEIPTS"; GOTO 1000
      END
      OPEN "","INV.STATS" TO INV.STATS ELSE
         ERRMSG = "INV.STATS"; GOTO 1000
      END
      OPEN "","INV.JOB.STATS" TO INV.JOB.STATS ELSE
         ERRMSG = "INV.JOB.STATS"; GOTO 1000
      END
      OPEN "","FNGD.BOM" TO FNGD.BOM ELSE
         ERRMSG = "FNGD.BOM"; GOTO 1000
      END
	OPEN "","PREFIX" TO PREFIX ELSE
         ERRMSG = "PREFIX"; GOTO 1000
      END
      OPEN "","SECURITY" TO SECURITY ELSE
         ERRMSG = "SECURITY"; GOTO 1000
      END
      OPEN "","USER.MAIL" TO USER.MAIL ELSE
         ERRMSG = "USER.MAIL"; GOTO 1000
      END
      OPEN "","SHIP.VIA" TO SHIP.VIA ELSE
         ERRMSG = "SHIP.VIA"; GOTO 1000
      END
      OPEN "","TAX" TO TAX ELSE
         ERRMSG = "TAX"; GOTO 1000
      END
      OPEN "","JOB.CATEGORY" TO JOB.CATEGORY ELSE
         ERRMSG = "JOB.CATEGORY"; GOTO 1000
      END
      OPEN "","SALES.CODE" TO SALES.CODE ELSE
         ERRMSG = "SALES.CODE"; GOTO 1000
      END
      OPEN "","INVOICE.CODE" TO INVOICE.CODE ELSE
         ERRMSG = "INVOICE.CODE"; GOTO 1000
      END

      OPEN "","DEPARTMENT" TO DEPARTMENT ELSE
         ERRMSG = "DEPARTMENT"; GOTO 1000
      END
      OPEN "","JOB.CREDIT.STATS" TO JOB.CREDIT.STATS ELSE
         ERRMSG = "JOB.CREDIT.STATS"; GOTO 1000
      END
      OPEN "","GANG.JOB" TO GANG.JOB ELSE
         ERRMSG = "GANG.JOB"; GOTO 1000
      END
      OPEN "","GANG.ALLOC" TO GANG.ALLOC ELSE
         ERRMSG = "GANG.ALLOC"; GOTO 1000
      END
      IF CO.JES = "Y" THEN
         OPEN "","ESTIMATE" TO ESTIMATE ELSE
            ERRMSG = "ESTIMATE"; GOTO 1000
         END
      END
      IF CO.POS = "Y" THEN
         OPEN "","OUTSIDE.PO" TO OUTSIDE.PO ELSE
            ERRMSG = "OUTSIDE.PO"; GOTO 1000
         END
      END
      OPEN "","ORDER" TO ORDER ELSE
         ERRMSG = "ORDER"; GOTO 1000
      END
      OPEN "","ORDER.DETAIL" TO ORDER.DETAIL ELSE
         ERRMSG = "ORDER.DETAIL"; GOTO 1000
      END
      OPEN "","ORDER.RELEASE" TO ORDER.RELEASE ELSE
         ERRMSG = "ORDER.RELEASE"; GOTO 1000
      END
      OPEN "","FNGD.STATS" TO FNGD.STATS ELSE
         ERRMSG = "FNGD.STATS"; GOTO 1000
      END
      OPEN "","JOB.FNGD.STATS" TO JOB.FNGD.STATS ELSE
         ERRMSG = "JOB.FNGD.STATS"; GOTO 1000
      END
      OPEN "","FNGD.JOB.STATS" TO FNGD.JOB.STATS ELSE
         ERRMSG = "FNGD.JOB.STATS"; GOTO 1000
      END
      OPEN "","FNGD.ORDER.STATS" TO FNGD.ORDER.STATS ELSE
         ERRMSG = "FNGD.ORDER.STATS"; GOTO 1000
      END
      OPEN "","CPYLIB" TO CPYLIB ELSE
         ERRMSG = "CPYLIB"; GOTO 1000
      END
      OPEN "","SYS_TKT_DEF" TO SYS_TKT_DEF ELSE
         ERRMSG = "SYS_TKT_DEF"; GOTO 1000
      END
      OPEN "","SYS_SCN_DEF" TO SYS_SCN_DEF ELSE
         ERRMSG = "SYS_SCN_DEF"; GOTO 1000
      END
      OPEN "","SYS_FILES" TO SYS_FILES ELSE
         ERRMSG = "SYS_FILES"; GOTO 1000
      END
      OPEN "","PFX_FILES" TO PFX_FILES ELSE
         ERRMSG = "PFX_FILES"; GOTO 1000
      END
      OPEN "","SYS_FIELDS" TO SYS_FIELDS ELSE
         ERRMSG = "SYS_FIELDS"; GOTO 1000
      END
      OPEN "","SYS_FLD_HMSG" TO SYS_FLD_HMSG ELSE
         ERRMSG = "SYS_FLD_HMSG"; GOTO 1000
      END
      OPEN "","JKT_NOTIFY" TO JKT_NOTIFY ELSE
         ERRMSG = "JKT_NOTIFY"; GOTO 1000
      END

IF CO.SAS = 'Y' THEN OPEN '','JOB.SALES.STATS' TO JOB.SALES.STATS ELSE ERRMSG='JOB.SALES.STATS FILE IS MISSING'; GOTO 1000
***************************JOB.MAINT.OPEN END*******************************************
*      OPEN "","JOB" TO JOB ELSE
 *        ERRMSG = "JOB"; GOTO 1000
 *     END
  *    OPEN "","DIVISION" TO DIVISION ELSE
  *       ERRMSG = "DIVISION"; GOTO 1000
  *    END
*      OPEN "","SECURITY" TO SECURITY ELSE
 *        ERRMSG = "SECURITY"; GOTO 1000
  *    END

    *  OPEN '','CONTROL' TO CONTROL ELSE
   *      ERRMSG='CONTROL FILE IS MISSING'; GOTO 1000
   *   END

*      OPEN "","JOB.FNGD.STATS" TO JOB.FNGD.STATS ELSE
 *        ERRMSG = "JOB.FNGD.STATS"; GOTO 1000
  *    END
*      OPEN '','FNGD.WIP.HIST' TO FNGD.WIP.HIST ELSE
 *        ERRMSG='FNGD.WIP.HIST FILE IS MISSING'; GOTO 1000
 *     END
*      OPEN "","INVENTORY" TO INVENTORY ELSE
 *        ERRMSG = "INVENTORY"; GOTO 1000
 *     END

*      OPEN "","CATEGORY" TO CATEGORY ELSE
 *        ERRMSG = "CATEGORY"; GOTO 1000
 *     END

*      OPEN "","CUSTOMER" TO CUSTOMER ELSE
*         ERRMSG = "CUSTOMER"; GOTO 1000
*      END

*      OPEN "","INV_RECEIPTS" TO INV_RECEIPTS ELSE
 *        ERRMSG = "INV_RECEIPTS"; GOTO 1000
 *     END


      READV OPER.ID FROM SECURITY, "R.":PORT.NO,2 ELSE OPER.ID = "???"
      
      MATREAD FISCAL.REC FROM CONTROL, CONO:"JCFISCAL" ELSE
    	  ERRMSG = "OPFISCAL IS NOT ON CONTROL FILE"
    	  GOTO 1000
      END

      READ DIVISION.REC FROM CONTROL, CONO:"DIVISIONS" ELSE
         ERRMSG = "DIVISIONS CONTROL RECORD IS MISSING"
	  GOTO 1000
      END

      READ SECURITY.REC FROM CONTROL, CONO:"DIV.SECURITY" ELSE
    	   ERRMSG = "DIV.SECURITY CONTROL RECORD IS MISSING"
    	   GOTO 1000
      END
 
      READ PERIOD.REC FROM CONTROL, CONO:"ACCT.PERIODS" ELSE
    	  PERIOD.REC = ""
    	  PERIOD.REC<1> = 12
      END
      NUM.PERIODS = PERIOD.REC<1>


  MATREADU JOB.REC FROM JOB, CONO:JOBNO LOCKED
    ERRMSG = 'JOB record is locked by user - ':GETUSERNAME(STATUS())
    GOTO 1000 
  END ELSE
    RELEASE JOB, CONO:JOBNO
    ERRMSG='JOB ':JOBNO:' IS MISSING'
    GOTO 1000
  END

  DIV.CODE = JOB.DIV; USER.ID = UPCASE(@LOGNAME); ERRMSG = ''
  CALL CK.DIV.SEC.SUB(CONO,DIV.CODE,USER.ID,ERRMSG)
  IF ERRMSG # '' THEN
     GOTO 1000
  END
*
  IF SECURITY.REC<1> = "Y" AND SECURITY.REC<2> = "Y" THEN 
    IF DIV.CODE = "00" OR DIV.CODE = "ALL" THEN
      ERRMSG = " 'ALL' OR '00' INVALID WHEN DIVISION-LEVEL POSTING & CLOSING IS SELECTED"
      GOTO 1000
    END
    LOCATE DIV.CODE IN DIVISION.REC<1>,1 SETTING POS ELSE 
      ERRMSG = "Division ":DIV.CODE:" not found in Control File DIVISIONS Record."
      GOTO 1000
    END
  END ELSE
    POS = 1
  END
  IF LEN(FR.CURR.PER<1,POS>) # 6 THEN
    ERRMSG = "ERROR IN JCFISCAL - ":FR.CURR.PER<1,POS>
    GOTO 1000
  END
  YEAR = FR.CURR.PER<1,POS>[1,4]
  CURR = FR.CURR.PER<1,POS>[5,2]

  MATREADU JFS.REC FROM JOB.FNGD.STATS, CONO:JOBNO LOCKED
    ERRMSG = 'JOB.FNGD.STATS record is locked by user - ':GETUSERNAME(STATUS())
    GOTO 1000 
  END ELSE
    RELEASE JOB, CONO:JOBNO
    RELEASE JOB.FNGD.STATS, CONO:JOBNO
      ERRMSG = "There are no finished goods on this job"
      GOTO 1000
  END
  MATREADU FWH.REC FROM FNGD.WIP.HIST, CONO:JOBNO LOCKED
    ERRMSG = "FNGD.WIP.HIST RECORD IS NOT THERE";GOTO 1000
  END ELSE
    MAT FWH.REC=''
  END
  * T26126 ^
 MAT OLD.FWH.REC = MAT FWH.REC
  RWH.OPER = PORT.NO:"!":OPER.ID
  RWH.REV.DATE = ''
  RWH.ENT.DATE = DATE()
  RWH.JOB = JOBNO
  REV.PER = 0
  PCNT = DCOUNT(JFS.PROD,VM)
  FOR P = 1 TO PCNT
    BEGIN CASE
      CASE JFS.M.QTY<1,P>+0 > JFS.F.QTY<1,P>+0
        REV.PER = REV.PER + (JFS.F.QTY<1,P> / JFS.M.QTY<1,P>)
      CASE JFS.M.QTY<1,P>+0 > 0
        REV.PER = REV.PER + 1
    END CASE
  NEXT P
  REV.PER = INT(REV.PER / PCNT * 10000 + .5)
  IF REV.PER < 10000 THEN
    IF SUM(JOB.WIP<1,2>) > 0 THEN
	IF MODE # "TRUE" THEN ERRMSG = "Job has open balances, reverse WIP and complete the job (Y/N) ? ";GOTO 1000
       IF CONFIRM = "Y" THEN REV.PER = 10000
    END ELSE
       PMSG ='Job has no WIP to reverse'       
       REV.PER = 0
    END
  END
  RWH.REV.PER=REV.PER

STATUS = RBO.setProperty('','REVPER',REV.PER)

      IF CUST.NAME = "" THEN
        MATREAD CUST.REC FROM CUSTOMER, CONO : JOB.CUST ELSE
          CUST.NAME = "*** NOT ON FILE ***"
        END
      END
      *PAGE.SIZE = 2
      *BEGIN.PAGE = 16
     * LINE.SPACE = 1
      LINES = 0
      LN = 1
     * OLD.START.LINE = 0
     * P.PAGE.SIZE = 4
     * P.BEGIN.PAGE = 9
      *P.LN = 1
      *P.OLD.START.LINE = 0
      ALL.TYPE = "LB"
      ALL.TYPE<1,2> = "MT"
      ALL.TYPE<1,3> = "OS"
      ALL.TYPE<1,4> = "SP"
      ALL.TYPE<1,5> = "MS"
      LINE.DESC = ""
      LINE.WIP.IN = ""
      LINE.WIP.OUT = ""
      LINE.WIP.TOT = ""
      MAIN.DESC = "OTHER - "      
      *SCV.REC(5)<ECD.SCRN.NO> = RWH.JOB
      STATUS = RBO.setProperty('','ID',CONO : RWH.JOB)      
      *SCV.REC(6)<ECD.SCRN.NO> = JOB.CUST
      STATUS = RBO.setProperty('','JOB_CUST',JOB.CUST)      
      *SCV.REC(7)<ECD.SCRN.NO> =CUST.NAME 
*      STATUS = RBO.setProperty('','CUST_NAME',CUST.NAME)      
*      ECD.NUM=8
      BEGIN CASE
        CASE JOB.STATUS<1,1>=""
          *SCV.REC(ECD.NUM)<1>="BOOKED"
	   STATUS = RBO.setProperty('','JOB_STATUS',"BOOKED")
        CASE JOB.STATUS<1,1>="9"
          *SCV.REC(ECD.NUM)<1>="CANCELLED"
    	   STATUS = RBO.setProperty('','JOB_STATUS',"CANCELLED")
        CASE JOB.STATUS<1,1>="7"
          *SCV.REC(ECD.NUM)<1>="READY TO PURGE"
      	   STATUS = RBO.setProperty('','JOB_STATUS',"READY TO PURGE")
        CASE JOB.STATUS<1,1>="8"
          *SCV.REC(ECD.NUM)<1>="WAS PURGED"
    	   STATUS = RBO.setProperty('','JOB_STATUS',"WAS PURGED")
        CASE JOB.TRACK.DATE<1,10> # ""
          BEGIN CASE
            CASE JOB.STATUS<1,1> = "1"
              *SCV.REC(ECD.NUM)<1> = "IN PROCESS"
    	   	STATUS = RBO.setProperty('','JOB_STATUS',"IN PROCESS")
            CASE JOB.STATUS <1,1> = "3"
              *SCV.REC(ECD.NUM)<1> = "INVOICED"
    	   	STATUS = RBO.setProperty('','JOB_STATUS',"INVOICED")
            CASE JOB.STATUS<1,1> = "5"
              *SCV.REC(ECD.NUM)<1>="REOPENED"
    	   	STATUS = RBO.setProperty('','JOB_STATUS',"REOPENED")
            CASE 1
              *SCV.REC(ECD.NUM)<1> = "COMPLETED"
    	   	STATUS = RBO.setProperty('','JOB_STATUS',"COMPLETED")
          END CASE
        CASE JOB.TRACK.DATE<1,9> # ""
          BEGIN CASE
            CASE JOB.STATUS<1,1> = "1"
              *SCV.REC(ECD.NUM)<1> = "IN PROCESS"
    	   	STATUS = RBO.setProperty('','JOB_STATUS',"IN PROCESS")
            CASE JOB.STATUS<1,1> = "5"
              *SCV.REC(ECD.NUM)<1>="REOPENED"
    	   	STATUS = RBO.setProperty('','JOB_STATUS',"REOPENED")
            CASE 1
              *SCV.REC(ECD.NUM)<1> = "INVOICED"
    	   	STATUS = RBO.setProperty('','JOB_STATUS',"INVOICED")
          END CASE
        CASE JOB.TRACK.DATE<1,8> # ""
          *SCV.REC(ECD.NUM)<1>="COSTED"
	   STATUS = RBO.setProperty('','JOB_STATUS',"COSTED")
        CASE JOB.TRACK.DATE<1,7> # ""
          *SCV.REC(ECD.NUM)<1>="RDY-TO-BILL"
	   STATUS = RBO.setProperty('','JOB_STATUS',"RDY-TO-BILL")
        CASE JOB.TRACK.DATE<1,6> # ""
          *SCV.REC(ECD.NUM)<1>="DELIVERED"
	   STATUS = RBO.setProperty('','JOB_STATUS',"DELIVERED")
        CASE JOB.TRACK.DATE<1,5> # ""
          *SCV.REC(ECD.NUM)<1>="IN PROCESS"
	   STATUS = RBO.setProperty('','JOB_STATUS',"IN PROCESS")
        CASE JOB.TRACK.DATE<1,3> # ""
          *SCV.REC(ECD.NUM)<1>="IN PROCESS"
	   STATUS = RBO.setProperty('','JOB_STATUS',"IN PROCESS")
        CASE JOB.STATUS<1,1>="1"
          *SCV.REC(ECD.NUM)<1>="IN PROCESS"
	   STATUS = RBO.setProperty('','JOB_STATUS',"IN PROCESS")
        CASE JOB.STATUS<1,1>="3"
          *SCV.REC(ECD.NUM)<1>="INVOICED"
	   STATUS = RBO.setProperty('','JOB_STATUS',"INVOICED")
        CASE 1
          *SCV.REC(ECD.NUM)<1>="UNKNOWN"
	   STATUS = RBO.setProperty('','JOB_STATUS',"UNKNOWN")
      END CASE
      READ CTL.WIP.TYPE FROM CONTROL, CONO : "WIP.DEFAULT" ELSE CTL.WIP.TYPE = ""
      IF CTL.WIP.TYPE = "" THEN CTL.WIP.TYPE = "ALL"
      RWH.REV.TYPE = CTL.WIP.TYPE
      LINES = DCOUNT(RWH.REV.TYPE,VM)
      IF CTL.WIP.TYPE # "ALL" AND LINES < 5 THEN
        LOCATE "OTH" IN RWH.REV.TYPE<1>,1 SETTING FND ELSE
          LINES = LINES + 1
          RWH.REV.TYPE<1,LINES> = "OTH"
        END
      END

      FOR LN = 1 TO LINES
        BEGIN CASE
          CASE RWH.REV.TYPE<1,LN> = "LB"
            LINE.DESC<1,LN> = "LABOR"
            LINE.WIP.IN<1,LN> = SUM(JOB.LB.WIP<1,2>)
            LINE.WIP.OUT<1,LN> = SUM(JOB.LB.WIP<1,3>)
          CASE RWH.REV.TYPE<1,LN> = "MT"
            LINE.DESC<1,LN> = "MATERIAL"
            LINE.WIP.IN<1,LN> = SUM(JOB.MT.WIP<1,2>)
            LINE.WIP.OUT<1,LN> = SUM(JOB.MT.WIP<1,3>)
          CASE RWH.REV.TYPE<1,LN> = "OS"
            LINE.DESC<1,LN> = "OUTSIDE PURCHASE"
            LINE.WIP.IN<1,LN> = SUM(JOB.OS.WIP<1,2>)
            LINE.WIP.OUT<1,LN> = SUM(JOB.OS.WIP<1,3>)
          CASE RWH.REV.TYPE<1,LN> = "SP"
            LINE.DESC<1,LN> = "SHIPPING"
            LINE.WIP.IN<1,LN> = SUM(JOB.SP.WIP<1,2>)
            LINE.WIP.OUT<1,LN> = SUM(JOB.SP.WIP<1,3>)
          CASE RWH.REV.TYPE<1,LN> = "MS"
            LINE.DESC<1,LN> = "MISCELLANEOUS"
            LINE.WIP.IN<1,LN> = SUM(JOB.MS.WIP<1,2>)
            LINE.WIP.OUT<1,LN> = SUM(JOB.MS.WIP<1,3>)
          CASE RWH.REV.TYPE<1,LN> = "OTH"
            LINE.DESC<1,LN> = MAIN.DESC
            FOR XX = 1 TO 5
              LOCATE ALL.TYPE<1,XX> IN RWH.REV.TYPE<1>,1 SETTING FND ELSE
                BEGIN CASE
                  CASE ALL.TYPE<1,XX> = "LB"
                    LINE.WIP.IN<1,LN> = LINE.WIP.IN<1,LN> + SUM(JOB.LB.WIP<1,2>)
                    LINE.WIP.OUT<1,LN> = LINE.WIP.OUT<1,LN> + SUM(JOB.LB.WIP<1,3>)
                  CASE ALL.TYPE<1,XX> = "MT"
                    LINE.WIP.IN<1,LN> = LINE.WIP.IN<1,LN> + SUM(JOB.MT.WIP<1,2>)
                    LINE.WIP.OUT<1,LN> = LINE.WIP.OUT<1,LN> + SUM(JOB.MT.WIP<1,3>)
                  CASE ALL.TYPE<1,XX> = "OS"
                    LINE.WIP.IN<1,LN> = LINE.WIP.IN<1,LN> + SUM(JOB.OS.WIP<1,2>)
                    LINE.WIP.OUT<1,LN> = LINE.WIP.OUT<1,LN> + SUM(JOB.OS.WIP<1,3>)
                  CASE ALL.TYPE<1,XX> = "SP"
                    LINE.WIP.IN<1,LN> = LINE.WIP.IN<1,LN> + SUM(JOB.SP.WIP<1,2>)
                    LINE.WIP.OUT<1,LN> = LINE.WIP.OUT<1,LN> + SUM(JOB.SP.WIP<1,3>)
                  CASE ALL.TYPE<1,XX> = "MS"
                    LINE.WIP.IN<1,LN> = LINE.WIP.IN<1,LN> + SUM(JOB.MS.WIP<1,2>)
                    LINE.WIP.OUT<1,LN> = LINE.WIP.OUT<1,LN> + SUM(JOB.MS.WIP<1,3>)
                END CASE
                IF LINE.DESC<1,LN> # MAIN.DESC THEN
                  LINE.DESC<1,LN> = LINE.DESC<1,LN> : ","
                END
                LINE.DESC<1,LN> = LINE.DESC<1,LN> : ALL.TYPE<1,XX>
              END
            NEXT XX
          CASE 1
            LINE.DESC<1,LN> = "ALL"
            LINE.WIP.IN<1,LN> = SUM(JOB.WIP<1,2>)
            LINE.WIP.OUT<1,LN> = SUM(JOB.WIP<1,3>)
        END CASE
        LINE.WIP.TOT<1,LN> = LINE.WIP.IN<1,LN> + LINE.WIP.OUT<1,LN>
        RWH.REV.DATE<1,LN> = "ALL"
        RWH.REV.PER<1,LN> = REV.PER
      NEXT LN
      IF REV.PER < 10000 THEN
        RWH.Z.R.QTY = "N"
        RWH.Z.A.QTY = "N"
        RWH.REV.DATE = DATE()
        RWH.PERIOD = FR.CURR.PER<1,POS>;* T23278
      END ELSE
        RWH.Z.R.QTY = "Y"
        RWH.Z.A.QTY = "Y"
        RWH.REV.DATE = "ALL"
        RWH.PERIOD = "ALL"
      END
      IF RWH.PERIOD = "ALL" THEN
        PERIOD = FR.CURR.PER<1,POS>;* T23278
      END ELSE
        PERIOD = RWH.PERIOD
      END

      *SCV.REC(10)<ECD.SCRN.NO> = RWH.Z.R.QTY
      STATUS = RBO.setProperty('','ClrRsv',RWH.Z.R.QTY)
      *SCV.REC(9)<ECD.SCRN.NO> = RWH.Z.A.QTY
      STATUS = RBO.setProperty('','ClrAllocFG',RWH.Z.A.QTY)
      IF RWH.REV.DATE = "ALL" THEN
        *SCV.REC(11)<ECD.SCRN.NO> = RWH.REV.DATE
        STATUS = RBO.setProperty('','RevDate',RWH.REV.DATE)
      END ELSE
        *SCV.REC(11)<ECD.SCRN.NO> = OCONV(RWH.REV.DATE,"D2/")
         STATUS = RBO.setProperty('','RevDate',OCONV(RWH.REV.DATE,"D2/"))
      END
      *SCV.REC(12)<ECD.SCRN.NO> = RWH.PERIOD
STATUS = RBO.setProperty('','RevPrd',RWH.PERIOD)
      *SCV.REC(13)<ECD.SCRN.NO> = SUM(LINE.WIP.IN)
	STATUS = RBO.setProperty('','sumWIPIN',OCONV(SUM(LINE.WIP.IN),"MD2"))
      *SCV.REC(14)<ECD.SCRN.NO> = SUM(LINE.WIP.OUT)
	STATUS = RBO.setProperty('','sumWIPOUT',OCONV(SUM(LINE.WIP.OUT),"MD2"))
      *SCV.REC(15)<ECD.SCRN.NO> = SUM(LINE.WIP.TOT)
	STATUS = RBO.setProperty('','sumWIPTOT',OCONV(SUM(LINE.WIP.TOT),"MD2"))
	LN = 1
*
*---- CALC FNGD AMOUNTS
*
3000 *
  PCNT = DCOUNT(JFS.PROD,VM)
  FOR P = 1 TO PCNT
    PROD = JFS.PROD<1,P>
    WHSE = JFS.WHSE<1,P>
    MATREAD INV.REC FROM INVENTORY, CONO:PROD ELSE
      *ERRMSG = "Cannot locate Product ":PROD
      GOTO 3609
    END
    MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
      *ERRMSG = "Cannot locate Product Line # ":INV.LINE
	GOTO 3609
    END
    IF INV.COST.WT+0 = 0 THEN INV.COST.WT = 1
    MANU.AMT<1,P> = INT(JFS.U.PRICE<1,P>/100 * (JFS.M.QTY<1,P>/1000) / (INV.COST.WT/100) + .5)
    SCNT = DCOUNT(JFS.PALLET<1,P>,SVM)
    FOR S = 1 TO SCNT
	RECP.NO= JFS.RECP<1,P,S>
	MATREAD INVR.REC FROM INV_RECEIPTS,CONO:RECP.NO ELSE
          *ERRMSG = "Cannot locate INV_RECEIPTS ":RECP.NO
          GOTO 3509
        END
      COMP.AMT<1,P> = COMP.AMT<1,P> + INVR.TOT.AMT
3509 *
    NEXT S
3609 *
  NEXT P
P.LINES = DCOUNT(FWH.PROD,VM)
FOR N = 1 TO P.LINES
	MANU.AMT<1,N> = OCONV(MANU.AMT<1,N>, "MD2")	
	COMP.AMT<1,N>	= OCONV(COMP.AMT<1,N>, "MD2")
NEXT N 
	  STATUS = RBO.setProperty('','PROD',FWH.PROD)  
	  STATUS = RBO.setProperty('','WHSE',FWH.WHSE)
	  STATUS = RBO.setProperty('','MANUFACT',MANU.AMT)  
	  STATUS = RBO.setProperty('','COMPLETE',COMP.AMT)  
  	
FOR N = 1 TO LINES
	RWH.REV.PER<1,N> = OCONV(RWH.REV.PER<1,N>, "MD2")	
	LINE.WIP.IN<1,N> = OCONV(LINE.WIP.IN<1,N>, "MD2")
	LINE.WIP.OUT<1,N>= OCONV(LINE.WIP.OUT<1,N>, "MD2")
	LINE.WIP.TOT<1,N>= OCONV(LINE.WIP.TOT<1,N>, "MD2")
NEXT N 
    	  STATUS = RBO.setProperty('','REV_TYPE',RWH.REV.TYPE)
	  STATUS = RBO.setProperty('','TYPE',LINE.DESC)
	  STATUS = RBO.setProperty('','REV_PER',RWH.REV.PER)
	  STATUS = RBO.setProperty('','WIP_IN',LINE.WIP.IN)
	  STATUS = RBO.setProperty('','WIP_OUT',LINE.WIP.OUT)
	  STATUS = RBO.setProperty('','WIP_TOT',LINE.WIP.TOT)

1000*
     IF ERRMSG # "" THEN
	  STATUS = RBO.setProperty('','ServerStatus',1)        
	  STATUS = RBO.setProperty('','ServerMessage',ERRMSG)  
     END

    RELEASE JOB, CONO:JOBNO
    RELEASE JOB.FNGD.STATS, CONO:JOBNO

* End of method code
RETURN

