SUBROUTINE ORDM_ORD_LINE_SHIP_EXIT
********************************************************************************
*   Program name :- ORDM_ORD_LINE_SHIP_EXIT
*   Created:- 2/23/2006
*   Programmer :- Suhail Hussain S
********************************************************************************
$INCLUDE WWINSERT RBO.H

$INCLUDE CPYLIB COMMON1
$INCLUDE JCS.CPYLIB COM.JCS.LINK
$INCLUDE ICS.CPYLIB COM.INV.MAIN
$INCLUDE ICS.CPYLIB COM.INV.SERIAL
$INCLUDE JCS.CPYLIB COM.INV.STATS
$INCLUDE PMC.CPYLIB COM.CUST
$INCLUDE OPS.CPYLIB COM.ORDER
$INCLUDE OPS.CPYLIB COM.OPS.LINK

$DEFINE INVENTORY
$DEFINE ORDER
$DEFINE ORDERDETAILINQ
$DEFINE COMPOPS
$DEFINE CUSTOMER
$DEFINE CATEGORY
$DEFINE INVWHSE
$DEFINE FNGDSTATS
$DEFINE FNGDORDERSTATS
$DEFINE JOB
$DEFINE FILEVARS

$INCLUDE PMC.CPYLIB COMP.OPS
$INCLUDE PMC.CPYLIB CUSTOMER
$INCLUDE OPS.CPYLIB ORDER
$INCLUDE OPS.CPYLIB ORDER.DETAIL
$INCLUDE OPS.CPYLIB ORDER.DETAIL.INQ
$INCLUDE OPS.CPYLIB ORDER.RELEASE
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV.FNGD
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE ICS.CPYLIB FNGD.BOM
$INCLUDE ICS.CPYLIB FNGD.STATS
$INCLUDE ICS.CPYLIB FNGD.ORDER.STATS
$INCLUDE ICS.CPYLIB FNGD.JOB.STATS
$INCLUDE ICS.CPYLIB PRICE.TABLE
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE JES.CPYLIB ESTIMATE
$INCLUDE JCS.CPYLIB JOB
$INCLUDE PMC.CPYLIB SHIP.TO
$INCLUDE CPYLIB FILE.VARS
$INCLUDE CPYLIB CHAR

   OPEN "","CUSTOMER" TO CUSTOMER ELSE ERRMSG = "CANNOT OPEN CUSTOMER FILE";GOTO 91000
   OPEN "","ORDER" TO ORDER ELSE ERRMSG = "CANNOT OPEN ORDER FILE";GOTO 91000
   OPEN "","ORDER.DETAIL" TO ORDER.DETAIL ELSE ERRMSG = "CANNOT OPEN ORDER.DETAIL FILE";GOTO 91000
   OPEN "","ORDER.RELEASE" TO ORDER.RELEASE ELSE ERRMSG = "CANNOT OPEN ORDER.RELEASE FILE";GOTO 91000
   OPEN "","INVENTORY" TO INVENTORY ELSE ERRMSG = "CANNOT OPEN INVENTORY FILE";GOTO 91000
   OPEN "","CATEGORY" TO CATEGORY ELSE ERRMSG = "CANNOT OPEN CATEGORY FILE";GOTO 91000
   OPEN "","INV.WHSE" TO INV.WHSE ELSE ERRMSG = "CANNOT OPEN INV.WHSE FILE";GOTO 91000
   OPEN "","INV.FNGD" TO INV.FNGD ELSE ERRMSG = "CANNOT OPEN INV.FNGD FILE";GOTO 91000
   OPEN "","FNGD.BOM" TO FNGD.BOM ELSE ERRMSG = "CANNOT OPEN FNGD.BOM FILE";GOTO 91000
   OPEN "","FNGD.STATS" TO FNGD.STATS ELSE ERRMSG = "CANNOT OPEN FNGD.STATS FILE";GOTO 91000
   OPEN "","FNGD.ORDER.STATS" TO FNGD.ORDER.STATS ELSE ERRMSG = "CANNOT OPEN  FILE";GOTO 91000
   OPEN "","FNGD.JOB.STATS" TO FNGD.JOB.STATS ELSE ERRMSG = "CANNOT OPEN FNGD.JOB.STATS FILE";GOTO 91000
   OPEN "","PRICE.TABLE" TO PRICE.TABLE ELSE ERRMSG = "CANNOT OPEN PRICE.TABLE FILE";GOTO 91000
   OPEN "","WAREHOUSE" TO WAREHOUSE ELSE ERRMSG = "CANNOT OPEN WAREHOUSE FILE";GOTO 91000
   OPEN "","ESTIMATE" TO ESTIMATE ELSE ERRMSG = "CANNOT OPEN ESTIMATE FILE";GOTO 91000
   OPEN "","JOB" TO JOB ELSE ERRMSG = "CANNOT OPEN JOB FILE";GOTO 91000
   OPEN "","CONTROL" TO CONTROL ELSE ERRMSG = "CANNOT OPEN CONTROL FILE";GOTO 91000
   OPEN "","SHIP.TO" TO SHIP.TO ELSE ERRMSG = "CANNOT OPEN SHIP.TO FILE";GOTO 91000

   STATUS = RBO.getProperty("","INARR",INARR)
   STATUS = RBO.getProperty("","PMCProperty",PMCProperty)
   STATUS = RBO.getProperty("","GRIDARR",OSD_FULL_ARR)
   STATUS = RBO.getProperty("","RETARR",OSDARR)
   STATUS = RBO.getProperty("","REMOTE_ARR1",SD_ARRAY)

   CONO           = PMCProperty<1,4>
   ORDNO          = INARR<1,1>
   ORD.CUST       = INARR<1,2>
   SHIP_NO        = INARR<1,3>
   ORD.SHIP.TO    = INARR<1,4>
   TEMP.INDX      = INARR<1,5>
   ORD.REL.NO     = INARR<1,6>
   SHPNO          = SHIP_NO
   SHIPTO         = SHPNO
   RNO            = ""
   DISPARR        = ""
   MAT ORD.DET.SUM = ""
   MAT ORD.DET.INQ = ""
SUHAIL = ""
   SWAP "#" WITH VM IN ORD.REL.NO

IF CONO = "" THEN ERRMSG = "SESSION EXPIRED";GOTO 91000
*** NULLIFY THE PROPERTIES
   STATUS = RBO.setProperty("","WARNINGARR","")
   STATUS = RBO.setProperty("","RETARR","")
   STATUS = RBO.setProperty("","DISPARR","")
   STATUS = RBO.setProperty("","GRIDARR","")
   STATUS = RBO.setProperty("","REMOTE_ARR1","")

***
   SWAP "#" WITH VM IN ORD.SHIP.TO
   LOCATE SHPNO IN ORD.SHIP.TO<1>,1 SETTING SPTR ELSE
      ERRMSG = "Cannot locate the current ship to # ":SHPNO;GOTO 91000
   END
   RNO = SPTR
   FOR X = 1 TO DCOUNT(ORD.SHIP.TO,VM)
      TEMPORD_REC = FIELD(OSD_FULL_ARR,"¥",X,1)
      IF X = RNO THEN TEMPORD_REC = OSDARR
      MATPARSE ORD.DET.REC FROM TEMPORD_REC,"ð"
      FOR P = 1 TO ORD.DET.REC.SIZE
        ORD.DET.SUM(P,X) = ORD.DET.REC(P)
      NEXT P
   NEXT X

   MATPARSE ORD.DET.REC FROM OSDARR,"ð"

   IF OSD.KIT<1,TEMP.INDX> = "M" THEN
      ERRMSG = "Cannot change a Product that is a member of a Kit"
   END

   IF OSD.KIT<1,TEMP.INDX> = "K" THEN
      ERRMSG = "Cannot Distribute a Kitted Item"
   END

   *FOR P = 1 TO ORD.DET.REC.SIZE
   *  ORD.DET.SUM(P,SPTR) = ORD.DET.REC(P)
   *NEXT P

   PDNO     = OSD.PROD<1,TEMP.INDX>
   WHNO     = OSD.WHSE<1,TEMP.INDX>
   UNPRC    = OSD.PRICE<1,TEMP.INDX>
   PROD.SEQ = OSD.PROD.SEQ<1,TEMP.INDX>
   PROD.KIT = OSD.KIT<1,TEMP.INDX>
   ERRMSG   = ""

   STATUS   = "L"
   CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)
*****vvvvvvvvvv***** start of order.line.ship
   OLD.SHPNO = SHPNO
   GEN.SHPNO = "000"
   TODAY = DATE()
   SHP.ID = CONO:ORD.CUST:"!"
   MAX.S.CNT = 20 ; *T20002
   PCNT = DCOUNT(ODQ.PROD,VM)
   IF PCNT < 1 THEN
      ERRMSG = "Cannot locate any products to distribute for this order"
   END
   LOCATE GEN.SHPNO IN ORD.SHIP.TO<1>,1 SETTING SPTR ELSE
      ERRMSG = "Cannot locate the general Ship To for this order"
   END
   SHPNO = GEN.SHPNO

   DST.QTY = ""; ORG.QTY = ""; ORD.QTY = ""; MIN.QTY = ""
   REFNO = ""; PDNOS = ""; WHNOS = ""; P = 1
   FOR P = 1 TO PCNT
      LOCATE ODQ.PROD<1,P> IN PDNOS<1>,1 SETTING PLOC ELSE
         PDNOS<1,PLOC> = ODQ.PROD<1,P>
      END
      LOCATE ODQ.WHSE<1,P> IN WHNOS<PLOC>,1 SETTING WLOC ELSE
         WHNOS<PLOC,WLOC> = ODQ.WHSE<1,P>
      END
      REFNO<PLOC,WLOC> = P
   NEXT P

   IF PDNO # "" THEN
      ECD.RET.VALUE = PDNO; GOTO 110
   END ELSE
      WHNO = ""
   END

100*
110*
   LN = 1; LINES = 0; OLD.START.LINE = 0
   LOCATE PDNO IN PDNOS<1>,1 SETTING PLOC ELSE
      ERRMSG = "Cannot locate product (":PDNO:") for this order."
   END
   MATREAD INV.REC FROM INVENTORY, CONO:PDNO ELSE
      ERRMSG = "Cannot locate Product # ":PDNO
   END
   $INCLUDE ICSBP INV.UM.CNV
   WCNT = DCOUNT(WHNOS<PLOC>,VM)
   BEGIN CASE
      CASE WCNT = 1
         ECD.RET.VALUE = WHNOS<PLOC,1>
         GOTO 210
      CASE WHNO # ""
         ECD.RET.VALUE = WHNO
         GOTO 210
   END CASE

200*
210*
   WHNO = ECD.RET.VALUE
   LOCATE WHNO IN WHNOS<PLOC>,1 SETTING WLOC ELSE
      ERRMSG = "Warehouse (":WHNO:") is not valid for product (":PDNO:") on this order"
   END
   MATREAD IWH.REC FROM INV.WHSE, CONO:PDNO:"!":WHNO ELSE
      ERRMSG = "Cannot locate warehouse (":WHNO:") for product # ":PDNO
   END
   PPTR = REFNO<PLOC,WLOC>
   LINES = DCOUNT(ODQ.SHIP.TO<1,PPTR>,SVM)
   DST.QTY<PPTR> = ""; ORG.QTY<PPTR> = ""
   ORD.QTY<PPTR> = ""; MIN.QTY<PPTR> = ""
   ULINES = LINES + 1
   FOR P = 1 TO ORD.DET.REC.SIZE
      ORD.DET.REC(P) = ORD.DET.SUM(P,SPTR)
   NEXT P
   GOSUB 5100
   ALOC.QTY = OSD.A.QTY<1,P>; GEN.A.JOB = OSD.JOB<1,P>; GEN.A.QTY = OSD.JOB.QTY<1,P>
   UNAVL.QTY = ODQ.R.QTY<1,PPTR> + ODQ.S.QTY<1,PPTR>
   IF UNAVL.QTY > ODQ.G.QTY<1,PPTR> THEN UNAVL.QTY = ODQ.G.QTY<1,PPTR>
   IF LINES THEN
      FOR L = 1 TO LINES
         DST.QTY<PPTR,L> = 0; ORD.QTY<PPTR,L> = 0; MIN.QTY<PPTR,L> = 0
         LOCATE ODQ.SHIP.TO<1,PPTR,L> IN ORD.SHIP.TO<1>,1 SETTING S THEN
            FOR P = 1 TO ORD.DET.REC.SIZE
               ORD.DET.REC(P) = ORD.DET.SUM(P,S)
            NEXT P
            PTR = 1
            LOOP
               LOCATE PDNO IN OSD.PROD<1>,PTR SETTING P THEN
                  IF (OSD.WHSE<1,P> = WHNO) AND (OSD.PROD.SEQ<1,P> = PROD.SEQ) AND (OSD.KIT<1,P> = PROD.KIT) THEN
                     IF OSD.KIT<1,P> = "N" THEN
                        DST.QTY<PPTR,L> = OSD.G.QTY<1,P>
                        ORD.QTY<PPTR,L> = OSD.O.QTY<1,P>
                        MIN.QTY<PPTR,L> = OSD.R.QTY<1,P> + OSD.A.QTY<1,P> + OSD.S.QTY<1,P>
                     END ELSE
                        DST.QTY<PPTR,L> = OSD.KIT.G.QTY<1,P>
                        ORD.QTY<PPTR,L> = OSD.KIT.O.QTY<1,P>
                        MIN.QTY<PPTR,L> = OSD.KIT.R.QTY<1,P> + OSD.A.QTY<1,P> + OSD.S.QTY<1,P>
                     END
                     PTR = 0
                  END
               END
            WHILE PTR DO
               PTR = P + 1
            REPEAT
         END
      NEXT L
      ORG.QTY = DST.QTY
      IF UNAVL.QTY >= ODQ.G.QTY<1,PPTR> THEN
         ERRMSG = "No available quantity to distribute"
      END
   END ELSE
      IF UNAVL.QTY >= ODQ.G.QTY<1,PPTR> THEN
         ERRMSG = "No available quantity to distribute"
      END
   END
   GOSUB PROCESS.INPUTS

*****^^^^^^^^^***** end of order.line.ship
   STATUS = "D"
   CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)
   SCNT   = DCOUNT(ORD.SHIP.TO,VM)
   GOSUB 3200
   FOR P = 1 TO ORD.DET.REC.SIZE
     ORD.DET.REC(P) = ORD.DET.SUM(P,RNO)
   NEXT P
   MATBUILD OSDRecArr FROM ORD.DET.REC USING "ð"
   GOSUB ORD.LINE.SUB

   GOTO 93000
RETURN

5100*
   PTR = 1
   LOOP
      LOCATE PDNO IN OSD.PROD<1>,PTR SETTING P THEN
         IF WHNO = OSD.WHSE<1,P> THEN
            PTR = 0
         END
      END ELSE
         OSD.PROD<1,P> = PDNO
         OSD.WHSE<1,P> = WHNO
         OSD.G.QTY<1,P> = 0
         OSD.O.QTY<1,P> = 0
         OSD.R.QTY<1,P> = 0
         OSD.A.QTY<1,P> = 0
         OSD.F.QTY<1,P> = 0
         OSD.S.QTY<1,P> = 0
         OSD.I.QTY<1,P> = 0
         OSD.PRICE<1,P> = UNPRC
         OSD.COMMENT<1,P> = ""
         OSD.JOB<1,P> = ""
         OSD.JOB.QTY<1,P> = ""
         OSD.RECP.NO<1,P> = ""
         OSD.FI.QTY<1,P> = ""
         OSD.REL.NO<1,P> = ""
         OSD.REL.QTY<1,P> = ""
         OSD.P.QTY<1,P> = ""
         OSD.AMT<1,P> = 0
         OSD.KIT<1,P> = PROD.KIT
         OSD.KIT.O.QTY<1,P> = 0
         OSD.KIT.R.QTY<1,P> = 0
         OSD.KIT.A.QTY<1,P> = 0
         OSD.KIT.F.QTY<1,P> = 0
         OSD.KIT.S.QTY<1,P> = 0
         OSD.KIT.I.QTY<1,P> = 0
         OSD.KIT.G.QTY<1,P> = 0
         OSD.KIT.PRICE<1,P> = 0
         OSD.PROD.SEQ<1,P> = PROD.SEQ
         OSD.BOM.NUM<1,P>  = ""
         PTR = 0
      END
   WHILE PTR DO
      PTR = P + 1
   REPEAT
RETURN

3200:
***vv
   COMPARR = ""
   FOR X = 1 TO SCNT
      REC_ARR = ""
      FOR Z = 1 TO ORD.DET.REC.SIZE
         ORD.DET.REC(Z) = ORD.DET.SUM(Z,X)
      NEXT P
      MATBUILD REC_ARR FROM ORD.DET.REC USING "ð"
      IF COMPARR = "" THEN
         COMPARR = REC_ARR
      END ELSE
         COMPARR := "¥" : REC_ARR
      END
   NEXT X
***^^
RETURN

PROCESS.INPUTS:
7000*
   FOR SD = 1 TO DCOUNT(SD_ARRAY,VM)
      LN = SD
      VALUE = SD_ARRAY<1,SD,1>
      LOCATE VALUE IN ODQ.SHIP.TO<1,PPTR>,1 SETTING FND ELSE FND = LN
      MATREAD SPT.REC FROM SHIP.TO, SHP.ID:VALUE ELSE
         ERRMSG = "Cannot locate ship to # ":VALUE
      END
      ODQ.SHIP.TO<1,PPTR,LN> = VALUE

      VALUE = SD_ARRAY<1,SD,2>
      IF ORD.QTY<PPTR,LN> + 0 = 0 THEN
         PCT = 1 + CUST.ADDL.OPS<1,1> / 10000
      END ELSE
         PCT = ORD.QTY<PPTR,LN> / DST.QTY<PPTR,LN>
      END
      DST.QTY<PPTR,LN> = INT(VALUE / ICR.MT1 * ICR.DV1 * ICR.DV2 + .5)
      ORD.QTY<PPTR,LN> = INT(VALUE * PCT + .5)
      ORD.QTY<PPTR,LN> = INT(ORD.QTY<PPTR,LN> / ICR.MT1 * ICR.DV1 * ICR.DV2 + .5)
      LINES = DCOUNT(ODQ.SHIP.TO<1,PPTR>,SVM)
   NEXT SD

5000*
*MATWRITE ORD.DET.SUM ON CONTROL,'01HLL'
   TOT.G.QTY = ODQ.G.QTY<1,PPTR>; TOT.O.QTY = ODQ.O.QTY<1,PPTR>
   ADJ.A.JOB = ""; ADJ.A.QTY = 0
   SHPNOS = ODQ.SHIP.TO<1,PPTR>
   LINES = DCOUNT(SD_ARRAY,VM)
   FOR LN = 1 TO LINES
      IF ORG.QTY<PPTR,LN> = DST.QTY<PPTR,LN> THEN GOTO 5019
      SHPNO = SHPNOS<1,1,LN>
      LOCATE SHPNO IN ORD.SHIP.TO<1>,1 SETTING S THEN
         STATUS = "D"
         CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)
         FOR P = 1 TO ORD.DET.REC.SIZE
            ORD.DET.REC(P) = ORD.DET.SUM(P,S)
         NEXT P
      END ELSE
         ORD.SHIP.TO<1,S> = SHPNO
         MAT ORD.DET.REC = ""
         OSD.PO = ORD.PO
      END

      GOSUB 5100

      OSD.G.QTY<1,P> = DST.QTY<PPTR,LN>
      IF OSD.O.QTY<1,P> < 1 AND OSD.A.QTY<1,P> < 1 AND OSD.JOB<1,P> = "" THEN
         IF GEN.A.QTY<1,1,1> > "0" THEN
            IF GEN.A.QTY<1,1,1> >= ORD.QTY<PPTR,LN> THEN
               SUB.QTY = ORD.QTY<PPTR,LN>
            END ELSE
               SUB.QTY = GEN.A.QTY<1,1,1>
            END
            IF ADJ.A.JOB = "" THEN ADJ.A.JOB = GEN.A.JOB<1,1,1>
            OSD.JOB<1,P> = ADJ.A.JOB
            OSD.JOB.QTY<1,P> = SUB.QTY
            OSD.A.QTY<1,P> = SUB.QTY
            ALOC.QTY = ALOC.QTY - SUB.QTY
            GEN.A.QTY<1,1,1> = GEN.A.QTY<1,1,1> - SUB.QTY
            ADJ.A.QTY = ADJ.A.QTY + SUB.QTY
         END
      END
      OSD.O.QTY<1,P> = ORD.QTY<PPTR,LN>
      FOR P = 1 TO ORD.DET.REC.SIZE
         ORD.DET.SUM(P,S) = ORD.DET.REC(P)
      NEXT P
      STATUS = "L"
      CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)
5019*
   NEXT LN
   SHPNO = GEN.SHPNO
   STATUS = "D"
   CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)
   FOR P = 1 TO ORD.DET.REC.SIZE
      ORD.DET.REC(P) = ORD.DET.SUM(P,SPTR)
   NEXT P
   GOSUB 5100
   OSD.G.QTY<1,P> = TOT.G.QTY - SUM(DST.QTY<PPTR>)
   OSD.O.QTY<1,P> = TOT.O.QTY - SUM(ORD.QTY<PPTR>)
   IF ADJ.A.JOB # "" THEN
      LOCATE ADJ.A.JOB IN OSD.JOB<1,P>,1 SETTING FJOB THEN
         OSD.JOB.QTY<1,P,FJOB> = OSD.JOB.QTY<1,P,FJOB> - ADJ.A.QTY
         IF OSD.JOB.QTY<1,P,FJOB> < 0 THEN OSD.JOB.QTY<1,P,FJOB> = 0
         OSD.A.QTY<1,P> = SUM(OSD.JOB.QTY<1,P>)
      END
   END
   FOR P = 1 TO ORD.DET.REC.SIZE
      ORD.DET.SUM(P,SPTR) = ORD.DET.REC(P)
   NEXT P
*SUHAIL := " PRE  : " : ODQ.SHIP.TO : "<BR>"
   STATUS = "L"
   CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)
*SUHAIL := " POST : " : ODQ.SHIP.TO : "<BR>"
5099*
RETURN

ORD.LINE.SUB:
   MATREAD SPT.REC FROM SHIP.TO, CONO:ORD.CUST:"!":SHIPTO ELSE MAT SPT.REC = ""
   IF SHIPTO = "000" THEN OSD.PO = ORD.PO
   IF OSD.SHP.TERMS = "" AND SPT.SHP.TERMS # "" THEN
     OSD.SHP.TERMS = SPT.SHP.TERMS
   END
   DISPARR<1,1> = SHIPTO
   DISPARR<1,2> = OSD.PO
   DISPARR<1,3> = OSD.SHP.TERMS

   PRODCNT = DCOUNT(OSD.PROD,@VM)
   FOR INDX = 1 TO PRODCNT
     MATREAD INV.REC FROM INVENTORY, CONO:OSD.PROD<1,INDX> ELSE
       MAT INV.REC = "";INV.FULL.DESC = "Unknown"
     END

     $INCLUDE ICSBP INV.UM.CNV

     IF OSD.KIT<1,INDX> = "K" THEN
       RESV.PRINT = OSD.KIT.R.QTY<1,INDX>
       ORDER.PRICE = OSD.KIT.PRICE<1,INDX>
       ORDER.PRINT = OSD.KIT.G.QTY<1,INDX>
     END ELSE
       RESV.PRINT = OSD.R.QTY<1,INDX>
       ORDER.PRICE = OSD.PRICE<1,INDX>
       ORDER.PRINT = OSD.G.QTY<1,INDX>
     END

     TMP.ID=CONO:OSD.PROD<1,INDX>:"!":OSD.WHSE<1,INDX>

     DISPARR<1,4,INDX> = OSD.PROD<1,INDX>
     DISPARR<1,5,INDX> = OSD.WHSE<1,INDX>
     DISPARR<1,6,INDX> = INV.UNIT<1,3>
     DISPARR<1,7,INDX> = OCONV(INT(((ORDER.PRINT / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)
     DISPARR<1,8,INDX> = OCONV(INT(((RESV.PRINT / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)
     DISPARR<1,9,INDX> = OCONV(INT(((OSD.A.QTY<1,INDX> / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)
     IF ORDER.PRICE > 0 THEN
       DISPARR<1,10,INDX> = OCONV(ORDER.PRICE,"MD4")
     END ELSE
       DISPARR<1,10,INDX> = ""
     END
     GOSUB 7920
     DISPARR<1,15,INDX> = INV.FULL.DESC
     IF OSD.JOB<1,INDX,2> # "" THEN
       DISPARR<1,16,INDX> = "MULTI"
     END ELSE
       DISPARR<1,16,INDX> = OSD.JOB<1,INDX>
     END
   NEXT INDX
RETURN

7920*
  IF OSD.COMMENT<1,INDX> = "" THEN
    STATUS = ""
  END ELSE
    STATUS = "*"
  END
  DISPARR<1,11,INDX> =  STATUS
  DISPARR<1,17,INDX> =  OSD.COMMENT<1,INDX>
  PTR = 1

  LOOP
    LOCATE OSD.PROD<1,INDX> IN ODQ.PROD<1>,PTR SETTING PPTR THEN
      BEGIN CASE
        CASE (OSD.WHSE<1,INDX> # ODQ.WHSE<1,PPTR>) OR (OSD.KIT<1,INDX> # ODQ.KIT<1,PPTR>) OR (OSD.PROD.SEQ<1,INDX> # ODQ.PROD.SEQ<1,PPTR>)
        CASE ODQ.G.QTY<1,PPTR>+0 > 0;*T20234
          STATUS = "*"
          PTR = 0
        CASE 1
          STATUS = ""
          PTR = 0
      END CASE
    END ELSE
      STATUS = ""
      PTR = 0
    END
  WHILE PTR DO
    PTR = PPTR + 1
  REPEAT
  DISPARR<1,12,INDX> =  STATUS

  STATUS = ""
  IF OSD.REL.NO<1,INDX> # "" THEN
    STATUS = "*"
  END ELSE
    OCNT = DCOUNT(ORD.REL.NO,@VM)
    FOR O = 1 TO OCNT UNTIL STATUS # ""
      MATREAD ORR.REC FROM ORDER.RELEASE, CONO:ORD.REL.NO<1,O> THEN
        IF ORR.STATUS<1,1> # "COMPLETED" AND ORR.SHIP.TO = SHIPTO AND ORR.QTY<1,INDX>+0 > 0 THEN
          STATUS = "*"
        END
      END
    NEXT O
  END
  DISPARR<1,13,INDX> =  STATUS

  IF OSD.KIT<1,INDX> = "N" THEN
    BEGIN CASE
      CASE OSD.O.QTY<1,INDX> < 1
        STATUS = "O"
      CASE OSD.I.QTY<1,INDX> >= OSD.O.QTY<1,INDX>
        STATUS = "I"
      CASE OSD.S.QTY<1,INDX> >= OSD.O.QTY<1,INDX>
        STATUS = "S"
      CASE OSD.A.QTY<1,INDX> < 1
        STATUS = "O"
      CASE OSD.F.QTY<1,INDX> >= OSD.A.QTY<1,INDX>
        STATUS = "F"
      CASE 1
        STATUS = "M"
    END CASE
  END
  IF OSD.KIT<1,INDX> = "K" THEN
    BEGIN CASE
      CASE OSD.KIT.O.QTY<1,INDX> < 1
        STATUS = "O"
      CASE OSD.KIT.I.QTY<1,INDX> >= OSD.KIT.O.QTY<1,INDX>
        STATUS = "I"
      CASE OSD.KIT.S.QTY<1,INDX> >= OSD.KIT.O.QTY<1,INDX>
        STATUS = "S"
      CASE OSD.KIT.A.QTY<1,INDX> < 1
        STATUS = "O"
      CASE OSD.KIT.F.QTY<1,INDX> >= OSD.KIT.A.QTY<1,INDX>
        STATUS = "F"
      CASE 1
        STATUS = "M"
    END CASE
  END
  DISPARR<1,14,INDX> =  STATUS

   GRID_FLAG = "0"
   BEGIN CASE
      CASE OSD.KIT<1,INDX> = "M"
         GRID_FLAG = "M"
      CASE SUM(OSD.P.QTY<1,INDX>)
         GRID_FLAG = "5"
      CASE OSD.KIT<1,INDX> = "K"
         IF (SUM(OSD.FI.QTY<1,INDX>) + SUM(OSD.FI.QTY<1,INDX+1>)) > 0 THEN
            GRID_FLAG = "3"
         END
      CASE OSD.I.QTY<1,INDX> > 0
         GRID_FLAG = "1"
      CASE OSD.S.QTY<1,INDX> > 0
         GRID_FLAG = "2"
      CASE OSD.R.QTY<1,INDX> > 0 OR OSD.RECP.NO<1,INDX> # ""
         GRID_FLAG = "3"
      CASE OSD.KIT.R.QTY<1,INDX> > 0
         GRID_FLAG = "3"
      CASE OSD.A.QTY<1,INDX> > 0 OR OSD.JOB<1,INDX> # ""
         GRID_FLAG = "4"
   END CASE
  DISPARR<1,18,INDX> =  GRID_FLAG

RETURN

93000*
   STATUS = RBO.setProperty("","WARNINGARR",COMPARR)
   STATUS = RBO.setProperty("","RETARR",OSDRecArr)
   STATUS = RBO.setProperty("","DISPARR",ORD.SHIP.TO)
*   STATUS = RBO.setProperty("","GRIDARR","")
   STATUS = RBO.setProperty("","REMOTE_ARR1",DISPARR)
*   STATUS = RBO.setProperty("","ServerMessage","<BR>" : SUHAIL : "<BR>")
   RETURN
91000*
   STATUS = RBO.setProperty("","ServerStatus",1)
   STATUS = RBO.setProperty("","ServerMessage",ERRMSG)
RETURN
