SUBROUTINE ICSRSRE_POSTREAD
*********************************************************************
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - EPRIMAC
* PROGRAM     - ICSRSRE_POSTREAD
* BY          - KHAJA ZIAUDDIN
* DATE        - 06/17/2003  (mm/dd/yyyy)
* DESCRIPTION   
*		   
*ENDDOC
*************************************************************
$INCLUDE WWINSERT RBO.H
$INCLUDE PMC.CPYLIB PO
$INCLUDE ICS.CPYLIB PO.MAN.XREF
$INCLUDE ICS.CPYLIB PO.RSKI.XREF 
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV_SERIAL

OPEN '','PO' TO PO ELSE
   ERRMSG = 'PO FILE IS MISSING'
   GOTO 93000
END
OPEN '','PO.RSKI.XREF' TO PO.RSKI.XREF ELSE
   ERRMSG = 'PO.RSKI.XREF FILE IS MISSING'
   GOTO 93000
END
OPEN '','PO.MAN.XREF' TO PO.MAN.XREF ELSE
   ERRMSG = 'PO.RSMAN.XREF FILE IS MISSING'
   GOTO 93000
END
OPEN '','INVENTORY' TO INVENTORY ELSE
   ERRMSG = 'INVENTORY FILE IS MISSING'
   GOTO 93000
END
OPEN '','CATEGORY' TO CATEGORY ELSE
   ERRMSG = 'CATEGROY FILE IS MISSING'
   GOTO 93000
END
OPEN '','INV_SERIAL' TO INV_SERIAL ELSE
   ERRMSG = 'INV_SERIAL FILE IS MISSING'
   GOTO 93000
END

MAT PO.REC = ''
MAT RSMAN.REC = ''
MAT RSXRF.REC = ''
PRODNUMLIST = ''
CATGLIST = ''
QTYOPENLIST = ''
ROLLSKIDLIST = ''
MANRSNOLIST = ''
RSKIRSNOLIST= ''
PRODLIST = ''
UMLIST = ''
WHSELIST = ''
POLINELIST = ''
PO.CODE = ''
POS = 0
CONO = ''
SERIALLIST = ''
SLIST=''

STATUS = RBO.getProperty('','ID',ID)
STATUS = RBO.getProperty('','new_item',NEWITEM)

POS = INDEX(ID,"!",1)
PO.CODE = ID[1,POS-1]
CONO = ID[1,3]
*STATUS = RBO.setProperty('','test3',PO.CODE:"ff":POS)
MATREAD PO.REC FROM PO,PO.CODE ELSE 
   MAT PO.REC = ''
   ERRMSG = "P/O Record cannot be found"
   GOTO 93000
END
IDLIST = ''
CMD = "SSELECT PO.MAN.XREF WITH PO_NO = ": PO.CODE[4,99]
UDTEXECUTE CMD
DATA = 1
LOOP
   READNEXT ID ELSE DATA = 0
WHILE DATA DO
   IDLIST<1,-1> = ID
REPEAT
 
FOR X = 1 TO DCOUNT(IDLIST,@VM)
   MATREAD RSMAN.REC FROM PO.MAN.XREF, IDLIST<1,X> THEN
     * MANRSNOLIST<1,-1> = RSMAN.RS.NO
	MANRSNOLIST<1,X> = RSMAN.RS.NO
   END
NEXT
STATUS = RBO.setProperty('','MANRSNO',MANRSNOLIST)

*** Check whether PO in the PO table has got Roll/ Skid products, else the PO cannot be used to receive Serial Stocks
MATREADU RSXRF.REC FROM PO.RSKI.XREF, PO.CODE THEN
   RSKIRSNOLIST<1,-1> = RSXRF.RS.NO
   STATUS = RBO.setProperty('','RSKIRSNO',RSKIRSNOLIST)
END ELSE
  MAT RSXRF.REC = ""
  IF PO.CODE = "*BAD*" THEN
    ERRMSG ="No errors present!"
  END ELSE
      * ERRMSG ="Invalid P/O for this function"
    PO.LINE.CNT = DCOUNT(PO.PROD.NUM,@VM)
    BCFLAG=0
    FOR PO.LINE.PTR=1 TO PO.LINE.CNT WHILE BCFLAG=0
      MATREAD INV.REC FROM INVENTORY, CONO:PO.PROD.NUM<1,PO.LINE.PTR> ELSE MAT INV.REC = ""
      MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE ELSE MAT CATG.REC=''
      IF CATG.TRK.LVL='S' THEN
        BCFLAG=1
      END
    NEXT PO.LINE.PTR
    IF BCFLAG=0 THEN
      ERRMSG = "Invalid P/O for this function"
      GOTO 93000
    END
  END
END


** Set the Owning Division and Vendor No for the PO
STATUS = RBO.setProperty('','OwnDiv',PO.DIV.OWNER)
STATUS = RBO.setProperty('','VendNo',PO.VEND.NO)

FOUND = 0
K=1
IF NEWITEM = "1" THEN
  FOR X=1 TO DCOUNT(RSKIRSNOLIST,@VM)
	FOUND = 0
	FOR Y=1 TO DCOUNT(MANRSNOLIST,@VM)
	  IF RSKIRSNOLIST<1,X> = MANRSNOLIST<1,Y> THEN
		FOUND = 1
	  END
       NEXT
	IF FOUND = 0 THEN
	   SERIALLIST<1,K> = RSKIRSNOLIST<1,X>
	   K = K + 1
	END
  NEXT
END ELSE
	STATUS = RBO.getDBVals('DSR_SERIAL',SERIALLIST)
END

IF NEWITEM = "0" THEN
** IF EXISTING RECORD, GET UOM AND WHSE FROM DAILY_STOCK
   DSRUOM = ''
   DSRWHSE = ''
   STATUS = RBO.getDBVals('DSR_UOM',UM)
   STATUS = RBO.getDBVals('DSR_WHSE',WHSE)
   FOUND = 0
   FOR X = 1 TO DCOUNT(SERIALLIST,@VM)
	FOR Y = 1 TO DCOUNT(SERIALLIST<1,X>,@SM)
	   DSRUOM<1,-1> = UM<1,X>
	   DSRWHSE<1,-1> = WHSE<1,X>
	NEXT

   NEXT
END
STATUS = RBO.setDBVals('DSR_UOM',DSRUOM)
STATUS = RBO.setDBVals('DSR_WHSE',DSRWHSE)


** GET THE UM AND WHSE FOR PRODUCT
FOR X = 1 TO DCOUNT(RSKIRSNOLIST,@VM)
	MATREAD ISTK.REC FROM INV_SERIAL, CONO:RSKIRSNOLIST<1,X> THEN
   	   *SLIST<1,-1> = RSKIRSNOLIST<1,X>
	   SLIST<1,X> = RSKIRSNOLIST<1,X>
	   PRODLIST<1,-1> = ISTK.PROD
	   UMLIST<1,-1> = ISTK.UOM
	   WHSELIST<1,-1> = ISTK.WHSE
	   POLINELIST<1,-1> = ISTK.PO.LINE
	END
NEXT

STATUS = RBO.setProperty('','SerialList',SLIST)
STATUS = RBO.setProperty('','ProdList',PRODLIST)
STATUS = RBO.setProperty('','UmList',UMLIST)
STATUS = RBO.setProperty('','WhseList',WHSELIST)
STATUS = RBO.setProperty('','PoLineList',POLINELIST)
*** END ***

PO.LINE.CNT = DCOUNT(PO.PROD.NUM,@VM)
FOR PO.LINE.PTR=1 TO PO.LINE.CNT ;*WHILE BCFLAG=0
  MATREAD INV.REC FROM INVENTORY, CONO:PO.PROD.NUM<1,PO.LINE.PTR> ELSE MAT INV.REC = ""
  MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE ELSE MAT CATG.REC=''
  PRODNUMLIST<1,-1> = PO.PROD.NUM<1,PO.LINE.PTR>
  QTYOPENLIST<1,-1> = OCONV(PO.QTY.OPEN<1,PO.LINE.PTR>,"MD2")
  ***QTYOPENLIST<1,-1> = PO.QTY.OPEN<1,PO.LINE.PTR>
  ROLLSKIDLIST<1,-1> = PO.NO.OF.ROLLS<1,PO.LINE.PTR>
  IF CATG.TRK.LVL = "" THEN CATG.TRK.LVL = " "
  CATGLIST<1,-1> = CATG.TRK.LVL 
NEXT PO.LINE.PTR

STATUS = RBO.setProperty('','ProdNum',PRODNUMLIST)
STATUS = RBO.setProperty('','Catg',CATGLIST)
STATUS = RBO.setProperty('','QtyOpen',QTYOPENLIST)
STATUS = RBO.setProperty('','RollSkid',ROLLSKIDLIST)
STATUS=RBO.setProperty('','TEMPVAL','POSTREAD')
*IF NEWITEM = "1" THEN
* IF RECORD IS NOT IN DAILY_STOCK IT CAN BE THERE IN INV_SERIAL
PROD=''
POLINE=''
SERIAL=''
QTY=''
UOM=''
WHSE=''
LOC=''
MILLID=''
POSTDATE=''
  FOR X = 1 TO DCOUNT(SERIALLIST,@VM)
     FOR Y = 1 TO DCOUNT(SERIALLIST<1,X>,@SM)
	MATREAD ISTK.REC FROM INV_SERIAL, CONO:SERIALLIST<1,1,Y> THEN
		PROD<1,-1> = ISTK.PROD
		POLINE<1,-1> = ISTK.PO.LINE
		SERIAL<1,-1> = SERIALLIST<1,1,Y>
		QTY<1,-1> = ISTK.QTY.ENTERED
		UOM<1,-1> = ISTK.UOM
		WHSE<1,-1> = ISTK.WHSE
		LOC<1,-1> = ISTK.LOC
		MILLID<1,-1> = ISTK.MILL.ID
		POSTDATE<1,-1> = ISTK.POST.DATE
	END
     NEXT	
  NEXT

STATUS = RBO.setProperty('','TEST2',QTY)

		STATUS = RBO.setDBVals('DSR_PROD',PROD)
		STATUS = RBO.setDBVals('DSR_PO_LINE',POLINE)
		STATUS = RBO.setDBVals('DSR_SERIAL',SERIAL)
		STATUS = RBO.setDBVals('DSR_QTY',QTY)
		STATUS = RBO.setDBVals('DSR_UOM',UOM)
		STATUS = RBO.setDBVals('DSR_WHSE',WHSE)
		STATUS = RBO.setDBVals('DSR_LOC',LOC)
		STATUS = RBO.setDBVals('DSR_MILL_ID',MILLID)
		STATUS = RBO.setDBVals('DSR_POST_DATE',POSTDATE)
*END
STATUS = RBO.setProperty('','ServerMessage',SERIALLIST<1,1,1>)

RETURN

93000
STATUS = RBO.setProperty('','ServerStatus',1)
STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
RETURN

