SUBROUTINE GLFRM_GET_LINE_REVIEW_DATA
********************************************************************************
*   Program name :- GLFRM_GET_LINE_REVIEW_DATA
*   Created:- 6/23/2003
*------------------------------------------------------------------------------*
*
* In Properties:
* --------------
*  ID,LNO
*
* Out Properties:
* ---------------
*  TYPE,ACCT_CODE,ACCT_DESC,BAL_INC,CATG_CODE,SUB_CATG,SUB_C,SUB_F,SUB_P,LEVEL,SIGN
********************************************************************************
$INCLUDE WWINSERT RBO.H
$INCLUDE GLS.CPYLIB GLS.REPORT
$INCLUDE CPYLIB CHAR
$INCLUDE GLS.CPYLIB ACCT.TYPE
$INCLUDE GLS.CPYLIB ACCT.CATG
$INCLUDE GLS.CPYLIB ACCT.SUB.CATG
$INCLUDE GLS.CPYLIB CATG.AND.SUB
$INCLUDE PMC.CPYLIB COA
ERRMSG = ""
OPEN '', 'COA' TO COA ELSE
	ERRMSG = 'COA FILE IS MISSING'
    	GOTO 99999
END
OPEN '', 'ACCT.TYPE' TO ACCT.TYPE ELSE
	ERRMSG = 'ACCT.TYPE FILE IS MISSING'
    	GOTO 99999
END
OPEN '', 'ACCT.CATG' TO ACCT.CATG ELSE
	ERRMSG = 'ACCT.CATG FILE IS MISSING'
    	GOTO 99999
END
OPEN '', 'ACCT.SUB.CATG' TO ACCT.SUB.CATG ELSE
	ERRMSG = 'ACCT.SUB.CATG FILE IS MISSING'
    	GOTO 99999
END
OPEN '', 'CATG.AND.SUB' TO CATG.AND.SUB ELSE
	ERRMSG = 'CATG.AND.SUB FILE IS MISSING'
    	GOTO 99999
END
OPEN '', 'GLS.REPORT' TO GLS.REPORT ELSE
	ERRMSG = 'GLS.REPORT FILE IS MISSING'
    	GOTO 99999
END
OPEN '','CONTROL' TO CONTROL ELSE STOP

* Insert method code here
*STATUS = RBO.getProperty('','LNO',LNO)
STATUS = RBO.getProperty('','ID',ID)
STATUS = RBO.getProperty('','LINE_TYPE',LINE.TYPE)

LINES_CNT = DCOUNT(LINE.TYPE,VM)
CONO = ID[1,3]

TYPE = ""
BAL_INC = "" ;* ACCT.TYPE - A, L, O, I , E
CATG_CODE = ""
CATG_TYPE = ""
SUB_CATG = ""
SUB_C = ""
SUB_F = ""
SUB_P = ""
ACCT_CODE = ""
SIGN = ""
LEVEL = ""
FOR I = 1 TO LINES_CNT
	IF LINE.TYPE<1,I> = "R" THEN
		*MV.SLN = MV.BEGIN.PAGE + MV.LINE.SPACE * MOD(MV.LN - 1,MV.PAGE.SIZE)
		MV.XLN = I + GLRP.BEG.LINE
		MAT GLRP.REC = ''
		MATREAD GLRP.REC FROM GLS.REPORT, ID ELSE
			ERRMSG = "CAN'T FIND REPORT WITH ID ":ID[4,99]
	    		GOTO 99999
		END
		SV.LINES = COUNT(GLRP.REC(MV.XLN)<1,GLRP.LINE.ACCT>,SVM) + 1
		FOR N = 1 TO SV.LINES
			LEVEL<1,I,N> = GLRP.REC(MV.XLN)<1,GLRP.ACCT.CODE,N>
			TYPE<1,I,N> =  GLRP.REC(MV.XLN)<1,GLRP.ACCT.TYPE,N>
			SIGN<1,I,N> =  GLRP.REC(MV.XLN)<1,GLRP.ACCT.SIGN,N>

			BEGIN CASE
				CASE GLRP.REC(MV.XLN)<1,GLRP.ACCT.CODE,N> = 1
					CATG_CODE<1,N> = GLRP.REC(MV.XLN)<1,GLRP.LINE.ACCT,N>[1,3]
					SUB_CATG = GLRP.REC(MV.XLN)<1,GLRP.LINE.ACCT,N>[4,3]	
					MATREAD CAS.REC FROM CATG.AND.SUB, CONO:GLRP.REC(MV.XLN)<1,GLRP.LINE.ACCT,N> ELSE MAT CAS.REC = ""	
					SUB_C<1,I,N> = CAS.CURR
					SUB_F<1,I,N> = CAS.FIX
					SUB_P<1,I,N> = CAS.PROD
					MATREAD AC.REC FROM ACCT.CATG, CATG_CODE ELSE
				       	MAT AC.REC = ""; AC.DESC = "UNKNOWN"
			       	END
					BAL_INC<1,I,N> = AC.TYPE
				CASE GLRP.REC(MV.XLN)<1,GLRP.ACCT.CODE,N> = 2
					MATREAD AC.REC FROM ACCT.CATG, GLRP.REC(MV.XLN)<1,GLRP.LINE.ACCT,N> ELSE
			             		MAT AC.REC = ""; AC.DESC = "UNKNOWN"
       	     			END	
            				CATG_CODE<1,I,N> = GLRP.REC(MV.XLN)<1,GLRP.LINE.ACCT,N>
	            			BAL_INC<1,I,N> = AC.TYPE
				CASE GLRP.REC(MV.XLN)<1,GLRP.ACCT.CODE,N> = 3
					BAL_INC<1,I,N> = GLRP.REC(MV.XLN)<1,GLRP.LINE.ACCT,N>
				CASE 1
            				MATREAD COA.REC FROM COA, CONO:GLRP.REC(MV.XLN)<1,GLRP.LINE.ACCT,N> ELSE
	               			MAT COA.REC = ""
		               		COA.DESC = "UNKNOWN"
       		     		END

					ACCT_CODE<1,I,N> = GLRP.REC(MV.XLN)<1,GLRP.LINE.ACCT,N>
            				BAL_INC<1,I,N> = COA.TYPE
       		     		CATG_CODE<1,I,N> = COA.CATG
            				SUB_CATG<1,I,N> = COA.SUB.CATG
            				SUB_C<1,I,N> = COA.CURR
	            			SUB_F<1,I,N> = COA.FIX
	       	     		SUB_P<1,I,N> = COA.PROD
		      END CASE	
		NEXT N
	END
NEXT I
9000
STATUS = RBO.setProperty('','TYPE',TYPE)
STATUS = RBO.setProperty('','ACCT_CODE',ACCT_CODE)
STATUS = RBO.setProperty('','BAL_INC',BAL_INC)
STATUS = RBO.setProperty('','CATG_CODE',CATG_CODE)
STATUS = RBO.setProperty('','SUB_CATG',SUB_CATG)
STATUS = RBO.setProperty('','SUB_C',SUB_C)
STATUS = RBO.setProperty('','SUB_F',SUB_F)
STATUS = RBO.setProperty('','SUB_P',SUB_P)
STATUS = RBO.setProperty('','LEVEL',LEVEL)
STATUS = RBO.setProperty('','SIGN',SIGN)

* End of method code
99999
  IF (TRIM(ERRMSG) # "") THEN
       STATUS = RBO.setProperty('','ServerStatus','E')
       STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
  END ELSE
       STATUS = RBO.setProperty('','ServerStatus','')
       STATUS = RBO.setProperty('','ServerMessage','')
  END 
RETURN
