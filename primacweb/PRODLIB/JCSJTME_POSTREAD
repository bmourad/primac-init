SUBROUTINE JCSJTME_POSTREAD
********************************************************************************
*   Program name :- JCSJTME_POSTREAD
*   Created:- 9/9/2005
*------------------------------------------------------------------------------*
*
*  This server event is triggered from within the {m:WW:uObject=ReadData}, {m- *
*  :WW:uObject=DeleteData} and {m:WW:uObject=WriteData} server events. In eac- *
*  h case, this {m:WW:uObject=PostRead} event occurs after the physical datab- *
*  ase read, but before values are extracted from the database record. This p- *
*  rovides a window of opportunity in which the database values may be direct- *
*  ly manipulated. The API functions
*  RBO.setDBVals() and RBO.getDBVals() are - *
*  used to do this.
*  
*                - *

* In Properties:
* --------------
*  
*
* Out Properties:
* ---------------
*  
********************************************************************************
$INCLUDE WWINSERT RBO.H
$INCLUDE CPYLIB CHAR
$INCLUDE JCS.CPYLIB OPERATION
$INCLUDE PMC.CPYLIB COST.CNTR
$INCLUDE JCS.CPYLIB JOB
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE PMC.CPYLIB CUSTOMER
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV_SERIAL
$INCLUDE ICS.CPYLIB INV.WHSE.LOC
$INCLUDE ICS.CPYLIB CATEGORY

  OPEN "","INV_SERIAL" TO INV_SERIAL ELSE ERRMSG="INV_SERIAL FILE IS MISSING";GOTO 93000
  OPEN "","CONTROL" TO CONTROL ELSE ERRMSG="INV_SERIAL FILE IS MISSING";GOTO 93000
  OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE ERRMSG="INV.WHSE.LOC FILE IS MISSING";GOTO 93000
  OPEN "","COMPANY" TO COMPANY ELSE ERRMSG="CANNOT OPEN COMPANY FILE";GOTO 93000
  OPEN '','JOB' TO JOB ELSE ERRMSG='JOB FILE IS MISSING'; GOTO 93000
  OPEN "","OPERATION" TO OPERATION ELSE ERRMSG="CANNOT OPEN OPERATION FILE";GOTO 93000
  OPEN '','CUSTOMER' TO CUSTOMER ELSE ERRMSG='CUSTOMER FILE IS MISSING'; GOTO 93000
  OPEN '','COST.CNTR' TO COST.CNTR ELSE ERRMSG='COST.CNTR FILE IS MISSING'; GOTO 93000
  OPEN "","INVENTORY" TO INVENTORY ELSE ERRMSG="INVENTORY FILE IS MISSING";GOTO 93000
  OPEN "","INV.WHSE" TO INV.WHSE ELSE ERRMSG="INV.WHSE FILE IS MISSING";GOTO 93000
  OPEN "","CATEGORY" TO CATEGORY ELSE ERRMSG="CATEGORY FILE IS MISSING";GOTO 93000

* Insert method code here
MAT COMP.REC='' ; CONO = ''

MAT JOB.REC=''
MAT OPER.REC = ''
JOB_DESCS = ''
JOB_COUNT = ''
OPER_COUNT = ''
OPER_SF_COUNT = ''
FLAG = ''
JOB_TYPE = ''
CCTR_LIST = ''
CCTR_DESC = ''
OPERDESCS = ''
OPRDESC = ''
INV_FULL_DESC = ''
INV_FULL_DESCLIST = ''
IWH_LOC_LIST = ''
DTM_WHSE = ''
INVPAP_TYPE_LIST = ''
INV_UNIT = ''
JOB_RESV_MATL_LIST = ''
JOB_RESV_QTY_LIST = ''
JOB_RESV_AMT_LIST = ''
JOB_RESV_WHSE_LIST = ''

CATG_RSV_SERIAL_LIST = ''
ISTK_CUR_QTY_LIST = ''
ISTK_JOB_LIST = ''
IWLO_LOC_ON_HAND_LIST = ''
ISTK_RSVB_QTY_LIST = ''
ISTK_JRSVD_QTY_LIST = ''

SERIAL_COUNT = ''
STATUS=RBO.getProperty('','PMCProperty',PMCProperty)
CONO   = PMCProperty<1,4>
STATUS=RBO.getProperty('','DTM_JOB',DTM_JOB)
STATUS=RBO.getProperty('','DTM_TYPE',DTM_TYPE)
STATUS=RBO.getProperty('','DTM_TIME_ST',DTM_TIME_ST)
STATUS=RBO.getProperty('','DTM_TIME',DTM_TIME)
STATUS=RBO.getProperty('','DTM_OPER',DTM_OPER)
STATUS=RBO.getProperty('','DTM_CCTR',DTM_CCTR)
STATUS=RBO.getProperty('','DTM_PROD',DTM_PROD)
STATUS=RBO.getProperty('','DTM_WHSE',DTM_WHSE)
STATUS=RBO.getProperty('','DTM_R_S_ID',DTM_R_S_ID)
STATUS=RBO.getProperty('','DTM_LOC',DTM_LOC)
STATUS=RBO.getProperty('','DTM_TIME_CODE',DTM_TIME_CODE)
STATUS=RBO.getProperty('','DTM_STATUS',DTM_STATUS)


********** COMPANY VALUES
	MATREAD COMP.REC FROM COMPANY, CONO ELSE
		ERRMSG = "COMPANY FILE IS MISSING"
	END

********* JOB VALUES
JOB_COUNT=DCOUNT(DTM_JOB,VM)
	FOR Y = 1 TO JOB_COUNT
		MATREAD JOB.REC FROM JOB,CONO:DTM_JOB<1,Y> THEN
			*JOB_CUST<1,Y> = JOB.CUST
			MATREAD CUST.REC FROM CUSTOMER,CONO:JOB.CUST ELSE
               	   MAT CUST.REC=""
               	   CUST.NAME=""
			END
                     IF CO.JOB.CUST.FLG = 'C' THEN
              		JOB_DESCS<1,Y>=CUST.NAME
              	END ELSE
              		JOB_DESCS<1,Y>=JOB.DESC<1,1>
              	END
		END ELSE
			JOB_DESCS<1,Y> = ''
			JOB.TYPE = ''
			JOB.RESV.MATL= ''
			JOB.RESV.QTY= ''
			JOB.RESV.AMT= ''
			JOB.RESV.WHSE= ''
		END
		
		JOB_TYPE<1,Y> = JOB.TYPE
		JOB_RESV_MATL_LIST<1,Y> = CHANGE(JOB.RESV.MATL,VM,"^")
		JOB_RESV_QTY_LIST<1,Y> = CHANGE(JOB.RESV.QTY,VM,"^")
		JOB_RESV_AMT_LIST<1,Y> = CHANGE(JOB.RESV.AMT,VM,"^")
		JOB_RESV_WHSE_LIST<1,Y> = CHANGE(JOB.RESV.WHSE,VM,"^")
	NEXT Y	
WRITE JOB_TYPE:"KK":JOB_RESV_MATL_LIST:"LL":JOB_RESV_QTY_LIST:"MM":JOB_RESV_AMT_LIST ON CONTROL,"01AP"
*--Operation Values
OPER_COUNT=DCOUNT(DTM_OPER,VM)
	FOR Y = 1 TO OPER_COUNT
		MATREAD OPER.REC FROM OPERATION,CONO:DTM_OPER<1,Y> THEN
			IF OPER.SF.PROMPT<1,1>='N' OR OPER.SF.PROMPT<1,1>='' THEN FLAG<1,Y>='N' ELSE FLAG<1,Y>='Y' 
		END
	NEXT


*--CostCenter  Values
CCTR_COUNT=DCOUNT(DTM_CCTR,VM)
	FOR Z = 1 TO CCTR_COUNT
		MATREAD CCTR.REC FROM COST.CNTR,CONO:DTM_CCTR<1,Z> THEN
		   CNT = DCOUNT(CCTR.OPER,VM)
    		   FOR I=1 TO CNT
       		MATREAD OPER.REC FROM OPERATION, CONO:CCTR.OPER<1,I> THEN
				OPRDESC<1,I>=CCTR.OPER<1,I>  : "-" : OPER.DESC
			END
    		   NEXT I
		END ELSE
			MAT CCTR.REC= ''	
			OPRDESC<1,I> = ''
		END
		IF CCTR_LIST  = "" THEN
			CCTR_LIST=CCTR.OPER	
		END ELSE		
			CCTR_LIST=CCTR_LIST:"~":CCTR.OPER
		END
		   CCTR_DESC<1,Z>=CCTR.DESC
		IF OPERDESCS  = "" THEN
			OPERDESCS=OPRDESC	
		END ELSE		
			OPERDESCS=OPERDESCS:"!":OPRDESC
		END
	
		
	NEXT
*---Get ProdDescs
PROD_COUNT=DCOUNT(DTM_PROD,VM)
	FOR K = 1 TO PROD_COUNT
		MATREAD INV.REC FROM INVENTORY,CONO:DTM_PROD<1,K> ELSE
			INV.FULL.DESC = ''
			INV.PAP.TYPE = ''
			INV.UNIT = ''
			INV.LINE = ''
		END
			INV_FULL_DESC<1,K>=INV.FULL.DESC
			INVPAP_TYPE_LIST<1,K> = INV.PAP.TYPE
			IF INV_UNIT = '' THEN
				INV_UNIT = INV.UNIT
			END ELSE
				INV_UNIT = INV_UNIT :"^":INV.UNIT
			END
		MATREAD IWH.REC FROM INV.WHSE,CONO:DTM_PROD<1,K>:"!":DTM_WHSE<1,K> ELSE IWH.LOC = ''
			IF IWH_LOC_LIST = '' THEN
				IWH_LOC_LIST = IWH.LOC
			END ELSE
				IWH_LOC_LIST = IWH_LOC_LIST :"^":IWH.LOC
			END
		MATREAD IWLO.REC FROM INV.WHSE.LOC,CONO:DTM_PROD<1,K>:"!":DTM_WHSE<1,K>:"!":DTM_LOC<1,K> ELSE IWLO.LOC.ON.HAND=""
		IWLO_LOC_ON_HAND_LIST<1,K> = IWLO.LOC.ON.HAND
		MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE ELSE MAT CATG.REC=''
		CATG_RSV_SERIAL_LIST<1,K> = CATG.RSV.SERIAL
	NEXT
*---Get Serial Values
SERIAL_COUNT=DCOUNT(DTM_R_S_ID,VM)
	FOR B = 1 TO PROD_COUNT
	MATREAD ISTK.REC FROM INV_SERIAL,CONO:DTM_R_S_ID<1,B> ELSE
		ISTK.CUR.QTY = ''
		ISTK.JOB = ''
		ISTK.RSVB.QTY = ''
		ISTK.JRSVD.QTY = ''
	END
		ISTK_CUR_QTY_LIST<1,B> = ISTK.CUR.QTY
		ISTK_JOB_LIST<1,B> = ISTK.JOB
		ISTK_RSVB_QTY_LIST<1,B> = ISTK.RSVB.QTY
		ISTK_JRSVD_QTY_LIST<1,B> =	ISTK.JRSVD.QTY
	NEXT

*-- CALCULATE TIME DATA
*
   DTM_REG_TIME=""
   DTM_OVR_TIME=""
   DTM_DUB_TIME=""
   DTM_LAPS_TIME=""
   TTYPE_COUNT=DCOUNT(DTM_TYPE,VM)
	FOR LP=1 TO TTYPE_COUNT
      TYPE=DTM_TYPE<1,LP>
      BEGIN CASE
          * CASE TYPE="L"     ;*T25688
         CASE TYPE="M"
         CASE 1
            STIME=DTM_TIME_ST<1,LP>
            ETIME=DTM_TIME<1,LP>
            IF ETIME < STIME THEN ETIME=ETIME+2400
            ELAP.MIN=(INT(ETIME/100)*60+MOD(ETIME,100))-(INT(STIME/100)*60+MOD(STIME,100))
            ELAP.HRS=INT(ELAP.MIN*100/60+0.5)
            TC=DTM_TIME_CODE<1,LP>
            BEGIN CASE
               CASE TC="01"
                  DTM_REG_TIME<1,LP>=ELAP.HRS
               CASE TC="02"
                  DTM_OVR_TIME<1,LP>=ELAP.HRS
               CASE TC="03"
                  DTM_DUB_TIME<1,LP>=ELAP.HRS
               CASE 1                              ; * T22689 Added this line
*T26415 v             DTM.REG.TIME<1,LP>=ELAP.HRS       ; * T22689 Added this line
                  IF TYPE # 'L' THEN DTM_REG_TIME<1,LP>=ELAP.HRS       ; * T22689 Added this line
            END CASE
            DTM_LAPS_TIME<1,LP>=ELAP.HRS
      END CASE
   NEXT LP


*-- CALCULATE ACTIVE, IDLE AND TOTAL TIME
   TTYPE=DTM_TYPE
   STIME=DTM_TIME_ST
   ETIME=DTM_TIME
   
   ATIME=0
   ITIME=0
   TTIME=0
   OVERLAP=0
   CALL CALC.EMP.TIME (TTYPE, STIME, ETIME, ATIME, ITIME, TTIME, OVERLAP)
ATIME=OCONV(ATIME,"MD0Z")
ITIME=OCONV(ITIME,"MD0Z")
TTIME=OCONV(TTIME,"MD0Z")
IF NOT(OVERLAP) THEN
      DTM_CONC_TIME=""
END ELSE
	GOSUB CONCTIME
END


STATUS=RBO.setProperty('','DTM_AP',FLAG)
STATUS=RBO.setProperty('','JOB_DESCS',JOB_DESCS)
STATUS = RBO.setProperty('','JOB_TYPE',JOB_TYPE)
STATUS = RBO.setProperty('','CCTR_OPER_LIST',CCTR_LIST)
STATUS = RBO.setProperty('','OPER_DESCS',OPERDESCS)
STATUS = RBO.setProperty('','CCTR_DESC',CCTR_DESC)
STATUS = RBO.setProperty('','IWH_LOC_LIST',IWH_LOC_LIST)
STATUS=RBO.setProperty('','INVPAP_TYPE_LIST',INVPAP_TYPE_LIST)
STATUS=RBO.setProperty('','INV_FULL_DLIST',INV_FULL_DESC)
STATUS=RBO.setProperty('','INV_UNIT',INV_UNIT)

STATUS=RBO.setProperty('','A_TIME',ATIME)
STATUS=RBO.setProperty('','I_TIME',ITIME)
STATUS=RBO.setProperty('','T_TIME',TTIME)
STATUS=RBO.setProperty('','DTM_REG_TIME',DTM_REG_TIME)
STATUS=RBO.setProperty('','DTM_OVR_TIME',DTM_OVR_TIME)
STATUS=RBO.setProperty('','DTM_DUB_TIME',DTM_DUB_TIME)
STATUS=RBO.setProperty('','DTM_LAPS_TIME',DTM_LAPS_TIME)
STATUS=RBO.setProperty('','DTM_CONC_TIME',DTM_CONC_TIME)


STATUS=RBO.setProperty('','JOB_RESV_MATL',JOB_RESV_MATL_LIST)
STATUS=RBO.setProperty('','JOB_RESV_MATL',JOB_RESV_QTY_LIST)
STATUS=RBO.setProperty('','JOB_RESV_AMT',JOB_RESV_AMT_LIST)
STATUS=RBO.setProperty('','JOB_RESV_WHSE',JOB_RESV_WHSE_LIST)

STATUS=RBO.setProperty('','CATG_RSV_SERIAL',CATG_RSV_SERIAL_LIST)
STATUS=RBO.setProperty('','ISTK_CUR_QTY',ISTK_CUR_QTY_LIST)
STATUS=RBO.setProperty('','ISTK_JOB',ISTK_JOB_LIST)
STATUS=RBO.setProperty('','IWLO_LOC_ON_HAND',IWLO_LOC_ON_HAND_LIST)
STATUS=RBO.setProperty('','ISTK_RSVB_QTY',ISTK_RSVB_QTY_LIST)
STATUS=RBO.setProperty('','ISTK_JRSVD_QTY',ISTK_JRSVD_QTY_LIST)

RETURN

*-- CALCULATE CONCURRENT TIME
CONCTIME:
   TTYPE=DTM_TYPE
   STIME=DTM_TIME_ST
   ETIME=DTM_TIME
   CTIME=""
   ESTAT=""
   CALL CALC.CONC.TIME (TTYPE,STIME,ETIME,CTIME,ESTAT)
   DTM_CONC_TIME=CTIME
   DFLG = 0
   FOR TP=1 TO TTYPE_COUNT 
     IF DTM_TYPE<1,TP>="L" OR DTM_TYPE<1,TP>="I" THEN
         BEGIN CASE
            CASE ESTAT<1,TP>="" AND DTM_STATUS<1,TP> # ""
               DTM_STATUS<1,TP>=""
               DFLG=1
            CASE ESTAT<1,TP> # "" AND DTM_STATUS<1,TP>=""
               DTM_STATUS<1,TP>="CONC ERROR"
               DFLG=1
         END CASE
      END
   NEXT TP
RETURN

93000*
STATUS = RBO.setProperty('','ServerStatus',1)
STATUS = RBO.setProperty('','ServerMessage',ERRMSG)


* End of method code
RETURN


