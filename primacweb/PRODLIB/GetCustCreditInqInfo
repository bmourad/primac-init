SUBROUTINE GetCustCreditInqInfo
********************************************************************************
* Program name :- GetCustCreditInqInfo
* Created:- 11/13/2002
*------------------------------------------------------------------------------*
*

* In Properties:
* --------------
*
*
* Out Properties:
* ---------------
*
********************************************************************************
$INCLUDE WWINSERT RBO.H

* Insert method code here
$INCLUDE PMC.CPYLIB CUSTOMER
$INCLUDE ARS.CPYLIB OPEN.RECV
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE CPYLIB CHAR

ERRMSG = ''

* Open files
CALL RBO_OPEN_FILE('CUSTOMER',CUSTOMER,ERRMSG)
CALL RBO_OPEN_FILE('COMPANY',COMPANY,ERRMSG)
CALL RBO_OPEN_FILE('OPEN.RECV',OPEN.RECV,ERRMSG)
CALL RBO_OPEN_FILE('CONTROL',CONTROL,ERRMSG)
IF ERRMSG # '' THEN
  CALL RBO_ERROR_SUB(ERRMSG); RETURN
END

* Get all properties
CALL RBO_GET_PROPERTY('ID',ID,ERRMSG)
CALL RBO_GET_PROPERTY('BUFFER1',BUFFER1,ERRMSG)
IF ERRMSG THEN
  CALL RBO_ERROR_SUB(ERRMSG); RETURN
END

* Get CONO
CONO = ID[1,3]
MATREAD COMP.REC FROM COMPANY, CONO ELSE
  ERRMSG = 'Invalid Company ID (':CONO:').'
  CALL RBO_ERROR_SUB(ERRMSG); RETURN
END

* Get periods
TODAY = DATE()
IF BUFFER1 = "M_ARS_M" THEN
	FISCAL = "ARSFISCAL"
END ELSE
	FISCAL = "JCFISCAL"
END
READV PER FROM CONTROL , CONO:FISCAL, 1 ELSE
  ERRMSG = "Fiscal period missing!"
  CALL RBO_ERROR_SUB(ERRMSG); RETURN
END
PER = PER<1,1>
LY.PER = PER[1,4] - 1:PER[5,2]

*Read Customer table to populate CUSTOMER CPYLIB
MATREAD CUST.REC FROM CUSTOMER,ID ELSE
   ERRMSG = "INVALID CUSTOMER. TRY AGAIN !"
   CALL RBO_ERROR_SUB(ERRMSG); RETURN
END

*Main processing
JOB.BALANCE  = SUM(CUST.JOB.BAL)
ORD.BALANCE  = SUM(CUST.ORD.BAL)
CREDIT.LIMIT = CUST.CR.LIMIT
IF CUST.CREDIT = "E" OR CUST.CREDIT = "AE" THEN
  CREDIT.AVAIL = CREDIT.LIMIT * 100 - CUST.AR.BAL - ORD.BALANCE - JOB.BALANCE
END ELSE
  CREDIT.AVAIL = 0
END
IF CUST.INVOICE.CNT<1,1> + 0 = 0 THEN
  AVG.INV = 0
END ELSE
  AVG.INV = INT((CUST.TOT.AMT / CUST.INVOICE.CNT<1,1>) + .5)
END
IF CUST.INVOICE.CNT<1,2> + 0 = 0 THEN
  DAYS.TO.PAY = 0
END ELSE
  DAYS.TO.PAY = INT(CUST.DAYS.TO.PAY / CUST.INVOICE.CNT<1,2>)
END

ICNT = DCOUNT(CUST.INVOICE,VM)
BAL.CR = 0; BAL.30 = 0; BAL.60 = 0; BAL.90 = 0; BAL.OVER = 0
FOR I = 1 TO ICNT
  IF CO.ARS = 'Y' THEN
    MATREAD OR.REC FROM OPEN.RECV, CONO : CUST.INVOICE<1,I> ELSE CONTINUE
    DAYS.DUE = TODAY - OR.INV.DATE
    BEGIN CASE
      CASE OR.BAL < 0
        BAL.CR = BAL.CR + OR.BAL
      CASE DAYS.DUE < 31 
        BAL.30 = BAL.30 + OR.BAL
      CASE DAYS.DUE < 61 
        BAL.60 = BAL.60 + OR.BAL
      CASE DAYS.DUE < 91 
        BAL.90 = BAL.90 + OR.BAL
      CASE 1 
        BAL.OVER = BAL.OVER + OR.BAL
    END CASE
  END 
NEXT I

HCNT = DCOUNT(CUST.HIGH.BAL,VM)
HIGH.BAL = 0
FOR H = 1 TO HCNT
  IF (TODAY - CUST.HIGH.BAL.DATE<1,H>) < 366 THEN 
    IF CUST.HIGH.BAL<1,H> > HIGH.BAL THEN
      HIGH.BAL = CUST.HIGH.BAL<1,H>
    END
  END
NEXT H

SALES.CNT = DCOUNT(CUST.SALES.PER, VM)
Y.SALES = 0 ; LY.SALES = 0
FOR SAL = 1 TO SALES.CNT
  BEGIN CASE
    CASE PER[1,4] = CUST.SALES.PER<1,SAL>[1,4]
      Y.SALES = Y.SALES + CUST.SALES<1,SAL>
    CASE LY.PER[1,4] = CUST.SALES.PER<1,SAL>[1,4]
      LY.SALES = LY.SALES + CUST.SALES<1,SAL>
  END CASE
NEXT SAL

* Set properties
CCICurrYearSales      = OCONV(Y.SALES,"MD2Z,")
CCILastYearSales      = OCONV(LY.SALES,"MD2Z,") 
CCICreditAvailable    = OCONV(CREDIT.AVAIL,"MD2Z,<")
CCICreditLimit        = OCONV(CREDIT.LIMIT,"MD0Z,")
CCIHighBalance        = OCONV(HIGH.BAL,"MD2Z,")
CCIOpenReceivable     = OCONV(CUST.AR.BAL,"MD2,<") 
CCIAverageInvoice     = OCONV(AVG.INV,"MD2,")
CCIAverageDaysToPay   = DAYS.TO.PAY
CCICredits0_30        = OCONV(BAL.30,"MD2Z,") 
CCICredits31_60       = OCONV(BAL.60,"MD2Z,") 
CCICredits61_90       = OCONV(BAL.90,"MD2Z,") 
CCICredits91AndOver   = OCONV(BAL.OVER,"MD2Z,") 
CCIOpenOrders         = OCONV(ORD.BALANCE,"MD2Z,")
CCIOpenJobs           = OCONV(JOB.BALANCE,"MD2Z,")
CCITotalBalance       = OCONV(ORD.BALANCE+JOB.BALANCE+CUST.AR.BAL,"MD2Z,<") 
CCITotalCredits       = OCONV(BAL.CR,"MD2Z,<")
CCILastPaymentAmount  = OCONV(FIELD(CUST.LAST.PMT,":",2),"MD2Z,")
CCILastSaleDate       = OCONV(CUST.LAST.SALE,"D2/")
CCILastPaymentDate    = OCONV(FIELD(CUST.LAST.PMT,":",1),"D2/")
CCICurrPeriod         = PER<1,1>
CCICurrPeriodSales    = ''
CCICurrYear           = PER[1,4]
CCILastYear           = LY.PER[1,4] 
CCILYCurrPeriod       = LY.PER
CCILYCurrPeriodSales  = ''
LOCATE PER IN CUST.SALES.PER<1>,1 SETTING TFND THEN 
  CCICurrPeriodSales = OCONV(CUST.SALES<1,TFND>, "MD2Z,") 
END
LOCATE LY.PER IN CUST.SALES.PER<1>,1 SETTING LFND THEN 
  CCILYCurrPeriodSales = OCONV(CUST.SALES<1,LFND>, "MD2Z,") 
END

*CREDIT INFORMATION
CALL RBO_SET_PROPERTY('CCICreditLimit', CCICreditLimit, ERRMSG)
CALL RBO_SET_PROPERTY('CCICreditAvailable', CCICreditAvailable, ERRMSG)

*CREDIT HISTORY
CALL RBO_SET_PROPERTY('CCIHighBalance', CCIHighBalance, ERRMSG)
CALL RBO_SET_PROPERTY('CCIAverageInvoice', CCIAverageInvoice, ERRMSG)
CALL RBO_SET_PROPERTY('CCIAverageDaysToPay', CCIAverageDaysToPay, ERRMSG)
CALL RBO_SET_PROPERTY('CCILastPaymentDate', CCILastPaymentDate, ERRMSG)
CALL RBO_SET_PROPERTY('CCILastPaymentAmount', CCILastPaymentAmount, ERRMSG)
CALL RBO_SET_PROPERTY('CCILastSaleDate', CCILastSaleDate, ERRMSG)

*SALES INFORMATION
CALL RBO_SET_PROPERTY('CCICurrPeriod', CCICurrPeriod, ERRMSG)
CALL RBO_SET_PROPERTY('CCICurrPeriodSales', CCICurrPeriodSales, ERRMSG)
CALL RBO_SET_PROPERTY('CCILYCurrPeriod', CCILYCurrPeriod, ERRMSG)
CALL RBO_SET_PROPERTY('CCILYCurrPeriodSales', CCILYCurrPeriodSales, ERRMSG)
CALL RBO_SET_PROPERTY('CCICurrYear', CCICurrYear, ERRMSG)
CALL RBO_SET_PROPERTY('CCICurrYearSales', CCICurrYearSales, ERRMSG)
CALL RBO_SET_PROPERTY('CCILastYear', CCILastYear, ERRMSG)
CALL RBO_SET_PROPERTY('CCILastYearSales', CCILastYearSales, ERRMSG)

*BALANCES INFORMATION
CALL RBO_SET_PROPERTY('CCIOpenReceivable', CCIOpenReceivable, ERRMSG)
CALL RBO_SET_PROPERTY('CCIOpenOrders', CCIOpenOrders, ERRMSG)
CALL RBO_SET_PROPERTY('CCIOpenJobs', CCIOpenJobs, ERRMSG)
CALL RBO_SET_PROPERTY('CCITotalBalance', CCITotalBalance, ERRMSG)

*OPEN RECEIVABLES AGING
CALL RBO_SET_PROPERTY('CCICredits0_30', CCICredits0_30, ERRMSG)
CALL RBO_SET_PROPERTY('CCICredits31_60', CCICredits31_60, ERRMSG)
CALL RBO_SET_PROPERTY('CCICredits61_90', CCICredits61_90, ERRMSG)
CALL RBO_SET_PROPERTY('CCICredits91AndOver', CCICredits91AndOver, ERRMSG)
CALL RBO_SET_PROPERTY('CCITotalCredits', CCITotalCredits, ERRMSG)

IF ERRMSG THEN
  CALL RBO_ERROR_SUB(ERRMSG); RETURN
END

* End of method code
RETURN

