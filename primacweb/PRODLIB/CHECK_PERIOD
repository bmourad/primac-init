SUBROUTINE CHECK_PERIOD(CONO,DATE,PERIOD,DIVISION,ERR.FLG,ERR,COMPANY,CONTROL)
********************************************************************************
*   Program name :- CHECK_PERIOD
*   Created:- 10/10/2003
*------------------------------------------------------------------------------*
*T27905 lross 01/28/2004 * Use PRODUCTION.WEEKS CONTROL record first.
* In Properties:
* --------------
*  
*
* Out Properties:
* ---------------
*  
********************************************************************************
$INCLUDE WWINSERT RBO.H
$INCLUDE PMC.CPYLIB SALESDATES
$INCLUDE PMC.CPYLIB FISCAL
$INCLUDE PMC.CPYLIB COMPANY

* Insert method code here
*
  DEFFUN DIVISION_POSITION(COMP.NO,CONTROL.FILE,DIV.NO)
  ERR.FLG='' 
  ERR=''
*  PERIOD = ''
*
DATE = ICONV(DATE,"D");* CONVERT THE DATE TO ITS INTERNAL FORMAT

  MATREAD FISCAL.REC FROM CONTROL, CONO:"ICFISCAL" ELSE
    ERR.FLG = 2
    ERR = "ICS Control Fiscal record is missing"
    GOTO 93000
  END
  MATREAD SALESDATES.REC FROM CONTROL, CONO:"SALESDATES" ELSE
    ERR.FLG = 2
    ERR = "Salesdates Control Record Is Missing"
    GOTO 93000
  END
  READ OREC FROM CONTROL, CONO:"OPENDATES" ELSE
    ERR.FLG = 2
    ERR = "Opendates Control Record Is Missing"
    GOTO 93000
  END
  MATREAD COMP.REC FROM COMPANY, CONO ELSE
    ERR.FLG = 2
    ERR = "Company Record Is Missing"
    GOTO 93000
  END
  READV JCS.YR4 FROM CONTROL, CONO:"JCFISCAL",1 ELSE
    ERR.FLG = 2
    ERR = "JCFISCAL Control Record Is Missing"
    GOTO 93000
  END
*
  IF DIVISION='ALL' THEN
    CNT=DCOUNT(FR.CURR.PER<1>,@VM)
  END ELSE
    CNT=1
    DIV.POS=DIVISION_POSITION(CONO,CONTROL,DIVISION)
*    DIV.POS=1

    BEGIN CASE
      CASE DIV.POS<1,1>=''
        DIV.POS=DIV.POS<1,2>
      CASE DIV.POS<1,1>='-2' 
        ERR=DIV.POS<1,2>
        ERR.FLG=2
        GOTO 99999
    END CASE
  END
  IF NOT(ERR.FLG) THEN
    FOR CC=1 TO CNT UNTIL (ERR.FLG)
      IF CNT#1 THEN DIV.POS=CNT
      NUM.PERIODS = DCOUNT(OREC,@AM)
      CURRENT.PERIOD=FR.CURR.PER<1,DIV.POS>
      CUR.MON=CURRENT.PERIOD[5,2]
*      CUR.MON=03
      CUR.YEAR = CURRENT.PERIOD[1,4]
      CURR.YR = CURRENT.PERIOD[1,4]
      BEGIN CASE
        CASE PERIOD # ""
          GOSUB CHECK.PERIOD
        CASE DATE # ""
          GOSUB CHECK.DATE
      END CASE
    NEXT CC
  END
*IF ERR.FLG = '' THEN
*	STATUS = RBO.setProperty('','ServerStatus',1)
*	STATUS = RBO.setProperty('','ServerMessage',ERR)
*END ELSE
*	STATUS = RBO.setProperty('','ServerStatus',0)
*	STATUS = RBO.setProperty('','ServerMessage',CONO)
*	STATUS = RBO.setProperty('','Period',' ':PERIOD)
*END

*
  GOTO 99999
*
**************************************************************************
******* S U B R O U T I N E S ********************************************
**************************************************************************
*
************
CHECK.DATE: 
************
*
  PERIOD = "";ERR.FLG = 0
*T27905 v First test PRODUCTION.WEEKS

   BEGIN CASE
   CASE CUR.MON < (NUM.PERIODS - 1)
     MAX.PERIOD = CUR.YEAR:CUR.MON+2'R%2'
   CASE CUR.MON < NUM.PERIODS
     MAX.PERIOD = CUR.YEAR+1:'01'
   CASE 1
     MAX.PERIOD = CUR.YEAR+1:'02'
   END CASE
   READ PRODUCTION.REC FROM CONTROL, CONO:CUR.YEAR:"PRODUCTION.WEEKS" ELSE
     PRODUCTION.REC = ""
   END
   IF PRODUCTION.REC # "" THEN
     LOCATE DATE IN PRODUCTION.REC<1>,1 BY 'AR' SETTING PW ELSE NULL
      
     IF PW <= DCOUNT(PRODUCTION.REC<1>,@VM) THEN
   
       PERIOD = CUR.YEAR:PRODUCTION.REC<2,PW>'R%2'
       
       IF PERIOD < CURRENT.PERIOD THEN
         ERR = 'WARNING, Date is prior to Current Period!'
         PERIOD = CURRENT.PERIOD
       END
       IF PERIOD > MAX.PERIOD THEN
         ERR='WARNING, Date is outside of the range of two periods in the future.'
         PERIOD = MAX.PERIOD
       END
     END ELSE
    
       READ PRODUCTION.REC FROM CONTROL, CONO:CUR.YEAR+1:"PRODUCTION.WEEKS" ELSE PRODUCTION.REC = ''
       IF PRODUCTION.REC # "" THEN
         LOCATE DATE IN PRODUCTION.REC<1>,1 BY 'AR' SETTING PW ELSE NULL
        
         IF PW <= DCOUNT(PRODUCTION.REC<1>,@VM) THEN
           PERIOD = CUR.YEAR+1:PRODUCTION.REC<2,PW>'R%2'
           IF PERIOD > MAX.PERIOD THEN
             ERR='WARNING, Date is outside of the range of two periods in the future.'
             PERIOD = MAX.PERIOD
           END
         END
       END
     END
   END
*  IF ERR # '' THEN ERR.FLG = 1
 
   IF LEN(PERIOD) = 6 THEN FOUND=1; RETURN
   PERIOD = ''
*T27905 ^ If above fails then use below



  JCS.YR4 = JCS.YR4[1,4]    
  IF CUR.YEAR > JCS.YR4 THEN MULT = 1 ELSE MULT = 0
  IF CUR.YEAR < JCS.YR4 THEN MULT = -1 
*T26906 v MODIFIED BY ALEEM
   CAL.END.DATE=FR.CURR.DATE<1,DIV.POS>
   CAL.YEAR = FIELD(OCONV(CAL.END.DATE,'D4/'),'/',3) ;*T26906
   IC.YE.DATE = OCONV(SALESDATES.REC(NUM.PERIODS+1)<1,1>,'D2/')[1,6]:CUR.YEAR
   IF ICONV('02/29/':CUR.YEAR,'D') > 0 THEN LPYR = 1 ELSE LPYR = 0
   IC.BEGYR.DATE = ICONV(IC.YE.DATE,'D4/') -364 -LPYR

  FOUND=0
  BEGIN CASE
    CASE ICONV(DATE,"D4/") < ICONV("01/01/":CUR.YEAR,"D4/") 
      ERR.FLG = 1
      ERR = "DATE IS LESS THAN BEGINNING DATE FOR CURRENT PERIOD1"
      *STATUS = RBO.setError(ERR:":":ICONV(DATE,"D4/"):" :":ICONV("01/01/":CUR.YEAR,"D4/"))
      GOTO 93000
    CASE ICONV(DATE,"D4/") <= SALESDATES.REC(CUR.MON)<1,1> + ((365+LPYR)*MULT) AND CUR.MON#1
      ERR.FLG = 1
      ERR = "DATE IS LESS THAN BEGINNING DATE FOR CURRENT PERIOD2"
      *STATUS = RBO.setError(ERR:" : ":SALESDATES.REC(CUR.MON)<1,1> + (365*MULT) : " : ":CUR.MON)
      GOTO 93000
    CASE 1
      ;* find default period based on days variance
       NEW.DATE=ICONV(DATE,"D4/")-CO.ICS.DAYS.VAR
      BEGIN CASE
        CASE NEW.DATE <= SALESDATES.REC(CUR.MON+1)<1,1> + ((365+LPYR)*MULT)
          PERIOD = CUR.YEAR:STR('0',2-LEN(CUR.MON)):CUR.MON
          FOUND = 1
        CASE 1

          NEW.MON = CUR.MON;NEW.YEAR = CUR.YEAR
          FOUND = 0
          FOR XXX = 1 TO 2 UNTIL FOUND
            IF CUR.MON + XXX > NUM.PERIODS THEN
              MULT = 1
              NEW.YEAR = CUR.YEAR + 1
              NEW.MON = CUR.MON - NUM.PERIODS
            END
            DATE.POS=NEW.MON+XXX+1

            IF ICONV(DATE,"D4/") <= (SALESDATES.REC(DATE.POS)<1,1> + ((365+LPYR)*MULT)) THEN
              NEW.MON = NEW.MON + XXX
              FOUND = 1
            END
          NEXT XXX
          IF NOT(FOUND) THEN
            ;* get the second period in the future
            NEW.MON+=XXX-1
          END
          PERIOD = NEW.YEAR:STR('0',2-LEN(NEW.MON)):NEW.MON
      END CASE
	  *PERIOD = ' ':PERIOD
	  STATUS = RBO.setProperty('','Period',PERIOD)
	   *STATUS = RBO.setError(PERIOD)
	*STATUS = RBO.setError(' ':SALESDATES.REC(CUR.MON+1)<1,1>)
  END CASE

  IF NOT(FOUND) AND ERR = '' THEN
    ERR.FLG = 0    
    ERR='WARNING, Date is outside of the range of two periods in the future.'
    GOTO 93000
  END

  RETURN
*
***************
CHECK.PERIOD: 
***************
*
  ERR.FLG = 0
  MON = PERIOD[5,2];YEAR = PERIOD[1,4]
  BEGIN CASE
    CASE LEN(PERIOD) # 6
      ERR = "INVALID PERIOD (MUST BE 6 DIGITS)"
      ERR.FLG = 1
      GOTO 93000
    CASE PERIOD < FR.CURR.PER<1,DIV.POS>
      ERR = "PERIOD MUST BE EQUAL TO OR GREATER THAN CURRENT PERIOD ":FR.CURR.PER<1,DIV.POS>
      ERR.FLG = 1
      GOTO 93000
    CASE MON > 0 AND MON < NUM.PERIODS + 1
      BEGIN CASE
        CASE NUM.PERIODS - CUR.MON = 1 AND MON < 2
          CURR.YR = CURR.YR + 1
        CASE NUM.PERIODS - CUR.MON = 0 AND MON < 3
          CURR.YR = CURR.YR + 1
      END CASE
      IF CURR.YR # YEAR THEN ERR.FLG = 1
      IF CUR.MON + 2 < MON THEN ERR.FLG = 1
    CASE 1
      ERR.FLG = 1
  END CASE
  IF ERR.FLG AND ERR = "" THEN
    ERR = "PERIOD CAN BE UP TO TWO PERIODS GREATER THAN CURRENT PERIOD OF ":FR.CURR.PER<1,DIV.POS>
    GOTO 93000
  END

  IF ERR = "" AND DATE # "" THEN
    SAVE.PERIOD = PERIOD;PERIOD = ""
    GOSUB CHECK.DATE
    ERR.FLG = 0;ERR = ""
    IF (PERIOD # "" AND PERIOD # SAVE.PERIOD) OR FOUND=0 THEN
*IF FOUND=0 THEN

      ERR.FLG = 0;ERR = "WARNING, This Period Does Not Match Date Entered"
      GOTO 93000
    END

    PERIOD = SAVE.PERIOD
  END
  RETURN

99999 
RETURN

93000 
  STATUS = RBO.setProperty('','ServerStatus',1)
  STATUS = RBO.setProperty('','ServerMessage',ERR) 
* End of method code
RETURN


