SUBROUTINE Stock_Rec_Update(CONO,PO.CODE,FIND.PO,MAT COMP.REC,CUR.PERIOD,PORDQTY,PJBOPEN)
*SUBROUTINE Stock_Rec_Update
*********************************************************************
* Copyright 1998 by Primac Systems India
* SYSTEM       - EPRIMAC
* PROGRAM      - Stock_Rec_Update
* BY           - KHAJA ZIAUDDIN
* DATE         - 06/13/2003 (mm/dd/yyyy)
* DESCRIPTION  - THIS PROGRAM UPDATES ALL FILES FOR STOCK RECEIPTS
*                FOR ITEMS THAT ARE GENERALY TRACKED AND ARE NOT FNGD'S
*                
*                
*T27990 * Mods for call to ICS.IWH.SUB (ERRMSG)               
*ENDDOC
*********************************************************************
$INCLUDE WWINSERT RBO.H
$INCLUDE CPYLIB COMMON1
$INCLUDE ICS.CPYLIB COM.INV.MAIN  
$INCLUDE ICS.CPYLIB COM.INV.SERIAL
$INCLUDE ICS.CPYLIB COM.INV.LINK  
$INCLUDE POS.CPYLIB COM.PO.INTRF
$INCLUDE CPYLIB CHAR

$DEFINE PO
$INCLUDE PMC.CPYLIB PO
$DEFINE SSTK
$INCLUDE ICS.CPYLIB SAVE.STOCK.REC
$INCLUDE PMC.CPYLIB COMPANY
$DEFINE INVENTORY
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE ICS.CPYLIB INV.STATS
$INCLUDE ICS.CPYLIB INV.JOB.STATS
$INCLUDE JCS.CPYLIB JOB
$DEFINE INVWHSE
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV.HIST
$DEFINE APSFILEVARS
$INCLUDE APS.CPYLIB APS.FILE.VARS
$DEFINE FILEVARS
$INCLUDE CPYLIB FILE.VARS
$INCLUDE APS.CPYLIB VEND.STATS
$INCLUDE APS.CPYLIB VEND.PO.STATS
$INCLUDE APS.CPYLIB VEND.PROD.STATS
$INCLUDE POS.CPYLIB ACCRUED.LIAB.HIST
$DEFINE ICSID
$INCLUDE ICS.CPYLIB ICS.ID
$DEFINE INVWHSELOC
$INCLUDE ICS.CPYLIB INV.WHSE.LOC
$DEFINE CATEGORY
$INCLUDE ICS.CPYLIB CATEGORY
$DEFINE INVRECEIPTS
$INCLUDE ICS.CPYLIB INV_RECEIPTS
$DEFINE INVRECPWHSE
$INCLUDE ICS.CPYLIB INV_RECP_WHSE
$DEFINE INVAUDITHIST
$INCLUDE ICS.CPYLIB INV_AUDIT_HIST
$DEFINE INVSERIAL
$INCLUDE ICS.CPYLIB INV_SERIAL
  
$INCLUDE ICS.CPYLIB INV.CNV

DEFFUN CALC.STK.QTY(RESV.QTY,MAT INV.CNV.REC,POS,VAL)
*
*
;*
;**** UPDATE PROCESS
;*

MAT ORG.IWH.REC=''
ALH.ID = ''
OPEN.FLAG=1
GEN.DIV = "00";GEN.DEPT = "00";GEN.CCTR = "000"
ERRMSG=''
TEMPARR=''
PO.CODE=PO.CODE[4,99]

*STATUS = RBO.setProperty('','ServerMessage','PRODUCTS  --' : PO.PROD.NUM)
*RETURN
PROD.CNT=DCOUNT(SSTK.PROD,@VM)
*PROD.CNT=DCOUNT(PO.PROD.NUM,@VM)

*STATUS = RBO.setProperty('','ServerMessage','STOCK REC UPDATE --' : PROD.CNT)
*RETURN


*STATUS = RBO.setProperty('','ServerMessage','FIND PO -- ' : FIND.PO)
*RETURN
RECV.QTY=""
ONHAND.QTY=""
CHECK=""
FOR S=1 TO PROD.CNT WHILE ERRMSG=''
	SCNT=DCOUNT(PO.PROD.NUM<1,S>,@VM)
  	POLN=PO.PROD.NUM<1,S>
	PROD=PO.PROD.NUM<1,S>
  WHSE=PO.WHSE<1,S>
*WRITE PO.TOT.RECEVED<1,S> ON CONTROL,"PRASU"
*MATREAD PO.REC FROM PO,CONO:PO.CODE THEN
   *PO.TOT.RECEVED<1,S>="0"
*END
*
   MATREAD WHSE.REC FROM WAREHOUSE,CONO:WHSE ELSE
    MAT WHSE.REC = ""                               
  END                                                
  IF WHS.DIV = "" THEN WHS.DIV = GEN.DIV             
  DV.DP.CC = WHS.DIV:GEN.DEPT:GEN.CCTR
  MAT INAH.REC=''              
  INAH.PROD=PROD
  INAH.WHSE=WHSE
  INAH.DATE=SSTK.DATE
  INAH.TYPE='R'                
  INAH.SRC='IR'                
*  INAH.TRAN=PO.CODE ;* commented by suhail : to exclude CONO from INAH.TRAN
  INAH.TRAN=PO.CODE

  INAH.PERIOD=SSTK.PERIOD<1>

  PERIOD=SSTK.PERIOD<1>
  INAH.DV.DP.CC=DV.DP.CC

*STATUS = RBO.setProperty('','ServerMessage','PO ACCRUE ' : PO.ACCRUE)
*RETURN
*
  IF SSTK.TOT.REC<1,S>+0 # 0 THEN 
    IF SSTK.LOC<1,S>#'' THEN 

      MATREAD INV.REC FROM INVENTORY, CONO:PROD THEN

 
	$INCLUDE ICSBP INV.UM.CNV
        MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE THEN

          IF PO.ACCRUE='Y' THEN
           INAH.ACCT=CATG.INV
           INAH.ACCR.ACCT=CATG.ACCRU.LIAB
          END
          IWH.ID=CONO:PROD:'!':WHSE
          INV.ID=CONO:PROD
          MATREADU IWH.REC FROM INV.WHSE , IWH.ID THEN
            MAT ORG.IWH.REC = MAT IWH.REC           
            ACTION=1; * build INV.WHSE fifo buckets 
            TMP.CNT='' ; LAST='' ; TMP.ARR=''

CHECK <1,1> =  "1"

*RETURN

* T27990 v           
*	    CALL  ICS_IWH_SUB_GENERAL(CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG)
	    CALL ICSSRE_ICS_IWH_SUB (CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG,ERRMSG)
* T27990 ^
CHECK<1,2> = "2"
*STATUS = RBO.setProperty('','ServerMessage', 'CHECK -- ' : CHECK)
*RETURN

	   *  RELEASE
            IH.ID=CONO:PROD
            MATREADU IH.REC FROM INV.HIST, IH.ID ELSE
              MAT IH.REC=''
            END
            IF INV.COST.WT+0=0 THEN INV.COST.WT=100
            IF INV.SBR+0=0 THEN INV.SBR=1
            ACT.RECV.PRICE=INT((PO.GROS.PRICE<1,S>*(1- (PO.DISCOUNT<1,S>/10000)))/INV.SBR +.5)
            RECV.PRICE=ACT.RECV.PRICE
            INAH.UNIT.COST=RECV.PRICE  
           * RECV.QTY=SSTK.TOT.REC<1,S>
            RECV.QTY=SSTK.KQTY<1,S>
           ONHAND.QTY=SSTK.KQTY<1,S>

            ACT.RECV.QTY=INT(SSTK.TOT.REC<1,S>/10)
            RECP.NO='';DEPL.METHOD=''
            RET.ARR='' ; ERMSG=''
            TYPE="R"
CHECK <1,3> = "3"
IWH.ID=CONO:PROD:'!':WHSE

            CALL QTY_CHANGE_SUB(CONO,PO.CODE,MAT IWH.REC,MAT INV.REC,MAT PO.REC,DEPL.METHOD,RECP.NO,SSTK.DATE,PERIOD,RECV.QTY,RECV.PRICE,TYPE,ERRMSG,RET.ARR,IWH.ID)
CHECK <1,4> = "4"

	     *RELEASE
            IF ERRMSG='' THEN
              TOT.PRICE=RET.ARR<1>
* T28090 v
              FI.CNT = DCOUNT(IWH.RECV.FI,VM)
              IWH.PO.LN.FI<1,FI.CNT> = POLN
* T28090 ^
              LCNT=DCOUNT(SSTK.LOC<1,S>,SVM)
		 L.ERR='' ;*T27990
		*GOSUB CHECK.SERIAL
              ACTION=2

		FOR L=1 TO LCNT
                IF SSTK.QTY<1,S,L>+0#0 THEN 
                  INAH.LOC=SSTK.LOC<1,S,L>
                  INAH.QTY = SSTK.QTY<1,S,L> 
                  TMP.ARR=RAISE(SSTK.LOC<1,S>)
                  ACTION=2
                  TMP.CNT=L

                IF L = LCNT THEN LAST="Y"
CHECK <1,5> = "5"
* T27990 v
          
*		  CALL  ICS_IWH_SUB_GENERAL (CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG)
		  CALL ICSSRE_ICS_IWH_SUB (CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG,ERRMSG)


		  IF ERRMSG # '' THEN
                      GOSUB 91000
                      L.ERR = 1
                      CONTINUE
                END
* T27990 ^

CHECK <1,6> = "6"
		    *RELEASE

		*	MATWRITE IH.REC ON INV.HIST, IH.ID
                    IF TRIM(SSTK.LOC<1,S,L>)#'' THEN 
                     LOCATE SSTK.LOC<1,S,L> IN IWH.LOC<1>,1 SETTING LLOC ELSE
                      LLOC = COUNT(IWH.LOC,@VM) + (IWH.LOC # '') + 1
                      IWH.LOC<1,LLOC> = SSTK.LOC<1,S,L>
                    END 
                    IF CATG.TYPE # 'L' THEN
                    END
                  END
*T28090

			*IF DEL.ARR#'' THEN
                      *  GOSUB DELETE.SERIALS
                    * END

		     IF RECV.QTY>0 THEN
*T28090
                    IWH.LA.PUR=SSTK.DATE
                    IF SSTK.QTY<1,S,L> < "0" THEN ROND=-.5 ELSE ROND=.5
                    END
 	          END    
		NEXT L

		IF L.ERR THEN LAST.S = S-1; CONTINUE ;*T27990
            * 
              IWH.ON.HAND=IWH.ON.HAND+RECV.QTY

              IH.CNT=DCOUNT(IH.DATE,@VM)
              IDATE=SSTK.DATE
              LOCATE IDATE IN IH.DATE<1> SETTING DP ELSE NULL
              BEGIN CASE
                CASE DP=IH.CNT
                  IH.AMOUNT<1,DP>=IH.AMOUNT<1,DP>+RECV.QTY
                CASE DP > IH.CNT
                  IH.AMOUNT<1,DP>=IH.AMOUNT<1,DP>+RECV.QTY
                  IH.DATE<1,DP>=IDATE
                CASE 1
                  IH.AMOUNT<1,DP>=IH.AMOUNT<1,DP>+RECV.QTY
              END CASE
              ;* receipts posted in the future must not affect
              ;* average cost in current period.
              IF INAH.PERIOD=CUR.PERIOD THEN
                CALL INV_AVG_COST_MAINT(MAT IWH.REC,INV.COST.WT,CUR.PERIOD)
		   RELEASE
              END
              MATREADU INV.STAT.REC FROM INV.STATS, IWH.ID ELSE MAT INV.STAT.REC=""
               *IF PO.CODE[1,3]="001" THEN
               *  PO.CODE=PO.CODE[4,99]
               *END ELSE
               *  PO.CODE=PO.CODE
               *ENDWQRITE 

           *   IF PO.CODE[1,3] <> "001" THEN
                LOCATE PO.CODE IN ISTAT.PO<1>,1 SETTING PFND ELSE

                  ISTAT.PO<1,PFND>=PO.CODE
                  ISTAT.PO.VEND<1,PFND>=PO.VEND.NO
                  ISTAT.PO.DATE<1,PFND>=PO.DATE
                  ISTAT.PO.QTY<1,PFND>=PO.QTY.OPEN<1,S>
                  ISTAT.PO.JOB<1,PFND>=""
                  ISTAT.PO.JOB.QTY<1,PFND>=""
                  ISTAT.PO.JOB.AMT<1,PFND>=""
                END
           *   END
*RETURN
        
              IF FIND.PO THEN
                QTY.OPEN=PO.QTY.OPEN<1,S>
                GOSUB 3000
                IWH.ON.ORDER=SUM(ISTAT.PO.QTY)
                IF IWH.ON.ORDER < 0 THEN IWH.ON.ORDER=0
              END ELSE
                GOSUB 3000
              END

              IF ISTAT.PO='' AND ISTAT.JOB='' THEN
                DELETE INV.STATS, IWH.ID
              END ELSE
                MATWRITE INV.STAT.REC ON INV.STATS, IWH.ID
              END

              IF PO.ACCRUE='Y' THEN
                GOSUB PROCESS.ACCRUE
              END
              ACTION=3
CHECK <1,7> = "7"

*STATUS = RBO.setProperty('','ServerMessage','IN STOCK REC UPDATE ACTION 7 -- ' : CHECK)
*RETURN
* T27801 v
*	      CALL  ICS_IWH_SUB_GENERAL (CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG)
  

	      CALL ICSSRE_ICS_IWH_SUB (CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG,ERRMSG)
* T27801 ^
		RELEASE
             MATWRITE IH.REC ON INV.HIST, IH.ID
              INV.LA.PUR=SSTK.DATE
              MATWRITE INV.REC ON INVENTORY, INV.ID
              IF PO.ACCRUE="Y" THEN
                MATWRITE ALH.REC ON ACCRUED.LIAB.HIST,ALH.ID
              END
              IF CO.APS.R.INTRF > 1 THEN
                GOSUB PROCESS.VEND
              END
*T28090
		END ELSE
		          IF SCNT > 0 THEN
                           SSTK.STATUS<1,S>="Qty. must be greater than 0."
                           ERR=1
                        END
		END

*T28090
       END ELSE
            ERRMSG='CANNOT LOCATE INV.WHSE # ': IWH.ID
       END
       END ELSE
          ERRMSG='CANNOT LOCATE CATEGORY # ':INV.LINE
       END
      END ELSE
        ERRMSG='CANNOT LOCATE INVENTORY # ': PROD
      END
	END
 END
  LAST.S=S - 1
NEXT S

IF ERRMSG # '' THEN
  RELEASE INV.WHSE, IWH.ID
  GOSUB 91000
  FOR S=LAST.S TO 1 STEP -1
    FOR I=1 TO SAVE.STK.REC.SIZE
      SAVE.STK.REC(I)=DELETE(SAVE.STK.REC(I),1,S,0)
    NEXT I
  NEXT S
END ELSE
  MAT SAVE.STK.REC=''
END
IF FIND.PO THEN MATWRITE PO.REC ON PO, CONO:PO.CODE
GOTO 99999
*
**************************************************************************
***** S U B R O U T I N E S **********************************************
**************************************************************************
*
*************
PROCESS.VEND: 
*************
*
VSTAT.KEY=CONO:PO.VEND.NO:"!":"R"
MATREADU VSTAT.REC FROM VEND.STATS ,VSTAT.KEY ELSE
  MAT VSTAT.REC=""
END
LOCATE PO.CODE IN VSTAT.PO<1>,1 SETTING POFND ELSE NULL
VSTAT.PO<1,POFND>=PO.CODE
VSTAT.PO.RECV<1,POFND>=VSTAT.PO.RECV<1,POFND>+INT(((ACT.RECV.PRICE/100)*(ACT.RECV.QTY/(INV.COST.WT/100)))/100+.5)
MATWRITE VSTAT.REC ON VEND.STATS, VSTAT.KEY
VPS.KEY=VSTAT.KEY:"!":PO.CODE
MATREADU VPS.REC FROM VEND.PO.STATS, VPS.KEY ELSE
  MAT VPS.REC=""
END
PTR=1
LOOP
  LOCATE PO.PROD.NUM<1,S> IN VPS.PROD<1>,PTR SETTING PFND ELSE
    VPS.PROD<1,PFND>=PO.PROD.NUM<1,S>
    VPS.PROD.DESC<1,PFND>=INV.FULL.DESC
    VPS.U.M<1,PFND>=INV.UNIT<1,2>
    VPS.WHSE<1,PFND>=PO.WHSE<1,S>
  END
  IF PO.WHSE<1,S> # VPS.WHSE<1,PFND> THEN
    PTR=PFND+1
  END ELSE
    PTR=0
  END
WHILE PTR DO
REPEAT
VPS.REC.QTY<1,PFND>=VPS.REC.QTY<1,PFND>+ACT.RECV.QTY
VPS.REC.AMT<1,PFND>=VPS.REC.AMT<1,PFND>+INT(((ACT.RECV.PRICE/100)*(ACT.RECV.QTY/(INV.COST.WT/100)))/100+.5)
MATWRITE VPS.REC ON VEND.PO.STATS, VPS.KEY
VPDS.KEY=VPS.KEY:"!":PO.PROD.NUM<1,S>:"!":PO.WHSE<1,S>
MATREADU VPDS.REC FROM VEND.PROD.STATS, VPDS.KEY ELSE
  MAT VPDS.REC=""
END
PTR=1
LOOP
  LOCATE SSTK.DATE IN VPDS.REC.FI.DATE<1>,PTR SETTING DFND ELSE
    VPDS.REC.DATE<1,DFND>=SSTK.DATE
    VPDS.REC.UN.COST<1,DFND>=ACT.RECV.PRICE
    VPDS.REC.FI.DATE<1,DFND>=SSTK.DATE
    VPDS.REC.PERIOD<1,DFND>=SSTK.PERIOD ;* CSF39801
  END
  IF VPDS.REC.UN.COST<1,DFND> # ACT.RECV.PRICE THEN
    PTR=DFND+1
  END ELSE
    PTR=0
  END
WHILE PTR DO
REPEAT
VPDS.REC.QTY<1,DFND>=VPDS.REC.QTY<1,DFND>+ACT.RECV.QTY
MATWRITE VPDS.REC ON VEND.PROD.STATS, VPDS.KEY
RETURN
*
***************
PROCESS.ACCRUE: 
***************
*
;* Upate Accrued Liability History
READU ALH.CT FROM CONTROL,CONO:"ALHCOUNTER" ELSE ALH.CT=0
ALH.CT=ALH.CT+1
IF ALH.CT > 999999 THEN ALH.CT=1
WRITE ALH.CT ON CONTROL,CONO:"ALHCOUNTER"
MAT ALH.REC="" ALH.ID=CONO:STR("0",6-LEN(ALH.CT)):ALH.CT
ALH.DATE=INAH.DATE
ALH.REF="R*":PO.CODE:"*":PROD
ALH.SRC=INAH.SRC
ALH.MON=INAH.PERIOD
ALH.AMT=0-TOT.PRICE
ALH.ACCT=INAH.ACCR.ACCT
ALH.DV.DP.CC=INAH.DV.DP.CC
RETURN
*

3000 
*JCNT= COUNT(PO.JOB.NO<1,S>,@SVM)+(PO.JOB.NO<1,S> # '')
JCNT=COUNT(SSTK.JOB<1,S>,@SVM)+(SSTK.JOB<1,S># '')

*STATUS = RBO.setProperty('','ICSSVAL','PO JOB NO --' : PO.JOB.NO : "~~~" : JCNT : "--SSTK.JOB.QTY --" : SSTK.JOB.QTY  )
*RETURN
*SSTK.JOB.QTY=SSTK.KQTY
FOR J=1 TO JCNT
IF PJBOPEN<1,S,J> > 0 THEN
  
  IF PJBOPEN<1,S,J> > PORDQTY<1,S,J> THEN
    SSTK.JOB.QTY<1,S,J>=PORDQTY<1,S,J>
  END ELSE
    SSTK.JOB.QTY<1,S,J>=PJBOPEN<1,S,J>
  END
  
END 

  *WRITE SSTK.JOB.QTY<1,S,J>:"JQT":PO.JB.OPEN<1,S,J> ON CONTROL,"JQT"
 IF SSTK.JOB.QTY<1,S,J> <= 0 THEN GOTO 3088
*   JOB.NUM=PO.JOB.NO<1,S,J>
   JOB.NUM=SSTK.JOB<1,S,J>

* STATUS=RBO.setProperty('','ICSSVA',"JOBNUM:":JOB.NUM)
  MATREADU JOB.REC FROM JOB, CONO:JOB.NUM ELSE
    RELEASE JOB, CONO:JOB.NUM
    ERRMSG="JOB ":JOB.NUM:" IS NOT ON FILE"; GOSUB 91000; GOTO 3088
  END
  LOCATE JOB.NUM IN ISTAT.JOB<1>,1 SETTING JLOC ELSE
    ISTAT.JOB<1,JLOC>=JOB.NUM
  END
  MATREADU INV.JS.REC FROM INV.JOB.STATS , IWH.ID:"!":JOB.NUM ELSE
    MAT INV.JS.REC=""
  END
  IF IJS.JOB.CUST="" THEN
    IJS.JOB.CUST=JOB.CUST
    IJS.JOB.DATE=SSTK.DATE
    IJS.JOB.ALOC=0
    IJS.JOB.QTY=0
    IJS.JOB.USED=0
    IJS.RECP.NO=""
    IJS.FI.ORG=""
    IJS.FI.QTY=""
    IJS.FI.AMT=""
    IJS.JMT.SEQ=""
    IJS.JMT.QTY=""
  END
  IF IJS.JOB.DATE='ALLOCATE' THEN IJS.JOB.DATE=SSTK.DATE
  NEW.COST=INT((RECV.PRICE/10000)*((PO.JB.OPEN<1,S,J>/10)/(INV.COST.WT/100))+ROND)
  LOCATE JOB.NUM IN ISTAT.PO.JOB<1,PFND>,1 SETTING JJ ELSE
    ISTAT.PO.JOB<1,PFND,JJ>=JOB.NUM
*WRITE PO.JB.OPEN<1,S,J>:"POJ" ON CONTROL,"POJ"
    ISTAT.PO.JOB.QTY<1,PFND,JJ>=PO.JB.OPEN<1,S,J>
    ISTAT.PO.JOB.AMT<1,PFND,JJ>=NEW.COST
  END
  LOCATE PO.CODE IN IJS.PO<1>, 1 SETTING FNDP ELSE
    IJS.PO<1,FNDP>=PO.CODE
    IJS.JOB.ALOC=IJS.JOB.ALOC+PO.JB.OPEN<1,S,J>
    IJS.PO.JOB.QTY<1,FNDP>=PO.JB.OPEN<1,S,J>
    IJS.PO.JOB.AMT<1,FNDP>=NEW.COST
  END
  PTR=1
  LOOP
    LOCATE PROD IN JOB.RESV.MATL<1>,PTR SETTING MLOC ELSE MLOC=0
    IF MLOC THEN
      IF JOB.RESV.WHSE<1,MLOC>=WHSE THEN
        PTR=0
      END ELSE
        PTR=MLOC+1
      END
    END
  WHILE MLOC AND PTR DO REPEAT
  IF MLOC=0 THEN
    MLOC=COUNT(JOB.RESV.MATL,@VM)+(JOB.RESV.MATL # "")+1
    JOB.RESV.MATL<1,MLOC>=PROD
    JOB.RESV.WHSE<1,MLOC>=WHSE
    JOB.RESV.DATE<1,MLOC>=SSTK.DATE
    JOB.ALOC.QTY<1,MLOC>=PO.JB.OPEN<1,S,J>
    JOB.RESV.QTY<1,MLOC>=0
    JOB.USED.QTY<1,MLOC>=0
    JOB.ALOC.AMT<1,MLOC>=NEW.COST
    JOB.RESV.AMT<1,MLOC>=0
    JOB.USED.AMT<1,MLOC>=0
  END

  IJS.JOB.ALOC=IJS.JOB.ALOC - PO.JB.OPEN<1,S,J>
  IF FIND.PO THEN
    IWH.ALLOC=IWH.ALLOC - SSTK.JOB.QTY<1,S,J>
    IF IWH.ALLOC < 0 THEN IWH.ALLOC=0
  END
  ISTAT.PO.JOB.QTY<1,PFND,JJ>=ISTAT.PO.JOB.QTY<1,PFND,JJ> - PO.JB.OPEN<1,S,J>
  IJS.PO.JOB.QTY<1,FNDP>=IJS.PO.JOB.QTY<1,FNDP> - PO.JB.OPEN<1,S,J>
  ISTAT.PO.JOB.AMT<1,PFND,JJ>=ISTAT.PO.JOB.AMT<1,PFND,JJ> - NEW.COST
  IJS.PO.JOB.AMT<1,FNDP>=IJS.PO.JOB.AMT<1,FNDP> - NEW.COST
  JOB.ALOC.QTY<1,MLOC>=JOB.ALOC.QTY<1,MLOC> - PO.JB.OPEN<1,S,J>
  JOB.ALOC.AMT<1,MLOC>=JOB.ALOC.AMT<1,MLOC> - NEW.COST
  PO.JB.RECEVED<1,S,J>=PO.JB.RECEVED<1,S,J>+SSTK.JOB.QTY<1,S,J>
  PO.JB.OPEN<1,S,J>=PO.JB.ONORD<1,S,J> - PO.JB.RECEVED<1,S,J>

  IF PO.JB.OPEN<1,S,J> < 0 THEN PO.JB.OPEN<1,S,J>=0
  NEW.COST=INT((RECV.PRICE/10000)*((PO.JB.OPEN<1,S,J>/10)/(INV.COST.WT/100))+ROND)
  IJS.JOB.ALOC=IJS.JOB.ALOC+PO.JB.OPEN<1,S,J>
  ISTAT.PO.JOB.QTY<1,PFND,JJ>=ISTAT.PO.JOB.QTY<1,PFND,JJ>+PO.JB.OPEN<1,S,J>
  ISTAT.PO.JOB.AMT<1,PFND,JJ>=ISTAT.PO.JOB.AMT<1,PFND,JJ>+NEW.COST
  JOB.ALOC.QTY<1,MLOC>=JOB.ALOC.QTY<1,MLOC>+PO.JB.OPEN<1,S,J>
  JOB.ALOC.AMT<1,MLOC>=JOB.ALOC.AMT<1,MLOC>+NEW.COST
  IJS.PO.JOB.QTY<1,FNDP>=IJS.PO.JOB.QTY<1,FNDP>+PO.JB.OPEN<1,S,J>
  IJS.PO.JOB.AMT<1,FNDP>=IJS.PO.JOB.AMT<1,FNDP>+NEW.COST
  RESV.QTY=SSTK.JOB.QTY<1,S,J>
  RESV.ARR=''
$INCLUDE JCSBP FIFO.RESV.SUB

  IF ERRMSG # '' THEN GOSUB 91000

  GOSUB SET.RESERVES
  JOB.RESV.QTY<1,MLOC>=JOB.RESV.QTY<1,MLOC>+SSTK.JOB.QTY<1,S,J> - RESV.QTY
  JOB.RESV.AMT<1,MLOC>=JOB.RESV.AMT<1,MLOC>+STD.PRICE

  MATWRITE JOB.REC ON JOB, CONO:JOB.NUM
  IF ISTAT.PO.JOB.QTY<1,PFND,JJ>=0 THEN
    ISTAT.PO.JOB=DELETE(ISTAT.PO.JOB,1,PFND,JJ)
    ISTAT.PO.JOB.QTY=DELETE(ISTAT.PO.JOB.QTY,1,PFND,JJ)
    ISTAT.PO.JOB.AMT=DELETE(ISTAT.PO.JOB.AMT,1,PFND,JJ)
  END
  IF IJS.PO.JOB.QTY<1,FNDP>=0 THEN
    IJS.PO=DELETE(IJS.PO,1,FNDP,0)
    IJS.PO.JOB.QTY=DELETE(IJS.PO.JOB.QTY,1,FNDP,0)
    IJS.PO.JOB.AMT=DELETE(IJS.PO.JOB.AMT,1,FNDP,0)
  END

  IF IJS.JOB.ALOC+0=0 AND IJS.JOB.QTY+0=0 AND IJS.JOB.USED+0=0 AND IJS.PO="" AND IJS.REQ.QTY+0=0 THEN
    DELETE INV.JOB.STATS, IWH.ID:"!":JOB.NUM
    ISTAT.JOB=DELETE(ISTAT.JOB,1,JLOC,0)
  END ELSE
    MATWRITE INV.JS.REC ON INV.JOB.STATS , IWH.ID:"!":JOB.NUM
  END
3088 
NEXT J
ISTAT.PO.QTY<1,PFND>=ISTAT.PO.QTY<1,PFND> - PO.QTY.OPEN<1,S>
PO.TOT.RECEVED<1,S>=PO.TOT.RECEVED<1,S>+RECV.QTY
PO.QTY.OPEN<1,S>=PO.TOT.ONORD<1,S> - PO.TOT.CANCEL<1,S> - PO.TOT.RECEVED<1,S>

 TEST.OPEN = ABS(PO.QTY.OPEN<1,S>)
   IF (INV.UNIT<1,3>='MSI' AND TEST.OPEN <= 50) OR (INV.UNIT<1,3>#'MSI' AND TEST.OPEN <= 9) THEN
        * PO.TOT.CANCEL<1,POLN> += (PO.TOT.ONORD<1,POLN>-PO.TOT.CANCEL<1,POLN>-PO.TOT.RECEVED<1,POLN>)
      PO.TOT.CANCEL<1,S> = PO.TOT.ONORD<1,S> - PO.TOT.RECEVED<1,S>
        * PO.QTY.OPEN<1,POLN>=PO.TOT.ONORD<1,POLN> - PO.TOT.CANCEL<1,POLN> - PO.TOT.RECEVED<1,POLN>
      PO.QTY.OPEN<1,S> = 0
      IF PO.TOT.CANCEL<1,S> < 0 THEN PO.TOT.CANCEL<1,S> = 0
   END

IF PO.QTY.OPEN<1,S> < 0 THEN PO.QTY.OPEN<1,S>=0

IF SSTK.COMPLETE<1,S> = "Y" THEN
      PO.TOT.CANCEL<1,S> = PO.TOT.CANCEL<1,S> + PO.QTY.OPEN<1,S>
      IF PO.TOT.CANCEL<1,S> < 0 THEN PO.TOT.CANCEL<1,S> = 0
      PO.QTY.OPEN<1,S> = 0
END

ISTAT.PO.QTY<1,PFND>=ISTAT.PO.QTY<1,PFND>+PO.QTY.OPEN<1,S>
IF ISTAT.PO.QTY<1,PFND>=0 THEN
*STATUS=RBO.setProperty('','TEMPVAL',ISTAT.PO.QTY<1,PFND>:"**":PFND)
  ISTAT.PO=DELETE(ISTAT.PO,1,PFND,0)
  ISTAT.PO.VEND=DELETE(ISTAT.PO.VEND,1,PFND,0)
  ISTAT.PO.DATE=DELETE(ISTAT.PO.DATE,1,PFND,0)
  ISTAT.PO.QTY=DELETE(ISTAT.PO.QTY,1,PFND,0)
  ISTAT.PO.JOB=DELETE(ISTAT.PO.JOB,1,PFND,0)
  ISTAT.PO.JOB.QTY=DELETE(ISTAT.PO.JOB.QTY,1,PFND,0)
  ISTAT.PO.JOB.AMT=DELETE(ISTAT.PO.JOB.AMT,1,PFND,0)
END
3099 
RETURN
*                                                     
******************                                    
SET.RESERVES: 
******************                                    
*                                                     
RCNT=DCOUNT(IJS.RECP.NO<1>,@VM)                        

FOR RR=1 TO RCNT                                      
  RECP.NO=IJS.RECP.NO<1,RR>                           
  IRW.ID=CONO:RECP.NO:"!":WHSE
  MATREADU IRW.REC FROM INV_RECP_WHSE_TEMP,IRW.ID ELSE
    MATREADU IRW.REC FROM INV_RECP_WHSE,IRW.ID ELSE   
      MAT IRW.REC=''                                  
    END                                               
  END                                                 
  LOCATE RECP.NO IN IWH.RECP.NO<1> SETTING RPOS THEN  
    IRW.RSVB.QTY=IWH.RSV.FI<1,RPOS>                   
    LOCATE JOB.NUM IN IRW.JOB<1> SETTING JPOS THEN    
      IRW.JRSVD.QTY<1,JPOS>=IJS.FI.QTY<1,RR>          
    END ELSE                                          
      IRW.JOB<1,JPOS>=JOB.NUM                         
      IRW.JRSVD.QTY<1,JPOS>+=IJS.FI.QTY<1,RR>         
    END                                               
    MATWRITEU IRW.REC ON INV_RECP_WHSE_TEMP,IRW.ID 
    LOCATE IRW.ID IN IID.IRW SETTING JUNK ELSE     
      IID.IRW<1,-1>=IRW.ID                         
    END                                            
  END                                              
NEXT RR                                            
RETURN   

*******************
CHECK.SERIAL: 
*******************
*
S.ERR=""
            * do not reset S.ERR within loop.
;* want to get errors on all serials at once.
;* if one serial is erroneous then none will post for
;* PO line.
DEL.ARR=''
FOR SS=1 TO SCNT 
   IF SSTK.QTY<1,S,SS>#'' THEN
      SERIAL=SSTK.SERIAL<1,S,SS>
      ISTK.ID = CONO:SERIAL
      MATREAD ISTK.REC FROM INV_SERIAL,ISTK.ID THEN
         IF ISTK.POST.DATE='' THEN
            IF SSTK.QTY<1,S,SS>=0 THEN
               DEL.ARR<1,-1>=SSTK.SERIAL<1,S,SS>
            END ELSE
               IF ISTK.PO.NO#"" AND ISTK.PO.NO#PO.CODE THEN
                  SSTK.LOC.STATUS<1,S,SS>="Serial belongs to PO ":PO.CODE
                  S.ERR=1
               END ELSE
                  IF ISTK.PO.LINE # SSTK.PO.LINE<1,S> THEN                     
                     SSTK.LOC.STATUS<1,S,SS>="Serial belongs to PO line. ":ISTK.PO.LINE
                     S.ERR=1
                  END ELSE
                     IF SSTK.QTY<1,S,SS>+0#0 AND SSTK.DIAM<1,S,SS>+0=0 THEN
                        IF INV.PAP.TYPE#'SHEET' AND INV.PAP.TYPE#'REGULAR' THEN
                           SSTK.LOC.STATUS<1,S,SS>='Diameter is zero'
                           S.ERR=1
                        END
                     END
                  END
               END
               IF NOT(S.ERR) THEN
                  GOSUB PROCESS.SERIAL
               END
            END
         END
      END
   END
NEXT SS
RETURN
*

****************
DELETE.SERIALS: 
***************
*
DCNT=DCOUNT(DEL.ARR<1>,VM)
FOR DD=1 TO DCNT
   DEL.SERIAL=DEL.ARR<1,DD>
   DELETE INV_SERIAL,CONO:DEL.SERIAL
   LOCATE DEL.SERIAL IN RSMAN.RS.NO<1>,1 SETTING SPTR THEN
      RSMAN.RS.NO = DELETE(RSMAN.RS.NO,1,SPTR,0)                    
      RSMAN.LINE.NO = DELETE(RSMAN.LINE.NO,1,SPTR,0)                  
   END                                                             
   LOCATE DEL.SERIAL IN RSXRF.RS.NO<1>,1 SETTING SPTR THEN
      RSXRF.RS.NO = DELETE(RSXRF.RS.NO,1,SPTR,0)                    
      RSXRF.LN.NO = DELETE(RSXRF.LN.NO,1,SPTR,0)                    
   END                                                             
NEXT DD
SCNT -= DCNT ;*T28090
RETURN
*

*****************
PROCESS.SERIAL: 
*****************
*
INAH.LOC=SSTK.LOC<1,S,SS> 
INAH.QTY = SSTK.QTY<1,S,SS> 
INAH.CUR.QTY = 0
INAH.NEW.QTY = INAH.QTY
INAH.CUR.DIAM=SSTK.DIAM<1,S,SS>
INAH.NEW.DIAM=SSTK.DIAM<1,S,SS>
INAH.CUR.STK.QTY=SSTK.SHEET<1,S,SS>
INAH.NEW.STK.QTY=SSTK.SHEET<1,S,SS>
SERIAL=SSTK.SERIAL<1,S,SS>
ACTION=2 
*T27990 v CALL ICS.IWH.SUB(CONO,PERIOD,SERIAL,SPTR,LAST,ACTION,OPEN.FLAG)
*CALL ICS.IWH.SUB(CONO,PERIOD,SERIAL,SPTR,LAST,ACTION,OPEN.FLAG,ERRMSG)
CALL ICSSRE_ICS_IWH_SUB (CONO,PERIOD,SERIAL,SPTR,LAST,ACTION,OPEN.FLAG,ERRMSG)


IF ERRMSG # '' THEN
   SSTK.LOC.STATUS<1,S,SS>=ERRMSG
   S.ERR = 1
END
*T27990 ^
LOCATE INAH.LOC IN IWH.LOC<1>,1 SETTING LLOC ELSE
   LLOC=DCOUNT(IWH.LOC,VM) + 1
   IWH.LOC<1,LLOC>=INAH.LOC
END
RETURN
*

                                    
***ERROR ROUTINE
91000 
RETURN                        

93000
STATUS = RBO.setProperty('','ServerStatus',0)
STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
RETURN

99999
RETURN



****END OF PROGRAM

