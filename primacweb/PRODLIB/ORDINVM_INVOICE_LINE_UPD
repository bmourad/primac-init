SUBROUTINE ORDINVM_INVOICE_LINE_UPD(ACTION,CONO,BOLNO,ORDNO,MAT IVC.REC,TAXJURS,STATUS)
********************************************************************************
*   Program name :- ORDINVM_INVOICE_LINE_UPD
*   Created:- 3/11/2005
*------------------------------------------------------------------------------*
*

* In Properties:
* --------------
*  
*
* Out Properties:
* ---------------
*  
********************************************************************************
$INCLUDE WWINSERT RBO.H

$INCLUDE OPS.CPYLIB BOL
$INCLUDE ICS.CPYLIB FNGD.BOM
$INCLUDE OPS.CPYLIB ORDER
$INCLUDE OPS.CPYLIB ORDER.DETAIL
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE OPS.CPYLIB ORDER.INVOICE
$INCLUDE PMC.CPYLIB INVOICE.CODE
$INCLUDE PMC.CPYLIB TAX
$INCLUDE PMC.CPYLIB CUSTOMER
$INCLUDE PMC.CPYLIB SHIP.TO
$INCLUDE CPYLIB CHAR

* Insert method code here
   OLD.PROD=""
   OPEN.FLAG=1
*
*---- INITIALIZATION
*
   MAT INC.REC = ""
   GOSUB INIT.VARS

ERRMSG = ""

OPEN "","BOL" TO BOL ELSE ERRMSG = "BOL FILE IS MISSING";GOTO 90000
OPEN "","FNGD.BOM" TO FNGD.BOM ELSE ERRMSG = "FNGD.BOM FILE IS MISSING";GOTO 90000
OPEN "","ORDER" TO ORDER ELSE ERRMSG = "ORDER FILE IS MISSING";GOTO 90000
OPEN "","ORDER.DETAIL" TO ORDER.DETAIL ELSE ERRMSG = "ORDER.DETAIL FILE IS MISSING";GOTO 90000
OPEN "","ORDER.INVOICE" TO ORDER.INVOICE ELSE ERRMSG = "ORDER.INVOICE FILE IS MISSING";GOTO 90000
OPEN "","INVENTORY" TO INVENTORY ELSE ERRMSG = "INVENTORY FILE IS MISSING";	GOTO 90000
OPEN "","INV.WHSE" TO INV.WHSE ELSE ERRMSG = "INV.WHSE FILE IS MISSING";GOTO 90000
OPEN "","INVOICE.CODE" TO INVOICE.CODE ELSE ERRMSG = "INVOICE.CODE FILE IS MISSING";GOTO 90000
OPEN "","TAX" TO TAX ELSE ERRMSG = "TAX FILE IS MISSING";GOTO 90000
OPEN "","CUSTOMER" TO CUSTOMER ELSE ERRMSG = "CUSTOMER FILE IS MISSING";GOTO 90000
OPEN "","SHIP.TO" TO SHIP.TO ELSE 	ERRMSG = "SHIP.TO FILE IS MISSING";GOTO 90000
*
*---- MAIN PROCESSING
*
*ACTION,CONO,BOLNO,ORDNO,MAT IVC.REC,TAXJURS,STATUS

*BOLNO = '0000006'
*CONO = '001'
*ACTION = 'S'
*OPCO.INV.DISPLAY = 'S'
*TAXJURS = 'TX²DAL²CT'
*ORDNO = ''
*STATUS = '0'

   MATREAD BOL.REC FROM BOL, CONO:BOLNO ELSE
      MAT BOL.REC = ""
   END
   IVC.BOL.NO = BOLNO
   IVC.SHIP.TO = BOL.SHIP.TO
   IPTR = DCOUNT(IVC.BOL.NO,VM)
   GOSUB BUILD.TMP.ARR
*
   PCNT=DCOUNT(TMP.PROD,VM)

*RETURN
   FOR P=1 TO PCNT	
      IF TMP.SQTY<1,P> # 0 AND TMP.SQTY<1,P> # "" THEN      ;* T26840
         PROD=TMP.PROD<1,P>
         SID=TMP.SID<1,P>
         DESC=TMP.DESC<1,P>
         TAXJUR=TMP.TAXJUR<1,P>
         ORDER.NO=TMP.ORDER.NO<1,P>
         COST.UNIT=TMP.COST.UNIT<1,P>
         UM=TMP.UM<1,P>
         UNIT.PRICE=TMP.UNIT.PRICE<1,P>
         TAXRATE=TMP.TAXRATE<1,P>
         WHSE=TMP.WHSE<1,P>
         SQTY=TMP.SQTY<1,P>
         COST=TMP.COST<1,P>
         TYPE=TMP.KIT<1,P>
         PROD.SEQ=TMP.PROD.SEQ<1,P>
         BOM.NUMBER=TMP.BOM.NUMBER<1,P>
         GOSUB BUILD.IVC.REC
      END
   NEXT P
   GOSUB INIT.VARS  
   GOSUB ORD.ADD.CHARGE
   GOSUB SHIP.CHARGE
   GOSUB TAX.CHARGE

*
***** S U B R O U T I N E S ***********************************************
**************
BUILD.IVC.REC: 
**************
*
   LOCATE SID IN IVC.SID<1>,1 BY "AL" SETTING IPTR ELSE
      IVC.SID        = INSERT(IVC.SID,1,IPTR,0,SID)
      IVC.CHG.CODE   = INSERT(IVC.CHG.CODE,1,IPTR,0,CCODE)
 *     MY.CHG.CODE<1,-1> = INSERT(IVC.CHG.CODE,1,IPTR,0,CCODE)
      IVC.CHG.CAT    = INSERT(IVC.CHG.CAT,1,IPTR,0,CATEG)
      IVC.QUANTITY   = INSERT(IVC.QUANTITY,1,IPTR,0,"")
      IVC.DESC       = INSERT(IVC.DESC,1,IPTR,0,DESC)
      IVC.TAX.JURS   = INSERT(IVC.TAX.JURS,1,IPTR,0,TAXJUR)
      IVC.AMOUNT     = INSERT(IVC.AMOUNT,1,IPTR,0,0)
      IVC.HIDDEN     = INSERT(IVC.HIDDEN,1,IPTR,0,HIDDEN)
      IVC.CHG.ORDER  = INSERT(IVC.CHG.ORDER,1,IPTR,0,ORDER.NO)
      IVC.TAXABLE    = INSERT(IVC.TAXABLE,1,IPTR,0,"")
      IVC.COST.UNIT  = INSERT(IVC.COST.UNIT,1,IPTR,0,COST.UNIT)
      IVC.UM         = INSERT(IVC.UM,1,IPTR,0,UM)
      IVC.UNIT.PRICE = INSERT(IVC.UNIT.PRICE,1,IPTR,0,UNIT.PRICE)
      IVC.TAX.RATE   = INSERT(IVC.TAX.RATE,1,IPTR,0,TAXRATE)
      IVC.PROD       = INSERT(IVC.PROD,1,IPTR,0,"")
      IVC.WHSE       = INSERT(IVC.WHSE,1,IPTR,0,"")
      IVC.SHP.QTY    = INSERT(IVC.SHP.QTY,1,IPTR,0,"")
      IVC.REF.QTY    = INSERT(IVC.REF.QTY,1,IPTR,0,"")
      IVC.SHP.COST   = INSERT(IVC.SHP.COST,1,IPTR,0,"")
      IVC.KIT        = INSERT(IVC.KIT,1,IPTR,0,"");* T20999
      IVC.PROD.SEQ   = INSERT(IVC.PROD.SEQ,1,IPTR,0,"");* T20999
      IVC.BOM.NUM    = INSERT(IVC.BOM.NUM,1,IPTR,0,"");* T20999
   END
   IF SQTY = "" THEN
      IVC.AMOUNT<1,IPTR> = EXT.AMOUNT
   END ELSE
      IVC.QUANTITY<1,IPTR> = IVC.QUANTITY<1,IPTR> + SQTY
      IF UNIT.PRICE+0 = 0 THEN
         AMT = 0
      END ELSE
         AMT = INT(SQTY / COST.UNIT * (UNIT.PRICE/100) + 0.5)
      END
      IVC.AMOUNT<1,IPTR> = IVC.AMOUNT<1,IPTR> + AMT
      PP = DCOUNT(IVC.PROD<1,IPTR>,SM)+1
      IVC.PROD<1,IPTR,PP> = PROD
      IVC.WHSE<1,IPTR,PP> = WHSE
      IVC.SHP.QTY<1,IPTR,PP> = SQTY
      IVC.REF.QTY<1,IPTR,PP> = SQTY
      IVC.SHP.COST<1,IPTR,PP> = COST
      IVC.KIT<1,IPTR,PP> = TYPE;* T20999
      IVC.PROD.SEQ<1,IPTR,PP> = PROD.SEQ;* T20999
      IVC.BOM.NUM<1,IPTR,PP> = BOM.NUMBER;* T20999
   END

*
**************
BUILD.TMP.ARR: 
**************
*
   OSD.ID=CONO:BOL.ORDER<1,1>:"!":BOL.SHIP.TO
   MATREAD ORD.DET.REC FROM ORDER.DETAIL,OSD.ID THEN
      CCODE = "FNGD"
      CATEG = "OTH"
      PO.NO=OSD.PO
      PCNT = DCOUNT(BOL.PROD,VM)
      FOR P = 1 TO PCNT
         PROD = BOL.PROD<1,P>
         WHSE = BOL.WHSE<1,P>
         TYPE  = BOL.KIT<1,P>
         PROD.SEQ = BOL.SEQ<1,P>
         BOM.NUMBER = BOL.BOM.NUM<1,P>
         BEGIN CASE
            CASE TYPE = "K"
               COST.UNIT='' ; SQTY='' ; COST='' ; UNIT.PRICE='' 
               DESC='' ; ORDER.NO='' ; TAXJUR=''      
               UM='' ; COST.UNIT=''                             
               GOSUB 3000
               UNIT.PRICE = OSD.KIT.PRICE<1,PFND> 
               GOSUB 3200
               GOSUB 3400
               FIRST.COMPONENT=1
            CASE TYPE = "M"
               ;*here we are going to get the rest
               ;*of the kit qty. that is on the 
               ;*components. We will lock the kit qty.
               ;*from the first comp. divided by the ratio
               ;*from the rest of the comp. we will get only
               ;*cost. Both qty and cost will be added into
               ;*preceeding kit. To achive this we will use
               ;*CNT variable set when K-type item was processed.
               SQTY=0
               COST=0
               IF PROD=OLD.PROD THEN FIRST.COMPONENT=1
               IF (FIRST.COMPONENT) THEN
                  FIRST.COMPONENT=0
                  MATREAD BOM.REC FROM FNGD.BOM,CONO:BOM.NUMBER THEN
                     LOCATE PROD IN BOM.PROD<1> SETTING POS THEN
                        RATIO = BOM.Q.RATIO<1,POS>/10000
                        SQTY=SUM(BOL.QTY<1,P>)/RATIO
                        SQTY=INT(((SQTY/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
                        IF TMP.SQTY<1,CNT> = '' THEN
                           TMP.SQTY<1,CNT> = SQTY
                        END ELSE
                           TMP.SQTY<1,CNT>+=SQTY
                        END
                        OLD.PROD=PROD
                     END ELSE
                        ERRMSG="Cannot locate item ":PROD:" in BOM ":BOM.NUMBER
                        GOTO 90000
                     END
                  END ELSE
                     ERRMSG="Bill of material ":BOM.NUMBER:" is missing."
                     GOTO 90000
                  END
               END
               IWH.ID=CONO:PROD:"!":WHSE
               MATREAD IWH.REC FROM INV.WHSE,IWH.ID THEN
                  ERR.FLG='';ERRMSG='';PERIOD='' 
                  CALL BUILD_IWH_FI(IWH.ID,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
                  RCNT = DCOUNT(BOL.RECP.NO<1,P>,SVM)
                  FOR R = 1 TO RCNT
                     LOCATE BOL.RECP.NO<1,P,R> IN IWH.RECP.NO<1>,1 SETTING FPTR THEN
                        COST += INT(IWH.COST.FI<1,FPTR>/100 * (BOL.QTY<1,P,R>/1000)/(INV.COST.WT/100) + .5)
                     END
                  NEXT R
                  TMP.COST<1,CNT>+=COST
               END
            CASE TYPE = "N"
               COST.UNIT='' ; SQTY='' ; COST='' ; UNIT.PRICE=''
               DESC='' ; ORDER.NO='' ; TAXJUR=''
               UM='' ; COST.UNIT=''
               GOSUB 3000
               UNIT.PRICE = OSD.PRICE<1,PFND>
               GOSUB 3200
               GOSUB 3400
         END CASE
      NEXT P
   END ELSE
      ERRMSG = "CANNOT LOCATE ORDER.DETAIL - ":OSD.ID
      GOTO 90000 
   END

   RETURN
*
********
3000: 
********
*
   DPTR = 1
   LOOP
      LOCATE PROD IN OSD.PROD<1>,DPTR SETTING PFND THEN
         IF (OSD.WHSE<1,PFND> = WHSE) AND (OSD.KIT<1,PFND> = TYPE) AND (OSD.PROD.SEQ<1,PFND> = PROD.SEQ) THEN
            DPTR= 0
         END
      END ELSE
         PFND=0; DPTR=0
      END
   UNTIL DPTR = 0 DO
      DPTR=PFND+1
   REPEAT
   IF (PFND) THEN
      MATREAD INV.REC FROM INVENTORY, CONO:PROD THEN
         IWH.ID=CONO:PROD:"!":WHSE
         MATREAD IWH.REC FROM INV.WHSE,IWH.ID THEN
            ERR.FLG='';ERRMSG='';PERIOD=''                                   
            CALL BUILD_IWH_FI(IWH.ID,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
**** copied the method ICSBP>INV.UM.CNV

* COST TO STOCK = INT(((COST.QTY/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
* STOCK TO COST = INT(((STOCK.QTY/ICR.MT1)*ICR.DV1)*ICR.DV2+.5)
*
MAT INV.CNV.REC = ""
BEGIN CASE
  CASE INV.UNIT<1,2> = "SHT" AND INV.UNIT<1,3> = "LBS"
    ICR.CNV = "MD0"; ICR.CNV1 = "MD0,"
    ICR.DV1 = INV.M.WT; ICR.MT1 = 1; ICR.DV2 = 1
    ICR.TYPE = 3; ICR.SCAL = 0
  CASE INV.UNIT<1,2> = "PC" AND INV.UNIT<1,3> = "MSI"
    ICR.CNV = "MD0"; ICR.CNV1 = "MD0,"
    ICR.DV1 = INV.PAP.WIDTH/100; ICR.MT1 = 10; ICR.DV2 = 1
    ICR.TYPE = 3; ICR.SCAL = 0
  CASE INV.UNIT<1,2> = "FT" AND INV.UNIT<1,3> = "MSI"
    ICR.CNV = "MD0"; ICR.CNV1 = "MD0,"
    ICR.DV1 = INV.PAP.WIDTH/100; ICR.MT1 = 100; ICR.DV2 = 12
    ICR.TYPE = 3; ICR.SCAL = 0
  CASE INV.M.LINE = "FNGD"
    ICR.CNV = "MD0"; ICR.CNV1 = "MD0,"
    ICR.DV1 = 1; ICR.MT1 = 1; ICR.DV2 = 1000
    ICR.TYPE = 3; ICR.SCAL = 0
  CASE 1
    ICR.CNV = "MD2"; ICR.CNV1 = "MD2,"
    ICR.DV1 = 10; ICR.MT1 = 1; ICR.DV2 = 1
    ICR.TYPE = 4; ICR.SCAL = 2
END CASE
*
IF INV.COST.WT + 0 = 0 THEN INV.COST.WT = 100 
*****
            ORDER.NO=BOL.ORDER<1,P>
            DESC = INV.DESC
            TAXJUR = IWH.SALES.CODE
            UM         = INV.UNIT<1,5>
            COST.UNIT  = INT(INV.COST.WT/100+.5)
            IF COST.UNIT+0 = 0 THEN COST.UNIT = 1
         END ELSE
            ERRMSG = "CANNOT LOCATE INV.WHSE RECORD - ":PROD:"!":WHSE
            GOTO 90000
         END
      END ELSE
         ERRMSG = "CANNOT LOCATE INVENTORY RECORD - ":PROD
         GOTO 90000
      END
   END ELSE
      ERRMSG = "CANNOT LOCATE PRODUCT ON ORDER.DETAIL - ":PROD:"!":WHSE
      GOTO 90000
   END
   RETURN
*
***********
3200: 
***********
*
   IF ACTION = "S" AND INV.BASE.SKU # "" THEN
      BPROD = INV.BASE.SKU
   END ELSE
      BPROD = PROD
   END
   SID = ORDER.NO:"!":BPROD:"!":UNIT.PRICE:"!":PROD.SEQ
   IF BPROD # PROD THEN
      MATREAD INV.REC FROM INVENTORY, CONO:BPROD THEN
         DESC = INV.DESC
      END
   END
   RETURN
*
***********
3400: 
***********
*
   RCNT = DCOUNT(BOL.RECP.NO<1,P>,SVM)
   IF RCNT>0 THEN
      FOR R = 1 TO RCNT
         LOCATE BOL.RECP.NO<1,P,R> IN IWH.RECP.NO<1>,1 SETTING FPTR THEN
            COST.UNIT  = INT(INV.COST.WT/100+.5)
            IF COST.UNIT+0 = 0 THEN COST.UNIT = 1
            SQTY = INT(((BOL.QTY<1,P,R>/ICR.DV1) * ICR.MT1) / ICR.DV2 + .5)
            COST = INT(IWH.COST.FI<1,FPTR>/100 * (BOL.QTY<1,P,R>/1000)/(INV.COST.WT/100) + .5)
            CNT=DCOUNT(TMP.PROD,VM)+1
            GOSUB SET.TMP.VALUES
         END
      NEXT R
   END ELSE
      ;*this is if there is no qty available
      ;*on the kit itself. All qty is on the
      ;*components. We still need to create 
      ;*the line with a kit and keep that spot.
      CNT=DCOUNT(TMP.PROD,VM)+1
      GOSUB SET.TMP.VALUES
   END
   RETURN
*
***************
SET.TMP.VALUES: 
***************
*
   TMP.PROD<1,CNT>=PROD
   TMP.SID<1,CNT>=SID
   TMP.DESC<1,CNT>=DESC
   TMP.TAXJUR<1,CNT>=TAXJUR
   TMP.ORDER.NO<1,CNT>=ORDER.NO
   TMP.COST.UNIT<1,CNT>=COST.UNIT
   TMP.UM<1,CNT>=UM
   TMP.UNIT.PRICE<1,CNT>=UNIT.PRICE
   TMP.TAXRATE<1,CNT>=TAXRATE
   TMP.WHSE<1,CNT>=WHSE
   TMP.SQTY<1,CNT>=SQTY
   TMP.COST<1,CNT>=COST
   TMP.KIT<1,CNT>=TYPE
   TMP.PROD.SEQ<1,CNT>=PROD.SEQ
   TMP.BOM.NUMBER<1,CNT>=BOM.NUMBER
   RETURN
*
***************
ORD.ADD.CHARGE: 
***************
*
   OCNT=DCOUNT(BOL.ORDER,VM)
   TYPE = ""; PROD.SEQ = ""
   FOR OPTR = 1 TO OCNT
      ORDER.NO = BOL.ORDER<1,OPTR>
      MATREAD ORD.REC FROM ORDER,CONO:ORDER.NO ELSE MAT ORD.REC=""
      LCNT = DCOUNT(ORD.AC.CHG.CD,VM)
      LPCNT = 0
      FOR LPTR = 1 TO LCNT
         LPCNT +=1
         IF ORD.AC.INV<1,LPTR> # "Y" THEN
            SID = "XXX":"!":ORDER.NO:"!":((1000+LPCNT)[2,3]):"!":LPTR'R%3'
            CCODE = ORD.AC.CHG.CD<1,LPTR>
            CATEG = ORD.AC.CHG.CAT<1,LPTR>
            HIDDEN = ORD.AC.HIDDEN<1,LPTR>
            EXT.AMOUNT = ORD.AC.AMOUNT<1,LPTR>
            TAXJUR = ORD.AC.SLC<1,LPTR>
            DESC = ORD.AC.DESC<1,LPTR>
*	            IF LEN(DESC) > 34 THEN
*	               CALL DESC.REFORMAT.2(DESC,34,NEW.DESC)
*	               DESC.CNT = DCOUNT(NEW.DESC,VM)
*	               DESC = NEW.DESC<1,1>
*	               GOSUB BUILD.IVC.REC
*	               CCODE = "CMT"
*	               CATEG = ""
*	               HIDDEN = ORD.AC.HIDDEN<1,LPTR>
*	               EXT.AMOUNT = ""
*	               TAXJUR = ""
*	               FOR LL = 2 TO DESC.CNT
*	                  LPCNT +=1
*	                  SID = "XXX":"!":ORDER.NO:"!":((1000+LPCNT)[2,3]):"!":LPTR'R%3'
*	                  DESC = NEW.DESC<1,LL>
*	                  GOSUB BUILD.IVC.REC
*	               NEXT LL
*	            END ELSE
*	               GOSUB BUILD.IVC.REC
*	            END
			GOSUB BUILD.IVC.REC
	         END
      NEXT LPTR
   NEXT OPTR
   RETURN
*
**************
SHIP.CHARGE: 
**************
*
   IF SUM(SUM(BOL.SHP.AMT)) > 0 THEN
      CCODE = "SHP"
      MATREAD INC.REC FROM INVOICE.CODE,CONO:CCODE ELSE
         MAT INC.REC = ""
         INC.CATEGORY = "SHP"
         INC.DESC = "SHIPPING CHARGE"
      END
      SID = "ZZZ888"
      CATEG = INC.CATEGORY
      DESC = INC.DESC
      EXT.AMOUNT = SUM(SUM(BOL.SHP.AMT))
      TAXJUR = BOL.SHIP.VIA
      GOSUB BUILD.IVC.REC
   END
   RETURN
*
**************
TAX.CHARGE: 
**************
*
   IF TAXJURS # "" THEN
      EXT.AMOUNT = ""        ;* T26895
      CCODE = "TAX"
      MATREAD INC.REC FROM INVOICE.CODE,CONO:CCODE ELSE
         MAT INC.REC = ""
         INC.CATEGORY = "TAX"
         INC.DESC = "SALES TAX"
      END
      TCNT = DCOUNT(TAXJURS,VM)
      FOR TPTR = TCNT TO 1 STEP -1
         TJUR = TAXJURS<1,TPTR>
         MATREAD TAX.REC FROM TAX,CONO:TJUR ELSE MAT TAX.REC = ""
         SID = "ZZZ":(900+TPTR)
         CATEG = INC.CATEGORY
         DESC = TAX.JUR
         TAXJUR = TJUR
         TAXRATE = TAX.RATE
         BEGIN CASE
            CASE IVC.TAX.EXEMPT = "Y"
               HIDDEN = "Y"
            CASE TCNT > 1 AND TPTR > 1
               HIDDEN = "Y"
         END CASE
         GOSUB BUILD.IVC.REC
      NEXT TPTR
   END
   RETURN
*
**************
INIT.VARS: 
**************
*
   CCODE = ""
   CATEG = ""
   TMP.PROD=""
   TMP.SID='' ; TMP.PROD='' ; TMP.DESC=''
   TMP.TAXJUR='' ; TMP.ORDER.NO=''
   TMP.COST.UNIT=''; TMP.UM='' ; TMP.UNIT.PRICE=''
   TMP.TAXRATE='' ; TMP.WHSE=''
   TMP.SQTY='' ; TMP.COST='' ; TMP.KIT=''
   TMP.PROD.SEQ='' ; TMP.BOM.NUMBER=''
   SQTY=''
   UM=''
   DESC=''
   COST.UNIT=''
   UNIT.PRICE=''
   EXT.AMOUNT=''
   HIDDEN = "N"
   TAXJUR=''
   TAXRATE=''
   COST=''
   RETURN
*
*---- ERROR ROUTINE
*
90000 *
STATUS = RBO.setProperty('','ServerStatus',1)
STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
RETURN
*

