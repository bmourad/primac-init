*********************************************************************
* REVISION    - [12.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - APSBP
* PROGRAM     - APD.EOM.POST
* BY          - ZIAD YAMOUT, C.B.A
* DATE        - 02/28/87
* DESCRIPTION -
*             Create the APD.EOM.TRANS datas.
*MODIFIED	- (01/30/06) BY ZAHOOR AHMED
*		   FOR printflag and EOD.ERROR flag
*ENDDOC
*********************************************************************
*
***** INSERT FILE EQUATE
*
$INCLUDE WWINSERT RBO.H
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE PMC.CPYLIB GLTABLE
$INCLUDE PMC.CPYLIB SALESDATES
$INCLUDE PMC.CPYLIB FISCAL
$INCLUDE PMC.CPYLIB EOM.TRANS
$INCLUDE PMC.CPYLIB COA
$INCLUDE APS.CPYLIB MCD
$INCLUDE PMC.CPYLIB POST.REJECTS
$INCLUDE PMC.CPYLIB DIVISION ;* T23278
$INCLUDE CPYLIB CHAR
*
**** INTITIALIZATION
*
***** SETUP ERRMSG ROUTINE
*
ERRMSG=''
MAT FISCAL.REC = ''
Printfalg = ''
EMAIL_ADDR = ''
*
*Printfalg is view/mail/print/file
*
STATUS = RBO.getProperty('','ID',ID)
STATUS = RBO.getProperty('','PMCProperty',PMCProperty)
STATUS = RBO.getProperty('','PRINT_FLAG',PRINT.FLAG)
STATUS = RBO.getProperty('','EmailAddress',EMAIL_ADDR)
CONO = ID[1,3]
MODULE=ID[4,3]
*
*Get the printflag view/Email/File/Print
*
BEGIN CASE
   CASE PRINT.FLAG = 'PrintData'
	Printfalg = 'View'
   CASE PRINT.FLAG = 'EmailData'
	Printfalg = 'Email'
   CASE PRINT.FLAG = 'File'
	Printfalg = 'Print'
   CASE 1
	Printfalg = 'Print'
END CASE
*
BEGIN CASE
   CASE MODULE[1,2] = 'AP'
   CASE MODULE[1,2] = 'AR'
   CASE 1
      MODULE = MODULE[1,2]
END CASE
FISCPFX=MODULE
STATUS = RBO.getProperty('','DivCode',DIV.CODE)
STATUS = RBO.getProperty('','DivPos',POS)
STATUS = RBO.getProperty('','FR_CURR_PER',FR.CURR.PER)
STATUS = RBO.getProperty('','FR_CURR_DATE',FR.CURR.DATE)
STATUS = RBO.getProperty('','FR_NEXT_PER',FR.NEXT.PER)
STATUS = RBO.getProperty('','FR_NEXT_DATE',FR.NEXT.DATE)
STATUS = RBO.getProperty('','DM_Flag',D.M.FLG)
STATUS = RBO.getProperty('','FR_CLOSE_DATE',FR.CLOSE.DATE)
FOR P = 1 TO DCOUNT(FR.CURR.PER,VM)
   IF INDEX(FR.CURR.DATE<1,P>,'/',1) > 0 THEN FR.CURR.DATE<1,P> = ICONV(FR.CURR.DATE<1,P>,'D2/')
   IF INDEX(FR.NEXT.DATE<1,P>,'/',1) > 0 THEN FR.NEXT.DATE<1,P> = ICONV(FR.NEXT.DATE<1,P>,'D2/')
   IF INDEX(FR.CLOSE.DATE<1,P>,'/',1) > 0 THEN FR.CLOSE.DATE<1,P> = ICONV(FR.CLOSE.DATE<1,P>,'D2/')
NEXT P
*
STATUS = RBO.getProperty('','FngdFlag',FNGD.FLAG)
BEGIN CASE
   CASE MODULE = 'IC'
      IF FNGD.FLAG = 'F' THEN
         MODULE := 'F'
      END ELSE MODULE := 'S'
   CASE MODULE[1,2] = 'AP'
   CASE MODULE[1,2] = 'AR'
   CASE 1
      MODULE := 'S'
END CASE
*
TRANFILE=MODULE:".EOM.TRANS":CONO:DIV.CODE
REJECTFILE=MODULE:".POST.REJECTS":CONO:DIV.CODE
OPEN TRANFILE TO EOM.TRANS ELSE
   STMT='CREATE.FILE ':TRANFILE:' 1,1 101,1'
   UDTEXECUTE STMT CAPTURING JUNK
   STMT='COPY FROM DICT ':MODULE:'.EOM.TRANS TO DICT ':TRANFILE:' ALL'
   UDTEXECUTE STMT CAPTURING JUNK
END
OPEN REJECTFILE TO POST.REJECTS ELSE
   STMT='CREATE.FILE ':REJECTFILE:' 1,1 7,1'
   UDTEXECUTE STMT CAPTURING JUNK
   STMT='COPY FROM DICT ':MODULE:'.POST.REJECTS TO DICT ':REJECTFILE:' ALL'
   UDTEXECUTE STMT CAPTURING JUNK
END
***** OPEN FILES
*
OPEN '','COMPANY' TO COMPANY ELSE ERRMSG='COMPANY FILE MISSING';GOTO 93000
OPEN '','CONTROL' TO CONTROL ELSE ERRMSG='CONTROL FILE MISSING';GOTO 93000
OPEN '','MCD' TO MCD ELSE ERRMSG='MCD FILE IS MISSING';GOTO 93000
OPEN '','COA' TO COA ELSE ERRMSG='COA FILE IS MISSING';GOTO 93000
OPEN '',TRANFILE TO EOM.TRANS ELSE ERRMSG=TRANFILE:' FILE MISSING';GOTO 93000
OPEN '',REJECTFILE TO POST.REJECTS ELSE ERRMSG=REJECTFILE:' FILE IS MISSING';GOTO 93000
*
MATREAD COMP.REC FROM COMPANY, CONO ELSE
   ERRMSG = "COMPANY RECORD IS MISSING"
   GOTO 93000
END
MATREAD GLTABLE.REC FROM CONTROL, CONO:'GLTABLE' ELSE
   RELEASE CONTROL, CONO:MODULE:"FISCAL"
   ERRMSG = 'CANNOT LOCATE CONTROL, GLTABLE'
   GOTO 93000
END
IN.ACCT.LEN=LEN(CO.ACCT.PIC)
CLEARFILE EOM.TRANS
CLEARFILE POST.REJECTS
PRR.SEQ = 10000
OLD.TYPE = "!@#$%^&*"
OLD.VEND = "!@#$%^&*"
GEN.DIV='00'; GEN.DEPT='00'; GEN.CCTR='000'
MATREAD COA.REC FROM COA, CONO : GLTB.CASH ELSE COA.LEVEL = 0
CD.CSH.ACCT = GLTB.CASH
CD.CSH.LEVEL = COA.LEVEL
MATREAD COA.REC FROM COA, CONO : GLTB.AP ELSE COA.LEVEL = 0
CD.VCH.ACCT = GLTB.AP
CD.VCH.LEVEL = COA.LEVEL
MATREAD COA.REC FROM COA, CONO : GLTB.PUR.DISC ELSE COA.LEVEL = 0
CD.DSC.ACCT = GLTB.PUR.DISC
CD.DSC.LEVEL = COA.LEVEL
STMT = 'SSELECT MCD.TAG BY TYPE BY VEND WITH CONO = "':CONO:'"'
UDTEXECUTE STMT CAPTURING JUNK
DATA = 1
LOOP
   READNEXT MCD.ID ELSE DATA = 0
WHILE DATA DO
   IF CONO # MCD.ID[1,3] THEN GOTO 999
   MATREADU MCD.REC FROM MCD, MCD.ID ELSE
      MAT PRR.REC = ''
      PRR.FILE = 'MCD'
      PRR.ERR = 'CANNOT LOCATE'
      MCD.CHECK = MCD.ID[LEN(MCD.ID)-5,6]
      PRR.ID = MCD.CHECK
      PRR.SEQ = PRR.SEQ + 1
      MATWRITE PRR.REC ON POST.REJECTS, PRR.SEQ
      RELEASE MCD, MCD.ID
      GOTO 999
   END
   IF MCD.MON <> FR.CURR.PER<1,POS> THEN;* T23278
      RELEASE MCD, MCD.ID
      GOTO 999
   END
   IF MCD.GLA.DATE # "" AND MCD.GLA.DATE # "P" THEN
      RELEASE MCD, MCD.ID
      GOTO 999
   END
   IF MCD.DIV<1,1,1> # DIV.CODE AND DIV.CODE # "ALL" THEN
      RELEASE MCD, MCD.ID
      GOTO 999
   END
   MCD.TYPE = MCD.ID[4,1]
   BEGIN CASE
      CASE OLD.TYPE # MCD.TYPE
         OLD.TYPE = MCD.TYPE
         OLD.VEND = MCD.VEND
         NEW.REC = 0; NEW.PTR = 0
      CASE OLD.VEND # MCD.VEND
         OLD.VEND = MCD.VEND
         NEW.REC = 0; NEW.PTR = 0
   END CASE
   VCNT = COUNT(MCD.VEND,VM) + (MCD.VEND # "")
   CNT = COUNT(MCD.VOUCH,VM) + (MCD.VOUCH # "")
   FOR I = 1 TO CNT
      SCNT = COUNT(MCD.VOUCH.GRS<1,I>,SVM) + (MCD.VOUCH.GRS<1,I> # "")
      FOR II = 1 TO SCNT
         BEGIN CASE
            CASE MCD.DIV<1,I,II> = ""
               CASH.DIV = GEN.DIV
               CASH.DEPT = GEN.DEPT
               CASH.CCTR = GEN.CCTR
            CASE MCD.DEPT<1,I,II> = ""
               CASH.DIV = MCD.DIV<1,I,II>
               CASH.DEPT = GEN.DEPT
               CASH.CCTR = GEN.CCTR
            CASE MCD.CCTR<1,I,II> = ""
               CASH.DIV = MCD.DIV<1,I,II>
               CASH.DEPT = MCD.DEPT<1,I,II>
               CASH.CCTR = GEN.CCTR
            CASE 1
               CASH.DIV = MCD.DIV<1,I,II>
               CASH.DEPT = MCD.DEPT<1,I,II>
               CASH.CCTR = MCD.CCTR<1,I,II>
         END CASE
         IF MCD.VOUCH.DSC<1,I,II> + 0 <> 0 THEN
            CASH.AMT = MCD.VOUCH.DSC<1,I,II>
            BEGIN CASE
               CASE CD.DSC.LEVEL = 0
                  T.ACCT = GEN.DIV : GEN.DEPT : GEN.CCTR : CD.DSC.ACCT
               CASE 1
                  T.ACCT = CASH.DIV : GEN.DEPT : GEN.CCTR : CD.DSC.ACCT
            END CASE
            GOSUB 2000
         END
         BEGIN CASE
            CASE MCD.BANK.ACCT = CD.CSH.ACCT
            CASE MCD.BANK.ACCT # ""
               MCD.BANK.ACCT = MCD.BANK.ACCT : STR("0",IN.ACCT.LEN-LEN(MCD.BANK.ACCT))
               MCD.BANK.ACCT = MCD.BANK.ACCT[1,IN.ACCT.LEN]
               MATREAD COA.REC FROM COA, CONO : MCD.BANK.ACCT ELSE COA.LEVEL = 0
               CD.CSH.ACCT = MCD.BANK.ACCT
               CD.CSH.LEVEL = COA.LEVEL
            CASE GLTB.CASH = CD.CSH.ACCT
            CASE 1
               MATREAD COA.REC FROM COA, CONO : GLTB.CASH ELSE COA.LEVEL = 0
               CD.CSH.ACCT = GLTB.CASH
               CD.CSH.LEVEL = COA.LEVEL
         END CASE
         CASH.AMT = MCD.VOUCH.NET<1,I,II>
         BEGIN CASE
            CASE CD.CSH.LEVEL = 0
               T.ACCT = GEN.DIV : GEN.DEPT : GEN.CCTR : CD.CSH.ACCT
            CASE CD.CSH.LEVEL = 1 AND CD.CSH.ACCT # GLTB.CASH
               T.ACCT = CASH.DIV : GEN.DEPT : GEN.CCTR : CD.CSH.ACCT
            CASE CD.CSH.LEVEL = 2 AND CD.CSH.ACCT # GLTB.CASH
               T.ACCT = CASH.DIV : CASH.DEPT : GEN.CCTR : CD.CSH.ACCT
            CASE CD.CSH.LEVEL = 3 AND CD.CSH.ACCT # GLTB.CASH
               T.ACCT = CASH.DIV : CASH.DEPT : CASH.CCTR : CD.CSH.ACCT
            CASE 1
               T.ACCT = CASH.DIV : GEN.DEPT : GEN.CCTR : CD.CSH.ACCT
         END CASE
         GOSUB 2000
         IF NEW.PTR THEN
            NEW.REC = NEW.REC + 1
            NEW.PTR = 0
         END
      NEXT II
   NEXT I
   MCD.GLA.DATE = "P"
   MATWRITE MCD.REC ON MCD, MCD.ID
999 REPEAT
READ JUNK FROM POST.REJECTS,'10001' THEN
   UserID = PMCProperty<1,3>
*   IN_PARAM = UserID:"!APDEOMP!111!AP300!":CONO:"!Print"
   IN_PARAM = UserID:"!APDEOMP!111!AR300!":CONO:"!":Printfalg
   IN_PARAM<2> = ''
   IN_PARAM<3> = 'EOD.REJECT.LISTING'
   IN_PARAM<4> = 'P'
   IN_PARAM<5> = 'PMCPROCS'
   IN_PARAM<6> = REJECTFILE
   IN_PARAM<7> = 'REJECTS'
   IN_PARAM<8> = EMAIL_ADDR ;*Email Address as Entered by the user
   OUT_PARAM=''
   UDTEXECUTE 'SSELECT ':REJECTFILE CAPTURING JUNK
   CALL GenerateReport_Sub(ERRMSG,IN_PARAM,OUT_PARAM)
   IF ERRMSG # "" THEN GOTO 93000
   REJECT.RPT.PRT='WARNING !!! MAKE SURE TO PICKUP POSTING REJECTS REPORT FROM PRINTER'
   STATUS=RBO.setProperty('','RejectRptPrinted',REJECT.RPT.PRT)
   STATUS=RBO.setProperty('','ReportImage',OUT_PARAM<2>)	
END ELSE
	IF Printfalg # "Print" THEN ERRMSG  = "There is no data to ":Printfalg 
	*GOTO 93000
END
STATUS = RBO.setProperty('','FR_CURR_DATE',FR.CURR.DATE)
STATUS = RBO.setProperty('','FR_NEXT_DATE',FR.NEXT.DATE)
STATUS = RBO.setProperty('','FR_CLOSE_DATE',FR.CLOSE.DATE)
FR.PRINT<1,POS> = ""
MATWRITE FISCAL.REC ON CONTROL, CONO:FISCPFX:'FISCAL'
GOTO 99999
2000*
ETR.ID = CONO : T.ACCT : OLD.TYPE :"!": MCD.VEND<1,1>
BEGIN CASE
   CASE CASH.AMT > 0
      ETR.ID = ETR.ID : "!C*"
   CASE CASH.AMT + 0 < 0
      ETR.ID = ETR.ID : "!D*"
   CASE 1
      GOTO 2999
END CASE
IF VCNT > 1 THEN
   NEW.REC = 0
   FND = 0
   LOOP
      MATREAD ETR.REC FROM EOM.TRANS, ETR.ID : NEW.REC ELSE
         MAT ETR.REC = ""
         ETR.RDATE = MCD.VEND<1,2>
      END
      IF ETR.RDATE # MCD.VEND<1,2> THEN
         NEW.REC = NEW.REC + 1
      END ELSE
         ETR.ID = ETR.ID : NEW.REC
         FND = 1
      END
   UNTIL FND DO REPEAT
END ELSE
   ETR.ID = ETR.ID : NEW.REC
   MATREAD ETR.REC FROM EOM.TRANS, ETR.ID ELSE
      MAT ETR.REC = ""
   END
END
ETR.AMT = ETR.AMT - CASH.AMT
LOCATE MCD.CHECK IN ETR.TRAN<1>,1 BY "AR" SETTING PTR ELSE NULL
INS MCD.CHECK BEFORE ETR.TRAN<1,PTR>
INS MCD.CHK.DATE BEFORE ETR.DATE<1,PTR>
INS (0 - CASH.AMT) BEFORE ETR.TAMT<1,PTR>
INS MCD.VOUCH<1,I> BEFORE ETR.REF<1,PTR>
IF PTR > 99 THEN NEW.PTR = 1
MATWRITE ETR.REC ON EOM.TRANS, ETR.ID
2999 RETURN
93000 *
STATUS=RBO.setProperty('','ServerStatus',1)
STATUS=RBO.setProperty('','ServerMessage',ERRMSG)
CMD='DELETE.FILE ': TRANFILE :' FORCE'
UDTEXECUTE CMD CAPTURING JUNK
CMD='DELETE.FILE ': REJECTFILE :' FORCE'
UDTEXECUTE CMD CAPTURING JUNK
*** END OF JOB ***
99999 END
