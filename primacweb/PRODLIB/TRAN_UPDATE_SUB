SUBROUTINE TRAN_UPDATE_SUB(CONO,D.TRAN.CODE,MAT TRAN.REC,PROCESS.FLAG,CO.ICS.LOC.TRAN,NEW.ERRMSG,MAT D.TRAN.REC)
********************************************************************************
*   Program name :- TRAN_UPDATE_SUB
*   Created:- 6/1/2005
*   By	:- Suhail Hussain
*   THIS SUBROUTINE HAS BEEN RENAMED FROM TRAN.UPDATE TO TRAN_UPDATE_SUB AND THE PARAMETERS HAVE BEEN CHANGED
********************************************************************************
$INCLUDE CPYLIB COMMON1
$INCLUDE ICS.CPYLIB COM.INV.MAIN
$INCLUDE ICS.CPYLIB COM.INV.SERIAL
$INCLUDE ICS.CPYLIB COM.INV.LINK

$INCLUDE WWINSERT RBO.H

$INCLUDE ICS.CPYLIB TRANSFER

$DEFINE DAILYTRANSFER
$INCLUDE ICS.CPYLIB DAILY_TRANSFER

$DEFINE INVENTORY
$INCLUDE ICS.CPYLIB INVENTORY

$DEFINE JOBSTATS
$INCLUDE JCS.CPYLIB JOB.STATS

$DEFINE CATEGORY
$INCLUDE ICS.CPYLIB CATEGORY

$DEFINE INVAUDITHIST
$INCLUDE ICS.CPYLIB INV_AUDIT_HIST

$DEFINE INVWHSE
$INCLUDE ICS.CPYLIB INV.WHSE

$DEFINE INVSERIAL
$INCLUDE ICS.CPYLIB INV_SERIAL

$DEFINE INVRECPWHSE
$INCLUDE ICS.CPYLIB INV_RECP_WHSE

$DEFINE INVRECEIPTS
$INCLUDE ICS.CPYLIB INV_RECEIPTS

$INCLUDE ICS.CPYLIB WAREHOUSE
*$INCLUDE CPYLIB TCC

$DEFINE INVCNV
$INCLUDE ICS.CPYLIB INV.CNV

$DEFINE FILEVARS
$INCLUDE CPYLIB FILE.VARS

$DEFINE ICSID
$INCLUDE ICS.CPYLIB ICS.ID

$INCLUDE ICS.CPYLIB TO.TRANSFER
$INCLUDE CPYLIB CHAR
$INCLUDE PMC.CPYLIB FISCAL


*                                                           
   DEFFUN DIVISION_POSITION(CONO,CONTROL.FILE,DIV.CODE)        
   DEFFUN CURRENT_PERIOD(CONO,CONTROL.FILE,DIV.POS,FISCAL.FLAG)
*                                                           

OPEN '','CONTROL' TO CONTROL ELSE
  ERRMSG = 'CANNOT LOCATE CONTROL FILE'
  GOTO 93000
END
OPEN '','CATEGORY' TO CATEGORY ELSE
  ERRMSG = 'CANNOT LOCATE CATEGORY FILE'
  GOTO 93000
END
OPEN '','COMPANY' TO COMPANY ELSE
  ERRMSG = 'CANNOT LOCATE COMPANY FILE'
  GOTO 93000
END
OPEN '','JOB.STATS' TO JOB.STATS ELSE
  ERRMSG = 'CANNOT LOCATE JOB.STATS FILE'
  GOTO 93000
END
OPEN '','INVENTORY' TO INVENTORY ELSE
  ERRMSG = 'CANNOT LOCATE INVENTORY FILE'
  GOTO 93000
END
OPEN '','SECURITY' TO SECURITY ELSE
  ERRMSG = 'CANNOT LOCATE SECURITY FILE'
  GOTO 93000
END
OPEN '','INV.WHSE' TO INV.WHSE ELSE
  ERRMSG = 'CANNOT LOCATE INV.WHSE FILE'
  GOTO 93000
END
OPEN '','INV_SERIAL' TO INV_SERIAL ELSE
  ERRMSG = 'CANNOT LOCATE INV_SERIAL FILE'
  GOTO 93000
END
OPEN '','INV_SERIAL_TEMP' TO INV_SERIAL_TEMP ELSE
  ERRMSG = 'CANNOT LOCATE INV_SERIAL_TEMP FILE'
  GOTO 93000
END
OPEN '','INV_AUDIT_HIST' TO INV_AUDIT_HIST ELSE
  ERRMSG = 'CANNOT LOCATE INV_AUDIT_HIST FILE'
  GOTO 93000
END
OPEN '','INV_AUDIT_HIST_TEMP' TO INV_AUDIT_HIST_TEMP ELSE
  ERRMSG = 'CANNOT LOCATE INV_AUDIT_HIST_TEMP FILE'
  GOTO 93000
END
OPEN '','INV_AUDIT_TAG' TO INV_AUDIT_TAG ELSE
  ERRMSG = 'CANNOT LOCATE INV_AUDIT_TAG FILE'
  GOTO 93000
END
OPEN '','INV_RECEIPTS' TO INV_RECEIPTS ELSE
  ERRMSG = 'CANNOT LOCATE INV_RECEIPTS FILE'
  GOTO 93000
END
OPEN '','INV_RECEIPTS_TEMP' TO INV_RECEIPTS_TEMP ELSE
  ERRMSG = 'CANNOT LOCATE INV_RECEIPTS_TEMP FILE'
  GOTO 93000
END
OPEN '','INV_RECP_WHSE' TO INV_RECP_WHSE ELSE
  ERRMSG = 'CANNOT LOCATE INV_RECP_WHSE FILE'
  GOTO 93000
END
OPEN '','INV_RECP_WHSE_TEMP' TO INV_RECP_WHSE_TEMP ELSE
  ERRMSG = 'CANNOT LOCATE INV_RECP_WHSE_TEMP FILE'
  GOTO 93000
END
OPEN '','TRANSFER' TO TRANSFER ELSE
  ERRMSG = 'CANNOT LOCATE TRANSFER FILE'
  GOTO 93000
END
OPEN '','DAILY_TRANSFER' TO DAILY_TRANSFER ELSE
  ERRMSG = 'CANNOT LOCATE DAILY_TRANSFER FILE'
  GOTO 93000
END
OPEN '','WAREHOUSE' TO WAREHOUSE ELSE
  ERRMSG = 'CANNOT LOCATE WAREHOUSE FILE'
  GOTO 93000
END
*
OPEN '','INV.WHSE.LOC' TO INV.WHSE.LOC ELSE
  ERRMSG='CANNOT LOCATE INV.WHSE.LOC FILE'
  GOTO 93000
END
OPEN '','INV.WHSE.LOC.TEMP' TO INV.WHSE.LOC.TEMP ELSE
  ERRMSG='CANNOT LOC.TEMPATE INV.WHSE.LOC.TEMP FILE'
  GOTO 93000
END


*D.TRAN.CODE = TRANS.ID;*added
MAT ORG.IWH.REC=''
SAVE.IWH.RECP.NO = ''
SAVE.IWH.RECP.PER = ''
SAVE.IWH.RECP.DATE = ''
GEN.DIV = '00'


   TODAY=DATE()
   OPEN.FLAG=1
 
   MAT IID.REC=''
   MAT INAH.REC=''
   INAH.TRAN=D.TRAN.CODE
*

MAT D.TRAN.REC = MAT TRAN.REC
   IF PROCESS.FLAG[1,4] = 'TRAN' THEN
      GOSUB PROCESS.TRANSFER
      GOTO 99999
   END
 
   IF D.TRAN.PROD.NO # '' THEN
      IF D.TRAN.CODE="N" THEN
         GOSUB GET.DTN
         D.TRAN.CODE=DTN
      END ELSE
         DTN=D.TRAN.CODE
      END
      MATWRITE D.TRAN.REC ON DAILY_TRANSFER , CONO:DTN
   END ELSE
      IF D.TRAN.CODE # "N" THEN
         DELETE DAILY_TRANSFER, CONO:D.TRAN.CODE
      END
   END

   IF PROCESS.FLAG='Y' THEN
      GOSUB PROCESS.TRANSFER
   END
   GOTO 99999
*
*************************************************************************
*** S U B R O U T I N E S ***
*************************************************************************
*
*****************
PROCESS.TRANSFER: 
*****************
*

   PCNT=DCOUNT(D.TRAN.PROD.NO, VM)
   IF PCNT=0 THEN
      IF D.TRAN.CODE # "N" THEN
         DTN=D.TRAN.CODE
         DELETE DAILY_TRANSFER, CONO:DTN
      END
   END ELSE
      FOR P=PCNT TO 1 STEP -1
         PROD=D.TRAN.PROD.NO<1,P>
         RECP.NO=D.TRAN.RECP<1,P>
         SERIAL.NO=D.TRAN.SERIAL<1,P>
         IF D.TRAN.DATE.PROSS<1,P>="" THEN
            ERRMSG=''
            MATREAD INV.REC FROM INVENTORY , CONO:PROD THEN
               MATREAD CATG.REC FROM CATEGORY, CONO : INV.LINE ELSE MAT CATG.REC=''
               FROM.WHSE=D.TRAN.FROM.WHSE
               MATREAD WHSE.REC FROM WAREHOUSE , CONO:FROM.WHSE THEN
                  TO.WHSE=D.TRAN.TO.WHSE<1,P>
                  MATREAD WHSE.REC FROM WAREHOUSE , CONO:TO.WHSE THEN
                     ;* get a current period for division
                     ;* so average cost can be calculated correctly
                     IF WHS.DIV='' THEN WHS.DIV=GEN.DIV
                     DIV.POS=DIVISION_POSITION(CONO,CONTROL,WHS.DIV)
                     BEGIN CASE 
                        CASE DIV.POS<1,1>='' 
                           DIV.POS=DIV.POS<1,2> 
                           CUR.PERIOD=CURRENT_PERIOD(CONO,CONTROL,DIV.POS,"IC") 
                           IF CUR.PERIOD<1,1>='' THEN 
                              CUR.PERIOD=CUR.PERIOD<1,2> 
                           END ELSE 
                              IF CUR.PERIOD<1,1>='-2' OR CUR.PERIOD<1,1>='-1' THEN 
                                 ERRMSG=CUR.PERIOD<1,2>
                              END
                           END
                        CASE DIV.POS<1,1>='-1' 
                           ERRMSG=DIV.POS<1,2> 
                        CASE DIV.POS<1,1>='-2' 
                           ERRMSG=DIV.POS<1,2> 
                     END CASE 
                  END ELSE
                     ERRMSG='CANNOT LOCATE TRANSFER-TO WHSE # ':TO.WHSE
                  END
                  IF ERRMSG='' THEN
                     IWH.FROM.ID=CONO:PROD:'!':FROM.WHSE
                     IWH.TO.ID=CONO:PROD:'!':TO.WHSE
                     MATREADU IWH.REC FROM INV.WHSE, IWH.FROM.ID THEN
                        READU CHECK.REC FROM INV.WHSE, IWH.TO.ID THEN
                           BEGIN CASE
                              CASE PROCESS.FLAG = 'TRANIN'
                                 POSTING=3
                              CASE PROCESS.FLAG = 'TRANOUT'
                                 POSTING=2
                              CASE 1
                                 POSTING=1
                           END CASE

***************************CALL CHECK.TRANSFER.SUB(CONO,POSTING,P,ERRMSG)*****************************
			   
			      CALL CHECK_TRANSFER_SUB(CONO,POSTING,P,ERRMSG,MAT D.TRAN.REC, MAT INV.REC)
                           IF ERRMSG="" THEN
                              IF PROCESS.FLAG = 'Y' THEN GOSUB UPDATE;* T26497
                           END
                        END ELSE
                           ERRMSG='CANNOT LOCATE "TO" INV.WHSE # ':IWH.TO.ID
                        END
                     END ELSE
                        ERRMSG='CANNOT LOCATE "FROM" INV.WHSE # ':IWH.FROM.ID
                     END
                  END
               END ELSE
                  ERRMSG='CANNOT LOCATE WHSE # ':FROM.WHSE
               END
            END ELSE
               ERRMSG='CANNOT LOCATE INVENTORY # ':PROD
            END
            IF ERRMSG # '' THEN
               D.TRAN.ERRMSG<1,P>=ERRMSG
               ACTION.FLAG=1
               CALL UPD_ICS_FROM_TEMP(CONO,MAT FILE.VARS,MAT IID.REC,ACTION.FLAG)
               MAT IID.REC=''
            END
            RELEASE INV.WHSE,IWH.FROM.ID
            RELEASE INV.WHSE,IWH.TO.ID
         END
      NEXT P
      IF PROCESS.FLAG[1,4] = 'TRAN' THEN
         IF D.TRAN.ERRMSG # '' THEN
            CALL UPD_ICS_FROM_TEMP(CONO,MAT FILE.VARS,MAT IID.REC,1)
            RELEASE
         END ELSE
            CALL UPD_ICS_FROM_TEMP(CONO,MAT FILE.VARS,MAT IID.REC,2)
            FOR P=PCNT TO 1 STEP -1
               PROD=D.TRAN.PROD.NO<1,P>
               RECP.NO=D.TRAN.RECP<1,P>
               SERIAL.NO=D.TRAN.SERIAL<1,P>
               MATREAD INV.REC FROM INVENTORY , CONO:PROD THEN
                  MATREAD CATG.REC FROM CATEGORY, CONO : INV.LINE ELSE MAT CATG.REC=''
                  FROM.WHSE=D.TRAN.FROM.WHSE
                  TO.WHSE=D.TRAN.TO.WHSE<1,P>
                  IWH.FROM.ID=CONO:PROD:'!':FROM.WHSE
                  IWH.TO.ID=CONO:PROD:'!':TO.WHSE
                  MATREADU IWH.REC FROM INV.WHSE, IWH.FROM.ID THEN
                     READU CHECK.REC FROM INV.WHSE, IWH.TO.ID THEN
                        GOSUB UPDATE
                     END
                  END
               END
            NEXT P
         END
      END
   END
   IF ERRMSG='' AND PROCESS.FLAG='Y' THEN
      NEW.ERRMSG="Please Make note of updated transfer # ":D.TRAN.CODE
      MATWRITE D.TRAN.REC ON TRANSFER, CONO:D.TRAN.CODE
      DELETE DAILY_TRANSFER,CONO:D.TRAN.CODE
   END
   
   IF PROCESS.FLAG[1,4] # 'TRAN' AND ERRMSG # '' THEN
      MATWRITE D.TRAN.REC ON DAILY_TRANSFER , CONO:D.TRAN.CODE
   END
   
RETURN
*
***************
UPDATE: 
***************
*
   IF PROCESS.FLAG[1,4] # 'TRAN' THEN
      IF DTN='' THEN GOSUB GET.DTN
      SAVE.IID.IRW = IID.IRW
      ACTION.FLAG=2
      CALL UPD_ICS_FROM_TEMP(CONO,MAT FILE.VARS,MAT IID.REC,ACTION.FLAG)
      IF D.TRAN.DATE.PROSS<1,P>="" THEN D.TRAN.DATE.PROSS<1,P>=TODAY
   END
   IF ("X":FROM.WHSE) # ("X":TO.WHSE) THEN
      IWH.ON.HAND=IWH.ON.HAND - D.TRAN.TOT.QTY<1,P>
      ONHAND.DIFF=IWH.ON.HAND-IWH.PERIOD.ONHAND
      IWH.ON.HAND=IWH.HOLD.ONHAND 
      IWH.ON.HAND=IWH.ON.HAND+ONHAND.DIFF 
      IWH.HOLD.ONHAND=''
      IWH.PERIOD.ONHAND=''
      MATWRITE IWH.REC ON INV.WHSE, IWH.FROM.ID
      MATREADU IWH.REC FROM INV.WHSE,IWH.TO.ID THEN
         ACTION=1
         TMP.ARR=''; TMP.CNT='' ; LAST=''
         INAH.PROD=OCONV(IWH.TO.ID,"G!1")[4,99]
         INAH.WHSE=OCONV(IWH.TO.ID,"G1!1")
         PERIOD=D.TRAN.PERIOD
         MAT ORG.IWH.REC = MAT IWH.REC
*	 NOTE! The following CALL can eliminate IWH.RECP data for future
*         periods. Must save and restore after return from call.
         SAVE.IWH.RECP.NO = IWH.RECP.NO
         SAVE.IWH.RECP.PER = IWH.RECP.PERIOD
         SAVE.IWH.RECP.DATE = IWH.RECP.ENT.DATE
         CALL ICS_IWH_SUB (CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG,ERRMSG)
         IF D.TRAN.PERIOD=CUR.PERIOD THEN
            CALL INV_AVG_COST_MAINT(MAT IWH.REC,INV.COST.WT,CUR.PERIOD)
         END

         IWH.RECP.NO = SAVE.IWH.RECP.NO
         IWH.RECP.PERIOD = SAVE.IWH.RECP.PER
         IWH.RECP.ENT.DATE = SAVE.IWH.RECP.DATE

         IWH.ON.HAND+=D.TRAN.TOT.QTY<1,P>
         ONHAND.DIFF=IWH.ON.HAND-IWH.PERIOD.ONHAND
         IWH.ON.HAND=IWH.HOLD.ONHAND 
         IWH.ON.HAND=IWH.ON.HAND+ONHAND.DIFF 
         IWH.HOLD.ONHAND=''
         IWH.PERIOD.ONHAND=''
         IWH.VDR.FI = ""
         IWH.PO.NO.FI = ""
         IWH.PO.LN.FI = ""
         IWH.ORG.FI = ""
         IWH.RSV.FI = ""
         IWH.QTY.FI = ""
         IWH.COST.FI = "" 
         IWH.ACT.COST = ""
         IWH.SALE.FI = "" 
         LOC.CNT=DCOUNT(D.TRAN.TO.LOC<1,P>,SVM)
         FOR LL=1 TO LOC.CNT
            LOCATE D.TRAN.TO.LOC<1,P,LL> IN IWH.LOC<1> SETTING LPOS ELSE
               IWH.LOC<1,-1>=D.TRAN.TO.LOC<1,P,LL> 
            END
         NEXT LL
         MATWRITE IWH.REC ON INV.WHSE,IWH.TO.ID
      END
   END ELSE
      LOC.CNT=DCOUNT(D.TRAN.TO.LOC<1,P>,SVM)
      FOR LL=1 TO LOC.CNT
         LOCATE D.TRAN.TO.LOC<1,P,LL> IN IWH.LOC<1> SETTING LPOS ELSE 
            IWH.LOC<1,-1>=D.TRAN.TO.LOC<1,P,LL>
         END
      NEXT LL
      MATWRITE IWH.REC ON INV.WHSE,IWH.TO.ID 
   END

   RETURN

*
********
GET.DTN: 
********
*
   READU DTN FROM CONTROL,CONO:"TRANSFER" ELSE
      DTN=1000
   END
   FND=1
   LOOP
   WHILE FND DO
      DTN+=1
      READU REC FROM TRANSFER,CONO:DTN ELSE FND=0
      REC=""
      IF FND THEN
         RELEASE TRANSFER, CONO:DTN
      END ELSE
         WRITE DTN ON CONTROL, CONO:'TRANSFER'
      END
   REPEAT
   RETURN

93000:
99999:
   RELEASE
   RETURN

