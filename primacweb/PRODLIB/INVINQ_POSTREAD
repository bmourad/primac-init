  SUBROUTINE INVINQ_POSTREAD
*********************************************************************
*
* REVISION - [12.0]
*
* PROGRAM  - INVINQ_POSTREAD
*
* AUTHOR   - ALEJANDRO DELGADO
*
* DATE     - 11/19/2002
*
* DESCRIPTION
*
* Data is retrieve from the INVENTORY file to load display through RBO.
*
*********************************************************************
*
*---- FILE COPY STATEMENTS
*
  $INCLUDE WWINSERT RBO.H
  $INCLUDE ICS.CPYLIB INVENTORY
  $INCLUDE ICS.CPYLIB INV.WHSE
  $INCLUDE ICS.CPYLIB INV.WHSE.LOC
  $INCLUDE ICS.CPYLIB INV.STATS
  $INCLUDE ICS.CPYLIB FNGD.STATS
  $INCLUDE ICS.CPYLIB INV.CNV
  $INCLUDE ICS.CPYLIB CATEGORY
  $INCLUDE PMC.CPYLIB CUSTOMER
  $INCLUDE CPYLIB FILE.VARS
  $INCLUDE CPYLIB CHAR
*
*---- OPEN ALL FILES
*

  ERRMSG = "" ; IN_PARAM = "" ; OUT_PARAM = ""
  SERIAL.CNTS = ''
  SCV.REC = ''
  IN_PARAM<1,1> = 'INVENTORY'
  IN_PARAM<1,2> = 'CATEGORY'
  IN_PARAM<1,3> = 'INV.WHSE'
  IN_PARAM<1,4> = 'INV.WHSE.LOC'
  IN_PARAM<1,5> = 'INV.STATS'
  IN_PARAM<1,6> = 'FNGD.STATS'
  IN_PARAM<1,7> = 'INV_SERIAL'
  IN_PARAM<1,8> = 'INV_RECEIPTS'
  OPEN '','CUSTOMER' TO CUSTOMER ELSE ERRMSG = 'CUSTOMER FILE IS MISSING'; GOTO SET.ERROR
  OPEN '','CONTROL' TO CONTROL ELSE ERRMSG = 'CONTROL FILE IS MISSING'; GOTO SET.ERROR

  CALL GetInvOpenFiles(ERRMSG,IN_PARAM,OUT_PARAM,MAT FILE.VARS)
  IF ERRMSG # "" THEN GOTO SET.ERROR
*
*---- INITIALIZATION
*
  ERRMSG = RBO.getProperty('','ID',ID)
  CONO = ID[1,3]
  PROD.ID = ID[4,99]
  ESN = 1
  INV_LA_PUR = ''
  ERRMSG = RBO.getProperty('','INV_LA_PUR',INV_LA_PUR)
  INV_LA_PUR = OCONV(INV_LA_PUR,"D2/")
  *INV.UNIT<1,3> = PRICE U/M
  *INV.UNIT<1,2> = STOCK U/M
  *INV.M.LINE = INV_M_LINE
  MATREAD INV.REC FROM INVENTORY, CONO:PROD.ID THEN
    IF INV.CUST # "" THEN
	MATREAD CUST.REC FROM CUSTOMER,CONO:INV.CUST THEN
	END	
    END 
  END ELSE
    ERRMSG = 'Inventory is not on file.  Try again'
    GOTO SET.ERROR
  END
  WHSE.CNT = DCOUNT(INV.WHSE.CODE<1>, @VM)
  IF WHSE.CNT LT 1 THEN
    ERRMSG = 'No warehouses are set up for product - ':PROD.ID
    GOTO SET.ERROR
  END
  MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE THEN
    STATUS=RBO.setProperty('','CAT_TRK_LVL',CATG.TRK.LVL)
  END ELSE
    MAT CATG.REC = ""
  END

  $INCLUDE ICSBP INV.UM.CNV

  FNGD.FLG = 0
  IF INV.M.LINE = 'FNGD' THEN FNGD.FLG = 1
  BEGIN CASE
    CASE INV.PAP.TYPE = "REGULAR"
      TEXT.DISPLAY = "# Serials"
    CASE INV.PAP.TYPE = "SHEET"
      TEXT.DISPLAY = "# Skids"
*T500    CASE 1
    CASE CATG.TRK.LVL = 'S'
      TEXT.DISPLAY = "# Rolls"
    CASE 1
      TEXT.DISPLAY = ''
  END CASE
  ERRMSG = "" ; IN_PARAM = "" ; OUT_PARAM = "" ; MAT INV.CNV.REC = ""
  CALL GetInvUMCnv(ERRMSG,IN_PARAM,OUT_PARAM,MAT INV.CNV.REC,MAT INV.REC)
  *
  LOC.ON.HAND = ''
  WHSE.IDS = INV.WHSE.CODE
  INV.ON.PO = ""; INV.ALLOC = ""; INV.ON.HAND = ""
  INV.RESV = ""; INV.AVAIL = ""; LOC.IDS = ""
  TOT.INV.ON.PO = ""; TOT.INV.ALLOC = ""; TOT.INV.ON.HAND = ""
  TOT.INV.RESV = ""; TOT.INV.AVAIL = ""
  FOR I = WHSE.CNT TO 1 STEP -1
    IWH.ID = CONO:PROD.ID:"!":WHSE.IDS<1,I>
    MATREAD IWH.REC FROM INV.WHSE, IWH.ID THEN
      IF FNGD.FLG THEN
        MATREAD FGS.REC FROM FNGD.STATS,IWH.ID THEN
          INV.ON.PO<1,I> = SUM(FGS.M.QTY)
          INV.ALLOC<1,I> = SUM(FGS.A.QTY)
        END ELSE
          INV.ON.PO<1,I> = 0
          INV.ALLOC<1,I> = 0
        END
      END ELSE
        MATREAD INV.STAT.REC FROM INV.STATS, IWH.ID THEN
          INV.ON.PO<1,I> = SUM(ISTAT.PO.QTY)
          INV.ALLOC<1,I> = 0; PO.CNT = DCOUNT(ISTAT.PO,VM)
          FOR J = 1 TO PO.CNT
            INV.ALLOC<1,I> = INV.ALLOC<1,I> + SUM(ISTAT.PO.JOB.QTY<1,J>)
          NEXT J
        END ELSE
          INV.ON.PO<1,I> = 0
          INV.ALLOC<1,I> = 0
        END
      END
      IF IWH.ON.HAND < 0 THEN
        INV.ON.HAND<1,I>=INT(((IWH.ON.HAND/ICR.DV1)*ICR.MT1)/ICR.DV2-.5)
      END ELSE
        INV.ON.HAND<1,I>=INT(((IWH.ON.HAND/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
      END
      IF IWH.RESV < 0 THEN
        INV.RESV<1,I>=INT(((IWH.RESV/ICR.DV1)*ICR.MT1)/ICR.DV2-.5)
      END ELSE
        INV.RESV<1,I>=INT(((IWH.RESV/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
      END
      IF INV.ON.PO<1,I> < 0 THEN
        INV.ON.PO<1,I>=INT(((INV.ON.PO<1,I>/ICR.DV1)*ICR.MT1)/ICR.DV2-.5)
      END ELSE
        INV.ON.PO<1,I>=INT(((INV.ON.PO<1,I>/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
      END
      IF INV.ALLOC<1,I> < 0 THEN
         INV.ALLOC<1,I>=INT(((INV.ALLOC<1,I>/ICR.DV1)*ICR.MT1)/ICR.DV2-.5)
      END ELSE
        INV.ALLOC<1,I>=INT(((INV.ALLOC<1,I>/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
      END
      INV.AVAIL<1,I> += INV.ON.HAND<1,I>-INV.RESV<1,I>
      TOT.INV.ON.HAND += INV.ON.HAND<1,I>
      TOT.INV.RESV += INV.RESV<1,I>
      TOT.INV.ON.PO += INV.ON.PO<1,I>
      TOT.INV.ALLOC += INV.ALLOC<1,I>
      TOT.INV.AVAIL += INV.AVAIL<1,I>
      LOC.CNT = DCOUNT(IWH.LOC, VM)
      FOR LC = 1 TO LOC.CNT
        IWLO.ID = IWH.ID:'!':IWH.LOC<1,LC>
        MATREAD IWLO.REC FROM INV.WHSE.LOC, IWLO.ID THEN
          IF IWLO.LOC.ON.HAND  < 0 THEN
            LOC.ON.HAND<1,I,LC> = INT(((IWLO.LOC.ON.HAND / ICR.DV1) * ICR.MT1) / ICR.DV2 - .5)
          END ELSE
            LOC.ON.HAND<1,I,LC> = INT(((IWLO.LOC.ON.HAND / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5)
          END

	   LOC.ON.HAND<1,I,LC> = OCONV(LOC.ON.HAND<1,I,LC>,ICR.CNV1)

          LOC.IDS<1,I,LC> = IWH.LOC<1,LC>
        END
      NEXT LC
    END ELSE
      WHSE.IDS = DELETE(WHSE.IDS,1,I,0)
      INV.ON.PO = DELETE(INV.ON.PO,1,I,0)
      INV.ALLOC = DELETE(INV.ALLOC,1,I,0)
      INV.ON.HAND = DELETE(INV.ON.HAND,1,I,0)
      INV.RESV = DELETE(INV.RESV,1,I,0)
      INV.AVAIL = DELETE(INV.AVAIL,1,I,0)
      LOC.IDS = DELETE(LOC.IDS,1,I,0)
      LOC.ON.HAND = DELETE(LOC.ON.HAND,1,I,0)
    END
  NEXT I
  *
 R.S.FLG = 0
    R.S.CNT = 0
  IF CATG.TRK.LVL = 'S' THEN
   
    CNT = DCOUNT(WHSE.IDS, VM)
    FOR WS = 1 TO CNT
      IN_PARAM = CONO
      IN_PARAM<2> = PROD.ID
      IN_PARAM<3> = WHSE.IDS<1,WS>
      CALL GetWhseSerials(ERRMSG,IN_PARAM,OUT_PARAM,MAT FILE.VARS)
      CNTL = DCOUNT(LOC.IDS<1,WS>, SVM)
      FOR LC = 1 TO CNTL
        CURR.LOC = LOC.IDS<1,WS,LC>
        LOCATE CURR.LOC IN OUT_PARAM<1>,1 SETTING WINDX THEN
          TOT.RS.CNT = DCOUNT(OUT_PARAM<2,WINDX>,SVM)
          R.S.CNT=0
          FOR TRC=1 TO TOT.RS.CNT
            IF OUT_PARAM<3,WINDX,TRC>#0 THEN
              R.S.CNT+=1
            END
          NEXT TRC
	    R.S.FLG = 1
          SERIAL.CNTS<1,WS,LC> = R.S.CNT
        END
      NEXT LC
    NEXT WS
  END ELSE
    SERIAL.CNTS = ''
  END
         BEGIN CASE
            CASE NOT(R.S.FLG)
               SCV.REC<49,ESN> = ""
               SCV.REC<50,ESN> = ""
            CASE INV.PAP.TYPE = "REGULAR"
               SCV.REC<49,ESN> = "# Serials  "
               SCV.REC<50,ESN> = R.S.CNT
            CASE INV.PAP.TYPE = "SHEET"
               SCV.REC<49,ESN> = "# Skids    "
               SCV.REC<50,ESN> = R.S.CNT
            CASE 1
               SCV.REC<49,ESN> = "# Rolls    "
               SCV.REC<50,ESN> = R.S.CNT
         END CASE
  FOR I = 1 TO WHSE.CNT
    INV.ON.HAND<1,I> = OCONV(INV.ON.HAND<1,I>,ICR.CNV1)
    INV.RESV<1,I> = OCONV(INV.RESV<1,I>,ICR.CNV1)
    INV.AVAIL<1,I> = OCONV(INV.AVAIL<1,I>,ICR.CNV1)
    INV.ALLOC<1,I> = OCONV(INV.ALLOC<1,I>,ICR.CNV1)
    INV.ON.PO<1,I> = OCONV(INV.ON.PO<1,I>,ICR.CNV1)
*    LOC.CNT = DCOUNT(LOC.IDS<1,I>, SVM)
*    FOR LC = 1 TO LOC.CNT
*      LOC.ON.HAND = OCONV(LOC.ON.HAND<1,I,LC>,ICR.CNV1)
*    NEXT LC
  NEXT I

  TOT.INV.ON.HAND = OCONV(TOT.INV.ON.HAND,ICR.CNV1)
  TOT.INV.RESV = OCONV(TOT.INV.RESV,ICR.CNV1)
  TOT.INV.AVAIL = OCONV(TOT.INV.AVAIL,ICR.CNV1)
  TOT.INV.ALLOC = OCONV(TOT.INV.ALLOC,ICR.CNV1)
  TOT.INV.ON.PO = OCONV(TOT.INV.ON.PO,ICR.CNV1)

*
  STATUS = RBO.setProperty('','WHSE_IDS',WHSE.IDS)
  STATUS = RBO.setProperty('','LOC_IDS',LOC.IDS)
  STATUS = RBO.setProperty('','TEXT_DISPLAY',TEXT.DISPLAY)
  STATUS = RBO.setProperty('','SERIAL_CNTS',SERIAL.CNTS)
  STATUS = RBO.setProperty('','LOC_ON_HAND',LOC.ON.HAND)
  STATUS = RBO.setProperty('','INV_ON_HAND',INV.ON.HAND)
  STATUS = RBO.setProperty('','INV_RESV',INV.RESV)
  STATUS = RBO.setProperty('','INV_AVAIL',INV.AVAIL)
  STATUS = RBO.setProperty('','INV_ALLOC',INV.ALLOC)
  STATUS = RBO.setProperty('','INV_ON_PO',INV.ON.PO)
  STATUS = RBO.setProperty('','INV_DESC',INV.DESC)
  STATUS = RBO.setProperty('','TOT_INV_ON_HAND',TOT.INV.ON.HAND)
  STATUS = RBO.setProperty('','TOT_INV_RESV',TOT.INV.RESV)
  STATUS = RBO.setProperty('','TOT_INV_AVAIL',TOT.INV.AVAIL)
  STATUS = RBO.setProperty('','TOT_INV_ALLOC',TOT.INV.ALLOC)
  STATUS = RBO.setProperty('','TOT_INV_ON_PO',TOT.INV.ON.PO)
  STATUS = RBO.setProperty('','CATG_TRK_LVL',CATG.TRK.LVL)
  STATUS = RBO.setProperty('','SERIAL_FLAG',SCV.REC<49>)
  STATUS = RBO.setProperty('','SERIAL_NUMBER',SCV.REC<50>)
  STATUS = RBO.setProperty('','INV_LA_PUR',INV_LA_PUR)
  STATUS = RBO.setProperty('','INV_LA_SALE',OCONV(INV.LA.SALE,"D4/"))
  STATUS = RBO.setProperty('','INV_CUST_NAME',CUST.NAME)

  RETURN
*
SET.ERROR: 
*
  STATUS = RBO.setProperty('','ServerStatus',1)
  STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
  RETURN
