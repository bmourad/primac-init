SUBROUTINE OPSFGJC_Write
********************************************************************************
*   Program name :- OPSFGJC_Write
*   Created:- 21/08/2003
*   Author:-  Mohammed Abdul Malik
*   Gets Related info for Job 
*------------------------------------------------------------------------------*
*
* In Properties:
* --------------
*  
IN_PARAM=''
*
* Out Properties:
* ---------------
*  
OUT_PARAM=''
********************************************************************************
$INCLUDE WWINSERT RBO.H
* Insert method code here
$INCLUDE CPYLIB COMMON1
$INCLUDE JCS.CPYLIB COM.JCS.LINK
$INCLUDE ICS.CPYLIB COM.INV.MAIN  
$INCLUDE ICS.CPYLIB COM.INV.SERIAL
$INCLUDE JCS.CPYLIB COM.INV.STATS
$INCLUDE PMC.CPYLIB COM.CUST      
$INCLUDE OPS.CPYLIB COM.ORDER
$INCLUDE OPS.CPYLIB COM.OPS.LINK
$INCLUDE PMC.CPYLIB COM.COMPANY
  
***
*
***
$DEFINE JOB
$DEFINE JOBMATL
$DEFINE INVENTORY
$DEFINE INVWHSE
$DEFINE INVWHSELOC
$DEFINE INVSTATS
$DEFINE INVJOBSTATS
$DEFINE COSTCNTWIP
$DEFINE JOBFNGDSTATS
$DEFINE ORDER
$DEFINE ORDERDETAILINQ
$DEFINE INVRECEIPTS
$DEFINE CATEGORY
$DEFINE FNGDSTATS
$DEFINE CUSTOMER
$DEFINE COMPANY

$DEFINE FILEVARS
$INCLUDE CPYLIB FILE.VARS
$INCLUDE JCS.CPYLIB JOB
$INCLUDE JCS.CPYLIB REVERSE.WIP.HIST
$INCLUDE OPS.CPYLIB ORDER
$INCLUDE OPS.CPYLIB ORDER.DETAIL
$INCLUDE OPS.CPYLIB ORDER.DETAIL.INQ
$INCLUDE OPS.CPYLIB JOB.FNGD.STATS
$INCLUDE OPS.CPYLIB FNGD.WIP.HIST
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV_RECEIPTS
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB INV.JOB.STATS
$INCLUDE ICS.CPYLIB FNGD.STATS
$INCLUDE ICS.CPYLIB FNGD.JOB.STATS
$INCLUDE PMC.CPYLIB JOB.SALES.STATS
$INCLUDE PMC.CPYLIB CUSTOMER
$INCLUDE PMC.CPYLIB COST.CNTR
$INCLUDE PMC.CPYLIB FISCAL
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE CPYLIB CHAR
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE PMC.CPYLIB DIVISION
$INCLUDE PMC.CPYLIB SECURITY

*DEFFUN CalcStkQty(COST.QTY,MAT INV.CNV.REC,ROND,LN)
;* open files

      OPEN '','CONTROL' TO CONTROL ELSE
         ERRMSG='CONTROL FILE IS MISSING'; GOTO 93000
      END
      OPEN "","DIVISION" TO DIVISION ELSE
         ERRMSG = "DIVISION"; GOTO 93000
      END
      OPEN "","SECURITY" TO SECURITY ELSE
         ERRMSG = "SECURITY"; GOTO 93000
      END

      OPEN '','FNGD.WIP.HIST' TO FNGD.WIP.HIST ELSE
         ERRMSG='FNGD.WIP.HIST FILE IS MISSING'; GOTO 93000
      END
      OPEN '','FNGD_WIP_HIST_TAG' TO FNGD_WIP_HIST_TAG ELSE
         ERRMSG='FNGD_WIP_HIST_TAG FILE IS MISSING'; GOTO 93000
      END     

      OPEN '','REVERSE.WIP.HIST' TO REVERSE.WIP.HIST ELSE
         ERRMSG='REVERSE.WIP.HIST FILE IS MISSING'; GOTO 93000
      END

DIM OLD.FWH.REC(10)
MAT OLD.FWH.REC = ""

ERRMSG=''
PERIOD =''
MANU.AMT='';COMP.AMT=''

ALL.TYPE 	= "LB"
ALL.TYPE<1,2> = "MT"
ALL.TYPE<1,3> = "OS"
ALL.TYPE<1,4> = "SP"
ALL.TYPE<1,5> = "MS"

STATUS = RBO.getProperty('','PMCProperty',PMCProperty)
STATUS = RBO.getProperty('','REV_PER',RWH.REV.PER)
STATUS = RBO.getProperty('','ID',ID)
STATUS = RBO.getProperty('','RevDate',RWH.REV.DATE)
STATUS = RBO.getProperty('','RevPrd',RWH.PERIOD)
STATUS = RBO.getProperty('','ClrAllocFG',RWH.Z.A.QTY)
STATUS = RBO.getProperty('','ClrRsv',RWH.Z.R.QTY)
STATUS = RBO.getProperty('','REVPER',REV.PER)

UserID = PMCProperty<1,3>
CONO   = PMCProperty<1,4>
JOBNO=ID[4,99]
RWH.JOB = JOBNO

      MATREADU FWH.REC FROM FNGD.WIP.HIST, CONO:JOBNO LOCKED
        ERRMSG = "FNGD.WIP.HIST RECORD IS NOT THERE";GOTO 93000
      END ELSE
        MAT FWH.REC=''
      END

      MATREAD FISCAL.REC FROM CONTROL, CONO:"JCFISCAL" ELSE
    	  ERRMSG = "OPFISCAL IS NOT ON CONTROL FILE"
    	  GOTO 93000
      END

      READ DIVISION.REC FROM CONTROL, CONO:"DIVISIONS" ELSE
         ERRMSG = "DIVISIONS CONTROL RECORD IS MISSING"
	  GOTO 93000
      END

      READ SECURITY.REC FROM CONTROL, CONO:"DIV.SECURITY" ELSE
    	   ERRMSG = "DIV.SECURITY CONTROL RECORD IS MISSING"
    	   GOTO 93000
      END
     DIV.CODE = JOB.DIV; USER.ID = UPCASE(@LOGNAME); ERRMSG = ''

    CALL CK.DIV.SEC.SUB(CONO,DIV.CODE,USER.ID,ERRMSG)
    IF ERRMSG # '' THEN
    	GOTO 93000
    END
     IF SECURITY.REC<1> = "Y" AND SECURITY.REC<2> = "Y" THEN 
        IF DIV.CODE = "00" OR DIV.CODE = "ALL" THEN
        ERRMSG = " 'ALL' OR '00' INVALID WHEN DIVISION-LEVEL POSTING & CLOSING IS SELECTED ":DIV.CODE:"  ":USER.ID
        GOTO 93000
     END
     LOCATE DIV.CODE IN DIVISION.REC<1>,1 SETTING POS ELSE 
       ERRMSG = "Division ":DIV.CODE:" not found in Control File DIVISIONS Record."
	GOTO 93000
     END
     END ELSE
       POS = 1
     END
     READ CTL.WIP.TYPE FROM CONTROL, CONO : "WIP.DEFAULT" ELSE CTL.WIP.TYPE = ""
      IF CTL.WIP.TYPE = "" THEN CTL.WIP.TYPE = "ALL"
      RWH.REV.TYPE = CTL.WIP.TYPE
      LINES = DCOUNT(RWH.REV.TYPE,VM)
      IF CTL.WIP.TYPE # "ALL" AND LINES < 5 THEN
        LOCATE "OTH" IN RWH.REV.TYPE<1>,1 SETTING FND ELSE
          LINES = LINES + 1
          RWH.REV.TYPE<1,LINES> = "OTH"
        END
      END
      IF RWH.REV.DATE # "ALL" THEN
	  RWH.REV.DATE = ICONV(RWH.REV.DATE,"D2/")
      END

5000 *	
	LINES = DCOUNT(RWH.REV.PER,VM)
	FOR LN = 1 TO LINES
		RWH.REV.PER<1,LN> = ICONV(RWH.REV.PER<1,LN>, "MD2")
	NEXT LN
	RWH.JB.BEFORE = JOB.WIP<1,2>
  	RWH.LB.BEFORE = JOB.LB.WIP<1,2>
  	RWH.MT.BEFORE = JOB.MT.WIP<1,2>
  	RWH.OS.BEFORE = JOB.OS.WIP<1,2>
  	RWH.SP.BEFORE = JOB.SP.WIP<1,2>
  	RWH.MS.BEFORE = JOB.MS.WIP<1,2>

*ERRMSG = RWH.JB.BEFORE : " EE " :RWH.LB.BEFORE : " EE " :RWH.MT.BEFORE : " EE " : RWH.OS.BEFORE : " EE " : RWH.SP.BEFORE : " EE " : RWH.MS.BEFORE 

	FOR I = 1 TO LINES
    		IF RWH.REV.TYPE<1,I> = "OTH" THEN
      			PER = RWH.REV.PER<1,I>
      			PTR = I - 1
	      		FOR II = 1 TO 5
        		LOCATE ALL.TYPE<1,II> IN CTL.WIP.TYPE<1>,1 SETTING FND ELSE
	          		PTR = PTR + 1
	          		RWH.REV.TYPE<1,PTR> = ALL.TYPE<1,II>
	          		RWH.REV.DATE<1,PTR> = RWH.REV.DATE<1,1>
	          		RWH.REV.PER<1,PTR>  = PER
        		END
	      		NEXT II
    		END ELSE
      			RWH.REV.DATE<1,I> = RWH.REV.DATE<1,1>
    		END
  	NEXT I

*ERRMSG = RWH.JOB : " TT " :RWH.REV.TYPE: " TT " :RWH.REV.PER: " TT " :RWH.REV.DATE: " TT " :RWH.PERIOD: " TT " :FR.CURR.PER<1,POS>

	CALL REVERSE_FNGD_JOB_WIP(CONO,RWH.JOB,RWH.REV.TYPE,RWH.REV.PER,RWH.REV.DATE,RWH.PERIOD,FR.CURR.PER<1,POS>)
	RWH.JB.AFTER = JOB.WIP<1,2>
	RWH.LB.AFTER = JOB.LB.WIP<1,2>
	RWH.MT.AFTER = JOB.MT.WIP<1,2>
	RWH.OS.AFTER = JOB.OS.WIP<1,2>
	RWH.SP.AFTER = JOB.SP.WIP<1,2>
	RWH.MS.AFTER = JOB.MS.WIP<1,2>
	RWH.FNGD.PROD = JFS.PROD
  	RWH.FNGD.WHSE = JFS.WHSE
  	RWH.FNGD.AMT = COMP.AMT
      LOCATE PERIOD IN FWH.WIP.PER<1>,1 SETTING WPTR ELSE
		FWH.WIP.PER<1,WPTR> = PERIOD
	    	FWH.WIP.AMT<1,WPTR> = 0
	END
	WIP.BEFORE = SUM(SUM(RWH.JB.BEFORE))
	WIP.AFTER = SUM(SUM(RWH.JB.AFTER))
	FWH.WIP.AMT<1,WPTR> = FWH.WIP.AMT<1,WPTR> + WIP.BEFORE - WIP.AFTER
	IF RWH.Z.R.QTY = "Y" THEN
*T27915 v
    IF SUM(JOB.ALOC.QTY) # 0 AND CO.POS = 'Y' THEN
       CALL CLEAR.JOB.ALLOC(CONO,RWH.JOB)
    END
*
	RESV.ACTION = "D"
    	RESV.LOC = 0
*T27915 v  CALL FNGD_JOB_RESV_SUB(RESV.ACTION,RESV.LOC,CONO,RWH.JOB)
       CALL FNGD_JOB_RESV_SUB(CONO,RESV.ACTION,DPTR,JOBNO)
*T20611/27915 v
    IF RESV.ACTION # 'D' AND RESV.ACTION # '' THEN
      ERRMSG = RESV.ACTION; *GOSUB 91000; 
	RETURN
    END
* ^
	MCNT = COUNT(JOB.RESV.MATL,VM) + (JOB.RESV.MATL # "")
    	FOR M = MCNT TO 1 STEP - 1
	      	IF JOB.RESV.QTY<1,M> + JOB.ALOC.QTY<1,M> + JOB.USED.QTY<1,M> = 0 THEN
       	JSTAT.ID = JOB.RESV.MATL<1,M>:"!":JOB.RESV.WHSE<1,M>:"!":RWH.JOB
	        	MATREAD INV.JS.REC FROM INV.JOB.STATS, CONO:JSTAT.ID ELSE
	          		JOB.RESV.MATL = DELETE(JOB.RESV.MATL,1,M,0)
	          		JOB.RESV.WHSE = DELETE(JOB.RESV.WHSE,1,M,0)
	       	   	JOB.RESV.DATE = DELETE(JOB.RESV.DATE,1,M,0)
	       	   	JOB.ALOC.QTY = DELETE(JOB.ALOC.QTY,1,M,0)
	       	   	JOB.RESV.QTY = DELETE(JOB.RESV.QTY,1,M,0)
	          		JOB.USED.QTY = DELETE(JOB.USED.QTY,1,M,0)
	          		JOB.ALOC.AMT = DELETE(JOB.ALOC.AMT,1,M,0)
	          		JOB.RESV.AMT = DELETE(JOB.RESV.AMT,1,M,0)
	       		JOB.USED.AMT = DELETE(JOB.USED.AMT,1,M,0)
        		END
		 END
	NEXT M
	END
	IF RWH.Z.A.QTY = "Y" THEN
		MCNT = DCOUNT(JFS.PROD,VM)
    		FOR M = 1 TO MCNT
*T21491 v
      			PDNO = JFS.PROD<1,M>; WHNO = JFS.WHSE<1,M>
      			FGS.ID = CONO:PDNO:"!":WHNO
	      		MATREADU FGS.REC FROM FNGD.STATS, FGS.ID THEN
       	 		LOCATE JOBNO IN FGS.JOB<1>,1 SETTING L THEN
          				FGS.A.QTY<1,L> = 0
          				FGS.M.QTY<1,L> = 0
	        		END
       	 		MATWRITE FGS.REC ON FNGD.STATS, FGS.ID
      			END ELSE
        			RELEASE FNGD.STATS, FGS.ID
	      		END
*T21491 ^
*T25465  	       JFS.M.QTY<1,M> = JFS.F.QTY<1,M>
			OCNT = DCOUNT(JFS.ORDER<1,M>,SVM)
      			FOR O= 1 TO OCNT
       			JFS.ORD.QTY<1,M,O> = 0
	      		NEXT O
		      	JFS.A.QTY<1,M> = 0
      			FJS.ID = CONO:PDNO:"!":WHNO:"!":JOBNO
		      	MATREADU FJS.REC FROM FNGD.JOB.STATS, FJS.ID THEN
*T25465              FJS.M.QTY = FJS.F.QTY
       			MATWRITE FJS.REC ON FNGD.JOB.STATS, FJS.ID
	      		END ELSE
       			RELEASE FNGD.JOB.STATS, FJS.ID
		      	END
		NEXT M
	    	MATWRITE JFS.REC ON JOB.FNGD.STATS, CONO:JOBNO
	   	ORDNOS = ""; PRDPTR = ""; ORDPTR = ""
    		MCNT = DCOUNT(JFS.PROD,VM)
	    	FOR M = 1 TO MCNT
      			OCNT = DCOUNT(JFS.ORDER<1,M>,SVM)
      			FOR O = 1 TO OCNT
	        	LOCATE JFS.ORDER<1,M,O> IN ORDNOS,1 SETTING OLOC THEN
	       	 	OPTR = DCOUNT(PRDPTR<OLOC>,VM) + 1
	          		PRDPTR<OLOC,OPTR> = M
          			ORDPTR<OLOC,OPTR> = O
	        	END ELSE
          			ORDNOS<OLOC> = JFS.ORDER<1,M,O>
          			PRDPTR<OLOC> = M
          			ORDPTR<OLOC> = O
	        		END
      			NEXT O
	    	NEXT M
    		OCNT = DCOUNT(ORDNOS,AM)
	    	FOR OP = 1 TO OCNT
      			ORDNUM = ORDNOS<OP>
      			PCNT = DCOUNT(ORDPTR<OP>,VM)
	      		MATREADU ORD.REC FROM ORDER, CONO:ORDNUM ELSE
       	 		RELEASE ORDER, CONO:ORDNUM
        			FOR PP = 1 TO PCNT
          				M = PRDPTR<OP,PP>; O = ORDPTR<OP,PP>
          				PDNO = JFS.PROD<1,M>; WHNO = JFS.WHSE<1,M>
	          			GOSUB 5100
       	 		NEXT PP
        			GOTO 5050
	      		END
      			STATUS = "L"; SHPNO = "ALL"
      			CALL ORDER_LINE_UPD(CONO,ORDNUM,SHPNO,STATUS)
	      		SHPNO = '000'
      			PCNT = DCOUNT(ORDPTR<OP>,VM)
      			FOR PP = 1 TO PCNT
	        		M = PRDPTR<OP,PP>; O = ORDPTR<OP,PP>
       	 		PDNO = JFS.PROD<1,M>; WHNO = JFS.WHSE<1,M>
        			PTR = 1
        			LOOP
          				LOCATE PDNO IN ODQ.PROD<1>,PTR SETTING PLOC THEN
	            				IF WHNO = ODQ.WHSE<1,PLOC> THEN
       	       				PTR = 0
            					END
          				END ELSE
            					PLOC = 0; PTR = 0
	          			END
       	 		WHILE PTR DO
          				PTR = PLOC + 1
        			REPEAT
	        		IF PLOC = 0 THEN
       	   			RELEASE ORDER, CONO:ORDNUM
          				GOSUB 5100; GOTO 5040
        			END
	        		TOT.A.QTY = 0; JPTR = 1
       	 		LOOP
          				LOCATE JOBNO IN ODQ.JOB<1,PLOC>,JPTR SETTING JL THEN
            					ODQ.JOB.QTY<1,PLOC,JL> = 0
            					JPTR = JL + 1
	          			END ELSE
       	     				JL = 0
          				END
        			WHILE JL DO REPEAT
5040 *
	      		NEXT PP
      			STATUS = "U"; SHPNO = ""
      			CALL ORDER_LINE_UPD(CONO,ORDNUM,SHPNO,STATUS)
5050 *
		NEXT OP

	END
	IF REV.PER >= 10000 AND JOB.WIP<1,2,1>+0=0 AND JOB.WIP<1,2,2>+0=0 AND JOB.WIP<1,2,3>+0=0 AND JOB.WIP<1,2,4>+0=0 THEN; *CSF 25154
		IF JOB.STATUS<1,1> < 4 OR JOB.STATUS<1,1> = 5 THEN
      			JOB.STATUS = INSERT(JOB.STATUS,1,1,0,"4")
	      		JOB.STAT.DATE = INSERT(JOB.STAT.DATE,1,1,0,RWH.ENT.DATE)
      			JOB.TRACK.DATE<1,10> = DATE()
	    	END
	END
	READU SEQ.NUM FROM CONTROL, CONO:"REVERSE.WIP" ELSE SEQ.NUM = 10001
	REV.REC = ""
	LOOP
		READ REV.REC FROM REVERSE.WIP.HIST, CONO:SEQ.NUM ELSE REV.REC = ""
	WHILE REV.REC # "" DO
		SEQ.NUM = SEQ.NUM + 1
	REPEAT
	NEW.SEQ.NO = SEQ.NUM + 1
	WRITE NEW.SEQ.NO ON CONTROL, CONO:"REVERSE.WIP"
	MATWRITE RWH.REC ON REVERSE.WIP.HIST, CONO:SEQ.NUM
	MATWRITE FWH.REC ON FNGD.WIP.HIST, CONO:JOBNO
  	WRITE '' ON FNGD_WIP_HIST_TAG, CONO:JOBNO
* T22164 v                                             
	MATREAD JFS.REC FROM JOB.FNGD.STATS, CONO:JOBNO ELSE 
     		MAT JFS.REC = ""                                  
	END
  	IF SUM(JFS.F.QTY) > 0 THEN                           
     		JOB.QTY<1,1> = JOB.QTY<1,2>                       
	END
*T22164 ^                                              
	MATWRITE JOB.REC ON JOB, ID
** Added for saving  method
*GOSUB 6000
GOTO 93000
*---- Zero out allocated for the FJS
*
5100 *
	FJS.ID = CONO:PDNO:"!":WHNO:"!":JOBNO
  	MATREADU FJS.REC FROM FNGD.JOB.STATS, FJS.ID THEN
    		LOCATE ORDNUM IN FJS.ORD<1>,1 SETTING FND THEN
      			FJS.ORD = DELETE(FJS.ORD,1,FND,0)
      			FJS.ORD.QTY = DELETE(FJS.ORD.QTY,1,FND,0)
      			FJS.A.QTY = SUM(FJS.ORD.QTY)
      			MATWRITE FJS.REC ON FNGD.JOB.STATS, FJS.ID
    		END ELSE
      			RELEASE FNGD.JOB.STATS, FJS.ID
    		END
  	END ELSE
    		RELEASE FNGD.JOB.STATS, FJS.ID
  	END
RETURN
**
* new code added
**
*
*---- UPDATE SALES STATISTICS
*
6000 *
  IF CO.SAS = "Y" THEN
    MATREADU JSS.REC FROM JOB.SALES.STATS, CONO:RWH.JOB ELSE
      RELEASE JOB.SALES.STATS,CONO:RWH.JOB
      GOTO 6999
    END
    JSS.COST.TOTAL = JOB.TOT.COST
    TOT.DCOST = ""
    TOT.SPOILAGE = ""
    TOT.SHIP = ""
    LCNT = COUNT(JOB.LB.DEPT,VM) + (JOB.LB.DEPT # "")
    FOR LB = 1 TO LCNT
      MATREAD CCTR.REC FROM COST.CNTR, CONO:JOB.LB.CCTR<1,LB> ELSE
        MAT CCTR.REC = ""
      END
      IF CCTR.TYPE = "S" OR CCTR.TYPE = "W" OR CCTR.TYPE = "B" THEN
        LOCATE JOB.LB.CCTR<1,LB> IN JSS.PRESS<1>,1 SETTING FOND ELSE
          FOND = COUNT(JSS.PRESS,VM) + (JSS.PRESS # "") + 1
          JSS.PRESS<1,FOND> = JOB.LB.CCTR<1,LB>
          IF FOND > 1 AND JSS.MULTI.PRESS # "Y" THEN JSS.MULTI.PRESS = "Y"
        END
      END
      TOT.SPOILAGE = TOT.SPOILAGE + JOB.LB.TCOST<1,LB,4>
    NEXT LB
    MCNT = COUNT(JOB.MT.DEPT,VM) + (JOB.MT.DEPT # "")
    FOR MT = 1 TO MCNT
      TOT.SPOILAGE = TOT.SPOILAGE + JOB.MT.TCOST<1,MT,4>
      TOT.DCOST = TOT.DCOST + JOB.MT.DCOST<1,MT,1> + JOB.MT.DCOST<1,MT,2>
    NEXT MT
    OCNT = COUNT(JOB.OS.DEPT,VM) + (JOB.OS.DEPT # "")
    FOR OO = 1 TO OCNT
      TOT.SPOILAGE = TOT.SPOILAGE + JOB.OS.TCOST<1,OO,4>
      TOT.DCOST = TOT.DCOST + JOB.OS.DCOST<1,OO>
    NEXT OO
    MSCNT = COUNT(JOB.MS.DEPT,VM) + (JOB.MS.DEPT # "")
    FOR MS = 1 TO MSCNT
      TOT.SPOILAGE = TOT.SPOILAGE + JOB.MS.TCOST<1,MS,4>
      TOT.DCOST = TOT.DCOST + JOB.MS.DCOST<1,MS>
    NEXT MS
    SCNT = COUNT(JOB.SP.DEPT,VM) + (JOB.SP.DEPT # "")
    FOR SP = 1 TO SCNT
      TOT.SPOILAGE = TOT.SPOILAGE + JOB.SP.TCOST<1,SP,4>
      TOT.DCOST = TOT.DCOST + JOB.SP.DCOST<1,SP>
      TOT.SHIP = TOT.SHIP + JOB.SP.COST<1,SP>
    NEXT SP
    JSS.VALUE.ADDED = JSS.INVOICE.TOTAL - TOT.DCOST
    JSS.SPOILAGE = TOT.SPOILAGE
    JSS.SHIP.COST = TOT.SHIP
    MATWRITE JSS.REC ON JOB.SALES.STATS, CONO:RWH.JOB
6999 *
  END
*	STATUS = RBO.setProperty('','COMPLETE'," -- Save Function Completed ...")
  RETURN
*************--------------End write
*-------------------------------------------------------------------- 
93000 *
   IF ERRMSG # "" THEN
	STATUS = RBO.setProperty('','ServerStatus',1)        
	STATUS = RBO.setProperty('','ServerMessage',ERRMSG)  
   END
RETURN
