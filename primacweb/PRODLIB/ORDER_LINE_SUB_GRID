SUBROUTINE ORDER_LINE_SUB_GRID
********************************************************************************
*   Program name :- ORDER_LINE_SUB_GRID
*   Created:- 1/17/2006
*   Programmer :- Suhail Hussain S
********************************************************************************
$INCLUDE WWINSERT RBO.H

$INCLUDE CPYLIB COMMON1
$INCLUDE JCS.CPYLIB COM.JCS.LINK  
$INCLUDE ICS.CPYLIB COM.INV.MAIN  
$INCLUDE ICS.CPYLIB COM.INV.SERIAL
$INCLUDE JCS.CPYLIB COM.INV.STATS 
$INCLUDE PMC.CPYLIB COM.CUST 
$INCLUDE OPS.CPYLIB COM.ORDER
$INCLUDE OPS.CPYLIB COM.OPS.LINK

$DEFINE INVENTORY
$DEFINE ORDER
$DEFINE ORDERDETAILINQ
$DEFINE COMPOPS
$DEFINE CUSTOMER
$DEFINE CATEGORY
$DEFINE INVWHSE
$DEFINE FNGDSTATS
$DEFINE FNGDORDERSTATS
$DEFINE JOB
$DEFINE FILEVARS

$INCLUDE PMC.CPYLIB COMP.OPS
$INCLUDE PMC.CPYLIB CUSTOMER
$INCLUDE OPS.CPYLIB ORDER
$INCLUDE OPS.CPYLIB ORDER.DETAIL
$INCLUDE OPS.CPYLIB ORDER.DETAIL.INQ
$INCLUDE OPS.CPYLIB ORDER.RELEASE
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV.FNGD
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE ICS.CPYLIB FNGD.BOM
$INCLUDE ICS.CPYLIB FNGD.STATS
$INCLUDE ICS.CPYLIB FNGD.ORDER.STATS
$INCLUDE ICS.CPYLIB FNGD.JOB.STATS
$INCLUDE ICS.CPYLIB PRICE.TABLE
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE JES.CPYLIB ESTIMATE
$INCLUDE JCS.CPYLIB JOB
$INCLUDE CPYLIB FILE.VARS
$INCLUDE CPYLIB CHAR

   SET_FOCUS  = 1
   OPEN "","CUSTOMER" TO CUSTOMER ELSE ERRMSG = "CANNOT OPEN CUSTOMER FILE";GOTO 91000
   OPEN "","ORDER" TO ORDER ELSE ERRMSG = "CANNOT OPEN ORDER FILE";GOTO 91000
   OPEN "","ORDER.DETAIL" TO ORDER.DETAIL ELSE ERRMSG = "CANNOT OPEN ORDER.DETAIL FILE";GOTO 91000
   OPEN "","ORDER.RELEASE" TO ORDER.RELEASE ELSE ERRMSG = "CANNOT OPEN ORDER.RELEASE FILE";GOTO 91000
   OPEN "","INVENTORY" TO INVENTORY ELSE ERRMSG = "CANNOT OPEN INVENTORY FILE";GOTO 91000
   OPEN "","CATEGORY" TO CATEGORY ELSE ERRMSG = "CANNOT OPEN CATEGORY FILE";GOTO 91000
   OPEN "","INV.WHSE" TO INV.WHSE ELSE ERRMSG = "CANNOT OPEN INV.WHSE FILE";GOTO 91000
   OPEN "","INV.FNGD" TO INV.FNGD ELSE ERRMSG = "CANNOT OPEN INV.FNGD FILE";GOTO 91000
   OPEN "","FNGD.BOM" TO FNGD.BOM ELSE ERRMSG = "CANNOT OPEN FNGD.BOM FILE";GOTO 91000
   OPEN "","FNGD.STATS" TO FNGD.STATS ELSE ERRMSG = "CANNOT OPEN FNGD.STATS FILE";GOTO 91000
   OPEN "","FNGD.ORDER.STATS" TO FNGD.ORDER.STATS ELSE ERRMSG = "CANNOT OPEN  FILE";GOTO 91000
   OPEN "","FNGD.JOB.STATS" TO FNGD.JOB.STATS ELSE ERRMSG = "CANNOT OPEN FNGD.JOB.STATS FILE";GOTO 91000
   OPEN "","PRICE.TABLE" TO PRICE.TABLE ELSE ERRMSG = "CANNOT OPEN PRICE.TABLE FILE";GOTO 91000
   OPEN "","WAREHOUSE" TO WAREHOUSE ELSE ERRMSG = "CANNOT OPEN WAREHOUSE FILE";GOTO 91000
   OPEN "","ESTIMATE" TO ESTIMATE ELSE ERRMSG = "CANNOT OPEN ESTIMATE FILE";GOTO 91000
   OPEN "","JOB" TO JOB ELSE ERRMSG = "CANNOT OPEN JOB FILE";GOTO 91000
   OPEN "","CONTROL" TO CONTROL ELSE ERRMSG = "CANNOT OPEN CONTROL FILE";GOTO 91000

*** VARIABLES AND PROPERTIES
   STATUS = RBO.getProperty("","PMCProperty",PMCProperty)
   STATUS = RBO.getProperty("","INARR",INARR)
   STATUS = RBO.getProperty("","DISPARR",OSDARR)
   STATUS = RBO.getProperty("","REMOTE_ARR1",RESV_DATA)

   CONO = PMCProperty<1,4>

   DELIM = "ð"
   RETURN_ARR = ""
   GEN.SHPNO = "000"
   TODAY = DATE()
   DIM TEMP.MF(25)
   MAT TEMP.MF = ""
   DEFAULT_FOCUS = ""
MAT ORD.DET.SUM = ""
MAT ORD.DET.INQ = ""

   ORDNO      = INARR<1,1>
   ISNEW      = INARR<1,12>
   MAT ORD.DET.REC = ""
   IF ISNEW = 0 THEN
     MATREAD ORD.REC FROM ORDER,CONO:ORDNO ELSE MAT ORD.REC = ""
   END

   ORD.CUST   = INARR<1,2>
   ORD.DIV    = INARR<1,3>
   SHIPNO     = INARR<1,4>
   ITEM_NO    = INARR<1,5>
   WHSE_NO    = INARR<1,6>
   ORDER_QTY  = INARR<1,7>
   RESERV_QTY = INARR<1,8>
   ALLOC_QTY  = INARR<1,9>
   UNIT_PRICE = INARR<1,10>
   PROMPT_NUM = INARR<1,11>
   MODE       = INARR<1,13>
   LN         = INARR<1,14>
   OSD_PO     = INARR<1,16>
   OSD_SHP_TERMS = INARR<1,17>
   RESV_MODE  = INARR<1,18>

   RSV_QTY       = FIELD(RESV_DATA,"¥",1,1)   ;* THIS IS VM SEPERATED
   RESV_REL_DATA = FIELD(RESV_DATA,"¥",2,1)   ;* THIS IS DELIM SEPERATED VM,UM STRING

   ROWNo      = LN
   STATUS = RBO.getProperty("","GRIDARR",JOB_ALLOC_DATA)
   STATUS = RBO.getProperty("","WARNINGARR",ORD.SHIP.TO)
   LOCATE SHIPNO IN ORD.SHIP.TO<1>,1 SETTING SIND ELSE SIND = 1

   MATPARSE ORD.DET.REC FROM OSDARR,DELIM
   OSD.PO = OSD_PO
   IF OSD_SHP_TERMS # 0 THEN
      OSD.SHP.TERMS = OSD_SHP_TERMS
   END
   MATREAD OPCO.REC FROM CONTROL, CONO:"OPS" ELSE MAT OPCO.REC = ""
   MATREAD CUST.REC FROM CUSTOMER, CONO:ORD.CUST ELSE MAT CUST.REC = ""
* Insert method code here

****** START OF MAIN
   GOTO PRE_PROCESS
110011*
   SHPNO = SHIPNO
   *---- Item
   7010*
     IF ITEM_NO = "" THEN
       SET_FOCUS = 1
       GOTO 93000
     END
     
     WHNO = ""
     PMPT_NO = 1
     VALUE = ITEM_NO
     MATREAD INV.REC FROM INVENTORY, CONO:VALUE ELSE
       ERRMSG = "Cannot locate finished goods # ":VALUE
       IF PMPT_NO <= PROMPT_NUM THEN 
         SET_FOCUS = 1
         GOTO 91000
       END
     END
     IF INV.M.LINE # "FNGD" THEN
       ERRMSG = "This is not a Finished Goods Product. Try again !!"
       IF PMPT_NO <= PROMPT_NUM THEN 
         SET_FOCUS = 1
         GOTO 91000
       END
     END
   *
     IF TEMP.MF(18) = "K" THEN
       IF VALUE # TEMP.MF(1) THEN
         ERRMSG = "Cannot change a Kitted FNGD item to a Regular FNGD Must Delete Line"
         IF PMPT_NO <= PROMPT_NUM THEN 
           SET_FOCUS = 1
           GOTO 91000
         END
       END
     END
     IF INV.CUST # "" AND INV.CUST # ORD.CUST THEN
       ERRMSG = "A different customer owns this finished goods # ":VALUE
       IF PMPT_NO <= PROMPT_NUM THEN 
         SET_FOCUS = 1
         GOTO 91000
       END
     END
     MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
       ERRMSG = "Cannot locate Product Line # ":INV.LINE
       IF PMPT_NO <= PROMPT_NUM THEN 
         SET_FOCUS = 1
         GOTO 91000
       END
     END
     WCNT = DCOUNT(INV.WHSE.CODE,VM)
     IF WCNT < 1 THEN
       ERRMSG = "Cannot locate any warehouses for finished goods # ":VALUE
       IF PMPT_NO <= PROMPT_NUM THEN 
         SET_FOCUS = 1
         GOTO 91000
       END
     END
   $INCLUDE ICSBP INV.UM.CNV
     RETURN_ARR<1,-1> = "D" : DELIM : 7 : DELIM : INV.UNIT<1,3>
     RETURN_ARR<1,-1> = "D" : DELIM : 8 : DELIM : INV.FULL.DESC
     TEMP.MF(1) = VALUE
   *
     PDNO = TEMP.MF(1)
   * SET UP FOR KIT EXPLOSION
   *
     MATREAD IOF.REC FROM INV.FNGD, CONO:PDNO ELSE
       MAT IOF.REC = ""
     END
     BOM.KEY = CONO:IOF.BOM
     MATREAD BOM.REC FROM FNGD.BOM, CONO:IOF.BOM ELSE
       MAT BOM.REC = ""
     END
     IF BOM.TYPE = "K" THEN
       IF SHPNO = GEN.SHPNO THEN
         ERRMSG = "Cannot enter a Kitted FNGD item on a General Ship To"
         IF PMPT_NO <= PROMPT_NUM THEN
            SET_FOCUS = 1
            GOTO 91000
         END
       END
       NUM.BOM.PROD = DCOUNT(BOM.PROD,VM)
       FOR NBP = 1 TO NUM.BOM.PROD
         PROD.KEY = CONO:BOM.PROD<1,NBP>
         READ REC FROM INVENTORY, PROD.KEY ELSE
           REC = ""
         END
         IF REC<19> # "" AND REC<19> # ORD.CUST THEN
           ERRMSG = "A different customer owns a product in this finished good: # ":VALUE
           IF PMPT_NO <= PROMPT_NUM THEN
             SET_FOCUS = 1
             GOTO 91000
           END
         END
         IF ORDNO = "N" AND (OPCO.EST.BLD = "A" OR OPCO.EST.BLD = "P") THEN
           READ REC FROM INV.FNGD, PROD.KEY ELSE
             REC = ""
           END
           TEMP.EST = ""
           ECNT = DCOUNT(REC<111>,VM)
           FOR E = 1 TO ECNT WHILE TEMP.EST = ""
             MATREAD EST.REC FROM ESTIMATE, CONO:REC<111,E> THEN
               IF EST.DIV[1,2] = ORD.DIV THEN TEMP.EST = REC<111,E>
             END
           NEXT E
           IF TEMP.EST = "" THEN
             IF PROMPT_NUM <= PMPT_NO THEN
               RETURN_ARR<1,-1> = "W" : DELIM : "Cannot create estimate - No template defined for Div ":ORD.DIV:" / Prod ":BOM.PROD<1,NBP>
             END
           END
         END
       NEXT NBP
     END ELSE
       IF ORDNO = "N" AND (OPCO.EST.BLD = "A" OR OPCO.EST.BLD = "P") THEN
         TEMP.EST = ""
         ECNT = DCOUNT(IOF.ESTIMATE,VM)
         FOR E = 1 TO ECNT WHILE TEMP.EST = ""
           MATREAD EST.REC FROM ESTIMATE, CONO:IOF.ESTIMATE<1,E> THEN
             IF EST.DIV[1,2] = ORD.DIV THEN TEMP.EST = IOF.ESTIMATE<1,E>
           END
         NEXT E
         IF TEMP.EST = "" THEN
           IF PROMPT_NUM <= PMPT_NO THEN
              RETURN_ARR<1,-1> = "W" : DELIM : "Cannot create estimate - No template defined for Div ":ORD.DIV:" / Prod ":VALUE
           END   
         END
       END
     END
   *
   *---- Warehouse
   7020* 
     PMPT_NO = 2
     BEGIN CASE
       CASE WCNT = 1
         VALUE = INV.WHSE.CODE<1,1>
         IF PROMPT_NUM < 2 THEN PROMPT_NUM = 2
         GOTO 7021
     END CASE

     IF PROMPT_NUM < 2 THEN
        SET_FOCUS = 2
        GOTO 93000
     END
     VALUE = WHSE_NO
   7021* 
     IWH.ID = CONO:TEMP.MF(1):"!":VALUE
     MATREAD IWH.REC FROM INV.WHSE, IWH.ID THEN
       ERR.FLG='';ERRMSG='';PERIOD='';OPEN.FLAG = 1                                        
       CALL BUILD_IWH_FI(IWH.ID,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG) 
     END ELSE
       ERRMSG = "Cannot locate warehouse (":VALUE:") for item # ":TEMP.MF(1)
       IF PMPT_NO <= PROMPT_NUM THEN
          IF WCNT = 1 OR WHNO # "" THEN SET_FOCUS = 1 ELSE SET_FOCUS = 2
          GOTO 91000
       END    
     END
     ALREADY.RESV = 0
     PCNT = DCOUNT(OSD.PROD,VM)
     PTR = 1  
     LOOP
       LOCATE TEMP.MF(1) IN OSD.PROD<1>,PTR SETTING L THEN
         IF (OSD.WHSE<1,L> = VALUE) AND (OSD.KIT<1,L> = "N" OR OSD.KIT<1,L> = "K") THEN
            PTR = 0
            LOCATE L IN NUM.ON.SCRN<1>,1 SETTING LFND ELSE LFND = L
         END ELSE
            PTR = L + 1
         END
       END ELSE
         PTR = 0
       END
     UNTIL PTR = 0 DO REPEAT
   *
     MATREAD FGS.REC FROM FNGD.STATS, IWH.ID ELSE
       MAT FGS.REC = ""
     END
   *
     TEMP.MF(2) = VALUE
     RETURN_ARR<1,-1> = "D" : DELIM : 2 : DELIM : VALUE
     
     NUM.PROD = DCOUNT(ODQ.PROD,VM)
     TEMP.KEY = CONO:TEMP.MF(1):"!":TEMP.MF(2)
     LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
       TEMP.CONV = CONVERT(SVM,VM,ORIG.IWH.RESV<1,LINDX>)
       IWH.RSV.FI = TEMP.CONV
       TEMP.CONV = CONVERT(SVM,VM,ORIG.ALOC.AVL<1,LINDX>)
       FGS.A.QTY = TEMP.CONV
       IWH.RESV    = ORIG.IWH.QTY<1,LINDX>
     END ELSE
       ORIG.IWH.QTY = INSERT(ORIG.IWH.QTY,1,LINDX,1,IWH.RESV)
       ORIG.PROD   =INSERT(ORIG.PROD,1,LINDX,1,IWH.ID)
       TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
       ORIG.IWH.RESV=INSERT(ORIG.IWH.RESV,1,LINDX,1,TEMP.STR)
       TEMP.STR = CONVERT(VM,SVM,FGS.A.QTY)
       ORIG.ALOC.AVL=INSERT(ORIG.ALOC.AVL,1,LINDX,0,TEMP.STR)
     END
     IF IWH.ON.HAND - IWH.RESV < 0 THEN
       AVL.RESV = OSD.R.QTY<1,L>
     END ELSE
       AVL.RESV = IWH.ON.HAND - IWH.RESV + OSD.R.QTY<1,L>
     END
     AVL.ALOC = SUM(FGS.M.QTY) - SUM(FGS.A.QTY)
     IF AVL.ALOC < 1 THEN AVL.ALOC = 0
     IF TEMP.MF(14) = "" THEN
        AVL.ALOC = AVL.ALOC + TEMP.MF(16)<1,1,2>
     END ELSE
        AVL.ALOC = AVL.ALOC + TEMP.MF(14)<1,LN>
     END
   *
     PDNO = TEMP.MF(1);WHNO = TEMP.MF(2)
     MATREAD WHSE.REC FROM WAREHOUSE,CONO:WHNO ELSE
       MAT WHSE.REC =""
     END
     IF WHS.DIV # ORD.DIV THEN
       IF WHS.DIV # "00" THEN
         ERRMSG = "Warehouse Division ":WHS.DIV:" doesnot match Order Division ":ORD.DIV
         IF PMPT_NO <= PROMPT_NUM THEN
            SET_FOCUS = 1
            GOTO 91000
         END
       END
     END
   *
   *---- Order qty
   7030*
     PMPT_NO = 3
     IF PROMPT_NUM < 3 THEN
        SET_FOCUS = 3
        GOTO 93000
     END
     VALUE = ORDER_QTY
     TEMP.MF(3) = INT(((VALUE / ICR.MT1) * ICR.DV1) * ICR.DV2 + .5)
     TEMP.MF(4) = INT((VALUE * (1 + (CUST.ADDL.OPS<1,1> / 10000))) + .5)
     TEMP.MF(4) = INT(((TEMP.MF(4) / ICR.MT1) * ICR.DV1) * ICR.DV2 + .5)
     RETURN_ARR<1,-1> = "D" : DELIM : 3 : DELIM : OCONV(INT(((TEMP.MF(3) / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)
    
   *** SFC CORRECTION DURING QC IN REV10B
     PDNO = TEMP.MF(1);WHNO = TEMP.MF(2)
     MATREAD IOF.REC FROM INV.FNGD, CONO:PDNO ELSE
       MAT IOF.REC = ""
     END
     BOM.KEY = CONO:IOF.BOM
     MATREAD BOM.REC FROM FNGD.BOM, CONO:IOF.BOM ELSE
       MAT BOM.REC = ""
     END
   *** SFC
     IF BOM.TYPE = "K" THEN       
       BOM.NUMBER = IOF.BOM
       GOTO ORDER_LINE_BUILD_KIT
     END
   *
   *---- Reserve qty
   7040*
     PMPT_NO = 4
     HOLD.MINV = 0
     IF AVL.RESV < 1 THEN
       IF PROMPT_NUM < 4 THEN PROMPT_NUM = 4
       VALUE = 0
       GOTO 7045
     END

     MAXV = INT(((AVL.RESV / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5)
     MINV = INT(((SUM(TEMP.MF(20)) / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5);* T20852
     HOLD.MINV = MINV ; * 25201
     BEGIN CASE
       CASE TEMP.MF(11) # ""
         DEFAULT = TEMP.MF(11)
       CASE AVL.RESV < TEMP.MF(4)
         DEFAULT = AVL.RESV
       CASE 1
         DEFAULT = TEMP.MF(4)
     END CASE
     DEFAULT = OCONV(INT(((DEFAULT / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV)

     IF PROMPT_NUM < 4 THEN
       RETURN_ARR<1,-1> = "W" : DELIM : "Available on hand quantity = ":OCONV(INT(AVL.RESV / ICR.DV1 * ICR.MT1 / ICR.DV2 + .5),ICR.CNV1)
       RETURN_ARR<1,-1> = "D" : DELIM : 4 : DELIM : DEFAULT
       SET_FOCUS = 4
       GOTO 93000
     END
     VALUE = RESERV_QTY
     IF VALUE > MAXV OR VALUE < MINV THEN
       RETURN_ARR<1,-1> = "E" : DELIM : "*** OUT OF RANGE ***"
       RETURN_ARR<1,-1> = "D" : DELIM : 4 : DELIM : DEFAULT
       SET_FOCUS = 4
       GOTO 93000
     END
   7045*
     RETURN_ARR<1,-1> = "D" : DELIM : 4 : DELIM : VALUE
     BEGIN CASE
       CASE RESV_MODE = "S"
         RTYPE = "M"
         RTOT = TEMP.MF(11)
         RQTY = TEMP.MF(9)
         RSV.NO = TEMP.MF(6)
         REL.NO = TEMP.MF(10)
         REL.QTY = TEMP.MF(17)
         PROD.SEQ = TEMP.MF(19)
         KIT.TYPE = TEMP.MF(18)
         PICK.QTY = TEMP.MF(20)

         ACTION = ("R-":LN);CUSTNO = ORD.CUST;RESV.TOT = RTOT;TMP.FI.QTY = RQTY
         TMP.FI.NO = RSV.NO;TMP.REL.NO = REL.NO;TMP.REL.QTY = REL.QTY
         RELNO = "";RELQTY = ""
         
         GOSUB ORDER_RESERVE_SEL
         
         RECP.CNT = DCOUNT(TEMP.MF(6),SVM)
         FOR N = 1 TO RECP.CNT
           RECP.NO = TEMP.MF(6)<1,1,N>
           LOCATE RECP.NO IN IWH.RECP.NO<1>,1 SETTING FNO THEN
             IWH.RSV.FI<1,FNO> = IWH.RSV.FI<1,FNO> + TEMP.MF(9)<1,1,N>
           END
         NEXT N
         RECP.CNT = DCOUNT(RSV.NO,SVM)
         FOR N = 1 TO RECP.CNT
           RECP.NO = RSV.NO<1,1,N>
           LOCATE RECP.NO IN IWH.RECP.NO<1>,1 SETTING FNO THEN
             IWH.RSV.FI<1,FNO> = IWH.RSV.FI<1,FNO> - RQTY<1,1,N>
           END
         NEXT N
         TEMP.KEY = CONO:TEMP.MF(1):"!":TEMP.MF(2)
         LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
           ORIG.IWH.QTY<1,LINDX> = ORIG.IWH.QTY<1,LINDX> - OSD.R.QTY<1,LN> + RTOT
           TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
           ORIG.IWH.RESV<1,LINDX> = TEMP.STR
         END
         TEMP.MF(6) = RSV.NO
         TEMP.MF(9) = RQTY
         TEMP.MF(10) = REL.NO
         TEMP.MF(17) = REL.QTY
       CASE 1
         * there is no type "numeric with no spaces" so I had to improvize.
         IF VALUE = "" THEN VALUE = 0
         IF VALUE < HOLD.MINV THEN 
           ERRMSG = "INVALID ENTRY CHECK OPEN PICK TICKETS/RELEASES"
           IF PMPT_NO <= PROMPT_NUM THEN
             SET_FOCUS = 4
             GOTO 91000
           END
         END ELSE
           RTYPE = "B"
           RTOT = INT(((VALUE / ICR.MT1) * ICR.DV1) * ICR.DV2 + .5)
           RQTY     = TEMP.MF(9)
           RSV.NO   = TEMP.MF(6)
           REL.NO   = TEMP.MF(10)
           REL.QTY  = TEMP.MF(17)
           PROD.SEQ = TEMP.MF(19)
           KIT.TYPE = TEMP.MF(18)
           *CALL ORDER.RESERVE.SEL(CONO,("R-":LN),ORD.CUST,ORDNO,SHPNO,PDNO,WHNO,RTYPE,RTOT,RQTY,RSV.NO,REL.NO,REL.QTY,"","",PROD.SEQ,KIT.TYPE,"")

           ACTION = ("R-":LN);CUSTNO = ORD.CUST;RESV.TOT = RTOT;TMP.FI.QTY = RQTY;TMP.FI.NO = RSV.NO
           TMP.REL.NO = REL.NO;TMP.REL.QTY = REL.QTY;RELNO = "";RELQTY = "";PICK.QTY = ""           
           GOSUB ORDER_RESERVE_SEL
           RECP.CNT = DCOUNT(TEMP.MF(6),SVM)
           FOR N = 1 TO RECP.CNT
             RECP.NO = TEMP.MF(6)<1,1,N>
             LOCATE RECP.NO IN IWH.RECP.NO<1>,1 SETTING FNO THEN
               IWH.RSV.FI<1,FNO> = IWH.RSV.FI<1,FNO> + TEMP.MF(9)<1,1,N>
             END
           NEXT N
           RECP.CNT = DCOUNT(RSV.NO,SVM)
           FOR N = 1 TO RECP.CNT
             RECP.NO = RSV.NO<1,1,N>
             LOCATE RECP.NO IN IWH.RECP.NO<1>,1 SETTING FNO THEN
               IWH.RSV.FI<1,FNO> = IWH.RSV.FI<1,FNO> - RQTY<1,1,N>
             END
           NEXT N
           TEMP.KEY = CONO:TEMP.MF(1):"!":TEMP.MF(2)
           LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
             ORIG.IWH.QTY<1,LINDX> = ORIG.IWH.QTY<1,LINDX> - OSD.R.QTY<1,LN> + RTOT
             TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
             ORIG.IWH.RESV<1,LINDX> = TEMP.STR
           END
           TEMP.MF(6) = RSV.NO
           TEMP.MF(9) = RQTY
           TEMP.MF(10) = REL.NO
           TEMP.MF(17) = REL.QTY
         END
     END CASE
     TEMP.MF(11) = RTOT
     RETURN_ARR<1,-1> = "D" : DELIM : 4 : DELIM : OCONV(INT(((RTOT / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)
     
     IF TEMP.MF(11) > TEMP.MF(4) THEN
       IF PROMPT_NUM <= PMPT_NO THEN
         RETURN_ARR<1,-1> = "W" : DELIM : "Reserve is more than required"
       END
     END
   *
   *---- Manufacture qty
   7050* 
     PMPT_NO = 5
     IF AVL.ALOC < 1 THEN
       IF PROMPT_NUM < 5 THEN PROMPT_NUM = 5
       VALUE = 0;GOTO 7055
     END
     
     MINV = 0;MAXV = AVL.ALOC
     BEGIN CASE
       CASE TEMP.MF(14) # ""
         DEFAULT = TEMP.MF(14)
       CASE AVL.ALOC < TEMP.MF(4) - TEMP.MF(11)
         DEFAULT = AVL.ALOC
       CASE 1
         DEFAULT = TEMP.MF(4) - TEMP.MF(11)
     END CASE
     DEFAULT = OCONV(INT(((DEFAULT / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV)
     IF PROMPT_NUM < 5 THEN
       RETURN_ARR<1,-1> = "W" : DELIM : "Available manufacture quantity = ":OCONV(INT(AVL.ALOC / ICR.DV1 * ICR.MT1 / ICR.DV2 + .5),ICR.CNV1)
       RETURN_ARR<1,-1> = "D" : DELIM : 5 : DELIM : DEFAULT
       SET_FOCUS = 5
       GOTO 93000
     END
     VALUE = ALLOC_QTY
   7055* 
     BEGIN CASE
       CASE JOB_ALLOC_DATA<1,1> = "J";* THIS IS FOR THE S OPTION
         AQTY = "";RCNT = DCOUNT(TEMP.MF(13)<1,1>,SVM)
         OLD.QTY = TEMP.MF(12);* T20234
         FOR R = 1 TO RCNT
           LOCATE TEMP.MF(13)<1,1,R> IN FGS.JOB<1>,1 SETTING JPTR THEN
             AQTY<1,JPTR> = TEMP.MF(12)<1,1,R>
           END
           TEMP.MF(12)<1,1,R> = 0
         NEXT R
         ATYPE = "M";ATOT = TEMP.MF(14)
         *CALL ORDER.JOB.SEL(CONO,ORDNO,PDNO,WHNO,ATYPE,ATOT,AQTY)
         AQTY = JOB_ALLOC_DATA<1,2>
         SWAP "#" WITH VM IN AQTY
         FOR A = 1 TO DCOUNT(AQTY,VM)
            AQTY<1,A> = INT(((AQTY<1,A>/ICR.MT1)*ICR.DV1)*ICR.DV2+.5)
         NEXT A
         *ATOT = JOB_ALLOC_DATA<1,3>
         ATOT = SUM(AQTY)
         FOR R = 1 TO RCNT
           LOCATE TEMP.MF(13)<1,1,R> IN FGS.JOB<1>,1 SETTING RINDX THEN
             FGS.A.QTY<1,RINDX> = FGS.A.QTY<1,RINDX> - OLD.QTY<1,1,R>
           END
         NEXT R
         RCNT = DCOUNT(AQTY,VM)
         FOR R = 1 TO RCNT
           IF AQTY<1,R> > 0 THEN
             LOCATE FGS.JOB<1,R> IN TEMP.MF(13)<1,1>,1 SETTING JPTR ELSE
               TEMP.MF(13)<1,1,JPTR> = FGS.JOB<1,R>
             END
             TEMP.MF(12)<1,1,JPTR> = AQTY<1,R>
             FGS.A.QTY<1,R> = FGS.A.QTY<1,R> + AQTY<1,R>;*T20234
           END
         NEXT R
         TEMP.STR = CONVERT(VM,SVM,FGS.A.QTY)
         ORIG.ALOC.AVL<1,LINDX> = TEMP.STR
       CASE 1
         TEMP.MF(14) = INT(((VALUE / ICR.MT1) * ICR.DV1) * ICR.DV2 + .5)
         ATOT = INT(((VALUE / ICR.MT1) * ICR.DV1) * ICR.DV2 + .5)
         AQTY = "";RCNT = DCOUNT(TEMP.MF(13)<1,1>,SVM)
         OLD.QTY = TEMP.MF(12);* T20234
         FOR R = 1 TO RCNT
           LOCATE TEMP.MF(13)<1,1,R> IN FGS.JOB<1>,1 SETTING JPTR THEN
             AQTY<1,JPTR> = TEMP.MF(12)<1,1,R>
           END
           TEMP.MF(12)<1,1,R> = 0
         NEXT R
         ATYPE = "B"
         *CALL ORDER.JOB.SEL(CONO,ORDNO,PDNO,WHNO,ATYPE,ATOT,AQTY)
         GOSUB ORDER_JOB_SEL
         FOR R = 1 TO RCNT
           LOCATE TEMP.MF(13)<1,1,R> IN FGS.JOB<1>,1 SETTING RINDX THEN
             FGS.A.QTY<1,RINDX> = FGS.A.QTY<1,RINDX> - OLD.QTY<1,1,R>
           END
         NEXT R
         RCNT = DCOUNT(AQTY,VM)
         FOR R = 1 TO RCNT
           IF AQTY<1,R> > 0 THEN
             LOCATE FGS.JOB<1,R> IN TEMP.MF(13)<1,1>,1 SETTING JPTR ELSE
               TEMP.MF(13)<1,1,JPTR> = FGS.JOB<1,R>
             END
             TEMP.MF(12)<1,1,JPTR> = AQTY<1,R>
             FGS.A.QTY<1,R> = FGS.A.QTY<1,R> + AQTY<1,R>;*T20234
           END
         NEXT R
         TEMP.STR = CONVERT(VM,SVM,FGS.A.QTY)
         ORIG.ALOC.AVL<1,LINDX> = TEMP.STR
     END CASE
     TEMP.MF(14) = ATOT
     RETURN_ARR<1,-1> = "D" : DELIM : 5 : DELIM : OCONV(INT(((ATOT / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)
     IF TEMP.MF(14) > 0 AND TEMP.MF(14) > TEMP.MF(4) - TEMP.MF(11) THEN
       IF PROMPT_NUM <= PMPT_NO THEN
         RETURN_ARR<1,-1> = "W" : DELIM : "Manufacturing more than required"
       END
     END
   *
     IF TEMP.MF(13)<1,1,2> # "" THEN
       RETURN_ARR<1,-1> = "D" : DELIM : 13 : DELIM : "MULTI"
     END ELSE
       RETURN_ARR<1,-1> = "D" : DELIM : 13 : DELIM : TEMP.MF(13)
     END
     IF MODE = "A" THEN
       INDX = DCOUNT(OSD.PROD,VM) + 1
       GOSUB 7920
     END
   *
   *---- Unit Price
   7060* 
     PMPT_NO = 6
     B.QTY = TEMP.MF(3) - TEMP.MF(11) - TEMP.MF(14) - OSD.S.QTY<1,INDX>;* 20905
     BEGIN CASE
       CASE CATG.SALE.TYPE = "EP" AND B.QTY > 0;* 20905
         DEFAULT = 0
       CASE CATG.SALE.TYPE = "EP"
         DEFAULT = 0
         JCNT = DCOUNT(TEMP.MF(13)<1,1>,SVM)
         FOR J = JCNT TO 1 STEP -1 UNTIL DEFAULT
           MATREAD JOB.REC FROM JOB, CONO:TEMP.MF(13)<1,1,J> THEN
             IF JOB.EST # "" THEN
               MATREAD EST.REC FROM ESTIMATE, CONO:JOB.EST THEN
                 BEGIN CASE
                   CASE INV.UNIT<1,5> = "M"
                     UNIT = 1
                   CASE INV.UNIT<1,5> = "C"
                     UNIT = 10
                   CASE 1
                     UNIT = 1000
                 END CASE
                 QTY = OCONV(INT(((TEMP.MF(3) / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV)
                 LOCATE QTY IN EST.QTY<1>,1 BY "AR" SETTING QPTR ELSE NULL
                 IF QPTR > DCOUNT(EST.QTY,VM) THEN QPTR = QPTR - 1
                 DEFAULT = INT(EST.OM.PRICE.M<1,QPTR> * 100 / UNIT + .5)
               END
             END
           END
         NEXT J
         IF NOT(DEFAULT) THEN
           FCNT = DCOUNT(TEMP.MF(6)<1,1>,SVM)
           FOR F = FCNT TO 1 STEP -1 UNTIL DEFAULT
             LOCATE TEMP.MF(6)<1,1,F> IN IWH.RECP.NO<1>,1 SETTING FPTR THEN
               MATREAD JOB.REC FROM JOB, CONO:IWH.PO.NO.FI<1,FPTR> THEN
                 IF JOB.EST # "" THEN
                   MATREAD EST.REC FROM ESTIMATE, CONO:JOB.EST THEN
                     BEGIN CASE
                       CASE INV.UNIT<1,5> = "M"
                         UNIT = 1
                       CASE INV.UNIT<1,5> = "C"
                         UNIT = 10
                       CASE 1
                         UNIT = 1000
                     END CASE
                     QTY = OCONV(INT(((TEMP.MF(3) / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV)
                     LOCATE QTY IN EST.QTY<1>,1 BY "AR" SETTING QPTR ELSE NULL
                     IF QPTR > DCOUNT(EST.QTY,VM) THEN QPTR = QPTR - 1
                     DEFAULT = INT(EST.OM.PRICE.M<1,QPTR> * 100 / UNIT + .5)
                   END
                 END
               END
             END
           NEXT F
         END
       CASE CATG.SALE.TYPE = "PT"
         MATREAD PGT.REC FROM PRICE.TABLE, CONO:IWH.PRICE.GRP ELSE
           MAT PGT.REC=''
         END
         DEFAULT = ""
         QTY = OCONV(INT(((TEMP.MF(3) / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV)
         QCNT = DCOUNT(PGT.QTY,VM)
         FOR Q = 1 TO QCNT WHILE DEFAULT = ""
           IF QTY <= PGT.QTY<1,Q>+0 THEN
             DEFAULT = PGT.PRICE<1,Q>
           END
         NEXT Q
         IF OSD.G.QTY<1,LN> # TEMP.MF(3) THEN TEMP.MF(15) = ""
       CASE CATG.SALE.TYPE = "ES"
         DEFAULT = IWH.EST.SALE
       CASE CATG.SALE.TYPE = "SP"
         BEGIN CASE
           CASE NOT(NUM(CUST.PRICE.CODE))
             DEFAULT = IWH.SELL<1,1>
           CASE CUST.PRICE.CODE > 0 AND CUST.PRICE.CODE < 5
             DEFAULT = IWH.SELL<1,CUST.PRICE.CODE>
           CASE 1
             DEFAULT = IWH.SELL<1,1>
         END CASE
       CASE CATG.SALE.TYPE = "SD"
         DEFAULT = IWH.STD.COST
       CASE CATG.SALE.TYPE = "AV"
         DEFAULT = IWH.AVG.COST
       CASE CATG.SALE.TYPE = "LP"
         DEFAULT = IWH.COST.FI<1,DCOUNT(IWH.COST.FI,VM)>
   *--- CATG.SALE.TYPE = "CB"
       CASE CATG.FNGD.TYPE = "ES"
         DEFAULT = IWH.EST.SALE
       CASE CATG.FNGD.TYPE = "SP"
         BEGIN CASE
           CASE NOT(NUM(CUST.PRICE.CODE))
             DEFAULT = IWH.SELL<1,1>
           CASE CUST.PRICE.CODE > 0 AND CUST.PRICE.CODE < 5
             DEFAULT = IWH.SELL<1,CUST.PRICE.CODE>
           CASE 1
             DEFAULT = IWH.SELL<1,1>
         END CASE
       CASE CATG.FNGD.TYPE = "SD"
         DEFAULT = IWH.STD.COST
       CASE CATG.FNGD.TYPE = "AV"
         DEFAULT = IWH.AVG.COST
       CASE CATG.FNGD.TYPE = "LP"
         DEFAULT = IWH.COST.FI<1,DCOUNT(IWH.COST.FI,VM)>
       CASE 1
         DEFAULT = 0
     END CASE
     DEFAULT = INT(DEFAULT + .5)
     BEGIN CASE
       CASE CATG.SALE.TYPE = "EP" AND ORD.ESTIMATE = "" AND B.QTY > 0;* T20905
         TEMP.MF(15) = DEFAULT
         RETURN_ARR<1,-1> = "D" : DELIM : 6 : DELIM : OCONV(TEMP.MF(15),"MD4")
       CASE OPCO.PRC.MNT = "O" OR OPCO.PRC.MNT = "B"
         IF TEMP.MF(15) # "" THEN
           DEFAULT = TEMP.MF(15)
         END
         DEFAULT = OCONV(DEFAULT,"MD4")
         IF PROMPT_NUM < 6 THEN
            SET_FOCUS = 6
            RETURN_ARR<1,-1> = "D" : DELIM : 6 : DELIM : DEFAULT
            GOTO 93000
         END
         VALUE = ICONV(UNIT_PRICE,"MD4")
         TEMP.MF(15) = VALUE
       CASE TEMP.MF(15) = ""
         TEMP.MF(15) = DEFAULT
         RETURN_ARR<1,-1> = "D" : DELIM : 6 : DELIM : OCONV(TEMP.MF(15),"MD4")
       CASE 1
         RETURN_ARR<1,-1> = "D" : DELIM : 6 : DELIM : OCONV(TEMP.MF(15),"MD4")
     END CASE
*     IF (OPTION = "A" AND LNFLG = 0) THEN
     IF (MODE = "A" AND LNFLG = 0) THEN
* the following stmt has been changed since.. it is duplicating rows of grid
       INDX = DCOUNT(OSD.PROD,VM);* + 1 
       NUM.ON.SCRN<1,LN> = INDX
     END ELSE
       INDX = NUM.ON.SCRN<1,LN>
     END
     OSD.PROD<1,INDX> = TEMP.MF(1)
     OSD.WHSE<1,INDX> = TEMP.MF(2)
     OSD.G.QTY<1,INDX> = TEMP.MF(3)
     OSD.O.QTY<1,INDX> = TEMP.MF(4)
     OSD.RECP.NO<1,INDX> = TEMP.MF(6)
     OSD.FI.QTY<1,INDX> = TEMP.MF(9)
     OSD.REL.NO<1,INDX> = TEMP.MF(10)
     OSD.R.QTY<1,INDX> = TEMP.MF(11)
     OSD.JOB.QTY<1,INDX> = TEMP.MF(12)
     OSD.JOB<1,INDX> = TEMP.MF(13)
     OSD.A.QTY<1,INDX> = TEMP.MF(14)
     OSD.PRICE<1,INDX> = TEMP.MF(15)
     OSD.OLD.QTY<1,INDX> = TEMP.MF(16)
     OSD.REL.QTY<1,INDX> = TEMP.MF(17)
     OSD.KIT<1,INDX>     = "N"
     IF MODE = "A" THEN
       OSD.BOM.NUM<1,INDX>  = ''
       NUM.PROD= DCOUNT(OSD.PROD,VM)
       PTR = 1
       SEQ.FND = 0
       LOOP
         LOCATE TEMP.MF(1) IN OSD.PROD<1>,PTR SETTING INDX1 THEN
           SEQ.FND = SEQ.FND + 1
           PTR = INDX1
         END ELSE
           PTR = 0
         END
       WHILE PTR DO
         PTR = PTR + 1
       REPEAT
       OSD.PROD.SEQ<1,INDX> = SEQ.FND
     END
     TEMP.MF(19) = OSD.PROD.SEQ<1,INDX>
     IF MODE = "C" THEN
     END
     PQTY = OSD.G.QTY<1,INDX> / 1000
     OSD.AMT<1,INDX> = INT(OSD.PRICE<1,LN> / 100 * PQTY / (INV.COST.WT / 100) + .5)
     DEFAULT = ""
     LINES = DCOUNT(NUM.ON.SCRN,VM)
     SET_FOCUS = 9
     GOTO 93000
   RETURN
********** END OF MAIN
*
********** START OF SUBROUTINES
   PRE_PROCESS:
     O.ODQ.PROD = "";O.ODQ.WHSE = "";O.ODQ.SEQ = "";O.ODQ.KIT = "";ORIG.PROD = "";ORIG.IWH.RESV = "";ORIG.IWH.QTY = "";ORIG.ALOC.AVL = ""
     ORIG.PROD = ""
     ORIG.IWH.RESV = ""
     ORIG.IWH.QTY = ""
     ORIG.ALOC.AVL = ""

     IF ISNEW = 0 THEN
       STATUS = "L"; SHPNO = "ALL"
       CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)
       SHPNO = ""
       O.ODQ.PROD = ODQ.PROD
       O.ODQ.WHSE = ODQ.WHSE
       O.ODQ.SEQ  = ODQ.PROD.SEQ
       O.ODQ.KIT  = ODQ.KIT
       NUM.PROD = DCOUNT(ODQ.PROD,VM)
       FOR P = 1 TO NUM.PROD
         IWH.ID = CONO:ODQ.PROD<1,P>
         MATREAD INV.REC FROM INVENTORY, IWH.ID THEN
            IWH.ID = IWH.ID:"!":ODQ.WHSE<1,P>
            MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
               MAT CATG.REC = ""
            END
            MATREAD IWH.REC FROM INV.WHSE, IWH.ID THEN
               ERR.FLG='';ERRMSG='';PERIOD='';OPEN.FLAG = 1
               CALL BUILD_IWH_FI(IWH.ID,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
               MATREAD FGS.REC FROM FNGD.STATS, IWH.ID ELSE
                  MAT FGS.REC = ""
               END
               PFND = 1   ; * C34499  assume it will be found
               LOCATE IWH.ID IN ORIG.PROD<1>,1 SETTING LINDX ELSE PFND = 0
               IF PFND = 0 OR ODQ.KIT<1,P> = 'M' THEN
                  *If it is a component of a kit, then add it to the end of the list
                  IF ODQ.KIT<1,P> = 'M' THEN
                     LINDX = DCOUNT(ORIG.PROD<1>,VM) + 1
                  END
                  ORIG.IWH.QTY  = INSERT(ORIG.IWH.QTY,1,LINDX,1,IWH.RESV)
                  ORIG.PROD     = INSERT(ORIG.PROD,1,LINDX,1,IWH.ID)
                  TEMP.STR      = CONVERT(VM,SVM,IWH.RSV.FI)
                  ORIG.IWH.RESV = INSERT(ORIG.IWH.RESV,1,LINDX,1,TEMP.STR)
                  TEMP.STR      = CONVERT(VM,SVM,FGS.A.QTY)
                  ORIG.ALOC.AVL = INSERT(ORIG.ALOC.AVL,1,LINDX,1,TEMP.STR)
               END
            END ELSE
               MAT INV.REC = ""
            END
         END
       NEXT P
     END
     NUM.ON.SCRN = ""
     K = 0
     NUM.PROD = DCOUNT(OSD.PROD,VM);LNFLG = 0
     FOR I = 1 TO NUM.PROD
       IF OSD.KIT<1,I>  # "M" THEN
         K = K + 1
         NUM.ON.SCRN<1,K> = I
       END
     NEXT I
     GOSUB 8888
     IF MODE = "C" THEN 
        GOTO 110010
     END ELSE
       IF MODE = "A" THEN GOTO 110011
     END
RETURN

8888 *
  MAT TEMP.MF = ""
  INDX = NUM.ON.SCRN<1,LN>
  IF INDX > 0 THEN
    TEMP.MF(01) = OSD.PROD<1,INDX>
    TEMP.MF(02) = OSD.WHSE<1,INDX>
    TEMP.MF(04) = OSD.O.QTY<1,INDX>
    TEMP.MF(06) = OSD.RECP.NO<1,INDX>
    TEMP.MF(09) = OSD.FI.QTY<1,INDX>
    TEMP.MF(10) = OSD.REL.NO<1,INDX>
    TEMP.MF(11) = OSD.R.QTY<1,INDX>
    TEMP.MF(12) = OSD.JOB.QTY<1,INDX>
    TEMP.MF(13) = OSD.JOB<1,INDX>
    TEMP.MF(14) = OSD.A.QTY<1,INDX>
    IF OSD.KIT<1,INDX> = "K" THEN
      TEMP.MF(15) = OSD.KIT.PRICE<1,INDX>
      TEMP.MF(03) = OSD.KIT.G.QTY<1,INDX>
    END ELSE
      TEMP.MF(15) = OSD.PRICE<1,INDX>
      TEMP.MF(03) = OSD.G.QTY<1,INDX>
    END
    TEMP.MF(16) = OSD.OLD.QTY<1,INDX>
    TEMP.MF(17) = OSD.REL.QTY<1,INDX>
    TEMP.MF(18) = OSD.KIT<1,INDX>
    TEMP.MF(19) = OSD.PROD.SEQ<1,INDX>
    TEMP.MF(20) = OSD.P.QTY<1,INDX>;* T20852
  END
RETURN

GET_PRE_DATA:

DIM TEMP.ORD.DET.REC(50)
MAT TEMP.ORD.DET.REC = ""
TEMP.OSD.MAT = ""
MATBUILD TEMP.OSD.MAT FROM ORD.DET.REC USING "ð"
MAT ORD.DET.REC = ""
*IF ISNEW = 0 THEN
   MATREAD ORD.DET.REC FROM ORDER.DETAIL,CONO:ORDNO:"!":SHIPNO ELSE MAT TEMP.ORD.DET.REC = ""
*END
MAT TEMP.ORD.DET.REC = MAT ORD.DET.REC
MAT ORD.DET.REC = ""
MATPARSE ORD.DET.REC FROM TEMP.OSD.MAT,DELIM
   PD_CNT = DCOUNT(OSD.PROD,VM)
   FOR PD=1 TO PD_CNT 
      IWH.ID = CONO:OSD.PROD<1,PD>
      MATREAD INV.REC FROM INVENTORY, IWH.ID THEN
         MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE THEN
            IWH.ID = IWH.ID:"!":OSD.WHSE<1,PD>
            MATREAD IWH.REC FROM INV.WHSE, IWH.ID THEN
               ERR.FLG='';ERRMSG='';PERIOD='';OPEN.FLAG=1
               CALL BUILD_IWH_FI(IWH.ID,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
               $INCLUDE ICSBP INV.UM.CNV
               MATREAD FGS.REC FROM FNGD.STATS, IWH.ID ELSE
                  MAT FGS.REC = ""
               END
               TEMP.KEY = CONO:OSD.PROD<1,PD>:"!":OSD.WHSE<1,PD>
               LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX ELSE
                  ORIG.IWH.QTY  = INSERT(ORIG.IWH.QTY,1,LINDX,1,IWH.RESV)
                  ORIG.PROD     = INSERT(ORIG.PROD,1,LINDX,1,IWH.ID)
                  TEMP.STR      = CONVERT(VM,SVM,IWH.RSV.FI)
                  ORIG.IWH.RESV = INSERT(ORIG.IWH.RESV,1,LINDX,1,TEMP.STR)
                  TEMP.STR      = CONVERT(VM,SVM,FGS.A.QTY)
                  ORIG.ALOC.AVL = INSERT(ORIG.ALOC.AVL,1,LINDX,0,TEMP.STR)
               END
*RESV
               RECP.CNT = DCOUNT(OSD.RECP.NO<1,PD>,SVM)
               FOR N = 1 TO RECP.CNT
                  RECP.NO = OSD.RECP.NO<1,PD,N>
                  LOCATE RECP.NO IN IWH.RECP.NO<1>,1 SETTING FNO THEN
                     IWH.RSV.FI<1,FNO> = IWH.RSV.FI<1,FNO> + OSD.FI.QTY<1,PD,N>
                  END
               NEXT N
               RECP.CNT = DCOUNT(OSD.RECP.NO,SVM)
               FOR N = 1 TO RECP.CNT
                  RECP.NO = OSD.RECP.NO<1,PD,N>
                  LOCATE RECP.NO IN IWH.RECP.NO<1>,1 SETTING FNO THEN
                     IWH.RSV.FI<1,FNO> = IWH.RSV.FI<1,FNO> - OSD.FI.QTY<1,PD,N>
                  END
               NEXT N
               TEMP.KEY = CONO:OSD.PROD<1,PD>:"!":OSD.WHSE<1,PD>
               LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
                  IF TEMP.ORD.DET.REC(8)<1,PD> # "" THEN
                     ORIG.IWH.QTY<1,LINDX> = ORIG.IWH.QTY<1,LINDX> - TEMP.ORD.DET.REC(8)<1,PD> + OSD.R.QTY<1,PD>
                  END ELSE
                     ORIG.IWH.QTY<1,LINDX> = ORIG.IWH.QTY<1,LINDX> - OSD.R.QTY<1,PD> + OSD.R.QTY<1,PD>
                  END
                  TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
                  ORIG.IWH.RESV<1,LINDX> = TEMP.STR
               END
*REL
               RCNT = DCOUNT(OSD.JOB<1,PD>,SVM)
               AQTY = ""
               FOR R = 1 TO RCNT
                  LOCATE OSD.JOB<1,PD,R> IN FGS.JOB<1>,1 SETTING JPTR THEN
                     AQTY<1,JPTR> = OSD.JOB.QTY<1,PD,R>
                  END
                  OSD.JOB.QTY<1,PD,R> = 0
               NEXT R
               FOR R = 1 TO RCNT
                  LOCATE OSD.JOB<1,PD,R> IN FGS.JOB<1>,1 SETTING RINDX THEN
                     FGS.A.QTY<1,RINDX> = FGS.A.QTY<1,RINDX> - OSD.JOB.QTY<1,PD,R>
                  END
               NEXT R
               RCNT = DCOUNT(AQTY,VM)
               FOR R = 1 TO RCNT
                  IF AQTY<1,R> > 0 THEN
                     LOCATE FGS.JOB<1,R> IN OSD.JOB<1,PD>,1 SETTING JPTR ELSE
                        OSD.JOB<1,PD,JPTR> = FGS.JOB<1,R>
                     END
                     OSD.JOB.QTY<1,PD,JPTR> = AQTY<1,R>
                     FGS.A.QTY<1,R> = FGS.A.QTY<1,R> + AQTY<1,R>;*T20234
                  END
               NEXT R
               TEMP.STR = CONVERT(VM,SVM,FGS.A.QTY)
               ORIG.ALOC.AVL<1,LINDX> = TEMP.STR
            END ELSE 
               MAT IWH.REC = ""
            END
         END ELSE
            MAT CATG.REC = ""
         END
      END ELSE
         MAT INV.REC = ""
      END
   NEXT PD   
RETURN

110010*
   GOSUB GET_PRE_DATA
   SHPNO = SHIPNO
   GOSUB 7800
   IF LNFLG THEN
     IWH.ID = CONO:OSD.PROD<1,LN>
     MATREAD INV.REC FROM INVENTORY, IWH.ID THEN
       MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE THEN
         IWH.ID = IWH.ID:"!":OSD.WHSE<1,LN>
         MATREAD IWH.REC FROM INV.WHSE, IWH.ID THEN
            ERR.FLG='';ERRMSG='';PERIOD='';OPEN.FLAG=1
            CALL BUILD_IWH_FI(IWH.ID,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
            $INCLUDE ICSBP INV.UM.CNV
            MATREAD FGS.REC FROM FNGD.STATS, IWH.ID ELSE
               MAT FGS.REC = ""
            END
            LOCATE IWH.ID IN ORIG.PROD<1>,1 SETTING LINDX THEN
               TEMP.CONV = CONVERT(SVM,VM,ORIG.IWH.RESV<1,LINDX>)
               IWH.RSV.FI = TEMP.CONV
               IWH.RESV = ORIG.IWH.QTY<1,LINDX>
               TEMP.CONV = CONVERT(SVM,VM,ORIG.ALOC.AVL<1,LINDX>)
               FGS.A.QTY = TEMP.CONV
            END
            IF IWH.ON.HAND - IWH.RESV < 0 THEN
               AVL.RESV = OSD.R.QTY<1,LN>
            END ELSE
               IF TEMP.ORD.DET.REC(8)<1,LN> # "" THEN
                  AVL.RESV = IWH.ON.HAND - IWH.RESV + OSD.R.QTY<1,LN>
               END ELSE
                  AVL.RESV = IWH.ON.HAND - IWH.RESV;* + OSD.R.QTY<1,LN>
               END
            END
            AVL.ALOC = SUM(FGS.M.QTY) - SUM(FGS.A.QTY)
            IF AVL.ALOC < 1 THEN AVL.ALOC = 0
               IF TEMP.ORD.DET.REC(8)<1,LN> # "" THEN
                  AVL.ALOC = AVL.ALOC + TEMP.ORD.DET.REC(9)<1,LN>
               END ELSE
                  AVL.ALOC = AVL.ALOC + OSD.A.QTY<1,LN>
               END
               *GOSUB 8888
               GOTO 7030
            END ELSE
               ERRMSG = "Cannot locate warehouse (":OSD.WHSE<1,LN>:") for item # ":OSD.PROD<1,LN>
               GOTO 91000
            END
         END ELSE
            ERRMSG = "Cannot locate Product Line # ":INV.LINE
            GOTO 91000
         END
      END ELSE
         ERRMSG = "Cannot locate finished goods # ":OSD.PROD<1,LN>
         GOTO 91000
      END
   END ELSE
      *GOSUB 8888
      GOTO 7010
   END
RETURN

7800* 
  LN.NO = LN
  IF NUM(LN.NO) THEN
    TEMP.INDX = NUM.ON.SCRN<1,LN.NO>
  END ELSE
    TEMP.INDX = 0
  END
  ERR.MSG = 0
  BEGIN CASE
    CASE SUM(OSD.P.QTY<1,TEMP.INDX>)
      LNFLG = 5
    CASE OSD.KIT<1,TEMP.INDX> = "K"
      IF (SUM(OSD.FI.QTY<1,TEMP.INDX>) + SUM(OSD.FI.QTY<1,TEMP.INDX+1>)) > 0 THEN
        LNFLG = 3
      END
    CASE OSD.I.QTY<1,TEMP.INDX> > 0
      LNFLG = 1
    CASE OSD.S.QTY<1,TEMP.INDX> > 0
      LNFLG = 2
    CASE OSD.R.QTY<1,TEMP.INDX> > 0 OR OSD.RECP.NO<1,TEMP.INDX> # ""
      LNFLG = 3
    CASE OSD.KIT.R.QTY<1,TEMP.INDX> > 0
      LNFLG = 3
    CASE OSD.A.QTY<1,TEMP.INDX> > 0 OR OSD.JOB<1,TEMP.INDX> # ""
      LNFLG = 4
  END CASE
RETURN

7920 *
     IF OSD.COMMENT<1,INDX> = "" THEN
       STATUS = ""
     END ELSE
       STATUS = "*"
     END
     RETURN_ARR<1,-1> = "D" : DELIM : 9 : DELIM : STATUS
     
     PTR = 1
     LOOP
       LOCATE OSD.PROD<1,INDX> IN ODQ.PROD<1>,PTR SETTING PPTR THEN
         BEGIN CASE
           CASE (OSD.WHSE<1,INDX> # ODQ.WHSE<1,PPTR>) OR (OSD.KIT<1,INDX> # ODQ.KIT<1,PPTR>) OR (OSD.PROD.SEQ<1,INDX> # ODQ.PROD.SEQ<1,PPTR>) 
           CASE ODQ.G.QTY<1,PPTR>+0 > 0;*T20234
             STATUS = "*"
             PTR = 0
           CASE 1
             STATUS = ""
             PTR = 0
         END CASE
       END ELSE
         STATUS = ""
         PTR = 0
       END
     WHILE PTR DO
       PTR = PPTR + 1
     REPEAT
     RETURN_ARR<1,-1> = "D" : DELIM : 10 : DELIM : STATUS

     STATUS = ""
     IF OSD.REL.NO<1,INDX> # "" THEN
       STATUS = "*"
     END ELSE
       OCNT = DCOUNT(ORD.REL.NO,VM)
       FOR O = 1 TO OCNT UNTIL STATUS # ""
         MATREAD ORR.REC FROM ORDER.RELEASE, CONO:ORD.REL.NO<1,O> THEN
           IF ORR.STATUS<1,1> # "COMPLETED" AND ORR.SHIP.TO = SHPNO AND ORR.QTY<1,INDX>+0 > 0 THEN
             STATUS = "*"
           END
         END
       NEXT O
     END
     RETURN_ARR<1,-1> = "D" : DELIM : 11 : DELIM : STATUS

     IF OSD.KIT<1,INDX> = "N" THEN
       BEGIN CASE
         CASE OSD.O.QTY<1,INDX> < 1
           STATUS = "O"
         CASE OSD.I.QTY<1,INDX> >= OSD.O.QTY<1,INDX>
           STATUS = "I"
         CASE OSD.S.QTY<1,INDX> >= OSD.O.QTY<1,INDX>
           STATUS = "S"
         CASE OSD.A.QTY<1,INDX> < 1
           STATUS = "O"
         CASE OSD.F.QTY<1,INDX> >= OSD.A.QTY<1,INDX>
           STATUS = "F"
         CASE 1
           STATUS = "M"
       END CASE
     END
     IF OSD.KIT<1,INDX> = "K" THEN
       BEGIN CASE
         CASE OSD.KIT.O.QTY<1,INDX> < 1
           STATUS = "O"
         CASE OSD.KIT.I.QTY<1,INDX> >= OSD.KIT.O.QTY<1,INDX>
           STATUS = "I"
         CASE OSD.KIT.S.QTY<1,INDX> >= OSD.KIT.O.QTY<1,INDX>
           STATUS = "S"
         CASE OSD.KIT.A.QTY<1,INDX> < 1
           STATUS = "O"
         CASE OSD.KIT.F.QTY<1,INDX> >= OSD.KIT.A.QTY<1,INDX>
           STATUS = "F"
         CASE 1
           STATUS = "M"
       END CASE
     END
     RETURN_ARR<1,-1> = "D" : DELIM : 12 : DELIM : STATUS
   RETURN

*****THE FOLLOWING BLOCKS OF CODE ARE PART OF THE ORDER.RELEASE.SEL SUBROUTINE WHICH ARE ALL THAT NEEDED FROM IT FOR THIS FILE
ORDER_RESERVE_SEL:
  TOP.LINES = DCOUNT(IWH.QTY.FI,VM)
  ACTION = FIELD(ACTION,"-",1)
  MATREAD FOS.REC FROM FNGD.ORDER.STATS, CONO:PDNO:"!":WHNO:"!":ORDNO:"!":PROD.SEQ:"!":KIT.TYPE ELSE
    MAT FOS.REC = ""
  END
  MTOT.RSV = SUM(IWH.RSV.FI)
  MTOT.QTY = SUM(IWH.QTY.FI)
  
  *MATREAD ORD.DET.REC FROM ORDER.DETAIL, CONO:ORDNO:"!":SHPNO ELSE
  *  MAT ORD.DET.REC = ""
  *END
  PTR = 1
  LOOP
    LOCATE PDNO IN OSD.PROD<1>,PTR SETTING PPTR ELSE PPTR = 0
    BEGIN CASE
      CASE PPTR = 0
        PTR = 0
      CASE (OSD.WHSE<1,PPTR> = WHNO) AND (OSD.PROD.SEQ<1,PPTR> = PROD.SEQ) AND (OSD.KIT<1,PPTR> = KIT.TYPE)
        PTR = 0
    END CASE
  UNTIL PTR = 0 DO
    PTR = PPTR + 1
  REPEAT
  ORIG.RSV.QTY = ""
  IF PPTR > 0 THEN
    RCNT = DCOUNT(OSD.RECP.NO<1,PPTR>,SM)
    FOR RPTR = 1 TO RCNT
      FREF = OSD.RECP.NO<1,PPTR,RPTR>
      LOCATE FREF IN IWH.RECP.NO<1>,1 SETTING FPTR THEN
        ORIG.RSV.QTY<1,FPTR> = ORIG.RSV.QTY<1,FPTR> + OSD.FI.QTY<1,PPTR,RPTR>
      END
    NEXT RPTR
  END
*
  RSV.QTY = ""
  REL.FLG = ""
  REL.NO  = ""
  REL.DATE = ""
  REL.QTY = ""
  MIN.QTY = "";* T20852
  RCNT = DCOUNT(TMP.FI.NO,SM)
  FOR RPTR = 1 TO RCNT
    FREF = TMP.FI.NO<1,1,RPTR>
    LOCATE FREF IN IWH.RECP.NO<1>,1 SETTING FPTR THEN
      RSV.QTY<1,FPTR> = RSV.QTY<1,FPTR> + TMP.FI.QTY<1,1,RPTR>
      MIN.QTY<1,FPTR> = MIN.QTY<1,FPTR> + PICK.QTY<1,1,RPTR>;* T20852
      P = DCOUNT(REL.FLG<1,FPTR>,SM)+ 1
      REL.FLG<1,FPTR,P> = "X"
      REL.NO<1,FPTR,P> = TMP.REL.NO<1,1,RPTR>
      REL.QTY<1,FPTR,P> = TMP.REL.QTY<1,1,RPTR>
      IF REL.NO<1,FPTR,P> = "" THEN
        MAT ORR.REC = ""
      END ELSE
        MATREAD ORR.REC FROM ORDER.RELEASE, CONO:REL.NO<1,FPTR,P> ELSE
          MAT ORR.REC = ""
        END
      END
      REL.DATE<1,FPTR,P> = ORR.DATE
    END
  NEXT RPTR
*
  FOR N = 1 TO TOP.LINES
    BLN = DCOUNT(REL.FLG<1,N>,SM)
    BEGIN CASE
      CASE BLN = 0
        REL.FLG<1,N> = "X"
        REL.QTY<1,N> = RSV.QTY<1,N>
      CASE REL.NO<1,N,BLN> = ""
        REL.QTY<1,N,BLN> = ""
        REL.QTY<1,N,BLN> = RSV.QTY<1,N> - SUM(REL.QTY<1,N>)
      CASE 1
        BLN = BLN + 1
        REL.FLG<1,N,BLN> = "X"
        REL.QTY<1,N,BLN> = RSV.QTY<1,N> - SUM(REL.QTY<1,N>)
    END CASE
  NEXT N
*
  IF RTYPE = "B" THEN
    IF ACTION = "R" THEN
      GOSUB 2000
      GOSUB 2500
    END
    GOTO 91999
  END

  GOSUB 1800
  TLN = 1; LIMIT = TOP.LINES
  FOR I = 1 TO LIMIT
    IF IWH.RSV.FI<1,I> > 0 THEN
      TLN = I; LIMIT = 0
    END
  NEXT I
  TLN=1;TOP.START.LINE = 0
  BLN=1; BOT.LINES = 0
  BOT.START.LINE = 0

  FOR D = 1 TO DCOUNT(IWH.QTY.FI,VM)
    FI.NO = DCOUNT(IWH.RSV.FI,VM)
    TLN = FI.NO - D + 1
    AVL = IWH.RSV.FI<1,TLN> + ORIG.RSV.QTY<1,TLN> - RSV.QTY<1,TLN>
    IF AVL < 1 THEN 
      GOTO 999
    END
    BLN = DCOUNT(REL.FLG<1,TLN>,SM)
    IF BLN = 0 OR REL.NO<1,TLN,BLN> # "" THEN
      BLN = BLN + 1
      REL.FLG<1,TLN,BLN> = "X"
      REL.QTY<1,TLN,BLN> = ""
      REL.QTY<1,TLN,BLN> = RSV.QTY<1,TLN> - SUM(REL.QTY<1,TLN>)
    END
    BLN = 1
    BOT.LINES = DCOUNT(REL.FLG<1,TLN>, SM)
    BOT.START.LINE = 0
    GOSUB 6700
    GOSUB 1000

    BEGIN CASE
      CASE RSV.QTY<1,TLN>+0 = 0
        REL.QTY<1,TLN> = ""
        REL.QTY<1,TLN,BOT.LINES> = 0
        BOT.START.LINE = 0
        GOSUB 6700
      CASE BOT.LINES = 1
        REL.QTY<1,TLN,1> = RSV.QTY<1,TLN>
        BOT.START.LINE = 0
        GOSUB 6700
        IF REL.NO<1,TLN> # "" THEN
          OPT2 = ""
          GOSUB 5000
        END
      CASE REL.NO<1,TLN> # ""
        OPT2 = ""
        GOSUB 5000
    END CASE
999
  NEXT D
  GOSUB 2500
91999*
    RTOT = RESV.TOT;RQTY = TMP.FI.QTY;RSV.NO = TMP.FI.NO;REL.NO = TMP.REL.NO;REL.QTY = TMP.REL.QTY
RETURN

2000 *
  RESV.DIF = RESV.TOT - SUM(RSV.QTY)
  BEGIN CASE
    CASE RESV.DIF > 0
      LIMIT = TOP.LINES

*---- Adjust current buckets
*
      FOR F = 1 TO LIMIT
        AVL = IWH.RSV.FI<1,F> + ORIG.RSV.QTY<1,F> - RSV.QTY<1,F>   ;* NA 03-01-94
        BEGIN CASE
          CASE AVL < 1
          CASE RSV.QTY<1,F> < 1
          CASE AVL < RESV.DIF
            RSV.QTY<1,F> = RSV.QTY<1,F> + AVL
            RESV.DIF = RESV.DIF - AVL
          CASE 1
            RSV.QTY<1,F> = RSV.QTY<1,F> + RESV.DIF
            RESV.DIF = 0; LIMIT = 0
        END CASE
      NEXT F

*---- Adjust new buckets
*
      FOR F = 1 TO LIMIT
        AVL = IWH.RSV.FI<1,F> + ORIG.RSV.QTY<1,F> - RSV.QTY<1,F>   ;* NA 03-01-94
        BEGIN CASE
          CASE AVL < 1
          CASE AVL < RESV.DIF
            RSV.QTY<1,F> = RSV.QTY<1,F> + AVL
            RESV.DIF = RESV.DIF - AVL
          CASE 1
            RSV.QTY<1,F> = RSV.QTY<1,F> + RESV.DIF
            RESV.DIF = 0; LIMIT = 0
        END CASE
      NEXT F
    CASE RESV.DIF < 0
      RESV.DIF = 0 - RESV.DIF
      LIMIT = TOP.LINES
      FOR F = LIMIT TO 1 STEP -1 UNTIL RESV.DIF = 0
        BEGIN CASE
          CASE RSV.QTY<1,F> < 1
          CASE RSV.QTY<1,F> < RESV.DIF
            RESV.DIF = RESV.DIF - RSV.QTY<1,F>
            RSV.QTY<1,F> = 0
          CASE 1
            RSV.QTY<1,F> = RSV.QTY<1,F> - RESV.DIF
            RESV.DIF = 0
        END CASE
      NEXT F
  END CASE
  RESV.TOT = SUM(RSV.QTY)
RETURN

*---- REBUILD ORDER DETAIL DATA
2500 *
  TMP.FI.NO = ""
  TMP.FI.QTY = ""
  TMP.REL.NO = ""
  TMP.REL.QTY = ""
  P = 0
  FCNT = TOP.LINES
  FOR FPTR = 1 TO FCNT
    RQTY = RSV.QTY<1,FPTR>
    IF RQTY > 0 THEN
      RCNT = DCOUNT(REL.FLG<1,FPTR>,SM)
      FOR RPTR = 1 TO RCNT            ;* NA 02-25-94
        IF REL.NO<1,FPTR,RPTR> = "" THEN REL.QTY<1,FPTR,RPTR> = ""            ;* NA 02-25-94
      NEXT RPTR            ;* NA 02-25-94
      FOR RPTR = 1 TO RCNT
        P = P + 1
        TMP.FI.NO<1,1,P> = IWH.RECP.NO<1,FPTR>
        TMP.FI.QTY<1,1,P> = REL.QTY<1,FPTR,RPTR>
        TMP.REL.NO<1,1,P> = REL.NO<1,FPTR,RPTR>
        TMP.REL.QTY<1,1,P> = REL.QTY<1,FPTR,RPTR>
        RQTY = RQTY - REL.QTY<1,FPTR,RPTR>
      NEXT RPTR
      IF RQTY > 0 THEN
        TMP.FI.NO<1,1,P> = IWH.RECP.NO<1,FPTR>
        TMP.FI.QTY<1,1,P> = TMP.FI.QTY<1,1,P> + RQTY
      END
    END
  NEXT FPTR
RETURN

*---- Qty To Reserve
1000*
  AVL = IWH.RSV.FI<1,TLN> + ORIG.RSV.QTY<1,TLN> - RSV.QTY<1,TLN>
  VALUE = RSV_QTY<1,D>
  RSV.QTY<1,TLN> = INT(((VALUE/ICR.MT1)*ICR.DV1)*ICR.DV2+.5)
  LINDX = TLN
  GOSUB 7000 ;* Calculate already reseve on order per FIFO
  GOSUB 1700
  GOSUB 1800
RETURN

*---- Display Total Reserve
1700*
  AVL.TOT = MTOT.RSV + SUM((ORIG.RSV.QTY)) - SUM((RSV.QTY))
  RESV.TOT = SUM(RSV.QTY)
RETURN

*---- Display Total Release
1800*
  REL.GTOT = 0
  C1 = DCOUNT(REL.QTY,VM)
  FOR N1 = 1 TO C1
    C2 = DCOUNT(REL.QTY<1,N1>,SM)
    FOR N2 = 1 TO C2
      IF REL.NO<1,N1,N2> # "" THEN
        REL.GTOT = REL.GTOT + REL.QTY<1,N1,N2>
      END
    NEXT N2
  NEXT N1
RETURN

*---- Bottom Prompt line
5000*
  FOR B = 1 TO BOT.LINES
    OPT2 = B
    BLN = OPT2
    REL_DATA = FIELD(RESV_REL_DATA,DELIM,D,1)
    GOSUB 6000
  NEXT B
  BLN = 1
  GOSUB 6700
  OPT2 = ""
RETURN

*---- Get release quantity
6000*
  IF RELNO = "" THEN
    ADDREL = 0
  END ELSE
    LOCATE RELNO IN REL.NO<1,TLN>,1 SETTING P THEN ADDREL = 0 ELSE ADDREL = 1
  END
  BEGIN CASE
    CASE REL.NO<1,TLN,BLN> = ""
      REL.QTY<1,TLN,BLN> = ""
      REL.QTY<1,TLN,BLN> = RSV.QTY<1,TLN> - SUM(REL.QTY<1,TLN>)
      IF REL.QTY<1,TLN,BLN> < 0 THEN REL.QTY<1,TLN,BLN> = 0
6010 TYP=1
      VALUE = REL_DATA<1,B,1>
      IF VALUE = "" THEN RETURN
      LOCATE VALUE IN REL.NO<1,TLN>,1 SETTING P THEN
        IF P # BLN THEN
          ERRMSG = "Duplicate Release number. Try again! "
          GOTO 6010
        END
      END
      MATREAD ORR.REC FROM ORDER.RELEASE, CONO:VALUE ELSE
        ERRMSG = "Invalid Release number. Try again! "
        GOTO 6010
      END
      TEMP.REL.NO = VALUE
      TEMP.REL.DATE = ORR.DATE
    CASE 1
      TEMP.REL.NO = REL.NO<1,TLN,BLN>
      TEMP.REL.DATE = REL.DATE<1,TLN,BLN>
      MATREAD ORR.REC FROM ORDER.RELEASE, CONO:TEMP.REL.NO ELSE
        MAT ORR.REC = ""
      END
  END CASE
  VALUE = REL_DATA<1,B,3>
  REL.NO<1,TLN,BLN> = TEMP.REL.NO
  REL.DATE<1,TLN,BLN> = TEMP.REL.DATE
  REL.QTY<1,TLN,BLN> = INT(((VALUE/ICR.MT1)*ICR.DV1)*ICR.DV2+.5)
  GOSUB 6700
RETURN

*---- Display Total Release
6700*
  REL.TOT = SUM(REL.QTY<1,TLN>)
  L = DCOUNT(REL.FLG<1,TLN>,SM)
  IF REL.NO<1,TLN,L> = "" THEN
    QTY = REL.TOT - REL.QTY<1,TLN,L>
    XQTY = RSV.QTY<1,TLN> - QTY
    IF XQTY # REL.QTY<1,TLN,L> THEN
      IF XQTY >= 0 THEN
        REL.QTY<1,TLN,L> = XQTY
      END ELSE
        REL.QTY<1,TLN,L> = 0
      END
      BOT.START.LINE = 0
    END
  END ELSE
    QTY = REL.TOT
  END
  GOSUB 1800
RETURN

7000*
  PTR = 1
  LOOP
    LOCATE PDNO IN ODQ.PROD<1>,PTR SETTING PINDX ELSE PINDX = 0
    BEGIN CASE
      CASE PINDX = 0
        PTR = 0
      CASE ODQ.WHSE<1,PINDX> = WHNO
        PTR = 0
    END CASE
  UNTIL PTR = 0 DO
    PTR = PTR + 1
  REPEAT
  FROM.BUCKET = 0
  IF (PTR+PINDX) > 0 THEN
    NUM.FI.BUCKETS = DCOUNT(ODQ.RECP.NO<1,1>,SVM)
    FOR B = 1 TO NUM.FI.BUCKETS
      IF ODQ.RECP.NO<1,1,B> = IWH.RECP.NO<1,LINDX> THEN
        FROM.BUCKET =FROM.BUCKET + ODQ.FI.QTY<1,1,B>
      END
    NEXT B
  END
  AVL = IWH.RSV.FI<1,LINDX> + ORIG.RSV.QTY<1,LINDX> - RSV.QTY<1,LINDX>   ;* NA 03-01-94
  AVL = AVL - FROM.BUCKET
  IF AVL < 0 THEN AVL = 0
RETURN
***** END OF ORDER_RESERVE_SEL 

***** THE FOLLOWING BLOCKS OF CODE ARE PART OF THE ORDER.JOB.SEL SUBROUTINE WHICH IS ALL THAT NEEDED FROM IT FOR THIS FILE
ORDER_JOB_SEL:
    ALOC.TOT = ATOT;ALOC.QTY = AQTY
    LINES = DCOUNT(FGS.JOB,VM)
    S.A.QTY = ""; S.CUST = ""; S.DATE = ""
    LN = 0; IWH.ID = CONO:PDNO:"!":WHNO
    FOR I = 1 TO LINES
      MATREAD FJS.REC FROM FNGD.JOB.STATS, IWH.ID:"!":FGS.JOB<1,I> ELSE MAT FJS.REC = ""
      S.CUST<I> = FJS.CUST
      S.DATE<I> = FJS.DATE
      LOCATE ORDNO IN FJS.ORD<1>,1 SETTING OLOC THEN
        IF FJS.ORD.QTY<1,OLOC> > ALOC.QTY<1,I> THEN
          S.A.QTY<I> = FJS.A.QTY - FJS.ORD.QTY<1,OLOC>
        END ELSE
          S.A.QTY<I> = FJS.A.QTY - ALOC.QTY<1,I>
        END
      END ELSE
        S.A.QTY<I> = FJS.A.QTY
      END
      IF S.A.QTY<I> < 0 THEN S.A.QTY<I> = 0
      S.A.QTY<I> = FJS.M.QTY - FJS.F.QTY - S.A.QTY<I>
      IF S.A.QTY<I> < 0 THEN S.A.QTY<I> = 0
      IF LN = 0 THEN
        IF FJS.M.QTY - FJS.A.QTY > 0 THEN
          LN = I
        END
      END
    NEXT I
    IF LN = 0 THEN LN = 1
   *
   *---- Adjust job allocations
    IF ATYPE = "B" THEN
     ALOC.DIF = ALOC.TOT - SUM(ALOC.QTY)
     BEGIN CASE
      CASE ALOC.DIF > 0
        LIMIT = LINES
   *
   *---- Adjust current allocated jobs
   *
        FOR A = 1 TO LIMIT
          AVL = S.A.QTY<A> - ALOC.QTY<1,A>
          BEGIN CASE
            CASE ALOC.QTY<1,A> < 1
            CASE AVL < 1
            CASE AVL < ALOC.DIF
              ALOC.QTY<1,A> = ALOC.QTY<1,A> + AVL
              ALOC.DIF = ALOC.DIF - AVL
            CASE 1
              ALOC.QTY<1,A> = ALOC.QTY<1,A> + ALOC.DIF
              ALOC.DIF = 0; LIMIT = 0
          END CASE
        NEXT A
   *
   *---- Allocate new jobs
   *
        FOR A = 1 TO LIMIT
          AVL = S.A.QTY<A> - ALOC.QTY<1,A>
          BEGIN CASE
            CASE AVL < 1
            CASE AVL < ALOC.DIF
              ALOC.QTY<1,A> = ALOC.QTY<1,A> + AVL
              ALOC.DIF = ALOC.DIF - AVL
            CASE 1
              ALOC.QTY<1,A> = ALOC.QTY<1,A> + ALOC.DIF
              ALOC.DIF = 0; LIMIT = 0
          END CASE
        NEXT A
      CASE ALOC.DIF < 0
        ALOC.DIF = 0 - ALOC.DIF
        LIMIT = LINES
        FOR A = 1 TO LIMIT
          BEGIN CASE
            CASE ALOC.QTY<1,A> < 1
            CASE ALOC.QTY<1,A> < ALOC.DIF
              ALOC.DIF = ALOC.DIF - ALOC.QTY<1,A>
              ALOC.QTY<1,A> = 0
            CASE 1
              ALOC.QTY<1,A> = ALOC.QTY<1,A> - ALOC.DIF
              ALOC.DIF = 0; LIMIT = 0
          END CASE
        NEXT A
     END CASE
     ALOC.TOT = SUM(ALOC.QTY)
    END
    ATOT = ALOC.TOT;AQTY = ALOC.QTY
   RETURN

************** THIS IS THE ORDER.LINE.BUILD.KIT SUBROUTINE EXTRACT
 ORDER_LINE_BUILD_KIT:

  DIM ORIG.BOM.REC(50)
  EQU ORIG.BOM.PROD TO ORIG.BOM.REC(4)
  MAT ORIG.BOM.REC = ""
  MAT ORIG.BOM.REC = MAT BOM.REC
  OPEN.FLAG=1
  KIT.PROD = ""
  RESERVED.MIN.QTY = 0

  NUM.PROD = 0
  IF MODE = "A" AND LNFLG < 1 THEN
    NUM.PROD = DCOUNT(ORIG.BOM.PROD,VM)
    START.PT = DCOUNT(OSD.PROD,VM)
  END ELSE
    NUM.ORDER = DCOUNT(OSD.PROD,VM)
    START.PT = NUM.ON.SCRN<1,LN>
    FOR I = START.PT+1 TO NUM.ORDER
      IF OSD.KIT<1,I> = "K" THEN I = NUM.ORDER + 1
      IF OSD.KIT<1,I> = "N" THEN I = NUM.ORDER + 1
      IF OSD.KIT<1,I> = "M" THEN
        NUM.PROD = NUM.PROD + 1
        OSD.WHSE<1,I> = TEMP.MF(2)
      END
    NEXT I
    KIT.PROD<1,START.PT+1> = ORIG.BOM.PROD
  END
  *IF MODE = "A" AND LNFLG = 0 THEN
  *  CURR.POS = START.PT + 1
  *END ELSE
    CURR.POS = NUM.ON.SCRN<1,LN>
  *END
  CURR.AVAIL = 0

  IF MODE = "A" AND LNFLG < 1 THEN
   PLACE.VM = START.PT + 1
    FOR I = 1 TO NUM.PROD
      IF PROMPT_NUM < 4 THEN 
        OSD.PROD     = INSERT(OSD.PROD,1,PLACE.VM,0,ORIG.BOM.PROD<1,I>)
        KIT.PROD     = INSERT(KIT.PROD,1,PLACE.VM,0,ORIG.BOM.PROD<1,I>)
        OSD.WHSE     = INSERT(OSD.WHSE,1,PLACE.VM,0,TEMP.MF(2))
        OSD.O.QTY    = INSERT(OSD.O.QTY,1,PLACE.VM,0,"")
        OSD.R.QTY    = INSERT(OSD.R.QTY,1,PLACE.VM,0,"")
        OSD.F.QTY    = INSERT(OSD.F.QTY,1,PLACE.VM,0,"")
        OSD.A.QTY    = INSERT(OSD.A.QTY,1,PLACE.VM,0,"")
        OSD.S.QTY    = INSERT(OSD.S.QTY,1,PLACE.VM,0,"")
        OSD.I.QTY    = INSERT(OSD.I.QTY,1,PLACE.VM,0,"")
        OSD.G.QTY    = INSERT(OSD.G.QTY,1,PLACE.VM,0,"")
        OSD.COMMENT  = INSERT(OSD.COMMENT,1,PLACE.VM,0,"")
        OSD.PRICE    = INSERT(OSD.PRICE,1,PLACE.VM,0,"")
        OSD.JOB      = INSERT(OSD.JOB,1,PLACE.VM,0,"")
        OSD.JOB.QTY  = INSERT(OSD.JOB.QTY,1,PLACE.VM,0,"")
        OSD.RECP.NO  = INSERT(OSD.RECP.NO,1,PLACE.VM,0,"")
        OSD.FI.QTY   = INSERT(OSD.FI.QTY,1,PLACE.VM,0,"")
        OSD.REL.NO   = INSERT(OSD.REL.NO,1,PLACE.VM,0,"")
        OSD.AMT      = INSERT(OSD.AMT,1,PLACE.VM,0,"")
        OSD.REL.QTY  = INSERT(OSD.REL.QTY,1,PLACE.VM,0,"")
        OSD.P.QTY    = INSERT(OSD.P.QTY,1,PLACE.VM,0,"")
        OSD.KIT      = INSERT(OSD.KIT,1,PLACE.VM,0,"M")
        OSD.BOM.NUM  = INSERT(OSD.BOM.NUM,1,PLACE.VM,0,BOM.NUMBER)
      END
      PTR = 1
      SEQ.FND = 0
      LOOP
        LOCATE ORIG.BOM.PROD<1,I> IN OSD.PROD<1>,PTR SETTING INDX1 THEN
          SEQ.FND = SEQ.FND + 1
          PTR = INDX1
        END ELSE
          PTR = 0
        END
      WHILE PTR DO
        PTR = PTR + 1
      REPEAT
      IF PROMPT_NUM < 4 THEN 
         OSD.PROD.SEQ = INSERT(OSD.PROD.SEQ,1,PLACE.VM,0,SEQ.FND)
      END
      PLACE.VM = PLACE.VM + 1
      
      TEMP.KEY = CONO:ORIG.BOM.PROD<1,I>:"!":TEMP.MF(2)
      MATREAD IWH.REC FROM INV.WHSE, TEMP.KEY THEN
        ERR.FLG='';ERRMSG='';PERIOD=''                                       
        CALL BUILD_IWH_FI(TEMP.KEY,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
      END ELSE
        MAT IWH.REC = ""
      END
      LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
        TEMP.CONV = CONVERT(SVM,VM,ORIG.IWH.RESV<1,LINDX>)
        IWH.RSV.FI = TEMP.CONV
        TEMP.CONV = CONVERT(SVM,VM,ORIG.ALOC.AVL<1,LINDX>)
        FGS.A.QTY = TEMP.CONV
        IWH.RESV    = ORIG.IWH.QTY<1,LINDX>
      END ELSE
        ORIG.IWH.QTY = INSERT(ORIG.IWH.QTY,1,LINDX,1,IWH.RESV)
        ORIG.PROD   =INSERT(ORIG.PROD,1,LINDX,1,TEMP.KEY)
        TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
        ORIG.IWH.RESV=INSERT(ORIG.IWH.RESV,1,LINDX,1,TEMP.STR)
        TEMP.STR = CONVERT(VM,SVM,FGS.A.QTY)
        ORIG.ALOC.AVL=INSERT(ORIG.ALOC.AVL,1,LINDX,0,TEMP.STR)
      END
    NEXT I
  END

  ACTUAL.RESV = TEMP.MF(4)
  GOSUB 100 

50 *
  MINV=0; MAXV=TOTAL.BUILD
  DEFAULT = OCONV(INT(((TOTAL.BUILD / ICR.DV1) * ICR.MT1) /ICR.DV2 + .5),ICR.CNV)
  MINV = OCONV(INT(((RESERVED.MIN.QTY / ICR.DV1) * ICR.MT1) /ICR.DV2 + .5),ICR.CNV)
  PMPT_NO = 4
  IF PROMPT_NUM < 4 THEN
     RETURN_ARR<1,-1> = "W" : DELIM : "Available on hand quantity = ":OCONV(INT(((TOTAL.BUILD / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)
     RETURN_ARR<1,-1> = "D" : DELIM : 4 : DELIM : DEFAULT
     SET_FOCUS = 4
     GOTO 92000
  END
  VALUE = RESERV_QTY
  ACTUAL.RESV = INT(((VALUE /ICR.MT1) * ICR.DV1) * ICR.DV2 + .5)
  IF ACTUAL.RESV > TEMP.MF(4) THEN
    IF PROMPT_NUM <= 4 THEN
       SET_FOCUS = 4
       ERRMSG = 'Cannot Reserve more than you ordered for a Kit '
       GOTO 91000
    END
  END
  IF ACTUAL.RESV > TOTAL.BUILD THEN
    IF PROMPT_NUM <= 4 THEN
       SET_FOCUS = 4
       ERRMSG = 'Cannot Reserve more than you build for a Kit '
       GOTO 91000
    END
  END

  RQTY = ""
  RSV.NO = ""
  REL.NO = ""
  REL.QTY = ""
  KIT.ITEM.RESERVE = 0
  TEMP.KEY = CONO:TEMP.MF(1):"!":TEMP.MF(2)
  MATREAD IWH.REC FROM INV.WHSE, TEMP.KEY THEN    
    ERR.FLG='';ERRMSG='';PERIOD=''                                       
    CALL BUILD_IWH_FI(TEMP.KEY,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
  END ELSE
    MAT IWH.REC = ""                              
  END                                             
  LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
    TEMP.CONV = CONVERT(SVM,VM,ORIG.IWH.RESV<1,LINDX>)
    IWH.RSV.FI = TEMP.CONV
    TEMP.CONV = CONVERT(SVM,VM,ORIG.ALOC.AVL<1,LINDX>)
    FGS.A.QTY = TEMP.CONV
    IWH.RESV    = ORIG.IWH.QTY<1,LINDX>
  END ELSE
    ORIG.IWH.QTY = INSERT(ORIG.IWH.QTY,1,LINDX,1,IWH.RESV)
    ORIG.PROD   =INSERT(ORIG.PROD,1,LINDX,1,TEMP.KEY)
    TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
    ORIG.IWH.RESV=INSERT(ORIG.IWH.RESV,1,LINDX,1,TEMP.STR)
    TEMP.STR = CONVERT(VM,SVM,FGS.A.QTY)
    ORIG.ALOC.AVL=INSERT(ORIG.ALOC.AVL,1,LINDX,0,TEMP.STR)
  END
  RTOT = ACTUAL.RESV
  RQTY    = OSD.FI.QTY<1,CURR.POS>
  RSV.NO = OSD.RECP.NO<1,CURR.POS>
  REL.NO = OSD.REL.NO<1,CURR.POS>
  REL.QTY =OSD.REL.QTY<1,CURR.POS>
  PROD.SEQ = OSD.PROD.SEQ<1,CURR.POS>
  IF PROD.SEQ = "" THEN PROD.SEQ = 1
  KIT.TYPE = OSD.KIT<1,CURR.POS>
  IF KIT.TYPE = "" THEN KIT.TYPE = "K"
  PDNO = TEMP.MF(1); WHNO = TEMP.MF(2); RTYPE = "B"
  
  ACTION = ("R-":CURR.POS);CUSTNO = ORD.CUST;ORDNO = ORDNO;SHPNO = SHPNO;PDNO = PDNO;WHNO = WHNO
  RTYPE = RTYPE;RESV.TOT = RTOT;TMP.FI.QTY = RQTY;TMP.FI.NO = RSV.NO;TMP.REL.NO = REL.NO
  TMP.REL.QTY = REL.QTY;RELNO = "";RELQTY = "";PROD.SEQ = PROD.SEQ;KIT.TYPE = KIT.TYPE;PICK.QTY = ""
  GOSUB ORDER_RESERVE_SEL

  NUM.BUCKETS = DCOUNT(OSD.RECP.NO<1,CURR.POS>,SVM)
  FOR N = 1 TO NUM.BUCKETS
    RECP=OSD.RECP.NO<1,CURR.POS,N>
    LOCATE RECP IN IWH.RECP.NO<1> SETTING RPOS THEN
      IWH.RSV.FI<1,RPOS> = IWH.RSV.FI<1,RPOS> + OSD.FI.QTY<1,CURR.POS,N>
    END
  NEXT N
  NUM.BUCKETS = DCOUNT(RSV.NO,SVM)
  FOR N = 1 TO NUM.BUCKETS
    RECP=RSV.NO<1,1,N>
    LOCATE RECP IN IWH.RECP.NO<1> SETTING RPOS THEN
      IWH.RSV.FI<1,RPOS> = IWH.RSV.FI<1,RPOS> - RQTY<1,1,N>
    END
  NEXT N
  TEMP.KEY = CONO:TEMP.MF(1):"!":TEMP.MF(2)
  LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
    ORIG.IWH.QTY<1,LINDX> = ORIG.IWH.QTY<1,LINDX> - OSD.R.QTY<1,CURR.POS> + RTOT
    TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
    ORIG.IWH.RESV<1,LINDX> = TEMP.STR
  END

  IF PROMPT_NUM < 4 THEN 
    OSD.PROD<1,CURR.POS> = TEMP.MF(1)
    OSD.WHSE<1,CURR.POS> = TEMP.MF(2)
    OSD.G.QTY<1,CURR.POS> = PRE.BUILT.O
    OSD.O.QTY<1,CURR.POS> = PRE.BUILT
    OSD.RECP.NO<1,CURR.POS> = RSV.NO
    OSD.FI.QTY<1,CURR.POS> = RQTY
    OSD.REL.NO<1,CURR.POS> = REL.NO
    OSD.R.QTY<1,CURR.POS> = RTOT
    OSD.JOB.QTY<1,CURR.POS> = 0
    OSD.JOB<1,CURR.POS> = TEMP.MF(13)
    OSD.A.QTY<1,CURR.POS> = 0
    OSD.PRICE<1,CURR.POS> = TEMP.MF(15)
    OSD.REL.QTY<1,CURR.POS> = REL.QTY
    OSD.KIT<1,CURR.POS>     = 'K'
    OSD.BOM.NUM<1,CURR.POS>  = BOM.NUMBER
    OSD.PROD.SEQ<1,CURR.POS> = 1
    OSD.KIT.O.QTY<1,CURR.POS> = TEMP.MF(4)
    OSD.KIT.R.QTY<1,CURR.POS> = OSD.R.QTY<1,CURR.POS>
    OSD.KIT.A.QTY<1,CURR.POS> = 0
    OSD.KIT.F.QTY<1,CURR.POS> = OSD.F.QTY<1,CURR.POS>
    OSD.KIT.S.QTY<1,CURR.POS> = 0
    OSD.KIT.I.QTY<1,CURR.POS> = 0
    OSD.KIT.G.QTY<1,CURR.POS> = OSD.G.QTY<1,CURR.POS>
    OSD.KIT.PRICE<1,CURR.POS> = TEMP.MF(15)
  END 

  RQTY = ""
  RSV.NO = ""
  REL.NO = ""
  REL.QTY = ""
  REMAIN.TO.BUILD = ACTUAL.RESV - RTOT
  OLD.PDNO = PDNO
  IF (REMAIN.TO.BUILD > 0 ) OR (REMAIN.TO.BUILD = 0 AND ACTUAL.RESV = 0) THEN
    FOR I = 1 TO NUM.PROD
      IF BOM.PROD<1,I> NE "" THEN   ; * T23416
        TEMP.KEY = CONO:BOM.PROD<1,I>:"!":TEMP.MF(2)
        MATREAD IWH.REC FROM INV.WHSE, TEMP.KEY THEN
          ERR.FLG='';ERRMSG='';PERIOD=''                                       
          CALL BUILD_IWH_FI(TEMP.KEY,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
        END ELSE
          MAT IWH.REC = ""
        END
        LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
          TEMP.CONV = CONVERT(SVM,VM,ORIG.IWH.RESV<1,LINDX>)
          IWH.RSV.FI = TEMP.CONV
          TEMP.CONV = CONVERT(SVM,VM,ORIG.ALOC.AVL<1,LINDX>)
          FGS.A.QTY = TEMP.CONV
          IWH.RESV    = ORIG.IWH.QTY<1,LINDX>
        END ELSE
          ORIG.IWH.QTY = INSERT(ORIG.IWH.QTY,1,LINDX,1,IWH.RESV)
          ORIG.PROD   =INSERT(ORIG.PROD,1,LINDX,1,TEMP.KEY)
          TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
          ORIG.IWH.RESV=INSERT(ORIG.IWH.RESV,1,LINDX,1,TEMP.STR)
          TEMP.STR = CONVERT(VM,SVM,FGS.A.QTY)
          ORIG.ALOC.AVL=INSERT(ORIG.ALOC.AVL,1,LINDX,0,TEMP.STR)
        END
        POS = CURR.POS + I
        TMP.RATIO = BOM.Q.RATIO<1,I> / 10000
        PDNO = BOM.PROD<1,I>
        RTOT = (REMAIN.TO.BUILD) * TMP.RATIO
        RQTY    = OSD.FI.QTY<1,POS>
        RSV.NO = OSD.RECP.NO<1,POS>
        REL.NO = OSD.REL.NO<1,POS>
        REL.QTY =OSD.REL.QTY<1,POS>
        PROD.SEQ = OSD.PROD.SEQ<1,POS>
        KIT.TYPE = OSD.KIT<1,POS>
        PDNO = BOM.PROD<1,I>; WHNO = TEMP.MF(2); RTYPE = "B"
        
        ACTION = ("R-":CURR.POS);CUSTNO = ORD.CUST;ORDNO = ORDNO;SHPNO = SHPNO;PDNO = PDNO;WHNO = WHNO
        RTYPE = RTYPE;RESV.TOT = RTOT;TMP.FI.QTY = RQTY;TMP.FI.NO = RSV.NO;TMP.REL.NO = REL.NO
        TMP.REL.QTY = REL.QTY;RELNO = "";RELQTY = "";PROD.SEQ = PROD.SEQ;KIT.TYPE = KIT.TYPE;PICK.QTY = ""
	     GOSUB ORDER_RESERVE_SEL

	     NUM.BUCKETS = DCOUNT(OSD.RECP.NO<1,POS>,SVM)
        FOR N = 1 TO NUM.BUCKETS
          RECP=OSD.RECP.NO<1,POS,N>
          LOCATE RECP IN IWH.RECP.NO<1> SETTING RPOS THEN
            IWH.RSV.FI<1,RPOS> = IWH.RSV.FI<1,RPOS> + OSD.FI.QTY<1,POS,N>
          END
        NEXT N
        NUM.BUCKETS = DCOUNT(RSV.NO,SVM)
        FOR N = 1 TO NUM.BUCKETS
          RECP=RSV.NO<1,1,N>
          LOCATE RECP IN IWH.RECP.NO<1> SETTING RPOS THEN
            IWH.RSV.FI<1,RPOS> = IWH.RSV.FI<1,RPOS> - RQTY<1,1,N>
          END
        NEXT N
        TEMP.KEY = CONO:BOM.PROD<1,I>:"!":TEMP.MF(2)
        LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
          ORIG.IWH.QTY<1,LINDX> = ORIG.IWH.QTY<1,LINDX> - OSD.R.QTY<1,POS> + RTOT
          TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
          ORIG.IWH.RESV<1,LINDX> = TEMP.STR
        END
        OSD.WHSE<1,POS> = WHNO
        OSD.FI.QTY<1,POS> = RQTY
        OSD.RECP.NO<1,POS>  = RSV.NO
        OSD.REL.NO<1,POS> = REL.NO
        OSD.REL.QTY<1,POS> = REL.QTY
        OSD.G.QTY<1,POS>   = TO.BUILD.O * TMP.RATIO
        OSD.O.QTY<1,POS>   = TO.BUILD * TMP.RATIO
        OSD.R.QTY<1,POS>   = RTOT
      END   ; * T23416
    NEXT I
  END ELSE
    FOR I = 1 TO NUM.PROD
      POS = CURR.POS + I
      OSD.FI.QTY<1,POS> = RQTY
      OSD.RECP.NO<1,POS>  = RSV.NO
      OSD.REL.NO<1,POS> = REL.NO
      OSD.REL.QTY<1,POS> = REL.QTY
      OSD.G.QTY<1,POS>   = REMAIN.TO.BUILD
      OSD.O.QTY<1,POS>   = REMAIN.TO.BUILD
      OSD.R.QTY<1,POS>   = REMAIN.TO.BUILD
    NEXT I
  END
  PDNO = OLD.PDNO
  OSD.KIT.R.QTY<1,CURR.POS> = ACTUAL.RESV
  OSD.KIT.O.QTY<1,CURR.POS> = TEMP.MF(4)
  OSD.KIT.G.QTY<1,CURR.POS> = TEMP.MF(3)

*
* CALCULATE PRICE
*
80000 *
  PMPT_NO = 6
  ITEM.PRICE = 0
  RETURN_ARR<1,-1> = "D" : DELIM : 4 : DELIM :  OCONV(INT(((OSD.KIT.R.QTY<1,CURR.POS> / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)
  
  MATREAD INV.REC FROM INVENTORY, CONO:TEMP.MF(1) ELSE
    MAT INV.REC = ""
  END
  MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
    MAT CATG.REC = ""
  END
  IWH.ID = CONO:TEMP.MF(1):"!":TEMP.MF(2)
  MATREAD IWH.REC FROM INV.WHSE, IWH.ID THEN
    ERR.FLG='';ERRMSG='';PERIOD=''                                       
    CALL BUILD_IWH_FI(IWH.ID,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
  END ELSE                                                             
    MAT IWH.REC = ""
  END
  BEGIN CASE
    CASE CATG.SALE.TYPE = "EP"
      DEFAULT = 0
    CASE CATG.SALE.TYPE = "PT"
      MATREAD PGT.REC FROM PRICE.TABLE, CONO:IWH.PRICE.GRP ELSE
        MAT PGT.REC=''
      END
      DEFAULT = ""
      QTY = OCONV(INT(((TEMP.MF(3) / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV)
      QCNT = DCOUNT(PGT.QTY,VM)
      FOR Q = 1 TO QCNT WHILE DEFAULT = ""
        IF QTY <= PGT.QTY<1,Q>+0 THEN
          DEFAULT = PGT.PRICE<1,Q>
        END
      NEXT Q
      IF OSD.G.QTY<1,LN> # TEMP.MF(3) THEN TEMP.MF(15) = ""
    CASE CATG.SALE.TYPE = "ES"
      DEFAULT = IWH.EST.SALE
    CASE CATG.SALE.TYPE = "SP"
      BEGIN CASE
        CASE NOT(NUM(CUST.PRICE.CODE))
          DEFAULT = IWH.SELL<1,1>
        CASE CUST.PRICE.CODE > 0 AND CUST.PRICE.CODE < 5
          DEFAULT = IWH.SELL<1,CUST.PRICE.CODE>
        CASE 1
          DEFAULT = IWH.SELL<1,1>
      END CASE
    CASE CATG.SALE.TYPE = "SD"
      DEFAULT = IWH.STD.COST
    CASE CATG.SALE.TYPE = "AV"
      DEFAULT = IWH.AVG.COST
    CASE CATG.SALE.TYPE = "LP"
      DEFAULT = IWH.COST.FI<1,DCOUNT(IWH.COST.FI,VM)>
    CASE CATG.FNGD.TYPE = "ES"
      DEFAULT = IWH.EST.SALE
    CASE CATG.FNGD.TYPE = "SP"
      BEGIN CASE
        CASE NOT(NUM(CUST.PRICE.CODE))
          DEFAULT = IWH.SELL<1,1>
        CASE CUST.PRICE.CODE > 0 AND CUST.PRICE.CODE < 5
          DEFAULT = IWH.SELL<1,CUST.PRICE.CODE>
        CASE 1
          DEFAULT = IWH.SELL<1,1>
      END CASE
    CASE CATG.FNGD.TYPE = "SD"
      DEFAULT = IWH.STD.COST
    CASE CATG.FNGD.TYPE = "AV"
      DEFAULT = IWH.AVG.COST
    CASE CATG.FNGD.TYPE = "LP"
      DEFAULT = IWH.COST.FI<1,DCOUNT(IWH.COST.FI,VM)>
    CASE 1
      DEFAULT = 0
  END CASE
  DEFAULT = INT(DEFAULT + .5)
  BEGIN CASE
    CASE CATG.SALE.TYPE = "EP" AND ORD.ESTIMATE = ""
      TEMP.MF(15) = DEFAULT
      RETURN_ARR<1,-1> = "D" : DELIM : 6 : DELIM : OCONV(TEMP.MF(15),"MD4")
    CASE OPCO.PRC.MNT = "O" OR OPCO.PRC.MNT = "B"
      IF ((TEMP.MF(15) + 0) > 0) THEN
        DEFAULT = TEMP.MF(15)
      END
      DEFAULT = OCONV(DEFAULT,"MD4")
      IF PROMPT_NUM < 6 THEN
         RETURN_ARR<1,-1> = "D" : DELIM : 6 : DELIM : DEFAULT
         SET_FOCUS = 6
	      GOTO 92000
      END
      VALUE = UNIT_PRICE
      TEMP.MF(15) = ICONV(VALUE,"MD4")
      RETURN_ARR<1,-1> = "D" : DELIM : 6 : DELIM : VALUE
    CASE TEMP.MF(15) = ""
      TEMP.MF(15) = DEFAULT
      RETURN_ARR<1,-1> = "D" : DELIM : 6 : DELIM : TEMP.MF(15)
    CASE 1
      RETURN_ARR<1,-1> = "D" : DELIM : 6 : DELIM : TEMP.MF(15)
  END CASE
*
80100 
*
  RETURN_ARR<1,-1> = "D" : DELIM : 5 : DELIM : 0
  OSD.KIT.PRICE<1,CURR.POS> = TEMP.MF(15)
  PQTY = OSD.KIT.G.QTY<1,CURR.POS> / 1000
  OSD.AMT<1,CURR.POS> = INT(OSD.KIT.PRICE<1,CURR.POS> /100 * PQTY / (INV.COST.WT / 100) + .5)
  SET_FOCUS = 9
  GOTO 92000
RETURN
*
100* FIND WHAT CAN BE RESERVED
  MAT BOM.REC = MAT ORIG.BOM.REC
  PRE.BUILT = 0
  TO.BUILD  = 0
  ACT.BUILD = 0
  TEMP.KEY = CONO:TEMP.MF(1):"!":TEMP.MF(2)
  MATREAD IWH.REC FROM INV.WHSE, TEMP.KEY THEN
    ERR.FLG='';ERRMSG='';PERIOD=''                                       
    CALL BUILD_IWH_FI(TEMP.KEY,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
  END ELSE                                                             
    MAT IWH.REC = ""
  END
  MATREAD FGS.REC FROM FNGD.STATS, TEMP.KEY ELSE
    MAT FGS.REC = ""
  END
  LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
    TEMP.CONV = CONVERT(SVM,VM,ORIG.IWH.RESV<1,LINDX>)
    IWH.RSV.FI = TEMP.CONV
    TEMP.CONV = CONVERT(SVM,VM,ORIG.ALOC.AVL<1,LINDX>)
    FGS.A.QTY = TEMP.CONV
    IWH.RESV    = ORIG.IWH.QTY<1,LINDX>
  END ELSE
    ORIG.IWH.QTY = INSERT(ORIG.IWH.QTY,1,LINDX,1,IWH.RESV)
    ORIG.PROD   =INSERT(ORIG.PROD,1,LINDX,1,TEMP.KEY)
    TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
    ORIG.IWH.RESV=INSERT(ORIG.IWH.RESV,1,LINDX,1,TEMP.STR)
    TEMP.STR = CONVERT(VM,SVM,FGS.A.QTY)
    ORIG.ALOC.AVL=INSERT(ORIG.ALOC.AVL,1,LINDX,0,TEMP.STR)
  END
  IF IWH.ON.HAND - IWH.RESV < 0 THEN
    AVL.RESV = OSD.KIT.R.QTY<1,LINDX>
  END ELSE
    FOSKEY = TEMP.KEY:"!":ORDNO:"!":OSD.PROD.SEQ<1,LINDX>:"!":OSD.KIT<1,LINDX>
    MATREAD FOS.REC FROM FNGD.ORDER.STATS, FOSKEY ELSE MAT FOS.REC = ''
    AVL.RESV = IWH.ON.HAND - IWH.RESV + FOS.R.QTY
  END
  IF AVL.RESV LE ACTUAL.RESV THEN
    PRE.BUILT = AVL.RESV
    TO.BUILD = ACTUAL.RESV - PRE.BUILT
  END ELSE
    PRE.BUILT = ACTUAL.RESV
    TO.BUILD = 0
  END
  TO.BUILD.O = TO.BUILD
  PRE.BUILT.O = PRE.BUILT
  IF TO.BUILD > 0 THEN
    PLACE.VM = CURR.POS
    IF KIT.PROD # "" THEN
      NUM.PROD = DCOUNT(KIT.PROD,VM)
    END
    ST.KIT = PLACE.VM + 1
    FOR I = ST.KIT TO NUM.PROD
      PLACE.VM = PLACE.VM + 1
      TEMP.KEY = CONO:KIT.PROD<1,I>:"!":TEMP.MF(2)
      MATREAD IWH.REC FROM INV.WHSE, TEMP.KEY THEN
        ERR.FLG='';ERRMSG='';PERIOD=''                                       
        CALL BUILD_IWH_FI(TEMP.KEY,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
      END ELSE                                                             
        MAT IWH.REC = ""
      END
      MATREAD FGS.REC FROM FNGD.STATS, TEMP.KEY ELSE
        MAT FGS.REC = ""
      END
      LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
        TEMP.CONV = CONVERT(SVM,VM,ORIG.IWH.RESV<1,LINDX>)
        IWH.RSV.FI = TEMP.CONV
        TEMP.CONV = CONVERT(SVM,VM,ORIG.ALOC.AVL<1,LINDX>)
        FGS.A.QTY = TEMP.CONV
        IWH.RESV    = ORIG.IWH.QTY<1,LINDX>
      END ELSE
        ORIG.IWH.QTY = INSERT(ORIG.IWH.QTY,1,LINDX,1,IWH.RESV)
        ORIG.PROD   =INSERT(ORIG.PROD,1,LINDX,1,TEMP.KEY)
        TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
        ORIG.IWH.RESV=INSERT(ORIG.IWH.RESV,1,LINDX,1,TEMP.STR)
        TEMP.STR = CONVERT(VM,SVM,FGS.A.QTY)
        ORIG.ALOC.AVL=INSERT(ORIG.ALOC.AVL,1,LINDX,0,TEMP.STR)
      END
      IF IWH.ON.HAND - IWH.RESV < 0 THEN
        AVL.RESV = OSD.R.QTY<1,PLACE.VM>
      END ELSE
        AVL.RESV = IWH.ON.HAND - IWH.RESV + OSD.R.QTY<1,PLACE.VM>
      END
      IF OSD.BOM.NUM<1,I> = BOM.NUMBER THEN
        LOCATE KIT.PROD<1,I> IN BOM.PROD<1>,1 SETTING BINDX THEN
          TMP.RATIO = BOM.Q.RATIO<1,BINDX> /10000
        END ELSE
          TMP.RATIO = 1
        END
      END

      QTY.NEEDED = TEMP.MF(4) * TMP.RATIO
      CAN.BUILD = INT(AVL.RESV / TMP.RATIO)
      IF I = ST.KIT THEN
        IF CAN.BUILD LT TO.BUILD THEN
          ACT.BUILD = CAN.BUILD
        END ELSE
          ACT.BUILD = TO.BUILD
        END
      END ELSE
        IF CAN.BUILD LE ACT.BUILD THEN
          ACT.BUILD = CAN.BUILD
        END
      END
    NEXT I
  END
  TMP.PROD.CNT = DCOUNT(KIT.PROD<1>, VM) + CURR.POS ; POS = 1
  FOR X = CURR.POS TO TMP.PROD.CNT UNTIL (RESERVED.MIN.QTY)               
    POS += 1
    IF X = CURR.POS AND OSD.P.QTY<1,X> # '' THEN                               
      RESERVED.MIN.QTY = SUM(OSD.P.QTY<1,X>)                              
    END ELSE                                                              
      IF KIT.PROD<1,POS> = '' OR OSD.BOM.NUM<1,X> # BOM.NUMBER THEN CONTINUE
      LOCATE KIT.PROD<1,POS> IN BOM.PROD<1>,1 SETTING BINDX THEN            
        TMP.RATIO = BOM.Q.RATIO<1,BINDX> /10000                           
      END ELSE                                                            
        TMP.RATIO = 1                                                     
      END                                                                 
      TMP.MIN.QTY = SUM(OSD.P.QTY<1,X>)                                   
      RESERVED.MIN.QTY = (TMP.MIN.QTY / TMP.RATIO)                        
    END                                                                   
  NEXT X                                                                  
  TOTAL.BUILD = PRE.BUILT + ACT.BUILD
RETURN

* End of method code
90000*
     OSD.PROD<1,ROWNo>    = TEMP.MF(1)
     OSD.WHSE<1,ROWNo>    = TEMP.MF(2)
     OSD.G.QTY<1,ROWNo>   = TEMP.MF(3)
     OSD.O.QTY<1,ROWNo>   = TEMP.MF(4)
     OSD.RECP.NO<1,ROWNo> = TEMP.MF(6)
     OSD.FI.QTY<1,ROWNo>  = TEMP.MF(9)
     OSD.REL.NO<1,ROWNo>  = TEMP.MF(10)
     OSD.R.QTY<1,ROWNo>   = TEMP.MF(11)
     OSD.JOB.QTY<1,ROWNo> = TEMP.MF(12)
     OSD.JOB<1,ROWNo>     = TEMP.MF(13)
     OSD.A.QTY<1,ROWNo>   = TEMP.MF(14)
     OSD.PRICE<1,ROWNo>   = TEMP.MF(15)
     OSD.OLD.QTY<1,ROWNo> = TEMP.MF(16)
     OSD.REL.QTY<1,ROWNo> = TEMP.MF(17)
RETURN

RESET_PROPERTIES:
   STATUS = RBO.setProperty("","INARR","")
   STATUS = RBO.setProperty("","DISPARR","")
   STATUS = RBO.setProperty("","GRIDARR","")
   STATUS = RBO.setProperty("","WARNINGARR","")
   STATUS = RBO.setProperty("","REMOTE_ARR1","")
RETURN

93000 *
     GOSUB 90000
     OSD.KIT<1,ROWNo>     = "N"
     GOSUB RESET_PROPERTIES     
     TEMPMAT = ""
     MATBUILD TEMPMAT FROM ORD.DET.REC USING "ð"
     RETURN_ARR<1,-1> = "K" : DELIM : 0
     STATUS = RBO.setProperty("","DISPARR",TEMPMAT)
     STATUS = RBO.setProperty("","RETARR",RETURN_ARR)
     STATUS = RBO.setProperty("","SET_FOCUS",SET_FOCUS)
   RETURN

92000*
     GOSUB 90000
     OSD.KIT<1,ROWNo>     = "K"
     GOSUB RESET_PROPERTIES
     RETURN_ARR<1,-1> = "K" : DELIM : 1
     TEMPMAT = ""
     MATBUILD TEMPMAT FROM ORD.DET.REC USING "ð";*"¥"
     STATUS = RBO.setProperty("","DISPARR",TEMPMAT)
     STATUS = RBO.setProperty("","RETARR",RETURN_ARR)
     STATUS = RBO.setProperty("","SET_FOCUS",SET_FOCUS)
RETURN

   91000 *
     GOSUB RESET_PROPERTIES
     STATUS = RBO.setProperty("","SET_FOCUS",SET_FOCUS)
     STATUS = RBO.setProperty("","ServerStatus",1)
     STATUS = RBO.setProperty("","ServerMessage",ERRMSG)
   RETURN
