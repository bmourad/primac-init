SUBROUTINE JOBM_GET_SERIAL_DATA
********************************************************************************
*   Program name :- JOBM_GET_SERIAL_DATA
*   Created:- 12/18/2002
*   Author:- L. Ross
*   Gets info for Job Inquiry 'RS Serial Inquiry' option.
*------------------------------------------------------------------------------*
*
*  
* In Properties:
* --------------
*  
IN_PARAM=''
*
* Out Properties:
* ---------------
*  
OUT_PARAM=''
********************************************************************************
$INCLUDE WWINSERT RBO.H
$INCLUDE ICS.CPYLIB INV_RECEIPTS
$INCLUDE ICS.CPYLIB INV_RECP_WHSE
$INCLUDE ICS.CPYLIB INV_SERIAL
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE JCS.CPYLIB SERIAL.RESV
$INCLUDE JCS.CPYLIB JOB
$INCLUDE CPYLIB CHAR

DEFFUN CalcStkQty(COST.QTY,MAT INV.CNV.REC,ROND,LN)
;* open files

ERRMSG=''
IF FILEINFO(INV_RECEIPTS,0)=0 THEN
   OPEN '','INV_RECEIPTS' TO INV_RECEIPTS ELSE 
      ERRMSG<1,-1>='INV_RECEIPTS FILE IS MISSING.'
   END
END
IF FILEINFO(INV_RECEIPTS_TEMP,0)=0 THEN
   OPEN '','INV_RECEIPTS_TEMP' TO INV_RECEIPTS_TEMP ELSE 
      ERRMSG<1,-1>='INV_RECEIPTS_TEMP FILE IS MISSING.'
   END
END
IF FILEINFO(INV_RECP_WHSE,0)=0 THEN
   OPEN '','INV_RECP_WHSE' TO INV_RECP_WHSE ELSE
      ERRMSG<1,-1>='INV_RECP_WHSE FILE IS MISSING'
   END
END
IF FILEINFO(INV_RECP_WHSE_TEMP,0)=0 THEN
   OPEN '','INV_RECP_WHSE_TEMP' TO INV_RECP_WHSE_TEMP ELSE
      ERRMSG<1,-1>='INV_RECP_WHSE_TEMP FILE IS MISSING'
   END
END
IF FILEINFO(INV_SERIAL,0)=0 THEN
   OPEN '','INV_SERIAL' TO INV_SERIAL ELSE
      ERRMSG<1,-1>='INV_SERIAL FILE IS MISSING'
   END
END
IF FILEINFO(INV_SERIAL_TEMP,0)=0 THEN
   OPEN '','INV_SERIAL_TEMP' TO INV_SERIAL_TEMP ELSE
      ERRMSG<1,-1>='INV_SERIAL_TEMP FILE IS MISSING'
   END
END
IF FILEINFO(INVENTORY,0)=0 THEN
  OPEN '','INVENTORY' TO INVENTORY ELSE
    ERRMSG<1,-1>='INVENTORY FILE IS MISSING'
   END
END
IF FILEINFO(INV.WHSE,0)=0 THEN
  OPEN '','INV.WHSE' TO INV.WHSE ELSE
    ERRMSG<1,-1>='INV.WHSE FILE IS MISSING'
   END
END
IF FILEINFO(JOB,0)=0 THEN
  OPEN '','JOB' TO JOB ELSE
    ERRMSG<1,-1>='JOB FILE IS MISSING'
  END
END
IF ERRMSG#'' THEN GOTO 93000


SRESV.PRWHSE = ''
SRESV.RECP = ''
SRESV.SERIAL = ''
SRESV.QTY = ''
SRESV.UN.COST = ''
SRESV.RECP.DATE = ''
SRESV.AVAIL= ''
SRESV.OLD.QTY = ''


STATUS=RBO.getProperty('','ID',ID)
CONO=ID[1,3]
JOB_NO=ID[4,8]

STATUS=RBO.getProperty('','JOB_RESV_MATL',PROD)
STATUS=RBO.getProperty('','JOB_RESV_WHSE',WHSE)

STATUS=RBO.getProperty('','ENTERED_AMT',ENTERED.AMT) ; * ADDED BY ZUBAIR TO GET THE USER ENTERD(RESERVE QTY) TO SHOW IN THE NEXT GRID
STATUS=RBO.setProperty('','ENTERED_AMT',ENTERED.AMT)  



;* get database values

MATREAD JOB.REC FROM JOB,ID ELSE
  MAT JOB.REC = ''
END
TMP.RECP='' ; TMP.SERIAL='' ; TMP.OLD.QTY=''
TMP.NEW.QTY='' ; TMP.UNIT.COST=''
TMP.RECP.DATE='' ; TMP.AVAIL=''
TMP.RESV=''; TMP.TOTAL=''

MATREAD INV.REC FROM INVENTORY,CONO:PROD ELSE
  INV.FULL.DESC = 'Unknown'
END

PRODDESC = INV.FULL.DESC
$INCLUDE ICSBP INV.UM.CNV
IWH.ID=CONO:PROD:"!":WHSE

MATREAD IWH.REC FROM INV.WHSE,IWH.ID ELSE
  MAT IWH.REC = ''
END

PRWHSE=PROD:"!":WHSE
LINE=0

RCNT=DCOUNT(IWH.RECP.NO,VM)

FOR R=1 TO RCNT
	INVR.ID=CONO:IWH.RECP.NO<1,R>
	IF RECORDLOCKED(INV_RECEIPTS_TEMP,INVR.ID)=0 THEN
		DELETE INV_RECEIPTS_TEMP,INVR.ID
     	END
     	MATREAD INVR.REC FROM INV_RECEIPTS_TEMP,INVR.ID ELSE
		MATREAD INVR.REC FROM INV_RECEIPTS,INVR.ID THEN
       		IRW.ID=CONO:IWH.RECP.NO<1,R>:"!":WHSE
       		IF RECORDLOCKED(INV_RECP_WHSE_TEMP,IRW.ID)=0 THEN
       			DELETE INV_RECP_WHSE_TEMP,IRW.ID
       		END
			MATREAD IRW.REC FROM INV_RECP_WHSE_TEMP,IRW.ID ELSE
       			MATREAD IRW.REC FROM INV_RECP_WHSE,IRW.ID ELSE
              			MAT IRW.REC=''
              		END
           		END
	        END
     	END
     	SCNT=DCOUNT(IRW.SERIAL.NO,VM)
	FOR S=1 TO SCNT
       	SERIAL=IRW.SERIAL.NO<1,S>
        	ISTK.ID=CONO:SERIAL
	       IF RECORDLOCKED(INV_SERIAL_TEMP,ISTK.ID)=0 THEN
       		DELETE INV_SERIAL_TEMP,ISTK.ID
        	END
	       MATREAD ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID ELSE
       		MATREAD ISTK.REC FROM INV_SERIAL,ISTK.ID THEN
			      	LINE +=1
               		TMP.RECP<1,LINE>=IWH.RECP.NO<1,R>
               		TMP.SERIAL<1,LINE>=SERIAL
               		TMP.UNIT.COST<1,LINE>=OCONV(INVR.UNIT.COST,'MD4')
               		TMP.RECP.DATE<1,LINE>=OCONV(INVR.ENT.DATE,'D2/')
              		TMP.AVAIL<1,LINE>=ISTK.RSVB.QTY
               		LOCATE JOB_NO IN ISTK.JOB<1> SETTING JPOS THEN
                  			TMP.OLD.QTY<1,LINE>=ISTK.JRSVD.QTY<1,JPOS>
                  			TMP.NEW.QTY<1,LINE>=ISTK.JRSVD.QTY<1,JPOS>
                  			TMP.AVAIL<1,LINE>=ISTK.JRSVD.QTY<1,JPOS>+ISTK.RSVB.QTY
               		END
               		GOSUB SET.SRESV.ARR
            		END
        	END	
	NEXT S
NEXT R

FOR S=1 TO LINE
	TMP=CalcStkQty(TMP.OLD.QTY<1,S>,MAT INV.CNV.REC,'','') 
   	TMP.RESV<1,S>=OCONV(TMP,ICR.CNV)
   	TMP=CalcStkQty(TMP.NEW.QTY<1,S>,MAT INV.CNV.REC,'','') 
   	TMP.NEW.QTY<1,S>=OCONV(TMP,ICR.CNV)
   	TMP=CalcStkQty(TMP.AVAIL<1,S>,MAT INV.CNV.REC,'','') 
   	TMP.AVAIL<1,S>=OCONV(TMP,ICR.CNV)
NEXT S
;* set the totals
TMP=SUM(TMP.OLD.QTY<1>)
TMP=CalcStkQty(TMP,MAT INV.CNV.REC,'','')
TMP.TOTAL=OCONV(TMP,ICR.CNV)
NO.PAGES=INT(LINE/11+.99)

STATUS=RBO.setProperty('','JOB_RESV_MATL',TMP.SERIAL)
STATUS=RBO.setProperty('','RESV_MATL_UM',TMP.UNIT.COST)
STATUS=RBO.setProperty('','RESV_DATE',TMP.RECP.DATE)

STATUS=RBO.setProperty('','RESV_ALOC_QTY',TMP.RESV) ; * ALREADY EXSITING QTY

STATUS=RBO.setProperty('','RESV_USED_QTY',TMP.AVAIL)
STATUS=RBO.setProperty('','RET_DEF_WHSE',SUM(TMP.AVAIL))

STATUS=RBO.setProperty('','RET_PROD_LIST',TMP.NEW.QTY) ; * CURRENT QTY

STATUS=RBO.setProperty('','RET_WHSE_LIST',SUM(TMP.NEW.QTY))
STATUS=RBO.setProperty('','RSV_BALANCE',TMP.TOTAL)
STATUS=RBO.setProperty('','RSV_REQD_QTY',NO.PAGES)
STATUS=RBO.setProperty('','MATL_TYPE',LOWER(TMP.RECP))

GOTO 99999

SET.SRESV.ARR: 
*****************
*
   LOCATE PRWHSE IN SRESV.PRWHSE<1> SETTING PRWHSE.POS THEN
      LOCATE TMP.RECP<1,LINE> IN SRESV.RECP<1>,PRWHSE.POS SETTING RPOS THEN
         PRWHSE.POS=RPOS
         IF SRESV.PRWHSE<1,RPOS>=PRWHSE THEN
            LOCATE TMP.SERIAL<1,LINE> IN SRESV.SERIAL<1,RPOS> SETTING SPOS THEN 
               SRESV.QTY<1,RPOS,SPOS>=TMP.NEW.QTY<1,LINE>+0
               SRESV.OLD.QTY<1,RPOS,SPOS>=TMP.OLD.QTY<1,LINE>+0
               SRESV.AVAIL<1,RPOS,SPOS>=TMP.AVAIL<1,LINE>+0
            END ELSE
               SRESV.SERIAL<1,RPOS,SPOS>=TMP.SERIAL<1,LINE>
               SRESV.QTY<1,RPOS,SPOS>=TMP.NEW.QTY<1,LINE>+0
               SRESV.OLD.QTY<1,RPOS,SPOS>=TMP.OLD.QTY<1,LINE>+0
               SRESV.AVAIL<1,RPOS,SPOS>=TMP.AVAIL<1,LINE>+0
            END
         END ELSE
            GOSUB SRESV.INSERT
         END
      END ELSE
         PRWHSE.POS=RPOS
         GOSUB SRESV.INSERT
      END
   END ELSE
      GOSUB SRESV.INSERT
   END
RETURN
*
*****************
SRESV.INSERT: 
*****************
*
   SRESV.PRWHSE=INSERT(SRESV.PRWHSE,1,PRWHSE.POS,-1,PRWHSE)
   SRESV.RECP=INSERT(SRESV.RECP,1,PRWHSE.POS,-1,TMP.RECP<1,LINE>)
   SRESV.SERIAL=INSERT(SRESV.SERIAL,1,PRWHSE.POS,-1,TMP.SERIAL<1,LINE>)
   SRESV.QTY=INSERT(SRESV.QTY,1,PRWHSE.POS,-1,TMP.NEW.QTY<1,LINE>+0)
   SRESV.OLD.QTY=INSERT(SRESV.OLD.QTY,1,PRWHSE.POS,-1,TMP.OLD.QTY<1,LINE>+0)
   SRESV.AVAIL=INSERT(SRESV.AVAIL,1,PRWHSE.POS,-1,TMP.AVAIL<1,LINE>+0)
   SRESV.RECP.DATE=INSERT(SRESV.RECP.DATE,1,PRWHSE.POS,-1,TMP.RECP.DATE<1,LINE>)
   SRESV.UN.COST=INSERT(SRESV.UN.COST,1,PRWHSE.POS,-1,TMP.UNIT.COST<1,LINE>+0)
   RETURN


93000 
STATUS = RBO.setProperty('','ServerStatus',1)        
STATUS = RBO.setProperty('','ServerMessage',ERRMSG<1,-1>)  

99999
RETURN
