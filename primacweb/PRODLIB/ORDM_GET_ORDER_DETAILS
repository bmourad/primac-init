SUBROUTINE ORDM_GET_ORDER_DETAILS
$INCLUDE CPYLIB COMMON1
$INCLUDE JCS.CPYLIB COM.JCS.LINK  
$INCLUDE ICS.CPYLIB COM.INV.MAIN  
$INCLUDE ICS.CPYLIB COM.INV.SERIAL
$INCLUDE JCS.CPYLIB COM.INV.STATS 
$INCLUDE PMC.CPYLIB COM.CUST      
$INCLUDE OPS.CPYLIB COM.ORDER     
$INCLUDE ICS.CPYLIB COM.INV.CNV   
$INCLUDE OPS.CPYLIB COM.OPS.LINK   
********************************************************************************
*   Program name :- ORDM_GET_ORDER_DETAILS
*   Created:- 10/6/2003
*------------------------------------------------------------------------------*
*
* PROGRAMMER SYED ABDUL ALEEM
* In Properties:
* --------------
*  
*
* Out Properties:
* ---------------
*  
********************************************************************************
$INCLUDE WWINSERT RBO.H
$DEFINE CUSTOMER
$INCLUDE PMC.CPYLIB CUSTOMER
$DEFINE ORDER
$INCLUDE OPS.CPYLIB ORDER
$INCLUDE OPS.CPYLIB ORDER.DETAIL
$DEFINE ORDERDETAILINQ
$INCLUDE OPS.CPYLIB ORDER.DETAIL.INQ
$DEFINE JOBFNGDSTATS
$INCLUDE OPS.CPYLIB JOB.FNGD.STATS
$DEFINE INVENTORY
$INCLUDE ICS.CPYLIB INVENTORY
$DEFINE CATEGORY
$INCLUDE ICS.CPYLIB CATEGORY
$DEFINE INVWHSE
$INCLUDE ICS.CPYLIB INV.WHSE
$DEFINE INVWHSELOC
$INCLUDE ICS.CPYLIB INV.WHSE.LOC
$DEFINE FNGDSTATS
$INCLUDE ICS.CPYLIB FNGD.STATS
$DEFINE FNGDJOBSTATS
$INCLUDE ICS.CPYLIB FNGD.JOB.STATS
$DEFINE FNGDORDERSTATS
$INCLUDE ICS.CPYLIB FNGD.ORDER.STATS
$DEFINE INVAUDITHIST
$INCLUDE ICS.CPYLIB INV_AUDIT_HIST
$DEFINE INVRECEIPTS
$INCLUDE ICS.CPYLIB INV_RECEIPTS
$DEFINE INVRECPWHSE
$INCLUDE ICS.CPYLIB INV_RECP_WHSE
$DEFINE FILEVARS
$INCLUDE CPYLIB FILE.VARS
$INCLUDE CPYLIB CHAR

DEFFUN CALC_STK_QTY(COST.QTY,MAT INV.CNV.REC,ROND,LN)
DEFFUN CALC_COST_QTY(STK.QTY,MAT INV.CNV.REC,ROND,LN)

  TM = CHAR(240)

* Insert method code here
  STATUS = RBO.getProperty('', 'PMCProperty', PMCProperty)
  STATUS = RBO.getProperty('', 'ID', ORDER.ID)
  
  OPEN "","ORDER" TO ORDER ELSE
     ERRMSG = "Cannot locate the ORDER file"; GOTO 93000
  END

  OPEN "","ORDER.DETAIL" TO ORDER.DETAIL ELSE
    ERRMSG = "Cannot locate the ORDER.DETAIL file";GOTO 93000
  END

  OPEN "","INVENTORY" TO INVENTORY ELSE
    ERRMSG = "Cannot locate the INVENTORY file";GOTO 93000
  END

  OPEN "","INV.WHSE" TO INV.WHSE ELSE
    ERRMSG = "Cannot locate the INV.WHSE file";GOTO 93000
  END

  OPEN "","ORDER.RELEASE" TO ORDER.RELEASE ELSE
    ERRMSG = "Cannot locate the ORDER.RELEASE file";GOTO 93000
  END

  CONO = PMCProperty<1,4>

   ORDNO = ORDER.ID[4,99]

   MATREAD ORD.REC FROM ORDER, CONO:ORDNO ELSE
	MAT ORD.REC = ""  
	*ERRMSG = 'ORDER record is locked by user - ':GETUSERNAME(STATUS())
   END

	STATUS = "L"; SHPNO = "ALL"
	CALL ORDER_LINE_UPD1(CONO,ORDNO,SHPNO,STATUS)

	CALL MODIFY_ORD_DET_INDQ(CONO,MAT ORD.DET.INQ,"STOCK")

	MATBUILD ODQ_ARRAY FROM ORD.DET.INQ ,1 USING 'ð'
	STATUS = RBO.setProperty('', 'ODQ_ARRAY',ODQ_ARRAY)

	ORD.DET.SUM.STR = ""
	SCNT=DCOUNT(ORD.SHIP.TO,VM)

	FOR S=1 TO SCNT
	  FOR P=1 TO ORD.DET.REC.SIZE
*		ORD.DET.SUM.STR := "P :: " : P : " :: " : " S :: " : S : " :: " : CHANGE(ORD.DET.SUM(P,S),AM,"^^^") : "ð"
		ORD.DET.SUM.STR := CHANGE(ORD.DET.SUM(P,S),AM,"_^^^_") : "ð"
	  NEXT P
		ORD.DET.SUM.STR = ORD.DET.SUM.STR[1,LEN(ORD.DET.SUM.STR)-1]
		ORD.DET.SUM.STR := CHAR(241)
	NEXT S	
		ORD.DET.SUM.STR = ORD.DET.SUM.STR[1,LEN(ORD.DET.SUM.STR)-1]

	STATUS = RBO.setProperty('', 'ORD_DET_SUM',ORD.DET.SUM.STR)
   
  XML.STR = "<?xml version='1.0'?>" : "<ORDM>"

  CMD = "SSELECT ORDER.DETAIL WITH @ID LIKE " : ORDER.ID : "..."
  UDTEXECUTE CMD

   DATA = 1
   I = 1
   LOOP
      READNEXT CODE ELSE DATA = 0
   WHILE DATA DO
	MATREAD ORD.DET.REC FROM ORDER.DETAIL,CODE THEN

	XML.STR := "<SHIP_TO ID='" : FIELD(CODE,"!",2) : "'>"
	XML.STR := "<SHIP_TO_PO>" : OSD.PO : "</SHIP_TO_PO>"
	XML.STR := "<SHIP_TO_TERMS>" : OSD.SHP.TERMS : "</SHIP_TO_TERMS>"

	ID<1,I> = CODE

	INV.COUNT = DCOUNT(OSD.PROD,@VM)

	INV.DESC.LIST = ""
	INV.UNIT.LIST = ""

	INV.ORDERED.LIST = ""
	INV.RESERVED.LIST = ""
	INV.ALLOCATED.LIST = ""
	INV.ORDERED.PRICE.LIST = ""

	INV.M.FLAG = ""
	INV.T.FLAG = ""
	INV.R.FLAG = ""
	INV.S.FLAG = ""

	FOR K = 1 TO INV.COUNT 

	MATREAD INV.REC FROM INVENTORY,CONO : OSD.PROD<1,K> ELSE
		INV.DESC = ""
		INV.UNIT = ""
	END

	INV.DESC.LIST<1,K> = INV.DESC
	INV.UNIT.LIST<1,K> = INV.UNIT<1,3>

	$INCLUDE ICSBP INV.UM.CNV
	INDX = K

  IF OSD.KIT<1,INDX> = "K" THEN
    RESV.PRINT = OSD.KIT.R.QTY<1,INDX>
    ORDER.PRICE = OSD.KIT.PRICE<1,INDX>
* T27007 v
*   IF (OV.TOGGLE) THEN                  
     ORDER.PRINT =OSD.KIT.O.QTY<1,INDX> 
*   END ELSE                             
*     ORDER.PRINT = OSD.KIT.G.QTY<1,INDX>
*   END                                  
* T27007 ^
  END ELSE
    RESV.PRINT = OSD.R.QTY<1,INDX>
    ORDER.PRICE = OSD.PRICE<1,INDX>
* T27007 v
*    IF (OV.TOGGLE) THEN              
      ORDER.PRINT=OSD.O.QTY<1,INDX>  
*    END ELSE                         
      ORDER.PRINT = OSD.G.QTY<1,INDX>
*    END                              
* T27007 ^
  END
 
 TMP.ID=CONO:OSD.PROD<1,INDX>:"!":OSD.WHSE<1,INDX>
  MATREAD IWH.REC FROM INV.WHSE,TMP.ID ELSE
    MAT IWH.REC = ""
  END

  INV.ORDERED.LIST<1,K> = OCONV(INT(((ORDER.PRINT / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV)
  INV.RESERVED.LIST<1,K> = OCONV(INT(((RESV.PRINT / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV)
  INV.ALLOCATED.LIST<1,K> = OCONV(INT(((OSD.A.QTY<1,INDX> / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV)

  IF ORDER.PRICE > 0 THEN
    INV.ORDERED.PRICE.LIST<1,K> = OCONV(ORDER.PRICE,"MD4")
  END ELSE
    INV.ORDERED.PRICE.LIST<1,K> = ""
  END


  IF OSD.COMMENT<1,INDX> = "" THEN
    STATUS = ""
  END ELSE
    STATUS = "*"
  END

 INV.M.FLAG<1,K> = STATUS

 *
 *SHIP TO FLAG
 *
*  PTR = 1
*  LOOP
*    LOCATE OSD.PROD<1,INDX> IN ODQ.PROD<1>,PTR SETTING PPTR THEN
*      BEGIN CASE
*        CASE (OSD.WHSE<1,INDX> # ODQ.WHSE<1,PPTR>) OR (OSD.KIT<1,INDX> # ODQ.KIT<1,PPTR>) OR (OSD.PROD.SEQ<1,INDX> # ODQ.PROD.SEQ<1,PPTR>) 
*        CASE ODQ.G.QTY<1,PPTR>+0 > 0;*T20234
*          STATUS = "*"
*          PTR = 0
*        CASE 1
*          STATUS = ""
*          PTR = 0
*      END CASE
*    END ELSE
*      STATUS = ""
*      PTR = 0
*    END
*  WHILE PTR DO
*    PTR = PPTR + 1
*  REPEAT

INV.T.FLAG<1,K> = ""

*
*ORDER STATUS
*
  IF OSD.KIT<1,INDX> = "N" THEN
    BEGIN CASE
      CASE OSD.O.QTY<1,INDX> < 1
        STATUS = "Ordered"
      CASE OSD.I.QTY<1,INDX> >= OSD.O.QTY<1,INDX>
        STATUS = "Invoiced"
      CASE OSD.S.QTY<1,INDX> >= OSD.O.QTY<1,INDX>
        STATUS = "Shipped"
      CASE OSD.A.QTY<1,INDX> < 1
        STATUS = "Ordered"
      CASE OSD.F.QTY<1,INDX> >= OSD.A.QTY<1,INDX>
        STATUS = "F"
      CASE 1
        STATUS = "Manufactured"
    END CASE
  END
  IF OSD.KIT<1,INDX> = "K" THEN
    BEGIN CASE
      CASE OSD.KIT.O.QTY<1,INDX> < 1
        STATUS = "Ordered"
      CASE OSD.KIT.I.QTY<1,INDX> >= OSD.KIT.O.QTY<1,INDX>
        STATUS = "Invoiced"
      CASE OSD.KIT.S.QTY<1,INDX> >= OSD.KIT.O.QTY<1,INDX>
        STATUS = "Shipped"
      CASE OSD.KIT.A.QTY<1,INDX> < 1
        STATUS = "Ordered"
      CASE OSD.KIT.F.QTY<1,INDX> >= OSD.KIT.A.QTY<1,INDX>
        STATUS = "F"
      CASE 1
        STATUS = "Manufactured"
    END CASE
  END

INV.S.FLAG<1,K> = STATUS

*
*RELEASE NO
*
  STATUS = ""
  IF OSD.REL.NO<1,INDX> # "" THEN
    STATUS = "*"
  END ELSE
    OCNT = DCOUNT(ORD.REL.NO,VM)
 *   FOR O = 1 TO OCNT UNTIL STATUS # ""
 *     MATREAD ORR.REC FROM ORDER.RELEASE, CONO:ORD.REL.NO<1,O> THEN
 *       IF ORR.STATUS<1,1> # "COMPLETED" AND ORR.SHIP.TO = SHPNO AND ORR.QTY<1,INDX>+0 > 0 THEN
 *         STATUS = "*"
 *       END
 *     END
 *   NEXT O
  END

	INV.R.FLAG<1,K> = STATUS

		XML.STR := "<PROD OLD='Y' ID='" : OSD.PROD<1,K> : "' WHSE_ID='" : OSD.WHSE<1,K> : "' KIT='" : OSD.KIT<1,K> : "'>" 
		XML.STR := "<PROD_DESC>" : INV.DESC : "</PROD_DESC>"
		XML.STR := "<PROD_UOM>" : INV.UNIT<1,3> : "</PROD_UOM>"
		XML.STR := "<ORD_QTY>" : INV.ORDERED.LIST<1,K> : "</ORD_QTY>"
		XML.STR := "<ORD_RESERVE>" : INV.RESERVED.LIST<1,K> : "</ORD_RESERVE>"
		
		XML.STR := "<ORD_ALLOC>" : INV.ALLOCATED.LIST<1,K> : "</ORD_ALLOC>"
		XML.STR := "<JOB_ALLOC ALLOC_QTY=''>"
		ALLOC.COUNT = DCOUNT(OSD.JOB<1,K>,SM)
		
		IF ALLOC.COUNT > 1 THEN
			ALLOC.JOB = "MULTIPLE"
		END ELSE IF ALLOC.COUNT = 1 THEN
			ALLOC.JOB = OSD.JOB<1,K>
		END ELSE
			ALLOC.JOB = ""
		END 
		
		FOR A = 1 TO ALLOC.COUNT
			JOB.QTY = OCONV(INT(((OSD.JOB.QTY<1,K,A> / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV)
			XML.STR := "<JOB QTY='" : JOB.QTY : "'>" : OSD.JOB<1,K,A> : "</JOB>"
			*XML.STR := "<JOB_QTY>" : JOB.QTY : "</JOB_QTY>"
		NEXT A
		XML.STR := "</JOB_ALLOC>"
		
		RESERVE.COUNT = DCOUNT(OSD.RECP.NO<1,K>,SM)		

		XML.STR1 = ""
		JOB.RESERVE.QTY.STR = ""
		FOR A = 1 TO RESERVE.COUNT
			JOB.RESERVE.QTY = OCONV(INT(((OSD.FI.QTY<1,K,A> / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV)
			JOB.RESERVE.QTY.STR = JOB.RESERVE.QTY.STR : JOB.RESERVE.QTY : "#" 
			XML.STR1 := "<JOB_RSV QTY='" : JOB.RESERVE.QTY : "'>" : OSD.RECP.NO<1,K,A> : "</JOB_RSV>"
		NEXT A
			
		JOB.RESERVE.QTY.STR = JOB.RESERVE.QTY.STR[1,LEN(JOB.RESERVE.QTY.STR)-1]

		XML.STR := "<JOB_RESERVE IWH_RSV_FI='' ORD_OLD_RECP_LIST='" : CONVERT(SVM,"#", OSD.RECP.NO<1,K>) :"' ORD_OLD_RESERVE_QTY='" : JOB.RESERVE.QTY.STR : "'>"
		XML.STR := XML.STR1
	
		XML.STR := "</JOB_RESERVE>"

		XML.STR := "<ALLOC_JOB>" : ALLOC.JOB : "</ALLOC_JOB>"
		XML.STR := "<UNIT_PRICE>" : INV.ORDERED.PRICE.LIST<1,K> : "</UNIT_PRICE>"

		XML.STR := "</PROD>"
	NEXT K
		XML.STR := "</SHIP_TO>"

	I = I + 1
	END 

   REPEAT

 	
	XML.STR := "</ORDM>"
	STATUS = RBO.setProperty('', 'XML_STR',XML.STR)
	*STATUS = RBO.setProperty('', 'ServerStatus', " INSIDE OORDM_GET_ORDER_DETAILS ODQ.G.QTY :: " : ODQ.G.QTY )
	*STATUS = RBO.setProperty('', 'ServerMessage', " INSIDE OORDM_GET_ORDER_DETAILS ODQ.G.QTY :: " : ODQ.G.QTY )
	
* End of method code
RETURN

93000*
   STATUS = RBO.setProperty('', 'ServerStatus', '1')
   STATUS = RBO.setProperty('', 'ServerMessage', ERRMSG)

