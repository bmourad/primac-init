SUBROUTINE ORDM_ORDER_MAINT_WRITEDATA
********************************************************************************************************************
*                                                                                                                  *
*   Program name :- ORDM_ORDER_MAINT_WRITEDATA                                                                     *
*   Created:-                                                                                                      *
*   Programmer :- Suhail Hussain S                                                                                 *
*                                                                                                                  *
********************************************************************************************************************
*  THE VARIABLE PROMPTS HOLDS THE VALUES OF ALL THE USER INPUTS. THE SYNTAX OF IF IS AS FOLLOWS... :               *
*                                                                                                                  *
*     PROMPTS<1,X,1> = PROMPT NUMBER                                                                               *
*     PROMPTS<1,X,2> = I / M / D    [ I => INPUT   M => WARNING / INFO MESSAGE  D => VALUE TO BE DISPLAYED ]       *
*     PROMPTS<1,X,3> = Y / N     [ Y => USER INTERACTION REQUIRED       N => USER INTERACTION NOT REQUIRED ]       *
*     PROMPTS<1,X,4> = PROMPT / WARNING / INFO MESSAGE STRING                                                      *
*     PROMPTS<1,X,5> = DEFAULT VALUE FOR THE INPUT                                                                 *
*     PROMPTS<1,X,6> = POSSIBLE VALID VALUES FOR INPUT                                                             *
*     PROMPTS<1,X,7> = USER PROVIDED INPUT FOR THE REQUIRED PROMPT                                                 *
*                                                                                                                  *
********************************************************************************************************************
$INCLUDE WWINSERT RBO.H

$INCLUDE CPYLIB COMMON1
$INCLUDE JCS.CPYLIB COM.JCS.LINK  
$INCLUDE ICS.CPYLIB COM.INV.MAIN  
$INCLUDE ICS.CPYLIB COM.INV.SERIAL
$INCLUDE JCS.CPYLIB COM.INV.STATS 
$INCLUDE PMC.CPYLIB COM.CUST 
$INCLUDE OPS.CPYLIB COM.ORDER
$INCLUDE OPS.CPYLIB COM.OPS.LINK

$DEFINE INVENTORY
$DEFINE ORDER
$DEFINE ORDERDETAILINQ
$DEFINE COMPOPS
$DEFINE CUSTOMER
$DEFINE CATEGORY
$DEFINE INVWHSE
$DEFINE FNGDSTATS
$DEFINE FNGDORDERSTATS
$DEFINE JOB
$DEFINE FILEVARS

$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE PMC.CPYLIB COMP.OPS
$INCLUDE PMC.CPYLIB CUSTOMER
$INCLUDE OPS.CPYLIB ORDER
$INCLUDE OPS.CPYLIB ORDER.DETAIL
$INCLUDE OPS.CPYLIB ORDER.DETAIL.INQ
$INCLUDE OPS.CPYLIB ORDER.RELEASE
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV.FNGD
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE ICS.CPYLIB FNGD.BOM
$INCLUDE JCS.CPYLIB JOB.CREDIT.STATS
$INCLUDE ICS.CPYLIB FNGD.STATS
$INCLUDE ICS.CPYLIB FNGD.ORDER.STATS
$INCLUDE ICS.CPYLIB FNGD.JOB.STATS
$INCLUDE ICS.CPYLIB PRICE.TABLE
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE JES.CPYLIB ESTIMATE
$INCLUDE JCS.CPYLIB JOB
$INCLUDE PMC.CPYLIB SHIP.TO
$INCLUDE CPYLIB FILE.VARS
$INCLUDE CPYLIB CHAR
OPEN "","CONTROL" TO CONTROL ELSE STOP
   OPEN "","COMPANY" TO COMPANY ELSE ERRMSG = "CANNOT OPEN COMPANY FILE";GOTO 91000
   OPEN "","CUSTOMER" TO CUSTOMER ELSE ERRMSG = "CANNOT OPEN CUSTOMER FILE";GOTO 91000
   OPEN "","ORDER" TO ORDER ELSE ERRMSG = "CANNOT OPEN ORDER FILE";GOTO 91000
   OPEN "","ORDER.DETAIL" TO ORDER.DETAIL ELSE ERRMSG = "CANNOT OPEN ORDER.DETAIL FILE";GOTO 91000
   OPEN "","ORDER.RELEASE" TO ORDER.RELEASE ELSE ERRMSG = "CANNOT OPEN ORDER.RELEASE FILE";GOTO 91000
   OPEN "","INVENTORY" TO INVENTORY ELSE ERRMSG = "CANNOT OPEN INVENTORY FILE";GOTO 91000
   OPEN "","CATEGORY" TO CATEGORY ELSE ERRMSG = "CANNOT OPEN CATEGORY FILE";GOTO 91000
   OPEN "","INV.WHSE" TO INV.WHSE ELSE ERRMSG = "CANNOT OPEN INV.WHSE FILE";GOTO 91000
   OPEN "","INV.FNGD" TO INV.FNGD ELSE ERRMSG = "CANNOT OPEN INV.FNGD FILE";GOTO 91000
   OPEN "","FNGD.BOM" TO FNGD.BOM ELSE ERRMSG = "CANNOT OPEN FNGD.BOM FILE";GOTO 91000
   OPEN "","FNGD.STATS" TO FNGD.STATS ELSE ERRMSG = "CANNOT OPEN FNGD.STATS FILE";GOTO 91000
   OPEN "","FNGD.ORDER.STATS" TO FNGD.ORDER.STATS ELSE ERRMSG = "CANNOT OPEN  FILE";GOTO 91000
   OPEN "","FNGD.JOB.STATS" TO FNGD.JOB.STATS ELSE ERRMSG = "CANNOT OPEN FNGD.JOB.STATS FILE";GOTO 91000
   OPEN "","PRICE.TABLE" TO PRICE.TABLE ELSE ERRMSG = "CANNOT OPEN PRICE.TABLE FILE";GOTO 91000
   OPEN "","WAREHOUSE" TO WAREHOUSE ELSE ERRMSG = "CANNOT OPEN WAREHOUSE FILE";GOTO 91000
   OPEN "","ESTIMATE" TO ESTIMATE ELSE ERRMSG = "CANNOT OPEN ESTIMATE FILE";GOTO 91000
   OPEN "","JOB" TO JOB ELSE ERRMSG = "CANNOT OPEN JOB FILE";GOTO 91000
   OPEN "","CONTROL" TO CONTROL ELSE ERRMSG = "CANNOT OPEN CONTROL FILE";GOTO 91000  
   OPEN "","SHIP.TO" TO SHIP.TO ELSE ERRMSG = "CANNOT OPEN SHIP.TO FILE";GOTO 91000
   OPEN "","CREDIT_STATS" TO CREDIT_STATS ELSE ERRMSG = "Cannot locate the CREDIT_STATS file";GOTO 91000
   OPEN "","PICK.TICKET.PRT" TO PICK.TICKET.PRT ELSE ERRMSG = "Cannot locate the PICK.TICKET.PRT file";GOTO 91000
   OPEN "","JOB.CREDIT.STATS" TO JOB.CREDIT.STATS ELSE ERRMSG = "CANNOT OPEN JOB.CREDIT.STATS FILE";GOTO 91000

******** START OF MAIN INITIALIZATION PROCESS ********

PROMPTS = ""
PMPT_NUM = ""
P.DEF = ""
P.VALID = ""
ERR.FLG = ""
IP.RQD = ""
CALL_FROM = ""
OLD.TOT.AMT = 0
UPDCRED = 0
OLD.CUST = ""
O.ODQ.PROD = ""
O.ODQ.WHSE = ""
O.ODQ.PROD.SEQ = ""
O.ODQ.KIT = ""


MAT COMP.REC = ""
MAT ORD.REC = ""
MAT ORD.DET.SUM = ""
MAT ORD.DET.INQ = ""

STATUS  = RBO.getProperty("","PMCProperty",PMCProperty)
STATUS  = RBO.getProperty("","NEWREC",NEWREC)
STATUS  = RBO.getProperty("","ORDER_NUM",ORDER.NUM)
STATUS  = RBO.getProperty("","PROMPTS",PROMPTS)

CONO    = PMCProperty<1,4>
USER.ID = PMCProperty<1,3>
PORT.NO = "TTY"; CALL SYSVARS.SUB(PORT.NO)

   MATREAD COMP.REC FROM COMPANY, CONO ELSE
      ERRMSG = "Invalid Company ID (":CONO:")"
      GOTO 91000
   END
   MATREAD OPCO.REC FROM CONTROL, CONO:"OPS" ELSE
      ERRMSG = "Cannot locate Order Processing company setup"
      GOTO 91000
   END

IF NEWREC = 1 THEN
   ORD.STAT.DATE = DATE()
   ORD.STATUS = "NEW"
   ORDNO = "N"
END ELSE
   MATREAD ORD.REC FROM ORDER,CONO : ORDER.NUM ELSE MAT ORD.REC = ""
   ORDNO = ORDER.NUM
END


STATUS = RBO.getProperty("","ORD_STATUS",ORD.STATUS)
STATUS = RBO.getProperty("","ORD_PO",ORD.PO)
STATUS = RBO.getProperty("","ORD_DATE",ORD.DATE)
STATUS = RBO.getProperty("","ORD_RCV_DATE",ORD.RCV.DATE)
STATUS = RBO.getProperty("","ORD_REQ_DATE",ORD.REQ.DATE)
STATUS = RBO.getProperty("","ORD_DUE",ORD.DUE)
STATUS = RBO.getProperty("","ORD_JOB",ORD.JOB)
STATUS = RBO.getProperty("","ORD_CRED_AUTH",ORD.CRED.AUTH)
STATUS = RBO.getProperty("","ORD_CUST",ORD.CUST)
STATUS = RBO.getProperty("","ORD_DIV",ORD.DIV)
STATUS = RBO.getProperty("","ORD_CSR_CODE",ORD.CSR.CODE)
STATUS = RBO.getProperty("","ORD_PRINT",ORD.PRINT)
STATUS = RBO.getProperty("","ORD_SLSMN",ORD.SLSMN)
STATUS = RBO.getProperty("","ORD_SHIP_TO",ORD.SHIP.TO)
STATUS = RBO.getProperty("","ORD_PO",ORD.PO)

STATUS = RBO.getProperty("","ORD_AC_CHG_CD",ORD.AC.CHG.CD)
STATUS = RBO.getProperty("","ORD_AC_SLC",ORD.AC.SLC)
STATUS = RBO.getProperty("","ORD_AC_AMOUNT",ORD.AC.AMOUNT)
STATUS = RBO.getProperty("","ORD_AC_INV",ORD.AC.INV)
STATUS = RBO.getProperty("","ORD_AC_DESC",ORD.AC.DESC)
STATUS = RBO.getProperty("","ORD_AC_HIDDEN",ORD.AC.HIDDEN)
STATUS = RBO.getProperty("","ORD_AC_CHG_CAT",ORD.AC.CHG.CAT)
STATUS = RBO.getProperty("","ORD_DET_SUM",ORD_DET_SUM)

FOR AC = 1 TO DCOUNT(ORD.AC.AMOUNT,VM)
  IF ORD.AC.AMOUNT<1,AC> # "" THEN ORD.AC.AMOUNT<1,AC> = ICONV(ORD.AC.AMOUNT<1,AC>,"MD2")
NEXT AC

ORD.DATE = ICONV(ORD.DATE,"D2/")
ORD.RCV.DATE = ICONV(ORD.RCV.DATE,"D2/")
ORD.REQ.DATE = ICONV(ORD.REQ.DATE,"D2/")
ORD.DUE = ICONV(ORD.DUE,"D2/")

   IF ORD_DET_SUM # "" THEN
      FOR X = 1 TO DCOUNT(ORD.SHIP.TO,VM)
         TEMPORD_REC = FIELD(ORD_DET_SUM,"¥",X,1)
         IF TEMPORD_REC # "" THEN
            MATPARSE ORD.DET.REC FROM TEMPORD_REC,"ð"
         END ELSE
            MAT ORD.DET.REC = ""
         END
         FOR P = 1 TO ORD.DET.REC.SIZE
            ORD.DET.SUM(P,X) = ORD.DET.REC(P)
         NEXT P
      NEXT X
   END
   MATREAD CUST.REC FROM CUSTOMER,CONO:ORD.CUST ELSE MAT CUST.REC = ""

   FOR S = 1 TO DCOUNT(ORD.SHIP.TO,VM)
      FOR P = 1 TO ORD.DET.REC.SIZE
        ORD.DET.REC(P) = ORD.DET.SUM(P,S)
      NEXT P
      STATUS = "L"; SHPNO = ORD.SHIP.TO<1,S>
      CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)
   NEXT X
   *STATUS = "L"; SHPNO = "ALL"
   *CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)
   STATUS = RBO.getProperty("","FILE_STATUS",WRITE_STATUS)
   STATUS = WRITE_STATUS

   OLD.TOT.AMT = SUM(ODQ.AMT)
   OLD.CUST = ORD.CUST
   O.ODQ.PROD = ODQ.PROD
   O.ODQ.WHSE = ODQ.WHSE
   O.ODQ.SEQ  = ODQ.PROD.SEQ
   O.ODQ.KIT  = ODQ.KIT

   IF WRITE_STATUS = "JOB" THEN
      STATUS = "UL"; SHPNO = ""
      CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)
      STATUS = RBO.setProperty("","WRITE_STATUS","SUCCESS")
      RELEASE
      RETURN
   END


****************** START OF MAIN PROCESSING ******************

700*
   JOB.BALANCE = SUM(CUST.JOB.BAL)
   ORD.BALANCE = SUM(CUST.ORD.BAL)
   LOCATE ORDNO IN CUST.ORD.NUM<1>,1 SETTING FND THEN
      ORD.BALANCE = ORD.BALANCE - CUST.ORD.BAL<1,FND>
   END
   CUR.BALANCE = SUM(ODQ.AMT) - ORD.TOT.INV
   IF CUR.BALANCE < 0 THEN CUR.BALANCE = 0
   TOT.BALANCE = JOB.BALANCE + ORD.BALANCE + CUR.BALANCE
   AVAIL = ""
   BEGIN CASE
      CASE CUST.CREDIT = "E"
         AVAIL = CUST.CR.LIMIT * 100 - CUST.AR.BAL - TOT.BALANCE
         IF NOT(UPDCRED) AND SUM(ODQ.AMT) # OLD.TOT.AMT AND AVAIL < 0 THEN
            GOTO 1900
         END
      CASE CUST.CREDIT = "CASH"
         AVAIL = CUST.AR.BAL + CUST.AR.BAL + TOT.BALANCE
         IF NOT(UPDCRED) AND SUM(ODQ.AMT) # OLD.TOT.AMT AND AVAIL > 0 THEN
            GOTO 1900
         END
      CASE NOT(UPDCRED) AND SUM(ODQ.AMT) # OLD.TOT.AMT
         GOTO 1900
   END CASE

750*
   IF NEWREC THEN
      B.QTY = 0
      NUM.PRODS = DCOUNT(ODQ.PROD,VM)
      FOR P = 1 TO NUM.PRODS
         IF ODQ.KIT<1,P> = "N" THEN
            B.QTY = B.QTY + ODQ.O.QTY<1,P> - ODQ.R.QTY<1,P> - ODQ.A.QTY<1,P> - ODQ.S.QTY<1,P>
         END
      NEXT P
      EST.BLD = 0
      BEGIN CASE
         CASE B.QTY < 1
            JB.BLD = 0
         CASE OPCO.JOB.BLD = "N"
            JB.BLD = 0
         CASE OPCO.JOB.BLD = "A"
            JB.BLD = 1
         CASE 1
            PMPT_NUM = 54;P.TYPE = "I";P.RQD = "Y";P.VALID = "Y#N";P.MSG = "Auto create a JOB (Yes/No)"
            ECD.REC.VALUE = "";P.MODE = 1
            CALL ORDM_PROCESS_PROMPTS_ARR(PROMPTS,P.MODE,PMPT_NUM,P.TYPE,P.RQD,P.MSG,"",P.VALID,ECD.RET.VALUE)
            GOSUB CHECK.FOR.INPUT
            IF IP.REQ = 1 THEN GOTO 93000
            IF ECD.RET.VALUE = "Y" THEN
               JB.BLD = 1
            END ELSE
               JB.BLD = 0
            END
      END CASE
      IF ORDNO = "N" THEN
         PMPT_NUM = 1;FND_ORD = -1
         FOR O = 1 TO DCOUNT(PROMPTS,VM)
            IF PROMPTS<1,O,1> = 1 THEN FND_ORD = O
         NEXT O
         *LOCATE PMPT_NUM IN PROMPTS,1 SETTING PIND THEN
         *   P.MODE = 1
         *   CALL ORDM_PROCESS_PROMPTS_ARR(PROMPTS,P.MODE,PMPT_NUM,P.TYPE,P.RQD,ERRMSG,"","",ORDNO)
         *END ELSE
         IF FND_ORD # -1 THEN
            ORDNO = PROMPTS<1,FND_ORD,7>
         END ELSE
            READU ORDNO FROM CONTROL, CONO:"ORDER" ELSE
               ORDNO = 10000
            END
            ERRMSG = ""
            LOOP
               ORDNO = ORDNO + 1
               IF ORDNO > 9999999 THEN ORDNO = 10000  ;*T22724
               READU O.REC FROM ORDER, CONO:ORDNO ELSE
                  IF NOT(JB.BLD) OR OPCO.ORD.JOB = "N" THEN
                     ERRMSG = "Please note down the assigned order number"
                  END ELSE
                     READ O.REC FROM JOB, CONO:ORDNO ELSE
                        ERRMSG = "Please note down the assigned order / job number"
                     END
                  END
               END
            WHILE ERRMSG = "" DO
               RELEASE ORDER, CONO:ORDNO
            REPEAT
            WRITE ORDNO ON CONTROL, CONO:"ORDER"
            PMPT_NUM = 1;P.TYPE="M";P.RQD="Y";P.MSG=ERRMSG;P.DEF=ORDNO;P.MODE = 1
            CALL ORDM_PROCESS_PROMPTS_ARR(PROMPTS,P.MODE,PMPT_NUM,P.TYPE,P.RQD,P.MSG,"","",ORDNO)
         END
      END
      STATUS = WRITE_STATUS    ;*ADDED
      SHPNO = ""
      CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)
      CALL_FROM = "NEWREC"
      GOTO 6100
755*
      IF JB.BLD THEN
         BEGIN CASE
            CASE OPCO.EST.BLD = "A"
               EST.BLD = 1
            CASE OPCO.EST.BLD = "P"
               PMPT_NUM = 50;P.TYPE = "I";P.RQD = "Y";P.MSG = "Auto create a ESTIMATE (Yes/No)"
               P.MODE = 1;ECD.RET.VALUE = ""
               CALL ORDM_PROCESS_PROMPTS_ARR(PROMPTS,P.MODE,PMPT_NUM,P.TYPE,P.RQD,P.MSG,"","",ECD.RET.VALUE)
               GOSUB CHECK.FOR.INPUT
               IF IP.REQ = 1 THEN GOTO 93000
               IF ECD.RET.VALUE = "Y" THEN EST.BLD = 1
         END CASE
         IF OPCO.ORD.JOB = "N" THEN
            JOBNO = "N"
         END ELSE
            JOBNO = ORDNO
         END
         MAT JOB.REC = "";IP.REQ = 0
         CALL ORDM_JOB_FNGD_UPD(CONO,ORDNO,JOBNO,JB.BLD,EST.BLD,MAT COMP.REC,PROMPTS)
         GOSUB CHECK.FOR.INPUT
         IF IP.REQ = 1 THEN GOTO 93000
      END
   END ELSE
      SHPNO = ""
      CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)
      CALL_FROM = "OLDREC"
      GOTO 6100
   END
760*
   IF UPDCRED THEN
      MATREADU JOCS.REC FROM CREDIT_STATS, CONO:ORDNO ELSE
         MAT JOCS.REC = ""
      END
      JOCS.CRED.CODE = INSERT(JOCS.CRED.CODE,1,1,0,CUST.CREDIT)
      JOCS.CRED.AUTH = INSERT(JOCS.CRED.AUTH,1,1,0,ORD.CRED.AUTH)
      JOCS.CUST.NO = INSERT(JOCS.CUST.NO,1,1,0,ORD.CUST)
      JOCS.CRED.AVAIL = INSERT(JOCS.CRED.AVAIL,1,1,0,AVAIL)
      JOCS.CRED.LIMIT = INSERT(JOCS.CRED.LIMIT,1,1,0,CUST.CR.LIMIT)
      JOCS.CHG.DATE = INSERT(JOCS.CHG.DATE,1,1,0,DATE())
      MATWRITE JOCS.REC ON CREDIT_STATS, CONO:ORDNO
   END
   STATUS = "L"; SHPNO = "ALL"
   CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)
   PCNT = DCOUNT(O.ODQ.PROD,VM)
   FOR P = 1 TO PCNT
      PROD = O.ODQ.PROD<1,P>; WHSE = O.ODQ.WHSE<1,P>
      PROD.SEQ = O.ODQ.SEQ<1,P>; KIT.TYPE = O.ODQ.KIT<1,P>
      PTR = 1; FND = 0
      LOOP
         LOCATE PROD IN ODQ.PROD<1>,PTR SETTING L THEN
            IF (WHSE = ODQ.WHSE<1,L>) AND (PROD.SEQ=ODQ.PROD.SEQ<1,L>) AND (KIT.TYPE = ODQ.KIT<1,L>) THEN
               PTR = 0; FND = 1
            END
         END ELSE
            PTR = 0
         END
      WHILE PTR DO
         PTR = L + 1
      REPEAT
      IF NOT(FND) THEN
         IWH.ID = CONO:PROD:"!":WHSE
         MATREADU FGS.REC FROM FNGD.STATS, IWH.ID THEN
            PTR = 1
            LOOP
               LOCATE ORDNO IN FGS.ORDER<1>,PTR SETTING OLOC THEN
*T26356 
                  IF PROD.SEQ=FGS.SEQ<1,OLOC> AND KIT.TYPE=FGS.KIT<1,OLOC> THEN 
                     FGS.ORDER = DELETE(FGS.ORDER,1,OLOC,0)
                     FGS.O.QTY = DELETE(FGS.O.QTY,1,OLOC,0)
                     FGS.B.QTY = DELETE(FGS.B.QTY,1,OLOC,0)
                     FGS.SEQ   = DELETE(FGS.SEQ,1,OLOC,0)
                     FGS.KIT   = DELETE(FGS.KIT,1,OLOC,0)
                  END
               END ELSE
                  PTR = 0
               END
            UNTIL PTR = 0 DO
               PTR = 1
            REPEAT
            IF FGS.ORDER # "" OR FGS.JOB # "" THEN
               MATWRITE FGS.REC ON FNGD.STATS, IWH.ID
            END ELSE
               DELETE FNGD.STATS, IWH.ID
            END
         END
         RELEASE FNGD.STATS, IWH.ID
         MATREADU FOS.REC FROM FNGD.ORDER.STATS, IWH.ID:"!":ORDNO:"!":PROD.SEQ:"!":KIT.TYPE THEN
            DELETE FNGD.ORDER.STATS, IWH.ID:"!":ORDNO:"!":PROD.SEQ:"!":KIT.TYPE
         END
         RELEASE FNGD.ORDER.STATS, IWH.ID:"!":ORDNO:"!":PROD.SEQ:"!":KIT.TYPE
      END
   NEXT P
*
   IF (OLD.CUST # "") AND (OLD.CUST # ORD.CUST) THEN
      MATREADU CUST.REC FROM CUSTOMER,CONO:OLD.CUST THEN
         LOCATE ORDNO IN CUST.ORD.NUM<1>,1 SETTING OFND THEN
            CUST.ORD.NUM = DELETE(CUST.ORD.NUM,1,OFND,0)
            CUST.ORD.BAL = DELETE(CUST.ORD.BAL,1,OFND,0)
            MATWRITE CUST.REC ON CUSTOMER, CONO:OLD.CUST
         END
      END
      RELEASE CUSTOMER, CONO:OLD.CUST
   END
   STATUS = RBO.setProperty("","WRITE_STATUS","SUCCESS")
   RELEASE
RETURN

*---- Credit Authorization
1900*   
   JOB.BALANCE = SUM(CUST.JOB.BAL)
   ORD.BALANCE = SUM(CUST.ORD.BAL)
   IF ORD.STATUS<1,1> # "NEW" THEN
      LOCATE ORDNO IN CUST.ORD.NUM<1>,1 SETTING FND THEN
         ORD.BALANCE = ORD.BALANCE - CUST.ORD.BAL<1,FND>
      END
   END
   CUR.BALANCE = SUM(ODQ.AMT) - ORD.TOT.INV
   IF CUR.BALANCE < 0 THEN CUR.BALANCE = 0
   TOT.BALANCE = JOB.BALANCE + ORD.BALANCE + CUR.BALANCE
   EPTR=0
   BEGIN CASE
      CASE CUST.CREDIT = "N"
         ERRMSG = "There is NO CREDIT for this customer"
      CASE CUST.CREDIT = "E"
         AVAIL = CUST.CR.LIMIT * 100 - CUST.AR.BAL - TOT.BALANCE
         IF AVAIL < 0 THEN
            ERRMSG = "A/R = ":OCONV(CUST.AR.BAL,"MD2,$<")
            ERRMSG = ERRMSG : " & ORD/JOB = ":OCONV(TOT.BALANCE,"MD2,$<")
            ERRMSG = ERRMSG : " & AVAIL = ":OCONV(AVAIL,"MD2,$<")
            EPTR = INDEX(ERRMSG," & AVAIL",1)
         END ELSE
            GOTO 1909
         END
      CASE CUST.CREDIT = "CASH"
         AVAIL = CUST.AR.BAL + CUST.AR.BAL + TOT.BALANCE
         IF AVAIL > 0 THEN
            ERRMSG = "A/R = ":OCONV(CUST.AR.BAL,"MD2,$<")
            ERRMSG = ERRMSG : " & ORD/JOB = ":OCONV(TOT.BALANCE,"MD2,$<")
            ERRMSG = ERRMSG : " & TOTAL BAL = ":OCONV(AVAIL,"MD2,$<")
            EPTR = INDEX(ERRMSG," & AVAIL",1)
         END ELSE
            GOTO 1909
         END
      CASE 1
         ERRMSG = "A/R = ":OCONV(CUST.AR.BAL,"MD2,$<")
         ERRMSG = ERRMSG : " & JOB = ":OCONV(TOT.BALANCE,"MD2,$<")
         ERRMSG = ERRMSG : " & TOTAL BAL = ":OCONV(CUST.AR.BAL+TOT.BALANCE,"MD2,$<")
         EPTR = INDEX(ERRMSG," & TOTAL",1)
   END CASE
   
   CAC = "SSELECT CREDIT.AUTH.CODE WITH CONO = " : CONO
   UDTEXECUTE CAC 
   CAC_VALS = ""
   DATA = 1
   LOOP 
      READNEXT CAC_ID ELSE DATA = 0
      WHILE DATA DO
         CAC_VALS := "#" : CAC_ID
   REPEAT
   IF CAC_VALS # "" THEN
      CAC_VALS = CAC_VALS[2,LEN(CAC_VALS)]
   END

   PMPT_NUM = "W1";P.TYPE = "M";P.RQD = "Y";P.MSG = ERRMSG;P.MODE = 1
   CALL ORDM_PROCESS_PROMPTS_ARR(PROMPTS,P.MODE,PMPT_NUM,P.TYPE,P.RQD,P.MSG,"","","")

   PMPT_NUM = 27;P.DEF = FIELD(ORD.CRED.AUTH,"!",1)
   P.TYPE = "I";P.RQD = "Y";P.MSG = ERRMSG;P.MODE = 1;ECD.RET.VALUE = ""
   CALL ORDM_PROCESS_PROMPTS_ARR(PROMPTS,P.MODE,PMPT_NUM,P.TYPE,P.RQD,P.MSG,P.DEF,CAC_VALS,ECD.RET.VALUE)
   GOSUB CHECK.FOR.INPUT
   IF IP.REQ = 1 THEN GOTO 93000

   IF ECD.RET.VALUE # "END" THEN
      READ TREC FROM CREDIT.AUTH.CODE, CONO:ECD.RET.VALUE THEN
         ORD.CRED.AUTH = ECD.RET.VALUE:"!":USER.ID:"!":PORT.NO
         UPDCRED = 1
      END ELSE
         ERRMSG = 'Invalid Credit Authorization Code'
         PMPT_NUM = "W2";P.TYPE = "M";P.RQD = "Y";P.MSG = ERRMSG;P.MODE = 3
         CALL ORDM_PROCESS_PROMPTS_ARR(PROMPTS,P.MODE,PMPT_NUM,P.TYPE,P.RQD,P.MSG,"","","")
         PMPT_NUM = "W1";P.MODE = 2
         CALL ORDM_PROCESS_PROMPTS_ARR(PROMPTS,P.MODE,PMPT_NUM,"","","","","","")
         PMPT_NUM = "27";P.MODE = 2
         CALL ORDM_PROCESS_PROMPTS_ARR(PROMPTS,P.MODE,PMPT_NUM,"","","","","","")
         ERR.FLG = 1
         GOTO 1900
      END
   END
   PMPT_NUM = "CAC";P.TYPE = "D";P.RQD = "Y";P.MODE = 1
   CALL ORDM_PROCESS_PROMPTS_ARR(PROMPTS,P.MODE,PMPT_NUM,P.TYPE,P.RQD,"",ORD.DET.AUTH,"","")
1909*
   GOTO 750
RETURN

*
*---- DECIDE IF PICK.TICKET NEEDS TO BE PRINTED
6100*
   IF ORD.PRINT # "N" AND OPCO.SHP.FRM # "R" THEN
      SHPWHS = ""
      FOR X = 1 TO DCOUNT(ORD.SHIP.TO,VM)
         SHPNO = ORD.SHIP.TO<1,X>
         IF SHPNO # "000" THEN
            MATREAD ORD.DET.REC FROM ORDER.DETAIL, CONO:ORDNO:"!":SHPNO ELSE
               MAT ORD.DET.REC = ""
            END
            PCNT = DCOUNT(OSD.PROD,VM)
            FOR P = 1 TO PCNT
               PICK.QTY = 0
               SCNT = DCOUNT(OSD.FI.QTY<1,P>,SVM)
               FOR S = 1 TO SCNT
                  PICK.QTY = PICK.QTY + (OSD.FI.QTY<1,P,S> - OSD.P.QTY<1,P,S>)
               NEXT S
               IF PICK.QTY > 0 THEN
                  SHPWH = SHPNO:"!":OSD.WHSE<1,P>
                  LOCATE SHPWH IN SHPWHS,1 SETTING FND ELSE
                     PKT.ID = CONO:ORDNO:"!":SHPWH
                     READ REC FROM PICK.TICKET.PRT, PKT.ID ELSE
                        SHPWHS<FND> = SHPWH
                     END
                  END
               END
            NEXT P
         END
      NEXT X

      SHPWHSCNT = DCOUNT(SHPWHS,AM)
      IF SHPWHSCNT THEN
         PMPT_NUM = 59;P.TYPE = "I";P.RQD = "Y";P.MSG = "Print pick ticket (Yes/No)"
         ECD.RET.VALUE = "";P.MODE = 1
         CALL ORDM_PROCESS_PROMPTS_ARR(PROMPTS,P.MODE,PMPT_NUM,P.TYPE,P.RQD,P.MSG,"","",ECD.RET.VALUE)
         GOSUB CHECK.FOR.INPUT
         IF IP.REQ = 1 THEN GOTO 93000

         IF ECD.RET.VALUE = "Y" THEN
            FOR T = 1 TO SHPWHSCNT
               SHPWH = SHPWHS<T>
               PKT.ID = CONO:ORDNO:"!":SHPWH
               READ REC FROM PICK.TICKET.PRT, PKT.ID ELSE
                  WRITE "" ON PICK.TICKET.PRT, PKT.ID
               END
            NEXT T
         END
      END
   END
   IF CALL_FROM = "NEWREC" THEN GOTO 755
   IF CALL_FROM = "OLDREC" THEN GOTO 760
RETURN

CHECK.FOR.INPUT:
   STATUS = RBO.getProperty("","IP_FLAG",IP.REQ)
RETURN

93000:
   RELEASE
   STATUS = RBO.setProperty("","PROMPTS",PROMPTS)
RETURN

91000:
   RELEASE
   STATUS = RBO.setProperty("","ServerStatus",1)
   STATUS = RBO.setProperty("","ServerMessage",ERRMSG)
RETURN
