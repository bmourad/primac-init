SUBROUTINE Post_INTROUTM
*********************************************************************
* SYSTEM      - EPRIMAC
* PROGRAM     - Post_INTROUTM
* BY          - SUHAIL HUSSAIN
* DATE		- 6/1/2005
*********************************************************************
*** THIS METHOD IS FOR THE "POST" OPTION
$INCLUDE WWINSERT RBO.H
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE PMC.CPYLIB FISCAL
$INCLUDE PMC.CPYLIB GLTABLE
*$DEFINE CATEGORY
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB WAREHOUSE
*$DEFINE INVENTORY
$INCLUDE ICS.CPYLIB INVENTORY
*$DEFINE INVWHSE
$INCLUDE ICS.CPYLIB INV.WHSE
*$DEFINE INVWHSELOC
$INCLUDE ICS.CPYLIB INV.WHSE.LOC
*$DEFINE INVSERIAL
$INCLUDE ICS.CPYLIB INV_SERIAL
*$DEFINE INVCNV
$INCLUDE ICS.CPYLIB INV.CNV
*$DEFINE DAILYTRANSFER
$INCLUDE ICS.CPYLIB DAILY_TRANSFER
$INCLUDE ICS.CPYLIB TRANSFER
$INCLUDE ICS.CPYLIB INTR_DIV_TRANSFER
*$DEFINE FILEVARS
$INCLUDE CPYLIB FILE.VARS

STATUS = RBO.getProperty('',"ID", ID)
STATUS = RBO.getProperty('',"ProdNo", PROD.ARRAY)
STATUS = RBO.getProperty('',"Serial", RS.ARRAY)

STATUS = RBO.getProperty('',"FromWhse", IDM.FROM.WHSE);*added for test

STATUS = RBO.getProperty('','PMCProperty',PMCPROPERTY)
CONO = PMCPROPERTY<1,4>
OPER.ID = PMCPROPERTY<1,3>
TODAY = DATE()
TRANS.ID = ID[4,99]

* OPEN FILES
  
  OPEN "","COMPANY" TO COMPANY ELSE
    ERRMSG = "CANNOT OPEN COMPANY FILE"; GOTO 91000
  END
  OPEN "","CONTROL" TO CONTROL ELSE
    ERRMSG = "CANNOT OPEN CONTROL FILE"; GOTO 91000
  END
  OPEN "","SECURITY" TO SECURITY ELSE
    ERRMSG = "CANNOT OPEN SECURITY FILE"; GOTO 91000
  END
  OPEN "","WAREHOUSE" TO WAREHOUSE ELSE
    ERRMSG = "CANNOT OPEN WAREHOUSE FILE"; GOTO 91000
  END
  OPEN "","CATEGORY" TO CATEGORY ELSE
    ERRMSG = "CANNOT OPEN CATEGORY FILE"; GOTO 91000
  END
  OPEN "","DIVISION" TO DIVISION ELSE
    ERRMSG = "CANNOT OPEN DIVISION FILE"; GOTO 91000
  END
  OPEN "","INVENTORY" TO INVENTORY ELSE
    ERRMSG = "CANNOT OPEN INVENTORY FILE"; GOTO 91000
  END
  OPEN "","INVENTORY.XREF" TO INVENTORY.XREF ELSE
    ERRMSG = "CANNOT OPEN INVENTORY.XREF FILE"; GOTO 91000
  END
  OPEN "","INV.WHSE" TO INV.WHSE ELSE
    ERRMSG = "CANNOT OPEN INV.WHSE FILE"; GOTO 91000
  END
  OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE
    ERRMSG = "CANNOT OPEN INV.WHSE.LOC FILE"; GOTO 91000
  END
  OPEN "","INV.WHSE.LOC.TEMP" TO INV.WHSE.LOC.TEMP ELSE
    ERRMSG = "CANNOT OPEN INV.WHSE.LOC.TEMP FILE"; GOTO 91000
  END
  OPEN "","INV_SERIAL" TO INV_SERIAL ELSE
    ERRMSG = "CANNOT OPEN INV_SERIAL FILE"; GOTO 91000
  END
  OPEN "","INV_SERIAL_TEMP" TO INV_SERIAL_TEMP ELSE
    ERRMSG = "CANNOT OPEN INV_SERIAL_TEMP FILE"; GOTO 91000
  END
  OPEN "","INV_AUDIT_HIST" TO INV_AUDIT_HIST ELSE
    ERRMSG = "CANNOT OPEN INV_AUDIT_HIST FILE"; GOTO 91000
  END
  OPEN "","INV_AUDIT_HIST_TEMP" TO INV_AUDIT_HIST_TEMP ELSE
    ERRMSG = "CANNOT OPEN INV_AUDIT_HIST_TEMP FILE"; GOTO 91000
  END
  OPEN "","INV_AUDIT_TAG" TO INV_AUDIT_TAG ELSE
    ERRMSG = "CANNOT OPEN INV_AUDIT_TAG FILE"; GOTO 91000
  END
  OPEN "","INV_RECEIPTS" TO INV_RECEIPTS ELSE
    ERRMSG = "CANNOT OPEN INV_RECEIPTS FILE"; GOTO 91000
  END
  OPEN "","INV_RECEIPTS_TEMP" TO INV_RECEIPTS_TEMP ELSE
    ERRMSG = "CANNOT OPEN INV_RECEIPTS_TEMP FILE"; GOTO 91000
  END
  OPEN "","INV_RECP_WHSE" TO INV_RECP_WHSE ELSE
    ERRMSG = "CANNOT OPEN INV_RECP_WHSE FILE"; GOTO 91000
  END
  OPEN "","INV_RECP_WHSE_TEMP" TO INV_RECP_WHSE_TEMP ELSE
    ERRMSG = "CANNOT OPEN INV_RECP_WHSE_TEMP FILE"; GOTO 91000
  END
  OPEN "","INTR_DIV_TRANSFER" TO INTR_DIV_TRANSFER ELSE
    ERRMSG = "CANNOT OPEN INTR_DIV_TRANSFER FILE"; GOTO 91000
  END
  OPEN "","INTR_SERIAL_XREF" TO INTR_SERIAL_XREF ELSE
    ERRMSG = "CANNOT OPEN INTR_SERIAL_XREF FILE"; GOTO 91000
  END
  OPEN "","RCV.SCREENS" TO M.SCREENS ELSE
    ERRMSG = "CANNOT OPEN RCV.SCREENS FILE"; GOTO 91000
  END
  OPEN "","XREF.DATA" TO XREF.DATA ELSE
    ERRMSG = "CANNOT OPEN XREF.DATA FILE"; GOTO 91000
  END
  OPEN "","PREFIX" TO PREFIX ELSE
    ERRMSG = "CANNOT OPEN PREFIX FILE"; GOTO 91000
  END

  OPEN "","CONTROL" TO CONTROL ELSE
    ERRMSG = "CANNOT OPEN CONTROL FILE";GOTO 91000
  END
  
  DEFFUN CALC.STK.QTY(COST.QTY,MAT INV.CNV.REC,ROND,LN)

  *v THE FOLLOWING LINES IS TO GET THE VAL OF IDM.FROM.DIV::::: ADDED FOR TEST
  MATREAD WHSE.REC FROM WAREHOUSE,CONO:IDM.FROM.WHSE THEN
     IDM.FROM.DIV = WHS.DIV
  END
  MAT WHSE.REC = ""
  *^
  MATREAD COMP.REC FROM COMPANY , CONO ELSE MAT COMP.REC = ''
  IF CO.INTR.WHSE = '' THEN
    ERRMSG = 'THE INTER-DIVISIONAL WAREHOUSE IS NOT SETUP IN THE COMPANY FILE.'
	GOTO 91000
  END
  MATREAD WHSE.REC FROM WAREHOUSE, CONO:CO.INTR.WHSE ELSE
    ERRMSG = 'INTER-DIVISIONAL WAREHOUSE IS NOT SETUP IN THE WAREHOUSE FILE'
	GOTO 91000
  END
  READ DIVISION.REC FROM CONTROL, CONO:"DIVISIONS" ELSE 
    ERRMSG = "DIVISIONS CONTROL FILE RECORD IS MISSING" 
    GOTO 91000
  END 
  READ SECURITY.REC FROM CONTROL, CONO:"DIV.SECURITY" ELSE
    ERRMSG = "DIV.SECURITY CONTROL FILE RECORD IS MISSING"
    GOTO 91000
  END 
  MATREAD FISCAL.REC FROM CONTROL, CONO:"ICFISCAL" ELSE
    ERRMSG = "Cannot locate Inventory Control Fiscal Period !!"
    GOTO 91000
  END
  MATREAD GLTABLE.REC FROM CONTROL, CONO:'GLTABLE' THEN
    IF GLTB.IC.INT.DIV = '' THEN
      ERRMSG = 'NO G/L ACCT EXIST FOR INTER-DIVISIONAL ACCOUNTING'
	  GOTO 91000
    END
  END ELSE
     ERRMSG = 'Cannot locate General Ledger Table'
     GOTO 91000
  END
  IF SECURITY.REC<1> = "Y" AND SECURITY.REC<2> = "Y" THEN
	 LOCATE IDM.FROM.DIV IN DIVISION.REC<1>,1 SETTING DIV.POS ELSE
	 DIV.POS = 1
  END
  END ELSE
     DIV.POS = 1
  END


MAT IDM.REC = ""
** POPULATE THE IDM.REC FROM THE PROPERTIES
STATUS = RBO.getProperty('','ToDiv', IDM.TO.DIV)
STATUS = RBO.getProperty('',"FromWhse", IDM.FROM.WHSE)


STATUS = RBO.getProperty('','FromDiv',  WHS.DIV)
STATUS = RBO.getProperty('','Desc', IDM.DESC)
STATUS = RBO.getProperty('','ShipPost', IDM.SHIP.POST)
STATUS = RBO.getProperty('','ShipMon', IDM.SHIP.MON)
STATUS = RBO.getProperty('',"ProdNo", IDM.PROD.NO)
STATUS = RBO.getProperty('',"Serial", IDM.SERIAL)
STATUS = RBO.getProperty('','SerialMill', IDM.SERIAL.MILL)
STATUS = RBO.getProperty('','FromLoc', IDM.FROM.LOC)

IDM.SHIP.POST = ICONV(IDM.SHIP.POST,"D4\")

** END OF POPULATE
INQUIRY.FLG = 0
SERIALS = ''

IF WHS.DIV = "" THEN
   *STATUS = RBO.getDBVals("IDM_FROM_DIV", WHS.DIV)
   MATREAD WHSE.REC FROM WAREHOUSE, CONO:IDM.FROM.WHSE ELSE MAT WHSE.REC = ""
   IDM.FROM.DIV = WHS.DIV
END

*********START MAIN PROCESSING

GOSUB FILE.TRANSFER
MATWRITE IDM.REC ON INTR_DIV_TRANSFER, CONO:TRANS.ID ON ERROR ERRMSG = CONO: @VM : TRANS.ID; GOTO 91000

IF IDM.STATUS GT 1 THEN INQUIRY.FLG = 1;*ADDED BY SUHAIL
VALID.PRODUCT = 1 ; VALID.ROLL = 1

POST.TRANSFER: 
  IF LEN(FR.CURR.PER<1,DIV.POS>) # 6 THEN
    ERRMSG = "ERROR in the Inventory Control Fiscal Period (":FR.CURR.PER<1,DIV.POS>:") !!"
    GOTO 91000
  END

  PROD.CNT = DCOUNT(PROD.ARRAY<1>,@VM) ; ROLL.FOUND = 0
  FOR PROD.PTR = 1 TO PROD.CNT
    PROD.ID = PROD.ARRAY<1,PROD.PTR>
    GOSUB VALIDATE.INV
    IF VALID.PRODUCT = 0 THEN GOTO 91000;RETURN
    ROLL.CNT = DCOUNT(RS.ARRAY<PROD.PTR>, @VM)
    FOR ROLL.PTR = 1 TO ROLL.CNT
       SERIAL.ID = RS.ARRAY<PROD.PTR,ROLL.PTR,1>       
       GOSUB VALIDATE.SERIAL
       IF VALID.ROLL = 0 THEN GOTO 91000;RETURN
       ROLL.FOUND = 1
    NEXT ROLL.PTR
  NEXT PROD.PTR
  IF ROLL.FOUND = 0 THEN
    ERRMSG = 'CAN NOT POST, NO SERIAL TO TRANSFER'
    GOTO 91000 ; VALID.PRODUCT = 0
    RETURN
  END
  
  
* CHECK TO SEE IF INTR WHSE EXIST; IF NOT, WRITE IT OUT
 
  FOR PROD.PTR = 1 TO PROD.CNT
    IWH.ID = CONO:PROD.ARRAY<1,PROD.PTR>:'!':IDM.FROM.WHSE
    IWH.ID2 = CONO:PROD.ARRAY<1,PROD.PTR>:'!':CO.INTR.WHSE
    MATREADU IWH.REC FROM INV.WHSE, IWH.ID2 ELSE
      MATREAD IWH.REC FROM INV.WHSE, IWH.ID THEN
        SIWH.STD.COST = IWH.STD.COST  
        SIWH.LIST.COST = IWH.LIST.COST
        SIWH.AVG.COST = IWH.AVG.COST  
        SIWH.MARKUP = IWH.MARKUP      
        SIWH.FOH.PCT = IWH.FOH.PCT    
        SIWH.MIN.QTY = IWH.MIN.QTY    
        SIWH.MAX.QTY = IWH.MAX.QTY    
        MAT IWH.REC = ""              
        IWH.STD.COST = SIWH.STD.COST  
        IWH.LIST.COST = SIWH.LIST.COST
        IWH.AVG.COST = SIWH.AVG.COST  
        IWH.MARKUP = SIWH.MARKUP      
        IWH.FOH.PCT = SIWH.FOH.PCT    
        IWH.MIN.QTY = SIWH.MIN.QTY    
        IWH.MAX.QTY = SIWH.MAX.QTY    
        MATWRITE IWH.REC ON INV.WHSE, IWH.ID2
      END 
    END
    MATREADU INV.REC FROM INVENTORY, CONO:PROD.ARRAY<1,PROD.PTR> THEN
      LOCATE CO.INTR.WHSE IN INV.WHSE.CODE<1>,1 SETTING TOS ELSE
        INV.WHSE.CODE<1,TOS> = CO.INTR.WHSE
      END
      MATWRITE INV.REC TO INVENTORY, CONO:PROD.ARRAY<1,PROD.PTR>
    END
  NEXT PROD.PTR

* NOW DO THE POSTING.

  IDM.SHIP.OPER = OPER.ID
  IDM.SHIP.DATE = TODAY
  IDM.STATUS = 2
  MAT D.TRAN.REC = ""
  D.TRAN.EMP = OPER.ID
  D.TRAN.PRT.DATE = TODAY
  D.TRAN.PERIOD = IDM.SHIP.MON
  D.TRAN.DATE.ENTER = IDM.SHIP.POST
  D.TRAN.FROM.WHSE = IDM.FROM.WHSE
  D.TRAN.REASON.DESC = IDM.DESC
  PROD.CNT = DCOUNT(PROD.ARRAY<1>, @VM)
  FOR PROD.PTR = 1 TO PROD.CNT
    PROD.ID = PROD.ARRAY<1,PROD.PTR>
    ROLL.CNT = DCOUNT(RS.ARRAY<PROD.PTR>, @VM)
    FOR ROLL.PTR = 1 TO ROLL.CNT
      SERIAL.ID = RS.ARRAY<PROD.PTR,ROLL.PTR,1>
      MATREADU ISTK.REC FROM INV_SERIAL, CONO:SERIAL.ID ELSE MAT ISTK.REC = ''
      D.TRAN.PROD.NO<1,-1> = PROD.ID
      D.TRAN.SERIAL<1,-1> = SERIAL.ID
      D.TRAN.RECP<1,-1> = ISTK.RECP
      D.TRAN.FROM.LOC<1,-1> = ISTK.LOC
      D.TRAN.TO.WHSE<1,-1> = CO.INTR.WHSE
      D.TRAN.TO.LOC<1,-1> = IDM.TO.DIV
      D.TRAN.QTY<1,-1> = ISTK.CUR.QTY
      D.TRAN.TOT.QTY<1,-1> = ISTK.CUR.QTY
      
      IDM.FROM.LOC<1,PROD.PTR,ROLL.PTR> = ISTK.LOC
      IDM.SERIAL.QTY<1,PROD.PTR,ROLL.PTR> = ISTK.CUR.QTY
      IDM.SERIAL.DIAM<1,PROD.PTR,ROLL.PTR> = ISTK.CUR.DIAM
      IDM.SERIAL.RECP<1,PROD.PTR,ROLL.PTR> = ISTK.RECP
    NEXT ROLL.PTR
  NEXT PROD.PTR
  MAT TRAN.REC='' ; ERRMSG=''
  MAT TRAN.REC = MAT D.TRAN.REC
  *DIM TMP.TRAN.REC(TRAN.REC.SIZE)
  *MAT TMP.TRAN.REC = ""
  *MAT TMP.TRAN.REC = MAT D.TRAN.REC
  *MATWRITE TMP.TRAN.REC ON CONTROL,'02HLL'  
*   MATWRITE D.TRAN.REC ON CONTROL,'02HLL'
  *CALL TRAN.UPDATE(CONO,TRANS.ID,MAT TRAN.REC,'TRANOUT',CO.ICS.LOC.TRAN,ERRMSG) 
  CALL TRAN_UPDATE_SUB(CONO,TRANS.ID,MAT TRAN.REC,'TRANOUT',CO.ICS.LOC.TRAN,ERRMSG,MAT D.TRAN.REC) ;***** change the name of the subroutine

  IF D.TRAN.ERRMSG # '' THEN
     ERRMSG = D.TRAN.ERRMSG
     GOTO 91000
  END ELSE
     MATWRITE IDM.REC ON INTR_DIV_TRANSFER, CONO:TRANS.ID
  END
  
  GOTO 91000

**********END OF MAIN PROCESSING
   
FILE.TRANSFER: 
  PROD.CNT = DCOUNT(PROD.ARRAY<1>, @VM)
  FOR PROD.PTR = 1 TO PROD.CNT
    ROLL.CNT = DCOUNT(RS.ARRAY<PROD.PTR>, @VM)
    FOR ROLL.PTR = 1 TO ROLL.CNT
      WRITE TRANS.ID ON INTR_SERIAL_XREF, CONO:RS.ARRAY<PROD.PTR,ROLL.PTR,1>
    NEXT ROLL.PTR
  NEXT PROD.PTR
RETURN

VALIDATE.INV: 
*
   MATREAD INV.REC FROM INVENTORY, CONO:PROD.ID THEN
      MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE THEN
$INCLUDE ICSBP INV.UM.CNV
         BEGIN CASE           
            CASE CATG.TYPE="L" 
               U.M="LBS"        
            CASE CATG.TYPE="S" 
               U.M="SHT"        
            CASE CATG.TYPE="RL"
               U.M="PC "        
            CASE CATG.TYPE="PC"
               U.M="FT "        
            CASE 1             
               IF INQUIRY.FLG = 0 THEN
                  ERRMSG='PRODUCT ':PROD.ID:' IS NOT A PAPER PRODUCT LINE'
                  GOTO 91000 ;* VALID.PRODUCT = 0
               END
         END CASE 
         BASWGT = INT(INV.BAS.WT/100)
         BEGIN CASE
            CASE MOD(INV.PAP.WIDTH,10000) = 0
               IWIDTH = OCONV(INT(INV.PAP.WIDTH/10000),"MD0")
            CASE MOD(INV.PAP.WIDTH,1000) = 0
               IWIDTH = OCONV(INT(INV.PAP.WIDTH/1000),"MD1")
            CASE MOD(INV.PAP.WIDTH,100) = 0
               IWIDTH = OCONV(INT(INV.PAP.WIDTH/100),"MD2")
            CASE MOD(INV.PAP.WIDTH,10) = 0
               IWIDTH = OCONV(INT(INV.PAP.WIDTH/10),"MD3")
            CASE 1
               IWIDTH = OCONV(INV.PAP.WIDTH,"MD4")
         END CASE
         MATREAD IWH.REC FROM INV.WHSE, CONO:PROD.ID:'!':IDM.FROM.WHSE THEN
            IF INQUIRY.FLG = 0 THEN
               LOCATE PROD.ID IN PROD.ARRAY<1> SETTING XPOS THEN
                  IF XPOS # PROD.PTR THEN
                     ERRMSG = 'PRODUCT ':PROD.ID:' ALREADY ENTERED'
                     GOTO 91000 ;* VALID.PRODUCT = 0 ; RETURN
                  END
               END
               IF IWH.ON.HAND-IWH.RESV LE 1 THEN
                  ERRMSG = 'PRODUCT ':PROD.ID:' HAS NO QUANTITY AVAILABLE TO TRANSFER'
                  GOTO 91000 ;* VALID.PRODUCT = 0 ; RETURN
               END
               IF CATG.TRK.LVL # 'S' THEN
                  ERRMSG = 'PRODUCT ':PROD.ID:' IS NOT SERIAL TRACKED'
                  GOTO 91000 ;* VALID.PRODUCT = 0 ; RETURN
               END
               LOCATE IDM.FROM.WHSE IN INV.WHSE.CODE<1>,1 SETTING ZPOS ELSE
                  ERRMSG = 'WAREHOUSE #':IDM.FROM.WHSE:' IS NOT SETUP FOR PRODUCT ':PROD.ID
                  GOTO 91000 ;* VALID.PRODUCT = 0 ; RETURN
               END
            END
         END ELSE
            IF INQUIRY.FLG = 0 THEN
               ERRMSG = 'INV.WHSE #':CONO:PROD.ID:'!':IDM.FROM.WHSE:'IS NOT ON FILE'
               GOTO 91000 ;* VALID.PRODUCT = 0
            END
         END
      END ELSE
         ERRMSG = 'INVALID PRODUCT LINE ASSOCIATED TO THE PRODUCT ':PROD.ID
         GOTO 91000 ;* VALID.PRODUCT = 0
      END
   END ELSE
      ERRMSG = 'INVALID PRODUCT ':PROD.ID
      GOTO 91000 ;* VALID.PRODUCT = 0 ; MAT INV.REC = ''
   END
  *
   RETURN
*
VALIDATE.SERIAL: 
*
  LOCATE SERIAL.ID IN RS.ARRAY<PROD.PTR>,1 SETTING P THEN
      IF P <> ROLL.PTR THEN
         ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') ALREADY ENTERED'
         GOTO 91000 ;* VALID.ROLL = 0 ; RETURN
      END
   END
   MATREAD ISTK.REC FROM INV_SERIAL, CONO:SERIAL.ID THEN
      IF ISTK.POST.DATE = "" THEN
         ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') HAS NOT BEEN RECIEVED INTO INVENTORY'
         GOTO 91000 ;* VALID.ROLL = 0
      END
   END ELSE
      ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') DOES NOT EXIST'
      GOTO 91000 ;* VALID.ROLL = 0
   END
   IF VALID.ROLL = 0 THEN RETURN
   IF ISTK.PROD # PROD.ARRAY<1,PROD.PTR> THEN
      ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') IS NOT TIED TO PRODUCT ':PROD.ARRAY<1,PROD.PTR>
      GOTO 91000 ;* VALID.ROLL = 0 ; RETURN
   END
   IF ISTK.WHSE # IDM.FROM.WHSE THEN
      ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') BELONGS TO ANOTHER WAREHOUSE'
      GOTO 91000 ;* VALID.ROLL = 0 ; RETURN
   END
   IF ISTK.RSVB.QTY LE 1 THEN
      ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') HAS NO QUANTITY AVAILABLE TO TRANSFER'
      GOTO 91000 ;* VALID.ROLL = 0 ; RETURN
   END
   IF ISTK.RSVB.QTY # ISTK.CUR.QTY THEN
      ERRMSG = 'SERIAL (':SERIAL.ID:') HAS QUANTITY RESERVED AND CAN NOT BE TRANSFERRED'
      GOTO 91000 ;* VALID.ROLL = 0 ; RETURN
   END
   IF ISTK.RECP.PERIOD GT IDM.SHIP.MON THEN
      ERRMSG = 'SERIAL (':SERIAL.ID:') WAS RECEIVED IN PERIOD ':ISTK.RECP.PERIOD:' CAN NOT BE TRANSFERRED'
      GOTO 91000 ;* VALID.ROLL = 0 ; RETURN
   END
*T28320 v
   PROD.ARRAY<6,PROD.PTR> += ISTK.RSVB.QTY
   IF CATG.COST.TYPE = 'AC' AND CATG.RSV.SERIAL = 'N' THEN
     IF PROD.ARRAY<6,PROD.PTR> > PROD.ARRAY<5,PROD.PTR> THEN
       ERRMSG='Product Serial Xfer Qty = '
       TMP = CALC.STK.QTY(PROD.ARRAY<6,PROD.PTR>,MAT INV.CNV.REC,'.5','')
       ERRMSG:=OCONV(TMP,ICR.CNV)
       ERRMSG:=' and Reservable = '
       TMP = CALC.STK.QTY(PROD.ARRAY<5,PROD.PTR>,MAT INV.CNV.REC,'.5','')
       ERRMSG:=OCONV(TMP,ICR.CNV)
       PROD.ARRAY<6,PROD.PTR> -= ISTK.RSVB.QTY
       GOTO 91000
       VALID.ROLL = 0 ;RETURN
     END
   END
*T28320 ^
   IWLO.ID = CONO:PROD.ARRAY<1,PROD.PTR>:'!':ISTK.WHSE:'!':ISTK.LOC
   MATREAD IWLO.REC FROM INV.WHSE.LOC, IWLO.ID THEN
      LOCATE SERIAL.ID IN IWLO.SERIAL<1>,1 SETTING ROS ELSE
         ERRMSG = 'SERIAL (':SERIAL.ID:') DOES NOT EXIST FOR WHSE #':ISTK.WHSE:' AND LOCATION #':ISTK.LOC
         GOTO 91000 ;* VALID.ROLL = 0 ; RETURN
      END
   END ELSE
      ERRMSG = 'SERIAL (':SERIAL.ID:' DOES NOT EXIST FOR WHSE #':ISTK.WHSE:' AND LOCATION #':ISTK.LOC
      GOTO 91000 ;* VALID.ROLL = 0 ; RETURN
   END
   READ TEST.REC FROM INTR_SERIAL_XREF, CONO:SERIAL.ID THEN
      BEGIN CASE
         CASE TRANS.ID = TEST.REC<1>
         CASE TEST.REC<1> = ''
         CASE 1
            ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') IS BEING USED FOR TRANSIT #':TEST.REC<1>
            GOTO 91000 ;* VALID.ROLL = 0
      END CASE
   END
  *
   RETURN
*

91000:
  STATUS = RBO.setProperty('','ServerStatus',"1")
  STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
RETURN
