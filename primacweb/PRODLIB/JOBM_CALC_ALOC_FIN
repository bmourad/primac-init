SUBROUTINE JOBM_CALC_ALOC_FIN
********************************************************************************
*   Program name :- JOBM_CALC_ALOC_FIN
*   Created:- 8/4/2003
*------------------------------------------------------------------------------*
*

* In Properties:
* --------------
*  
*
* Out Properties:
* ---------------
*  
********************************************************************************
$INCLUDE WWINSERT RBO.H
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE OPS.CPYLIB JOB.FNGD.STATS
$INCLUDE ICS.CPYLIB FNGD.STATS
$INCLUDE ICS.CPYLIB FNGD.ORDER.STATS
$INCLUDE PMC.CPYLIB CUSTOMER
$INCLUDE OPS.CPYLIB ORDER
$INCLUDE OPS.CPYLIB ORDER.DETAIL
$INCLUDE CPYLIB FILE.VARS
$INCLUDE CPYLIB CHAR

* Insert method code here
ERRMSG = ''
OPEN '','INVENTORY' TO INVENTORY ELSE
	ERRMSG = "UNABLE TO OPEN INVENTORY FILE"
    	GOTO 99999
END

OPEN "","JOB.FNGD.STATS" TO JOB.FNGD.STATS ELSE ;* REQUIRED FOR FNGD
	ERRMSG = "UNABLE TO OPEN JOB.FNGD.STATS FILE"
	GOTO 99999
END
OPEN "","FNGD.STATS" TO FNGD.STATS ELSE
	ERRMSG = "UNABLE TO OPEN FNGD.STATS"
	GOTO 99999
END

OPEN "","CUSTOMER" TO CUSTOMER ELSE
       ERRMSG = "UNABLE TO OPEN CUSTOMER FILE"
	GOTO 99999
END

OPEN "","ORDER" TO ORDER ELSE
	ERRMSG = "UNABLE TO OPEN ORDER FILE"
	GOTO 99999
END

OPEN "","ORDER.DETAIL" TO ORDER.DETAIL ELSE
	ERRMSG = "UNABLE TO OPEN ORDER.DETAIL FILE"
	GOTO 99999
END

OPEN "","FNGD.ORDER.STATS" TO FNGD.ORDER.STATS ELSE
	ERRMSG = "UNABLE TO OPEN FNGD.ORDER.STATS FILE"
	GOTO 99999
END

STATUS = RBO.getProperty('','ID',ID);* CONO:JOB.NO
CONO = ID[1,3]
JOBNO = ID[4,99]
MATREAD JFS.REC FROM JOB.FNGD.STATS, ID ELSE MAT JFS.REC = ""

STATUS = RBO.getProperty('','JOB_CUST',JOB_CUST)
STATUS = RBO.getProperty('','JOB_RESV_MATL',JOB_RESV_MATL)
STATUS = RBO.getProperty('','JOB_RESV_WHSE',WHNO)

IWH.ID = CONO : JOB_RESV_MATL : '!' : WHNO
MATREAD FGS.REC FROM FNGD.STATS, IWH.ID ELSE MAT FGS.REC = ''

MATREAD INV.REC FROM INVENTORY,CONO:JOB_RESV_MATL ELSE
	INV.FULL.DESC = 'Unknown'
END
$INCLUDE ICSBP INV.UM.CNV

STATUS = RBO.getProperty('','JFS_A_QTY',JFS.A.QTY);*MULTI VALUED
STATUS = RBO.getProperty('','JFS_F_QTY',JFS.F.QTY);*MULTI VALUED
STATUS = RBO.getProperty('','JFS_M_QTY',JFS.M.QTY);*MULTI VALUED
STATUS = RBO.getProperty('','JFS_S_QTY',JFS.S.QTY);*MULTI VALUED
STATUS = RBO.getProperty('','JFS_O_QTY',JFS.ORD.QTY);*MULTI VALUED
STATUS = RBO.getProperty('','JFS_BAL',AVL.ALOC)
STATUS = RBO.getProperty('','CO_POS',LN)
STATUS = RBO.getProperty('','JOB_STATUS',JOB.STATUS)
STATUS = RBO.getProperty('','JFS_ORDER',JFS.ORDER)
STATUS = RBO.getProperty('','FGS_ORDER',FGS.ORDER)
STATUS = RBO.getProperty('','FGS_B_QTY',FGS.B.QTY)

CNT = DCOUNT(JFS.F.QTY<1>,VM)
FOR I = 1 TO CNT
	JFS.F.QTY<1,I> = INT(((JFS.F.QTY<1,I>/ICR.MT1)*ICR.DV1)*ICR.DV2+.5)
	JFS.A.QTY<1,I> = INT(((JFS.A.QTY<1,I>/ICR.MT1)*ICR.DV1)*ICR.DV2+.5)
	JFS.M.QTY<1,I> = INT(((JFS.M.QTY<1,I>/ICR.MT1)*ICR.DV1)*ICR.DV2+.5)
	JFS.S.QTY<1,I> = INT(((JFS.S.QTY<1,I>/ICR.MT1)*ICR.DV1)*ICR.DV2+.5)
	CNT1 = DCOUNT(JFS.ORD.QTY<1,I>,SM)
	FOR J = 1 TO CNT1
		JFS.ORD.QTY<1,I,J> = INT(((JFS.ORD.QTY<1,I,J>/ICR.MT1)*ICR.DV1)*ICR.DV2+.5)
	NEXT J
NEXT I

AVL.ALOC = INT(((AVL.ALOC/ICR.MT1)*ICR.DV1)*ICR.DV2+.5)
*AVL.ALOC = JFS.M.QTY<1,LN> - JFS.F.QTY<1,LN> - JFS.S.QTY<1,LN>

TOT.ALOC = SUM(FGS.B.QTY) + JFS.A.QTY<1,LN>

*IF AVL.ALOC < 0 THEN AVL.ALOC = 0

IF TOT.ALOC < AVL.ALOC THEN AVL.ALOC = TOT.ALOC

ALOC.TOT = AVL.ALOC

PDNO = JOB_RESV_MATL

IF JOB_CUST = 0 THEN JOB_CUST = ""
IF WHNO = 0 THEN WHNO = ""

MATREAD CUST.REC FROM CUSTOMER, CONO:JOB_CUST ELSE MAT CUST.REC = ""

TOT.ALOC = SUM(FGS.B.QTY) + JFS.A.QTY<1,LN>
*STATUS=RBO.setProperty('','JOB_CUST',TOT.ALOC:"%%":AVL.ALOC)
IF TOT.ALOC < AVL.ALOC THEN AVL.ALOC = TOT.ALOC

SWAP "," WITH "" IN ICR.CNV1

ATOT = JFS.A.QTY<1,LN> ;* THIS IS THE ACTUAL QTY TO DISTRIBUTE TO SEVERAL QTY'S

AQTY = ""
RCNT = DCOUNT(JFS.ORDER<1,LN>,@SM)
FOR R = 1 TO RCNT
	LOCATE JFS.ORDER<1,LN,R> IN FGS.ORDER<1>,1 SETTING OPTR THEN
		AQTY<1,OPTR> = JFS.ORD.QTY<1,LN,R>
	END
       JFS.ORD.QTY<1,LN,R> = 0
NEXT R

ALOC.QTY = AQTY

ATYPE = "B"

*CALL JOB.ORDER.SEL(CONO,ID[4,99],JOB_RESV_MATL,WHNO,ATYPE,AVL.ALOC,ATOT,AQTY)

LINES = DCOUNT(FGS.ORDER,VM)
S.B.QTY = ""; S.A.QTY = ""; S.V.QTY = ""
S.CUST = ""; S.DATE = ""
OSD.PROD.SEQ=''

*VAL = RBO.setProperty('','ServerStatus',LINES)
*RETURN

FOR I = 1 TO LINES
	MATREAD ORD.REC FROM ORDER,CONO:FGS.ORDER<1,I> ELSE
       	MAT ORD.REC = ""
	END
	ST.CNT = DCOUNT(ORD.SHIP.TO,VM)
	TOT.B.QTY = 0
	TOT.A.QTY = 0
	TOT.R.QTY = 0
	TOT.V.QTY = 0
	TOT.R.QTY = 0; TOT.S.QTY = 0 ; TOT.O.QTY = 0
	FOR S = 2 TO ST.CNT
       	MATREAD ORD.DET.REC FROM ORDER.DETAIL,CONO:FGS.ORDER<1,I>:"!":ORD.SHIP.TO<1,S> ELSE
              	MAT ORD.DET.REC = ""
            	END
            	IF OSD.PROD.SEQ = "" THEN
			MATREAD FOS.REC FROM FNGD.ORDER.STATS, IWH.ID:"!":FGS.ORDER<1,I> ELSE
				MAT FOS.REC = ""
            			MATREAD ORD.REC FROM ORDER, CONO:FGS.ORDER<1,I> THEN
               			FOS.CUST = ORD.CUST
               			FOS.DATE = ORD.DATE
            			END
         		END
         		S.CUST<I> = FOS.CUST
         		S.DATE<I> = OCONV(FOS.DATE,'D2/')
         		LOCATE JOBNO IN FOS.JOB<1>,1 SETTING JLOC THEN
            			IF FOS.JOB.QTY<1,JLOC> > ALOC.QTY<1,I> THEN
               			S.V.QTY<I> = FOS.A.QTY - FOS.JOB.QTY<1,JLOC>
            			END ELSE
               			S.V.QTY<I> = FOS.A.QTY - ALOC.QTY<1,I>
            			END
         		END ELSE
            			S.V.QTY<I> = FOS.A.QTY - ALOC.QTY<1,I>
            			S.A.QTY<I> = FOS.A.QTY
         		END
			IF S.V.QTY<I> < 0 THEN S.V.QTY<I> = 0
         		S.V.QTY<I> = FOS.O.QTY - FOS.R.QTY - FOS.S.QTY - S.V.QTY<I>
         		S.B.QTY<I> = FOS.O.QTY - FOS.R.QTY - FOS.S.QTY
         		IF LN = 0 THEN
            			IF S.B.QTY<I> > 0 THEN
               			LN = I
            			END
         		END
            	END ELSE
              	PTR = 1
               	LOOP
                  		LOCATE PDNO IN OSD.PROD<1>,PTR SETTING INDX THEN
                     		IF WHNO = OSD.WHSE<1,INDX> THEN
                        			FOS.ID = CONO:PDNO:"!":WHNO:"!":FGS.ORDER<1,I>:"!":OSD.PROD.SEQ<1,INDX>:"!":OSD.KIT<1,INDX>
                        			MATREAD FOS.REC FROM FNGD.ORDER.STATS, FOS.ID ELSE
                           				MAT FOS.REC = ""
                           				MATREAD ORD.REC FROM ORDER, CONO:FGS.ORDER<1,I> THEN
                              				FOS.CUST = ORD.CUST
                              				FOS.DATE = ORD.DATE
                           				END
                        			END
                        			S.CUST<I> = FOS.CUST
                        			S.DATE<I> = OCONV(FOS.DATE,'D2/')
                        			TOT.O.QTY = TOT.O.QTY + FOS.O.QTY
                        			TOT.S.QTY = TOT.S.QTY + FOS.S.QTY
                        			TOT.R.QTY = TOT.R.QTY + FOS.R.QTY
                        			LOCATE JOBNO IN FOS.JOB<1>,1 SETTING JLOC THEN
                          				IF FOS.JOB.QTY<1,JLOC> > ALOC.QTY<1,I> THEN
                              				TOT.V.QTY = TOT.V.QTY + (FOS.A.QTY - FOS.JOB.QTY<1,JLOC>)
                          				END ELSE
                              				TOT.V.QTY = TOT.V.QTY + (FOS.A.QTY - ALOC.QTY<1,I>)
                           				END
                        			END ELSE
                           				TOT.V.QTY = TOT.V.QTY + (FOS.A.QTY - ALOC.QTY<1,I>)
                           				TOT.A.QTY = TOT.A.QTY + FOS.A.QTY
                        			END
                        			PTR = 0
                     		END
                  		END ELSE
                     		PTR = 0
                  		END
               	WHILE PTR DO
                  		PTR = INDX + 1
               	REPEAT
*               	S.V.QTY<I> = TOT.V.QTY
*               	S.B.QTY<I> = TOT.B.QTY
*               	S.A.QTY<I> = TOT.A.QTY
            	END
      	NEXT S
      	IF OSD.PROD.SEQ # "" THEN
       	IF TOT.V.QTY < 0 THEN TOT.V.QTY = 0
           	S.V.QTY<I> = TOT.O.QTY - TOT.R.QTY - TOT.S.QTY - TOT.V.QTY
            	S.B.QTY<I> = TOT.O.QTY - TOT.R.QTY - TOT.S.QTY
            	S.A.QTY<I> = TOT.A.QTY
	END
NEXT I

IF LN = 0 THEN LN = 1

GOSUB 2000

RCNT = DCOUNT(ALOC.QTY,@VM)
FOR R = 1 TO RCNT
	IF ALOC.QTY<1,R> > 0 THEN
       	LOCATE FGS.ORDER<1,R> IN JFS.ORDER<1,LN>,1 SETTING OPTR ELSE
            		JFS.ORDER<1,LN,OPTR> = FGS.ORDER<1,R>
          	END
		JFS.ORD.QTY<1,LN,OPTR> = ALOC.QTY<1,R>
     	END
NEXT R


*ATOT = OCONV(INT(((ATOT / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)
ATOT = OCONV(INT(((ALOC.TOT / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1)

F.VAL = OCONV(INT(((JFS.F.QTY<1,LN>/ICR.DV1)*ICR.MT1)/ICR.DV2+.5),ICR.CNV1)

*BAL = JFS.M.QTY<1,LN> - JFS.F.QTY<1,LN> - JFS.S.QTY<1,LN>

IF JOB.STATUS = 4 OR JOB.STATUS > 5 THEN
	BAL = 0
END ELSE
	BAL = JFS.M.QTY<1,LN> - JFS.F.QTY<1,LN> - JFS.S.QTY<1,LN>
END

IF BAL < 0  THEN BAL = 0

F.BAL = OCONV(INT(((BAL/ICR.DV1)*ICR.MT1)/ICR.DV2+.5),ICR.CNV1)

CNT = DCOUNT(JFS.ORD.QTY<1>,VM)
FOR I = 1 TO CNT
	CNT1 = DCOUNT(JFS.ORD.QTY<1,I>,SM)
	FOR J = 1 TO CNT1
		JFS.ORD.QTY<1,I,J> = OCONV(INT(((JFS.ORD.QTY<1,I,J>/ICR.DV1)*ICR.MT1)/ICR.DV2+.5),ICR.CNV1)
	NEXT J
NEXT I

STATUS = RBO.setProperty('','JFS_O_QTY',JFS.ORD.QTY)
STATUS = RBO.setProperty('','JFS_F_QTY',F.VAL)
STATUS = RBO.setProperty('','JFS_A_QTY',ATOT)
STATUS = RBO.setProperty('','JFS_BAL',F.BAL)
STATUS = RBO.setProperty('','JFS_S_QTY',JFS.S.QTY<1,LN>)
STATUS = RBO.setProperty('','JFS_ORDER',JFS.ORDER)
*STATUS=RBO.setProperty('','JOB_CUST',TOT.ALOC)
GOTO 99999

*---- Adjust job allocations
2000*
ALOC.DIF = ALOC.TOT - SUM(ALOC.QTY)

*VAL = RBO.setProperty('','ESTAT',ALOC.TOT : ":" : SUM(ALOC.QTY))

BEGIN CASE
	CASE ALOC.DIF > 0
       	LIMIT = LINES
*
*---- Adjust current allocated jobs
*
		FOR A = 1 TO LIMIT
              	AVL = S.V.QTY<A> - ALOC.QTY<1,A>
               	BEGIN CASE
                  		CASE ALOC.QTY<1,A> < 1
                  		CASE AVL < 1
                  		CASE AVL < ALOC.DIF
                     		ALOC.QTY<1,A> = ALOC.QTY<1,A> + AVL
                     		ALOC.DIF = ALOC.DIF - AVL
                  		CASE 1
                     		ALOC.QTY<1,A> = ALOC.QTY<1,A> + ALOC.DIF
                     		ALOC.DIF = 0; LIMIT = 0
               	END CASE
            	NEXT A
*
*---- Allocate new jobs
*
		FOR A = 1 TO LIMIT
              	AVL = S.V.QTY<A> - ALOC.QTY<1,A>
               	BEGIN CASE
                  		CASE AVL < 1
                  		CASE AVL >= ALOC.DIF
                     		ALOC.QTY<1,A> = ALOC.QTY<1,A> + ALOC.DIF
                     		ALOC.DIF = 0; LIMIT = 0
               	END CASE
            	NEXT A
*
		FOR A = 1 TO LIMIT
              	AVL = S.V.QTY<A> - ALOC.QTY<1,A>
               	BEGIN CASE
                  		CASE AVL < 1
                  		CASE AVL < ALOC.DIF
                     		ALOC.QTY<1,A> = ALOC.QTY<1,A> + AVL
                     		ALOC.DIF = ALOC.DIF - AVL
                  		CASE 1
                     		ALOC.QTY<1,A> = ALOC.QTY<1,A> + ALOC.DIF
                     		ALOC.DIF = 0; LIMIT = 0
               	END CASE
            	NEXT A
	CASE ALOC.DIF < 0
       	ALOC.DIF = 0 - ALOC.DIF
            	LIMIT = LINES
            	FOR A = 1 TO LIMIT
              	BEGIN CASE
                  		CASE ALOC.QTY<1,A> < 1
                  		CASE ALOC.QTY<1,A> < ALOC.DIF
                     		ALOC.DIF = ALOC.DIF - ALOC.QTY<1,A>
                     		ALOC.QTY<1,A> = 0
                  		CASE 1
                     		ALOC.QTY<1,A> = ALOC.QTY<1,A> - ALOC.DIF
                    			ALOC.DIF = 0; LIMIT = 0
               	END CASE
            	NEXT A
END CASE

ALOC.TOT = SUM(ALOC.QTY)
STATUS=RBO.setProperty('','JOB_RESV_AMT',ALOC.TOT)    
RETURN

99999
IF ERRMSG # '' THEN
	STATUS = RBO.setProperty('','ServerStatus','1')        
	STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
END
RETURN
