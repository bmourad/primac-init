SUBROUTINE Post_INTROUTM
$INCLUDE CPYLIB COMMON1
$INCLUDE ICS.CPYLIB COM.INV.MAIN  
$INCLUDE ICS.CPYLIB COM.INV.SERIAL
$INCLUDE ICS.CPYLIB COM.INV.LINK  
*********************************************************************
* SYSTEM      - EPRIMAC
* PROGRAM     - Post_INTROUTM
* BY          - KHAJA ZIAUDDIN
* DATE
* DESCRIPTION - 
* TASK
*
*ENDDOC
*********************************************************************
$INCLUDE WWINSERT RBO.H
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE PMC.CPYLIB FISCAL
$INCLUDE PMC.CPYLIB GLTABLE
$DEFINE CATEGORY
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB WAREHOUSE
$DEFINE INVENTORY
$INCLUDE ICS.CPYLIB INVENTORY
$DEFINE INVWHSE
$INCLUDE ICS.CPYLIB INV.WHSE
$DEFINE INVWHSELOC
$INCLUDE ICS.CPYLIB INV.WHSE.LOC
$DEFINE INVSERIAL
$INCLUDE ICS.CPYLIB INV_SERIAL
$DEFINE INVCNV
$INCLUDE ICS.CPYLIB INV.CNV
$DEFINE DAILYTRANSFER
$INCLUDE ICS.CPYLIB DAILY_TRANSFER
$INCLUDE ICS.CPYLIB TRANSFER
$INCLUDE ICS.CPYLIB INTR_DIV_TRANSFER
$DEFINE FILEVARS
$INCLUDE CPYLIB FILE.VARS

STATUS = RBO.getProperty('',"ID", ID)
STATUS = RBO.getProperty('',"ProdNo", PROD.ARRAY)
STATUS = RBO.getProperty('',"Serial", RS.ARRAY)

STATUS = RBO.getProperty('','PMCProperty',PMCPROPERTY)
CONO = PMCPROPERTY<1,4>
OPER.ID = PMCPROPERTY<1,3>
TODAY = DATE()
TRANS.ID = ID[4,99]

*---- OPEN ALL FILES
*
   OPEN "","COMPANY" TO COMPANY ELSE
      ERRMSG = "CANNOT OPEN COMPANY FILE"; GOSUB 91000; STOP
   END
   OPEN "","CONTROL" TO CONTROL ELSE
      ERRMSG = "CANNOT OPEN CONTROL FILE"; GOSUB 91000; STOP
   END
   OPEN "","SECURITY" TO SECURITY ELSE
      ERRMSG = "CANNOT OPEN SECURITY FILE"; GOSUB 91000; STOP
   END
   OPEN "","WAREHOUSE" TO WAREHOUSE ELSE
      ERRMSG = "CANNOT OPEN WAREHOUSE FILE"; GOSUB 91000; STOP
   END
   OPEN "","CATEGORY" TO CATEGORY ELSE
      ERRMSG = "CANNOT OPEN CATEGORY FILE"; GOSUB 91000; STOP
   END
   OPEN "","DIVISION" TO DIVISION ELSE
      ERRMSG = "CANNOT OPEN DIVISION FILE"; GOSUB 91000; STOP
   END
   OPEN "","INVENTORY" TO INVENTORY ELSE
      ERRMSG = "CANNOT OPEN INVENTORY FILE"; GOSUB 91000; STOP
   END
   OPEN "","INVENTORY.XREF" TO INVENTORY.XREF ELSE
      ERRMSG = "CANNOT OPEN INVENTORY.XREF FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV.WHSE" TO INV.WHSE ELSE
      ERRMSG = "CANNOT OPEN INV.WHSE FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE
      ERRMSG = "CANNOT OPEN INV.WHSE.LOC FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV.WHSE.LOC.TEMP" TO INV.WHSE.LOC.TEMP ELSE
      ERRMSG = "CANNOT OPEN INV.WHSE.LOC.TEMP FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV_SERIAL" TO INV_SERIAL ELSE
      ERRMSG = "CANNOT OPEN INV_SERIAL FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV_SERIAL_TEMP" TO INV_SERIAL_TEMP ELSE
      ERRMSG = "CANNOT OPEN INV_SERIAL_TEMP FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV_AUDIT_HIST" TO INV_AUDIT_HIST ELSE
      ERRMSG = "CANNOT OPEN INV_AUDIT_HIST FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV_AUDIT_HIST_TEMP" TO INV_AUDIT_HIST_TEMP ELSE
      ERRMSG = "CANNOT OPEN INV_AUDIT_HIST_TEMP FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV_AUDIT_TAG" TO INV_AUDIT_TAG ELSE
      ERRMSG = "CANNOT OPEN INV_AUDIT_TAG FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV_RECEIPTS" TO INV_RECEIPTS ELSE
      ERRMSG = "CANNOT OPEN INV_RECEIPTS FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV_RECEIPTS_TEMP" TO INV_RECEIPTS_TEMP ELSE
      ERRMSG = "CANNOT OPEN INV_RECEIPTS_TEMP FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV_RECP_WHSE" TO INV_RECP_WHSE ELSE
      ERRMSG = "CANNOT OPEN INV_RECP_WHSE FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV_RECP_WHSE_TEMP" TO INV_RECP_WHSE_TEMP ELSE
      ERRMSG = "CANNOT OPEN INV_RECP_WHSE_TEMP FILE"; GOSUB 91000; STOP
   END
   OPEN "","INTR_DIV_TRANSFER" TO INTR_DIV_TRANSFER ELSE
      ERRMSG = "CANNOT OPEN INTR_DIV_TRANSFER FILE"; GOSUB 91000; STOP
   END
   OPEN "","INTR_SERIAL_XREF" TO INTR_SERIAL_XREF ELSE
      ERRMSG = "CANNOT OPEN INTR_SERIAL_XREF FILE"; GOSUB 91000; STOP
   END

*-- end of open files

** POPULATE THE IDM.REC FROM THE PROPERTIES

MATREAD IDM.REC FROM INTR_DIV_TRANSFER, ID ELSE MAT IDM.REC = ""

STATUS = RBO.getProperty('','ToDiv', IDM.TO.DIV)
STATUS = RBO.getProperty('','FromDiv',  IDM.FROM.DIV)
*STATUS = RBO.getProperty('',"FromWhse", IDM.FROM.WHSE)
STATUS = RBO.getProperty('','ShipPost', IDM.SHIP.POST)
STATUS = RBO.getProperty('','ShipMon', IDM.SHIP.MON)
STATUS = RBO.getProperty('','ProdNo', IDM.PROD.NO)
STATUS = RBO.getProperty('','Serial', IDM.SERIAL)
STATUS = RBO.getProperty('','SerialMill', IDM.SERIAL.MILL)
STATUS = RBO.getProperty('','ToWhse',IDM_TO_WHSE)
STATUS = RBO.getProperty('','ToLoc',IDM_TO_LOC)
STATUS = RBO.getProperty('','SerialQty',IDM_SERIAL_QTY)
STATUS = RBO.getProperty('','RecvStatus',IDM_RECV_STATUS)
STATUS = RBO.getProperty('','Status', IDM.STATUS)

STATUS = RBO.getProperty('','ToWhse',TOWHSE)
STATUS = RBO.getProperty('','ToLoc',TOLOC)
STATUS = RBO.getProperty('','SerialQty',RESVQTY)
STATUS = RBO.getProperty('','RecvStatus',RECVSTAT)

*STATUS = RBO.getProperty('','SerialRecp', IDM.SERIAL.RECP)
*STATUS = RBO.getProperty('','', IDM.TO.WHSE)
*STATUS = RBO.getProperty('','', IDM.TO.LOC)
*STATUS = RBO.getProperty('','Desc', IDM.DESC)
*STATUS = RBO.getProperty('','ShipOper', IDM.SHIP.OPER)
*STATUS = RBO.getProperty('','ShipDate', IDM.SHIP.DATE)
*STATUS = RBO.getProperty('','SerialQty', IDM.SERIAL.QTY)
*STATUS = RBO.getProperty('','', IDM.SERIAL.DIAM)

IDM.SHIP.POST = ICONV(IDM.SHIP.POST,'D4/')

** END OF POPULATE
MATREAD WHSE.REC FROM WAREHOUSE, CONO:IDM.FROM.WHSE ELSE MAT WHSE.REC = ""


MATREAD COMP.REC FROM COMPANY , CONO ELSE MAT COMP.REC = ''
   IF CO.INTR.WHSE = '' THEN
      ERRMSG = 'THE INTER-DIVISIONAL WAREHOUSE IS NOT SETUP IN THE COMPANY FILE.'
      GOTO 91000
   END
   MATREAD WHSE.REC FROM WAREHOUSE, CONO:CO.INTR.WHSE ELSE
      ERRMSG = 'INTER-DIVISIONAL WAREHOUSE IS NOT SETUP IN THE WAREHOUSE FILE'
      GOTO 91000
   END
   READ DIVISION.REC FROM CONTROL, CONO:"DIVISIONS" ELSE 
      ERRMSG = "DIVISIONS CONTROL FILE RECORD IS MISSING" 
      GOTO 93000
   END 
   READ SECURITY.REC FROM CONTROL, CONO:"DIV.SECURITY" ELSE
      ERRMSG = "DIV.SECURITY CONTROL FILE RECORD IS MISSING"
      GOTO 93000
   END 
   MATREAD FISCAL.REC FROM CONTROL, CONO:"ICFISCAL" ELSE
      ERRMSG = "Cannot locate Inventory Control Fiscal Period !!"
       GOTO 93000
   END
   MATREAD GLTABLE.REC FROM CONTROL, CONO:'GLTABLE' THEN
      IF GLTB.IC.INT.DIV = '' THEN
         ERRMSG = 'NO G/L ACCT EXIST FOR INTER-DIVISIONAL ACCOUNTING'
         GOTO 91000 
      END
   END ELSE
      ERRMSG = 'Cannot locate General Ledger Table'
      GOTO 93000
   END
IF SECURITY.REC<1> = "Y" AND SECURITY.REC<2> = "Y" THEN
   LOCATE IDM.FROM.DIV IN DIVISION.REC<1>,1 SETTING DIV.POS ELSE
      DIV.POS = 1
   END
END ELSE
   DIV.POS = 1
END

POST.PER = '' ; POST.DATE = ''
POST.PER = IDM.SHIP.MON
POST.DATE = IDM.SHIP.POST
GOSUB FILE.TRANSFER
VALID.PRODUCT = 1 ; VALID.ROLL = 1
  PROD.CNT = DCOUNT(PROD.ARRAY<1>, @VM) ; ROLL.FOUND = 0
  FOR PROD.PTR = 1 TO PROD.CNT
    PROD.ID = PROD.ARRAY<1,PROD.PTR>
    ROLL.CNT = DCOUNT(RS.ARRAY<PROD.PTR>, @VM)
    FOR ROLL.PTR = 1 TO ROLL.CNT
*      SERIAL.ID = RS.ARRAY<PROD.PTR,ROLL.PTR,1>
*      WHSE.ID = RS.ARRAY<PROD.PTR,ROLL.PTR,2>
*      LOC.ID = RS.ARRAY<PROD.PTR,ROLL.PTR,3>
*      TMP.AMT = RS.ARRAY<PROD.PTR,ROLL.PTR,4>
*      TMP.STATUS = RS.ARRAY<PROD.PTR,ROLL.PTR,6>
       
      SERIAL.ID = RS.ARRAY<PROD.PTR,ROLL.PTR>
      WHSE.ID = TOWHSE<PROD.PTR,ROLL.PTR>
      LOC.ID = TOLOC<PROD.PTR,ROLL.PTR>
      TMP.AMT = RESVQTY<PROD.PTR,ROLL.PTR>
      TMP.STATUS = RECVSTAT<PROD.PTR,ROLL.PTR>
      BEGIN CASE
        CASE WHSE.ID = '' ; CONTINUE
        CASE LOC.ID = '' ; CONTINUE
        CASE TMP.AMT = 0 OR TMP.AMT = '' ; CONTINUE
        CASE TMP.STATUS = 'P' ; CONTINUE
        CASE TMP.STATUS = '' ; CONTINUE
      END CASE
      GOSUB CHECK.INV.WHSE;*line uncommented
      MAT D.TRAN.REC = ""
      D.TRAN.EMP = OPER.ID
      D.TRAN.PRT.DATE = TODAY
      D.TRAN.PERIOD = POST.PER
      D.TRAN.DATE.ENTER = POST.DATE
      D.TRAN.FROM.WHSE = CO.INTR.WHSE
      D.TRAN.REASON.DESC = IDM.DESC
      MATREADU ISTK.REC FROM INV_SERIAL, CONO:SERIAL.ID ELSE MAT ISTK.REC = ''
      D.TRAN.PROD.NO<1> = PROD.ID
      D.TRAN.SERIAL<1> = SERIAL.ID
      D.TRAN.RECP<1> = ISTK.RECP
      D.TRAN.FROM.LOC<1> = ISTK.LOC
      D.TRAN.TO.WHSE<1> = WHSE.ID
      D.TRAN.TO.LOC<1> = LOC.ID
      D.TRAN.QTY<1> = ISTK.CUR.QTY
      D.TRAN.TOT.QTY<1> = ISTK.CUR.QTY
      MAT TRAN.REC='' ; ERRMSG=''

      *v changed the subroutine to be called from TRAN_UPDATE to TRAN_UPDATE_SUB : SSH
      *CALL TRAN_UPDATE(CONO,TRANS.ID,MAT TRAN.REC,'TRANIN',CO.ICS.LOC.TRAN,ERRMSG)
      
      MAT TRAN.REC = MAT D.TRAN.REC
      CALL TRAN_UPDATE_SUB(CONO,TRANS.ID,MAT TRAN.REC,'TRANIN',CO.ICS.LOC.TRAN,ERRMSG,MAT D.TRAN.REC) ;***** changed the name of the subroutine

      IF D.TRAN.ERRMSG # '' THEN
        ERRMSG = ERRMSG : @VM : D.TRAN.ERRMSG        
      END ELSE
        ROLL.FOUND = 1
        IDM.RECV.OPER<1,PROD.PTR,ROLL.PTR> = OPER.ID
        IDM.RECV.DATE<1,PROD.PTR,ROLL.PTR> = TODAY
        IDM.RECV.POST<1,PROD.PTR,ROLL.PTR> = POST.DATE
        IDM.RECV.MON<1,PROD.PTR,ROLL.PTR> = POST.PER
        DELETE INTR_SERIAL_XREF,CONO:SERIAL.ID
      END
    NEXT ROLL.PTR
  NEXT PROD.PTR
  IDM.STATUS = 4
  FOR PROD.PTR = 1 TO PROD.CNT
    ROLL.CNT = DCOUNT(IDM.SERIAL<1,PROD.PTR>, @SVM)
    FOR ROLL.PTR = 1 TO ROLL.CNT
      IF IDM.RECV.POST<1,PROD.PTR,ROLL.PTR> = '' THEN
        IDM.STATUS = 3
      END
    NEXT ROLL.PTR
  NEXT PROD.PTR
  MATWRITE IDM.REC ON INTR_DIV_TRANSFER, CONO:TRANS.ID
  IF ROLL.FOUND = 0 THEN
    ERRMSG = ERRMSG : @VM : 'CAN NOT POST, NO SERIAL QTY TO TRANSFER'
    *GOSUB 91000
    STATUS = RBO.setProperty('','ServerStatus',2)
  END

STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
RETURN


FILE.TRANSFER: 
  PROD.CNT = DCOUNT(PROD.ARRAY<1>,@VM)
  FOR PROD.PTR = 1 TO PROD.CNT
    PROD.ID = PROD.ARRAY<1,PROD.PTR>
    ROLL.CNT = DCOUNT(RS.ARRAY<PROD.PTR>, @VM)
    FOR ROLL.PTR = 1 TO ROLL.CNT
*      IDM.TO.WHSE<1,PROD.PTR,ROLL.PTR> = RS.ARRAY<PROD.PTR,ROLL.PTR,2>
*      IDM.TO.LOC<1,PROD.PTR,ROLL.PTR> = RS.ARRAY<PROD.PTR,ROLL.PTR,3>
*      TMP.STATUS = RS.ARRAY<PROD.PTR,ROLL.PTR,6>
       
      IDM.TO.WHSE<1,PROD.PTR,ROLL.PTR> = TOWHSE<PROD.PTR,ROLL.PTR>
      IDM.TO.LOC<1,PROD.PTR,ROLL.PTR> = TOLOC<PROD.PTR,ROLL.PTR>
      TMP.STATUS = RECVSTAT<PROD.PTR,ROLL.PTR>
      BEGIN CASE
        CASE TMP.STATUS = 'I'
          IDM.RECV.STATUS<1,PROD.PTR,ROLL.PTR> = 'I'
        CASE TMP.STATUS = 'R'
          IDM.RECV.STATUS<1,PROD.PTR,ROLL.PTR> = 'R'
      END CASE
    NEXT ROLL.PTR
  NEXT PROD.PTR
  IDM.STATUS = 3
  *
  RETURN
*
CHECK.INV.WHSE: 
*
  IWH.ID = CONO:PROD.ID:'!':IDM.FROM.WHSE
  IWH.ID2 = CONO:PROD.ID:'!':WHSE.ID
  MATREADU IWH.REC FROM INV.WHSE, IWH.ID2 ELSE
    MATREAD IWH.REC FROM INV.WHSE, IWH.ID THEN
      SIWH.STD.COST = IWH.STD.COST  
      SIWH.LIST.COST = IWH.LIST.COST
      SIWH.AVG.COST = IWH.AVG.COST  
      SIWH.MARKUP = IWH.MARKUP      
      SIWH.FOH.PCT = IWH.FOH.PCT    
      SIWH.MIN.QTY = IWH.MIN.QTY    
      SIWH.MAX.QTY = IWH.MAX.QTY    
      MAT IWH.REC = ""              
      IWH.STD.COST = SIWH.STD.COST  
      IWH.LIST.COST = SIWH.LIST.COST
      IWH.AVG.COST = SIWH.AVG.COST  
      IWH.MARKUP = SIWH.MARKUP      
      IWH.FOH.PCT = SIWH.FOH.PCT    
      IWH.MIN.QTY = SIWH.MIN.QTY    
      IWH.MAX.QTY = SIWH.MAX.QTY    
      MATWRITE IWH.REC ON INV.WHSE, IWH.ID2
      MATREADU INV.REC FROM INVENTORY, CONO:PROD.ID THEN
        LOCATE WHSE.ID IN INV.WHSE.CODE<1>,1 SETTING TOS ELSE
          INV.WHSE.CODE<1,TOS> = WHSE.ID
        END
        MATWRITE INV.REC TO INVENTORY, CONO:PROD.ID
      END
    END 
  END
  RETURN
*


91000

93000
STATUS = RBO.setProperty('','ServerStatus',1)
STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
RETURN
