SUBROUTINE EST_CALC_QTY_1B
********************************************************************************
*   Program name :- EST_CALC_QTY_1B
*   Created:- 08/02/2004 RAZI MOHIUDDIN
*------------------------------------------------------------------------------*
* In Properties:
* --------------
*  
*
* Out Properties:
* ---------------
*  
********************************************************************************
$INCLUDE WWINSERT RBO.H
$INCLUDE JES.CPYLIB ESTIMATE
$INCLUDE JES.CPYLIB ESTIMATE.MATL
$INCLUDE JES.CPYLIB ESTIMATE.BIND.SPOIL
$INCLUDE JES.CPYLIB ESTIMATE.PRESS.SPOIL
$INCLUDE JES.CPYLIB ESTIMATE.PAPER.GROUP
$INCLUDE JES.CPYLIB EQUIPMENT
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE JES.CPYLIB JES.FILE.VARS
$INCLUDE CPYLIB FILE.VARS
$INCLUDE CPYLIB CHAR

OPEN "ESTIMATE" TO ESTIMATE ELSE ERRMSG="CANNOT OPEN ESTIMATE FILE";GOTO 90000
OPEN "ESTIMATE.MATL" TO ESTIMATE.MATL ELSE ERRMSG="CANNOT OPEN ESTIMATE.MATL FILE";GOTO 90000
OPEN "ESTIMATE.BIND.SPOIL" TO ESTIMATE.BIND.SPOIL ELSE ERRMSG="CANNOT OPEN ESTIMATE.BIND.SPOIL FILE";GOTO 90000
OPEN "ESTIMATE.PRESS.SPOIL" TO ESTIMATE.PRESS.SPOIL ELSE ERRMSG="CANNOT OPEN ESTIMATE.PRESS.SPOIL FILE";GOTO 90000
OPEN "ESTIMATE.PAPER.GROUP" TO ESTIMATE.PAPER.GROUP ELSE ERRMSG="CANNOT OPEN ESTIMATE.PAPER.GROUP FILE";GOTO 90000
OPEN "EQUIPMENT" TO EQUIPMENT ELSE ERRMSG="CANNOT OPEN EQUIPMENT FILE";GOTO 90000
OPEN "COMPANY" TO COMPANY ELSE ERRMSG="CANNOT OPEN COMPANY FILE";GOSUB 90000
OPEN "INVENTORY" TO INVENTORY ELSE ERRMSG="CANNOT OPEN INVENTORY FILE";GOSUB 90000
OPEN "INV.WHSE" TO INV.WHSE ELSE ERRMSG="CANNOT OPEN INV.WHSE FILE";GOSUB 90000

STATUS = RBO.getProperty('', 'ID', ID)
STATUS = RBO.getProperty('', 'EST_INV_ID', EST_INV_ID)

CONO=ID[1,3]
COMP=1
MPTR=1 
NCTR=1
PCTR=1
XVAR = ''
EST.PROD.PASSES=''
EST.PROD.M.WT=''
EST.PROD.PSS.OSS=''
BIND.SPOIL=''
TEMPEQTY=''
RUN.SHT=''
SPL.SHT=''
TOT.SHT=''
ORD.LBS=''
COST=''
NXTVAR=''

EST.PROD.INV.ID =EST_INV_ID

MATREAD COMP.REC FROM COMPANY, CONO ELSE
        MAT COMP.REC = ""
END

PRICE.FLAG = CO.JES.PARAM<1,11>
IF PRICE.FLAG="" THEN PRICE.FLAG="X"
INV.ID = EST.PROD.INV.ID<1,COMP,MPTR>
IF PRICE.FLAG # "X" AND INV.ID # "" THEN
    ICOST = ""
    MATREAD INV.REC FROM INVENTORY, CONO:INV.ID ELSE
      MAT INV.REC = ""
    END
    WCNT=DCOUNT(INV.WHSE.CODE,VM)
    FOR WP = 1 TO WCNT
      WHSE = INV.WHSE.CODE<1,WP>
      IWH.ID = CONO:INV.ID:"!":WHSE
      MATREAD IWH.REC FROM INV.WHSE,IWH.ID ELSE
        MAT IWH.REC = ""
      END
      SCOST = ""
      BEGIN CASE
        CASE PRICE.FLAG = "L"
          IF IWH.LIST.COST # "" THEN
            SCOST = INT(IWH.LIST.COST / 100 + 0.99)
          END
        CASE PRICE.FLAG = "A"
          IF IWH.AVG.COST # "" THEN
            SCOST = INT(IWH.AVG.COST / 100 + 0.99)
          END
        CASE PRICE.FLAG = "S"
          IF IWH.STD.COST # "" THEN
            SCOST = INT(IWH.STD.COST / 100 + 0.99)
          END
        CASE PRICE.FLAG = "R"
          DIV.POS='' ; FISCAL.FLAG='IC' ; TRAN.PERIOD=''
          CALL GET.LAST.COST(IWH.ID,MAT IWH.REC,WAREHOUSE,CONTROL,ERR.FLG,ERRMSG,DIV.POS,FISCAL.FLAG,TRAN.PERIOD,LAST.PRICE)
          BEGIN CASE
            CASE ERR.FLG=''
              SCOST=INT(LAST.PRICE/100+0.99)
            CASE ERR.FLG="-1"
              CONTINUE
            CASE ERR.FLG='-2'
              RETURN
          END CASE
      END CASE
      BEGIN CASE
        CASE SCOST = ""
        CASE ICOST = ""
          ICOST = SCOST
        CASE SCOST > ICOST
          ICOST = SCOST
      END CASE
    NEXT WP
    IF ICOST+0 > 0 THEN
      ICOST = INT(ICOST * (INV.M.WT * 100 / INV.COST.WT) + 0.5)
    END
  END

STATUS = RBO.getProperty('', 'EST_OS_WIDTH', EST_OS_WIDTH)
STATUS = RBO.getProperty('', 'EST_OS_LENGTH',EST_OS_LENGTH)
STATUS = RBO.getProperty('', 'EST_OS_GRAIN', EST_OS_GRAIN)
STATUS = RBO.getProperty('', 'EST_PS_WIDTH', EST_PS_WIDTH)
STATUS = RBO.getProperty('', 'EST_PS_LENGTH',EST_PS_LENGTH)
STATUS = RBO.getProperty('', 'EST_PS_GRAIN', EST_PS_GRAIN)
STATUS = RBO.getProperty('', 'EST_PAPERTYPE',EST_PAPERTYPE)
STATUS = RBO.getProperty('', 'EST_PAPERGROUP',EST_PAPERGROUP)
STATUS = RBO.getProperty('', 'EST_BASIS_WT',EST_BASIS_WT)

STATUS = RBO.getProperty('', 'EST_QTY', EST_QTY)
STATUS = RBO.getProperty('', 'EST_PAPERPRICING_QTY', EST_PAPERPRICING_QTY)
STATUS = RBO.getProperty('', 'EST_PROD_ID', EST_PROD_ID)
STATUS = RBO.getProperty('', 'EST_PROD_PRESS_ID',EST_PROD_PRESS_ID)
STATUS = RBO.getProperty('', 'EST_PRT_MODE', EST_PRT_MODE)
STATUS = RBO.getProperty('', 'EST_PROD_CLRSIDE1', EST_PROD_CLRSIDE1)
STATUS = RBO.getProperty('', 'EST_PROD_CLRSIDE2',EST_PROD_CLRSIDE2)
STATUS = RBO.getProperty('', 'EST_NUMUP', EST_NUMUP)
STATUS = RBO.getProperty('', 'EST_PROD_FORMS', EST_PROD_FORMS)
STATUS = RBO.getProperty('', 'EST_BIND_SPOIL', EST_BIND_SPOIL)
STATUS = RBO.getProperty('', 'EST_PRESS_SPOIL', EST_PRESS_SPOIL)
STATUS = RBO.getProperty('', 'EST_MR_CNT',EST_MR_CNT)
STATUS = RBO.getProperty('', 'EST_SUBS_MR_CNT', EST_SUBS_MR_CNT)
STATUS = RBO.getProperty('', 'EST_MR_IMPR',EST_MR_IMPR)
STATUS = RBO.getProperty('', 'EST_SUBS_MR_IMPR',EST_SUBS_MR_IMPR)

EST.QTY=EST_QTY
****EST.PROD.PQTY from pricing grid should be send with ! instead of VM
EST.PROD.PQTY=EST_PAPERPRICING_QTY
EST.PROD.OS.TYPE = EST_PAPERTYPE
EST.PROD.OS.WIDTH =EST_OS_WIDTH
EST.PROD.OS.LENGTH =EST_OS_LENGTH
EST.PROD.OS.GRAIN =EST_OS_GRAIN
EST.PROD.PS.WIDTH = EST_PS_WIDTH
EST.PROD.PS.LENGTH=EST_PS_LENGTH
EST.PROD.PS.GRAIN=EST_PS_GRAIN
EST.PROD.BASIS.WT=EST_BASIS_WT

EST.PROD.NO.UP = EST_NUMUP
EST.PROD.FORMS = EST_PROD_FORMS
EST.PROD.BIND.SPOIL  = EST_BIND_SPOIL
EST.PROD.PRESS.SPOIL = EST_PRESS_SPOIL
EST.PROD.INIT.MR.CNT = EST_MR_CNT
EST.PROD.INIT.MR.IMP = EST_MR_IMPR
EST.PROD.SUBS.MR.CNT = EST_SUBS_MR_CNT
EST.PROD.SUBS.MR.IMP = EST_SUBS_MR_IMPR

EST.PROD.OS.PROD = EST_PROD_ID

MATREAD EQUIPMENT.REC FROM EQUIPMENT,CONO:EST_PROD_PRESS_ID<1,COMP> ELSE
         MAT EQUIPMENT.REC=""
END 
MATREAD ESTPG.REC FROM ESTIMATE.PAPER.GROUP, CONO:EST_PAPERGROUP ELSE
    ERRMSG = "Invalid paper group"
    GOTO 90000
END
MATREAD ESTM.REC FROM ESTIMATE.MATL,CONO:EST.PROD.OS.TYPE<1,COMP>:EST_PAPERGROUP ELSE
         MAT ESTM.REC=""
END

LOCATE EST.PROD.OS.PROD<1,COMP,MPTR> IN ESTM.PROD<1>,1 SETTING MP ELSE
  ERRMSG = "Cannot locate product in material record"
  GOTO 90000
END

IF NOT(NUM(EST.PROD.BIND.SPOIL<1,COMP,1>)) THEN
    MATREAD BST.REC FROM ESTIMATE.BIND.SPOIL,CONO:EST.PROD.BIND.SPOIL<1,COMP,1> ELSE
      MAT BST.REC = ""
    END
END
IF NOT(NUM(EST.PROD.PRESS.SPOIL<1,COMP,1>)) THEN
    MATREAD PST.REC FROM ESTIMATE.PRESS.SPOIL,CONO:EST.PROD.PRESS.SPOIL<1,COMP,1> ELSE
      MAT PST.REC = ""
    END
END

   PMODE=EST_PRT_MODE<1,COMP,1>
   C1=EST_PROD_CLRSIDE1<1,COMP,1>+0
   C2=EST_PROD_CLRSIDE2<1,COMP,1>+0
   CC=EQP.PRESS.CLR.CNT
   BEGIN CASE
      CASE EQP.PRESS.TYPE="W"
         PP=1
      CASE PMODE="SS"
         PP=INT(C1/CC+0.99)
      CASE PMODE="WT" OR PMODE="WR"
         PP=INT(C1/CC+0.99)*2
      CASE PMODE="SW"
         PP=INT(C1/CC+0.99)+INT(C2/CC+0.99)
      CASE 1
         IF C1 > C2 THEN
            PP=INT(C1/CC+0.99)
         END ELSE
            PP=INT(C2/CC+0.99)
         END
   END CASE
   IF PP < 1 THEN PP = 1
   EST.PROD.PASSES<1,COMP,1>=PP
  
  SOMECASE = 0
  QLC = DCOUNT(EST.QTY,VM)
  PLC = DCOUNT(EST.PROD.PQTY<1,COMP,MPTR>,"!") 
  FOR X = PLC TO QLC+1 STEP -1
	SOMECASE = 1
	GOSUB DELVAL 
  *	MACRO DELVAL;EST.PROD.PQTY<1,COMP,MPTR>;"!";X
	SOMECASE = 2
	GOSUB DELVAL  
 *	MACRO DELVAL;EST.PROD.PCST<1,COMP,MPTR>;"!";X
  NEXT X
  BW = EST.PROD.BASIS.WT<1,COMP,MPTR>
  BSW = ESTPG.WIDTH/10000
  BSL = ESTPG.LENGTH/10000
  OSW = EST.PROD.OS.WIDTH<1,COMP,MPTR>/10000
  IF EST.PROD.OS.LENGTH<1,COMP,1> NE "" THEN
  	OSL = EST.PROD.OS.LENGTH<1,COMP,1>/10000
  END ELSE
  	OSL = EQP.PRESS.CUTOFF.LEN/10000
  END
  *STATUS = RBO.setProperty('','MTEST',BW : "*" : BSW: "*" : BSL: "*" : OSW: "*" : OSL)
  M.WEIGHT = 2 * BW * (OSW * OSL) / (BSW * BSL)
  M.WEIGHT = INT(M.WEIGHT * 100 + 0.5) / 100
  EST.PROD.M.WT<1,COMP,MPTR> = M.WEIGHT * 100
  EST.PROD.PSS.OSS<1,COMP,MPTR> = 1
  NUMBER.UP = EST.PROD.NO.UP<1,COMP,1>+0
  IF NUMBER.UP = 0 THEN NUMBER.UP = 1  
  FORMS = EST.PROD.FORMS<1,COMP,1>+0
  MF = EST.PROD.PASSES<1,COMP,MPTR>  
  IF FORMS = 0 THEN FORMS = 1
  FOR QPTR = 1 TO QLC
    EQTY = EST.QTY<1,QPTR>
    BEGIN CASE
      CASE EST.PROD.BIND.SPOIL<1,COMP,1> = "MULT"
        BIND.SPOIL = 0
        FOR MQ = 1 TO 3
          QTY = FIELD(EST.BOOK.BIND.QTY<1,1,MQ>,"!",QPTR)+0
          BSP = EST.BOOK.BIND.SPOIL<1,1,MQ>
          BEGIN CASE
            CASE QTY = 0
              BSM = 0
            CASE NUM(BSP)
              BSM = INT(QTY*(BSP/100)+0.99)
            CASE 1
              MATREAD BST.REC FROM ESTIMATE.BIND.SPOIL,CONO:BSP ELSE MAT BST.REC = ""
              LOCATE QTY IN BST.QTY<1>,1 BY "AR" SETTING BP ELSE NULL
              BEGIN CASE
                CASE BP = 1
                  BSPCT = BST.PCT<1,BP>
                CASE BP > COUNT(BST.QTY,VM) + 1
                  BSPCT = BST.PCT<1,BP-1>
                CASE BST.EXTR = "Y"
                  BSPCT = INT(BST.PCT<1,BP>-(BST.QTY<1,BP>-QTY)/(BST.QTY<1,BP>-BST.QTY<1,BP-1>)*(BST.PCT<1,BP>-BST.PCT<1,BP-1>)+0.5)
                CASE 1
                  BSPCT = BST.PCT<1,BP>
              END CASE
              BSM = INT(QTY*(BSPCT/10000)+0.99)
              IF BSM < BST.MIN.QTY THEN BSM = BST.MIN.QTY
            END CASE
          BIND.SPOIL = BIND.SPOIL + BSM
          ****MACRO REPVAL;EST.BOOK.BIND.REQ<1,COMP,MQ>;"!";QPTR;BSM
		MYCASE = 1
		GOSUB REPVAL 
        NEXT MQ
      CASE NUM(EST.PROD.BIND.SPOIL<1,COMP,1>)
        BIND.SPOIL<1,QPTR> = INT(EQTY * (EST.PROD.BIND.SPOIL<1,COMP,1>/100) + 0.99)

      CASE 1
        LOCATE EQTY IN BST.QTY<1>,1 BY "AR" SETTING BP ELSE NULL
        BEGIN CASE
          CASE BP = 1
            BSPCT = BST.PCT<1,BP>
          CASE BP > COUNT(BST.QTY,VM) + 1
            BSPCT = BST.PCT<1,BP-1>
          CASE BST.EXTR = "Y"
            BSPCT = INT(BST.PCT<1,BP>-(BST.QTY<1,BP>-EQTY)/(BST.QTY<1,BP>-BST.QTY<1,BP-1>)*(BST.PCT<1,BP>-BST.PCT<1,BP-1>)+0.5)
          CASE 1
            BSPCT = BST.PCT<1,BP>
        END CASE
        BIND.SPOIL = INT(EQTY * (BSPCT/10000) + 0.99)
        IF BIND.SPOIL < BST.MIN.QTY THEN BIND.SPOIL = BST.MIN.QTY
      END CASE
   *    EST.PROD.BS.REQ<1,COMP,QPTR> = BIND.SPOIL
   **** MACRO REPVAL;EST.PROD.BS.REQ<1,COMP,1>;"!";QPTR;BIND.SPOIL
	 MYCASE = 2
	 GOSUB REPVAL
    TEMPEQTY<1,QPTR> = EST.QTY<1,QPTR>
    PROD.QTY = TEMPEQTY + BIND.SPOIL
    MPROD_QTY =DCOUNT(PROD.QTY,VM)
  FOR J=1 TO QLC	
       * RUN.SHT = INT(PROD.QTY / NUMBER.UP + 0.99)
       RUN.SHT<1,J> = INT(PROD.QTY<1,J> / NUMBER.UP + 0.99)
       RUN.IMP = RUN.SHT<1,J>              ;* Impressions per pass
	*STATUS = RBO.setProperty('','Test',RUN.SHT:"  eeee" :RUN.IMP)

    IF NUM(EST.PROD.PRESS.SPOIL<1,COMP,1>) THEN
      SPL.SHT = INT(RUN.IMP<1,J> * (EST.PROD.PRESS.SPOIL<1,COMP,1>/100) + 0.99)
    END ELSE
    LOCATE RUN.IMP IN PST.QTY<1>,1 BY "AR" SETTING P ELSE NULL
	XVAR<1,PCTR> = P
       PCTR = PCTR + 1
      BEGIN CASE
      	 CASE P = 1
         PSPCT = PST.PCT<1,P>
    	 CASE P > COUNT(PST.QTY,VM) + 1
          PSPCT = PST.PCT<1,P-1>
        CASE PST.EXTR = "Y"
          PSPCT = INT(PST.PCT<1,P>-(PST.QTY<1,P>-RUN.IMP)/(PST.QTY<1,P>-PST.QTY<1,P-1>)*(PST.PCT<1,P>-PST.PCT<1,P-1>)+0.5)
        CASE 1
          PSPCT = PST.PCT<1,P>
      END CASE

      SPL.SHT<1,J> = INT(RUN.IMP * (PSPCT/10000) + 0.99)

*      FOR K=1 TO QLC
*      		*SPL.SHT = INT(RUN.IMP * (PSPCT/10000) + 0.99)
*		SPL.SHT<1,K> = INT(RUN.IMP<1,K> * (PSPCT/10000) + 0.99)
*      NEXT K
    END
NEXT J
*STATUS = RBO.setProperty('','Test1',XVAR:"~":PST.QTY<1>:"~")
*STATUS = RBO.setProperty('','MTEST1',SPL.SHT)

    ***  FOR R=1 TO QLC
    ***	*    SPL.SHT = SPL.SHT * MF
    ***	     SPL.SHT<1,R> = SPL.SHT<1,R> * MF
    ***  NEXT R

*        EST.PROD.PS.REQ<1,COMP,QPTR> = SPL.SHT
   **** MACRO REPVAL;EST.PROD.PS.REQ<1,COMP,MPTR>;"!";QPTR;SPL.SHT
	 MYCASE = 3
	 GOSUB REPVAL
    MR.SHT = EST.PROD.INIT.MR.CNT<1,COMP,MPTR> * EST.PROD.INIT.MR.IMP<1,COMP,MPTR>
    MR.SHT = MR.SHT + (EST.PROD.SUBS.MR.CNT<1,COMP,MPTR> * EST.PROD.SUBS.MR.IMP<1,COMP,MPTR>)
*        EST.PROD.MR.REQ<1,COMP,QPTR> = MR.SHT
    ****MACRO REPVAL;EST.PROD.MR.REQ<1,COMP,MPTR>;"!";QPTR;MR.SHT
	 MYCASE = 4
	 GOSUB REPVAL
    FOR M=1 TO QLC
	*    TOT.SHT = MR.SHT + ((RUN.SHT + SPL.SHT) * FORMS)
            TOT.SHT<1,M> = MR.SHT + ((RUN.SHT<1,M> + SPL.SHT<1,M>) * FORMS)
    NEXT M
    ORD.SHT = TOT.SHT
    FOR N=1 TO QLC
    	     ORD.LBS<1,N> = INT(M.WEIGHT*(ORD.SHT<1,N>/1000)+0.5)
    NEXT N
 
   **** MACRO REPVAL;EST.PROD.PQTY<1,COMP,MPTR>;"!";QPTR;ORD.SHT
	 MYCASE = 5
	 GOSUB REPVAL
    IF PRICE.FLAG = "X" OR EST.PROD.INV.ID<1,COMP,MPTR> = "" THEN
	SOMEVARX = ORD.LBS<1,NCTR>
	NCTR = NCTR + 1
    LOCATE SOMEVARX IN ESTM.END.QTY<1,MP>,1 BY "AR" SETTING PP ELSE NULL
    IF PP > COUNT(ESTM.END.QTY<1,MP>,SM) + 1 THEN PP = PP - 1
         *  COST = INT(ORD.LBS / 100 * ESTM.QCOST<1,MP,PP> + 0.5)
	FOR J=0 TO QLC
    	     COST<1,J> = OCONV(ESTM.QCOST<1,MP,PP>,"MD2")
	NEXT J
    END ELSE
    	     COST = ICOST
    END
    IF COST # "" THEN
    ***	MACRO REPVAL;EST.PROD.PCST<1,COMP,MPTR>;"!";QPTR;COST
		MYCASE = 6
		GOSUB REPVAL
    END
    ***MACRO REPVAL;EST.PROD.IMP<1,COMP,MPTR>;"!";QPTR;(RUN.SHT + SPL.SHT)
	MYCASE = 7
	GOSUB REPVAL

NEXT QPTR  

STATUS = RBO.setProperty('','EST_PROD_PSSOSS',EST.PROD.PSS.OSS)
STATUS = RBO.setProperty('','EST_PROD_PQTY',ORD.LBS)
STATUS = RBO.setProperty('','EST_PROD_PRICE',COST)

************MACRO DELVAL SUBROUTINE*********************
DELVAL:
tRVCNT = ''
SOMEVAR = ''
IF SOMECASE = 1 THEN
  SOMEVAR = EST.PROD.PQTY<1,COMP,MPTR>
END
IF SOMECASE = 2 THEN
  SOMEVAR = EST.PROD.PCST<1,COMP,MPTR>
END
      tRVCNT=DCOUNT(SOMEVAR,"!")
      BEGIN CASE
      CASE X = 1 AND tRVCNT <= 1
         SOMEVAR=""
      CASE X = 1
	*ABCD!EFGH = EFGH
         SOMEVAR=SOMEVAR[INDEX(SOMEVAR,"!",1)+1,999]
      CASE X < tRVCNT
	 *ABCD!EFGH = ABCDEFGH
         SOMEVAR=SOMEVAR[1,INDEX(SOMEVAR,"!",X-1)]:SOMEVAR[INDEX(SOMEVAR,"!",X)+1,999]
      CASE X = tRVCNT
	 *ABCD!EFGH = ABCD 
         SOMEVAR=SOMEVAR[1,INDEX(SOMEVAR,"!",X-1)-1]
      END CASE
	
RETURN
****************MACRO REPVAL*****************************************
REPVAL:
MYVAR='' 
RVCNT=''
MYCASE=0
IF MYCASE = 1 THEN
  MYVAR = EST.BOOK.BIND.REQ<1,COMP,MQ>
  NXTVAR = BSM
END
IF MYCASE = 2 THEN
  MYVAR = EST.PROD.BS.REQ<1,COMP,MPTR>
  NXTVAR = BIND.SPOIL
END   
IF MYCASE = 3 THEN
  MYVAR = EST.PROD.PS.REQ<1,COMP,MPTR>
  NXTVAR = SPL.SHT
END    
IF MYCASE = 4 THEN
  MYVAR = EST.PROD.MR.REQ<1,COMP,MPTR>
  NXTVAR = MR.SHT
END  
IF MYCASE = 5 THEN
  MYVAR = EST.PROD.PQTY<1,COMP,MPTR>
  NXTVAR = ORD.LBS
END  
IF MYCASE = 6 THEN
  MYVAR = EST.PROD.PCST<1,COMP,MPTR>
  NXTVAR = COST
END       
IF MYCASE = 7 THEN
  MYVAR = EST.PROD.IMP<1,COMP,MPTR>
  NXTVAR= RUN.SHT + SPL.SHT
END 
      RVCNT=DCOUNT(MYVAR,"!")
      BEGIN CASE
      CASE QPTR  = 1 AND RVCNT <= 1
         MYVAR =NXTVAR
      CASE QPTR  = 1
         MYVAR =NXTVAR:MYVAR [INDEX(MYVAR ,"!",1),999]
      CASE QPTR  < RVCNT
         MYVAR =MYVAR [1,INDEX(MYVAR ,"!",QPTR -1)]:NXTVAR:MYVAR [INDEX(MYVAR ,"!",QPTR ),999]
      CASE QPTR  = RVCNT
         MYVAR =MYVAR [1,INDEX(MYVAR ,"!",QPTR -1)]:NXTVAR
      CASE RVCNT = 0
         MYVAR =STR("!",QPTR -1):NXTVAR
      CASE 1
         MYVAR =MYVAR :STR("!",QPTR -RVCNT):NXTVAR
      END CASE
RETURN
*****************************************************************


90000*
   STATUS = RBO.setProperty('','ServerStatus',1)
   STATUS = RBO.setProperty('','ServerMessage',ERRMSG)
RETURN

