SUBROUTINE ORDM_ORD_LINE_SHIP
********************************************************************************
*   Program name :- ORDM_ORD_LINE_SHIP
*   Created:- 2/21/2006
*   Programmer :- Suhail Hussain S
********************************************************************************
$INCLUDE WWINSERT RBO.H

$INCLUDE CPYLIB COMMON1
$INCLUDE JCS.CPYLIB COM.JCS.LINK  
$INCLUDE ICS.CPYLIB COM.INV.MAIN  
$INCLUDE ICS.CPYLIB COM.INV.SERIAL
$INCLUDE JCS.CPYLIB COM.INV.STATS 
$INCLUDE PMC.CPYLIB COM.CUST 
$INCLUDE OPS.CPYLIB COM.ORDER
$INCLUDE OPS.CPYLIB COM.OPS.LINK

$DEFINE INVENTORY
$DEFINE ORDER
$DEFINE ORDERDETAILINQ
$DEFINE COMPOPS
$DEFINE CUSTOMER
$DEFINE CATEGORY
$DEFINE INVWHSE
$DEFINE FNGDSTATS
$DEFINE FNGDORDERSTATS
$DEFINE JOB
$DEFINE FILEVARS

$INCLUDE PMC.CPYLIB COMP.OPS
$INCLUDE PMC.CPYLIB CUSTOMER
$INCLUDE OPS.CPYLIB ORDER
$INCLUDE OPS.CPYLIB ORDER.DETAIL
$INCLUDE OPS.CPYLIB ORDER.DETAIL.INQ
$INCLUDE OPS.CPYLIB ORDER.RELEASE
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV.FNGD
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE ICS.CPYLIB FNGD.BOM
$INCLUDE ICS.CPYLIB FNGD.STATS
$INCLUDE ICS.CPYLIB FNGD.ORDER.STATS
$INCLUDE ICS.CPYLIB FNGD.JOB.STATS
$INCLUDE ICS.CPYLIB PRICE.TABLE
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE JES.CPYLIB ESTIMATE
$INCLUDE JCS.CPYLIB JOB
$INCLUDE PMC.CPYLIB SHIP.TO
$INCLUDE CPYLIB FILE.VARS
$INCLUDE CPYLIB CHAR

   OPEN "","CUSTOMER" TO CUSTOMER ELSE ERRMSG = "CANNOT OPEN CUSTOMER FILE";GOTO 91000
   OPEN "","ORDER" TO ORDER ELSE ERRMSG = "CANNOT OPEN ORDER FILE";GOTO 91000
   OPEN "","ORDER.DETAIL" TO ORDER.DETAIL ELSE ERRMSG = "CANNOT OPEN ORDER.DETAIL FILE";GOTO 91000
   OPEN "","ORDER.RELEASE" TO ORDER.RELEASE ELSE ERRMSG = "CANNOT OPEN ORDER.RELEASE FILE";GOTO 91000
   OPEN "","INVENTORY" TO INVENTORY ELSE ERRMSG = "CANNOT OPEN INVENTORY FILE";GOTO 91000
   OPEN "","CATEGORY" TO CATEGORY ELSE ERRMSG = "CANNOT OPEN CATEGORY FILE";GOTO 91000
   OPEN "","INV.WHSE" TO INV.WHSE ELSE ERRMSG = "CANNOT OPEN INV.WHSE FILE";GOTO 91000
   OPEN "","INV.FNGD" TO INV.FNGD ELSE ERRMSG = "CANNOT OPEN INV.FNGD FILE";GOTO 91000
   OPEN "","FNGD.BOM" TO FNGD.BOM ELSE ERRMSG = "CANNOT OPEN FNGD.BOM FILE";GOTO 91000
   OPEN "","FNGD.STATS" TO FNGD.STATS ELSE ERRMSG = "CANNOT OPEN FNGD.STATS FILE";GOTO 91000
   OPEN "","FNGD.ORDER.STATS" TO FNGD.ORDER.STATS ELSE ERRMSG = "CANNOT OPEN  FILE";GOTO 91000
   OPEN "","FNGD.JOB.STATS" TO FNGD.JOB.STATS ELSE ERRMSG = "CANNOT OPEN FNGD.JOB.STATS FILE";GOTO 91000
   OPEN "","PRICE.TABLE" TO PRICE.TABLE ELSE ERRMSG = "CANNOT OPEN PRICE.TABLE FILE";GOTO 91000
   OPEN "","WAREHOUSE" TO WAREHOUSE ELSE ERRMSG = "CANNOT OPEN WAREHOUSE FILE";GOTO 91000
   OPEN "","ESTIMATE" TO ESTIMATE ELSE ERRMSG = "CANNOT OPEN ESTIMATE FILE";GOTO 91000
   OPEN "","JOB" TO JOB ELSE ERRMSG = "CANNOT OPEN JOB FILE";GOTO 91000
   OPEN "","CONTROL" TO CONTROL ELSE ERRMSG = "CANNOT OPEN CONTROL FILE";GOTO 91000  
   OPEN "","SHIP.TO" TO SHIP.TO ELSE ERRMSG = "CANNOT OPEN SHIP.TO FILE";GOTO 91000
   
   STATUS = RBO.getProperty("","INARR",INARR)
   STATUS = RBO.getProperty("","PMCProperty",PMCProperty)
   STATUS = RBO.getProperty("","GRIDARR",OSD_FULL_ARR)
   STATUS = RBO.getProperty("","RETARR",OSDARR)
   
   CONO           = PMCProperty<1,4>
   ORDNO          = INARR<1,1>
   ORD.CUST       = INARR<1,2>
   SHIP_TO          = INARR<1,3>
   ORD.SHIP.TO    = INARR<1,4>
   TEMP.INDX      = INARR<1,5>   
   MAT ORD.DET.SUM    = ""
   MAT ORD.DET.INQ = ""
   RNO             = ""
   SHPNO = SHIP_TO

IF CONO = "" THEN ERRMSG = "SESSION EXPIRED";GOTO 91000
*** NULLIFY THE PROPERTIES
   STATUS = RBO.setProperty("","WARNINGARR","")
   STATUS = RBO.setProperty("","RETARR","")
   STATUS = RBO.setProperty("","DISPARR","")
   STATUS = RBO.setProperty("","GRIDARR","")
*** 
   SWAP "#" WITH VM IN ORD.SHIP.TO
   LOCATE SHPNO IN ORD.SHIP.TO<1>,1 SETTING SPTR ELSE 
      ERRMSG = "Cannot locate the current ship to # ":SHPNO;GOTO 91000
   END
   RNO = SPTR
   FOR X = 1 TO DCOUNT(ORD.SHIP.TO,VM) 
      TEMPORD_REC = FIELD(OSD_FULL_ARR,"¥",X,1)
      IF X = RNO THEN TEMPORD_REC = OSDARR
      IF TEMPORD_REC = "" THEN 
         MAT ORD.DET.REC = ""
      END ELSE
         MATPARSE ORD.DET.REC FROM TEMPORD_REC,"ð"
      END
      FOR P = 1 TO ORD.DET.REC.SIZE
        ORD.DET.SUM(P,X) = ORD.DET.REC(P)
      NEXT P
   NEXT X
   FOR X = 1 TO DCOUNT(ORD.SHIP.TO,VM)
      FOR P = 1 TO ORD.DET.REC.SIZE
        ORD.DET.REC(P) = ORD.DET.SUM(P,X) 
      NEXT P
      STATUS   = "L";SHPNO = ORD.SHIP.TO<1,X> 
      CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)
   NEXT X

   MATPARSE ORD.DET.REC FROM OSDARR,"ð"

   IF OSD.KIT<1,TEMP.INDX> = "M" THEN
      ERRMSG = "Cannot change a Product that is a member of a Kit"
      GOTO 91000
   END
   
   IF OSD.KIT<1,TEMP.INDX> = "K" THEN
      ERRMSG = "Cannot Distribute a Kitted Item"
      GOTO 91000
   END

   *FOR P = 1 TO ORD.DET.REC.SIZE
   *  ORD.DET.SUM(P,SPTR) = ORD.DET.REC(P)
   *NEXT P
   
   PDNO     = OSD.PROD<1,TEMP.INDX>
   WHNO     = OSD.WHSE<1,TEMP.INDX>
   UNPRC    = OSD.PRICE<1,TEMP.INDX>
   PROD.SEQ = OSD.PROD.SEQ<1,TEMP.INDX>
   PROD.KIT = OSD.KIT<1,TEMP.INDX>
   ERRMSG   = ""

   *STATUS   = "L";SHPNO = SHIP_TO 
   *CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)

*****vvvvvvvvvv***** start of order.line.ship
   OLD.SHPNO = SHPNO
   GEN.SHPNO = "000"
   TODAY = DATE()
   SHP.ID = CONO:ORD.CUST:"!"
   MAX.S.CNT = 20 ; *T20002
   PCNT = DCOUNT(ODQ.PROD,VM)
   IF PCNT < 1 THEN
      ERRMSG = "Cannot locate any products to distribute for this order"
      GOTO 91000
   END
   LOCATE GEN.SHPNO IN ORD.SHIP.TO<1>,1 SETTING SPTR ELSE
      ERRMSG = "Cannot locate the general Ship To for this order"
      GOTO 91000
   END
   SHPNO = GEN.SHPNO
   
   DST.QTY = ""; ORG.QTY = ""; ORD.QTY = ""; MIN.QTY = ""
   REFNO = ""; PDNOS = ""; WHNOS = ""; P = 1
   FOR P = 1 TO PCNT
      LOCATE ODQ.PROD<1,P> IN PDNOS<1>,1 SETTING PLOC ELSE
         PDNOS<1,PLOC> = ODQ.PROD<1,P>
      END
      LOCATE ODQ.WHSE<1,P> IN WHNOS<PLOC>,1 SETTING WLOC ELSE
         WHNOS<PLOC,WLOC> = ODQ.WHSE<1,P>
      END
      REFNO<PLOC,WLOC> = P
   NEXT P
   DISP_VAL = "";GRID_VAL = ""
   DISP_VAL<1,1>  = ORDNO
   DISP_VAL<1,2>  = ORD.CUST
   DISP_VAL<1,3>  = CUST.NAME
   
   IF PDNO # "" THEN
      ECD.RET.VALUE = PDNO; GOTO 110
   END ELSE
      WHNO = ""
   END
   
100*
   ERRMSG = "INPUT FOR PROD NUMBER IS REQUIRED"; GOTO 91000
110*
   LN = 1; LINES = 0; OLD.START.LINE = 0
   LOCATE PDNO IN PDNOS<1>,1 SETTING PLOC ELSE
      ERRMSG = "Cannot locate product (":PDNO:") for this order."
      GOTO 91000
   END
   MATREAD INV.REC FROM INVENTORY, CONO:PDNO ELSE
      ERRMSG = "Cannot locate Product # ":PDNO
      GOTO 91000
   END
   $INCLUDE ICSBP INV.UM.CNV
   DISP_VAL<1,4> = PDNO
   DISP_VAL<1,5> = INV.FULL.DESC
   *
   WCNT = DCOUNT(WHNOS<PLOC>,VM)
   BEGIN CASE
      CASE WCNT = 1
         ECD.RET.VALUE = WHNOS<PLOC,1>
         GOTO 210
      CASE WHNO # ""
         ECD.RET.VALUE = WHNO
         GOTO 210
   END CASE
   
200*
   ERRMSG = "INPUT FOR WAREHOUSE IS REQUIRED..."; GOTO 91000
210*
   WHNO = ECD.RET.VALUE
   DISP_VAL<1,6> = WHNO
   LOCATE WHNO IN WHNOS<PLOC>,1 SETTING WLOC ELSE
      ERRMSG = "Warehouse (":WHNO:") is not valid for product (":PDNO:") on this order"
      GOTO 91000
   END
   MATREAD IWH.REC FROM INV.WHSE, CONO:PDNO:"!":WHNO ELSE
      ERRMSG = "Cannot locate warehouse (":WHNO:") for product # ":PDNO
      GOTO 91000
   END
   PPTR = REFNO<PLOC,WLOC>
   DISP_VAL<1,7> = OCONV(INT(ODQ.G.QTY<1,PPTR> / ICR.DV1 * ICR.MT1 / ICR.DV2 + .5),ICR.CNV1)
   LINES = DCOUNT(ODQ.SHIP.TO<1,PPTR>,SVM)
   DST.QTY<PPTR> = ""; ORG.QTY<PPTR> = ""
   ORD.QTY<PPTR> = ""; MIN.QTY<PPTR> = ""
   ULINES = LINES + 1
   FOR P = 1 TO ORD.DET.REC.SIZE
      ORD.DET.REC(P) = ORD.DET.SUM(P,SPTR)
   NEXT P
   GOSUB 5100
   ALOC.QTY = OSD.A.QTY<1,P>; GEN.A.JOB = OSD.JOB<1,P>; GEN.A.QTY = OSD.JOB.QTY<1,P>
   UNAVL.QTY = ODQ.R.QTY<1,PPTR> + ODQ.S.QTY<1,PPTR>
   IF UNAVL.QTY > ODQ.G.QTY<1,PPTR> THEN UNAVL.QTY = ODQ.G.QTY<1,PPTR>
   IF LINES THEN
      FOR L = 1 TO LINES
         DST.QTY<PPTR,L> = 0; ORD.QTY<PPTR,L> = 0; MIN.QTY<PPTR,L> = 0
         LOCATE ODQ.SHIP.TO<1,PPTR,L> IN ORD.SHIP.TO<1>,1 SETTING S THEN
            FOR P = 1 TO ORD.DET.REC.SIZE
               ORD.DET.REC(P) = ORD.DET.SUM(P,S)
            NEXT P
            PTR = 1
            LOOP
               LOCATE PDNO IN OSD.PROD<1>,PTR SETTING P THEN
                  IF (OSD.WHSE<1,P> = WHNO) AND (OSD.PROD.SEQ<1,P> = PROD.SEQ) AND (OSD.KIT<1,P> = PROD.KIT) THEN
                     IF OSD.KIT<1,P> = "N" THEN
                        DST.QTY<PPTR,L> = OSD.G.QTY<1,P>
                        ORD.QTY<PPTR,L> = OSD.O.QTY<1,P>
                        MIN.QTY<PPTR,L> = OSD.R.QTY<1,P> + OSD.A.QTY<1,P> + OSD.S.QTY<1,P>
                     END ELSE
                        DST.QTY<PPTR,L> = OSD.KIT.G.QTY<1,P>
                        ORD.QTY<PPTR,L> = OSD.KIT.O.QTY<1,P>
                        MIN.QTY<PPTR,L> = OSD.KIT.R.QTY<1,P> + OSD.A.QTY<1,P> + OSD.S.QTY<1,P>
                     END
                     PTR = 0
                  END
               END
            WHILE PTR DO
               PTR = P + 1
            REPEAT
         END
      NEXT L
      ORG.QTY = DST.QTY
      DISP_VAL<1,8> = OCONV(INT(SUM(DST.QTY<PPTR>) / ICR.DV1 * ICR.MT1 / ICR.DV2 + .5),ICR.CNV1)
      IF UNAVL.QTY >= ODQ.G.QTY<1,PPTR> THEN
         ERRMSG = "No available quantity to distribute"
         GOTO 91000
      END
   END ELSE
      IF UNAVL.QTY >= ODQ.G.QTY<1,PPTR> THEN
         ERRMSG = "No available quantity to distribute"
         GOTO 91000
      END
   END
   GOSUB 7900
*****^^^^^^^^^***** end of order.line.ship
   STATUS = "D"
   CALL ORDER_LINE_UPD(CONO,ORDNO,SHPNO,STATUS)
   SCNT   = DCOUNT(ORD.SHIP.TO,VM)
   GOSUB 3200
   FOR P = 1 TO ORD.DET.REC.SIZE
     ORD.DET.REC(P) = ORD.DET.SUM(P,RNO)
   NEXT P
   MATBUILD OSDRecArr FROM ORD.DET.REC USING "ð"
   GOTO 93000
RETURN

5100*
   PTR = 1
   LOOP
      LOCATE PDNO IN OSD.PROD<1>,PTR SETTING P THEN
         IF WHNO = OSD.WHSE<1,P> THEN
            PTR = 0
         END
      END ELSE
         OSD.PROD<1,P> = PDNO
         OSD.WHSE<1,P> = WHNO
         OSD.G.QTY<1,P> = 0
         OSD.O.QTY<1,P> = 0
         OSD.R.QTY<1,P> = 0
         OSD.A.QTY<1,P> = 0
         OSD.F.QTY<1,P> = 0
         OSD.S.QTY<1,P> = 0
         OSD.I.QTY<1,P> = 0
         OSD.PRICE<1,P> = UNPRC
         OSD.COMMENT<1,P> = ""
         OSD.JOB<1,P> = ""
         OSD.JOB.QTY<1,P> = ""
         OSD.RECP.NO<1,P> = ""
         OSD.FI.QTY<1,P> = ""
         OSD.REL.NO<1,P> = ""
         OSD.REL.QTY<1,P> = ""
         OSD.P.QTY<1,P> = ""
         OSD.AMT<1,P> = 0
         OSD.KIT<1,P> = PROD.KIT
         OSD.KIT.O.QTY<1,P> = 0
         OSD.KIT.R.QTY<1,P> = 0
         OSD.KIT.A.QTY<1,P> = 0
         OSD.KIT.F.QTY<1,P> = 0
         OSD.KIT.S.QTY<1,P> = 0
         OSD.KIT.I.QTY<1,P> = 0
         OSD.KIT.G.QTY<1,P> = 0
         OSD.KIT.PRICE<1,P> = 0
         OSD.PROD.SEQ<1,P> = PROD.SEQ
         OSD.BOM.NUM<1,P>  = ""
         PTR = 0
      END
   WHILE PTR DO
      PTR = P + 1
   REPEAT
RETURN

7900*
   CNT = 1
   FOR N = 1 TO LINES
      MATREAD SPT.REC FROM SHIP.TO, SHP.ID:ODQ.SHIP.TO<1,PPTR,N> ELSE
         SPT.NAME = STR("?",30)
      END
      GRID_VAL<1,CNT,1> = ODQ.SHIP.TO<1,PPTR,N>
      GRID_VAL<1,CNT,2> = SPT.NAME
      GRID_VAL<1,CNT,3> = OCONV(INT(DST.QTY<PPTR,N> / ICR.DV1 * ICR.MT1 / ICR.DV2 + .5),ICR.CNV1)

*** GET THE MIN QTY FOR EACH ROW
      MINV = MIN.QTY<PPTR,N> + 0
      IF UNAVL.QTY > SUM(DST.QTY<PPTR>) THEN
        MAXV = ODQ.G.QTY<1,PPTR> - UNAVL.QTY
      END ELSE
        MAXV = ODQ.G.QTY<1,PPTR> - SUM(DST.QTY<PPTR>)
      END
      MAXV = MAXV + DST.QTY<PPTR,N>
      IF MINV > MAXV THEN MINV = MAXV
      MINV = INT(MINV / ICR.DV1 * ICR.MT1 / ICR.DV2 + .5)
      GRID_VAL<1,CNT,4> = MINV
***
      CNT = CNT + 1
   NEXT N
RETURN

3200:
***vv
   COMPARR = ""
   FOR X = 1 TO SCNT
      REC_ARR = ""
      FOR Z = 1 TO ORD.DET.REC.SIZE
         ORD.DET.REC(Z) = ORD.DET.SUM(Z,X)
      NEXT P
      MATBUILD REC_ARR FROM ORD.DET.REC USING "ð"
      IF COMPARR = "" THEN
         COMPARR = REC_ARR
      END ELSE
         COMPARR := "¥" : REC_ARR
      END 
   NEXT X
***^^
RETURN

93000*
   STATUS = RBO.setProperty("","WARNINGARR",COMPARR)
   STATUS = RBO.setProperty("","RETARR",OSDRecArr)
   STATUS = RBO.setProperty("","DISPARR",DISP_VAL)
   STATUS = RBO.setProperty("","GRIDARR",GRID_VAL)
RETURN

91000*
   STATUS = RBO.setProperty("","ServerStatus",1)
   STATUS = RBO.setProperty("","ServerMessage",ERRMSG)
RETURN
