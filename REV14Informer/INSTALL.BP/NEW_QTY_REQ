*
*   > COMMON STATEMENTS
*
**********************************************
* REVISION    - [11.0]
* Copyright 1995 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - SHERIDANBP
* PROGRAM     - EST.QTY.INSERT
* BY          - ct9; CBA
* DATE        - 11/18/1998
* DESCRIPTION -
*
*T23424 ct9 11/18/1998 * Create a phantom process to insert new estimate
*                        quantities and recalculate estimate costing
*                        data.
*ENDDOC
**********************************************
*   CPYLIBS
*COPY>JES.CPYLIB>SCOMMON.ESTIMATE
*COPY>JES.CPYLIB>JES.FILE.VARS
*COPY>CPYLIB>FILE.VARS
*COPY>JES.CPYLIB>ESTIMATOR
*COPY>JES.CPYLIB>ESTIMATE
*COPY>JES.CPYLIB>ESTIMATE.DIV
*COPY>JES.CPYLIB>ESTIMATE.RL
*COPY>JES.CPYLIB>ESTIMATE.RPT
*COPY>JES.CPYLIB>EST.DESC.CODE
*COPY>JES.CPYLIB>ESTIMATE.PAPER.GROUP
*COPY>PMC.CPYLIB>CUSTOMER
*COPY>PMC.CPYLIB>DIVISION
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>SALES.CODE
*COPY>PMC.CPYLIB>SALESMAN
*COPY>JCS.CPYLIB>JOB.CATEGORY
*COPY>JCS.CPYLIB>JOB
*COPY>CPYLIB>SCREEN.COM
*COPY>CPYLIB>GEN.XREF.SUB
*COPY>CPYLIB>TCC
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
MAT SYSCOM.REC =  ""; SYS.TYPE = 2
*
*   FILE OPENS
CALL EST.MAINT.OPEN
OPEN "ESTIMATE.DEPT" TO ESTIMATE.DEPT.BU ELSE ERRMSG="CANNOT OPEN ESTIMATE.DEPT FILE";GOSUB 90000;STOP
OPEN "ESTIMATE.WORK" TO ESTIMATE.WORK ELSE ERRMSG="CANNOT OPEN ESTIMATE.WORK FILE";GOSUB 90000;STOP
*OPEN "ESTIMATE.RL" TO ESTIMATE.RL ELSE ERRMSG="CANNOT OPEN ESTIMATE.RL FILE";GOSUB 90000;STOP
OPEN "ESTIMATE.RPT" TO ESTIMATE.RPT ELSE ERRMSG="CANNOT OPEN ESTIMATE.RPT FILE";GOSUB 90000;STOP
OPEN "CUST.EST.XREF" TO CUST.EST.XREF ELSE ERRMSG="CANNOT OPEN CUST.EST.XREF FILE";GOSUB 90000;STOP
OPEN "PROSPECT.EST.XREF" TO PROSPECT.EST.XREF ELSE ERRMSG="CANNOT OPEN PROSPECT.EST.XREF FILE";GOSUB 90000;STOP
OPEN "XREF.DATA" TO XREF.DATA ELSE ERRMSG = "CANNOT OPEN XREF.DATA FILE"; GOSUB 90000; STOP
*RED TASK 23424 (FOLLOWS)
OPEN "PRCL_EST_BASIS_REQS" TO PRCL_EST_BASIS_REQS ELSE ERRMSG = "CANNOT OPEN PRCL_EST_BASIS_REQS"; GOSUB 90000; STOP
OPEN "PRCL_EST_SETS" TO PRCL_EST_SETS ELSE ERRMSG = "CANNOT OPEN PRCL_EST_SETS"; GOSUB 90000; STOP
OPEN "PRCL_EST_BASIS" TO PRCL_EST_BASIS ELSE ERRMSG = "CANNOT OPEN PRCL_EST_BASIS"; GOSUB 90000; STOP
OPEN "PRCL_EST_TRANSFER" TO PRCL_EST_TRANSFER ELSE ERRMSTG = "CANNOT OPEN PRCL_EST_TRANSFER"; GOSUB 90000 ; STOP
*RED TASK 23424 (ABOVE)
STMNT = 'SSELECT COMPANY'
EXECUTE STMNT RTNLIST CONOS CAPTURING GARBAGE
CDONE=0
LOOP
  READNEXT CONO FROM CONOS ELSE CDONE = 1
* CRT "Processing CONO = ":CONO
UNTIL CDONE DO
****
*
*   INITIALIZATION SECTION
  READV MAX FROM CONTROL, CONO:"PRCL",1 ELSE MAX = 20
* WRITEV "1" ON CONTROL, "PRCL",2
*
*   BODY OF PROGRAM SECTION
* PRUN=1
  TDONE=0
  LOOP
  * CRT@(-1)
*   READV PRUN FROM CONTROL, CONO:'PRCL',2 ELSE DONE=0
*   READV PRCL.SLEEP.INTERVAL FROM CONTROL, CONO:'PRCL',3 ELSE PRCL.SLEEP.INTERVAL = 300
* UNTIL NOT(PRUN) DO
  UNTIL TDONE DO
    STMNT = 'SELECT PRCL_EST_BASIS_REQS WITH cono = "':CONO:'" AND WITH status = "R"'
DEBUG
    PERFORM STMNT CAPTURING GARBAGE
    TEMP=''
    TDONE=0
    LOOP
      READNEXT ITEM ELSE TDONE=1
    UNTIL TDONE DO
*
      TEMP<-1>=ITEM
*
    REPEAT
    REQS=TEMP
******
    IF REQS THEN
      STMNT = 'SELECT ESTIMATE WITH EST_CONO = "':CONO:'" AND WITH EST_PRICELIST = "Y"'
      PERFORM STMNT CAPTURING GARBAGE
      TEMP=''
      TDONE=0
      LOOP
        READNEXT ITEM ELSE TDONE=1
      UNTIL TDONE DO
  *
        TEMP<-1>=ITEM
  *
      REPEAT
      ESTIDS = TEMP
    END ELSE
      ESTIDS=''
    END
  * CRT@(0,10):@(-3):"REQS:":REQS
  * CRT@(0,11):@(-3):"ESTIDS:":ESTIDS:;INPUT PAUSE
    IF REQS AND ESTIDS THEN
      NO.ESTS=DCOUNT(ESTIDS,@AM)
      NO.REQS=DCOUNT(REQS,@AM)
* MARK QUANTITIES AS 'IN-PROCESS'
      FOR I = 1 TO NO.REQS
        WRITEV "I" ON PRCL_EST_BASIS_REQS, REQS<I>,1
      NEXT I
* INSERT NEW QTYS INTO PRCL_EST_BASIS AND PRCL_EST_SETS COUNT
*
      QI.CNT=0 ; QI.DONE=0
      LOOP
        QI.CNT+=1
      UNTIL QI.CNT > NO.REQS DO
*
        QTI = REQS<QI.CNT>[4,99]
        SET.CNT=0 ; SC.DONE=0
        LOOP
          SET.CNT+=1
        UNTIL SC.DONE DO
 *
          SET_ID = STR("0",2-LEN(SET.CNT)):SET.CNT
        * CRT@(0,5):"Attempt read on PRCL_EST_SETS ":CONO:SET_ID:;INPUT PAUSE:
*       READ PES_TEST FROM PRCL_EST_SETS, CONO:SET_ID THEN
          READ PES_TEST FROM PRCL_EST_SETS, CONO:SET_ID ELSE
            PES_TEST = 1
          END
        * CRT@(0,6):"Result of read (compared to MAX) :":PES_TEST:;INPUT PAUSE:
          IF PES_TEST<1> < MAX THEN
            READ PEB_REC FROM PRCL_EST_BASIS, CONO:QTI:"*":SET_ID THEN
              SC.DONE = 1 ;* FOUND THE SET THAT HIS QUANTITY GOES TO
            END ELSE
              PEB_REC='';PEB_REC<1>=QTI;PEB_REC<2>=SET_ID
              WRITE PEB_REC ON PRCL_EST_BASIS,CONO:QTI:"*":SET_ID
              PES_TEST<1>+=1 ; WRITE PES_TEST ON PRCL_EST_SETS, CONO:SET_ID
              SC.DONE=1
            END
          END
*       END
 *
        REPEAT
*
      REPEAT
******
*
      EST.CNT=0 ; REQ.CNT=0
      EDONE=0
      LOOP
        EST.CNT=0
        REQ.CNT = REQ.CNT + 1
      UNTIL REQ.CNT > NO.REQS DO
   *
        LOOP
          EST.CNT+=1
        UNTIL EST.CNT > NO.ESTS DO
     *
          FSI.CNT=0 ; FSI.DONE=0
          LOOP
            FSI.CNT += 1
          UNTIL FSI.DONE DO
            SET_ID = STR("0",2-LEN(FSI.CNT)):FSI.CNT
            READ TEST FROM PRCL_EST_BASIS,REQS<REQ.CNT>:"*":SET_ID THEN
            * CRT@(0,17):@(-3):"Quantity will be inserted into set id ":SET_ID:;INPUT PAUSE:
              FSI.DONE=1
              EXIT ;* FOUND THE SET_ID RECORD TO ADD THE QTY TO
            END
          REPEAT
          EST.ID = ESTIDS<EST.CNT>[4,99]
          EST.ID = FIELD(EST.ID,'-',1)
        * CRT@(0,18):@(-3):"Using Set ID :":SET_ID:"   Estimate:":EST.ID
          MATREADU EST.REC FROM ESTIMATE, CONO: EST.ID:"-":SET_ID THEN
          * CRT@(30,10):@(-3):"Got estimate ":EST.ID:"-":SET_ID:;INPUT PAUSE:
            CALL EST.UPDATE(CONO,"C",EST.ID:"-":SET_ID,EST.ID:"-":SET_ID,ESTIMATE.DEPT.BU,ESTIMATE.DEPT)
          END ELSE
         * NEED TO CREATE NEW SET FOR NEW QTY
            GOSUB 10000 ; * CREATE NEW SET FOR NEW QTY
            CALL EST.UPDATE(CONO,"C",EST.ID:"-01",EST.ID:"-":SET_ID,ESTIMATE.DEPT.BU,ESTIMATE.DEPT)
          END
        * CRT@(0,19):@(-3):EST.QTY
        * CRT@(0,20):@(-3):REQS<REQ.CNT>
          LOCATE(REQS<REQ.CNT>[4,99],EST.QTY,1;LOC;'AR') ELSE
          * CRT@(0,21):@(-3):LOC
            EST.KEY = EST.ID:"-":SET_ID
            EST.QTY = INSERT(EST.QTY,1,LOC;REQS<REQ.CNT>[4,99])
          * CRT@(0,21):@(-3):EST.QTY
            EST.FINAL.PRICE = INSERT(EST.FINAL.PRICE,1,LOC;"")
            DCCNT=DCOUNT(EST.DEPT.COMP,@VM)
            FOR DCPTR=1 TO DCCNT
              ESTD.ID=EST.DEPT.COMP<1,DCPTR>
              DPTR=FIELD(ESTD.ID,"!",1)
              CPTR=FIELD(ESTD.ID,"!",2)
              EQTY=FIELD(ESTD.ID,"!",3)
              OPT2="Ex" ;* USE THE "ESTIMATE STANDARDS" OPTION FOR RECALC
              ;* 'x' TELLS SUBROUTINE TO NOT CRT MESSAGES
              CALL EST.QTY.CALC (CONO,OPT2,EST.KEY,DPTR,CPTR,EQTY)
            * CRT@(0,22):@(-3):EST.QTY:;INPUT PAUSE
            NEXT DCPTR
*
            GOSUB 25000
            GOSUB 25500
            GOSUB 26000
*
            MATWRITE EST.REC ON ESTIMATE, CONO: EST.ID:"-":SET_ID
            CALL EST.UPDATE(CONO,"F",'',EST.ID:"-":SET_ID,ESTIMATE.DEPT.BU,ESTIMATE.DEPT)
            WRITE DATE() ON PRCL_EST_TRANSFER, CONO:EST.ID:"-":SET_ID
          END
        REPEAT
      REPEAT
    END
  REPEAT
* MARK QUANTITIES AS 'COMPLETE'
  FOR I = 1 TO NO.REQS
    READ TESTREC FROM PRCL_EST_BASIS_REQS, REQS<I> THEN
      WRITE "T" ON PRCL_EST_BASIS_REQS, REQS<I>
    END
  NEXT I
REPEAT
*
STOP
*
10000  *   CREATE NEW  ESTIMATE SET FOR INSERTING QTY
*
MATREAD EST.REC FROM ESTIMATE, CONO: EST.ID:"-01" THEN
  EST.QTY = EST.QTY<1,1> ;* GET ONLY THE FIRST ESTIMATE QTY
  EST.FINAL.PRICE = EST.FINAL.PRICE<1,1> ;* GET ONLY THE FIRST FINAL PRICE
 * EVERYTHING ELSE IS CLONED FOR THE NEW SET
END
*
RETURN
******
*---- DELETE UNUSED QUANTITIES
*
25000*
DC=COUNT(EST.DEPT.COMP,VM)+(EST.DEPT.COMP#"")
FOR DP=DC TO 1 STEP -1
  ESTD.ID=EST.DEPT.COMP<1,DP>
  QTY=FIELD(ESTD.ID,"!",3)
  LOCATE QTY IN EST.QTY<1>,1 SETTING P ELSE
    DELETE ESTIMATE.DEPT,CONO:EST.KEY:"!":ESTD.ID
    DEL EST.DEPT.COMP<1,DP>
    DEL EST.DEPT.COMP.HRS<1,DP>
    DEL EST.DEPT.COMP.DCOST<1,DP>
    DEL EST.DEPT.COMP.COST<1,DP>
    DEL EST.DEPT.COMP.SALE<1,DP>
    DEL EST.DEPT.COMP.TSALE<1,DP>
  END
NEXT DP
*
*---- GENERATE ADDITIONAL QUANTITY DATA
*
CALL EST.QTY.GEN (CONO,"A",EST.KEY,"ALL")
*
*---- CALCULATE COST PER ADDITIONAL THOUSAND
*
*TOTAL.VSALE=""
*TOTAL.VCOST=""
*DC=COUNT(EST.DEPT.COMP,VM)+(EST.DEPT.COMP#"")
*FOR DP=1 TO DC
*  ESTD.ID=EST.DEPT.COMP<1,DP>
*  QTY=FIELD(ESTD.ID,"!",3)
*  LOCATE QTY IN EST.QTY<1>,1 SETTING P ELSE P=0
*  IF P > 0 THEN
*    TOTAL.VSALE<1,P>=TOTAL.VSALE<1,P>+EST.DEPT.COMP.VSALE<1,DP>
*    TOTAL.VCOST<1,P>=TOTAL.VCOST<1,P>+EST.DEPT.COMP.VCOST<1,DP>
*  END
*NEXT DP
*ECNT=COUNT(EST.QTY,VM)+1
*EST.PRICE.THOU=""
*FOR EP=1 TO ECNT
*  EST.PRICE.THOU<1,EP>=INT(TOTAL.VSALE<1,EP>/(EST.QTY<1,EP>/1000)+0.5)
*  EST.COST.THOU<1,EP>=INT(TOTAL.VCOST<1,EP>/(EST.QTY<1,EP>/1000)+0.5)
*NEXT EP
RETURN
*
25500 *
*
CALL EST.QTY.GEN (CONO,"A",EST.KEY,"ALL")
EST.OM.PCT = '000000'
EST.FINAL.PRICE = ''
EST.PRICE.THOU = ''
EST.COST.THOU = ''
EST.PRT.PRICE.THOU = ''
EST.OM.PRICE.M = ''
EST.PRT.PRICE.UOM = ''
EST.PRICE.UOM = ''
TOTAL.TCOST = ''
TOTAL.VCOST = ''
TOTAL.FCOST = ''
TOTAL.TSALE = ''
TOTAL.VSALE = ''
TOTAL.FSALE = ''
QC = DCOUNT(EST.QTY,VM)
DC=COUNT(EST.DEPT.COMP,VM)+(EST.DEPT.COMP#"")
*      DC = DCOUNT(EST.DEPT.COMP,VM)
FOR DP = 1 TO DC
  ESTD.ID=EST.DEPT.COMP<1,DP>
  EQTY=FIELD(ESTD.ID,"!",3)
*         EQTY = FIELD(EST.DEPT.COMP<1,DP>,"!",3)
  LOCATE EQTY IN EST.QTY<1>,1 SETTING EP THEN
    TOTAL.TCOST<1,EP>=TOTAL.TCOST<1,EP>+EST.DEPT.COMP.COST<1,DP>
    TOTAL.VCOST<1,EP>=TOTAL.VCOST<1,EP>+EST.DEPT.COMP.VCOST<1,DP>
    TOTAL.FCOST<1,EP>=TOTAL.TCOST<1,EP>-TOTAL.VCOST<1,EP>
    TOTAL.TSALE<1,EP>=TOTAL.TSALE<1,EP>+EST.DEPT.COMP.TSALE<1,DP>
    TOTAL.VSALE<1,EP>=TOTAL.VSALE<1,EP>+EST.DEPT.COMP.VSALE<1,DP>
    TOTAL.FSALE<1,EP>=TOTAL.TSALE<1,EP>-TOTAL.VSALE<1,EP>
  END
NEXT DP
EST.PRT.PRICE.THOU = 'Y'
EST.PRT.PRICE.UOM = 'M'
ECNT=COUNT(EST.QTY,VM)+1
FOR EP = 1 TO ECNT
  EST.OM.PCT<1,EP> = '000000'
  EST.FINAL.PRICE<1,EP> = TOTAL.TSALE<1,EP>
  EST.PRICE.THOU<1,EP>=INT(TOTAL.VSALE<1,EP>/(EST.QTY<1,EP>/1000)+0.5)
  EST.COST.THOU<1,EP>=INT(TOTAL.VCOST<1,EP>/(EST.QTY<1,EP>/1000)+0.5)
  EST.OM.PRICE.M<1,EP> = INT(EST.FINAL.PRICE<1,EP> / EST.QTY<1,EP> * 1000 + .5)
  EST.PRICE.UOM<1,EP> = EST.OM.PRICE.M<1,EP>
NEXT EP
RETURN
*
*---- CALCULATE OTHER MARKUP PERCENT BASED ON FINAL PRICE
*
26000 *
CALL EST.QTY.GEN (CONO,"A",EST.KEY,"ALL")
EST.OM.PCT = ''
EST.PRICE.THOU = ''
EST.COST.THOU = ''
EST.OM.PRICE.M = ''
TOTAL.TCOST = ''
TOTAL.VCOST = ''
TOTAL.FCOST = ''
TOTAL.TSALE = ''
TOTAL.VSALE = ''
TOTAL.FSALE = ''
QC = DCOUNT(EST.QTY,VM)
DC=COUNT(EST.DEPT.COMP,VM)+(EST.DEPT.COMP#"")
*      DC = DCOUNT(EST.DEPT.COMP,VM)
FOR DP = 1 TO DC
  ESTD.ID=EST.DEPT.COMP<1,DP>
  EQTY=FIELD(ESTD.ID,"!",3)
*         EQTY = FIELD(EST.DEPT.COMP<1,DP>,"!",3)
  LOCATE EQTY IN EST.QTY<1>,1 SETTING EP THEN
    TOTAL.TCOST<1,EP>=TOTAL.TCOST<1,EP>+EST.DEPT.COMP.COST<1,DP>
    TOTAL.VCOST<1,EP>=TOTAL.VCOST<1,EP>+EST.DEPT.COMP.VCOST<1,DP>
    TOTAL.FCOST<1,EP>=TOTAL.TCOST<1,EP>-TOTAL.VCOST<1,EP>
    TOTAL.TSALE<1,EP>=TOTAL.TSALE<1,EP>+EST.DEPT.COMP.TSALE<1,DP>
    TOTAL.VSALE<1,EP>=TOTAL.VSALE<1,EP>+EST.DEPT.COMP.VSALE<1,DP>
    TOTAL.FSALE<1,EP>=TOTAL.TSALE<1,EP>-TOTAL.VSALE<1,EP>
  END
NEXT DP
ECNT=COUNT(EST.QTY,VM)+1
FOR EP = 1 TO ECNT
* Need to setup final price if new qty added.
  IF (EST.FINAL.PRICE<1,EP> + 0 = 0) OR (EST.OM.ENTERED # 'Y') THEN
    EST.OM.PCT<1,EP> = '000000'
    EST.FINAL.PRICE<1,EP> = TOTAL.TSALE<1,EP>
    EST.PRICE.THOU<1,EP>=INT(TOTAL.VSALE<1,EP>/(EST.QTY<1,EP>/1000)+0.5)
    EST.COST.THOU<1,EP>=INT(TOTAL.VCOST<1,EP>/(EST.QTY<1,EP>/1000)+0.5)
    EST.OM.PRICE.M<1,EP> = INT(EST.FINAL.PRICE<1,EP> / EST.QTY<1,EP> * 1000 + .5)
    EST.PRICE.UOM<1,EP> = ''
    GOSUB 26500
  END ELSE
    IF TOTAL.TSALE<1,EP> = "" OR TOTAL.TSALE<1,EP> = 0 THEN
      TOTTSALE = 1   ;* FIX DIVDE BY 0 ERRORS
    END ELSE
      TOTTSALE = TOTAL.TSALE<1,EP>
    END
    EST.OM.PCT<1,EP> = INT(((EST.FINAL.PRICE<1,EP> - TOTAL.TSALE<1,EP>) / TOTTSALE) * 1000000 + .5)
    PRICE.THOU.MKUP = TOTAL.VSALE<1,EP> + (INT(OCONV(TOTAL.VSALE<1,EP>,'MD2') * OCONV(EST.OM.PCT<1,EP>,'MD4') + .005 / 100))
    EST.PRICE.THOU<1,EP>=INT(PRICE.THOU.MKUP/(EST.QTY<1,EP>/1000)+0.5)
    EST.COST.THOU<1,EP>=INT(TOTAL.VCOST<1,EP>/(EST.QTY<1,EP>/1000)+0.5)
    EST.OM.PRICE.M<1,EP> = INT(EST.FINAL.PRICE<1,EP> / EST.QTY<1,EP> * 1000 + .5)
    EST.PRICE.UOM<1,EP> = ''
    GOSUB 26500
  END
NEXT EP
RETURN
*
*---- Calculate Price per UOM
*
26500 *
BEGIN CASE
  CASE EST.PRT.PRICE.UOM = 'EA'
*            EST.PRICE.UOM<1,EP> = INT(EST.FINAL.PRICE<1,EP> / EST.QTY<1,EP> + .5)
    EST.PRICE.UOM<1,EP> = INT(EST.FINAL.PRICE<1,EP> / EST.QTY<1,EP> * 100 + .5)
  CASE EST.PRT.PRICE.UOM = 'MSF'
    WIDTH = EST.PROD.TS.WIDTH<1,1,1>
    XXLENGTH = EST.PROD.TS.LENGTH<1,1,1>
    PGS=EST.PROD.PG.CNT<1,1,1>
*      SQ.FT=INT(WIDTH/10000 * XXLENGTH/10000 / 144 * PGS * 100 + 0.99)
    SQ.FT=OCONV(WIDTH,'MD4') * OCONV(XXLENGTH,'MD4') / 144 * PGS
    EST.PRICE.UOM<1,EP> = INT(OCONV(EST.FINAL.PRICE<1,EP>,'MD2') / (EST.QTY<1,EP> * SQ.FT / 1000) * 100 + .5)
  CASE EST.PRT.PRICE.UOM = 'CWT'
    PROD.QTY = EST.QTY<1,EP>
    TOT.WGT = 0
    FOR C = 1 TO EST.COMPONENT.CNT
      IF EST.PROD.OS.TYPE<1,C> = "" THEN GOTO 26590
      IF EST.PROD.OS.TYPE<1,C> # "S" THEN
        MATREAD EQUIPMENT.REC FROM EQUIPMENT, CONO:EST.PROD.PRESS.ID<1,C> ELSE
          ERRMSG = "Invalid press ID - ":EST.PROD.PRESS.ID<1,C>
          GOSUB 90000
          GOTO 26590
        END
      END
      WEB.CNT = EST.PROD.WEB.CNT<1,C>+0
      IF WEB.CNT = 0 THEN WEB.CNT = 1
      FOR MPTR = 1 TO WEB.CNT
        MATREAD ESTPG.REC FROM ESTIMATE.PAPER.GROUP, CONO:EST.PROD.OS.USAGE<1,C,MPTR> ELSE
          ERRMSG = "Invalid paper group"
          GOSUB 90000
          GOTO 26580
        END
        BW = EST.PROD.BASIS.WT<1,C,MPTR>
        BSW = ESTPG.WIDTH/10000
        BSL = ESTPG.LENGTH/10000
        PSW = EST.PROD.PS.WIDTH<1,C,MPTR>/10000
        IF EST.PROD.OS.TYPE<1,C> = "S" THEN
          MAT EQUIPMENT.REC = ""
          PSL = EST.PROD.PS.LENGTH<1,C,MPTR>/10000
        END ELSE
          PSL = EQP.PRESS.CUTOFF.LEN/10000
        END
        M.WEIGHT = 2 * BW * (PSW * PSL) / (BSW * BSL)
        M.WEIGHT = INT(M.WEIGHT * 100 + 0.5) / 100
*
        NUMBER.UP = EST.PROD.NO.UP<1,C,1>+0
        IF NUMBER.UP = 0 THEN NUMBER.UP = 1
*
        FORMS = EST.PROD.FORMS<1,C,1>+0
        IF FORMS = 0 THEN FORMS = 1
*
**           NUMBER.SHEETS = EST.PROD.FIN.NO.SHT<1,C,1>+0
**           IF NUMBER.SHEETS = 0 THEN NUMBER.SHEETS = '10000'
*
**           TOT.SHT = PROD.QTY * OCONV(NUMBER.SHEETS,'MD4')
*
**           FSL = EST.PROD.TS.LENGTH<1,C,MPTR>/10000
**           FSW = EST.PROD.TS.WIDTH<1,C,MPTR>/10000
**           F.WEIGHT = (M.WEIGHT * FSL * FSW) / (PSL * PSW)
**           TOT.WGT = TOT.WGT + (TOT.SHT / 1000 * F.WEIGHT)
        TOT.SHT = INT(PROD.QTY / NUMBER.UP * FORMS + 0.99)
        TOT.WGT = TOT.WGT + (TOT.SHT / 1000 * M.WEIGHT)
26580 NEXT MPTR
26590 NEXT C
    EST.PRICE.UOM<1,EP> = INT(EST.FINAL.PRICE<1,EP> / (TOT.WGT / 100))
  CASE EST.PRT.PRICE.UOM = 'M'
    EST.PRICE.UOM<1,EP> = EST.OM.PRICE.M<1,EP>
END CASE
RETURN
*
*   STANDARD SUBROUTINES
*
90000 * NEED LOGIC HERE TO WRITE PHANTOM PROCESSOR ERRORS?
*
* CRT ERRMSG:;INPUT PAUSE
*
RETURN
******
91000 *
* 91000 PRINT @(0,23):ERRMSG:CL:
* INPUT XX:
* PRINT @(0,23):CL:
RETURN
99999 RETURN
