*********************************************************************
*
* PROGRAM  - SISDTM
*
*T23359 rik 01/05/1999 * ADD the WIP tracking system to Base with
*                        modifications. PRINTING: the print queue will
*                        be determined by the network and station id of
*                        the Shop Floor Terminal requesting the Barcode
*                        label. CREATE PALLET TRANS: The pallet number
*                        will now be assigned, sequentially, by the
*                        system. The Pallet's barcode label will then
*                        print. UPDATE PALLET TRANS: Will maintain a
*                        cross-ref of TO-JOB, and will update the
*                        TO-OPER (cctr) field.
* SISTRN_CCTR = TRN.WT.CCTR
* SISTRN_WIP_TOWCTR = TRN.TO.OPER
* SISTRN_JOB = TRN.WT.JOB
* SISTN_WIP_PTYPE (not in CPYLIB) = TRN.PTYPE is not used ??? temporarily set it to blank
* IDATE = TRN.TDATE
* ITIME = TRN.TTIME
* SISTRN_SERVER = TRN.PNP.ID
* SISTRN_CLIENT = TRN.TERM.ID
* SISTRN_EMP = TRN.WT.EMP (no capturing of WT employee @ SFIS).
*
* TRN.PERTS. fileds are not utilized (commented out).
*********************************************************************
*
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>EMPLOYEE
*COPY>JCS.CPYLIB>JOB.CUTOFF.NO
*COPY>JCS.CPYLIB>JOB
*COPY>JCS.CPYLIB>OPERATION
*COPY>JCS.CPYLIB>DEPT.SPOOL.TABLE
*COPY>JCS.CPYLIB>DAILY.TIME.MATL
*COPY>JCS.CPYLIB>DAILY.MATL
*COPY>ICS.CPYLIB>ROLL.SKID.INFO
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>CPYLIB>CHAR
*COPY>SIS.CPYLIB>SISMSG
*COPY>SIS.CPYLIB>SIS_TRANS
*COPY>SIS.CPYLIB>SIS_LOG
*T23359 v
*COPY>WTR.CPYLIB>WIP.TRACK.PALLET
*COPY>WTR.CPYLIB>WIP.TRACK.CONTROL
*COPY>WTR.CPYLIB>WIPT.PRINT.QUEUE
*COPY>PMC.CPYLIB>CUSTOMER
*COPY>PMC.CPYLIB>VEND
*
   SISTRN_WIP_PTYPE = ""
*T23359 ^
*
*---- PRE-INITIALIZATION
*
   PROMPT ""
   PROCREAD PARAM ELSE PARAM = ""
   BEGIN CASE
      CASE PARAM<1> = "T"
         RMODE = "T"
      CASE PARAM<1> = "BATCH"
         RMODE = "BATCH"
      CASE @USER.TYPE = 1
         RMODE = "PHANTOM"
      CASE 1
         STOP
   END CASE
   BEGIN CASE
      CASE PARAM<2> = "SINGLE_PASS"
         SINGLE_MODE = 1
      CASE 1
         SINGLE_MODE = 0
   END CASE
*
*---- OPEN ALL FILES
*
   OPEN "","SIS_CONTROL" TO SIS_CONTROL ELSE
      ERRMSG = "CANNOT OPEN SIS_CONTROL FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","SIS_INPUT" TO SIS_INPUT ELSE
      ERRMSG = "CANNOT OPEN SIS_INPUT FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","SIS_OUTPUT" TO SIS_OUTPUT ELSE
      ERRMSG = "CANNOT OPEN SIS_OUTPUT FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","SIS_TRANS" TO SIS_TRANS ELSE
      ERRMSG = "CANNOT OPEN SIS_TRANS FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","SIS_LOG" TO SIS_LOG ELSE
      ERRMSG = "CANNOT OPEN SIS_LOG FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","CONTROL" TO CONTROL ELSE
      ERRMSG = "CANNOT LOCATE CONTROL FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","COMPANY" TO COMPANY ELSE
      ERRMSG = "CANNOT LOCATE COMPANY FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","OPERATION" TO OPERATION ELSE
      ERRMSG = "CANNOT LOCATE OPERATION FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","JOB" TO JOB ELSE
      ERRMSG = "CANNOT LOCATE JOB FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","DEPT.SPOOL.TABLE" TO DEPT.SPOOL.TABLE ELSE
      ERRMSG = "CANNOT OPEN DEPT.SPOOL.TABLE FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","EMPLOYEE" TO EMPLOYEE ELSE
      ERRMSG = "CANNOT OPEN EMPLOYEE FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","INVENTORY" TO INVENTORY ELSE
      ERRMSG = "CANNOT LOCATE INVENTORY FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","INV.WHSE" TO INV.WHSE ELSE
      ERRMSG = "CANNOT LOCATE INV.WHSE FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE
      ERRMSG = "CANNOT LOCATE INV.WHSE.LOC FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","DAILY.TIME.MATL" TO DAILY.TIME.MATL ELSE
      ERRMSG = "CANNOT LOCATE DAILY.TIME.MATL FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","DAILY.MATL" TO DAILY.MATL ELSE
      ERRMSG = "CANNOT LOCATE DAILY.MATL FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","ROLL.SKID.INFO" TO ROLL.SKID.INFO ELSE
      ERRMSG = "CANNOT LOCATE ROLL.SKID.INFO FILE"
      GOSUB 90000
      STOP
   END
   JTR.FLAG = 1
   OPEN "","JOB.TRANS" TO JOB.TRANS ELSE JTR.FLAG = 0
   PERTS.FLAG = 1
   OPEN "","PERTS.TRACK" TO PERTS.TRACK ELSE PERTS.FLAG = 0
*T23359 v
   OPEN "","WIP.TRACK.PALLET" TO WIP.TRACK.PALLET ELSE
      ERRMSG = "CANNOT LOCATE WIP.TRACK.PALLET FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","WIP.TRACK.CONTROL" TO WIP.TRACK.CONTROL ELSE
      ERRMSG = "CANNOT LOCATE WIP.TRACK.CONTROL FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","WIP.TRACK.LOC" TO WIP.TRACK.LOC ELSE
      ERRMSG = "CANNOT LOCATE WIP.TRACK.LOC FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","WIP.TRACK.HIST" TO WIP.TRACK.HIST ELSE
      ERRMSG = "CANNOT LOCATE WIP.TRACK.HIST FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","CUSTOMER" TO CUSTOMER ELSE
      ERRMSG = "CANNOT LOCATE CUSTOMER FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","VEND" TO VEND ELSE
      ERRMSG = "CANNOT LOCATE VEND FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","WIPT.PRINT.QUEUE" TO WIPT.PRINT.QUEUE ELSE
      ERRMSG = "CANNOT LOCATE WIPT.PRINT.QUEUE FILE"
      GOSUB 90000
      STOP
   END
*T23359 ^
*
*---- INITIALIZATION
*
   DASHES = STR("-",80)
   KILL_PROCESS = 0
   REC_COUNT = -1
   SIS_STMT = "SSELECT SIS_INPUT BY ITEM"
   CONO = ""
   SKIP_TRN = 0
*T23359v
   ESC = CHAR(27)
*T23359^
*
   KILL_PROCESS = 1
   FOR I = 1 TO 5 WHILE KILL_PROCESS
      READU TREC FROM SIS_CONTROL, "MSG_LOCK" THEN
         KILL_PROCESS = 0
      END LOCKED
         KILL_PROCESS = 1
      END ELSE
         KILL_PROCESS = 0
      END
   NEXT I
   IF KILL_PROCESS THEN GOTO 99999
   KILL_PROCESS = 0
   GOSUB 2000
   TREC = "LAST STARTED ON ":OCONV(CDATE,"D2/"):" AT ":OCONV(CTIME,"MTS")
   WRITEU TREC ON SIS_CONTROL, "MSG_LOCK"
*
   READU TREC FROM SIS_CONTROL, "MSG_CNTL" ELSE TREC = ""
   TREC = ""
   TREC<2> = "STARTED ON ":OCONV(CDATE,"D2/"):" AT ":OCONV(CTIME,"MTS")
   TREC<3> = RMODE
   WRITE TREC ON SIS_CONTROL, "MSG_CNTL"
*
   IF RMODE # "PHANTOM" THEN
      SLINE = CS
      SLINE = SLINE:@(0,0):"PRIMAC"
      SLINE = SLINE:@(20,0):"Shop Floor Information System Message Server"
      SLINE = SLINE:@(72,0):OCONV(CDATE,"D2/")
      SLINE = SLINE:@(0,1):DASHES
      SLINE = SLINE:@(0,20):DASHES
      SLINE = SLINE:@(0,22):DASHES
      CRT SLINE:
   END
*
*---- PROCESSING
*
   LOOP
      BEGIN CASE
         CASE KILL_PROCESS
         CASE REC_COUNT = 0
            SLEEP 5
            GOSUB 1000
         CASE 1
            REC_COUNT = 0
            GOSUB 1000
      END CASE
   UNTIL KILL_PROCESS DO
      IF RMODE # "PHANTOM" THEN
         CRT @(0,10):CL:"SELECTING SIS_INPUT FILE":
      END
*     SELECT SIS_INPUT
      UDTEXECUTE SIS_STMT CAPTURING SCREENDATA
      DONE = 0
      LOOP
         GOSUB 1000
         IF KILL_PROCESS THEN
            DONE = 1
         END ELSE
            READNEXT ID ELSE DONE = 1
         END
      UNTIL DONE DO
         REC_COUNT += 1
         IF RMODE # "PHANTOM" THEN
            CRT @(0,10):CL:"PROCESSING MESSAGE ":ID
         END
         GOSUB 2000
         CURR_DATE = CDATE
         CURR_TIME = CTIME
*        CURR_STAMP = OCONV(CDATE, "D2/") "L#8 " : OCONV(CTIME, "MTS:")
         MATREADU SISMSG_REC FROM SIS_INPUT, ID THEN
* PROCESS FOUND RECORD
            GOSUB 4000
            IF SKIP_TRN THEN
               RELEASE SIS_INPUT, ID
            END ELSE
               GOSUB 3000
               DELETE SIS_INPUT, ID
            END
         END LOCKED
* SKIP LOCKED RECORD (Multi SISMSG Process ???!!!)
         END ELSE
* Record Not Found
            MAT SISMSG_REC = ""
            SISMSG_SERVER = FIELD(ID,"!",1)
            SISMSG_MESSAGE = ID
            SISMSG_ERROR = "LOST"
            GOSUB 3000
            RELEASE SIS_INPUT, ID
         END
      REPEAT
      IF KILL_PROCESS THEN GOTO 199
      IF SINGLE_MODE = 1 THEN
         IF REC_COUNT = 0 THEN
            KILL_PROCESS = 1
         END
      END
199*
   REPEAT
   GOSUB 2000
   READU TREC FROM SIS_CONTROL, "MSG_CNTL" ELSE TREC = ""
   TREC = ""
   TREC<2> = "STOPPED ON ":OCONV(CDATE,"D2/"):" AT ":OCONV(CTIME,"MTS")
   WRITE TREC ON SIS_CONTROL, "MSG_CNTL"
   GOTO 99999
*
*---- CHECK AND SETUP KILL_PROCESS
*
1000*
   IF KILL_PROCESS THEN RETURN
   READ TREC FROM SIS_CONTROL, "MSG_CNTL" ELSE TREC = ""
   IF TREC<1> = "STOP" THEN KILL_PROCESS = 1
   RETURN
*
*---- GET CURRENT TIMESTAMP
*
2000*
   CDATE = DATE()
   CTIME = TIME()
   IF CTIME < 10 THEN CDATE = DATE()
   RETURN
*
*---- WRITE SIS_OUTPUT
*
3000*
   SISMSG_PROCESSED = OCONV(CURR_DATE, "D/") "L#10 " : OCONV(CURR_TIME, "MTS:")
   SISMSG_ORGID = ID
   IF SISMSG_RECEIVED = "" THEN SISMSG_RECEIVED = SISMSG_PROCESSED
   READU SEQ_REC FROM SIS_CONTROL, "SVR_":SISMSG_SERVER ELSE SEQ_REC = ""
   IF CURR_DATE > SEQ_REC<1> THEN
      SEQ_REC = CURR_DATE
      SEQ_REC<2> = 0
   END
   NEWID = ""
   LOOP
      SEQ_REC<2> = SEQ_REC<2> + 1
      NEWID = SISMSG_SERVER :"!": CURR_DATE :"!": SEQ_REC<2>
      READU DUMMY FROM SIS_OUTPUT, NEWID THEN
         RELEASE SIS_OUTPUT, NEWID
         NEWID = ""
      END LOCKED
         NEWID = ""
      END ELSE
         MATWRITE SISMSG_REC ON SIS_OUTPUT, NEWID
      END
   WHILE NEWID = "" DO
   REPEAT
   WRITE SEQ_REC ON SIS_CONTROL, "SVR_":SISMSG_SERVER
   DUMMY = ""
   RETURN
*
*--- UPDATE DAILY.TIME.MATL
*
4000*
   SKIP_TRN = 0
   SORT_DTM = 0
   SISLOG_LOCKED = ""
   DTM_LOCKED = ""
   MATREADU SISTRN_REC FROM SIS_TRANS, ID THEN
      TOT_CHKSUM = 0
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_TRANSID)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_TIMESTMP)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_TTYPE)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_DIV)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_DEPT)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_CCTR)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_JOB)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_EMP)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_SHIFT)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_OPER)
*WY*  TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_UNITS)
      BEGIN CASE
         CASE SISTRN_UNITS = ""
            TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_UNITS)
         CASE ("X":SISTRN_UNITS) = "X0"
            TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_UNITS)
         CASE (SISTRN_UNITS/100) = INT(SISTRN_UNITS/100)
            TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(OCONV(SISTRN_UNITS, "MD2"))
         CASE (SISTRN_UNITS/10) = INT(SISTRN_UNITS/10)
            TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(OCONV(SISTRN_UNITS, "MD2"))
         CASE 1
            TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_UNITS/100)
      END CASE
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_COMPLETE)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_SPOILAGE)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_CLASS)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_TCODE)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_OT_CODE)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_BARCODE)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_PROD)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_WHSE)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_LOC)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_SKID)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_QTYPE)
      BEGIN CASE
         CASE SISTRN_QTY = ""
            TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_QTY)
         CASE ("X":SISTRN_QTY) = "X0"
            TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_QTY)
         CASE (SISTRN_QTY/1000) = INT(SISTRN_QTY/1000)
            TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(OCONV((SISTRN_QTY/10), "MD2"))
         CASE (SISTRN_QTY/10) = INT(SISTRN_QTY/10)
            TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(OCONV((SISTRN_QTY/10), "MD2"))
         CASE 1
            TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_QTY/1000)
      END CASE
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_COMMENTS)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_UPLOAD)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_CONO)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_SERVER)
      TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_CLIENT)
      JCNT = DCOUNT(SISTRN_MJ_JOB,VM)
      FOR JP = 1 TO JCNT
         TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_MJ_JOB<1,JP>)
      NEXT JP
      MCNT = DCOUNT(SISTRN_MP_PROD,VM)
      SCNT = DCOUNT(SISTRN_MP_SKID,VM)
      IF SCNT > MCNT THEN MCNT = SCNT
      FOR MP = 1 TO MCNT
         TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_MP_PROD<1,MP>)
         TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_MP_WHSE<1,MP>)
         TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_MP_LOC<1,MP>)
         TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_MP_SKID<1,MP>)
         TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_MP_QTYPE<1,MP>)
         BEGIN CASE
            CASE SISTRN_MP_QTY<1,MP> = ""
               TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_MP_QTY<1,MP>)
            CASE ("X": SISTRN_MP_QTY<1,MP>) = "X0"
               TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_MP_QTY<1,MP>)
            CASE (SISTRN_MP_QTY<1,MP>/1000) = INT(SISTRN_MP_QTY<1,MP>/1000)
               TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(OCONV((SISTRN_MP_QTY<1,MP>/10), "MD2"))
            CASE (SISTRN_MP_QTY<1,MP>/10) = INT(SISTRN_MP_QTY<1,MP>/10)
               TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(OCONV((SISTRN_MP_QTY<1,MP>/10), "MD2"))
            CASE 1
               TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_MP_QTY<1,MP>/1000)
         END CASE
      NEXT MP
      PCNT = DCOUNT(SISTRN_PRMPT.CODE,VM)
      FOR PP = 1 TO PCNT
         TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_PRMPT.CODE<1,PP>)
         TOT_CHKSUM = TOT_CHKSUM + CHECKSUM(SISTRN_PRMPT.RESP<1,PP>)
      NEXT PP
      TOT_CHKSUM = MOD(TOT_CHKSUM,32767);* INTEGER MAX NUMBER IS 32767
      IF SISMSG_CHECKSUM # TOT_CHKSUM THEN
         SISMSG_MESSAGE = TOT_CHKSUM
         SISMSG_ERROR = "CHECKSUM"
         GOTO 4099
      END
*  END LOCKED
*  RECORD SHOULD NOT BE LOCKED
   END ELSE
      SISMSG_MESSAGE = ID
      SISMSG_ERROR = "LOST"
      GOTO 4099
   END
*
*---- READ COMPANY RELATED INFO
   IF CONO # SISTRN_CONO THEN
      CONO = SISTRN_CONO
      READ DEPT.WHSE FROM CONTROL, CONO:"DEPT.WHSE" ELSE
         DEPT.WHSE = ""
      END
      READ PRODUCTION.REC FROM CONTROL, CONO:"PRODUCTION.WEEKS" ELSE
         PRODUCTION.REC = ""
      END
      READ RL.SK.CONTROL FROM CONTROL, CONO:"RL.SK.CONTROL" ELSE
         RL.SK.CONTROL = ""
      END
      MATREAD JOB.CUTOFF.REC FROM CONTROL, CONO:"JOB.CUTOFF.NO" ELSE
         MAT JOB.CUTOFF.REC = ""
         J.CUTOFF.NUM = 0
      END
      MATREAD COMP.REC FROM COMPANY, CONO ELSE
         MAT COMP.REC = ""
      END
*T23359 v
      READ WIP.TRACKING FROM CONTROL,CONO:'WIP.TRACKING' ELSE
         WIP.TRACKING = ''
      END
*T23359 ^
   END
*
*---- CONVERT SISTRN_TIMESTMP
   CNV_STAMP = SISTRN_TIMESTMP
   GOSUB 21000
*
*---- READ SIS_LOG FILE
   MATREADU SISLOG_REC FROM SIS_LOG, CONO:SISTRN_EMP THEN
      LDATE = SISLOG_LAST.DATE
      LTIME = SISLOG_LAST.TIME
      CCNT = DCOUNT(SISLOG_WCTR,VM)
      FOR CC = 1 TO CCNT
         IF SISLOG_WCTR.DATE<1,CC> > = LDATE AND SISLOG_WCTR.TIME<1,CC> > LTIME THEN
            LDATE = SISLOG_WCTR.DATE<1,CC>
            LTIME = SISLOG_WCTR.TIME<1,CC>
         END
      NEXT CC
      IF ((IDATE-LDATE)*86400 + ITIME-LTIME) < 0 THEN
         SORT_DTM = 1
      END
   END LOCKED
      SKIP_TRN = 1
      GOTO 4099
   END ELSE
      MAT SISLOG_REC = ""
   END
   SISLOG_LOCKED = CONO : SISTRN_EMP
*
*--- PROCESS SIS_TRANS RECORD
* Transaction Types are :
*   1 = Login
*   2 = Labor /Material
*   3 = Material
*   4 = Return from Lunch
*   5 = Idle
*   6 = Start Concurrent
*   7 = Sign-Off
*   8 = Start Operation
   BEGIN CASE
      CASE SISTRN_TTYPE = "01" ;*   LOGIN
         GOSUB 10100
      CASE SISTRN_TTYPE = "02" ;*   LABOR / MATERIAL
         GOSUB 10200
      CASE SISTRN_TTYPE = "03" ;*   MATERIAL
         GOSUB 10300
      CASE SISTRN_TTYPE = "04" ;*   LUNCH
         GOSUB 10400
      CASE SISTRN_TTYPE = "05" ;*   IDLE
         GOSUB 10500
      CASE SISTRN_TTYPE = "06" ;*   START CONCURRENT
         GOSUB 10600
      CASE SISTRN_TTYPE = "07" ;*   SIGN-OFF
         GOSUB 10700
      CASE SISTRN_TTYPE = "08" AND JTR.FLAG;*   START OPERATION
         GOSUB 10800
      CASE SISTRN_TTYPE = "51" AND WIP.TRACKING = "Y";* Create Pallet Trans.
         GOSUB 15100
      CASE SISTRN_TTYPE = "52" AND WIP.TRACKING = "Y";* Pallet Delivery Req.
         GOSUB 15200
      CASE SISTRN_TTYPE = "53" AND WIP.TRACKING = "Y";* Pallet Pickup Req.
         GOSUB 15300
      CASE SISTRN_TTYPE = "54" AND WIP.TRACKING = "Y";* Update Pallet Trans.
         GOSUB 15400
      CASE SISTRN_TTYPE = "99" AND PERTS.FLAG;*   PERTS
         GOSUB 19900
      CASE 1
   END CASE
   SISTRN_PROCESSED = OCONV(CURR_DATE, "D/") "L#10 " : OCONV(CURR_TIME, "MTS:")
   MATWRITE SISTRN_REC ON SIS_TRANS, ID
4099*
   IF SISLOG_LOCKED # "" THEN
      RELEASE SIS_LOG, SISLOG_LOCKED
      SISLOG_LOCKED = ""
   END
   RELEASE SIS_TRANS, ID
   RETURN
*
*   1 = Login
10100*
   IF SISLOG_SERVER = "" OR SISLOG_OFF.FLAG # "" OR SORT_DTM THEN
      SISLOG_DIV = SISTRN_DIV
      SISLOG_DEPT = SISTRN_DEPT
      SISLOG_CCTR = SISTRN_CCTR
      SISLOG_SERVER = SISTRN_SERVER
      SISLOG_CLIENT = SISTRN_CLIENT
      BEGIN CASE
         CASE SISLOG_DATE = ""
            SISLOG_DATE = IDATE
            SISLOG_TIME = ITIME
            SISLOG_SHIFT = SISTRN_SHIFT
         CASE SISLOG_SHIFT <> SISTRN_SHIFT
            SISLOG_DATE = IDATE
            SISLOG_TIME = ITIME
            SISLOG_SHIFT = SISTRN_SHIFT
         CASE SISLOG_DATE = IDATE
         CASE IDATE = (SISLOG_DATE + 1)
            IF ITIME < SISLOG_TIME AND ((ITIME + 86400) - SISLOG_TIME) > 18000 THEN
               SISLOG_DATE = IDATE
               SISLOG_TIME = ITIME
               SISLOG_SHIFT = SISTRN_SHIFT
            END
         CASE 1
            SISLOG_DATE = IDATE
            SISLOG_TIME = ITIME
            SISLOG_SHIFT = SISTRN_SHIFT
      END CASE
      SISLOG_OFF.FLAG = ""
      IF SORT_DTM THEN
         DTM_ID = CONO : SISTRN_EMP :"*": SISLOG_DATE :"*": SISLOG_SHIFT
         MATREADU DTM.REC FROM DAILY.TIME.MATL, DTM_ID THEN
            GOSUB 23200
            GOSUB 24500
            MATWRITE DTM.REC ON DAILY.TIME.MATL, DTM_ID
         END LOCKED
            SKIP_TRN = 1
         END ELSE
            GOSUB 23200
            RELEASE DAILY.TIME.MATL, DTM_ID
         END
      END ELSE
         GOSUB 23200
      END
   END
   RETURN
*
*   2 = Labor /Material
10200*
   JP = 1
   MP = 1
   GOSUB 24000
   IF SKIP_TRN THEN RETURN
   GOSUB 23000
   IF JCNT < 1 THEN JCNT = 1
   IF MCNT < 1 THEN MCNT = 1
   FOR JP = 1 TO JCNT UNTIL SKIP_TRN
      FOR MP = 1 TO MCNT UNTIL SKIP_TRN
         GOSUB 24200
*
         GOSUB 24300
         IF SKIP_TRN THEN GOTO 10209
*
         NCFLAG = 0
         IF SISTRN_JOB = "" OR SISTRN_JOB = " " OR SISTRN_JOB = "<NONE>" OR SISTRN_JOB = "<None>" THEN
            GOSUB 22000
            SISTRN_JOB = "X" : WDATE[7,2] : DMM : DDV : DSQ
            NCFLAG = 1
         END
*
         IF SISTRN_JOB = "<MULTI>" OR SISTRN_JOB = "<Multi>" THEN
            M.JOB = SISTRN_MJ_JOB<1,JP>
            IF M.JOB = "" OR M.JOB = " " OR M.JOB = "<NONE>" OR M.JOB = "<None>" THEN
               GOSUB 22000
               M.JOB = "X" : WDATE[7,2] : DMM : DDV : DSQ
               NCFLAG = 1
            END
         END ELSE
            M.JOB = SISTRN_JOB
         END
         GOSUB 22500
*
         IF SISTRN_PROD = "<MULTI>" OR SISTRN_SKID = "<MULTI>" OR SISTRN_PROD = "<Multi>" OR SISTRN_SKID = "<Multi>" THEN
            M.PROD = SISTRN_MP_PROD<1,MP>
            M.WHSE = SISTRN_MP_WHSE<1,MP>
            M.LOC = SISTRN_MP_LOC<1,MP>
            M.SKID = SISTRN_MP_SKID<1,MP>
            M.QTY = SISTRN_MP_QTY<1,MP>
            QTYPE = SISTRN_MP_QTYPE<1,MP>
         END ELSE
            M.PROD = SISTRN_PROD
            M.WHSE = SISTRN_WHSE
            M.LOC = SISTRN_LOC
            IF SISTRN_SKID = "" AND SISTRN_BARCODE # "" THEN
               M.SKID = SISTRN_BARCODE
            END ELSE
               M.SKID = SISTRN_SKID
            END
            M.QTY = SISTRN_QTY
            QTYPE = SISTRN_QTYPE
         END
         DTM.DEPT<1,DP> = SISTRN_DEPT
         IF SISTRN_DIV = "" THEN
            DTM.DIV<1,DP> = JOB.DIV
         END ELSE
            DTM.DIV<1,DP> = SISTRN_DIV
         END
         DTM.SEQ<1,DP> = SEQ
         BEGIN CASE
            CASE JP = 1 AND MP = 1
               DTM.TYPE<1,DP> = "T"
            CASE JP > 1
               DTM.TYPE<1,DP> = "C"
            CASE MP > 1
               DTM.TYPE<1,DP> = "M"
         END CASE
         DTM.JOB<1,DP> = M.JOB
         DTM.CUST<1,DP> = JOB.CUST
         DTM.CCTR<1,DP> = SISTRN_CCTR
         IF JP = 1 AND MP = 1 THEN
            MATREAD OPER.REC FROM OPERATION, CONO:SISTRN_OPER ELSE
               MAT OPER.REC = ""
            END
         END
         IF MP = 1 THEN
            DTM.OPER<1,DP> = SISTRN_OPER
            DTM.CLASS.CD<1,DP> = SISTRN_CLASS
            DTM.OPER.COMPLETE<1,DP> = SISTRN_COMPLETE
            FOR PP = 1 TO PCNT
               DTM.ADD.PRMPT.CD<1,DP,PP> = SISTRN_PRMPT.CODE<1,PP>
               DTM.ADD.RESP<1,DP,PP> = SISTRN_PRMPT.RESP<1,PP>
            NEXT PP
         END
         DTM.SHIFT<1,DP> = SISTRN_SHIFT
         DTM.JOB.TYPE<1,DP> = SISTRN_TCODE
         BEGIN CASE
            CASE SISTRN_OT_CODE = 0
               DTM.TIME.CODE<1,DP> = "01"
            CASE SISTRN_OT_CODE = 1
               DTM.TIME.CODE<1,DP> = "02"
            CASE SISTRN_OT_CODE = 2
               DTM.TIME.CODE<1,DP> = "03"
            CASE 1
               DTM.TIME.CODE<1,DP> = "01"
         END CASE
         IF MP = 1 THEN
            DTM.TIME.ST<1,DP> = STIME
            DTM.TIME<1,DP> = ETIME
         END
         P1 = DP
         GOSUB 24600
         IF MP = 1 AND SISTRN_UNITS # "" THEN
*WY*        DTM.IMP<1,DP> = SISTRN_UNITS*100
            DTM.IMP<1,DP> = SISTRN_UNITS
         END
         IF JP = 1 AND (M.PROD # "" OR M.SKID # "") THEN
            GOSUB 10350
         END
         IF OPER.MATL.REQ = "Y" AND M.PROD = "" THEN
            DTM.ED.LS.FLG<1,DP> = "Y"
            DTM.STATUS<1,DP> = "MATERIAL REQUIRED"
         END
         DTM.SPOIL.CODE<1,DP> = SISTRN_SPOILAGE
         DTM.COMMENTS<1,DP> = SISTRN_COMMENTS
         DTM.TIME.STAMP<1,DP> = TIMESTMP
         IF JTR.FLAG AND MP = 1 AND NOT(NCFLAG) THEN
            IF CO.PSS = "Y" OR CO.PSS = "T" THEN
               CALL SISJTR (M.JOB, SISTRN_SHIFT, SEQ, ELAP.HRS, JOB.TRANS, MAT SISTRN_REC)
            END
         END
10209*
      NEXT MP
   NEXT JP
   IF SKIP_TRN = 0 THEN
      DTM.PRT.DATE = ""
      GOSUB 23200
      IF SORT_DTM THEN GOSUB 24500
      MATWRITE DTM.REC ON DAILY.TIME.MATL, DTM_ID
      DTM_LOCKED = ""
   END
   IF DTM_LOCKED # "" THEN
      RELEASE DAILY.TIME.MATL, DTM_ID
      DTM_LOCKED = ""
   END
   RETURN
*
*   3 = Material
10300*
   GOSUB 24000
   IF SKIP_TRN THEN RETURN
   M.JOB = SISTRN_JOB
   GOSUB 23000
   GOSUB 22500
   IF SISTRN_PROD = "<MULTI>" OR SISTRN_PROD = "<Multi>" THEN
      FOR MP = 1 TO MCNT UNTIL SKIP_TRN
         M.PROD = SISTRN_MP_PROD<1,MP>
         M.WHSE = SISTRN_MP_WHSE<1,MP>
         IF M.WHSE = "" THEN M.WHSE = SISTRN_MP_WHSE<1,1>
         M.LOC = SISTRN_MP_LOC<1,MP>
         IF M.LOC = "" THEN M.LOC = SISTRN_MP_LOC<1,1>
         M.SKID = SISTRN_MP_SKID<1,MP>
         M.QTY = SISTRN_MP_QTY<1,MP>
         QTYPE = SISTRN_MP_QTYPE<1,MP>
         GOSUB 10320
      NEXT MP
   END ELSE
      M.PROD = SISTRN_PROD
      M.WHSE = SISTRN_WHSE
      M.LOC = SISTRN_LOC
      IF SISTRN_SKID = "" AND SISTRN_BARCODE # "" THEN
         M.SKID = SISTRN_BARCODE
      END ELSE
         M.SKID = SISTRN_SKID
      END
      M.QTY = SISTRN_QTY
      QTYPE = SISTRN_QTYPE
      GOSUB 10320
   END
   IF SKIP_TRN THEN GOTO 10309
   DTM.PRT.DATE = ""
   IF RL.SK.CONTROL<5> # "Y" THEN
      MATWRITE DTM.REC ON DAILY.TIME.MATL, DTM_ID
      DTM_LOCKED = ""
   END
10309*
   IF DTM_LOCKED # "" THEN
      RELEASE DAILY.TIME.MATL, DTM_ID
      DTM_LOCKED = ""
   END
   RETURN
*
*--- BUILD MATL DTM
10320*
   GOSUB 24200
   IF RL.SK.CONTROL<5> # "Y" THEN
      GOSUB 24300
      IF SKIP_TRN THEN RETURN
   END ELSE
      SEQ = ""
   END
   DTM.DEPT<1,DP> = SISTRN_DEPT
   IF SISTRN_DIV = "" THEN
      DTM.DIV<1,DP> = JOB.DIV
   END ELSE
      DTM.DIV<1,DP> = SISTRN_DIV
   END
   DTM.SEQ<1,DP> = SEQ
   DTM.TYPE<1,DP> = "M"
   DTM.JOB<1,DP> = M.JOB
   DTM.CUST<1,DP> = JOB.CUST
   DTM.CCTR<1,DP> = SISTRN_CCTR
   DTM.OPER<1,DP> = SISTRN_OPER
   DTM.SHIFT<1,DP> = SISTRN_SHIFT
   DTM.JOB.TYPE<1,DP> = SISTRN_TCODE
   DTM.TIME.CODE<1,DP> = "01"
   IF M.PROD # "" OR M.SKID # "" THEN
      GOSUB 10350
   END
   IF M.PROD = "" THEN
      DTM.ED.LS.FLG<1,DP> = "Y"
      DTM.STATUS<1,DP> = "MATERIAL REQUIRED"
   END
   DTM.SPOIL.CODE<1,DP> = SISTRN_SPOILAGE
   DTM.TIME.STAMP<1,DP> = TIMESTMP
   IF RL.SK.CONTROL<5> = "Y" THEN GOSUB 10370
   RETURN
*
*---- PROCESS MATERIAL
10350*
*  IF M.PROD = "" AND M.SKID # "" THEN
*     MATREAD RSKI.REC FROM ROLL.SKID.INFO, CONO:M.SKID ELSE
*        MAT RSKI.REC = ""
*        RSKI.INV.NO = "X"
*     END
*     M.PROD = RSKI.INV.NO
*     M.WHSE = RSKI.WHSE
*     M.LOC = RSKI.LOC
*  END
   IF M.SKID # "" THEN
      MATREAD RSKI.REC FROM ROLL.SKID.INFO, CONO:M.SKID ELSE
         MAT RSKI.REC = ""
         RSKI.INV.NO = "X"
      END
      IF M.PROD = "" THEN M.PROD = RSKI.INV.NO
      IF M.WHSE = "" THEN M.WHSE = RSKI.WHSE
      IF M.LOC = "" THEN M.LOC = RSKI.LOC
   END ELSE
      MAT RSKI.REC = ""
   END
   MATREAD INV.REC FROM INVENTORY, CONO:M.PROD ELSE
      MAT INV.REC = ""
   END
   DTM.PROD<1,DP> = M.PROD
   IF M.WHSE = "" OR M.WHSE = "SKIP" THEN
      WCNT = DCOUNT(INV.WHSE.CODE,VM)
      IF WCNT = 1 THEN
         DTM.WHSE<1,DP> = INV.WHSE.CODE
      END ELSE
         LOCATE SISTRN_DEPT IN DEPT.WHSE<1>,1 SETTING W ELSE W = 99
         DTM.WHSE<1,DP> = DEPT.WHSE<2,W>
      END
   END ELSE
      DTM.WHSE<1,DP> = M.WHSE
   END
   IF M.LOC = "" THEN
      MATREAD IWH.REC FROM INV.WHSE, CONO:M.PROD:"!":DTM.WHSE<1,DP> ELSE
         MAT IWH.REC = ""
      END
      LCNT = DCOUNT(IWH.LOC,VM)
      IF LCNT = 1 THEN DTM.LOC<1,DP> = IWH.LOC
   END ELSE
      DTM.LOC<1,DP> = M.LOC
   END
   IF M.SKID = "" THEN
      MATREAD IWLO.REC FROM INV.WHSE.LOC, CONO:M.PROD:"!":DTM.WHSE<1,DP>:"!":DTM.LOC<1,DP> ELSE
         MAT IWLO.REC = ""
      END
      SCNT = DCOUNT(IWLO.R.S.ID,VM)
      IF SCNT = 1 THEN DTM.R.S.ID<1,DP> = IWLO.R.S.ID
   END ELSE
      DTM.R.S.ID<1,DP> = M.SKID
   END
   BEGIN CASE
      CASE QTYPE = "DR"
         QTY = M.QTY
      CASE INV.UNIT<1,2> = "SHT" AND INV.UNIT<1,3> = "LBS"
         ICR.DV1 = INV.M.WT;ICR.MT1 = 1;ICR.DV2 = 1
         QTY = INT(((INT(M.QTY/1000)/ICR.MT1)*ICR.DV1)*ICR.DV2+0.5)
         DTM.SHEET<1,DP> = INT(M.QTY/1000)
      CASE INV.UNIT<1,2> = "PC" AND INV.UNIT<1,3> = "MSI"
         ICR.DV1 = INV.PAP.WIDTH/100;ICR.MT1 = 10;ICR.DV2 = 1
         QTY = INT(((INT(M.QTY/1000)/ICR.MT1)*ICR.DV1)*ICR.DV2+0.5)
         DTM.SHEET<1,DP> = INT(M.QTY/1000)
      CASE INV.UNIT<1,2> = "FT" AND INV.UNIT<1,3> = "MSI"
         ICR.DV1 = INV.PAP.WIDTH/100;ICR.MT1 = 100;ICR.DV2 = 12
         QTY = INT(((INT(M.QTY/1000)/ICR.MT1)*ICR.DV1)*ICR.DV2+0.5)
         DTM.SHEET<1,DP> = INT(M.QTY/1000)
      CASE 1
         QTY = M.QTY
   END CASE
*
   DTM.RS.QTYPE<1,DP> = QTYPE
   DTM.QTY<1,DP> = QTY
   RETURN
*
*---- BYPASS DAILY.TIME.MATL
10370*
   MAT DMT.REC = ""
   DMT.JOB = DTM.JOB<1,DP>
   DMT.TYPE = DTM.JOB.TYPE<1,DP>
   DMT.DIV = DTM.DIV<1,DP>        
   DMT.DEPT = DTM.DEPT<1,DP>       
   DMT.CCTR = DTM.CCTR<1,DP>       
   DMT.PROD = DTM.PROD<1,DP>        
   IF DMT.PROD = "" THEN DMT.PROD = "X"
   DMT.WHSE = DTM.WHSE<1,DP>   
   DMT.LOC = DTM.LOC<1,DP>      
   DMT.QTY = DTM.QTY<1,DP>      
   DMT.DATE = SISLOG_DATE
   DMT.USAGE.SEQ = DTM.TIME.STAMP<1,DP>
   DMT.SHEET = DTM.SHEET<1,DP>  
   DMT.R.S.ID = DTM.R.S.ID<1,DP>      
   DMT.COST = DTM.COST<1,DP>    
   DMT.STATUS = DTM.STATUS<1,DP>
   DMT.INIT = DTM.INIT<1,DP>    
   DMT.SPOIL.CODE = DTM.SPOIL.CODE<1,DP>
   DMT.RS.QTYPE = DTM.RS.QTYPE<1,DP>
   IF DTM.TIME.STAMP<1,DP> # "" THEN
      DMT.TIME = MOD(DTM.TIME.STAMP<1,DP>,100000)
   END
   READU DMT.ID FROM CONTROL, CONO:"DAILY.MATL" ELSE DMT.ID = 10000
   SOK = 0
   LOOP
      DMT.ID = DMT.ID + 1
      IF DMT.ID > 999999 THEN DMT.ID = 10001
      READV CHKREC FROM DAILY.MATL, CONO:DMT.ID,1 ELSE SOK = 1
   UNTIL SOK DO
   REPEAT
   WRITE DMT.ID ON CONTROL, CONO:"DAILY.MATL"
   MATWRITE DMT.REC ON DAILY.MATL, CONO:DMT.ID
   RETURN
*
*   4 = Return from Lunch
10400*
   GOSUB 24000
   IF SKIP_TRN THEN RETURN
   GOSUB 24200
   GOSUB 23000
   DTM.TYPE<1,DP> = "L"
10450*
   DTM.SHIFT<1,DP> = SISTRN_SHIFT
   DTM.TIME.ST<1,DP> = STIME
   DTM.TIME<1,DP> = ETIME
   P1 = DP
   GOSUB 24600
   DTM.TIME.STAMP<1,DP> = TIMESTMP
   DTM.PRT.DATE = ""
   GOSUB 23700
   GOSUB 23200
   IF SORT_DTM THEN GOSUB 24500
   MATWRITE DTM.REC ON DAILY.TIME.MATL, DTM_ID
   DTM_LOCKED = ""
   RETURN
*
*   5 = Idle
10500*
   GOSUB 24000
   IF SKIP_TRN THEN RETURN
   GOSUB 24200
   GOSUB 23000
   DTM.TYPE<1,DP> = "I"
   GOSUB 10450
   RETURN
*
*   6 = Start Concurrent
10600*
   GOSUB 23000
   IF SORT_DTM THEN
      DTM_ID = CONO : SISTRN_EMP :"*": SISLOG_DATE :"*": SISLOG_SHIFT
      MATREADU DTM.REC FROM DAILY.TIME.MATL, DTM_ID THEN
         GOSUB 23500
         GOSUB 24500
         MATWRITE DTM.REC ON DAILY.TIME.MATL, DTM_ID
      END LOCKED
         SKIP_TRN = 1
      END ELSE
         RELEASE DAILY.TIME.MATL, DTM_ID
      END
   END ELSE
      GOSUB 23500
   END
   RETURN
*
*   7 = Sign-Off
10700*
   MATREAD EMP.REC FROM EMPLOYEE, CONO:SISTRN_EMP THEN
      SHIFT.SUM.REC = "Y"
      READV DPT.SPL FROM DEPT.SPOOL.TABLE, CONO:EMP.DEPT, 1 ELSE
         SHIFT.SUM.REC = "N"
      END
      IF SHIFT.SUM.REC = "Y" THEN
         SENTENCE = "SETPTR ,,,,,,DEST ":DPT.SPL:" ,BRIEF"
         UDTEXECUTE SENTENCE CAPTURING SPMSG
         CALL SHIFT.SUM.RPT (CONO, SISTRN_EMP, SISLOG_DATE, SISLOG_SHIFT)
      END
   END
   SISLOG_LAST.SERVER = ""
   SISLOG_LAST.CLIENT = ""
   SISLOG_LAST.DATE = ""
   SISLOG_LAST.TIME = ""
   SISLOG_WCTR = ""
   SISLOG_WCTR.DATE = ""
   SISLOG_WCTR.TIME = ""
   SISLOG_WCTR.TIMESTMP = ""
   IF SISTRN_COMMENTS = "AUTO" THEN
      SISLOG_OFF.FLAG = "A"
   END ELSE
      SISLOG_OFF.FLAG = "U"
   END
   SISLOG_OFF.DATE = IDATE
   SISLOG_OFF.TIME = ITIME
   MATWRITE SISLOG_REC ON SIS_LOG, CONO:SISTRN_EMP
   SISLOG_LOCKED = ""
   RETURN
*
*   8 = Start Operation
10800*
   IF CO.PSS = "Y" OR CO.PSS = "T" THEN
*     CALL HNP202 (SISTRN_JOB,SISTRN_SHIFT,0,0,JOB.TRANS)
      CALL SISJTR (M.JOB, SISTRN_SHIFT, 0, 0, JOB.TRANS, MAT SISTRN_REC)
   END
   RETURN
*T23359 v
*
*---- Create Pallet Transaction
15100*
251 * Get the next available Pallet ID Number
   READVU PALID FROM CONTROL, CONO:"LAST.INS.PAL.ID",1 ELSE PALID = "N000000X"
   LOOP
      NPFX = PALID[1,1]
      NSEQ = PALID[2,6]
      NSEQ = NSEQ + 1
      IF NSEQ > 999999 THEN
         NPFX = CHAR(SEQ(NPFX)+1)
         NSEQ = 1
      END
      PALID = NPFX:(1000000+NSEQ)[2,6]
      CALL WIPT.CHECK.DIGIT("C", PALID, "10RL", CKDIG, VALID)
      PALID = PALID:CKDIG
      READ TREC FROM WIP.TRACK.PALLET, CONO:PALID ELSE TREC = "!@#$%"
   UNTIL TREC = "!@#$%" DO
   REPEAT
   WRITEV PALID ON CONTROL, CONO:"LAST.INS.PAL.ID",1
   SISTRN_WIP_PALLET = PALID
   MATREADU WIPTP.REC FROM WIP.TRACK.PALLET, CONO:SISTRN_WIP_PALLET ELSE
      MAT WIPTP.REC = ""
   END
   PJOB = WIPTP.JOB
   BEGIN CASE
      CASE WIPTP.VER = "" AND WIPTP.SIG = ""
         PFORM = WIPTP.FORM
      CASE WIPTP.SIG = ""
         PFORM = WIPTP.FORM:".":WIPTP.VER
      CASE 1
         PFORM = WIPTP.FORM:".":WIPTP.VER:".":WIPTP.SIG
   END CASE
   PLOC = WIPTP.MLOC<1,1>
   PQTY = WIPTP.CQTY
   PTOJOB = WIPTP.TO.JOB
   WIPTP.DATE = IDATE
   WIPTP.TIME = ITIME
*WIPTP.JOB  = SISTRN_JOB
   WIPTP.JOB  = SISTRN_JOB
   FNUM = SISTRN_WIP_FORM
   FNUM = FIELD(SISTRN_WIP_FORM,".",1)
   VNUM = FIELD(SISTRN_WIP_FORM,".",2)
*SNUM = FIELD(SISTRN_WIP_FORM,".",3)
*IF NUM(FNUM) THEN FNUM = (10000+FNUM)[2,4]
   IF NUM(FNUM) THEN FNUM = (1000+FNUM)[2,3]
   IF NUM(VNUM) THEN
      IF (VNUM+0) = 0 THEN VNUM = ""
   END
   IF VNUM # "" THEN VNUM = (1000+VNUM)[2,3]
*IF NUM(SNUM) THEN
*IF (SNUM+0) = 0 THEN SNUM = ""
*END
*IF SNUM # "" THEN SNUM = (100000+SNUM)[2,5]
   WIPTP.FORM = FNUM
   WIPTP.VER  = VNUM
   WIPTP.SKID = SISTRN_WIP_SKID
*WIPTP.TYPE = SISTRN_WIP_PTYPE
   WIPTP.TO.JOB = SISTRN_WIP_TOJOB
   WIPTP.TO.OPER = SISTRN_WIP_TOWCTR
   WIPTP.SEQ = 500
   LOCATE "N" IN WIPTP.ACODE<1>,1 SETTING APTR ELSE NULL
   BEGIN CASE
      CASE WIPTP.MLOC = ""
*ZAY     WIPTP.IQTY = SISTRN_QTY
         WIPTP.IQTY = SISTRN_WIP_QTY
*WIPTP.MLOC = "P1-":SISTRN_CCTR
         WIPTP.MLOC = "P1-":SISTRN_CCTR
         WIPTP.MDATE = IDATE
         WIPTP.MTIME = ITIME
         WIPTP.MEMP = SISTRN_EMP
         WIPTP.ACODE = "N"
*ZAY     WIPTP.AQTY = SISTRN_QTY
         WIPTP.AQTY = SISTRN_WIP_QTY
         WIPTP.ADATE = IDATE
         WIPTP.ATIME = ITIME
         WIPTP.AEMP = SISTRN_EMP
      CASE WIPTP.ACODE<1,APTR> = "N"
         BEGIN CASE
*ZAY        CASE WIPTP.IQTY = SISTRN_QTY
            CASE WIPTP.IQTY = SISTRN_WIP_QTY
            CASE WIPTP.CQTY = 0
            CASE 1
*INS ("P1-":SISTRN_CCTR) BEFORE WIPTP.MLOC<1,1>
               INS ("P1-":SISTRN_CCTR) BEFORE WIPTP.MLOC<1,1>
               INS IDATE BEFORE WIPTP.MDATE<1,1>
               INS ITIME BEFORE WIPTP.MTIME<1,1>
               INS SISTRN_EMP BEFORE WIPTP.MEMP<1,1>
               INS "A" BEFORE WIPTP.ACODE<1,1>
*ZAY           INS (SISTRN_QTY-WIPTP.IQTY) BEFORE WIPTP.AQTY<1,1>
               INS (SISTRN_WIP_QTY-WIPTP.IQTY) BEFORE WIPTP.AQTY<1,1>
               INS IDATE BEFORE WIPTP.ADATE<1,1>
               INS ITIME BEFORE WIPTP.ATIME<1,1>
               INS SISTRN_EMP BEFORE WIPTP.AEMP<1,1>
*ZAY           WIPTP.IQTY = SISTRN_QTY
               WIPTP.IQTY = SISTRN_WIP_QTY
         END CASE
      CASE 1
*ZAY     WIPTP.IQTY = SISTRN_QTY
         WIPTP.IQTY = SISTRN_WIP_QTY
         MPTR = DCOUNT(WIPTP.MLOC,VM)+1
*WIPTP.MLOC<1,MPTR> = "P1-":SISTRN_CCTR
         WIPTP.MLOC<1,MPTR> = "P1-":SISTRN_CCTR
         WIPTP.MDATE<1,MPTR> = IDATE
         WIPTP.MTIME<1,MPTR> = ITIME
         WIPTP.MEMP<1,MPTR> = SISTRN_EMP
         WIPTP.ACODE<1,APTR> = "N"
*ZAY     WIPTP.AQTY<1,APTR> = SISTRN_QTY
         WIPTP.AQTY<1,APTR> = SISTRN_WIP_QTY
         WIPTP.ADATE<1,APTR> = IDATE
         WIPTP.ATIME<1,APTR> = ITIME
         WIPTP.AEMP<1,APTR> = SISTRN_EMP
   END CASE
   WIPTP.CQTY = SUM(WIPTP.AQTY)
   CJOB = WIPTP.JOB
   BEGIN CASE
      CASE WIPTP.VER = "" AND WIPTP.SIG = ""
         CFORM = WIPTP.FORM
      CASE WIPTP.SIG = ""
         CFORM = WIPTP.FORM:".":WIPTP.VER
      CASE 1
         CFORM = WIPTP.FORM:".":WIPTP.VER:".":WIPTP.SIG
   END CASE
   PALID = SISTRN_WIP_PALLET
*GEN.SKID = WIPTP.SKID
   CALL WIPT.XREF.MAINT(CONO,PJOB,PFORM,CJOB,CFORM,PALID,GEN.SKID,ERRMSG)
   CALL WIPT.LOC.UPD(CONO,SISTRN_WIP_PALLET,PLOC,MAT WIPTP.REC,WIP.TRACK.LOC,ERRMSG)
*NA***CALL WIPT.HIST.UPD(CONO,PLOC,PQTY,MAT WIPTP.REC,WIP.TRACK.HIST,ERRMSG)
   CALL WIPT.UPDATE.TOJOB.XREF(CONO,PTOJOB,WIPTP.TO.JOB,PJOB,WIPTP.JOB,ERRMSG)
   MATWRITE WIPTP.REC ON WIP.TRACK.PALLET, CONO:SISTRN_WIP_PALLET
*LOAD DATA INTO THE BARCODE VARIABLES
   IF WIPTP.JOB = "" THEN
      MAT JOB.REC = ""
      MAT CUST.REC = ""
   END ELSE
      MATREAD JOB.REC FROM JOB, CONO:WIPTP.JOB THEN
         MATREAD CUST.REC FROM CUSTOMER, CONO:JOB.CUST ELSE
            MAT CUST.REC = ""
         END
      END ELSE
         MAT JOB.REC = ""
         MAT CUST.REC = ""
         CUST.NAME = "????????????????"
      END
   END
   IF WIPTP.VEND = "" THEN
      MAT VEND.REC = ""
   END ELSE
      MATREAD VEND.REC FROM VEND, CONO:WIPTP.VEND ELSE
         MAT VEND.REC = ""
         VEND.DESC = "????????????????"
      END
   END
*SET THE APPROPRIATE PRINT QUEUE FOR THE CURRENT STATION
   MATREAD WIPPQ.REC FROM WIPT.PRINT.QUEUE, CONO:SISTRN_SERVER THEN
      LOCATE SISTRN_CLIENT IN WIPPQ.STATION.ID<1>,1 SETTING PQPTR THEN
         PQ = WIPPQ.PRINT.QUEUE<1,PQPTR>
      END ELSE
         PQ = WIPPQ.PRINT.QUEUE.DEFAULT
      END
   END ELSE
      PQ = ""
   END
   IF PQ THEN
      SENTENCE = "SETPTR ,,,,,,DEST ":PQ:" ,BRIEF"
      UDTEXECUTE SENTENCE CAPTURING PQMSG
   END
*CALL THE SUBROUTINE TO PRINT THE BARCODE LABEL
   PALLET.ID=SISTRN_WIP_PALLET; GOSUB 15900
   RETURN
*
*---- Pallet Delivery Request
15200*
   FNUM = FIELD(SISTRN_WIP_FORM,".",1)
   VNUM = FIELD(SISTRN_WIP_FORM,".",2)
*IF NUM(FNUM) THEN FNUM = (10000+FNUM)[2,4]
   IF NUM(FNUM) THEN FNUM = (1000+FNUM)[2,3]
   IF NUM(VNUM) THEN
      IF (VNUM+0) = 0 THEN VNUM = ""
   END
   IF VNUM = "" THEN
      FORM.NO = FNUM
   END ELSE
      FORM.NO = FNUM:".":(1000+VNUM)[2,3]
   END
   MATREADU WIPTR.REC FROM WIP.TRACK.CONTROL, CONO:"REQ" ELSE
      MAT WIPTR.REC = ""
   END
   DMATCH = 0
   RCNT = DCOUNT(WIPTR.DATE,VM)
   FOR RPTR = 1 TO RCNT UNTIL DMATCH
      IF WIPTR.TYPE<1,RPTR> = "D" THEN
*IF WIPTR.CCTR<1,RPTR> = "B1-":SISTRN_CCTR THEN
*IF WIPTR.JOB<1,RPTR> = SISTRN_JOB THEN
         IF WIPTR.CCTR<1,RPTR> = "B1-":SISTRN_CCTR THEN
            IF WIPTR.JOB<1,RPTR> = SISTRN_JOB THEN
               IF WIPTR.FORM<1,RPTR> = FORM.NO THEN
                  IF WIPTR.PTYPE<1,RPTR> = SISTRN_WIP_PTYPE THEN
                     DMATCH = 1
                  END
               END
            END
         END
      END
   NEXT RPTR
   IF DMATCH THEN
      RELEASE WIP.TRACK.CONTROL, CONO:"REQ"
   END ELSE
      RPTR = RCNT + 1
      WIPTR.DATE<1,RPTR> = IDATE
      WIPTR.TIME<1,RPTR> = ITIME
      WIPTR.TYPE<1,RPTR> = "D"
*WIPTR.CCTR<1,RPTR> = "B1-":SISTRN_CCTR
*WIPTR.JOB<1,RPTR> = SISTRN_JOB
      WIPTR.CCTR<1,RPTR> = "B1-":SISTRN_CCTR
      WIPTR.JOB<1,RPTR> = SISTRN_JOB
      WIPTR.FORM<1,RPTR> = FORM.NO
      WIPTR.PTYPE<1,RPTR> = SISTRN_WIP_PTYPE
      MATWRITE WIPTR.REC ON WIP.TRACK.CONTROL, CONO:"REQ"
   END
   RETURN
*
*---- Pallet Pickup Request
15300*
   MATREADU WIPTP.REC FROM WIP.TRACK.PALLET, CONO:SISTRN_WIP_PALLET THEN
      PLOC = WIPTP.MLOC<1,1>
      PQTY = WIPTP.CQTY<1,1>
      WIPTP.ACODE = INSERT(WIPTP.ACODE,1,1,0,"C")
*ZAY  WIPTP.AQTY = INSERT(WIPTP.AQTY,1,1,0,(SISTRN_QTY-WIPTP.CQTY))
      WIPTP.AQTY = INSERT(WIPTP.AQTY,1,1,0,(SISTRN_WIP_QTY-WIPTP.CQTY))
      WIPTP.ADATE = INSERT(WIPTP.ADATE,1,1,0,IDATE)
      WIPTP.ATIME = INSERT(WIPTP.ATIME,1,1,0,ITIME)
      WIPTP.CQTY = SUM(WIPTP.AQTY)
      BEGIN CASE
*CASE WIPTP.MLOC<1,1> = ("B1":SISTRN_CCTR)
         CASE WIPTP.MLOC<1,1> = ("B1":SISTRN_CCTR)
         CASE IDATE < WIPTP.MDATE<1,1>
         CASE IDATE = WIPTP.MDATE<1,1> AND ITIME < WIPTP.MTIME<1,1>
         CASE 1
*WIPTP.MLOC = INSERT(WIPTP.MLOC,1,1,0,("B1":SISTRN_CCTR))
            WIPTP.MLOC = INSERT(WIPTP.MLOC,1,1,0,("B1":SISTRN_CCTR))
            WIPTP.MDATE = INSERT(WIPTP.MDATE,1,1,0,IDATE)
            WIPTP.MTIME = INSERT(WIPTP.MTIME,1,1,0,ITIME)
*WIPTP.MEMP = INSERT(WIPTP.MEMP,1,1,0,SISTRN_EMP)
            WIPTP.MEMP = INSERT(WIPTP.MEMP,1,1,0,SISTRN_EMP);* SISTRN_EMP = TRN.WT.EMP
      END CASE
      CALL WIPT.LOC.UPD(CONO,SISTRN_WIP_PALLET,PLOC,MAT WIPTP.REC,WIP.TRACK.LOC,ERRMSG)
*NA***CALL WIPT.HIST.UPD(CONO,PLOC,PQTY,MAT WIPTP.REC,WIP.TRACK.HIST,ERRMSG)
      MATWRITE WIPTP.REC ON WIP.TRACK.PALLET, CONO:SISTRN_WIP_PALLET
      IF (SISTRN_QTY+0) > 0 THEN
         MATREADU WIPTR.REC FROM WIP.TRACK.CONTROL, CONO:"REQ" ELSE
            MAT WIPTR.REC = ""
         END
         PMATCH = 0
         RCNT = DCOUNT(WIPTR.DATE,VM)
         FOR RPTR = 1 TO RCNT UNTIL PMATCH
            IF WIPTR.TYPE<1,RPTR> = "P" THEN
*IF WIPTR.CCTR<1,RPTR> = "B1-":SISTRN_CCTR THEN
               IF WIPTR.CCTR<1,RPTR> = "B1-":SISTRN_CCTR THEN
                  IF WIPTR.PALLET<1,RPTR> = SISTRN_WIP_PALLET THEN
                     PMATCH = 1
                  END
               END
            END
         NEXT RPTR
         IF PMATCH THEN
            RELEASE WIP.TRACK.CONTROL, CONO:"REQ"
         END ELSE
            RPTR = RCNT + 1
            WIPTR.DATE<1,RPTR> = IDATE
            WIPTR.TIME<1,RPTR> = ITIME
            WIPTR.TYPE<1,RPTR> = "P"
*WIPTR.CCTR<1,RPTR> = "B1-":SISTRN_CCTR
            WIPTR.CCTR<1,RPTR> = "B1-":SISTRN_CCTR
            WIPTR.PALLET<1,RPTR> = SISTRN_WIP_PALLET
            MATWRITE WIPTR.REC ON WIP.TRACK.CONTROL, CONO:"REQ"
         END
      END
   END ELSE
      RELEASE WIP.TRACK.PALLET, CONO:SISTRN_WIP_PALLET
   END
   RETURN
*
*---- Update Pallet Transaction
15400*
   MATREADU WIPTP.REC FROM WIP.TRACK.PALLET, CONO:SISTRN_WIP_PALLET ELSE
      MAT WIPTP.REC = ""
   END
   PJOB = WIPTP.JOB
   BEGIN CASE
      CASE WIPTP.VER = ""
         PFORM = WIPTP.FORM
      CASE 1
         PFORM = WIPTP.FORM:".":WIPTP.VER
   END CASE
   PLOC = WIPTP.MLOC<1,1>
   PQTY = WIPTP.CQTY
   PTOJOB = WIPTP.TO.JOB
   WIPTP.DATE = IDATE
   WIPTP.TIME = ITIME
   WIPTP.TO.JOB = SISTRN_WIP_TOJOB
   WIPTP.TO.OPER = SISTRN_WIP_TOWCTR
   IF WIPTP.TO.JOB = "NONE" THEN WIPTP.TO.JOB = ""
   IF WIPTP.TO.OPER = "NONE" THEN WIPTP.TO.OPER = ""
*UPDATE THE CROSS REFERENCE FOR TO-JOBS :: PALLETS
   ERRMSG = ""
   CALL WIPT.UPDATE.TOJOB.XREF(CONO,PTOJOB,WIPTP.TO.JOB,PJOB,WIPTP.JOB,ERRMSG)
   MATWRITE WIPTP.REC ON WIP.TRACK.PALLET, CONO:SISTRN_WIP_PALLET
*LOAD DATA INTO THE BARCODE VARIABLES
   IF WIPTP.JOB = "" THEN
      MAT JOB.REC = ""
      MAT CUST.REC = ""
   END ELSE
      MATREAD JOB.REC FROM JOB, CONO:WIPTP.JOB THEN
         MATREAD CUST.REC FROM CUSTOMER, CONO:JOB.CUST ELSE
            MAT CUST.REC = ""
         END
      END ELSE
         MAT JOB.REC = ""
         MAT CUST.REC = ""
         CUST.NAME = "????????????????"
      END
   END
   IF WIPTP.VEND = "" THEN
      MAT VEND.REC = ""
   END ELSE
      MATREAD VEND.REC FROM VEND, CONO:WIPTP.VEND ELSE
         MAT VEND.REC = ""
         VEND.DESC = "????????????????"
      END
   END
*SET THE APPROPRIATE PRINT QUEUE FOR THE CURRENT STATION
   MATREAD WIPPQ.REC FROM WIPT.PRINT.QUEUE, CONO:SISTRN_SERVER THEN
      LOCATE SISTRN_CLIENT IN WIPPQ.STATION.ID<1>,1 SETTING PQPTR THEN
         PQ = WIPPQ.PRINT.QUEUE<1,PQPTR>
      END ELSE
         PQ = WIPPQ.PRINT.QUEUE.DEFAULT
      END
   END ELSE
      PQ = ""
   END
   IF PQ THEN
      SENTENCE = "SETPTR ,,,,,,DEST ":PQ:" ,BRIEF"
      UDTEXECUTE SENTENCE CAPTURING PQMSG
   END
*CALL THE SUBROUTINE TO PRINT THE BARCODE LABEL
   PALLET.ID=SISTRN_WIP_PALLET; GOSUB 15900
   RETURN
*T23359 ^
*T23359 v
*
*---- Print the Pallet Barcode Label
15900*
   PRINTER ON
   PRINTER.INIT = ESC:"E"
   PRINTER.INIT = PRINTER.INIT:ESC:"&l0O"
   PRINTER.INIT = PRINTER.INIT:ESC:"(8U"
*T22322v
   PRINTER.INIT = PRINTER.INIT:ESC:"&l0L"   ;* Disable Perf Skipping
*T22322^
   PRINT PRINTER.INIT
   HPI = 2.0
   VPI = 0.05
   BPT = 2.5
   VSI = 1.0
   BDATA = "*":PALLET.ID:"*"
   VDATA = PALLET.ID
   VPT = 10
   CALL HP.PRINT.BARCODE.39(HPI,VPI,BPT,VSI,BDATA,VDATA,VPT)
*
   PLINE=CUST.NAME; PITCH=2.50; VPOS=2.25; WGT=3; GOSUB 15910
   PLINE="Job Number"; PITCH=10.00; VPOS=2.75; WGT=0; GOSUB 15920
   PLINE=WIPTP.JOB; PITCH=3.0; VPOS=3.375; WGT=3; GOSUB 15910
   PLINE="Version / Section"; PITCH=10.00; VPOS=3.875; WGT=0; GOSUB 15920
   BEGIN CASE
      CASE WIPTP.VER = ""
         PLINE = WIPTP.FORM
      CASE 1
         PLINE = WIPTP.FORM:".":WIPTP.VER
   END CASE
   PITCH=3.0; VPOS=4.5; WGT=3; GOSUB 15910
   PLINE="Quantity"; PITCH=10.00; VPOS=5.0; WGT=0; GOSUB 15920
   PLINE=OCONV(WIPTP.CQTY,"MD0,"); PITCH=4.0; VPOS=5.5; WGT=3; GOSUB 15910
   PLINE="To-Job":SPACE(54):"To-Oper"; PITCH=10.00; VPOS=6.0; WGT=0; GOSUB 15920
   PLINE=WIPTP.TO.JOB:SPACE(29):WIPTP.TO.OPER:SPACE(2); PITCH=5.5; VPOS=6.375; WGT=3; GOSUB 15910
   PLINE="Vendor"; PITCH=10.00; VPOS=6.75; WGT=0; GOSUB 15920
   PLINE=VEND.DESC; PITCH=7.0; VPOS=7.125; WGT=3; GOSUB 15910
   PLINE="Description"; PITCH=10.00; VPOS=7.625; WGT=0; GOSUB 15920
   PLINE=WIPTP.DESC; PITCH=7.0; VPOS=8.0; WGT=3; GOSUB 15910
   PLINE="Pallet ID"; PITCH=10.00; VPOS=8.625; WGT=0; GOSUB 15920
*
   HPI = 2.0
   VPI = 8.75
   BPT = 2.5
   VSI = 1.0
   BDATA = "*":PALLET.ID:"*"
   VDATA = PALLET.ID
   VPT = 10
   CALL HP.PRINT.BARCODE.39(HPI,VPI,BPT,VSI,BDATA,VDATA,VPT)
*
   PRINT CHAR(12):
   PRINTER OFF
   PRINTER CLOSE
   RETURN
*
*---- PRINT CENTERED TEXT
15910*
   PAGE.WIDTH = 8                     ;* PAGE WIDTH IN INCHES
   MAXPITCH = INT((LEN(PLINE)+2) / PAGE.WIDTH * 100 + 0.99)
   MAXPITCH = OCONV(MAXPITCH,"MD2")
   IF MAXPITCH > PITCH THEN PITCH = MAXPITCH
15920*
   PAGE.CHARS = INT(PAGE.WIDTH * PITCH)-2
   IF LEN(PLINE) >= PAGE.CHARS THEN
      PLINE = SPACE(1):PLINE[1,PAGE.CHARS]
   END ELSE
      PLINE = SPACE(1):SPACE(INT((PAGE.CHARS-LEN(PLINE))/2)):PLINE
   END
   FMT = ESC:"(s"
   FMT = FMT:"0p"                     ;* pitch (0 = fixed, 1 = variable)               ;* pitch (char / inch)
   FMT = FMT:PITCH:"h"                ;* pitch (char / inch)
   FMT = FMT:"0s"                     ;* italic (0 = no, 1 = yes)
   FMT = FMT:WGT:"b"                  ;* weight (0 = normal, 3 = bold)
   FMT = FMT:"4102T"                  ;* font = Letter Gothic
   VPOS = INT(VPOS * 720 + 0.5)
   FMT = FMT:ESC:"&a":VPOS:"V"
   PRINT FMT:PLINE
   RETURN
*T23359 ^
*
*  99 = PERTS
19900*
*  PTRK.ID = TRN.PERTS.CCTR:"!":TRN.PERTS.RDATE
*  MATREADU PTRK.REC FROM PERTS.TRACK,PERTS.CONO:PTRK.ID LOCKED REC.LOCK = 1 ELSE MAT PTRK.REC = ""
*  IF REC.LOCK THEN RETURN
*  LOCATE TRN.PERTS.RTIME IN PTRK.TIME<1>,1 BY "AR" SETTING P THEN
*     PTRK.TIME<1,P> = TRN.PERTS.RTIME
*     PTRK.SPEED<1,P> = TRN.PERTS.SPEED
*  END ELSE
*     PTRK.TIME = INSERT(PTRK.TIME,1,P,0,TRN.PERTS.RTIME)
*     PTRK.SPEED = INSERT(PTRK.SPEED,1,P,0,TRN.PERTS.SPEED)
*  END
*  MATWRITE PTRK.REC ON PERTS.TRACK,PERTS.CONO:PTRK.ID
   RETURN
*
*--- CONVERT DATE & TIME
*
21000*
   ODATE = FIELD(CNV_STAMP," ",1)
   OTIME = FIELD(CNV_STAMP," ",2)
   IDATE = ICONV(ODATE,"D")
   ITIME = ICONV(OTIME,"MT")
   TIMESTMP = IDATE*100000 + ITIME
   RETURN
*
*--- GET X JOB NUMBER
*
22000*
   WDATE = OCONV(SISLOG_DATE, "D2-")
   IF SISTRN_DIV = "" THEN DDV = "01" ELSE DDV = SISTRN_DIV
   IF PRODUCTION.REC # "" THEN
      LOCATE SISLOG_DATE IN PRODUCTION.REC<1>,1 BY "AR" SETTING PW ELSE NULL
      IF PW > 52 THEN PW = 52
      LOCATE PRODUCTION.REC<2,PW> IN PRODUCTION.REC<2>,1 BY "AR" SETTING STRT THEN
         DSQ = PW - STRT + 1
         DMM = PRODUCTION.REC<2,PW> "R%2"
      END ELSE
         DSQ = INT((WDATE[4,2]-1)/7)+1
         DMM = WDATE[1,2]
      END
   END ELSE
      DSQ = INT((WDATE[4,2]-1)/7)+1
      DMM = WDATE[1,2]
   END
   RETURN
*
*---- VALIDATE JOB NUMBER
22500*
   MATREAD JOB.REC FROM JOB, CONO:M.JOB ELSE
      MAT JOB.REC = ""
      IF M.JOB < J.CUTOFF.NUM THEN
         FND = 1
      END ELSE
         JCCNT = DCOUNT(J.CUTOFF.PREFIX,VM)
         FND = 0
         FOR JCPTR = 1 TO JCCNT WHILE FND = 0
            PLEN = LEN(J.CUTOFF.PREFIX<1,JCPTR>)
            IF J.CUTOFF.PREFIX<1,JCPTR> = M.JOB[1,PLEN] THEN
               JSFX = M.JOB[PLEN+1,LEN(M.JOB)-PLEN]
               IF NUM(JSFX) THEN
                  IF JSFX < J.CUTOFF.PRE.NO<1,JCPTR> THEN FND = 1
               END
            END
         NEXT JCPTR
      END
      IF FND THEN
         JOB.DESC = "Non PRIMAC Job"
         JOB.TYPE = "R"
         JOB.DIV = "10"
      END
   END
   RETURN
*
*---- GET STIME FROM SISLOG_REC
*
23000*
   IF SISTRN_CCTR = "" THEN
      SP1 = 0
   END ELSE
      LOCATE SISTRN_CCTR IN SISLOG_WCTR<1>,1 SETTING SP1 ELSE SP1 = 0
   END
   BEGIN CASE
      CASE NOT(SORT_DTM) AND SP1 = 0
         STIME = SISLOG_LAST.TIME
         STIME = OCONV(STIME,"MTS")
         STIME = STIME[1,2]:STIME[4,2]
         ETIME = OCONV(ITIME,"MTS")
         ETIME = ETIME[1,2]:ETIME[4,2]
      CASE NOT(SORT_DTM)
         STIME = SISLOG_WCTR.TIME<1,SP1>
         STIME = OCONV(STIME,"MTS")
         STIME = STIME[1,2]:STIME[4,2]
         ETIME = OCONV(ITIME,"MTS")
         ETIME = ETIME[1,2]:ETIME[4,2]
      CASE 1
         STIME = ""
         ETIME = ""
   END CASE
   RETURN
*
*---- UPDATE SISLOG_REC
*
23200*
   IF SISTRN_CCTR = "" THEN
      CC = 0
   END ELSE
      LOCATE SISTRN_CCTR IN SISLOG_WCTR<1>,1 SETTING CC ELSE CC = 0
   END
   IF CC > 0 THEN
      BEGIN CASE
         CASE IDATE < SISLOG_WCTR.DATE<1,CC>
         CASE IDATE > SISLOG_WCTR.DATE<1,CC>
            SISLOG_WCTR.DATE<1,CC> = IDATE
            SISLOG_WCTR.TIME<1,CC> = ITIME
         CASE ITIME > SISLOG_WCTR.TIME<1,CC>
            SISLOG_WCTR.TIME<1,CC> = ITIME
      END CASE
   END ELSE
      BEGIN CASE
         CASE SISLOG_LAST.DATE = "" OR IDATE > SISLOG_LAST.DATE
            SISLOG_LAST.SERVER = SISTRN_SERVER
            SISLOG_LAST.CLIENT = SISTRN_CLIENT
            SISLOG_LAST.DATE = IDATE
            SISLOG_LAST.TIME = ITIME
         CASE IDATE <> SISLOG_LAST.DATE
         CASE ITIME > SISLOG_LAST.TIME
            SISLOG_LAST.SERVER = SISTRN_SERVER
            SISLOG_LAST.CLIENT = SISTRN_CLIENT
            SISLOG_LAST.TIME = ITIME
      END CASE
   END
   MATWRITE SISLOG_REC ON SIS_LOG, CONO:SISTRN_EMP
   SISLOG_LOCKED = ""
   RETURN
*
*---- UPDATE SISLOG_REC FROM TYPE 06
*
23500*
   LOCATE SISTRN_CCTR IN SISLOG_WCTR<1>,1 SETTING SP1 ELSE
      SISLOG_WCTR<1,SP1> = SISTRN_CCTR
   END
   BEGIN CASE
      CASE SISLOG_WCTR.DATE<1,SP1> = "" OR IDATE > SISLOG_WCTR.DATE<1,SP1>
         SISLOG_WCTR.DATE<1,SP1> = IDATE
         SISLOG_WCTR.TIME<1,SP1> = ITIME
      CASE IDATE <> SISLOG_WCTR.DATE<1,SP1>
      CASE ITIME > SISLOG_WCTR.TIME<1,SP1>
         SISLOG_WCTR.TIME<1,SP1> = ITIME
   END CASE
   LOCATE TIMESTMP IN SISLOG_WCTR.TIMESTMP<1,SP1>,1 BY "AR" SETTING SP2 ELSE NULL
   IF SISLOG_WCTR.TIMESTMP<1,SP1,SP2> # TIMESTMP THEN
      SISLOG_WCTR.TIMESTMP = INSERT(SISLOG_WCTR.TIMESTMP,1,SP1,SP2,TIMESTMP)
   END
   MATWRITE SISLOG_REC ON SIS_LOG, CONO:SISTRN_EMP
   SISLOG_LOCKED = ""
   RETURN
*
*---- IDLE & LUNCH
23700*
   SCNT = DCOUNT(SISLOG_WCTR,VM)
   FOR SP1 = 1 TO SCNT
      BEGIN CASE
         CASE SISLOG_WCTR.DATE<1,SP1> = "" OR IDATE > SISLOG_WCTR.DATE<1,SP1>
            SISLOG_WCTR.DATE<1,SP1> = IDATE
            SISLOG_WCTR.TIME<1,SP1> = ITIME
         CASE IDATE <> SISLOG_WCTR.DATE<1,SP1>
         CASE ITIME > SISLOG_WCTR.TIME<1,SP1>
            SISLOG_WCTR.TIME<1,SP1> = ITIME
      END CASE
      LOCATE TIMESTMP IN SISLOG_WCTR.TIMESTMP<1,SP1>,1 BY "AR" SETTING SP2 ELSE NULL
      IF SISLOG_WCTR.TIMESTMP<1,SP1,SP2> # TIMESTMP THEN
         SISLOG_WCTR.TIMESTMP = INSERT(SISLOG_WCTR.TIMESTMP,1,SP1,SP2,TIMESTMP)
      END
   NEXT SP1
   RETURN
*
*---- DAILY.TIME.MATL
*
24000*
   DTM_ID = CONO : SISTRN_EMP :"*": SISLOG_DATE :"*": SISLOG_SHIFT
   MATREADU DTM.REC FROM DAILY.TIME.MATL, DTM_ID LOCKED
      SKIP_TRN = 1
      GOTO 24009
   END ELSE
      MAT DTM.REC = ""
   END
   DTM_LOCKED = DTM_ID
24009*
   RETURN
*
*---- INSERT A RECORD IN DTM
24200*
   DPC = DCOUNT(DTM.TIME.STAMP,VM)
   TSS = TIMESTMP + 1
   LOCATE TSS IN DTM.TIME.STAMP<1>,1 BY "AR" SETTING DP ELSE NULL
   IF DP < = DPC THEN
      ACNT = DCOUNT(DTM.A1A,",")
      FOR A = 1 TO ACNT
         AA = FIELD(DTM.A1A,",",A)
         AA1 = FIELD(AA,"-",1)
         AA2 = FIELD(AA,"-",2)
         IF AA2 = "" THEN AA2 = AA1
         FOR N = AA1 TO AA2
            DTM.REC(N) = INSERT(DTM.REC(N),1,DP,0,"")
         NEXT N
      NEXT A
   END
   RETURN
*
*---- GET DAILY.TIME SEQ
24300*
   READU SEQ FROM CONTROL, CONO : "DAILY.TIME" LOCKED
      SKIP_TRN = 1
      GOTO 24309
   END ELSE
      SEQ = 10001
   END
   NEXT.SEQ = SEQ + 1
   IF NEXT.SEQ > 999999 THEN NEXT.SEQ = 10001
   WRITE NEXT.SEQ ON CONTROL, CONO : "DAILY.TIME"
24309*
   RETURN
*
*---- SORT DAILY.TIME.MATL
24500*
   TS1 = SISLOG_DATE*100000 + SISLOG_TIME
   CCTR = ""
   CCTR.TS = ""
   DPC = DCOUNT(DTM.TYPE,VM)
   FOR DPX = 1 TO DPC
      TP = DTM.TYPE<1,DPX>
      CC = DTM.CCTR<1,DPX>
      TS = DTM.TIME.STAMP<1,DPX>
      PT = DTM.TIME.ST<1,DPX>
      BEGIN CASE
         CASE TP = "M"
            STIME = ""
         CASE TP = "C" AND DPX > 1
            STIME = DTM.TIME.ST<1,DPX-1>
         CASE (TP = "L" OR TP = "I") AND DPX > 1
            STIME = DTM.TIME<1,DPX-1>
            TS1 = TS
         CASE 1
            IF CC = "" THEN
               SP1 = 0
            END ELSE
               LOCATE CC IN SISLOG_WCTR<1>,1 SETTING SP1 ELSE SP1 = 0
            END
            IF SP1 = 0 THEN
               TSX = TS1
               TS1 = TS
            END ELSE
               LOCATE TS IN SISLOG_WCTR.TIMESTMP<1,SP1>,1 BY "AR" SETTING SP2 ELSE NULL
               IF SP2 = 1 THEN
                  TS2 = 0
               END ELSE
                  TS2 = SISLOG_WCTR.TIMESTMP<1,SP1,SP2-1>
               END
               LOCATE CC IN CCTR<1>,1 SETTING SP3 ELSE
                  SP3 = DCOUNT(CCTR,VM)+1
                  CCTR<1,SP3> = CC
               END
               TS3 = CCTR.TS<1,SP3> + 0
               CCTR.TS<1,SP3> = TS
               IF TS2 = 0 AND TS3 = 0 THEN
                  TSX = TS1
                  TS1 = TS
               END ELSE
                  IF TS2 > TS3 THEN TSX = TS2 ELSE TSX = TS3
               END
            END
            STIME = MOD(TSX,100000)
            STIME = OCONV(STIME,"MTS")
            STIME = STIME[1,2]:STIME[4,2]
      END CASE
      DTM.TIME.ST<1,DPX> = STIME
      IF STIME # PT THEN
         P1 = DPX
         GOSUB 24600
      END
   NEXT DPX
   RETURN
*
*---- CALCULATE TIME DATA
24600*
   FOR PP = P1 TO P1
      ST = DTM.TIME.ST<1,PP>
      ET = DTM.TIME<1,PP>
      IF ET < ST THEN ET = ET + 2400
      ELAP.MIN = (INT(ET/100)*60 + MOD(ET,100)) - (INT(ST/100)*60 + MOD(ST,100))
      ELAP.HRS = INT(ELAP.MIN*100/60 + 0.5)
      TC = DTM.TIME.CODE<1,PP>
      BEGIN CASE
         CASE TC = "01"
            DTM.REG.TIME<1,PP> = ELAP.HRS
         CASE TC = "02"
            DTM.OVR.TIME<1,PP> = ELAP.HRS
         CASE TC = "03"
            DTM.DUB.TIME<1,PP> = ELAP.HRS
      END CASE
      DTM.LAPS.TIME<1,PP> = ELAP.HRS
   NEXT PP
   RETURN
*
*---- ERROR ROUTINE
*
90000*
   IF RMODE # "PHANTOM" THEN
      CRT @(0,23):CL:ERRMSG:
      INPUT REPLY,1:
      CRT @(0,23):CL:
   END
   RETURN
*
*---- END OF PROGRAM
*
99999*
   STOP
END
