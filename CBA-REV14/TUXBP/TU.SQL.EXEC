SUBROUTINE TU.SQL.EXEC(DBHANDLE,SQLSTAT,SQLHANDLE,RTN.STATUS)
**** SUBROUTINE FOR SQL INTERFACE  (cloned from UT.SQL)
*
** SBClient Host 3GL API
** Copyright (C) Ardent Software Inc. 1998
** Copyright (C) UniData, Inc. 1996, 1997
** Copyright (C) System Builder Corporation. 1995
**
**      This software is the proprietary property and contains
**      trade secrets of Ardent Software, Inc. Any unauthorized use,
**      disclosure or duplication is strictly prohibited.
**      All rights reserved.
*
******************************************************************
* This routine executes an SQL statement against the currently connected
* database
* Passed:   DBHANDLE    -  data base handle
*           SQLSTAT     -  valid SQL statement for target database
* Returned: SQLHANDLE   -  handle returned from SQL statement,
*                          uniquely identifying this specific statement
*           RTN.STATUS  -  operation status
******************************************************************
*
 INCLUDE TUBP USER.INCLUDE.H
 INCLUDE TUBP TU.API.H
 INCLUDE TUBP SPECIAL.H
 INCLUDE TUBP ROC.MAIN.H
*
PROMPT NUL
*
EQU MODE TO 3; * Execute SQL statement
*
LAST.ACTION = 5
RTN.STATUS = 0
SQLHANDLE = NUL
*
ACTION = 1
 INCLUDE TUBP ECHO.OFF.H
LOOP
ON ACTION GOSUB 100, 200, 300, 400, 900
WHILE ACTION AND NOT(RTN.STATUS) DO
ACTION = ACTION + 1
REPEAT
 INCLUDE TUBP ECHO.ON.H
RETURN
*
100 *
*
IF INDEX(SQLSTAT,AM,1) THEN CALL TU.CHANGE(AM,TOKENS<1,RTX.AM>,SQLSTAT)
IF INDEX(SQLSTAT,VM,1) THEN CALL TU.CHANGE(VM,TOKENS<1,RTX.VM>,SQLSTAT)
IF INDEX(SQLSTAT,SVM,1) THEN CALL TU.CHANGE(SVM,TOKENS<1,RTX.SVM>,SQLSTAT)
PARAMETER = DBHANDLE:SEMI:SQLSTAT
L = LEN(PARAMETER)
IF L < 800 THEN ACTION = LAST.ACTION - 1; * statement will fit in input buffer of 1K
RETURN
*
200 *
*
* The statement is too big for input buffer of 1K
* So we will break it down into chunks
TEMP.MODE = 6; * SetSQL - Set pointer to start of SQL buffer
STARTP = 1
ENDP = 800
LOOP WHILE ENDP AND PARAMETER[ENDP,1] # ' ' DO
ENDP = ENDP - 1
REPEAT
* send first chunk
Z = PARAMETER[STARTP,ENDP-1]
CRT SQL.LEAD.SEQ:TEMP.MODE:SEMI:Z:TU.TAIL:
INPUT RTN.STATUS:
INPUT VALUE:
TEMP.MODE = 7; * AppendSQL - Append to SQL buffer
RETURN
*
300 *
*
* Send remaining chunks, one at a time
L = L - ENDP
STARTP = STARTP + ENDP
IF L > 799 THEN
ENDP = 800
LOOP WHILE ENDP AND PARAMETER[ENDP,1] # ' ' DO
ENDP = ENDP - 1
REPEAT
IF ENDP > 1 THEN ENDP = ENDP - 1 ELSE ENDP = 1
END ELSE ENDP = L + 2
IF L THEN
Z = PARAMETER[STARTP,ENDP]
CRT SQL.LEAD.SEQ:TEMP.MODE:SEMI:DBHANDLE:SEMI:Z:TU.TAIL:
INPUT RTN.STATUS:
INPUT VALUE:
ACTION = ACTION - 1; * repeat this subroutine
END
RETURN
*
400 *
*
* OK, all loaded, so ready to do the execute...
PARAMETER = DBHANDLE:SEMI
RETURN
*
900 *
*
CRT SQL.LEAD.SEQ:MODE:SEMI:PARAMETER:TU.TAIL:
INPUT RTN.STATUS:
LOOP
INPUT BUFFER:
SQLHANDLE = SQLHANDLE:BUFFER
WHILE LEN(BUFFER) >= 80 DO REPEAT
IF INDEX(SQLHANDLE,TOKENS<1,RTX.AM>,1) THEN CALL TU.CHANGE(TOKENS<1,RTX.AM>,AM,SQLHANDLE)
IF INDEX(SQLHANDLE,TOKENS<1,RTX.VM>,1) THEN CALL TU.CHANGE(TOKENS<1,RTX.VM>,VM,SQLHANDLE)
IF INDEX(SQLHANDLE,TOKENS<1,RTX.SVM>,1) THEN CALL TU.CHANGE(TOKENS<1,RTX.SVM>,SVM,SQLHANDLE)
ACTION = 0
RETURN
***********************************************************
* The End
***********************************************************
END
