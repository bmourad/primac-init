PROGRAM SMART.QUERY
*
** SBClient Host 3GL API
** Copyright (C) Ardent Software Inc. 1998
** Copyright (C) UniData, Inc. 1996, 1997
** Copyright (C) System Builder Corporation. 1995
**
**      This software is the proprietary property and contains
**      trade secrets of Ardent Software, Inc. Any unauthorized use,
**      disclosure or duplication is strictly prohibited.
**      All rights reserved.
*
*
* Description : Smart Query Builder
*
 INCLUDE TUBP TU.API.H
 INCLUDE TUBP SPECIAL.H
 INCLUDE TUBP ROC.H
 INCLUDE TUBP USER.INCLUDE.H
 INCLUDE TUBP CASE.INVERT.OFF.H
*
10 *
*
VALS = NUL; MSG = ""; ERROR = FALSE
CALL TU.INIT(ERROR)
IF (ERROR) THEN
CALL TU.RESOLVE.STATUS(ERROR, MSG)
CRT "Cannot Initialize ROC"
CRT MSG
GOTO 999
END
ROCH = NUL
CALL ROC.GETHANDLE("this", ROCH, ERROR)
IF ERROR THEN
CALL TU.RESOLVE.STATUS(ERROR, MSG)
CRT "Unable To Resolve ROC Handle"
CRT MSG
VALS = NUL
GOTO 998
END
ATTR = "parent":AM:"rpc_server":AM:"object_name"
VALS = ROCH :AM:ROCH :AM:"SMART.QUERY"
CALL ROC.CREATE("qbmainclass", ATTR, VALS, NUL, ERROR)
IF ERROR THEN
CALL ROC.GETHANDLE("SMART.QUERY", VALS, ERROR)
IF ERROR OR NOT(VALS) THEN
CALL TU.RESOLVE.STATUS(ERROR, MSG)
CRT "Cannot create Smart Query"
CRT MSG
VALS = NUL
GOTO 998
END ELSE
QBH = VALS
ATTR = "emphasized":ROC.US:"drawable":ROC.US:"status"
VALS = TRUE:ROC.US:TRUE:ROC.US:NUL
CALL ROC.SET(QBH, ATTR, VALS, STATUS)
END
END ELSE
QBH = VALS
END
LOOP
ERROR = FALSE; ATTR = "run"; VALS = TRUE
CALL ROC.SET(QBH, ATTR, VALS, ERROR)
IF ERROR THEN
CALL TU.RESOLVE.STATUS(ERROR, MSG)
CRT "Cannot set RUN attribute"
CRT MSG
VALS = NUL
GOTO 998
END
CALL ROC.MAIN(ROC.SERVE, "this", NUL, NUL, NUL, ERROR)
IF ERROR THEN
CALL TU.RESOLVE.STATUS(ERROR, MSG)
CRT "Cannot Start RPC Server"
CRT MSG
VALS = NUL
GOTO 998
END
VALS = NUL
CALL ROC.GET(QBH, "defn_rec", VALS, ERROR)
UNTIL VALS = NUL DO
BEGIN CASE
CASE VALS<10>[1, 1] = "T" OR VALS<10>[1, 1] = "P"
CALL ROC.SET(QBH, "drawable", FALSE, ERROR)
CRT
CALL TU.SQ.DO.QUERY(VALS, QBH)
CRT; CRT "Press Any Key To Return To Smart Query ... ":
ECHO OFF; INPUT ANS, 1:; ECHO ON
CALL ROC.SET(QBH, "drawable", TRUE, ERROR)
CASE VALS = "RUNTIME-CANCEL"
NULL
CASE TRUE
ATTR = "status":ROC.US:"emphasized"
DVALS = "Running Query ...":ROC.US:FALSE
CALL ROC.SET(QBH, ATTR, DVALS, ERROR)
*
CALL TU.SQ.DO.QUERY(VALS, QBH)
*
ATTR = "status":ROC.US:"emphasized"
DVALS = "Done.":ROC.US:TRUE
CALL ROC.SET(QBH, ATTR, DVALS, ERROR)
END CASE
REPEAT
998 ERROR = FALSE
CALL ROC.DESTROY(QBH, ERROR)
999 IF PTERM THEN EXECUTE "PTERM CASE INVERT"; * universe
END
