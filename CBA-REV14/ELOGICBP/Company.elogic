SUBROUTINE Company.elogic(FUNCTION, ARGS)
**********************************************
* REVISION    - [12.0]
* Copyright 1995 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - eLOGICBP
* PROGRAM     - Company.elogic
* BY          - ABDULLAH JIBALY; CBA
* DATE        - 08/15/2002
* DESCRIPTION - BUSINESS LOGIC FOR COMPANY SETUP
*
*ENDDOC
**********************************************
  ;*
  ;* Libraries and initialization
  ;*
*COPY>PMC.CPYLIB>COMPANY
  DEFFUN toXML(STR) CALLING "XML_FORMAT_CDATA"
  DEFFUN RECORD2XML(REC,ID,CPYLIB.PATH,RET.LIST,PROP.LIST)
  ;*
  ;* Function handler
  ;*
  ERROR_INVALID_FUNCTION = "Invalid function name."
  BEGIN CASE
    CASE FUNCTION = "getCompany"
      GOSUB getCompany
    CASE FUNCTION = "getCompanyList"
      GOSUB getCompanyList
    CASE 1
      ERR.STRING = ERROR_INVALID_FUNCTION
      GOSUB setupErrorMsg
      FUNCTION = ERR.STRING
  END CASE
  SWAP @AM WITH "" IN FUNCTION
  FUNCTION = '<?xml version="1.0"?>':FUNCTION
RETURN

  ;**
  ;* Returns the company record in XML
  ;*
  ;* @param  ARG<1> The company number, or empty string for default company
  ;* @return FUNCTION Company record in XML
  ;* @see    PMCBP GET.CONO
  ;*;
getCompany:
  ;*
  ;* Get parameters
  ;*
  CONO = ARGS<1>
  ;*
  ;* Setup error strings
  ;*
  ERR.NOTEXIST.FILE = "Database file error."
  ERR.NOTEXIST.REC  = "Record not found."
  ERR.INVALID.COMP  = "Invalid company ID."
  ;*
  ;* Open files
  ;*
  ERR.STRING = ''
  OPEN 'COMPANY' TO COMPANY ELSE ERR.STRING = ERR.NOTEXIST.FILE
  OPEN 'CONTROL' TO CONTROL ELSE ERR.STRING = ERR.NOTEXIST.FILE
  IF ERR.STRING THEN
    GOSUB setupErrorMsg
    FUNCTION = ERR.STRING
    RETURN
  END
  ;*
  ;* Look for default company number
  ;*
  IF CONO = '' THEN
    READV CONO FROM CONTROL, "MASTER", 1 ELSE
      ERR.STRING = ERR.NOTEXIST.REC
      GOSUB setupErrorMsg
      FUNCTION = ERR.STRING
      RETURN
    END
  END
  ;*
  ;* Read company
  ;*
  MATREAD COMP.REC FROM COMPANY,CONO ELSE
    ERR.STRING = ERR.INVALID.COMP
    GOSUB setupErrorMsg
    FUNCTION = ERR.STRING
    RETURN
  END
  ;*
  ;* Setup and run RECORD2XML
  ;*
  CPYLIB.PATH = "PMC.CPYLIB/COMPANY"
  MATBUILD REC FROM COMP.REC
  FUNCTION = RECORD2XML(REC,CONO,CPYLIB.PATH,"","")
  SWAP @AM WITH "" IN FUNCTION
RETURN

  ;**
  ;* Returns the list of companies in XML
  ;*
  ;* @return FUNCTION List of companies
  ;*;
getCompanyList:
  ;*
  ;* Setup error strings
  ;*
  ERR.NOTEXIST.FILE = "Database file error."
  ;*
  ;* Open files
  ;*
  ERR.STRING = ''
  OPEN 'COMPANY' TO COMPANY ELSE
    ERR.STRING = ERR.NOTEXIST.FILE
    GOSUB setupErrorMsg
    FUNCTION = ERR.STRING
    RETURN
  END
  ;*
  ;* Select all company records and place them in a list
  ;*
  CMD = "SSELECT COMPANY"
  UDTEXECUTE CMD CAPTURING JUNK RETURNING JUNK
  FUNCTION = '<company-list>'
  LOOP
    READNEXT COMP_ID ELSE EXIT
    FUNCTION<-1> = '<company id=':QUOTE(COMP_ID):'/>'
  REPEAT
  FUNCTION<-1> = '</company-list>'
  SWAP @AM WITH '' IN FUNCTION
RETURN

  ;**
  ;* Sets up an XML error message
  ;*
  ;* @param  ERR.STRING  The error message
  ;* @return ERR.STRING  The xml error message
  ;*;
setupErrorMsg:
  ERR.STRING = '<error>':toXML(ERR.STRING):'</error>'
RETURN
*
