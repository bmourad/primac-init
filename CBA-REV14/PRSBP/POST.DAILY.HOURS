*********************************************************************
* REVISION    - [08.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - PRSBP
* PROGRAM     - POST.DAILY.HOURS
* AUTHOR      - NICK AMENDOLA, C.B.A.;MODIFIED BY CAROL SAGE
* DATE        - 08/19/85;MODIFIED 06/25/87
* DESCRIPTION - Post hours captured by Job Costing to the PAYROLL
*               INPUT files. Overtime is calculated if the
*               appropriate flag is set in the Company file.
*********************************************************************
*
*---- COPY STATEMENTS
*
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>EMPLOYEE
*COPY>PRS.CPYLIB>DAILY.HOURS
*COPY>PRS.CPYLIB>PAYREG
*COPY>PRS.CPYLIB>PAYROLL.HOURS
*COPY>CPYLIB>CHAR
*
*---- DEFINE VARIABLES
*
      DIM SAVE.TBL(20)
      EQU SAVE.DIV         TO SAVE.TBL(1)
      EQU SAVE.DEPT        TO SAVE.TBL(2)
      EQU SAVE.CCTR        TO SAVE.TBL(3)
      EQU SAVE.REG         TO SAVE.TBL(4)
      EQU SAVE.OT          TO SAVE.TBL(5)
      EQU SAVE.DT          TO SAVE.TBL(6)
      EQU SAVE.REG.NON     TO SAVE.TBL(7)
      EQU SAVE.OT.NON      TO SAVE.TBL(8)
      EQU SAVE.DT.NON      TO SAVE.TBL(9)
*
*---- SET-UP
*
      PROMPT ""
      DETAIL.BY.DEPT.WORKED = 1;********  MAY CHANGE FOR CBA CUSTOMER
      PROCREAD X ELSE
         ERRMSG = "MUST BE EXECUTED FROM A PROC"
         GOSUB 91000
         STOP
      END
      CONO = X<1>
      CO.NAME = X<2>
      END.DATE = X<3>
      BATCH.NO = X<4>
      BATCH.DAYS = X<5>
      BATCH.CYCLE = X<6>
      BEGIN CASE
      CASE BATCH.CYCLE = "W"
         BATCH.WEEKS = 1000
      CASE BATCH.CYCLE = "B"
         BATCH.WEEKS = 2000
      CASE BATCH.CYCLE = "S"
         BATCH.WEEKS = 2167
      CASE BATCH.CYCLE = "M"
         BATCH.WEEKS = 4334
      CASE 1
         ERRMSG = "INVALID PAY CYCLE ENTERED"
         GOSUB 91000
         STOP
      END CASE
      ERROR.FLG = 0
*
*---- OPEN ALL FILES
*
      OPEN "CONTROL" TO CONTROL ELSE ERRMSG="CANNOT OPEN CONTROL FILE";GOSUB 91000;STOP
      OPEN "COMPANY" TO COMPANY ELSE ERRMSG="CANNOT OPEN COMPANY FILE";GOSUB 91000;STOP
      OPEN "DAILY.HOURS" TO DAILY.HOURS ELSE ERRMSG="CANNOT OPEN DAILY.HOURS FILE";GOSUB 91000;STOP
      OPEN "EMPLOYEE" TO EMPLOYEE ELSE ERRMSG="CANNOT OPEN EMP FILE";GOSUB 91000;STOP
      OPEN "PAYREG" TO PAYREG ELSE ERRMSG="CANNOT OPEN PAYREG FILE";GOSUB 91000;STOP
      OPEN "BATCH1" TO BATCH1 ELSE ERRMSG="CANNOT OPEN BATCH1 FILE";GOSUB 91000;STOP
*
*---- INITIALIZATION
*
      MATREAD COMP.REC FROM COMPANY, CONO ELSE
         ERRMSG = "CANNOT LOCATE COMPANY RECORD - ":CONO
         GOSUB 91000
         STOP
      END
      MATREAD HRS.REC FROM CONTROL,CONO:'PAYROLL.HOURS' ELSE MAT HRS.REC=''
      HRS.CNT=COUNT(HRS.DESC,VM)+(HRS.DESC#'')
      IF HRS.CNT < 1 OR HRS.CNT > 11 THEN
         ERRMSG='NEED TO SET UP PAYROLL HOURS FOR COMPANY ':CONO
         GOSUB 91000;GOTO 99999
      END
      MATREAD PAY.REC FROM BATCH1, CONO:BATCH.NO ELSE
         MAT PAY.REC = ""
         PAY.MISC.DED = 'Y'
      END
      BATCH.HRS = PAY.HOURS
      BATCH.MISC.DED = PAY.MISC.DED
      EMP = ""
      DIV = ""
      DEPT = ""
      CCTR = ""
      MAT SAVE.TBL = ""
      SAVE.CNT = 0
*
*---- MAIN PROCESSING
*
100*
      READNEXT ID ELSE
         IF SAVE.CNT > 0 THEN GOSUB 1000
         IF ERROR.FLG THEN ERRMSG = "YOU NEED TO RUN THE POSTING ERROR REPORT"; GOSUB 91000
         GOTO 99999
      END
      MATREADU DHR.REC FROM DAILY.HOURS, ID ELSE
         RELEASE DAILY.HOURS, ID
         GOTO 100
      END
      IF EMP # FIELD(ID,"!",1)[4,99] THEN
         IF SAVE.CNT > 0 THEN GOSUB 1000
         MAT SAVE.TBL = ""
         SAVE.CNT = 0
         POST.ERROR = ""
         EMP = FIELD(ID,"!",1)[4,99]
         MATREAD EMP.REC FROM EMPLOYEE, CONO:EMP ELSE
            POST.ERROR = "EMPLOYEE NOT ON FILE"
         END
         BEGIN CASE
         CASE POST.ERROR  # ''
         CASE EMP.STATUS = "S"
            POST.ERROR = "SALARIED EMPLOYEE"
         CASE EMP.STATUS = "H"
            NULL
         CASE 1
            POST.ERROR = "INVALID EMPLOYEE TYPE"
         END CASE
         IF POST.ERROR # '' THEN
            DHR.STATUS = POST.ERROR
            MATWRITE DHR.REC ON DAILY.HOURS,ID
            ERROR.FLG = 1
            GOTO 100
         END
         GOSUB 500
         IF POST.ERROR = "" AND PRIOR.BATCH # "" AND PRIOR.BATCH # BATCH.NO THEN
            POST.ERROR = "BATCH MISMATCH"
         END
         IF POST.ERROR = "" THEN
            PRINT @(0,21):"PROCESSING EMPLOYEE NUMBER : ":EMP:
         END
      END
      IF EMP.PAY.CYCLE # BATCH.CYCLE THEN
         RELEASE DAILY.HOURS,ID
         GOTO 100
      END
      IF DETAIL.BY.DEPT.WORKED THEN
         DIV = FIELD(ID,"!",2)
         DEPT = FIELD(ID,"!",3)
         CCTR = FIELD(ID,"!",4)
      END ELSE
         DIV = EMP.DIV
         DEPT = EMP.DEPT
         CCTR = EMP.COST.CNTR
      END
      IF POST.ERROR = "" THEN
         DHR.STATUS = "POSTED"
      END ELSE
         DHR.STATUS = POST.ERROR
         ERROR.FLG = 1
      END
      MATWRITE DHR.REC ON DAILY.HOURS, ID
      IF DHR.STATUS # "POSTED" THEN GOTO 100
*
*---- ACCUMULATE EMPLOYEE HOURS
*
200*
      SV = 0
      FOR S = 1 TO SAVE.CNT UNTIL SV > 0
         IF SAVE.DIV<S> = DIV AND SAVE.DEPT<S> = DEPT AND SAVE.CCTR<S> = CCTR THEN SV = S
      NEXT S
      IF SV = 0 THEN
         SAVE.CNT = SAVE.CNT + 1
         SV = SAVE.CNT
         SAVE.DIV<SV> = DIV
         SAVE.DEPT<SV> = DEPT
         SAVE.CCTR<SV> = CCTR
      END
      IF CO.CALC.JCS.OT='Y' THEN GOTO 250
      SAVE.REG<SV>= SAVE.REG<SV>+ DHR.REG
      SAVE.OT<SV> = SAVE.OT<SV> + DHR.OT
      SAVE.DT<SV> = SAVE.DT<SV> + DHR.DT
      SAVE.REG.NON<SV>= SAVE.REG.NON<SV>+ DHR.REG.NON
      SAVE.OT.NON<SV> = SAVE.OT.NON<SV> + DHR.OT.NON
      SAVE.DT.NON<SV> = SAVE.DT.NON<SV> + DHR.DT.NON
      GOTO 100
*
*---- CALCULATE OVERTIME IF REQUIRED
*
250*
      HRS=DHR.REG    ;GOSUB 300
      HRS=DHR.OT     ;GOSUB 300
      HRS=DHR.DT     ;GOSUB 300
      HRS=DHR.REG.NON;GOSUB 350
      HRS=DHR.OT.NON ;GOSUB 350
      HRS=DHR.DT.NON ;GOSUB 350
      GOTO 100
*
*---- OVERTIME FOR CHARGABLE HOURS
300*
      BEGIN CASE
      CASE TOT.HRS >= 4000
         SAVE.OT<SV> =SAVE.OT<SV> +HRS
      CASE TOT.HRS + HRS > 4000
         SAVE.REG<SV>=SAVE.REG<SV>+4000-TOT.HRS
         SAVE.OT<SV> =SAVE.OT<SV> +TOT.HRS+HRS-4000
      CASE 1
         SAVE.REG<SV>=SAVE.REG<SV>+HRS
      END CASE
      TOT.HRS=TOT.HRS+HRS
      RETURN
*
*---- OVERTIME FOR NONCHARGABLE HOURS
350*
      BEGIN CASE
      CASE TOT.HRS >= 4000
         SAVE.OT.NON<SV> =SAVE.OT.NON<SV> +HRS
      CASE TOT.HRS + HRS > 4000
         SAVE.REG.NON<SV>=SAVE.REG.NON<SV>+4000-TOT.HRS
         SAVE.OT.NON<SV> =SAVE.OT.NON<SV> +TOT.HRS+HRS-4000
      CASE 1
         SAVE.REG.NON<SV>=SAVE.REG.NON<SV>+HRS
      END CASE
      TOT.HRS=TOT.HRS+HRS
      RETURN
*
*---- ACCUMULATE PRIOR PAYROLL HOURS
*
500*
      AVAL.ISSUE = ""
      UPD.ISSUE = 0
      PRIOR.HRS = ""
      PRIOR.BATCH = ""
      FOR ISSUE = 1 TO 20
         MATREAD PAY.REC FROM PAYREG, CONO:EMP:ISSUE ELSE
            AVAL.ISSUE<-1> = ISSUE
            GOTO 588
         END
         IF PAY.STATUS = "" THEN
            BEGIN CASE
            CASE UPD.ISSUE = 0
               UPD.ISSUE = ISSUE
               PRIOR.BATCH = PAY.BATCH.NO
            CASE PRIOR.BATCH # BATCH.NO AND PAY.BATCH.NO = BATCH.NO
               PRIOR.BATCH = PAY.BATCH.NO
               UPD.ISSUE = ISSUE
               PRIOR.HRS = ""
            END CASE
            FOR R = 1 TO PAY.RECORDS
               FOR H=1 TO HRS.CNT
                  PRIOR.HRS = PRIOR.HRS + PAY.HOURS<1,R,HRS.SMV<1,H>>
               NEXT H
            NEXT R
         END
588*
      NEXT ISSUE
      IF PRIOR.HRS = "" THEN
         PRIOR.HRS = BATCH.HRS<1,1,5> + BATCH.HRS<1,1,7>
      END
      TOT.HRS=PRIOR.HRS
      IF UPD.ISSUE = 0 THEN
         ACNT = COUNT(AVAL.ISSUE,AM) + (AVAL.ISSUE # "")
         FOR II = 1 TO ACNT UNTIL UPD.ISSUE > 0
            IF AVAL.ISSUE<II> > 0 AND AVAL.ISSUE<II> < 21 THEN UPD.ISSUE = AVAL.ISSUE<II>
         NEXT II
         IF UPD.ISSUE = 0 THEN POST.ERROR = "NO AVAILABLE CHECKS"
      END
      RETURN
*
*---- UPDATE PAYROLL INPUT FILE
*
1000*
      MATREADU PAY.REC FROM PAYREG, CONO:EMP:UPD.ISSUE ELSE
         MAT PAY.REC = ""
         PAY.CONO = CONO
         PAY.EMP = EMP
         PAY.ISSUE = UPD.ISSUE
         PAY.BATCH.NO = BATCH.NO
         PAY.DAYS = BATCH.DAYS
         PAY.WEEKS = BATCH.WEEKS
         PAY.RATE = EMP.RATE
         PAY.MISC.DED = BATCH.MISC.DED
         PAY.TOT.INC = 0
         PAY.SHIFT = EMP.SHIFT
         PAY.RECORDS = 1
         IF BATCH.HRS<1,1,5> > 0 OR BATCH.HRS<1,1,7> > 0 THEN
            PAY.DIV = EMP.DIV
            PAY.DEPT = EMP.DEPT
            PAY.COST.CNTR = EMP.COST.CNTR
            PAY.HOURS<1,1,5> = BATCH.HRS<1,1,5>
            PAY.HOURS<1,1,7> = BATCH.HRS<1,1,7>
            PAY.TOT.HRS<1,1> = PAY.HOURS<1,1,5> + PAY.HOURS<1,1,7>
         END ELSE
            PAY.DIV = DIV
            PAY.DEPT = DEPT
            PAY.COST.CNTR = CCTR
         END
      END
*
      FOR SV = 1 TO SAVE.CNT
         DIV = SAVE.DIV<SV>
         DEPT = SAVE.DEPT<SV>
         CCTR = SAVE.CCTR<SV>
         FND = 0
         FOR R = 1 TO PAY.RECORDS UNTIL FND
            IF PAY.DIV<1,R> = DIV AND PAY.DEPT<1,R> = DEPT AND PAY.COST.CNTR<1,R> = CCTR THEN FND = R
         NEXT R
         IF FND > 0 THEN
            R = FND
         END ELSE
            PAY.RECORDS = PAY.RECORDS + 1
            R = PAY.RECORDS
            PAY.DIV<1,R> = DIV
            PAY.DEPT<1,R> = DEPT
            PAY.RATE<1,R> = EMP.RATE
            PAY.SHIFT<1,R> = EMP.SHIFT
            PAY.COST.CNTR<1,R> = CCTR
         END
         PAY.HOURS<1,R,1>=PAY.HOURS<1,R,1>+SAVE.REG<SV>
*
         LOCATE '2' IN HRS.SMV<1>,1 SETTING FNDHRS ELSE
            FND.OT=0
            PAY.HOURS<1,R,1>=PAY.HOURS<1,R,1>+SAVE.OT<SV>
            GOTO 1010
         END
         FND.OT=1
         PAY.HOURS<1,R,2>=PAY.HOURS<1,R,2>+SAVE.OT<SV>
1010*
         LOCATE '3' IN HRS.SMV<1>,1 SETTING FNDHRS ELSE
            FND.DT=0
            BEGIN CASE
            CASE FND.OT
               PAY.HOURS<1,R,2>=PAY.HOURS<1,R,2>+SAVE.DT<SV>+SAVE.DT.NON<SV>
            CASE 1
               PAY.HOURS<1,R,1>=PAY.HOURS<1,R,1>+SAVE.DT<SV>+SAVE.DT.NON<SV>
            END CASE
            GOTO 1050
         END
         FND.DT=1
         PAY.HOURS<1,R,3>=PAY.HOURS<1,R,3>+SAVE.DT<SV>+SAVE.DT.NON<SV>
1050*
         LOCATE '8' IN HRS.SMV<1>,1 SETTING FNDHRS ELSE
            FND.REGNON=0
            PAY.HOURS<1,R,1>=PAY.HOURS<1,R,1>+SAVE.REG.NON<SV>
            GOTO 1051
         END
         FND.REGNON=1
         PAY.HOURS<1,R,8>=PAY.HOURS<1,R,8>+SAVE.REG.NON<SV>
1051*
         LOCATE '9' IN HRS.SMV<1>,1 SETTING FNDHRS ELSE
            BEGIN CASE
            CASE FND.OT
               PAY.HOURS<1,R,2>=PAY.HOURS<1,R,2>+SAVE.OT.NON<SV>
            CASE FND.REGNON
               PAY.HOURS<1,R,8>=PAY.HOURS<1,R,8>+SAVE.OT.NON<SV>
            CASE 1
               PAY.HOURS<1,R,1>=PAY.HOURS<1,R,1>+SAVE.OT.NON<SV>
            END CASE
            GOTO 1052
         END
         PAY.HOURS<1,R,9>=PAY.HOURS<1,R,9>+SAVE.OT.NON<SV>
1052*
         PAY.TOT.HRS<1,R>=PAY.TOT.HRS<1,R>+SAVE.REG<SV>+SAVE.OT<SV>+SAVE.DT<SV>+SAVE.REG.NON<SV>+SAVE.OT.NON<SV>+SAVE.DT.NON<SV>
         N2 = COUNT(PAY.HOURS<1,R>,SM) + 1
         FOR N = 1 TO N2
            IF PAY.HOURS<1,R,N> = 0 THEN PAY.HOURS<1,R,N> = ""
         NEXT N
      NEXT SV
*
      MATWRITE PAY.REC ON PAYREG, CONO:EMP:UPD.ISSUE
      RETURN
*
*---- ERROR ROUTINE
*
91000*
      PRINT @(0,23):ERRMSG:
      INPUT REPLY:
      PRINT @(0,23):CL:
      RETURN
*
*---- END OF PROGRAM
*
99999*
      STOP
   END
