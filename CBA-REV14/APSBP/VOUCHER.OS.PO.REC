  SUBROUTINE VOUCHER.OS.PO.REC(VM.NO,PAY.VALUES,MAT ITEMS,CUR.PO,PAY.FLAG)
*COPY>CPYLIB>COM1
*COPY>PMC.CPYLIB>COM.COMPANY
*COPY>POS.CPYLIB>COM.MPO
*COPY>APS.CPYLIB>COM.APS.FILE.VARS
*COPY>APS.CPYLIB>COM.TEMP.VOUCHERS
*COPY>APS.CPYLIB>COM.VOUCHER.MAINT
*********************************************************************
* REVISION    - [08.1]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* PROGRAM     - VOUCHER.OS.PO.REC
* BY          - DANIEL GRUENENFELDER
* DATE        - 04/16/92
* DESCRIPTION
* This program vouchers Outside PO to Receipts, allocates cost to Jobs
* CREATED FOR TASK 16414
* NUM.ITEMS IS ONLY IN HERE FOR SELECTING LINES TO PAY, THE FUNCTIONALITY
* OF WHICH IS NOT PRESENTLY AN OPTION ON THE CHANGE LINE.
* SAME FOR LABEL 70000
* TASK 18746 RKB 01/25/95 * BUG WITH HOW VOUCHER DIST IS HANDLED
* T19149 RKB 05/01/95 * add support for credit div,dept,cctr
*T20016 RKB 1/26/96 * ADD div support
*T20016.1 RKB 2/6/96 * add restriction on modify to accrual acct
*                      code , div,dept,cctr on acct lines created from
*                      a po with accrual set to yes
*T21177 diane 11/06/1996 * REV11 UPG
*T21177 diane 05/11/1998 * REMOVE CALL TO EDIT.SUB TYP=0
*T24605 gil 12/09/1999 * CORRECTING THE OUTSIDE PO VIA VOUCHER ERROR
*                      * Fix page size
*T23319 alex 04/11/2000 * Fix calculation for a UOM Type "C"; it is
*                         defaulting as an "EA" Type.
*C38073 cm 03/23/2001 * Category field does not display in GUI.
*T25755 cm 04/19/2001 * Modify pgm to work with new format of OUTSIDE.PO
*                       file with seq numbers.
*T25978 adelgado 02/06/2002 * Add the use of prompts (S,SR,SB,ST)
*T29039 lross 01/22/2007 * Correct Negative price rounding.
********************************************************************
*
**** INSERT FILE EQUATES
*
*COPY>APS.CPYLIB>TEMP.VOUCHERS
*COPY>APS.CPYLIB>VEND.PO.STATS
*COPY>APS.CPYLIB>VEND.PROD.STATS
*COPY>APS.CPYLIB>VEND.VOUCH.STATS
*COPY>APS.CPYLIB>VEND.STATS
*COPY>APS.CPYLIB>APS.FILE.VARS
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>CATEGORY
*COPY>JCS.CPYLIB>CATEGORY.OSP
*COPY>PMC.CPYLIB>VEND
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>SYSCOM
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>JCS.CPYLIB>JOB
*COPY>JCS.CPYLIB>DAILY.OSP
*COPY>PMC.CPYLIB>DEPARTMENT
*COPY>PMC.CPYLIB>DIVISION
*COPY>PMC.CPYLIB>COST.CNTR
*COPY>JCS.CPYLIB>OPERATION
*COPY>POS.CPYLIB>OUTSIDE.PO
*COPY>JCS.CPYLIB>JOB.CUTOFF.NO
*COPY>CPYLIB>GEN.XREF
*
*
**** SETUP FOR SYSTEM ERRMSGS
*
  SYS.TYPE = 1
  CALL SYSCOM(MAT SYSCOM.REC)
  MAT DIV.REC = ''; MAT DEPT.REC = ''; MAT OPER.REC = ''; MAT CCTR.REC = ''
  MAT GEN.XREF.REC = ''
  MAT DOS.REC = ''
*
* OPEN FILE(S)
*
  OPEN 'JOB' TO JOB ELSE
    ERRMSG = "CANNOT OPEN JOB FILE"
    GOTO 93000
  END
  OPEN 'DIVISION' TO DIVISION ELSE
    ERRMSG = "CANNOT OPEN DIVISION FILE"
    GOTO 93000
  END
  OPEN 'DEPARTMENT' TO DEPARTMENT ELSE
    ERRMSG = "CANNOT OPEN DEPARTMENT FILE"
    GOTO 93000
  END
  OPEN 'COST.CNTR' TO COST.CNTR ELSE
    ERRMSG = "CANNOT OPEN COST.CNTR FILE"
    GOTO 93000
  END
  OPEN 'OPERATION' TO OPERATION ELSE
    ERRMSG = "CANNOT OPEN OPERATION FILE"
    GOTO 93000
  END
  OPEN 'DAILY.OSP' TO DAILY.OSP ELSE
    ERRMSG = "CANNOT OPEN DAILY.OSP FILE"
    GOTO 93000
  END
  OPEN 'CATEGORY.OSP' TO CATEGORY.OSP ELSE
    ERRMSG = "CANNOT OPEN CATEGORY.OSP FILE"
    GOTO 93000
  END
*
*** INT
*
  GXR.CO=CONO
  GXR.HEADING<1,2>='DESCRIPTION'
  GXR.ATT<1,1>=0;GXR.ATT<1,2>=2;GXR.LEN<1,1>=5;GXR.LEN<1,2>=30
  BEGIN.PAGE = 8
*T2460 5PAGE.SIZE = 11
  PAGE.SIZE = 6      ;*T24605
  LINE.SPACE = 2
  LN = 0
  LNO = 0
  LINES = 0
  OLD.START.LINE = 0
  VSTAT.KEY = CONO : TVO.VEND :"!": TVO.PO.TYPE
  VPS.KEY = VSTAT.KEY :"!": VSTAT.PO<1,VM.NO>
  VOUCH.NUMBERS = ''
  NEWPASS1=1
  CHANGE.LN=''
  TEMP.ACCT.ACCRUE=0 ;*T20016.1
*VOUCH.NUMBERS<1>=VOUCHERED QTY, <2>=VOUCHERED AMT, <3>=WAS TAX FLAG
*<4>=WAS TAXABLE FLAG ,<5>=NEW RECEIVED QTY ,<6>=OPERATION PERFORMED
*
*--- PRINT HEADINGS
*
  ECD.ACTION=2 ; CALL SCRN.EDIT
  SCV.REC(1)<ECD.SCRN.NO> = TVO.VEND<1,1>;ECD.NUM=1;ECD.ACTION=5;CALL SCRN.EDIT
  READV VEND.NAME FROM VEND,CONO:TVO.VEND,1 ELSE VEND.NAME = "UNKNOWN"
  SCV.REC(2)<ECD.SCRN.NO> = VEND.NAME;ECD.NUM=2;ECD.ACTION=5;CALL SCRN.EDIT
  SCV.REC(25)<ECD.SCRN.NO>=VSTAT.PO<1,VM.NO>;ECD.NUM=25;ECD.ACTION=5;CALL SCRN.EDIT
  HDG.PONUM=VSTAT.PO<1,VM.NO>
  OPO.FND = 1
  MATREAD OPO.REC FROM OUTSIDE.PO, CONO:VSTAT.PO<1,VM.NO> ELSE
    MAT OPO.REC = ''
    OPO.FND = 0
  END
*********************************************************************
  DIM ITEMS(100)
*
  ICNT = 0
  FOR X = 1 TO 100
  UNTIL ITEMS(X) = ''
    ICNT += 1
  NEXT X
  NUM.ITEMS = ICNT
  DONE = 0
*  FOR I = 1 TO NUM.ITEMS
*    LNO= ITEMS(I)
*      LN = I
*
*
  LINES = NUM.ITEMS
  NEWPASS1=1
  FIRST.DISPLAY=1
  GOSUB 10000
*
  GOSUB 2500
  GOTO 99999
*
*
100 
  BEFORE.AMOUNT=VOUCH.NUMBERS<5,LN>
*T25755 v
*  MATREAD VPDS.REC FROM VEND.PROD.STATS,VPS.KEY:"!":OPO.JOB.NO<1,LNO>:"!":OPO.PROD.LINE<1,LNO> ELSE MAT VPDS.REC = ''
  MATREAD VPDS.REC FROM VEND.PROD.STATS,VPS.KEY:"!":OPO.JOB.NO<1,LNO>:"!":OPO.PROD.LINE<1,LNO>:"@":OPO.PROD.SEQ<1,LNO> ELSE MAT VPDS.REC = ''
*T25755 ^
  ECD.NUM=26
  ECD.SUB.NUM=LN
  IF VOUCH.NUMBERS<5,LN> # "" THEN
    ECD.DEFAULT=VOUCH.NUMBERS<5,LN>
  END ELSE
    ECD.DEFAULT = OPO.QTY<1,LNO> - SUM(VPDS.REC.QTY)
  END
  IF ECD.DEFAULT < 0 THEN ECD.DEFAULT = 0
  ECD.HMSG = "ENTER IN ADDITIONAL QTY TO RECEIVE"
  ECD.ACTION=4;CALL SCRN.EDIT
  IF ECD.RET.VALUE # "END" THEN
    IF ECD.RET.VALUE = '' THEN
      ECD.RET.VALUE = 0
      VOUCH.NUMBERS<5,LN> = 0
    END ELSE
      VOUCH.NUMBERS<5,LN> = ECD.RET.VALUE
      BEFORE.AMOUNT=''
    END
  END ELSE
    VOUCH.NUMBERS<5,LN>=BEFORE.AMOUNT
    CHANGE.LN=''
    GOSUB 10000
    RETURN
  END
      *
*18746
  BEFORE.PAY = PAY.FLAG
  IF BEFORE.AMOUNT # VOUCH.NUMBERS<5,LN> THEN
    ECD.NUM=17 ; ECD.ACTION=4 ; CALL SCRN.EDIT
    IF ECD.RET.VALUE = 'E' OR ECD.RET.VALUE='END' THEN
      GOTO 100 ;* START OVER
    END ELSE
      ECD.NUM = 8
      ECD.SUB.NUM = LN
      SCV.REC(ECD.NUM)<ECD.SCRN.NO>=''
      PAY.FLAG = ECD.RET.VALUE
    END
  END
      *
101 
*
*T25755 v
  IF VOUCH.NUMBERS<6,LN> # '' THEN
    ECD.RET.VALUE = VOUCH.NUMBERS<6,LN>
  END ELSE
*T25755 ^
    IF VOUCH.NUMBERS<5,LN> > 0 AND VPDS.OPER.PERF = '' THEN
      MATREAD CCTR.REC FROM COST.CNTR, CONO:VPDS.PO.CCTR<1,1> ELSE CCTR.DESC="UNKNOWN"
      ECD.NUM = 24; ECD.SUB.NUM = LN;ECD.VALDAT.CODE = 2
      ECD.VALDAT.FILE = OPERATION; ECD.PREFIX.ID = CONO
      ECD.ACTION=4; CALL SCRN.EDIT
IF @LOGNAME = 'cmykleb' THEN DEBUG
      BEGIN CASE
        CASE ECD.RET.VALUE='END'
          SCV.REC(24)<ECD.SCRN.NO>=VPDS.OPER.PERF
          ECD.NUM=24;ECD.ACTION=5;CALL SCRN.EDIT
          PAY.FLAG = BEFORE.PAY
          VOUCH.NUMBERS<5,LN> = BEFORE.AMOUNT
          OLD.START.LINE=0
          GOSUB 10000
          RETURN
        CASE ECD.VALDAT.ITEM # ''
          LOCATE ECD.RET.VALUE IN CCTR.OPER<1>,1 SETTING X ELSE
            ERRMSG='OPER # ':ECD.RET.VALUE:' DOES NOT BELONG UNDER CCTR # ':TVO.PO.CCTR<1,LN>
            GOSUB 91000;GOTO 101
          END
          VOUCH.NUMBERS<6,LN>=ECD.RET.VALUE
        CASE ECD.RET.VALUE='???'
          GXR.XREF=COST.CNTR
          GXR.FILE=OPERATION
          GXR.TOP.LINE='OPERATION XREF SEARCH'
          GXR.HEADING<1,1>='OPER'
          GXR.ATT<1,2>=1
          GXR.LOC=4
          GXR.ID=''
          GXR.SRCH.ID=VPDS.PO.CCTR<1,1>
          CALL GEN.XREF(MAT GEN.XREF.REC,PREFIX)
          ECD.ACTION=2;CALL SCRN.EDIT
          IF GXR.ID='' OR GXR.ID = 'END' THEN
            OLD.START.LINE=''
            GOSUB 10000
            PAY.FLAG = BEFORE.PAY
            VOUCH.NUMBERS<5,LN> = BEFORE.AMOUNT
            RETURN         
          END
          MATREAD OPER.REC FROM OPERATION, CONO:GXR.ID ELSE
            ERRMSG='OPERATION ':GXR.ID:' IS MISSING'
            GOSUB 91000
            PAY.FLAG = BEFORE.PAY
            VOUCH.NUMBERS<5,LN> = BEFORE.AMOUNT
            OLD.START.LINE=0
            GOSUB 10000
            RETURN
          END
          ECD.RET.VALUE=GXR.ID
          SCV.REC(24)<ECD.SCRN.NO>=ECD.RET.VALUE
          ECD.NUM=24;ECD.SUB.NUM=LN;ECD.ACTION=5;CALL SCRN.EDIT
        CASE 1
          GOTO 101
      END CASE
      VOUCH.NUMBERS<6,LN>=ECD.RET.VALUE
    END
  END ; * T25755
  OLD.START.LINE = 0
  GOSUB 10000
  RETURN
200 
* GET PO VOUCHER QTY - AMOUNT
*
*      ECD.NUM=11
*      ECD.SUB.NUM=LN
*      ECD.DEFAULT = SUM(VPDS.REC.QTY)+VOUCH.NUMBERS<5,LN>-SUM(VPDS.QTY)
*      ECD.HMSG =  "ENTER IN ADDITIONAL QTY TO VOUCHER"
*      ECD.ACTION = 4;CALL SCRN.EDIT
*      BEGIN CASE
*      CASE ECD.RET.VALUE NE "END" AND ECD.RET.VALUE > 0 
*         VOUCH.NUMBERS<1,LN> = ECD.RET.VALUE
*      CASE ECD.RET.VALUE = '' 
*         VOUCH.NUMBERS<1,LN> = 0
*      CASE 1
*         GOTO 299
*      END CASE
**
*      ECD.NUM=9
*      ECD.SUB.NUM=LN
*      ECD.DEFAULT = VOUCH.NUMBERS<1,LN>*(OPO.U.PRICE<1,LNO>/10000)
*      ECD.HMSG = "ENTER IN TOTAL DOLLAR AMOUNT FOR ADDITIONAL VOUCHERED QTY"
*      ECD.ACTION=4;CALL SCRN.EDIT
*      IF ECD.RET.VALUE # "END" THEN
*         VOUCH.NUMBERS<2,LN>=ECD.RET.VALUE
*         IF ECD.RET.VALUE = '' THEN VOUCH.NUMBERS<2,LN> = 0
*      END
*299   
** RETURN
*
* GET TAXABLE FLAG IF TAXABLE PO
300*
* ECD.NUM = 34
* ECD.SUB.NUM=LN
* ECD.ACTION = 4; CALL SCRN.EDIT
* IF ECD.RET.VALUE NE "E" THEN 
*   VOUCH.NUMBERS<3,LN> = ECD.RET.VALUE
* END
* RETURN
*
*---- TAX FLAG
400*
* IF VOUCH.NUMBERS<3,LN> = '' THEN 
*   VPDS.TAX.FLG = 'N'
*   VOUCH.NUMBERS<4,LN> = 'N'
*   SCV.REC(33)<ECD.SCRN.NO,LN> = 'N'
* END ELSE
*   VPDS.TAX.FLG = 'Y'
*   VOUCH.NUMBERS<4,LN> = 'Y'
*   SCV.REC(33)<ECD.SCRN.NO,LN> = 'Y'
* END
* ECD.NUM=33;ECD.SUB.NUM=LN;ECD.ACTION=5;CALL SCRN.EDIT
* RETURN
*
*--- OPTIONS
*
2500*
  MORE = 1
  LOOP
    IF NOT(NEWPASS1) THEN GOSUB 10000
    NEWPASS1=0
    ECD.NUM = 14
    SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ''
    ECD.ACTION = 4 ; CALL SCRN.EDIT
    ECD.VALDAT = ""
    OPTION = ECD.RET.VALUE
    BEGIN CASE
      CASE OPTION = 'E' OR OPTION = 'END' OR OPTION = ""
        MORE = 0
      CASE OPTION = 'S'
        LN = 1 + INT((LN-1)/PAGE.SIZE) * PAGE.SIZE + PAGE.SIZE
        IF LN > LINES THEN LN = 1
        GOSUB 10000
      * T25978 v
      CASE OPTION = 'SR'
        LN = 1 + INT((LN-1)/PAGE.SIZE) * PAGE.SIZE - PAGE.SIZE
        IF LN < 1 THEN LN = 1
        GOSUB 10000
      CASE OPTION = 'ST'
        LN = 1
        GOSUB 10000
      CASE OPTION = 'SB'
        LN = LINES
        GOSUB 10000
      * T25978 ^
      CASE OPTION = 'C'
        ECD.MAXV = LINES
        ECD.NUM = 15
        ECD.ACTION = 4
        CALL SCRN.EDIT
        IF ECD.RET.VALUE NE "END" AND ECD.RET.VALUE NE "" THEN
          LN = ECD.RET.VALUE
          IF ITEMS(LN) # '' THEN
            LNO = ITEMS(LN)
            CHANGE.LN=LN
            GOSUB 100
**********
**********            FOR X = 1 TO 4
**********              ON X GOSUB 100,200,300,400
**********            NEXT X
**********
          END
        END
      CASE 1 
*            GOSUB 2500
    END CASE
  WHILE MORE DO
  REPEAT
* NOW ADD THE LINES FROM THIS SCREEN TO TVO
  FOR I = 1 TO LINES
    LNO = ITEMS(I)
    IF LNO THEN
      LN = I
      GOSUB 7100
    END
  NEXT I
  RETURN   ;*TESTING
*TESTING GOTO 99999
*
*--- UPDATE TEMP.VOUCHERS
*
* REMOVE THIS PO FROM TVO HERE *
*
* ADD LINE TO TVO
7100*
  REV.QTY = VOUCH.NUMBERS<1,LN>
  REV.AMT = VOUCH.NUMBERS<2,LN>
  OLD.AP.AMT=AMT.ARRAY<1,LN>
  IF REV.QTY * 1 EQ 0 THEN GOTO 7199
*CSF 24232 v THE VEND.PROD.STATS REC HERE IS FROM THE LAST ONE READ WHICH
*            MAY NOT BE THE CURRENT LINE BEING OPERATED ON. MOVE THEM
*            DOWN TO ...SEE COMMENT BELOW ON INSERTION.
***CSF 23566
**IF VPDS.ORD.UN.COST<1,1>+0 # 0 THEN
**  REV.UN.COST = VPDS.ORD.UN.COST<1,1>
**END ELSE
**  BEGIN CASE
**  CASE REV.QTY > 0
***    REV.UN.COST = INT(REV.AMT / REV.QTY + .5) *10000
**    REV.UN.COST = INT(REV.AMT / REV.QTY * 10000 +.5)
**  CASE REV.QTY < 0
***    REV.UN.COST = INT(REV.AMT / REV.QTY - .5)*10000
**    REV.UN.COST = INT(REV.AMT / REV.QTY * 10000 -.5)
**  CASE  1
**    REV.UN.COST = 0
**  END CASE
**END
***
**TVO.GRS.AMT = TVO.GRS.AMT + REV.AMT
**TVO.MER.AMT = TVO.MER.AMT + REV.AMT
* CSF 24232 ^
*
  JPTR=1
  LOOP
    LOCATE OPO.JOB.NO<1,LNO> IN VPS.PROD<1>,JPTR SETTING PO.PROD.LN THEN
*T25755 v
*        IF OPO.PROD.LINE<1,LNO>=VPS.WHSE<1,PO.PROD.LN> THEN
      IF OPO.PROD.LINE<1,LNO>:'@':OPO.PROD.SEQ<1,LNO>=VPS.WHSE<1,PO.PROD.LN> THEN
*T25755 ^
        JPTR=0
      END ELSE
        JPTR=PO.PROD.LN+1
      END
    END ELSE
      PO.PROD.LN=1
      JPTR=0
    END
  WHILE JPTR DO REPEAT
  VPDS.KEY = VPS.KEY:"!":VPS.PROD<1,PO.PROD.LN>:"!":VPS.WHSE<1,PO.PROD.LN>
*
*     SET UP FOR DIV, DEPT, AND CCTR
  PODIV=OPO.DVDPCC<1,1,LNO>
  PODEPT=OPO.DVDPCC<1,2,LNO>
  POCCTR=OPO.DVDPCC<1,3,LNO>
  POOPER=OPO.OPER.CODE<1,1,LNO> ; * T25755
*      
  MATREAD VPDS.REC FROM VEND.PROD.STATS,VPDS.KEY ELSE NULL
*CSF 24232 v (COMMENT - INSERTION MADE HERE.)
*CSF 23566
  *T23319 v                                             
  BEGIN CASE                                            
    CASE VPS.U.M<1,PO.PROD.LN> = "M" ; ADJVAL = 10000000
    CASE VPS.U.M<1,PO.PROD.LN> = "C" ; ADJVAL = 1000000 
    CASE 1 ; ADJVAL = 10000                             
  END CASE                                              
  * IF VPS.U.M<1,PO.PROD.LN> = "M" THEN ADJVAL = 10000000 ELSE ADJVAL = 10000
  *T23319 ^
  IF PAY.FLAG # 'O' THEN VPDS.ORD.UN.COST<1,1> = VPDS.REC.UN.COST<1,1>
  IF VPDS.ORD.UN.COST<1,1>+0 # 0 THEN
    REV.UN.COST = VPDS.ORD.UN.COST<1,1>
  END ELSE
    BEGIN CASE
      CASE REV.QTY > 0
*    REV.UN.COST = INT(REV.AMT / REV.QTY + .5) *10000
*T21177    REV.UN.COST = INT(REV.AMT / REV.QTY * 10000 +.5)
        REV.UN.COST = INT(REV.AMT / REV.QTY * ADJVAL +.5)  ;*T21177
      CASE REV.QTY < 0
*    REV.UN.COST = INT(REV.AMT / REV.QTY - .5)*10000
*T21177    REV.UN.COST = INT(REV.AMT / REV.QTY * 10000 -.5)
        REV.UN.COST = INT(REV.AMT / REV.QTY * ADJVAL -.5)  ;*T21177
      CASE  1
        REV.UN.COST = 0
    END CASE
  END
*
  TVO.GRS.AMT = TVO.GRS.AMT + REV.AMT
  TVO.MER.AMT = TVO.MER.AMT + REV.AMT
  FND = 1
  PTR = 1
  MAXL = DCOUNT(TVO.PO.NOS,VM)
  DONE = 0
  LOOP
  UNTIL PTR > MAXL OR DONE = 1 DO
    LOCATE VSTAT.PO<1,VM.NO> IN TVO.PO.NOS<1>,PTR SETTING PO.FND ELSE FND = 0
    IF FND THEN 
*T25755 v
*        TVO.FND.ID = CONO:TVO.PO.NOS<1,PO.FND>:TVO.PO.PROD<1,PO.FND>:TVO.PO.WHSE<1,PO.FND>
*        OPO.FND.ID = CONO:VSTAT.PO<1,VM.NO>:OPO.JOB.NO<1,LNO>:OPO.PROD.LINE<1,LNO>
      TVO.FND.ID = CONO:TVO.PO.NOS<1,PO.FND>:TVO.PO.PROD<1,PO.FND>:TVO.PO.WHSE<1,PO.FND>:"@":TVO.PO.SEQ<1,PO.FND>
      OPO.FND.ID = CONO:VSTAT.PO<1,VM.NO>:OPO.JOB.NO<1,LNO>:OPO.PROD.LINE<1,LNO>:"@":OPO.PROD.SEQ<1,LNO>
*T25755 ^
      IF TVO.FND.ID = OPO.FND.ID THEN
        DONE = 1
      END ELSE
        PTR = PO.FND + 1
        DONE = 0
      END
    END ELSE
      PTR = PO.FND + 1
      DONE = 0
    END
  REPEAT
  IF DONE THEN 
    LOC = PO.FND
  END ELSE
    PTR = 1
    NFND = 0
    XX = 0
    LOOP
    UNTIL XX OR PTR > MAXL
      LOCATE VSTAT.PO<1,VM.NO> IN TVO.PO.NOS<1>,PTR SETTING NFND ELSE PTR = PTR + 1
      IF NFND THEN
        IF TVO.PO.PROD<1,NFND> = '' THEN 
          LOC = NFND
          XX = 1
        END ELSE
          PTR = NFND + 1
        END
      END
    REPEAT
    IF XX = 0 THEN LOC = PTR
  END
*
  ACCT.NO = '' ; AP.ACCT=''
  MATREAD CAOS.REC FROM CATEGORY.OSP,CONO:OPO.PROD.LINE<1,LNO> THEN
    IF OPO.ACCRUE = "Y" THEN
      TEMP.ACCT.ACCRUE=1 ;*T20016.1
      ACCT.NO = CAOS.ACCRU.LIAB
      AP.ACCT = CAOS.AP.ACCT
    END ELSE
      TEMP.ACCT.ACCRUE=0 ;* T20016.1
      ACCT.NO = CAOS.APL
      AP.ACCT=CAOS.AP.ACCT
    END
  END
  TVO.PO.DIV<1,LOC> = VPDS.PO.DIV<1,1>
  TVO.PO.DEPT<1,LOC> = VPDS.PO.DEPT<1,1>
  TVO.PO.CCTR<1,LOC> = VPDS.PO.CCTR<1,1>
*      update the account information
  IF ACCT.NO # "" THEN
    ACCT.NO=ACCT.NO:STR("0",IN.ACCT.LEN-LEN(ACCT.NO))
    ACCT.NO = ACCT.NO[1,IN.ACCT.LEN]
    PTR=1
    LOOP
      LOCATE ACCT.NO IN TVO.ACCT<1>,PTR SETTING POSIT THEN
        IF TVO.DIV<1,POSIT>=PODIV AND TVO.DEPT<1,POSIT>=PODEPT AND TVO.CCTR<1,POSIT>=POCCTR THEN
          TVO.DIST.AMT<1,POSIT>=TVO.DIST.AMT<1,POSIT>+REV.AMT-OLD.AP.AMT
          PTR=0
*T20016.1 v
          IF TEMP.ACCT.ACCRUE THEN
            VOUCHER.ACCRUE.FLAG<1,POSIT> = 1
          END
*T20016.1 ^        
        END ELSE
          PTR=POSIT+1
        END
      END ELSE
*T20016.1 v
        IF TEMP.ACCT.ACCRUE THEN
          VOUCHER.ACCRUE.FLAG<1,POSIT> = 1
        END
*T20016.1 ^        
        TVO.ACCT=INSERT(TVO.ACCT,1,POSIT;ACCT.NO)
        TVO.DIST.AMT=INSERT(TVO.DIST.AMT,1,POSIT;REV.AMT)
        TVO.ASSET.ID=INSERT(TVO.ASSET.ID,1,POSIT;'')
        TVO.DIV=INSERT(TVO.DIV,1,POSIT;PODIV)
        TVO.DEPT=INSERT(TVO.DEPT,1,POSIT;PODEPT)
        TVO.CCTR=INSERT(TVO.CCTR,1,POSIT;POCCTR)
*CSF 25150 v
        IF OPO.ACCRUE = 'Y' THEN
          TVO.ACCT.FLG=INSERT(TVO.ACCT.FLG,1,POSIT;"P")
        END ELSE TVO.ACCT.FLG<1,POSIT> = ''
*CSF 25150 ^
        PTR=0
      END
    WHILE PTR DO REPEAT
  END
  IF AP.ACCT # "" THEN
    AP.ACCT=AP.ACCT:STR("0",IN.ACCT.LEN-LEN(AP.ACCT))
    AP.ACCT=AP.ACCT[1,IN.ACCT.LEN]
*T20016 v
    PTR=1
    LOOP
      LOCATE AP.ACCT IN TVO.AP.ACCT<1>,PTR SETTING POSIT THEN
        IF TVO.AP.DIV<1,POSIT>=PODIV AND TVO.AP.DEPT<1,POSIT>=PODEPT AND TVO.AP.CCTR<1,POSIT>=POCCTR THEN
          PTR=0
        END ELSE
          PTR=POSIT+1
        END
      END ELSE
        TVO.AP.ACCT=INSERT(TVO.AP.ACCT,1,POSIT;AP.ACCT)
        TVO.AP.AMT=INSERT(TVO.AP.AMT,1,POSIT;'0')
*CSF 25150 v
        IF OPO.ACCRUE = 'Y' THEN
          TVO.AP.FLG=INSERT(TVO.AP.FLG,1,POSIT;'P')
        END ELSE TVO.AP.FLG<1,POSIT> = ''
*CSF 25150 ^
*T19149 v
        TVO.AP.DIV=INSERT(TVO.AP.DIV,1,POSIT;PODIV)
        TVO.AP.DEPT=INSERT(TVO.AP.DEPT,1,POSIT;PODEPT)
        TVO.AP.CCTR=INSERT(TVO.AP.CCTR,1,POSIT;POCCTR)
*T19149 ^    
        PTR=0
      END
    WHILE PTR DO
    REPEAT
*T20016 ^
    TVO.AP.AMT<1,POSIT>=TVO.AP.AMT<1,POSIT>-REV.AMT+OLD.AP.AMT
  END
  IF VPDS.OPER.PERF # '' THEN
    TVO.PO.OPER<1,LOC> = VPDS.OPER.PERF
  END ELSE
    TVO.PO.OPER<1,LOC> = VOUCH.NUMBERS<6,LN>
  END
  TVO.PO.PRD.LINE<1,LOC> = OPO.PROD.LINE<1,LNO>
  IF VOUCH.NUMBERS<5,LN> > 0 THEN
    TVO.NEW.RECEIPT<1,LOC> = 'Y'
  END ELSE
    TVO.NEW.RECEIPT<1,LOC> = ''
  END
  IF TVO.NEW.RECEIPT<1,LOC> = 'Y' THEN
    TVO.REC.DATE<1,LOC> = DATE()
    TVO.REC.QTY<1,LOC> = VOUCH.NUMBERS<5,LN>
    TVO.JOB<1,LOC> = OPO.JOB.NO<1,LNO>
    TVO.JOB.QTY<1,LOC> = VOUCH.NUMBERS<5,LN>
    TVO.JOB.AMT<1,LOC> = VOUCH.NUMBERS<7,LN>
  END ELSE
    TVO.REC.DATE<1,LOC> = ""
    TVO.REC.QTY<1,LOC> = ""
    TVO.JOB<1,LOC> = ""
    TVO.JOB.QTY<1,LOC> = ""
    TVO.JOB.AMT<1,LOC> = ""
  END
*
  TVO.PO.ACCT<1,LOC> = VPDS.PO.ACCT
*
  TVO.PO.NOS<1,LOC> = VSTAT.PO<1,VM.NO>
  TVO.PO.PROD<1,LOC> = VPS.PROD<1,PO.PROD.LN>
  TVO.PO.WHSE<1,LOC> = OPO.PROD.LINE<1,LNO>
  TVO.PO.UM<1,LOC> = VPS.U.M<1,PO.PROD.LN>
  TVO.PROD.DESC<1,LOC> = VPS.PROD.DESC<1,PO.PROD.LN>
  TVO.SEQ.NO<1,LOC> = VPS.SEQ.NO<1,PO.PROD.LN>
  TVO.PO.U.COST<1,LOC> = REV.UN.COST
  TVO.ENT.FLG<1,LOC> = LN
  TVO.PO.QTY<1,LOC> = REV.QTY
  TVO.PO.VOUCH<1,LOC> = REV.AMT
  TVO.PO.REC.COUNT<1,LOC> = 1
  TVO.AD.TAX.FLG<1,LOC> = VOUCH.NUMBERS<3,LN>
  TVO.TAXABLE<1,LOC> = VOUCH.NUMBERS<4,LN>
  TVO.PO.SEQ<1,LOC> = OPO.PROD.SEQ<1,LNO> ; * T25755
  PAY.VALUES = "P"
  PAY.VALUES<2> = "P"
7199*
  RETURN
*
*
*
***** SCROLL REC INFO ROUTINE
*
10000*
  START.LINE=1 + INT((LN-1)/PAGE.SIZE) * PAGE.SIZE
  LAST.LINE=START.LINE + PAGE.SIZE - 1
  IF LAST.LINE > LINES THEN LAST.LINE = LINES
  IF START.LINE=OLD.START.LINE THEN GOTO 10001
  OLD.START.LINE=START.LINE
  CNT=1
  FOR N=START.LINE TO LAST.LINE
    IP=ITEMS(N)
    SLN=BEGIN.PAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
*T25755 v
*     MATREAD VPDS.REC FROM VEND.PROD.STATS,VPS.KEY:"!":OPO.JOB.NO<1,IP>:"!":OPO.PROD.LINE<1,IP> ELSE
    MATREAD VPDS.REC FROM VEND.PROD.STATS,VPS.KEY:"!":OPO.JOB.NO<1,IP>:"!":OPO.PROD.LINE<1,IP>:"@":OPO.PROD.SEQ<1,IP> ELSE
*T25755 ^
      MAT VPDS.REC = ''
    END
    MATREAD JOB.REC FROM JOB,CONO:OPO.JOB.NO<1,IP> ELSE
      MAT JOB.REC = ''
    END
    P_X  = 0 ; P_Y = SLN ; P_VALUE = N "L#3" ; P_OPT = ""
    P_X  := AM:4 ; P_Y := AM:SLN ; P_VALUE := AM:OPO.JOB.NO<1,IP> "L#8"
*C38073 v
*     P_X  := AM:14 ; P_Y := AM:SLN ; P_VALUE := AM:OPO.PROD.LINE<1,IP> "L#8"
    P_X  := AM:13 ; P_Y := AM:SLN ; P_VALUE := AM:OPO.PROD.LINE<1,IP> "L#8"
*C38073 ^
    P_X  := AM:22 ; P_Y := AM:SLN ; P_VALUE := AM:OPO.DVDPCC<1,1,IP> "L#2"
    P_X  := AM:25 ; P_Y := AM:SLN ; P_VALUE := AM:OPO.DVDPCC<1,2,IP> "L#2"
    P_X  := AM:28 ; P_Y := AM:SLN ; P_VALUE := AM:OPO.DVDPCC<1,3,IP> "L#3"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    IF VOUCH.NUMBERS<6,N> # '' THEN
      P_X  = 33 ; P_Y = SLN ; P_VALUE = VOUCH.NUMBERS<6,N> "L#4" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    END ELSE
      IF TVO.PO.OPER<1,N> # "" THEN
        P_X  = 33 ; P_Y = SLN ; P_VALUE = TVO.PO.OPER<1,N>"L#4" ; P_OPT = ""
        CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
        VOUCH.NUMBERS<6,N>=TVO.PO.OPER<1,N>
      END ELSE
*T25755 v
*           P_X  = 33 ; P_Y = SLN ; P_VALUE = VPDS.OPER.PERF "L#4" ; P_OPT = ""
*           CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*           VOUCH.NUMBERS<6,N>=VPDS.OPER.PERF
        IF VPDS.OPER.PERF # "" THEN
          P_X  = 33;P_Y = SLN;P_VALUE = VPDS.OPER.PERF "L#4";P_OPT = ""
          CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
          VOUCH.NUMBERS<6,N>=VPDS.OPER.PERF
        END ELSE
          P_X  = 33;P_Y = SLN;P_VALUE = OPO.OPER.CODE<1,1,IP> "L#4";P_OPT = ""
          CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
          VOUCH.NUMBERS<6,N>=OPO.OPER.CODE<1,1,IP>
        END
*T23499 ^
      END
    END
    P_X  = 39 ; P_Y = SLN ; P_VALUE = OCONV(VPDS.REC.DATE<1,DCOUNT(VPDS.REC.DATE,VM)>,"D2/") "L#8" ; P_OPT = ""
    P_X  := AM:49 ; P_Y := AM:SLN ; P_VALUE := AM:OPO.UOM<1,IP> "R#3"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    IF VOUCH.NUMBERS<5,N>+0 # 0 THEN
      P_X  = 54 ; P_Y = SLN ; P_VALUE = OCONV(VOUCH.NUMBERS<5,N>,"MD2") "R#10" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    END ELSE
      P_X  = 54 ; P_Y = SLN ; P_VALUE = OCONV("0","MD2") "R#10" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    END
*CSF 24232 v
    IF FIRST.DISPLAY OR CHANGE.LN = N THEN
      IF PAY.FLAG = "O" THEN
*CSF 25430 v
*     VOUCH.NUMBERS<1,N> = SUM(VPDS.ORD.QTY) - OPO.CANCEL.QTY<1,IP> - SUM(SUM(VPDS.QTY))
        VOUCH.NUMBERS<1,N> = SUM(VPDS.ORD.QTY) - SUM(SUM(VPDS.QTY))
*CSF 25430 ^
*CSF 24232 v
        DESC.PRICE = VPDS.ORD.UN.COST<1,1>
*CSF 24232 ^
      END ELSE
        VOUCH.NUMBERS<1,N> = SUM(VPDS.REC.QTY)+VOUCH.NUMBERS<5,N>-SUM(SUM(VPDS.QTY))
*CSF 24232 v
        IF VPDS.REC.UN.COST<1,1>+0 = 0 THEN VPDS.REC.UN.COST<1,1> = VPDS.ORD.UN.COST<1,1>
        IF VPDS.REC.UN.COST<1,1>+0 = 0 THEN
          PMSG = 'Enter Unit Cost : '
          X=0; Y=22; TYP = 4; SCALER = 4; DEFAULT = OCONV(VPDS.ORD.UN.COST<1,1>,'MD4')
          MAXL=9; O.R = 'O'; MAXV="99999999"; MINV = 0; VALDAT = ''
          CALL EDIT.SUB
          IF VALUE # 'END' THEN VPDS.REC.UN.COST = VALUE
          P_X  = 0 ; P_Y = 22 ; P_VALUE = "" ; P_OPT = "CL"
          CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
          CHANGE.LN=''
        END
        DESC.PRICE = VPDS.REC.UN.COST<1,1>
      END
*CSF 24232 ^
*         IF OPO.DISCOUNT<1,IP> > 0 THEN
*           DESC.PRICE = INT((OPO.U.PRICE<1,IP>)*(1-(OPO.DISCOUNT<1,IP>/100))+.5)
*         END ELSE
*         VOUCH.NUMBERS<2,N> = VOUCH.NUMBERS<1,N>*U.PRICE
*CSF 24232 v
**    DESC.PRICE = VPDS.ORD.UN.COST<1,1>
*CSF 24232 ^
*         END
*T29039 v
      ROND=.5
      IF (VOUCH.NUMBERS<1,N>+0 < 0 AND DESC.PRICE > 0) OR (DESC.PRICE+0 < 0 AND VOUCH.NUMBERS<1,N> > 0) THEN ROND=-.5
      *T23319 v 
      BEGIN CASE 
        CASE OPO.UOM<1,IP> = "M" 
*         VOUCH.NUMBERS<2,N> = INT(((DESC.PRICE/1000)*(VOUCH.NUMBERS<1,N>/100)/100)+.5) 
          VOUCH.NUMBERS<2,N> = INT(((DESC.PRICE/1000)*(VOUCH.NUMBERS<1,N>/100)/100)+ROND) 
*         VOUCH.NUMBERS<7,N> = INT(((DESC.PRICE/1000)*(VOUCH.NUMBERS<5,N>/100)/100)+.5) 
          VOUCH.NUMBERS<7,N> = INT(((DESC.PRICE/1000)*(VOUCH.NUMBERS<5,N>/100)/100)+ROND) 
        CASE OPO.UOM<1,IP> = "C" 
*         VOUCH.NUMBERS<2,N> = INT(((DESC.PRICE/1000)*(VOUCH.NUMBERS<1,N>/100)/10)+.5)
          VOUCH.NUMBERS<2,N> = INT(((DESC.PRICE/1000)*(VOUCH.NUMBERS<1,N>/100)/10)+ROND)
*         VOUCH.NUMBERS<7,N> = INT(((DESC.PRICE/1000)*(VOUCH.NUMBERS<5,N>/100)/10)+.5) 
          VOUCH.NUMBERS<7,N> = INT(((DESC.PRICE/1000)*(VOUCH.NUMBERS<5,N>/100)/10)+ROND) 
        CASE 1 
*         VOUCH.NUMBERS<2,N> = INT((DESC.PRICE/100) * (VOUCH.NUMBERS<1,N>/100)+.5)
          VOUCH.NUMBERS<2,N> = INT((DESC.PRICE/100) * (VOUCH.NUMBERS<1,N>/100)+ROND)
*         VOUCH.NUMBERS<7,N> = INT((DESC.PRICE/100) * (VOUCH.NUMBERS<5,N>/100)+.5) 
          VOUCH.NUMBERS<7,N> = INT((DESC.PRICE/100) * (VOUCH.NUMBERS<5,N>/100)+ROND) 
*T29039 ^
      END CASE 
      * IF OPO.UOM<1,IP> = "M" THEN
      *   VOUCH.NUMBERS<2,N> = INT(((DESC.PRICE/1000)*(VOUCH.NUMBERS<1,N>/100)/100)+.5)
      *   VOUCH.NUMBERS<7,N> = INT(((DESC.PRICE/1000)*(VOUCH.NUMBERS<5,N>/100)/100)+.5)
      * END ELSE
      *   VOUCH.NUMBERS<2,N> = INT((DESC.PRICE/100) * (VOUCH.NUMBERS<1,N>/100)+.5)
      *   VOUCH.NUMBERS<7,N> = INT((DESC.PRICE/100) * (VOUCH.NUMBERS<5,N>/100)+.5)
      * END
      *T23319 ^
    END
*CSF 24232 ^
    P_X  = 66 ; P_Y = SLN ; P_VALUE = OCONV(VOUCH.NUMBERS<1,N>,"MD2") "R#11" ; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    P_X  = 4 ; P_Y = SLN+1 ; P_VALUE = JOB.DESC<1> "L#45" ; P_OPT = ""
    P_X  := AM:66 ; P_Y := AM:SLN+1 ; P_VALUE := AM:OCONV(VOUCH.NUMBERS<2,N>,"MD2") "R#11"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    CNT=CNT + 1
  NEXT N
  FOR M=CNT TO PAGE.SIZE
    SLN=BEGIN.PAGE + LINE.SPACE * MOD(M-1,PAGE.SIZE)
    P_X  = 0 ; P_Y = SLN ; P_VALUE = "" ;  P_OPT = "CL"   ; *T24605
    P_X<2> = 0; P_Y<2> = SLN+1 ; * T24605
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  NEXT M
*
10001 
  IF FIRST.DISPLAY THEN
    GOSUB 11000 ;* BUILD ARRAY OF QTY AND AMTS
    FIRST.DISPLAY=0
  END
  RETURN
*
10002*
  RETURN
*
***** CALC ORIG AMTS
*
11000*
*
  QTY.ARRAY='' ; AMT.ARRAY=''
  FOR N=1 TO LINES
    IP=ITEMS(N)
*T25755 v
*     MATREAD VPDS.REC FROM VEND.PROD.STATS,VPS.KEY:"!":OPO.JOB.NO<1,IP>:"!":OPO.PROD.LINE<1,IP> ELSE
    MATREAD VPDS.REC FROM VEND.PROD.STATS,VPS.KEY:"!":OPO.JOB.NO<1,IP>:"!":OPO.PROD.LINE<1,IP>:"@":OPO.PROD.SEQ<1,IP> ELSE
*T25755 ^
      MAT VPDS.REC = ''
    END
    MATREAD JOB.REC FROM JOB,CONO:OPO.JOB.NO<1,IP> ELSE
      MAT JOB.REC = ''
    END
    IF PAY.FLAG = "O" THEN
      QTY.ARRAY<1,N> = OPO.QTY<1,IP> - OPO.CANCEL.QTY<1,IP> - SUM(SUM(VPDS.QTY))
*CSF 24232 v
      DESC.PRICE = VPDS.ORD.UN.COST<1,1>
*CSF 24232 ^
    END ELSE
      QTY.ARRAY<1,N> = SUM(VPDS.REC.QTY)-SUM(SUM(VPDS.QTY))
*CSF 24232 v
      DESC.PRICE = VPDS.REC.UN.COST<1,1>
*CSF 24232 ^
    END
*T29039 v
    ROND=.5
    IF (QTY.ARRAY<1,N>+0 < 0 AND DESC.PRICE > 0) OR (DESC.PRICE+0 < 0 AND QTY.ARRAY<1,N> > 0) THEN ROND=-.5
*CSF 24232 v
**    DESC.PRICE = VPDS.ORD.UN.COST<1,1>
*CSF 24232 ^
    *T23319 v                                                            
    BEGIN CASE                                                               
      CASE OPO.UOM<1,IP> = "M"                                               
*       AMT.ARRAY<1,N> = INT(((DESC.PRICE/1000)*(QTY.ARRAY<1,N>/100)/100)+.5)
        AMT.ARRAY<1,N> = INT(((DESC.PRICE/1000)*(QTY.ARRAY<1,N>/100)/100)+ROND)
      CASE OPO.UOM<1,IP> = "C"                                               
*       AMT.ARRAY<1,N> = INT(((DESC.PRICE/1000)*(QTY.ARRAY<1,N>/100)/10)+.5) 
        AMT.ARRAY<1,N> = INT(((DESC.PRICE/1000)*(QTY.ARRAY<1,N>/100)/10)+ROND) 
      CASE 1                                                                 
*       AMT.ARRAY<1,N> = INT((DESC.PRICE/100) * (QTY.ARRAY<1,N>/100)+.5)     
        AMT.ARRAY<1,N> = INT((DESC.PRICE/100) * (QTY.ARRAY<1,N>/100)+ROND)     
*T29039 ^
    END CASE                                                                 
    * IF OPO.UOM<1,IP> = "M" THEN
    *  AMT.ARRAY<1,N> = INT(((DESC.PRICE/1000)*(QTY.ARRAY<1,N>/100)/100)+.5)
    * END ELSE
    *  AMT.ARRAY<1,N> = INT((DESC.PRICE/100) * (QTY.ARRAY<1,N>/100)+.5)
    * END
    *T23319 ^
  NEXT N

*
*
  RETURN
*
*** ENTER LINE NUMBER
70000*
  GOSUB 10000
  ECD.NUM = 15; SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""
  ECD.ACTION = 4; CALL SCRN.EDIT
  RETURN
***** CALLS FOR SYSCOM
91000*
  ERR.TYPE = 1; CALL SYSCOM(MAT SYSCOM.REC)
  RETURN
92000*
  ERR.TYPE = 2; CALL SYSCOM(MAT SYSCOM.REC)
  RETURN
93000*
  ERR.TYPE = 3; CALL SYSCOM(MAT SYSCOM.REC)
99999*
  FOR X = 1 TO 75
    SCV.REC(X)<ECD.SCRN.NO> = ""
  NEXT X
  ECD.ACTION=99; CALL SCRN.EDIT
  RETURN
  END

