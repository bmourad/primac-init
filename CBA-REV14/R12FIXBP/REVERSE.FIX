*COPY>CPYLIB>COM1              
*COPY>JCS.CPYLIB>COM.JCS.LINK  
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>JCS.CPYLIB>COM.INV.STATS 
*********************************************************************
*********************************************************************
*
*---- INSERT FILE EQUATE
*
*COPY>JCS.CPYLIB>JOB
*COPY>JCS.CPYLIB>JOB.MATL
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>CATEGORY
*COPY>ICS.CPYLIB>INV.CNV
*COPY>JCS.CPYLIB>JOB.REVERSE
*COPY>ICS.CPYLIB>INV_SERIAL
*COPY>ICS.CPYLIB>INV_RECEIPTS
*COPY>ICS.CPYLIB>INV_RECP_WHSE
*COPY>ICS.CPYLIB>INV_AUDIT_HIST
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>CPYLIB>CHAR
*COPY>ICS.CPYLIB>ICS.ID 
MAT IID.REC=''
*
*
DEFFUN CALC.STK.QTY (COST.QTY,MAT INV.CNV.REC,ROND,LN)
DEFFUN CALC.COST.QTY (STK.QTY,MAT INV.CNV.REC,ROND,LN)
DEFFUN CALC.DIAM(COST.QTY,STK.QTY,MAT INV.REC)
DEFFUN GET.INAH.SEQ(CONO,CONTROL.FILE,INV_AUDIT_HIST.FILE)
DEFFUN GET.RECP.ID(CONO,CONTROL.FILE,DATE)
*
DIM HOLD.ISTK.REC(ISTK.REC.SIZE); MAT HOLD.ISTK.REC=''
OPEN '','JOB.MATL' TO JOB.MATL ELSE STOP
OPEN '','INV_RECEIPTS' TO INV_RECEIPTS ELSE STOP
OPEN '','INV_RECEIPTS_TEMP' TO INV_RECEIPTS_TEMP ELSE STOP
OPEN '','INV_SERIAL' TO INV_SERIAL ELSE STOP
OPEN '','INV_SERIAL_DELETED' TO INV_SERIAL_DELETED ELSE STOP
OPEN '','INV_SERIAL_TEMP' TO INV_SERIAL_TEMP ELSE STOP
OPEN '','INV_RECP_WHSE' TO INV_RECP_WHSE ELSE STOP
OPEN '','INV_RECP_WHSE_TEMP' TO INV_RECP_WHSE_TEMP ELSE STOP
OPEN '','INV_AUDIT_HIST' TO INV_AUDIT_HIST ELSE STOP
OPEN '','INV_AUDIT_HIST_TEMP' TO INV_AUDIT_HIST_TEMP ELSE STOP
OPEN '','INV.WHSE' TO INV.WHSE ELSE STOP
OPEN '','INV.WHSE.LOC' TO INV.WHSE.LOC ELSE STOP
OPEN '','INV.WHSE.LOC.TEMP' TO INV.WHSE.LOC.TEMP ELSE STOP
OPEN '','INVENTORY' TO INVENTORY ELSE STOP
OPEN '','CATEGORY' TO CATEGORY ELSE STOP
OPEN '','CONTROL' TO CONTROL ELSE STOP
OPEN '','WAREHOUSE' TO WAREHOUSE ELSE STOP
*
*---- INITIALIZATION
*
SERIAL.FOUND=''
TODAY=DATE()
GEN.DIV = "00";GEN.DEPT = "00";GEN.CCTR = "000" 
OPEN.FLAG=1
ROND='.5'
*
*---- MAIN PROCESSING
PRINT @(-1)
PRINT @(5,5):'Enter original JMT key :':
INPUT ORG.ID
PRINT @(5,7):'Enter reversal JMT key :':
INPUT RV.ID
MATREAD JMT.REC FROM JOB.MATL,ORG.ID THEN
  CONO=ORG.ID[1,3]
  IWLOC=JMT.LOC       
  JWLOC=JMT.LOC       
  JPERIOD=JMT.MON<1,1>
END
MATREAD JMT.REC FROM JOB.MATL,RV.ID THEN
  PROD=OCONV(RV.ID,"G3!1")
  WHSE=OCONV(RV.ID,"G4!1")
  IWHSE=WHSE
  LOC=JMT.LOC
  INV.ID=CONO:PROD
  IWH.ID=INV.ID:"!":WHSE
  IWLO.ID=IWH.ID:"!":LOC
  GOSUB READ.INV.FILES
  POSTING.MON=JMT.MON<1,1>
  DRV.DATE=JMT.DATE
  DRV.JOB=OCONV(RV.ID,"G!1")[4,99] 
  CHECK.QTY=ABS(JMT.QTY)
  CNT=DCOUNT(JMT.PTR<1,1>,SVM)
  DEPL.RECP='' ; DEPL.QTY='' ; DEPL.COST=''
  FOR IDX=1 TO CNT
    DEPL.RECP<1,-1>=JMT.PTR<1,1,IDX>
    DEPL.QTY<1,-1>=ABS(JMT.PTR<1,2,IDX>)
    DEPL.COST<1,-1>=JMT.PTR<1,3,IDX>
  NEXT IDX
END
GOSUB PROCESS.INVENTORY
IF NOT(ERR) THEN
  GOSUB WRITE.RECORDS
END ELSE
  ACTION=9 ;* delete TEMP records         
  CALL JCS.IWH.SUB('','','','',ACTION,'') 
END
*
*
*************************************************************************
**** S U B R O U T I N E S **********************************************
*************************************************************************
*
******************
PROCESS.INVENTORY: 
******************
*
*
ERR=0
CHECK.QTY=''
;* this is for transaction that occured before
;* conversion on the generally tracked items.
;* location was the lowest level of tracking
;* and in rev12 we have SERIAL even for 
;* generally tracked items.
IF CATG.TRK.LVL='G' THEN
  BAIL.OUT=0
  ;* get serial numbers to reverse qty to
  ;* from !CNV location
  ;* this is created in data conversion process for 
  ;* fifo buckets that have 0 current qty since
  ;* we don't know to what location qty belonged to
  SLIST='' ; SLIST2='' ; SCNV.SERIAL=''
  SELKEY=IWH.ID:"!CNV"
  IDX="ISTK_PWL_IDX"
  SELECTINDEX IDX,SELKEY FROM INV_SERIAL_DELETED TO SLIST
  READSELECT SLIST.ARR FROM SLIST ELSE NULL
  SELECTINDEX IDX,SELKEY FROM INV_SERIAL TO SLIST2
  READSELECT SLIST.ARR2 FROM SLIST2 ELSE NULL
  SCNV.SERIAL=SLIST.ARR:AM:SLIST.ARR2
  CONVERT AM TO VM IN SCNV.SERIAL
  SC=0
  SCNT=DCOUNT(SCNV.SERIAL,VM)
  CHECK.QTY=ABS(JMT.QTY)
  ;* if there are no serials
  ;* then new has to be created.
  FOR SC=SCNT TO 1 STEP -1 UNTIL (BAIL.OUT)
    ISTK.ID=SCNV.SERIAL<1,SC>
    SERIAL=ISTK.ID[4,99]
    IF SERIAL='' THEN CONTINUE
    ISTK.ID=CONO:SERIAL
    S.OK=1
    IF RECORDLOCKED(INV_SERIAL_TEMP,ISTK.ID)=0 THEN
      DELETE INV_SERIAL_TEMP,ISTK.ID
    END
    MATREADU ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID ELSE
      MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID ELSE
        MATREADU ISTK.REC FROM INV_SERIAL_DELETED,ISTK.ID THEN
          ;*even though this transacion might not
          ;* go through this step is neccesary
          MATWRITEU ISTK.REC ON INV_SERIAL,ISTK.ID
          DELETE INV_SERIAL_DELETED,ISTK.ID
          RELEASE INV_SERIAL_DELETED,ISTK.ID
        END ELSE
          S.OK=0
        END
      END
    END
    IF ISTK.ORG.QTY<=0 THEN 
      DELETE INV_SERIAL,ISTK.ID
      S.OK=0
    END
    IF S.OK THEN
      IF ISTK.RECP.PERIOD<=JPERIOD  AND ISTK.PLACE='C' THEN
        SERIAL.QTY=ISTK.ORG.QTY-ISTK.CUR.QTY
        IF SERIAL.QTY>= CHECK.QTY THEN
          SERIAL.QTY=CHECK.QTY
          CHECK.QTY=0
        END ELSE
          CHECK.QTY-=SERIAL.QTY
        END
        IF CHECK.QTY=0 THEN BAIL.OUT=1
        INAH.SEQ=GET.INAH.SEQ(CONO,CONTROL,INV_AUDIT_HIST)
        INAH.ID=CONO:INAH.SEQ
        JMT.AUDIT.NO<1,-1>=INAH.SEQ 
        MAT HOLD.ISTK.REC=MAT ISTK.REC
        GOSUB ADJUST.CNV.SERIAL
        ;* now create serial to reverse to
        ;* from !CNV serial
        SERIAL="R":ISTK.RECP:"!":IWHSE:"!":IWLOC
        ISTK.ID=CONO:SERIAL
        ;* lock new serial before saving it
        MATREADU ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID ELSE NULL
        MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID ELSE  NULL
        MAT ISTK.REC=MAT HOLD.ISTK.REC
        ISTK.CUR.QTY=0
        ISTK.ORG.QTY=0
        ISTK.RSVB.QTY=0
        ISTK.LOC=IWLOC
        ISTK.AUDIT.NO=''
        MATWRITEU ISTK.REC ON INV_SERIAL_TEMP,ISTK.ID
        LOCATE ISTK.ID IN IID.ISTK<1> SETTING JUNK ELSE
          IID.ISTK<1,-1>=ISTK.ID
        END
        GOSUB ADJUST.SERIAL
        ;* add serial to IWLO
        LOCATE SERIAL IN IWLO.SERIAL<1> SETTING JUNK ELSE 
          IWLO.SERIAL<1,-1>=SERIAL                        
          MATWRITEU IWLO.REC ON INV.WHSE.LOC.TEMP,IWLO.ID 
          LOCATE IWLO.ID IN IID.IWLO<1> SETTING JUNK ELSE 
            IID.IWLO<1,-1>=IWLO.ID                        
          END                                             
        END                                               
        ;* add serial to INV_RECEIPTS
        INVR.ID=CONO:ISTK.RECP
        IF RECORDLOCKED(INV_RECEIPTS_TEMP,INVR.ID)=0 THEN     
          DELETE INV_RECEIPTS_TEMP,INVR.ID                         
        END                                                   
        MATREADU INVR.REC FROM INV_RECEIPTS_TEMP,INVR.ID ELSE 
          MATREADU INVR.REC FROM INV_RECEIPTS,INVR.ID ELSE    
            MAT INVR.REC=''
          END
        END
        LOCATE ISTK.ID[4,99] IN INVR.SERIAL.NO<1> SETTING JUNK ELSE
          INVR.SERIAL.NO<1,-1>=ISTK.ID[4,99]
          MATWRITEU INVR.REC ON INV_RECEIPTS,INVR.ID
          LOCATE INVR.ID IN IID.INVR<1> SETTING JUNK ELSE
            IID.INVR<1,-1>=INVR.ID
          END
        END
        IF NOT(ERR) THEN
          GOSUB SET.AUDIT.REFERENCE
        END
      END
    END
  NEXT SC
  IF CHECK.QTY>0 THEN
    SC=DCOUNT(SERIAL.FOUND<1>,VM)+1
    SERIAL='';SERIAL.FOUND<1,SC>=0                    
    SERIAL.QTY=CHECK.QTY
    INAH.SEQ=GET.INAH.SEQ(CONO,CONTROL,INV_AUDIT_HIST)
    INAH.ID=CONO:INAH.SEQ                             
    JMT.AUDIT.NO<1,-1>=INAH.SEQ                       
    GOSUB RECEIVE.NEW.SERIAL                          
    GOSUB ADJUST.SERIAL                               
    IF NOT(ERR) THEN                                  
      GOSUB SET.AUDIT.REFERENCE                       
      GOSUB UPDATE.UNIT.COST                          
    END                                               
  END
END
RETURN
*
******************
ADJUST.SERIAL: 
******************
*
S.OK=1
IF RECORDLOCKED(INV_SERIAL_TEMP,ISTK.ID)=0 THEN
  DELETE INV_SERIAL_TEMP,ISTK.ID
END
MATREADU ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID ELSE 
  MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID ELSE    
    S.OK=0
  END
END
IF (S.OK) THEN
  SER.ORG.QTY=ISTK.CUR.QTY
  SER.ORG.DIAM=ISTK.CUR.DIAM
  SER.ORG.STK.QTY=ISTK.CUR.STK.QTY
  ISTK.CUR.QTY+=SERIAL.QTY
  ISTK.CUR.STK.QTY=CALC.STK.QTY(ISTK.CUR.QTY,MAT INV.CNV.REC,'','')
  ISTK.RSVB.QTY+=SERIAL.QTY
  IF CATG.TYPE='L' OR CATG.TYPE='LR' OR CATG.TYPE='PC' THEN
    DIAM=CALC.DIAM(ISTK.CUR.QTY,ISTK.CUR.STK.QTY,MAT INV.REC)
    ISTK.CUR.DIAM=DIAM
  END
  ;* this would be true if serial that did not
  ;* exist on the system was reversed partially
  ;* so that serial would be created with that orig.
  ;* qty. Later if we reverse some more we have to 
  ;* increase orig. qty
  IF ISTK.CUR.QTY>ISTK.ORG.QTY THEN
    ISTK.ORG.QTY=ISTK.CUR.QTY
    ISTK.ORG.STK.QTY=CALC.STK.QTY(ISTK.ORG.QTY,MAT INV.CNV.REC,'','')
    IF CATG.TYPE='L' OR CATG.TYPE='LR' OR CATG.TYPE='PC' THEN  
      DIAM=CALC.DIAM(ISTK.ORG.QTY,ISTK.ORG.STK.QTY,MAT INV.REC)
      ISTK.ORG.DIAM= DIAM                                      
    END                                                        
  END
  ISTK.AUDIT.NO<1,-1>=INAH.SEQ
  LOCATE ISTK.ID IN IID.ISTK<1> SETTING JUNK ELSE
    IID.ISTK<1,-1> = ISTK.ID                     
  END
  MATWRITEU ISTK.REC ON INV_SERIAL_TEMP,ISTK.ID
  GOSUB ADJUST.IRW.ON.HAND
END
RETURN
*                                                                  
*********************                                              
ADJUST.CNV.SERIAL: 
*********************                                              
*                                                                  
;* we are spliting serial in location CNV into two serials now     
;* decrease qty on the serial !CNV for the qty that                
;* will be moved to serial in location from which usage occured.   
ISTK.ORG.QTY-=SERIAL.QTY                                           
IF ISTK.ORG.QTY >0 THEN                                            
  ISTK.ORG.STK.QTY=CALC.STK.QTY(ISTK.ORG.QTY,MAT INV.CNV.REC,'','')
END                                                                
MATWRITEU ISTK.REC ON INV_SERIAL_TEMP,ISTK.ID                      
LOCATE ISTK.ID IN IID.ISTK<1> SETTING JUNK ELSE                    
  IID.ISTK<1,-1>=ISTK.ID                                           
END                                                                
RETURN                                                             
*
***************
SET.INAH: 
***************
*
IF WHS.DIV='' THEN WHS.DIV=GEN.DIV        
MAT INAH.REC=''
INAH.PROD=PROD
INAH.WHSE=WHSE
INAH.TYPE='S'                             
INAH.SRC='UR'                              
INAH.DATE=DRV.DATE                        
INAH.PERIOD=POSTING.MON                   
INAH.JOB=DRV.JOB                          
INAH.RECP.NO=ISTK.RECP                 
INAH.LOC=IWLOC
INAH.TRAN=DRV.JOB                         
INAH.SERIAL=SERIAL
INAH.LOC=ISTK.LOC
INAH.QTY=SERIAL.QTY
INAH.CUR.QTY=SER.ORG.QTY
INAH.NEW.QTY=ISTK.CUR.QTY
INAH.CUR.DIAM=SER.ORG.DIAM
INAH.NEW.DIAM=ISTK.CUR.DIAM
INAH.CUR.STK.QTY=SER.ORG.STK.QTY
INAH.NEW.STK.QTY=ISTK.CUR.STK.QTY
INAH.DV.DP.CC=WHS.DIV:GEN.DEPT:GEN.CCTR 
INAH.OPER.ID=@LOGNAME
INAH.SYS.DATE=DATE()
INAH.SYS.TIME=TIME()
DRCNT=DCOUNT(DEPL.RECP<1>,VM)
TMP.QTY=SERIAL.QTY
;* even though we are returning stock back
;* we are update depletion att.
;* you can think of it as a negative usage.
COST=0
FOR DD=DRCNT TO 1 STEP -1 UNTIL TMP.QTY=0
  IF DEPL.QTY<1,DD> > 0 THEN
    IF DEPL.QTY<1,DD> >= TMP.QTY THEN
      INAH.DEPL.RECP<1,-1>=DEPL.RECP<1,DD>
      INAH.DEPL.QTY<1,-1>=TMP.QTY
      INAH.DEPL.COST<1,-1>=DEPL.COST<1,DD> ; * this is a unit cost !!!
      COST+=(DEPL.COST<1,DD>/10000)*((TMP.QTY/10)/(INV.COST.WT/100))
      DEPL.QTY<1,DD>-=TMP.QTY
      TMP.QTY=0
    END ELSE
      INAH.DEPL.RECP<1,-1>=DEPL.RECP<1,DD>
      INAH.DEPL.QTY<1,-1>=DEPL.QTY<1,DD>
      INAH.DEPL.COST<1,-1>=DEPL.COST<1,DD>;* this is a unit cost !!!
      COST+=(DEPL.COST<1,DD>/10000)*((DEPL.QTY<1,DD>/10)/(INV.COST.WT/100))
      TMP.QTY-=DEPL.QTY<1,DD>
      DEPL.QTY<1,DD>=0
    END
  END
NEXT DD
INAH.UNIT.COST=(ABS(COST)*1000*INV.COST.WT)/ABS(INAH.QTY)
INAH.EXT.COST=INT((INAH.UNIT.COST/10000) * ((INAH.QTY/10)/ (INV.COST.WT/100)) + ROND) 
INAH.UNIT.COST=INT(INAH.UNIT.COST+.5)
RETURN                                    
*
**********************
ADJUST.IRW.ON.HAND: 
**********************
*
IRW.ID=CONO:ISTK.RECP:"!":ISTK.WHSE                  
IRW.OK=1
IF RECORDLOCKED(INV_RECP_WHSE_TEMP,IRW.ID)=0 THEN
  DELETE INV_RECP_WHSE_TEMP,IRW.ID
END
MATREADU IRW.REC FROM INV_RECP_WHSE_TEMP,IRW.ID ELSE 
  MATREADU IRW.REC FROM INV_RECP_WHSE,IRW.ID ELSE    
    IRW.OK=0
  END
END
IF (IRW.OK) THEN
  IRW.ON.HAND += SERIAL.QTY                               
  LOCATE ISTK.ID[4,99] IN IRW.SERIAL.NO<1> SETTING JUNK ELSE
    IRW.SERIAL.NO<1,-1>=ISTK.ID[4,99]                       
  END                                                       
  MATWRITEU IRW.REC ON INV_RECP_WHSE_TEMP,IRW.ID        
  LOCATE IRW.ID IN IID.IRW<1> SETTING POS ELSE         
    IID.IRW<1,-1>=IRW.ID                               
  END                                                  
  MAT IRW.REC=''                                   
END ELSE
  ERR=1
END
RETURN                                               
*
***************
SET.INV.UM.CNV: 
***************
*
*COPY>ICSBP>INV.UM.CNV
RETURN
*
*****************
READ.INV.FILES: 
*****************
*
MATREAD INV.REC FROM INVENTORY, CONO : PROD ELSE
  ERR=1
  RETURN
END
MATREAD CATG.REC FROM CATEGORY, CONO : INV.LINE ELSE
  ERR=1
  RETURN
END
MATREAD WHSE.REC FROM WAREHOUSE,CONO:WHSE ELSE 
  ERR=1 ;RETURN
END
GOSUB SET.INV.UM.CNV
IWH.ID=CONO : PROD : "!" : IWHSE
MATREADU IWH.REC FROM INV.WHSE, IWH.ID THEN
  ACTION=1 ; TMP.ARR=''                    
  INAH.PROD=PROD ; INAH.WHSE=WHSE
  PERIOD=''
  JOB.ID=''
  CALL JCS.IWH.SUB(IWH.ID,JOB.ID,PERIOD,TMP.ARR,ACTION,OPEN.FLAG)       
  IF RECORDLOCKED(INV.WHSE.LOC.TEMP,IWLO.ID)=0 THEN
    DELETE INV.WHSE.LOC.TEMP,IWLO.ID
  END
  MATREADU IWLO.REC FROM INV.WHSE.LOC.TEMP,IWLO.ID ELSE
    MATREADU IWLO.REC FROM INV.WHSE.LOC,IWLO.ID ELSE MAT IWLO.REC=''
  END
END ELSE
  RELEASE INV.WHSE, IWH.ID
  ERR=1
  RETURN
END
RETURN
*
**********************
RECEIVE.NEW.SERIAL: 
**********************
*
;*
;* create INV_RECEIPTS record
;*
NEW.INVR.ID=GET.RECP.ID(CONO,CONTROL,DATE())
NEW.RECP=NEW.INVR.ID[4,99]
MATREADU INVR.REC FROM INV_RECEIPTS_TEMP,NEW.INVR.ID ELSE NULL
MAT INVR.REC=''
INVR.PROD=PROD
INVR.VEND='REVERSAL'
INVR.PO='REVERSAL'
INVR.PO.LN=1
INVR.ENT.DATE=DATE()
INVR.POST.DATE=DATE()
INVR.PERIOD=JMT.MON<1,1>
INVR.DIV=WHS.DIV
INVR.PO.ACCR='N'
INVR.UOM=INV.UNIT<1,3>
INVR.ORG.QTY=SERIAL.QTY
INVR.ORG.WHSE=IWHSE
INVR.AUDIT.NO=INAH.SEQ
INVR.SERIAL.NO=SERIAL
INVR.DEPL.QTY=SERIAL.QTY
MATWRITEU INVR.REC ON INV_RECEIPTS_TEMP,NEW.INVR.ID
IID.INVR<1,-1>=NEW.INVR.ID
;*
;* create INV_RECP_WHSE record
;*
NEW.IRW.ID=NEW.INVR.ID:"!":IWHSE
MATREADU IRW.REC FROM INV_RECP_WHSE_TEMP,NEW.IRW.ID ELSE NULL
MAT IRW.REC=''
IRW.ORG.QTY=SERIAL.QTY
;* reservable and current qty. have been already
;* returned to one of the receipts above.
IRW.CUR.QTY=0
IRW.RSVB.QTY=0
IRW.SERIAL.NO=SERIAL
*IRW.ON.HAND=SERIAL.QTY
MATWRITEU IRW.REC ON INV_RECP_WHSE_TEMP,NEW.IRW.ID
IID.IRW<1,-1>=NEW.IRW.ID
;*
;* create INV_SERIAL record
;*
IF CATG.TRK.LVL='G' THEN 
  SERIAL="R":NEW.RECP:"!":IWHSE:"!":IWLOC
  ISTK.ID=CONO:SERIAL
  INVR.SERIAL.NO=SERIAL
  MATWRITEU INVR.REC ON INV_RECEIPTS_TEMP,NEW.INVR.ID
  IRW.SERIAL.NO=SERIAL
  MATWRITEU IRW.REC ON INV_RECP_WHSE_TEMP,NEW.IRW.ID
END
MATREADU ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID ELSE NULL
MAT ISTK.REC=""
ISTK.PROD=PROD
ISTK.WHSE=IWHSE
ISTK.LOC=IWLOC
ISTK.RECP=NEW.RECP
ISTK.RECP.PERIOD=JMT.MON<1,1>
ISTK.UOM=INV.UNIT<1,3>
ISTK.ORG.QTY=SERIAL.QTY
ISTK.ENTRY.DATE=DATE()
ISTK.EDIT.DATE=DATE()
ISTK.POST.DATE=DATE()
ISTK.PRINT.DATE=DATE()
ISTK.STATUS="SEE JOB # ":DRV.JOB
ISTK.PLACE='RV'
ISTK.PO.NO="REVERSAL"
ISTK.PO.LINE=1
MATWRITEU ISTK.REC ON INV_SERIAL_TEMP,ISTK.ID
IID.ISTK<1,-1>=ISTK.ID
;*
;* add serial to iwlo record
;*
LOCATE SERIAL IN IWLO.SERIAL<1> SETTING JUNK ELSE
  IWLO.SERIAL<1,-1>=SERIAL
  MATWRITEU IWLO.REC ON INV.WHSE.LOC.TEMP,IWLO.ID
  LOCATE IWLO.ID IN IID.IWLO<1> SETTING JUNK ELSE
    IID.IWLO<1,-1>=IWLO.ID
  END
END
;*
;* add new receipt to IWH record
;* array will be resorted in JCS.IWH.SUB
;*
LOCATE NEW.RECP IN IWH.RECP.NO<1> SETTING JUNK ELSE
  LOCATE INVR.PERIOD IN IWH.RECP.PERIOD<1> BY "AR" SETTING RPOS ELSE NULL
  IWH.RECP.NO<1,-1>=NEW.RECP
  IWH.RECP.PERIOD<1,-1>=INVR.PERIOD
  IWH.RECP.ENT.DATE<1,-1>=INVR.ENT.DATE
END
RETURN
*
*****************
UPDATE.UNIT.COST: 
*****************
*
IF NOT(SERIAL.FOUND<1,SC>) THEN
  MATREADU INVR.REC FROM INV_RECEIPTS_TEMP,NEW.INVR.ID THEN
    INVR.UNIT.COST=INAH.UNIT.COST
    MATWRITEU INVR.REC ON INV_RECEIPTS_TEMP,NEW.INVR.ID
  END
  MATREADU IRW.REC FROM INV_RECP_WHSE_TEMP,NEW.IRW.ID THEN
    IRW.UNIT.COST=INAH.UNIT.COST
    MATWRITEU IRW.REC ON INV_RECP_WHSE_TEMP,IRW.ID
  END
  MATREADU ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID THEN
    ISTK.UNIT.COST=INAH.UNIT.COST
    MATWRITE ISTK.REC ON INV_SERIAL_TEMP,ISTK.ID
  END
END
RETURN
*
******************
RELEASE.INV.FILES: 
******************
*
RELEASE INV.WHSE, IWH.ID
RETURN
*
********************
SET.AUDIT.REFERENCE: 
********************
*
GOSUB SET.INAH
LOCATE INAH.ID IN IID.INAH<1> SETTING JUNK ELSE
  IID.INAH<1,-1>=INAH.ID
END
MATWRITEU INAH.REC ON INV_AUDIT_HIST_TEMP,INAH.ID
;* update INVR.REC to which serial belongs with
;* audit seq #
INVR.ID=CONO:ISTK.RECP
IF RECORDLOCKED(INV_RECEIPTS_TEMP,INVR.ID)=0 THEN
  DELETE INV_RECEIPTS_TEMP,INVR.ID
END
IF RECORDLOCKED(INV_RECEIPTS_TEMP,INVR.ID)=0 THEN
  DELETE INV_RECEIPTS_TEMP,INVR.ID
END
MATREADU INVR.REC FROM INV_RECEIPTS_TEMP,INVR.ID ELSE
  MATREADU INVR.REC FROM INV_RECEIPTS,INVR.ID THEN
    INVR.AUDIT.NO<1,-1>=INAH.SEQ
    MATWRITEU INVR.REC ON INV_RECEIPTS_TEMP,INVR.ID
    LOCATE INVR.ID IN IID.INVR<1> SETTING JUNK ELSE
      IID.INVR<1,-1>=INVR.ID
    END
  END ELSE
    ERR=1
    ERR=1
  END
END
RETURN
*
**************
WRITE.RECORDS: 
***************
*
ACTION=3                                                       
JOB.ID=CONO:DRV.JOB                                            
CALL JCS.IWH.SUB(IWH.ID,JOB.ID,PERIOD,TMP.ARR,ACTION,OPEN.FLAG)
RETURN
99999 *
RELEASE
END
