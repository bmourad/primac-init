SUBROUTINE EMMS_EMMSSERVICE_GETEMMSDETAILS(CONO,STRDATE,ENDDATE,STRXML,ERRMSG,SCHEMA.ONLY) 
SCHEMA.ONLY = 0
$INCLUDE PMC.CPYLIB PO 
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE PMC.CPYLIB DIVISION
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV.WHSE.LOC
$INCLUDE ICS.CPYLIB INV.STATS
$INCLUDE ICS.CPYLIB FNGD.STATS
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE ICS.CPYLIB PO.RSKI.XREF
$INCLUDE JCS.CPYLIB JOB
$INCLUDE PMC.CPYLIB CUSTOMER
$INCLUDE ICS.CPYLIB INV.JOB.STATS
$INCLUDE JES.CPYLIB ESTIMATE
$INCLUDE CPYLIB FILE.VARS
$INCLUDE CPYLIB CHAR
*
DEFFUN CALC_STK_QTY_PRIDGET (COST.QTY,MAT INV.CNV.REC,ROND,LN)
DEFFUN CALC_COST_QTY_PRIDGET (STK.QTY,MAT INV.CNV.REC,ROND,LN)
OPEN '','COMPANY' TO COMPANY ELSE ERRMSG = 'COMPANY FILE IS MISSING'; GOTO 93000
OPEN '','CONTROL' TO CONTROL ELSE ERRMSG = 'CONTROL FILE IS MISSING'; GOTO 93000
OPEN '','INVENTORY' TO INVENTORY ELSE ERRMSG = 'INVENTORY FILE IS MISSING'; GOTO 93000
OPEN '','CATEGORY' TO CATEGORY ELSE ERRMSG = 'INVENTORY FILE IS MISSING'; GOTO 93000
OPEN '','INV.WHSE' TO INV.WHSE ELSE ERRMSG = 'INV.WHSE FILE IS MISSING'; GOTO 93000
OPEN '','INV.WHSE.LOC' TO INV.WHSE.LOC ELSE ERRMSG = 'INV.WHSE.LOC FILE IS MISSING'; GOTO 93000
OPEN '','INV.STATS' TO INV.STATS ELSE ERRMSG = 'INV.STATS FILE IS MISSING'; GOTO 93000
OPEN '','FNGD.STATS' TO FNGD.STATS ELSE ERRMSG = 'FNGD.STATS FILE IS MISSING'; GOTO 93000
OPEN '','WAREHOUSE' TO WAREHOUSE ELSE ERRMSG = 'WAREHOUSE FILE IS MISSING'; GOTO 93000
OPEN '','JOB' TO JOB ELSE ERRMSG = 'JOB FILE IS MISSING'; GOTO 93000
OPEN '','CUSTOMER' TO CUSTOMER ELSE ERRMSG = 'CUSTOMER FILE IS MISSING'; GOTO 93000
OPEN '','DIVISION' TO DIVISION ELSE ERRMSG = 'DIVISION FILE IS MISSING'; GOTO 93000
OPEN '','INV.JOB.STATS' TO INV.JOB.STATS ELSE ERRMSG = 'INV.JOB.STATS FILE IS MISSING'; GOTO 93000
OPEN '','ESTIMATE' TO ESTIMATE ELSE ERRMSG = 'ESTIMATE FILE IS MISSING'; GOTO 93000
UNKNOWN = "??????????"
   CONVF = ""
   MATL.DESC = ""
   MATL.TYPE = ""
   MATL.UM = ""
   MATL.TRACK.QOH = ""
   RSV.SERIAL =""
*   ****
   JOB_ALOC_QTY = ""
   JOB_RESV_QTY = ""
   JOB_USED_QTY = ""
   JOB_BAL_QTY = ""
   INV_AVL_QTY = ""
   JOB_RESV_WHSE = ""
   JOB_RESV_MATL = ""
   IJS_REQ_DATE = ""
   IJS_REQ_AMT = ""
   *IJS_REQ_QTY = ""
*
***
REQ_QTY = ""
INV_WHSE = "";INV_ON_HAND = "";INV_RESV = "";INV_ON_PO = "";INV_ALLOC = "";INV_NET_AVAIL = "";*Warehouses Details
ALL_INV_WHSE = "";ALL_INV_ON_HAND = "";ALL_INV_RESV = "";ALL_INV_ON_PO = "";ALL_INV_ALLOC = "";ALL_INV_NET_AVAIL = "";* All Warehouses
TTEMP_IWH_LOC = "";TTEMP_IWLO_LOCONHANDQTY = "";IWH_LOC = "";IWLO_LOCONHANDQTY = ""
RES.QTY = 0
ALLOC.QTY = 0
ON.ORDER.QTY = 0
SORTJOBS = "";TJOBNO = "";TPRODNUM = "";TWHSE = ""
TJOBDUEDATE = "";TJOBSTATUS = "";TJOBTYPE = "";TJOBCATG = "";TJOBCUST = "";TJOBCUSTDESC = "";TJOBDIV = "";TJOBDIVDESC = ""
MATLFLAG = 1
LM = 0
LN = 0
***
MATREAD COMP.REC FROM COMPANY, CONO ELSE
  ERRMSG = "COMPANY (":CONO:") DOES NOT EXIST"
  GOTO 93000
END
*****SELECT INV.JOB.STATS FOR PRODUCTS RESERVED AND ALLOCATED QUANTITYv****
*CMD = "SELECT INV.JOB.STATS BY JOBS BY WHSE WITH PROD NE ''"
CMD = "SELECT INV.JOB.STATS BY PROD BY WHSE WITH PROD NE '' AND WITH DUE_DATE BETWEEN '" : STRDATE : "' '" : ENDDATE : "'"
UDTEXECUTE CMD CAPTURING JUNK
RES.QTY = 0
ALLOC.QTY = 0
ON.ORDER.QTY = 0
SORTJOBS = "";SORTPROD = "";SORTPRODFLG = "";TJOBNO = "";TPRODNUM = "";TWHSE = ""
TTJOBNO = ""
LP = 0
DATA = 1
LOOP
100*
  READNEXT ID ELSE DATA = 0
    WHILE DATA EQ 1 DO
  MATREAD INV.JS.REC FROM INV.JOB.STATS,ID ELSE
     MAT INV.JS.REC = ""
     GOTO 99
  END
  MATREAD JOB.REC FROM JOB,CONO:FIELD(ID,"!",3) ELSE
     MAT JOB.REC = ""
     GOTO 99
  END
        CALL JOB_STATUS_SUB_PRIDGET(JOB.STATUS,JOB.TRACK.DATE,STATUS)
	  IF STATUS = "COMPLETED" THEN GOTO 99
	    IF JOB.DIV # "" THEN
	      MATREAD DIV.REC FROM DIVISION, CONO:JOB.DIV ELSE
		 *ERRMSG = "CANNOT LOCATE DIVISION - ":JOB.DIV
		 GOTO 99
	      END
	   END
	       MATREAD CUST.REC FROM CUSTOMER , CONO:JOB.CUST ELSE
		 *ERRMSG = "CANNOT LOCATE CUSTOMER - ":JOB.CUST
		 *CUST.NAME = UNKNOWN
		 GOTO 99
	 END
  *IF OCONV(JOB.TRACK.DATE<1,10>,"D2/") >= STRDATE  AND OCONV(JOB.TRACK.DATE<1,10>,"D2/") <= ENDDATE THEN
	  TEMPPROD = FIELD(ID,"!",1)[4,99]
	  IF SORTPRODFLG # TEMPPROD THEN
	    LP = LP + 1
	    SORTPRODFLG = TEMPPROD
	    SORTPROD<1,LP> = TEMPPROD
	  END
	  TWHSE<1,LP,-1> = FIELD(ID,"!",2)
	  TTJOBNO<1,LP,-1> = FIELD(ID,"!",3)
  *END
99*
REPEAT
IF DCOUNT(SORTPROD,VM) = 0 THEN 
  ERRMSG = "THERE IS NO DATA IN A GIVEN DATE RANGE"
  GOTO 93000  
END
**********
LINES=DCOUNT(SORTPROD,VM)
FOR LK = 1 TO LINES
 MATREAD INV.REC FROM INVENTORY, CONO:SORTPROD<1,LK> ELSE
    MAT INV.REC = ''
    INV.FULL.DESC = UNKNOWN
    GOTO 55
 END
 MATREAD CATG.REC FROM CATEGORY, CONO : INV.LINE ELSE
    MAT CATG.REC = ""
    GOTO 55
 END
  IF MATLFLAG THEN LM = LM + 1
  LN = 0
  MATLFLAG = 0
  TPRODNUM<1,LM> = SORTPROD<1,LK>
   *GOSUB 8000
   *FOR LJ = 1 TO DCOUNT(TTJOBNO,SVM)
   FOR LJ = 1 TO DCOUNT(TTJOBNO<1,LK>,SVM)
	 MATREAD JOB.REC FROM JOB, CONO:TTJOBNO<1,LK,LJ> ELSE
	     MAT JOB.REC = ""
	     GOTO 33
	END
	CALL JOB_STATUS_SUB_PRIDGET(JOB.STATUS,JOB.TRACK.DATE,STATUS)
*IF OCONV(JOB.TRACK.DATE<1,10>,"D2/") >= STRDATE  AND OCONV(JOB.TRACK.DATE<1,10>,"D2/") <= ENDDATE THEN
         JSTAT.ID = SORTPROD<1,LK>:"!":TWHSE<1,LK,LJ>:"!":TTJOBNO<1,LK,LJ>
         MATREAD INV.JS.REC FROM INV.JOB.STATS,CONO:JSTAT.ID ELSE
           MAT INV.JS.REC = ''
           GOTO 33
         END
	 MATLFLAG = 1
	 LN = LN + 1
	 GOSUB 8000
******************
	TJOBNO<1,LM,LN> = TTJOBNO<1,LK,LJ>
	TJOBDUEDATE<1,LM,LN> = OCONV(JOB.TRACK.DATE<1,4>,"D2/")
        TJOBSTATUS<1,LM,LN> = STATUS
	TJOBTYPE<1,LM,LN> = JOB.TYPE
        TJOBCATG<1,LM,LN> = JOB.CATG
	TJOBCUST<1,LM,LN> = JOB.CUST
	TJOBCUSTDESC<1,LM,LN> = CUST.NAME
	TJOBDIV<1,LM,LN> = JOB.DIV
	TJOBDIVDESC<1,LM,LN> = DIV.DESC
	 GOSUB 9000
	 *GOSUB 9001
	 *GOSUB 9002;*All Warehouses Details
	 *GOSUB 9003;*Warehouses Details
  33*
  NEXT LJ
   GOSUB 9002;*All Warehouses Details
55*
NEXT LK
***********************************************************************************
FINV_WHSE = "";FIWH_LOC = "";FIWLO_LOCONHANDQTY = ""
*STRXML = "<Jobs>"
FOR P = 1 TO  DCOUNT(SORTPROD,VM)
*STRXML := "<Products>"
      STRXML := "<Product SNo = '":P:"'>"
      STRXML := "<ProductNo>" : SORTPROD<1,P>  : "</ProductNo>"
      STRXML := "<ProductDesc>" : MATL.DESC<1,P>  : "</ProductDesc>"
*      STRXML := "<Whse>" : JOB_RESV_WHSE<1,P,Q>  : "</Whse>"
      STRXML := "<Type>" : MATL.TYPE<1,P>  : "</Type>"
      STRXML := "<UOM>" : MATL.UM<1,P>  : "</UOM>"
      *STRXML := "<AvailableQty>" : INV_AVL_QTY<1,P,Q>  : "</AvailableQty>"
      *STRXML := "<ConvFormat>":CONVF<1,P,Q>:"</ConvFormat>"
      FOR R = 1 TO DCOUNT(INV_WHSE<1,P>,SVM)
	      STRXML := "<Warehouse SNo = '":R:"'>"
	      FINV_WHSE = FIELD(INV_WHSE<1,P,R>,"!",1)
	      FIWH_LOC = FIELD(INV_WHSE<1,P,R>,"!",2)
	      FIWLO_LOCONHANDQTY = FIELD(INV_WHSE<1,P,R>,"!",3)
	      *STRXML := "<Whse>" : INV_WHSE<1,P,R>  : "</Whse>"
	      STRXML := "<Whse>" : FINV_WHSE  : "</Whse>"
	      STRXML := "<OnHandQty>" : INV_ON_HAND<1,P,R>  : "</OnHandQty>"
	      STRXML := "<ReservedQty>" : INV_RESV<1,P,R>  : "</ReservedQty>"
	      STRXML := "<NetAvailableQty>" : INV_NET_AVAIL<1,P,R>  : "</NetAvailableQty>"
	      STRXML := "<OnOrderedQty>" : INV_ON_PO<1,P,R>  : "</OnOrderedQty>"
	      STRXML := "<AllocatedQty>" : INV_ALLOC<1,P,R>  : "</AllocatedQty>"
	      *****
		FOR S = 1 TO DCOUNT(FIWH_LOC,"~")
		   STRXML := "<WarehouseLocation SNo = '":S:"'>"
                      STRXML := "<Location>" : FIELD(FIWH_LOC,"~",S)  : "</Location>"
		      STRXML := "<LocOnHandQty>" : FIELD(FIWLO_LOCONHANDQTY,"~",S)  : "</LocOnHandQty>"
		   STRXML := "</WarehouseLocation>"
		NEXT S
	      *****
	      STRXML := "</Warehouse>"
      NEXT R
      STRXML := "<TotalOnHandQty>" : ALL_INV_ON_HAND<1,P>  : "</TotalOnHandQty>"
      STRXML := "<TotalReservedQty>" : ALL_INV_RESV<1,P>  : "</TotalReservedQty>"
      STRXML := "<TotalNetAvailableQty>" : ALL_INV_NET_AVAIL<1,P>  : "</TotalNetAvailableQty>"
      STRXML := "<TotalOnOrderedQty>" : ALL_INV_ON_PO<1,P>  : "</TotalOnOrderedQty>"
      STRXML := "<TotalAllocatedQty>" : ALL_INV_ALLOC<1,P>  : "</TotalAllocatedQty>"
**************
TEMP_WHSE = "";TEMP_RESVDATE = "";TEMP_ALOC_QYT = "";TEMP_RESV_QTY = "";TEMP_USED_QTY = ""
TEMP_BAL_QTY = "";TEMP_REQDATE = "";TEMP_REQ_AMT = "";TEMP_REQQTY = ""
STRXML := "<Jobs>"
   FOR Q = 1 TO  DCOUNT(TJOBNO<1,P>,SVM)
	   STRXML := "<Job SNo = '":Q:"' DueDate = '":TJOBDUEDATE<1,P,Q>:"'>"
	   STRXML := "<JobNo>" : TJOBNO<1,P,Q>  : "</JobNo>"
	   STRXML := "<JobDueDate>" : TJOBDUEDATE<1,P,Q>  : "</JobDueDate>"
	   STRXML := "<JobStatus>": TJOBSTATUS<1,P,Q> :"</JobStatus>"
	   STRXML := "<JobType>": TJOBTYPE<1,P,Q> :"</JobType>"
	   STRXML := "<JobCatg>": TJOBCATG<1,P,Q> :"</JobCatg>"

	   STRXML := "<Customer>" : TJOBCUST<1,P,Q>  : "</Customer>"
	   STRXML := "<CustomerDesc>" : TJOBCUSTDESC<1,P,Q>  : "</CustomerDesc>"
	   STRXML := "<Division>" : TJOBDIV<1,P,Q>  : "</Division>"
	   STRXML := "<DivisionDesc>" : TJOBDIVDESC<1,P,Q>  : "</DivisionDesc>"
*********
TEMP_WHSE = JOB_RESV_WHSE<1,P,Q>
TEMP_RESVDATE = JOB_RESV_DATE<1,P,Q>
TEMP_ALOC_QYT = JOB_ALOC_QTY<1,P,Q>
TEMP_RESV_QTY =JOB_RESV_QTY<1,P,Q>
TEMP_USED_QTY = JOB_USED_QTY<1,P,Q>
TEMP_BAL_QTY = JOB_BAL_QTY<1,P,Q>
TEMP_REQDATE = IJS_REQ_DATE<1,P,Q>
TEMP_REQ_AMT = IJS_REQ_AMT<1,P,Q>
TEMP_REQQTY = REQ_QTY<1,P,Q>
SWAP "~" WITH VM IN TEMP_WHSE
SWAP "~" WITH VM IN TEMP_RESVDATE
SWAP "~" WITH VM IN TEMP_ALOC_QYT
SWAP "~" WITH VM IN TEMP_RESV_QTY
SWAP "~" WITH VM IN TEMP_USED_QTY
SWAP "~" WITH VM IN TEMP_BAL_QTY
SWAP "~" WITH VM IN TEMP_REQDATE
SWAP "~" WITH VM IN TEMP_REQ_AMT
SWAP "~" WITH VM IN TEMP_REQQTY
*           STRXML := "<ReserveDate>" : JOB_RESV_DATE<1,P,Q>  : "</ReserveDate>"
*           STRXML := "<AllocatedQty>" : JOB_ALOC_QTY<1,P,Q>  : "</AllocatedQty>"
*           STRXML := "<ReservedQty>" : JOB_RESV_QTY<1,P,Q>  : "</ReservedQty>"
*           STRXML := "<UsedQty>" : JOB_USED_QTY<1,P,Q>  : "</UsedQty>"
*	   STRXML := "<BalanceQty>" : JOB_BAL_QTY<1,P,Q>  : "</BalanceQty>"
*	   STRXML := "<RequiredDate>" : IJS_REQ_DATE<1,P,Q>  : "</RequiredDate>"
*	   STRXML := "<UnitPrice>" : IJS_REQ_AMT<1,P,Q>  : "</UnitPrice>"
*	   STRXML := "<RequiredQty>" : REQ_QTY<1,P,Q>  : "</RequiredQty>"
          FOR RR = 1 TO DCOUNT(TEMP_WHSE,VM)
	   STRXML := "<Warehouse SNo ='":RR:"'>"
	   STRXML := "<Whse>" : TEMP_WHSE<1,RR>  : "</Whse>"
           STRXML := "<ReserveDate>" : TEMP_RESVDATE<1,RR>  : "</ReserveDate>"
           STRXML := "<AllocatedQty>" : TEMP_ALOC_QYT<1,RR>  : "</AllocatedQty>"
           STRXML := "<ReservedQty>" : TEMP_RESV_QTY<1,RR>  : "</ReservedQty>"
           STRXML := "<UsedQty>" : TEMP_USED_QTY<1,RR>  : "</UsedQty>"
	   STRXML := "<BalanceQty>" : TEMP_BAL_QTY<1,RR>  : "</BalanceQty>"
	   STRXML := "<RequiredDate>" : TEMP_REQDATE<1,RR>  : "</RequiredDate>"
	   STRXML := "<UnitPrice>" : TEMP_REQ_AMT<1,RR>  : "</UnitPrice>"
	   STRXML := "<RequiredQty>" : TEMP_REQQTY<1,RR>  : "</RequiredQty>"
	   STRXML := "</Warehouse>"
	  NEXT RR
	   STRXML := "</Job>"
   NEXT Q
STRXML := "</Jobs>"
STRXML := "</Product>"
*   STRXML := "</Products>"
 NEXT P
*STRXML := "</Jobs>"
RETURN
********
8000 *
********
*
   MATL.DESC<1,LM> = INV.FULL.DESC
   MATL.TYPE<1,LM> = INV.PAP.TYPE
   MATL.UM<1,LM> = INV.UNIT<1,2>
   MATL.TRACK.QOH<1,LM> = CATG.TRACK.QOH
   RSV.SERIAL<1,LM>=CATG.RSV.SERIAL
   BEGIN CASE
      CASE INV.UNIT<1,2> = 'SHT' AND INV.UNIT<1,3> = 'LBS'
         ICR.DV1<LN> = INV.M.WT
         ICR.MT1<LN> = 1
         ICR.DV2<LN> = 1
         ICR.CNV<LN> = "MD0"
	 CONVF<1,LM> = "MD0"
      CASE INV.UNIT<1,2> = 'PC' AND INV.UNIT<1,3> = 'MSI'
         ICR.DV1<LN> = INV.PAP.WIDTH/100
         ICR.MT1<LN> = 10
         ICR.DV2<LN> = 1
         ICR.CNV<LN> = "MD0"
	 CONVF<1,LM> = "MD0"
      CASE INV.UNIT<1,2> = 'FT' AND INV.UNIT<1,3> = 'MSI'
         ICR.DV1<LN> = INV.PAP.WIDTH/100
         ICR.MT1<LN> = 100
         ICR.DV2<LN> = 12
         ICR.CNV<LN> = "MD0"
	 CONVF<1,LM> = "MD0"
      CASE 1
         ICR.DV1<LN> = 10
         ICR.MT1<LN> = 1
         ICR.DV2<LN> = 1
         ICR.CNV<LN> = "MD2"
	 CONVF<1,LM> = "MD2"
   END CASE
RETURN
*
*******
9000 *
******
*********RS
TEMP_JOB_RESV_MATL = "";TEMP_JOB_RESV_WHSE = "";TEMP_JOB_RESV_DATE = "";TEMP_JOB_ALOC_QTY = "";TEMP_JOB_RESV_QTY = "";TEMP_JOB_USED_QTY = ""
TEMP_JOB_BAL_QTY = "";TEMP_REQ_QTY = "";TEMP_IJS_REQ_DATE = "";TEMP_IJS_REQ_AMT = "";TJSTAT.ID = ""
FOR RS = 1 TO DCOUNT(JOB.RESV.MATL,VM)
*LOCATE SORTPROD<1,LK> IN JOB.RESV.MATL<1> SETTING PINDX THEN
LOCATE SORTPROD<1,LK> IN JOB.RESV.MATL<1> SETTING WINDX THEN
  JOB.RESV.MATL<1,WINDX> = ""
  *LOCATE TWHSE<1,LK,LJ> IN JOB.RESV.WHSE<1> SETTING WINDX THEN
         TJSTAT.ID = SORTPROD<1,LK>:"!":JOB.RESV.WHSE<1,WINDX>:"!":TTJOBNO<1,LK,LJ>
         MATREAD INV.JS.REC FROM INV.JOB.STATS,CONO:TJSTAT.ID ELSE
           MAT INV.JS.REC = ''
         END

        IF TEMP_JOB_RESV_WHSE = "" THEN	 
	   TEMP_JOB_RESV_MATL = JOB.RESV.MATL<1,WINDX>
	   TEMP_JOB_RESV_WHSE =  JOB.RESV.WHSE<1,WINDX>
	   TEMP_JOB_RESV_DATE= OCONV(JOB.RESV.DATE<1,WINDX>,"D2/")
	      TMP=CALC_STK_QTY_PRIDGET(JOB.ALOC.QTY<1,WINDX>,MAT INV.CNV.REC,'.5',LN)
	   TEMP_JOB_ALOC_QTY=OCONV(TMP,ICR.CNV<LN>)
	      TMP=CALC_STK_QTY_PRIDGET(JOB.RESV.QTY<1,WINDX>,MAT INV.CNV.REC,'.5',LN)
	   TEMP_JOB_RESV_QTY=OCONV(TMP,ICR.CNV<LN>)
	      TMP=CALC_STK_QTY_PRIDGET(JOB.USED.QTY<1,WINDX>,MAT INV.CNV.REC,'.5',LN)
	      TEMP_JOB_USED_QTY=OCONV(TMP,ICR.CNV<LN>)
	      *BALANCE = SAVE.INV.JS.REC<LJ,RQD.QTY.MV> - JOB.ALOC.QTY<1,LJ>-JOB.RESV.QTY<1,LJ>-JOB.USED.QTY<1,LJ>
	      BALANCE = IJS.REQ.QTY - JOB.ALOC.QTY<1,WINDX>-JOB.RESV.QTY<1,WINDX>-JOB.USED.QTY<1,WINDX>
	      IF BALANCE >= 0 THEN
		 BALANCE = INT(((BALANCE/ICR.DV1<LN>)*ICR.MT1<LN>)/ICR.DV2<LN> + .5)
		 TEMP_JOB_BAL_QTY = OCONV(BALANCE,ICR.CNV<LN>)
	      END ELSE
		 BALANCE = 0
		 TEMP_JOB_BAL_QTY = OCONV(BALANCE,ICR.CNV<LN>)
	      END
	*******RD
	     IF IJS.REQ.QTY > 0 THEN
	       TEMP_REQ_QTY = OCONV(INT(((IJS.REQ.QTY/ICR.DV1<LN>)*ICR.MT1<LN>)/ICR.DV2<LN> + .5),ICR.CNV<LN>)
	      END ELSE
		TEMP_REQ_QTY = 0
	     END
	   TEMP_IJS_REQ_DATE = OCONV(IJS.REQ.DATE,'D2/')
	   TEMP_IJS_REQ_AMT =  OCONV(IJS.REQ.AMT,"MD4")
       END ELSE
	   TEMP_JOB_RESV_MATL = TEMP_JOB_RESV_MATL:"~":JOB.RESV.MATL<1,WINDX>
	   TEMP_JOB_RESV_WHSE = TEMP_JOB_RESV_WHSE:"~":JOB.RESV.WHSE<1,WINDX>
	   TEMP_JOB_RESV_DATE= TEMP_JOB_RESV_DATE:"~":OCONV(JOB.RESV.DATE<1,WINDX>,"D2/")
	      TMP=CALC_STK_QTY_PRIDGET(JOB.ALOC.QTY<1,WINDX>,MAT INV.CNV.REC,'.5',LN)
	   TEMP_JOB_ALOC_QTY= TEMP_JOB_ALOC_QTY:"~":OCONV(TMP,ICR.CNV<LN>)
	      TMP=CALC_STK_QTY_PRIDGET(JOB.RESV.QTY<1,WINDX>,MAT INV.CNV.REC,'.5',LN)
	   TEMP_JOB_RESV_QTY=TEMP_JOB_RESV_QTY:"~":OCONV(TMP,ICR.CNV<LN>)
	      TMP=CALC_STK_QTY_PRIDGET(JOB.USED.QTY<1,WINDX>,MAT INV.CNV.REC,'.5',LN)
	      TEMP_JOB_USED_QTY= TEMP_JOB_USED_QTY:"~":OCONV(TMP,ICR.CNV<LN>)
	      *BALANCE = SAVE.INV.JS.REC<LJ,RQD.QTY.MV> - JOB.ALOC.QTY<1,LJ>-JOB.RESV.QTY<1,LJ>-JOB.USED.QTY<1,LJ>
	      BALANCE = IJS.REQ.QTY - JOB.ALOC.QTY<1,WINDX>-JOB.RESV.QTY<1,WINDX>-JOB.USED.QTY<1,WINDX>
	      IF BALANCE >= 0 THEN
		 BALANCE = INT(((BALANCE/ICR.DV1<LN>)*ICR.MT1<LN>)/ICR.DV2<LN> + .5)
		 TEMP_JOB_BAL_QTY = TEMP_JOB_BAL_QTY:"~":OCONV(BALANCE,ICR.CNV<LN>)
	      END ELSE
		 BALANCE = 0
		 TEMP_JOB_BAL_QTY = TEMP_JOB_BAL_QTY:"~":OCONV(BALANCE,ICR.CNV<LN>)
	      END
	*******RD
	     IF IJS.REQ.QTY > 0 THEN
	       TEMP_REQ_QTY = TEMP_REQ_QTY:"~":OCONV(INT(((IJS.REQ.QTY/ICR.DV1<LN>)*ICR.MT1<LN>)/ICR.DV2<LN> + .5),ICR.CNV<LN>)
	      END ELSE
		TEMP_REQ_QTY = TEMP_REQ_QTY:"~": 0
	     END
	   TEMP_IJS_REQ_DATE = TEMP_IJS_REQ_DATE:"~":OCONV(IJS.REQ.DATE,'D2/')
	   TEMP_IJS_REQ_AMT = TEMP_IJS_REQ_AMT:"~":OCONV(IJS.REQ.AMT,"MD4")
       END
  *END ELSE
  *    GOTO 66
  *END
END ELSE
   GOTO 66
END
66*
NEXT RS
JOB_RESV_MATL<1,LM,LN> = TEMP_JOB_RESV_MATL
JOB_RESV_WHSE<1,LM,LN> = TEMP_JOB_RESV_WHSE
JOB_RESV_DATE<1,LM,LN> = TEMP_JOB_RESV_DATE
JOB_ALOC_QTY<1,LM,LN>  = TEMP_JOB_ALOC_QTY
JOB_RESV_QTY<1,LM,LN>  = TEMP_JOB_RESV_QTY
JOB_USED_QTY<1,LM,LN>  = TEMP_JOB_USED_QTY
JOB_BAL_QTY<1,LM,LN>   = TEMP_JOB_BAL_QTY
REQ_QTY<1,LM,LN>       = TEMP_REQ_QTY
IJS_REQ_DATE<1,LM,LN>  = TEMP_IJS_REQ_DATE
IJS_REQ_AMT<1,LM,LN>   = TEMP_IJS_REQ_AMT
RETURN
*******
9001 *
*******
 INV.WHSE.KEY = CONO:JOB.RESV.MATL<1,LK>:"!":JOB.RESV.WHSE<1,LK>
  MATREAD IWH.REC FROM INV.WHSE , INV.WHSE.KEY ELSE MAT IWH.REC = ""
AVL.QTY = 0
 AVL.QTY=IWH.ON.HAND-IWH.RESV+JOB.RESV.QTY<1,LK>
AVL.QTY=CALC_STK_QTY_PRIDGET(AVL.QTY,MAT INV.CNV.REC,'.5',LN)
INV_AVL_QTY<1,LM,LN> = OCONV(AVL.QTY,ICR.CNV<LN>)
RETURN
*******
9002 *
*******
WHSE.CNT = DCOUNT(INV.WHSE.CODE<1>,VM)
   IF INV.M.LINE = "FNGD" THEN
      FNGD.FLG = 1
      *PLN.NO = 48
      *ECD.SCRN.NAME<13> = "FNGD.ORD.INQ"
      *ECD.SCRN.NAME<12> = "FNGD.JOB.INQ"
   END ELSE
      FNGD.FLG = 0
      *PLN.NO = 42
   END
   ;*
$INCLUDE ICSBP INV.UM.CNV
   ;*
  TEMP_INV_WHSE = "";TEMP_INV_ON_HAND = "";TEMP_INV_RESV = "";TEMP_INV_ON_PO = "";TEMP_INV_ALLOC = "";TEMP_NET_AVAIL = ""
  TEMP_TOT_INV_WHSE = 0;TEMP_TOT_INV_ON_HAND = 0;TEMP_TOT_INV_RESV = 0;TEMP_TOT_INV_ON_PO = 0;TEMP_TOT_INV_ALLOC = 0;TEMP_TOT_NET_AVAIL = 0
   INV.ON.PO = ""; INV.ALLOC = ""; INV.ON.HAND = ""
   INV.RESV = ""
   LW = 0
   FOR I = WHSE.CNT TO 1 STEP -1
  * SORTPROD<1,LK>:"!":TWHSE<1,LK,LJ>:"!":TJOBNO<1,LK,LJ>
      IWH.ID = CONO:SORTPROD<1,LK>:"!":INV.WHSE.CODE<1,I>
      MATREAD IWH.REC FROM INV.WHSE, IWH.ID THEN
         LW = LW + 1
**********************
TEMP_IWH_LOC = ""
TEMP_IWLO_LOCONHANDQTY = ""
LI = 0
         FOR J = 1 TO DCOUNT(IWH.LOC,VM)
            IWLO.ID = CONO:SORTPROD<1,LK>:"!":INV.WHSE.CODE<1,I>:"!":IWH.LOC<1,J>
            MATREAD IWLO.REC FROM INV.WHSE.LOC,IWLO.ID ELSE
	        MAT IWLO.REC = ""
		GOTO 22
	    END
	    LI = LI + 1
               IF IWLO.LOC.ON.HAND  < 0 THEN                                       
                  LOH = INT(((IWLO.LOC.ON.HAND / ICR.DV1) * ICR.MT1) / ICR.DV2 - .5)
               END ELSE                                                            
                  LOH = INT(((IWLO.LOC.ON.HAND / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5)
               END
*	       TEMP_IWH_LOC<1,LW,LI> = IWH.LOC
*	       TEMP_IWLO_LOCONHANDQTY<1,LW,LI> = LOH 
	       IF TEMP_IWH_LOC = "" THEN
	           TEMP_IWH_LOC = IWH.LOC<1,J>
		   TEMP_IWLO_LOCONHANDQTY = OCONV(LOH,ICR.CNV1)
	       END ELSE
                   TEMP_IWH_LOC = TEMP_IWH_LOC :"~": IWH.LOC<1,J>
		   TEMP_IWLO_LOCONHANDQTY = TEMP_IWLO_LOCONHANDQTY :"~": OCONV(LOH,ICR.CNV1)
	       END
***********
*	       CALL GET.ALL.WHSE.SERIALS(CONO,PROD,WHSE,TMP.SERIAL)
*  R.S.CNT=''
*   IF CATG.TRK.LVL='S' THEN
*      R.S.FLG = 0
*      R.S.CNT = 0
*      PTR = 1
*      LOCATE CURR.LOC IN TMP.SERIAL<1>,1 SETTING WINDX ELSE WINDX = 0
*      IF CATG.TRK.LVL='S' AND WINDX>0 THEN
*         IF WINDX>0 THEN
*            TOT.RS.CNT = DCOUNT(TMP.SERIAL<2,WINDX>,SVM)
*            R.S.CNT=0
*            FOR TRC=1 TO TOT.RS.CNT
*               IF TMP.SERIAL<3,WINDX,TRC>#0 THEN
*                  R.S.CNT+=1
*               END
*            NEXT TRC
*            R.S.FLG = 1
*         END
*         BEGIN CASE
*            CASE NOT(R.S.FLG)
*               SCV.REC(49)<ESN> = ""
*               SCV.REC(50)<ESN> = ""
*            CASE INV.PAP.TYPE = "REGULAR"
*               SCV.REC(49)<ESN> = "# Serials  :"
*               SCV.REC(50)<ESN> = R.S.CNT
*            CASE INV.PAP.TYPE = "SHEET"
*               SCV.REC(49)<ESN> = "# Skids    :"
*               SCV.REC(50)<ESN> = R.S.CNT
*            CASE 1
*               SCV.REC(49)<ESN> = "# Rolls    :"
*               SCV.REC(50)<ESN> = R.S.CNT
*         END CASE
*      END
*   END
*   IF R.S.CNT + 0 = 0 THEN
*      SCV.REC(49)<ESN> = ""
*      SCV.REC(50)<ESN> = ""
*   END
***********
	 22*
	 NEXT J
********* All locations on file for the warehouse
	 *TTEMP_IWH_LOC<1,LW> = TEMP_IWH_LOC
	 *TTEMP_IWLO_LOCONHANDQTY<1,LW> = TEMP_IWLO_LOCONHANDQTY
	 *IWH_LOC<1,LW> = TEMP_IWH_LOC
	 *IWLO_LOCONHANDQTY<1,LW> = TEMP_IWLO_LOCONHANDQTY
 *********
********************
         IF FNGD.FLG THEN
            MATREAD FGS.REC FROM FNGD.STATS,IWH.ID THEN
               INV.ON.PO<I> = SUM(FGS.M.QTY)
               INV.ALLOC<I> = SUM(FGS.A.QTY)
            END ELSE
               INV.ON.PO<I> = 0
               INV.ALLOC<I> = 0
            END
         END ELSE
            MATREAD INV.STAT.REC FROM INV.STATS, IWH.ID THEN
               INV.ON.PO<I> = SUM(ISTAT.PO.QTY)
               INV.ALLOC<I> = 0; PO.CNT = DCOUNT(ISTAT.PO,VM)
               FOR J = 1 TO PO.CNT
                  INV.ALLOC<I> = INV.ALLOC<I> + SUM(ISTAT.PO.JOB.QTY<1,J>)
               NEXT J
            END ELSE
               INV.ON.PO<I> = 0
               INV.ALLOC<I> = 0
            END
         END
         IF IWH.ON.HAND < 0 THEN
            INV.ON.HAND<I>=INT(((IWH.ON.HAND/ICR.DV1)*ICR.MT1)/ICR.DV2-.5)
         END ELSE
            INV.ON.HAND<I>=INT(((IWH.ON.HAND/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
         END
         IF IWH.RESV < 0 THEN
            INV.RESV<I>=INT(((IWH.RESV/ICR.DV1)*ICR.MT1)/ICR.DV2-.5)
         END ELSE
            INV.RESV<I>=INT(((IWH.RESV/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
         END
         IF INV.ON.PO<I> < 0 THEN
            INV.ON.PO<I>=INT(((INV.ON.PO<I>/ICR.DV1)*ICR.MT1)/ICR.DV2-.5)
         END ELSE
            INV.ON.PO<I>=INT(((INV.ON.PO<I>/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
         END
         IF INV.ALLOC<I> < 0 THEN
            INV.ALLOC<I>=INT(((INV.ALLOC<I>/ICR.DV1)*ICR.MT1)/ICR.DV2-.5)
         END ELSE
            INV.ALLOC<I>=INT(((INV.ALLOC<I>/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
         END
*         SCV.REC(29)<ESN>=SCV.REC(29)<ESN>+INV.ON.HAND<I>
*         SCV.REC(32)<ESN>=SCV.REC(32)<ESN>+INV.RESV<I>
*         SCV.REC(39)<ESN>=SCV.REC(39)<ESN>+INV.ON.PO<I>
*         SCV.REC(44)<ESN>=SCV.REC(44)<ESN>+INV.ALLOC<I>
         TEMP_INV_WHSE<1,LW> = INV.WHSE.CODE<1,I>:"!":TEMP_IWH_LOC:"!":TEMP_IWLO_LOCONHANDQTY
	 *TEMP_INV_WHSE<1,LW> = INV.WHSE.CODE<1,I>
	 TEMP_INV_ON_HAND<1,LW> = OCONV(INV.ON.HAND<I>,ICR.CNV1)
	 TEMP_INV_RESV<1,LW> = OCONV(INV.RESV<I>,ICR.CNV1) 
	 TEMP_NET_AVAIL<1,LW> = OCONV(INV.ON.HAND<I> - INV.RESV<I>,ICR.CNV1)
	 TEMP_INV_ON_PO<1,LW> = OCONV(INV.ON.PO<I>,ICR.CNV1) 
	 TEMP_INV_ALLOC<1,LW> = OCONV(INV.ALLOC<I>,ICR.CNV1) 
	 *****
	 TEMP_TOT_INV_ON_HAND += INV.ON.HAND<I>
	 TEMP_TOT_INV_RESV += INV.RESV<I> 
	 TEMP_TOT_NET_AVAIL += INV.ON.HAND<I> - INV.RESV<I>
	 TEMP_TOT_INV_ON_PO += INV.ON.PO<I> 
	 TEMP_TOT_INV_ALLOC += INV.ALLOC<I>
      END
   NEXT I
   SWAP VM WITH SM IN TEMP_INV_WHSE
   SWAP VM WITH SM IN TEMP_INV_ON_HAND
   SWAP VM WITH SM IN TEMP_INV_RESV
   SWAP VM WITH SM IN TEMP_NET_AVAIL
   SWAP VM WITH SM IN TEMP_INV_ON_PO
   SWAP VM WITH SM IN TEMP_INV_ALLOC
   ********* All locations on file for the warehouse
*      IWH_LOC<1,LM> = TEMP_IWH_LOC
*      IWLO_LOCONHANDQTY<1,LM> = TTEMP_IWLO_LOCONHANDQTY
   *********
      INV_WHSE<1,LM> = TEMP_INV_WHSE
      INV_ON_HAND<1,LM> = TEMP_INV_ON_HAND
      INV_RESV<1,LM> = TEMP_INV_RESV
      INV_NET_AVAIL<1,LM> = TEMP_NET_AVAIL
      INV_ON_PO<1,LM> = TEMP_INV_ON_PO
      INV_ALLOC<1,LM> = TEMP_INV_ALLOC

      *ALL_INV_WHSE<1,LM> = TEMP_INV_WHSE
      ALL_INV_ON_HAND<1,LM> = OCONV(TEMP_TOT_INV_ON_HAND,ICR.CNV1)
      ALL_INV_RESV<1,LM> = OCONV(TEMP_TOT_INV_RESV,ICR.CNV1)
      ALL_INV_NET_AVAIL<1,LM> = OCONV(TEMP_TOT_NET_AVAIL,ICR.CNV1)
      ALL_INV_ON_PO<1,LM>  = OCONV(TEMP_TOT_INV_ON_PO,ICR.CNV1)
      ALL_INV_ALLOC<1,LM> = OCONV(TEMP_TOT_INV_ALLOC,ICR.CNV1)
RETURN
*******
9003*
*******
   IF INV.M.LINE = "FNGD" THEN
      FNGD.FLG = 1
   END ELSE
      FNGD.FLG = 0
   END
                     MATREAD WHSE.REC FROM WAREHOUSE,CONO:JOB.RESV.WHSE<1,LK> ELSE 
                        *ERRMSG='Warehouse record ':CURR.WHSE:' is missing.'
		        INV_ON_HAND<1,LM,LN> = ""
		        INV_RESV<1,LM,LN> = ""
		        INV_NET_AVAIL<1,LM,LN> = ""
		        INV_ON_PO<1,LM,LN> = ""
		        INV_ALLOC<1,LM,LN> = ""
			GOTO 44
                     END
$INCLUDE ICSBP INV.UM.CNV
*                     IF WHS.DIV='' THEN WHS.DIV=GEN.DIV
*                     DIV.POS=DIVISION.POSITION(CONO,CONTROL,WHS.DIV)
*                     BEGIN CASE                                              
*                        CASE DIV.POS<1,1>=''                                  
*                           DIV.POS=DIV.POS<1,2>                                
*                           CUR.PERIOD=CURRENT.PERIOD(CONO,CONTROL,DIV.POS,"IC")
*                           IF CUR.PERIOD<1,1>='' THEN                          
*                              CUR.PERIOD=CUR.PERIOD<1,2>                        
*                           END ELSE                                            
*                              IF CUR.PERIOD<1,2>='-2' THEN                      
*                                 ERRMSG=CUR.PERIOD<1,2>                          
*                                 GOSUB 93000                                     
*                              END                                               
*                           END                                                 
*                        CASE DIV.POS<1,1>='-1'                                
*                           ERRMSG=DIV.POS<1,2>                                 
*                           GOSUB 91000                                         
*                        CASE DIV.POS<1,1>='-2'                                
*                           ERRMSG=DIV.POS<1,2>                                 
*                           GOSUB 93000                                         
*                     END CASE                                                
                     IWH.ID = CONO:JOB.RESV.MATL<1,LK>:"!":JOB.RESV.WHSE<1,LK>
                     MATREAD IWH.REC FROM INV.WHSE, IWH.ID ELSE
                        MAT IWH.REC = ""
                     END
                     MATREAD INV.STAT.REC FROM INV.STATS, IWH.ID ELSE
                        MAT INV.STAT.REC = ""
                     END
                     IF FNGD.FLG THEN                              
                        MATREAD FGS.REC FROM FNGD.STATS, IWH.ID ELSE
                           MAT FGS.REC = ""                          
                        END                                         
                     END ELSE                                      
                        MAT FGS.REC = ""                            
                     END       
      INV_ON_HAND<1,LM,LN> = OCONV(INV.ON.HAND,ICR.CNV1)
      INV_RESV<1,LM,LN> = OCONV(INV.RESV,ICR.CNV1)
      INV_NET_AVAIL<1,LM,LN> = OCONV((INV.ON.HAND - INV.RESV),ICR.CNV1)
      INV_ON_PO<1,LM,LN> = OCONV(INV.ON.PO,ICR.CNV1)
      INV_ALLOC<1,LM,LN> = OCONV(INV.ALLOC,ICR.CNV1)
 44*
RETURN
******
93000*
******
IF ERRMSG <> "" THEN
SCHEMA.ONLY = 0
STRXML = "<ErrMsg>": ERRMSG:"</ErrMsg>"
CALL WRITELOG(ERRMSG)
END
END
