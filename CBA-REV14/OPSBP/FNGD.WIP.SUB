  SUBROUTINE FNGD.WIP.SUB(CONO,MODE,JOBNO,FNGD.WIP.HIST,FNGD_WIP_HIST_TAG,REVERSE.WIP.HIST)
*COPY>CPYLIB>COM1
*COPY>JCS.CPYLIB>COM.JCS.LINK  
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>JCS.CPYLIB>COM.INV.STATS 
*COPY>PMC.CPYLIB>COM.CUST      
*COPY>OPS.CPYLIB>COM.ORDER     
*COPY>OPS.CPYLIB>COM.OPS.LINK  
*COPY>PMC.CPYLIB>COM.COMPANY
*********************************************************************
* REVISION    - [08.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - OPSBP
* PROGRAM     - FNGD.WIP.SUB
* DATE        - 02/17/93
* DESCRIPTION
*  18537 - 52 WEEK ACCOUNTING
* This program is used to load data to reverse wip
*T21491 doug 01/20/1997 * Zero manufacture quantity in FNGD.STATS file
*                         when zeroing job balance
*T23278 markt 11/03/1998 *  Add check for divisional security.
*                           Also enable division level EOP posting and
*                           daily assignment of various costs.
*T25465 gat 10/17/2000 * FIX PROBLEM WITH ORDERED QTY BEING OVERLADED BY
*                        MFG QTY
*T25727 lanny 03/30/2001 * Divide by Zero error.
*T25751 lanny 04/12/2001 * Correct the mesg when Job has open balances.
*T25978 adelgado 02/18/2002 * Add the use of prompts (S,SR,SB,ST).
*T26126 adelgado 03/08/2002 * Implement the LOCKED clause for READU.
*T27915 lross 03/24/2004 * Mod for T20611/27915.
*ENDDOC
*********************************************************************
*
*COPY>JCS.CPYLIB>JOB
*COPY>JCS.CPYLIB>REVERSE.WIP.HIST
*COPY>OPS.CPYLIB>ORDER
*COPY>OPS.CPYLIB>ORDER.DETAIL
*COPY>OPS.CPYLIB>ORDER.DETAIL.INQ
*COPY>OPS.CPYLIB>JOB.FNGD.STATS
*COPY>OPS.CPYLIB>FNGD.WIP.HIST
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>INV_RECEIPTS
*COPY>ICS.CPYLIB>CATEGORY
*COPY>ICS.CPYLIB>INV.JOB.STATS
*COPY>ICS.CPYLIB>FNGD.STATS
*COPY>ICS.CPYLIB>FNGD.JOB.STATS
*COPY>PMC.CPYLIB>JOB.SALES.STATS
*COPY>PMC.CPYLIB>CUSTOMER
*COPY>PMC.CPYLIB>COST.CNTR
*COPY>PMC.CPYLIB>FISCAL
*COPY>PMC.CPYLIB>COMPANY
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>GEN.XREF.SUB
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
  MAT SYSCOM.REC =  ""; SYS.TYPE = 2
*
*---- INITIALIZATION
*
  DIM OLD.FWH.REC(10)
  MAT OLD.FWH.REC = ""
  MAT GEN.XREF.REC = ""
  GXR.CO = CONO
  PORT.NO = "TTY"
  CALL SYSVARS.SUB(PORT.NO)
  READV OPER.ID FROM SECURITY, "R.":PORT.NO,2 ELSE OPER.ID = "???"
  MATREAD FISCAL.REC FROM CONTROL, CONO:"JCFISCAL" ELSE
    ERRMSG = "OPFISCAL IS NOT ON CONTROL FILE"
    GOSUB 91000; GOTO 99999
  END
***** T23278 v
  READ DIVISION.REC FROM CONTROL, CONO:"DIVISIONS" ELSE
    ERRMSG = "DIVISIONS CONTROL RECORD IS MISSING"
    GOSUB 91000; GOTO 99999
  END
*
  READ SECURITY.REC FROM CONTROL, CONO:"DIV.SECURITY" ELSE
    ERRMSG = "DIV.SECURITY CONTROL RECORD IS MISSING"
    GOSUB 91000 ; GOTO 99999
  END
*  IF LEN(FR.CURR.PER) # 6 THEN
*      ERRMSG = "ERROR IN JCFISCAL - ":FR.CURR.PER
*      GOSUB 91000; GOTO 99999
*  END
***** T23278 ^
  READ PERIOD.REC FROM CONTROL, CONO:"ACCT.PERIODS" ELSE
    PERIOD.REC = ""
    PERIOD.REC<1> = 12
  END
  NUM.PERIODS = PERIOD.REC<1>
***** T23278 v
*  IF FR.CURR.PER[5,2] < 1 OR FR.CURR.PER[5,2] > NUM.PERIODS THEN
*      ERRMSG = "ERROR IN JCFISCAL - ":FR.CURR.PER
*      GOSUB 91000; GOTO 99999
*  END
*  CURR = FR.CURR.PER[5,2]
*  YEAR = FR.CURR.PER[1,4]
***** T23278 ^
*
*---- MAIN PROCESSING
*
100 *
  MAT RWH.REC=''
  MANU.AMT=''; COMP.AMT=''
  IF MODE # "A" THEN
    MAT CUST.REC = ""; MAT SCV.REC = ""
    ECD.ACTION = 6; CALL SCRN.EDIT
    ECD.NUM = 5; ECD.ACTION = 4; CALL SCRN.EDIT
    IF ECD.RET.VALUE = "END" THEN GOTO 99999
    IF ECD.RET.VALUE # "" THEN GOTO 190
120 *
    ECD.NUM = 6; ECD.ACTION = 4; CALL SCRN.EDIT
    BEGIN CASE
      CASE ECD.RET.VALUE = "END"
        GOTO 100
      CASE ECD.RET.VALUE # ""
        MATREAD CUST.REC FROM CUSTOMER, CONO : ECD.RET.VALUE ELSE
          ERRMSG = "CANNOT LOCATE CUSTOMER - " : ECD.RET.VALUE
          GOSUB 91000; GOTO 120
        END
        JOB.CUST = ECD.RET.VALUE
      CASE 1
140 *
        ECD.NUM = 7
        ECD.ACTION = 4; CALL SCRN.EDIT
        IF ECD.RET.VALUE = "END" THEN GOTO 100
        IF ECD.RET.VALUE = "" THEN GOTO 120
        GXR.NAME = "CUSTOMER"
        GXR.XREF = CUSTOMER.XREF
        GXR.FILE = CUSTOMER
        GXR.SRCH.ID = ECD.RET.VALUE
        CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
        IF GXR.ID = '' THEN
          ECD.ACTION = 2; CALL SCRN.EDIT
          SCV.REC(7) = ""; GOTO 120
        END ELSE
          MATREAD CUST.REC FROM CUSTOMER, CONO : GXR.ID ELSE
            ERRMSG = "CANNOT LOCATE CUSTOMER - " : GXR.ID
            GOSUB 91000; GOTO 140
          END
          JOB.CUST = GXR.ID
        END
    END CASE
    GXR.NAME = "JOB"
    GXR.XREF = CUSTOMER
    GXR.FILE = JOB
    GXR.SRCH.ID = JOB.CUST
    CALL JOB.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
    ECD.ACTION = 2 ; CALL SCRN.EDIT
    IF GXR.ID = "" THEN
      ERRMSG = "NO JOB SELECTION FOR CUSTOMER - " : JOB.CUST
      GOSUB 91000 ; GOTO 100
    END
    ECD.RET.VALUE = GXR.ID
190 *
    JOBNO = ECD.RET.VALUE
  END
  * T26126 v
  MATREADU JOB.REC FROM JOB, CONO:JOBNO LOCKED
    ERRMSG = 'JOB record is locked by user - ':GETUSERNAME(STATUS())
    GOSUB 91000;GOTO 100 
  END ELSE
  * T26126 ^
    RELEASE JOB, CONO:JOBNO
    ERRMSG='JOB ':JOBNO:' IS MISSING'
    GOSUB 91000; GOTO 100
  END
*****T23278 v
  DIV.CODE = JOB.DIV; USER.ID = UPCASE(@LOGNAME); ERRMSG = ''
  CALL CK.DIV.SEC.SUB(CONO,DIV.CODE,USER.ID,ERRMSG)
  IF ERRMSG # '' THEN
    GOSUB 91000; GOTO 100
  END
*
  IF SECURITY.REC<1> = "Y" AND SECURITY.REC<2> = "Y" THEN 
    IF DIV.CODE = "00" OR DIV.CODE = "ALL" THEN
      ERRMSG = " 'ALL' OR '00' INVALID WHEN DIVISION-LEVEL POSTING & CLOSING IS SELECTED"
      GOSUB 91000; GOTO 99999
    END
    LOCATE DIV.CODE IN DIVISION.REC<1>,1 SETTING POS ELSE 
      ERRMSG = "Division ":DIV.CODE:" not found in Control File DIVISIONS Record."
      GOSUB 91000; GOTO 99999
    END
  END ELSE
    POS = 1
  END
  IF LEN(FR.CURR.PER<1,POS>) # 6 THEN
    ERRMSG = "ERROR IN JCFISCAL - ":FR.CURR.PER<1,POS>
    GOSUB 91000; GOTO 99999
  END
  YEAR = FR.CURR.PER<1,POS>[1,4]
  CURR = FR.CURR.PER<1,POS>[5,2]
*****T23278 ^
*IF JOB.WIP<1,1> + 0 = 0 THEN
*  IF MODE # "A" THEN
*    ERRMSG = "NO WORK IN-PROCESS FOR THIS JOB"
*    GOSUB 91000; GOTO 100
*  END ELSE
*    RELEASE JOB, CONO:JOBNO
*    GOTO 99999
*  END
*END
*IF SUM(JOB.WIP<1,2>) = 0 THEN
*  IF MODE # "A" THEN
*    ERRMSG='NO WORK IN PROCESS FOR THIS JOB'
*    GOSUB 91000; GOTO 100
*  END ELSE
*    RELEASE JOB, CONO:JOBNO
*    GOTO 99999
*  END
*END
  * T26126 v
  MATREADU JFS.REC FROM JOB.FNGD.STATS, CONO:JOBNO LOCKED
    ERRMSG = 'JOB.FNGD.STATS record is locked by user - ':GETUSERNAME(STATUS())
    GOSUB 91000;GOTO 100 
  END ELSE
  * T26126 ^
    RELEASE JOB, CONO:JOBNO
    RELEASE JOB.FNGD.STATS, CONO:JOBNO
    IF MODE # "A" THEN
      ERRMSG = "There are no finished goods on this job"
      GOSUB 91000; GOTO 100
    END ELSE
      GOTO 99999
    END
  END
  * T26126 v
  MATREADU FWH.REC FROM FNGD.WIP.HIST, CONO:JOBNO LOCKED
    ERRMSG = 'FNGD.WIP.HIST record is locked by user - ':GETUSERNAME(STATUS())
    GOSUB 91000;GOTO 100 
  END ELSE MAT FWH.REC=''
  * T26126 ^
  MAT OLD.FWH.REC = MAT FWH.REC
  RWH.OPER = PORT.NO:"!":OPER.ID
  RWH.ENT.DATE = DATE()
  RWH.JOB = JOBNO
  REV.PER = 0
  PCNT = DCOUNT(JFS.PROD,VM)
  FOR P = 1 TO PCNT
    BEGIN CASE
*T25727   CASE JFS.M.QTY<1,P> > JFS.F.QTY<1,P>
      CASE JFS.M.QTY<1,P>+0 > JFS.F.QTY<1,P>+0
        REV.PER = REV.PER + (JFS.F.QTY<1,P> / JFS.M.QTY<1,P>)
      CASE JFS.M.QTY<1,P>+0 > 0
        REV.PER = REV.PER + 1
    END CASE
  NEXT P
  REV.PER = INT(REV.PER / PCNT * 10000 + .5)
  IF REV.PER < 10000 AND MODE # "A" THEN
*T25751 v
    IF SUM(JOB.WIP<1,2>) > 0 THEN
      X=0;Y=23;TYP=18
*     PMSG = "Job has open balances, do you want to reverse WIP and complete the job (Y/N) "
      PMSG = "Job has open balances, reverse WIP and complete the job (Y/N) ? "
      CALL EDIT.SUB
      IF VALUE = "Y" THEN REV.PER = 10000
    END ELSE
      P_X=0; P_Y=23; P_VALUE='Job has no WIP to reverse'; P_OPT='CL'
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      REV.PER = 0
    END
*T25751 ^
  END
  RWH.REV.PER=REV.PER
  BEGIN CASE
    CASE RWH.REV.PER=0 AND MODE="A"
      RELEASE JOB, CONO:JOBNO
      RELEASE JOB.FNGD.STATS, CONO:JOBNO
      RELEASE FNGD.WIP.HIST, CONO:JOBNO
      GOTO 99999
    CASE MODE="A"
      RWH.REV.TYPE="ALL"
      RWH.REV.DATE="ALL"
      RWH.PERIOD="ALL"
*          PERIOD = FR.CURR.PER;* T23278
      PERIOD = FR.CURR.PER<1,POS>;* T23278
      GOSUB 3000
      GOSUB 5000
    CASE 1
      IF CUST.NAME = "" THEN
        MATREAD CUST.REC FROM CUSTOMER, CONO : JOB.CUST ELSE
          CUST.NAME = "*** NOT ON FILE ***"
        END
      END
      PAGE.SIZE = 2
      BEGIN.PAGE = 16
      LINE.SPACE = 1
      LINES = 0
      LN = 1
      OLD.START.LINE = 0
      P.PAGE.SIZE = 4
      P.BEGIN.PAGE = 9
      P.LN = 1
      P.OLD.START.LINE = 0
      ALL.TYPE = "LB"
      ALL.TYPE<1,2> = "MT"
      ALL.TYPE<1,3> = "OS"
      ALL.TYPE<1,4> = "SP"
      ALL.TYPE<1,5> = "MS"
      LINE.DESC = ""
      LINE.WIP.IN = ""
      LINE.WIP.OUT = ""
      LINE.WIP.TOT = ""
      MAIN.DESC = "OTHER - "
      SCV.REC(5)<ECD.SCRN.NO> = RWH.JOB
      SCV.REC(6)<ECD.SCRN.NO> = JOB.CUST
      SCV.REC(7)<ECD.SCRN.NO> =CUST.NAME 
      ECD.NUM=8
      BEGIN CASE
        CASE JOB.STATUS<1,1>=""
          SCV.REC(ECD.NUM)<1>="BOOKED"
        CASE JOB.STATUS<1,1>="9"
          SCV.REC(ECD.NUM)<1>="CANCELLED"
        CASE JOB.STATUS<1,1>="7"
          SCV.REC(ECD.NUM)<1>="READY TO PURGE"
        CASE JOB.STATUS<1,1>="8"
          SCV.REC(ECD.NUM)<1>="WAS PURGED"
        CASE JOB.TRACK.DATE<1,10> # ""
          BEGIN CASE
            CASE JOB.STATUS<1,1> = "1"
              SCV.REC(ECD.NUM)<1> = "IN PROCESS"
            CASE JOB.STATUS <1,1> = "3"
              SCV.REC(ECD.NUM)<1> = "INVOICED"
            CASE JOB.STATUS<1,1> = "5"
              SCV.REC(ECD.NUM)<1>="REOPENED"
            CASE 1
              SCV.REC(ECD.NUM)<1> = "COMPLETED"
          END CASE
        CASE JOB.TRACK.DATE<1,9> # ""
          BEGIN CASE
            CASE JOB.STATUS<1,1> = "1"
              SCV.REC(ECD.NUM)<1> = "IN PROCESS"
            CASE JOB.STATUS<1,1> = "5"
              SCV.REC(ECD.NUM)<1>="REOPENED"
            CASE 1
              SCV.REC(ECD.NUM)<1> = "INVOICED"
          END CASE
        CASE JOB.TRACK.DATE<1,8> # ""
          SCV.REC(ECD.NUM)<1>="COSTED"
        CASE JOB.TRACK.DATE<1,7> # ""
          SCV.REC(ECD.NUM)<1>="RDY-TO-BILL"
        CASE JOB.TRACK.DATE<1,6> # ""
          SCV.REC(ECD.NUM)<1>="DELIVERED"
        CASE JOB.TRACK.DATE<1,5> # ""
          SCV.REC(ECD.NUM)<1>="IN PROCESS"
        CASE JOB.TRACK.DATE<1,3> # ""
          SCV.REC(ECD.NUM)<1>="IN PROCESS"
        CASE JOB.STATUS<1,1>="1"
          SCV.REC(ECD.NUM)<1>="IN PROCESS"
        CASE JOB.STATUS<1,1>="3"
          SCV.REC(ECD.NUM)<1>="INVOICED"
        CASE 1
          SCV.REC(ECD.NUM)<1>="UNKNOWN"
      END CASE
      READ CTL.WIP.TYPE FROM CONTROL, CONO : "WIP.DEFAULT" ELSE CTL.WIP.TYPE = ""
      IF CTL.WIP.TYPE = "" THEN CTL.WIP.TYPE = "ALL"
      RWH.REV.TYPE = CTL.WIP.TYPE
      LINES = DCOUNT(RWH.REV.TYPE,VM)
      IF CTL.WIP.TYPE # "ALL" AND LINES < 5 THEN
        LOCATE "OTH" IN RWH.REV.TYPE<1>,1 SETTING FND ELSE
          LINES = LINES + 1
          RWH.REV.TYPE<1,LINES> = "OTH"
        END
      END
      FOR LN = 1 TO LINES
        BEGIN CASE
          CASE RWH.REV.TYPE<1,LN> = "LB"
            LINE.DESC<1,LN> = "LABOR"
            LINE.WIP.IN<1,LN> = SUM(JOB.LB.WIP<1,2>)
            LINE.WIP.OUT<1,LN> = SUM(JOB.LB.WIP<1,3>)
          CASE RWH.REV.TYPE<1,LN> = "MT"
            LINE.DESC<1,LN> = "MATERIAL"
            LINE.WIP.IN<1,LN> = SUM(JOB.MT.WIP<1,2>)
            LINE.WIP.OUT<1,LN> = SUM(JOB.MT.WIP<1,3>)
          CASE RWH.REV.TYPE<1,LN> = "OS"
            LINE.DESC<1,LN> = "OUTSIDE PURCHASE"
            LINE.WIP.IN<1,LN> = SUM(JOB.OS.WIP<1,2>)
            LINE.WIP.OUT<1,LN> = SUM(JOB.OS.WIP<1,3>)
          CASE RWH.REV.TYPE<1,LN> = "SP"
            LINE.DESC<1,LN> = "SHIPPING"
            LINE.WIP.IN<1,LN> = SUM(JOB.SP.WIP<1,2>)
            LINE.WIP.OUT<1,LN> = SUM(JOB.SP.WIP<1,3>)
          CASE RWH.REV.TYPE<1,LN> = "MS"
            LINE.DESC<1,LN> = "MISCELLANEOUS"
            LINE.WIP.IN<1,LN> = SUM(JOB.MS.WIP<1,2>)
            LINE.WIP.OUT<1,LN> = SUM(JOB.MS.WIP<1,3>)
          CASE RWH.REV.TYPE<1,LN> = "OTH"
            LINE.DESC<1,LN> = MAIN.DESC
            FOR XX = 1 TO 5
              LOCATE ALL.TYPE<1,XX> IN RWH.REV.TYPE<1>,1 SETTING FND ELSE
                BEGIN CASE
                  CASE ALL.TYPE<1,XX> = "LB"
                    LINE.WIP.IN<1,LN> = LINE.WIP.IN<1,LN> + SUM(JOB.LB.WIP<1,2>)
                    LINE.WIP.OUT<1,LN> = LINE.WIP.OUT<1,LN> + SUM(JOB.LB.WIP<1,3>)
                  CASE ALL.TYPE<1,XX> = "MT"
                    LINE.WIP.IN<1,LN> = LINE.WIP.IN<1,LN> + SUM(JOB.MT.WIP<1,2>)
                    LINE.WIP.OUT<1,LN> = LINE.WIP.OUT<1,LN> + SUM(JOB.MT.WIP<1,3>)
                  CASE ALL.TYPE<1,XX> = "OS"
                    LINE.WIP.IN<1,LN> = LINE.WIP.IN<1,LN> + SUM(JOB.OS.WIP<1,2>)
                    LINE.WIP.OUT<1,LN> = LINE.WIP.OUT<1,LN> + SUM(JOB.OS.WIP<1,3>)
                  CASE ALL.TYPE<1,XX> = "SP"
                    LINE.WIP.IN<1,LN> = LINE.WIP.IN<1,LN> + SUM(JOB.SP.WIP<1,2>)
                    LINE.WIP.OUT<1,LN> = LINE.WIP.OUT<1,LN> + SUM(JOB.SP.WIP<1,3>)
                  CASE ALL.TYPE<1,XX> = "MS"
                    LINE.WIP.IN<1,LN> = LINE.WIP.IN<1,LN> + SUM(JOB.MS.WIP<1,2>)
                    LINE.WIP.OUT<1,LN> = LINE.WIP.OUT<1,LN> + SUM(JOB.MS.WIP<1,3>)
                END CASE
                IF LINE.DESC<1,LN> # MAIN.DESC THEN
                  LINE.DESC<1,LN> = LINE.DESC<1,LN> : ","
                END
                LINE.DESC<1,LN> = LINE.DESC<1,LN> : ALL.TYPE<1,XX>
              END
            NEXT XX
          CASE 1
            LINE.DESC<1,LN> = "ALL"
            LINE.WIP.IN<1,LN> = SUM(JOB.WIP<1,2>)
            LINE.WIP.OUT<1,LN> = SUM(JOB.WIP<1,3>)
        END CASE
        LINE.WIP.TOT<1,LN> = LINE.WIP.IN<1,LN> + LINE.WIP.OUT<1,LN>
        RWH.REV.DATE<1,LN> = "ALL"
        RWH.REV.PER<1,LN> = REV.PER
      NEXT LN
      IF REV.PER < 10000 THEN
        RWH.Z.R.QTY = "N"
        RWH.Z.A.QTY = "N"
        RWH.REV.DATE = DATE()
*              RWH.PERIOD = FR.CURR.PER;* T23278
        RWH.PERIOD = FR.CURR.PER<1,POS>;* T23278
      END ELSE
        RWH.Z.R.QTY = "Y"
        RWH.Z.A.QTY = "Y"
        RWH.REV.DATE = "ALL"
        RWH.PERIOD = "ALL"
      END
      IF RWH.PERIOD = "ALL" THEN
*      PERIOD = FR.CURR.PER;* T23278
        PERIOD = FR.CURR.PER<1,POS>;* T23278
      END ELSE
        PERIOD = RWH.PERIOD
      END
      SCV.REC(10)<ECD.SCRN.NO> = RWH.Z.R.QTY
      SCV.REC(9)<ECD.SCRN.NO> = RWH.Z.A.QTY
      IF RWH.REV.DATE = "ALL" THEN
        SCV.REC(11)<ECD.SCRN.NO> = RWH.REV.DATE
      END ELSE
        SCV.REC(11)<ECD.SCRN.NO> = OCONV(RWH.REV.DATE,"D2/")
      END
      SCV.REC(12)<ECD.SCRN.NO> = RWH.PERIOD
      SCV.REC(13)<ECD.SCRN.NO> = SUM(LINE.WIP.IN)
      SCV.REC(14)<ECD.SCRN.NO> = SUM(LINE.WIP.OUT)
      SCV.REC(15)<ECD.SCRN.NO> = SUM(LINE.WIP.TOT)
      ECD.ACTION = 3
      CALL SCRN.EDIT
      LN = 1
*  FOR OPTION = 1 TO 3 WHILE ECD.RET.VALUE # "END"
*    ON OPTION GOSUB 2000,2100,2200
*  NEXT OPTION
*  IF ECD.RET.VALUE = "END" THEN
*    RELEASE JOB, CONO:JOBNO
*    RELEASE FNGD.WIP.HIST, CONO:JOBNO
*    GOTO 100
*  END
      GOSUB 3000
      GOSUB 9000
      GOSUB 10000
*
*---- GET OPERATOR REQUEST
*
      MORE=1
      LOOP
        ECD.NUM = 1
        SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""
        ECD.ACTION = 4
        CALL SCRN.EDIT
        OPTION=ECD.RET.VALUE
        BEGIN CASE
          CASE OPTION = "E" OR OPTION = "END" OR OPTION = ""
            RELEASE JOB, CONO:JOBNO
            RELEASE JOB.FNGD.STATS, CONO:JOBNO
            RELEASE FNGD.WIP.HIST, CONO:JOBNO
            MORE=0
          CASE NUM(OPTION)
            PREV.PERIOD = PERIOD
            ON OPTION GOSUB 2000,2050,2100,2200
            IF PREV.PERIOD # PERIOD THEN
              MAT FWH.REC = MAT OLD.FWH.REC
              GOSUB 3000
            END
          CASE OPTION = "P"
            P.LN = P.LN + P.PAGE.SIZE
            IF P.LN > P.LINES THEN
              IF JFS.PROD<1,P.LN> = "" THEN P.LN = 1
            END
            GOSUB 9000
          CASE OPTION = "W"
            GOSUB 4000
          CASE OPTION = "F"
            GOSUB 5000
            MORE=0
        END CASE
      WHILE MORE DO REPEAT
      GOTO 100
  END CASE
  GOTO 99999
*-----------------------*
*---   SUBROUTINES   ---*
*-----------------------*
1000 *
  SLN = BEGIN.PAGE + LINE.SPACE * MOD(LN - 1,PAGE.SIZE)
*
*--- GET WIP PERCENT
*
1010 *
  X = 32
  Y = SLN
  TYP = 4
  SCALER = 2
  MAXL = 6
  MINV = 0
  MAXV = 10000
  O.R = "O"
  DEFAULT = OCONV(RWH.REV.PER<1,LN>, "MD2")
  CALL EDIT.SUB
  BEGIN CASE
    CASE VALUE = "END"
      GOTO 1999
    CASE VALUE = ""
      GOTO 1010
    CASE 1
      RWH.REV.PER<1,LN> = VALUE
  END CASE
1999*
  P_X  = 32 ; P_Y = SLN ; P_VALUE = OCONV(RWH.REV.PER<1,LN>, "MD2") "R#7" ; P_OPT = ""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  RETURN
*
*--- ZERO RESERVE QUANTITY
*
2000 *
  ECD.NUM = 10
*CSF 23970
*IF REV.PER < 10000 THEN
  IF REV.PER >= 10000 THEN
    ECD.DEFAULT = 'Y'
  END ELSE
    ECD.DEFAULT = RWH.Z.R.QTY
  END
*
  ECD.ACTION = 4; CALL SCRN.EDIT
  IF ECD.RET.VALUE # "END" THEN
    RWH.Z.R.QTY = ECD.RET.VALUE
  END
*END ELSE
*  RWH.Z.R.QTY = "Y"
*  SCV.REC(ECD.NUM)<ECD.SCRN.NO> = "Y"
*  ECD.ACTION=5; CALL SCRN.EDIT
*END
  RETURN
*
*--- ZERO ALLOCATED FNGD QUANTITY
*
2050 *
  ECD.NUM = 9
*CSF 23970
*IF REV.PER < 10000 THEN
  IF REV.PER >= 10000 THEN
    ECD.DEFAULT = 'Y'
  END ELSE
    ECD.DEFAULT = RWH.Z.A.QTY
  END
*
  ECD.ACTION = 4; CALL SCRN.EDIT
  IF ECD.RET.VALUE # "END" THEN
    RWH.Z.A.QTY = ECD.RET.VALUE
  END
*END ELSE
*  RWH.Z.A.QTY = "Y"
*  SCV.REC(ECD.NUM)<ECD.SCRN.NO> = "Y"
*  ECD.ACTION=5; CALL SCRN.EDIT
*END
  RETURN
*
*--- REVERSE DATE
*
2100 *
  ECD.NUM = 11
*CSF 23970
  IF REV.PER < 10000 THEN
    ECD.DEFAULT = OCONV(DATE(),"D2/")
  END ELSE
    ECD.DEFAULT = 'ALL'
  END
*
  ECD.ACTION = 4; CALL SCRN.EDIT
  BEGIN CASE
    CASE ECD.RET.VALUE = "END"
    CASE ECD.RET.VALUE = "ALL"
      RWH.REV.DATE = ECD.RET.VALUE
    CASE 1
      IVALUE = ICONV(ECD.RET.VALUE,"D2/")
      IF IVALUE = ECD.RET.VALUE OR IVALUE = "" THEN
        ERRMSG = "*** INVALID DATE ***"
        GOSUB 91000; GOTO 2100
      END
      RWH.REV.DATE = IVALUE
      ECD.NUM = 11; SCV.REC(ECD.NUM) = OCONV(IVALUE,"D2/")
      ECD.ACTION = 5; CALL SCRN.EDIT
  END CASE
*END ELSE
*  RWH.REV.DATE = "ALL"
*  SCV.REC(ECD.NUM) =  "ALL"
*  ECD.ACTION = 5; CALL SCRN.EDIT
*END
  RETURN
*
*--- PERIOD
*
2200 *
  ECD.NUM = 12
*CSF 23970
  IF REV.PER < 10000 THEN
    IVALUE = SCV.REC(ECD.NUM)
*      ECD.DEFAULT = FR.CURR.PER[5,2];* T23278
    ECD.DEFAULT = FR.CURR.PER<1,POS>[5,2];* T23278
  END ELSE
    IVALUE = 'ALL'
    ECD.DEFAULT = 'ALL'
  END
*
  NEXT.TO.LAST.PERIOD = NUM.PERIODS - 1
*  IF REV.PER < 10000 THEN
  IVALUE = SCV.REC(ECD.NUM)
  SCV.REC(ECD.NUM) = ""; ECD.ACTION = 5; CALL SCRN.EDIT
  IF LEN(IVALUE) > 3 THEN
    SCV.REC(ECD.NUM) = IVALUE[5,2]
  END ELSE
    SCV.REC(ECD.NUM) = IVALUE
  END
  BEGIN CASE
    CASE CURR < NEXT.TO.LAST.PERIOD
      ECD.VALDAT = STR("0",(2-LEN(CURR))):CURR:","
      ECD.VALDAT = ECD.VALDAT:STR("0",(2-LEN(CURR+1))):(CURR+1):","
      ECD.VALDAT = ECD.VALDAT:STR("0",(2-LEN(CURR+2))):(CURR+2):","
      ECD.VALDAT = ECD.VALDAT:"ALL"
    CASE CURR = NEXT.TO.LAST.PERIOD
      ECD.VALDAT = NEXT.TO.LAST.PERIOD:",":NUM.PERIODS:",01,ALL"
    CASE 1
      ECD.VALDAT = NUM.PERIODS:",01,02,ALL"
  END CASE
  ECD.HMSG = "Valid Periods - ":ECD.VALDAT
* ECD.DEFAULT = FR.CURR.PER[5,2]
  ECD.MAXL = 3; ECD.ACTION = 4; CALL SCRN.EDIT
  BEGIN CASE
    CASE ECD.RET.VALUE = "END"
    CASE ECD.RET.VALUE = "ALL"
      RWH.PERIOD = ECD.RET.VALUE
    CASE NOT(NUM(ECD.RET.VALUE))
      ERRMSG = "*** INVALID PERIOD ***"
      GOSUB 91000; GOTO 2200
    CASE ECD.RET.VALUE < 1 OR ECD.RET.VALUE > NUM.PERIODS
      ERRMSG = "*** INVALID PERIOD ***"
      GOSUB 91000; GOTO 2200
    CASE CURR > (NEXT.TO.LAST.PERIOD - 1) AND ECD.RET.VALUE < 3
      RWH.PERIOD = (YEAR + 1) : STR("0",(2-LEN(ECD.RET.VALUE))) : ECD.RET.VALUE
    CASE 1
      RWH.PERIOD = YEAR : STR("0",(2-LEN(ECD.RET.VALUE))) : ECD.RET.VALUE
  END CASE
  ECD.NUM = 12; SCV.REC(ECD.NUM) = RWH.PERIOD
  ECD.ACTION = 5
  CALL SCRN.EDIT
*  END ELSE
*    RWH.PERIOD = "ALL"
*    SCV.REC(ECD.NUM)<ECD.SCRN.NO> = "ALL"
*    ECD.ACTION = 5; CALL SCRN.EDIT
*  END
  IF RWH.PERIOD = "ALL" THEN
*      PERIOD = FR.CURR.PER;* T23278
    PERIOD = FR.CURR.PER<1,POS>;* T23278
  END ELSE
    PERIOD = RWH.PERIOD
  END
  RETURN
*
*---- CALC FNGD AMOUNTS
*
3000 *
  PCNT = DCOUNT(JFS.PROD,VM)
  FOR P = 1 TO PCNT
    PROD = JFS.PROD<1,P>
    WHSE = JFS.WHSE<1,P>
    MATREAD INV.REC FROM INVENTORY, CONO:PROD ELSE
      ERRMSG = "Cannot locate Product ":PROD
      GOSUB 91000; GOTO 3609
    END
    MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
      ERRMSG = "Cannot locate Product Line # ":INV.LINE
      GOSUB 91000; GOTO 3609
    END
    IF INV.COST.WT+0 = 0 THEN INV.COST.WT = 1
    MANU.AMT<1,P> = INT(JFS.U.PRICE<1,P>/100 * (JFS.M.QTY<1,P>/1000) / (INV.COST.WT/100) + .5)
    SCNT = DCOUNT(JFS.PALLET<1,P>,SVM)
    FOR S = 1 TO SCNT
*      PLRS.ID = JFS.PALLET<1,P,S>
RECP.NO= JFS.RECP<1,P,S>
MATREAD INVR.REC FROM INV_RECEIPTS,CONO:RECP.NO ELSE
          ERRMSG = "Cannot locate INV_RECEIPTS ":RECP.NO
          GOSUB 91000; GOTO 3509
        END
      COMP.AMT<1,P> = COMP.AMT<1,P> + INVR.TOT.AMT
3509 *
    NEXT S
3609 *
  NEXT P
  P.LINES = DCOUNT(FWH.PROD,VM)
  RETURN
*
*---- WIP OPTIONS
*
4000 *
  AGAIN=1
  LOOP
    ECD.NUM = 2; SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ''
    ECD.ACTION = 4; CALL SCRN.EDIT
    OPT = ECD.RET.VALUE
    MINV = OLD.START.LINE; MAXV = LAST.LINE
    BEGIN CASE
      CASE OPT = "END" OR OPT = "E" OR OPT = ""
        AGAIN = 0
      CASE NUM(OPT) AND OPT <= MAXV AND OPT >= MINV
        LN=OPT
        GOSUB 1000
      CASE OPT = "S"
        LN = LN + PAGE.SIZE
        IF LN > LINES THEN
          IF RWH.REV.TYPE<1,LN> = "" THEN LN = 1
        END
        GOSUB 10000
      * T25978 v
      CASE OPT = 'SR'
        LN -= PAGE.SIZE
        IF LN < 1 THEN LN = 1
        GOSUB 10000
      CASE OPT = 'ST'
        LN = 1
        GOSUB 10000
      CASE OPT = 'SB'
        LN = LINES
        GOSUB 10000
      * T25978 ^
    END CASE
  WHILE AGAIN DO REPEAT
  RETURN
*
*---- REVERSE WIP
*
5000 *
  RWH.JB.BEFORE = JOB.WIP<1,2>
  RWH.LB.BEFORE = JOB.LB.WIP<1,2>
  RWH.MT.BEFORE = JOB.MT.WIP<1,2>
  RWH.OS.BEFORE = JOB.OS.WIP<1,2>
  RWH.SP.BEFORE = JOB.SP.WIP<1,2>
  RWH.MS.BEFORE = JOB.MS.WIP<1,2>
  FOR I = 1 TO LINES
    IF RWH.REV.TYPE<1,I> = "OTH" THEN
      PER = RWH.REV.PER<1,I>
      PTR = I - 1
      FOR II = 1 TO 5
        LOCATE ALL.TYPE<1,II> IN CTL.WIP.TYPE<1>,1 SETTING FND ELSE
          PTR = PTR + 1
          RWH.REV.TYPE<1,PTR> = ALL.TYPE<1,II>
          RWH.REV.DATE<1,PTR> = RWH.REV.DATE<1,1>
          RWH.REV.PER<1,PTR> = PER
        END
      NEXT II
    END ELSE
      RWH.REV.DATE<1,I> = RWH.REV.DATE<1,1>
    END
  NEXT I
*  CALL REVERSE.FNGD.JOB.WIP(CONO,RWH.JOB,RWH.REV.TYPE,RWH.REV.PER,RWH.REV.DATE,RWH.PERIOD,FR.CURR.PER);* T23278
  CALL REVERSE.FNGD.JOB.WIP(CONO,RWH.JOB,RWH.REV.TYPE,RWH.REV.PER,RWH.REV.DATE,RWH.PERIOD,FR.CURR.PER<1,POS>);* T23278
  RWH.JB.AFTER = JOB.WIP<1,2>
  RWH.LB.AFTER = JOB.LB.WIP<1,2>
  RWH.MT.AFTER = JOB.MT.WIP<1,2>
  RWH.OS.AFTER = JOB.OS.WIP<1,2>
  RWH.SP.AFTER = JOB.SP.WIP<1,2>
  RWH.MS.AFTER = JOB.MS.WIP<1,2>
  RWH.FNGD.PROD = JFS.PROD
  RWH.FNGD.WHSE = JFS.WHSE
  RWH.FNGD.AMT = COMP.AMT
  LOCATE PERIOD IN FWH.WIP.PER<1>,1 SETTING WPTR ELSE
    FWH.WIP.PER<1,WPTR> = PERIOD
    FWH.WIP.AMT<1,WPTR> = 0
  END
  WIP.BEFORE = SUM(SUM(RWH.JB.BEFORE))
  WIP.AFTER = SUM(SUM(RWH.JB.AFTER))
  FWH.WIP.AMT<1,WPTR> = FWH.WIP.AMT<1,WPTR> + WIP.BEFORE - WIP.AFTER
  IF RWH.Z.R.QTY = "Y" THEN
*T27915 v
    IF SUM(JOB.ALOC.QTY) # 0 AND CO.POS = 'Y' THEN
       CALL CLEAR.JOB.ALLOC(CONO,RWH.JOB)
    END
*
    RESV.ACTION = "D"
    RESV.LOC = 0
    CALL FNGD.JOB.RESV.SUB(RESV.ACTION,RESV.LOC,CONO,RWH.JOB)
*T20611/27915 v
    IF RESV.ACTION # 'D' AND RESV.ACTION # '' THEN
      ERRMSG = RESV.ACTION; GOSUB 91000; RETURN
    END
* ^
    MCNT = COUNT(JOB.RESV.MATL,VM) + (JOB.RESV.MATL # "")
    FOR M = MCNT TO 1 STEP - 1
      IF JOB.RESV.QTY<1,M> + JOB.ALOC.QTY<1,M> + JOB.USED.QTY<1,M> = 0 THEN
        JSTAT.ID = JOB.RESV.MATL<1,M>:"!":JOB.RESV.WHSE<1,M>:"!":RWH.JOB
        MATREAD INV.JS.REC FROM INV.JOB.STATS, CONO:JSTAT.ID ELSE
          JOB.RESV.MATL = DELETE(JOB.RESV.MATL,1,M,0)
          JOB.RESV.WHSE = DELETE(JOB.RESV.WHSE,1,M,0)
          JOB.RESV.DATE = DELETE(JOB.RESV.DATE,1,M,0)
          JOB.ALOC.QTY = DELETE(JOB.ALOC.QTY,1,M,0)
          JOB.RESV.QTY = DELETE(JOB.RESV.QTY,1,M,0)
          JOB.USED.QTY = DELETE(JOB.USED.QTY,1,M,0)
          JOB.ALOC.AMT = DELETE(JOB.ALOC.AMT,1,M,0)
          JOB.RESV.AMT = DELETE(JOB.RESV.AMT,1,M,0)
          JOB.USED.AMT = DELETE(JOB.USED.AMT,1,M,0)
        END
      END
    NEXT M
  END
*
  IF RWH.Z.A.QTY = "Y" THEN
    MCNT = DCOUNT(JFS.PROD,VM)
    FOR M = 1 TO MCNT
*T21491 v
      PDNO = JFS.PROD<1,M>; WHNO = JFS.WHSE<1,M>
      FGS.ID = CONO:PDNO:"!":WHNO
      MATREADU FGS.REC FROM FNGD.STATS, FGS.ID THEN
        LOCATE JOBNO IN FGS.JOB<1>,1 SETTING L THEN
          FGS.A.QTY<1,L> = 0
          FGS.M.QTY<1,L> = 0
        END
        MATWRITE FGS.REC ON FNGD.STATS, FGS.ID
      END ELSE
        RELEASE FNGD.STATS, FGS.ID
      END
*T21491 ^
*T25465          JFS.M.QTY<1,M> = JFS.F.QTY<1,M>
      OCNT = DCOUNT(JFS.ORDER<1,M>,SVM)
      FOR O= 1 TO OCNT
        JFS.ORD.QTY<1,M,O> = 0
      NEXT O
      JFS.A.QTY<1,M> = 0
      FJS.ID = CONO:PDNO:"!":WHNO:"!":JOBNO
      MATREADU FJS.REC FROM FNGD.JOB.STATS, FJS.ID THEN
*T25465              FJS.M.QTY = FJS.F.QTY
        MATWRITE FJS.REC ON FNGD.JOB.STATS, FJS.ID
      END ELSE
        RELEASE FNGD.JOB.STATS, FJS.ID
      END
    NEXT M
    MATWRITE JFS.REC ON JOB.FNGD.STATS, CONO:JOBNO
*
    ORDNOS = ""; PRDPTR = ""; ORDPTR = ""
    MCNT = DCOUNT(JFS.PROD,VM)
    FOR M = 1 TO MCNT
      OCNT = DCOUNT(JFS.ORDER<1,M>,SVM)
      FOR O = 1 TO OCNT
        LOCATE JFS.ORDER<1,M,O> IN ORDNOS,1 SETTING OLOC THEN
          OPTR = DCOUNT(PRDPTR<OLOC>,VM) + 1
          PRDPTR<OLOC,OPTR> = M
          ORDPTR<OLOC,OPTR> = O
        END ELSE
          ORDNOS<OLOC> = JFS.ORDER<1,M,O>
          PRDPTR<OLOC> = M
          ORDPTR<OLOC> = O
        END
      NEXT O
    NEXT M
    OCNT = DCOUNT(ORDNOS,AM)
    FOR OP = 1 TO OCNT
      ORDNUM = ORDNOS<OP>
      PCNT = DCOUNT(ORDPTR<OP>,VM)
      MATREADU ORD.REC FROM ORDER, CONO:ORDNUM ELSE
        RELEASE ORDER, CONO:ORDNUM
        FOR PP = 1 TO PCNT
          M = PRDPTR<OP,PP>; O = ORDPTR<OP,PP>
          PDNO = JFS.PROD<1,M>; WHNO = JFS.WHSE<1,M>
          GOSUB 5100
        NEXT PP
        GOTO 5050
      END
      STATUS = "L"; SHPNO = "ALL"
      CALL ORDER.LINE.UPD(CONO,ORDNUM,SHPNO,STATUS)
      SHPNO = '000'
      PCNT = DCOUNT(ORDPTR<OP>,VM)
      FOR PP = 1 TO PCNT
        M = PRDPTR<OP,PP>; O = ORDPTR<OP,PP>
        PDNO = JFS.PROD<1,M>; WHNO = JFS.WHSE<1,M>
        PTR = 1
        LOOP
          LOCATE PDNO IN ODQ.PROD<1>,PTR SETTING PLOC THEN
            IF WHNO = ODQ.WHSE<1,PLOC> THEN
              PTR = 0
            END
          END ELSE
            PLOC = 0; PTR = 0
          END
        WHILE PTR DO
          PTR = PLOC + 1
        REPEAT
        IF PLOC = 0 THEN
          RELEASE ORDER, CONO:ORDNUM
          GOSUB 5100; GOTO 5040
        END
        TOT.A.QTY = 0; JPTR = 1
        LOOP
          LOCATE JOBNO IN ODQ.JOB<1,PLOC>,JPTR SETTING JL THEN
            ODQ.JOB.QTY<1,PLOC,JL> = 0
            JPTR = JL + 1
          END ELSE
            JL = 0
          END
        WHILE JL DO REPEAT
5040 *
      NEXT PP
      STATUS = "U"; SHPNO = ""
      CALL ORDER.LINE.UPD(CONO,ORDNUM,SHPNO,STATUS)
5050 *
    NEXT OP
  END
*
  IF REV.PER >= 10000 AND JOB.WIP<1,2,1>+0=0 AND JOB.WIP<1,2,2>+0=0 AND JOB.WIP<1,2,3>+0=0 AND JOB.WIP<1,2,4>+0=0 THEN
    IF JOB.STATUS<1,1> < 4 OR JOB.STATUS<1,1> = 5 THEN
      JOB.STATUS = INSERT(JOB.STATUS,1,1,0,"4")
      JOB.STAT.DATE = INSERT(JOB.STAT.DATE,1,1,0,RWH.ENT.DATE)
      JOB.TRACK.DATE<1,10> = DATE()
    END
  END
  READU SEQ.NUM FROM CONTROL, CONO:"REVERSE.WIP" ELSE SEQ.NUM = 10001
  REV.REC = ""
  LOOP
    READ REV.REC FROM REVERSE.WIP.HIST, CONO:SEQ.NUM ELSE REV.REC = ""
  WHILE REV.REC # "" DO
    SEQ.NUM = SEQ.NUM + 1
  REPEAT
  NEW.SEQ.NO = SEQ.NUM + 1
  WRITE NEW.SEQ.NO ON CONTROL, CONO:"REVERSE.WIP"
  MATWRITE RWH.REC ON REVERSE.WIP.HIST, CONO:SEQ.NUM
  MATWRITE FWH.REC ON FNGD.WIP.HIST, CONO:JOBNO
  WRITE '' ON FNGD_WIP_HIST_TAG, CONO:JOBNO
* T22164 v                                             
  MATREAD JFS.REC FROM JOB.FNGD.STATS, CONO:JOBNO ELSE 
     MAT JFS.REC = ""                                  
  END                                                  
  IF SUM(JFS.F.QTY) > 0 THEN                           
     JOB.QTY<1,1> = JOB.QTY<1,2>                       
  END                                                  
*T22164 ^                                              
  MATWRITE JOB.REC ON JOB, CONO:JOBNO
*GOSUB 6000
  RETURN
*
*---- Zero out allocated for the FJS
*
5100 *
  FJS.ID = CONO:PDNO:"!":WHNO:"!":JOBNO
  MATREADU FJS.REC FROM FNGD.JOB.STATS, FJS.ID THEN
    LOCATE ORDNUM IN FJS.ORD<1>,1 SETTING FND THEN
      FJS.ORD = DELETE(FJS.ORD,1,FND,0)
      FJS.ORD.QTY = DELETE(FJS.ORD.QTY,1,FND,0)
      FJS.A.QTY = SUM(FJS.ORD.QTY)
      MATWRITE FJS.REC ON FNGD.JOB.STATS, FJS.ID
    END ELSE
      RELEASE FNGD.JOB.STATS, FJS.ID
    END
  END ELSE
    RELEASE FNGD.JOB.STATS, FJS.ID
  END
  RETURN
*
*---- UPDATE SALES STATISTICS
*
6000*
  IF CO.SAS = "Y" THEN
    MATREADU JSS.REC FROM JOB.SALES.STATS, CONO:RWH.JOB ELSE
      RELEASE JOB.SALES.STATS,CONO:RWH.JOB
      GOTO 6999
    END
    JSS.COST.TOTAL = JOB.TOT.COST
    TOT.DCOST = ""
    TOT.SPOILAGE = ""
    TOT.SHIP = ""
    LCNT = COUNT(JOB.LB.DEPT,VM) + (JOB.LB.DEPT # "")
    FOR LB = 1 TO LCNT
      MATREAD CCTR.REC FROM COST.CNTR, CONO:JOB.LB.CCTR<1,LB> ELSE
        MAT CCTR.REC = ""
      END
      IF CCTR.TYPE = "S" OR CCTR.TYPE = "W" OR CCTR.TYPE = "B" THEN
        LOCATE JOB.LB.CCTR<1,LB> IN JSS.PRESS<1>,1 SETTING FOND ELSE
          FOND = COUNT(JSS.PRESS,VM) + (JSS.PRESS # "") + 1
          JSS.PRESS<1,FOND> = JOB.LB.CCTR<1,LB>
          IF FOND > 1 AND JSS.MULTI.PRESS # "Y" THEN JSS.MULTI.PRESS = "Y"
        END
      END
      TOT.SPOILAGE = TOT.SPOILAGE + JOB.LB.TCOST<1,LB,4>
    NEXT LB
    MCNT = COUNT(JOB.MT.DEPT,VM) + (JOB.MT.DEPT # "")
    FOR MT = 1 TO MCNT
      TOT.SPOILAGE = TOT.SPOILAGE + JOB.MT.TCOST<1,MT,4>
      TOT.DCOST = TOT.DCOST + JOB.MT.DCOST<1,MT,1> + JOB.MT.DCOST<1,MT,2>
    NEXT MT
    OCNT = COUNT(JOB.OS.DEPT,VM) + (JOB.OS.DEPT # "")
    FOR OO = 1 TO OCNT
      TOT.SPOILAGE = TOT.SPOILAGE + JOB.OS.TCOST<1,OO,4>
      TOT.DCOST = TOT.DCOST + JOB.OS.DCOST<1,OO>
    NEXT OO
    MSCNT = COUNT(JOB.MS.DEPT,VM) + (JOB.MS.DEPT # "")
    FOR MS = 1 TO MSCNT
      TOT.SPOILAGE = TOT.SPOILAGE + JOB.MS.TCOST<1,MS,4>
      TOT.DCOST = TOT.DCOST + JOB.MS.DCOST<1,MS>
    NEXT MS
    SCNT = COUNT(JOB.SP.DEPT,VM) + (JOB.SP.DEPT # "")
    FOR SP = 1 TO SCNT
      TOT.SPOILAGE = TOT.SPOILAGE + JOB.SP.TCOST<1,SP,4>
      TOT.DCOST = TOT.DCOST + JOB.SP.DCOST<1,SP>
      TOT.SHIP = TOT.SHIP + JOB.SP.COST<1,SP>
    NEXT SP
    JSS.VALUE.ADDED = JSS.INVOICE.TOTAL - TOT.DCOST
    JSS.SPOILAGE = TOT.SPOILAGE
    JSS.SHIP.COST = TOT.SHIP
    MATWRITE JSS.REC ON JOB.SALES.STATS, CONO:RWH.JOB
6999*
  END
  RETURN
*
*--- PRODUCT SCROLL ROUTINE
*
9000 *
  START.LINE = 1 + INT((P.LN - 1) / P.PAGE.SIZE) * P.PAGE.SIZE
  LAST.LINE = START.LINE + P.PAGE.SIZE - 1
  IF LAST.LINE > P.LINES THEN LAST.LINE = P.LINES
  IF START.LINE = P.OLD.START.LINE THEN RETURN
  P.OLD.START.LINE = START.LINE
  CNT = 1
  FOR N = START.LINE TO LAST.LINE
    SLN = P.BEGIN.PAGE + LINE.SPACE * MOD(N - 1,P.PAGE.SIZE)
    P_X  = 0 ; P_Y = SLN ; P_VALUE = N "R#3" ; P_OPT = ""
    P_X  := AM:4 ; P_Y := AM:SLN ; P_VALUE := AM:FWH.PROD<1,N> "L#15"
    P_X  := AM:20 ; P_Y := AM:SLN ; P_VALUE := AM:FWH.WHSE<1,N> "L#4"
    P_X  := AM:25 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(MANU.AMT<1,N>, "MD2") "R#12"
    P_X  := AM:38 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(COMP.AMT<1,N>, "MD2") "R#12"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    CNT = CNT + 1
  NEXT N
  FOR N = CNT TO P.PAGE.SIZE
    SLN = P.BEGIN.PAGE + LINE.SPACE * MOD(N - 1,P.PAGE.SIZE)
    P_X  = 0 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  NEXT N
  RETURN
*
*--- SCROLL ROUTINE
*
10000 *
  START.LINE = 1 + INT((LN - 1) / PAGE.SIZE) * PAGE.SIZE
  LAST.LINE = START.LINE + PAGE.SIZE - 1
  IF LAST.LINE > LINES THEN LAST.LINE = LINES
  IF START.LINE = OLD.START.LINE THEN RETURN
  OLD.START.LINE = START.LINE
  CNT = 1
  FOR N = START.LINE TO LAST.LINE
    SLN = BEGIN.PAGE + LINE.SPACE * MOD(N - 1,PAGE.SIZE)
    P_X  = 0 ; P_Y = SLN ; P_VALUE = N "R#2" ; P_OPT = ""
    P_X  := AM:3 ; P_Y := AM:SLN ; P_VALUE := AM:RWH.REV.TYPE<1,N> "L#4"
    P_X  := AM:8 ; P_Y := AM:SLN ; P_VALUE := AM:LINE.DESC<1,N> "L#23"
    P_X  := AM:32 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(RWH.REV.PER<1,N>, "MD2") "R#7"
    P_X  := AM:40 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(LINE.WIP.IN<1,N>, "MD2") "R#12"
    P_X  := AM:53 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(LINE.WIP.OUT<1,N>, "MD2") "R#12"
    P_X  := AM:66 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(LINE.WIP.TOT<1,N>, "MD2") "R#12"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    CNT = CNT + 1
  NEXT N
  FOR N = CNT TO PAGE.SIZE
    SLN = BEGIN.PAGE + LINE.SPACE * MOD(N - 1,PAGE.SIZE)
    P_X  = 0 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  NEXT N
  RETURN
*
*---- ERROR ROUTINE
*
91000 ERR.TYPE=1;CALL SYSCOM(MAT SYSCOM.REC);RETURN
* 91000 *
*    PRINT @(0,23):CL:ERRMSG:
*    INPUT REPLY:
*    PRINT @(0,23):CL:
*    RETURN
*
*---- END OF PROGRAM
*
99999*
  ECD.ACTION=99;CALL SCRN.EDIT
  RETURN
END
