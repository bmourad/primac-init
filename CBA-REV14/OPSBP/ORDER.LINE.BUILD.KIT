  SUBROUTINE ORDER.LINE.BUILD.KIT(CONO,ORDNO,LN,PDNO, MAT BOM.REC, MAT TEMP.MF,MAT ORD.DET.REC,MODE,NUM.ON.SCRN,LNFLG,SHPNO,BOM.NUMBER,ORIG.PROD,ORIG.IWH.RESV,ORIG.IWH.QTY,ORIG.ALOC.AVL)
*COPY>CPYLIB>COM1
*COPY>JCS.CPYLIB>COM.JCS.LINK  
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>JCS.CPYLIB>COM.INV.STATS 
*COPY>PMC.CPYLIB>COM.CUST
*COPY>OPS.CPYLIB>COM.ORDER
*COPY>ICS.CPYLIB>COM.INV.CNV
********************************************************************
* REVISION    - [08.1]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SOURCE        - OPSBP
* PROGRAM       - ORDER.LINE.BUILD.KIT
* BY
* DATE          - 01/07/95
* DESCRIPTION   -
*                 To explode from FNGD item on order any Kit FNGD items
*
* TASK MODS
*     18606 01/06/95 LLH ADD KIT, EXPLODED ITEMS AND NEW SCREEN
*     19346 11/28/95 LLH FIFO BUCKETS
*
*T20852 doug 08/20/1996 * Pick ticket tracking
*T21177 diane 11/06/1996 * REV11 UPG
*T23123 gat 07/30/1998 * FIX KIT PROBLEM WITH LIKE COMPONENTS
*T23416 renee 11/11/1998 * Add logic to keep extra values from being 
*                          added to certain fields in the ORDER.DETAIL
*                          record.
*T24805 alex 02/04/2000 * FIX BUG TO NOT CHANGE RESERVE QTY AFTER
*                         PRINTING OF PICK.TICKET
*T24926 alex 03/14/2000 * Prgm returns an error msg for reserve
*                         quantity, when there is available quantity to
*                         reserve for the kit.
*T26072 edvard 08/06/2001 * SEE CSF 38703
*T26072 lanny 08/08/2001 * Additional mods to task.
*T25740 epitka 02/08/2002 * REV12
********************************************************************
*COPY>PMC.CPYLIB>COMP.OPS
*COPY>ICS.CPYLIB>CATEGORY
*COPY>PMC.CPYLIB>CUSTOMER
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>FNGD.BOM
*COPY>ICS.CPYLIB>INV.FNGD
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.CNV
*COPY>ICS.CPYLIB>FNGD.JOB.STATS
*COPY>ICS.CPYLIB>FNGD.ORDER.STATS
*COPY>ICS.CPYLIB>FNGD.STATS
*COPY>OPS.CPYLIB>ORDER
*COPY>OPS.CPYLIB>ORDER.DETAIL
*COPY>OPS.CPYLIB>ORDER.DETAIL.INQ
*COPY>ICS.CPYLIB>PRICE.TABLE
*COPY>CPYLIB>GEN.XREF.SUB
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
*
  SYS.TYPE = 1 ; CALL SYSCOM(MAT SYSCOM.REC)
*
  DIM TEMP.MF(25)
  DIM ORIG.BOM.REC(50)
*
  EQU ORIG.BOM.PROD TO ORIG.BOM.REC(4)
  MAT ORIG.BOM.REC = ""
  MAT ORIG.BOM.REC = MAT BOM.REC
*
  OPEN.FLAG=1
  KIT.PROD = ""
  RESERVED.MIN.QTY = 0      ;* T24805
* START
*
  NUM.PROD = 0
  IF MODE = "A" AND LNFLG < 1 THEN
    NUM.PROD = DCOUNT(ORIG.BOM.PROD,VM)
    START.PT = DCOUNT(OSD.PROD,VM)
  END ELSE
    NUM.ORDER = DCOUNT(OSD.PROD,VM)
    START.PT = NUM.ON.SCRN<1,LN>
    FOR I = START.PT+1 TO NUM.ORDER
      IF OSD.KIT<1,I> = "K" THEN I = NUM.ORDER + 1
      IF OSD.KIT<1,I> = "N" THEN I = NUM.ORDER + 1
      IF OSD.KIT<1,I> = "M" THEN
        NUM.PROD = NUM.PROD + 1
        OSD.WHSE<1,I> = TEMP.MF(2)
      END
    NEXT I
    *T24926 v
    * KIT.PROD<1,2> = ORIG.BOM.PROD
    KIT.PROD<1,START.PT+1> = ORIG.BOM.PROD
    *T24926 ^
  END
  IF MODE = "A" AND LNFLG = 0 THEN
    CURR.POS = START.PT + 1
  END ELSE
    CURR.POS = NUM.ON.SCRN<1,LN>
  END
  CURR.AVAIL = 0
*
* ADD BOM COMPONENTS TO ORDER DETAIL RECORD
*
*
  IF MODE = "A" AND LNFLG < 1 THEN
    PLACE.VM = START.PT + 2
    FOR I = 1 TO NUM.PROD
      OSD.PROD = INSERT(OSD.PROD,1,PLACE.VM,0,ORIG.BOM.PROD<1,I>)
      KIT.PROD = INSERT(KIT.PROD,1,PLACE.VM,0,ORIG.BOM.PROD<1,I>)
      OSD.WHSE = INSERT(OSD.WHSE,1,PLACE.VM,0,TEMP.MF(2))
      OSD.O.QTY = INSERT(OSD.O.QTY,1,PLACE.VM,0,"")
      OSD.R.QTY = INSERT(OSD.R.QTY,1,PLACE.VM,0,"")
      OSD.F.QTY = INSERT(OSD.F.QTY,1,PLACE.VM,0,"")
      OSD.A.QTY = INSERT(OSD.A.QTY,1,PLACE.VM,0,"")
      OSD.S.QTY = INSERT(OSD.S.QTY,1,PLACE.VM,0,"")
      OSD.I.QTY = INSERT(OSD.I.QTY,1,PLACE.VM,0,"")
      OSD.G.QTY = INSERT(OSD.G.QTY,1,PLACE.VM,0,"")
      OSD.COMMENT = INSERT(OSD.COMMENT,1,PLACE.VM,0,"")
      OSD.PRICE = INSERT(OSD.PRICE,1,PLACE.VM,0,"")
      OSD.JOB = INSERT(OSD.JOB,1,PLACE.VM,0,"")
      OSD.JOB.QTY = INSERT(OSD.JOB.QTY,1,PLACE.VM,0,"")
      OSD.RECP.NO = INSERT(OSD.RECP.NO,1,PLACE.VM,0,"")
      OSD.FI.QTY = INSERT(OSD.FI.QTY,1,PLACE.VM,0,"")
      OSD.REL.NO = INSERT(OSD.REL.NO,1,PLACE.VM,0,"")
      OSD.AMT = INSERT(OSD.AMT,1,PLACE.VM,0,"")
      OSD.REL.QTY = INSERT(OSD.REL.QTY,1,PLACE.VM,0,"")
      OSD.P.QTY  = INSERT(OSD.P.QTY,1,PLACE.VM,0,"")
      OSD.KIT     = INSERT(OSD.KIT,1,PLACE.VM,0,"M")
      OSD.BOM.NUM     = INSERT(OSD.BOM.NUM,1,PLACE.VM,0,BOM.NUMBER)
      PTR = 1
      SEQ.FND = 0
      LOOP
        LOCATE ORIG.BOM.PROD<1,I> IN OSD.PROD<1>,PTR SETTING INDX1 THEN
          SEQ.FND = SEQ.FND + 1
          PTR = INDX1
        END ELSE
          PTR = 0
        END
      WHILE PTR DO
        PTR = PTR + 1
      REPEAT
      OSD.PROD.SEQ = INSERT(OSD.PROD.SEQ,1,PLACE.VM,0,SEQ.FND)
      PLACE.VM = PLACE.VM + 1
*
* ADD TO FIFO BUCKET ARRAY
*
      TEMP.KEY = CONO:ORIG.BOM.PROD<1,I>:"!":TEMP.MF(2)
      MATREAD IWH.REC FROM INV.WHSE, TEMP.KEY THEN
        ERR.FLG='';ERRMSG='';PERIOD=''                                       
        CALL BUILD.IWH.FI(TEMP.KEY,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
      END ELSE
        MAT IWH.REC = ""
      END
      LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
        TEMP.CONV = CONVERT(SVM,VM,ORIG.IWH.RESV<1,LINDX>)
        IWH.RSV.FI = TEMP.CONV
        TEMP.CONV = CONVERT(SVM,VM,ORIG.ALOC.AVL<1,LINDX>)
        FGS.A.QTY = TEMP.CONV
        IWH.RESV    = ORIG.IWH.QTY<1,LINDX>
      END ELSE
        ORIG.IWH.QTY = INSERT(ORIG.IWH.QTY,1,LINDX,1,IWH.RESV)
        ORIG.PROD   =INSERT(ORIG.PROD,1,LINDX,1,TEMP.KEY)
        TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
        ORIG.IWH.RESV=INSERT(ORIG.IWH.RESV,1,LINDX,1,TEMP.STR)
        TEMP.STR = CONVERT(VM,SVM,FGS.A.QTY)
        ORIG.ALOC.AVL=INSERT(ORIG.ALOC.AVL,1,LINDX,0,TEMP.STR)
      END
    NEXT I
  END
*
* FIRST CHECK TO SEE IF ANY KITS ARE ALREADY BUILT THAT YOU CAN RESERVE
*
  ACTUAL.RESV = TEMP.MF(4)
  GOSUB 100 
*
*
50 *
*
  SLN = 10 + 2 * MOD(LN-1,5)
  P_X = 0 ; P_Y = 21 ; P_VALUE = "Available on hand quantity = ":OCONV(INT(((TOTAL.BUILD / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1) "R#10" ; P_OPT = "CL"
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  X = 39; Y = SLN; TYPE = ICR.TYPE ; SCALER = ICR.SCAL
  MAXL=10; O.R="O"; ORVALDAT = 1; MINV=0; MAXV=TOTAL.BUILD
  DEFAULT = OCONV(INT(((TOTAL.BUILD / ICR.DV1) * ICR.MT1) /ICR.DV2 + .5),ICR.CNV)
  MINV = OCONV(INT(((RESERVED.MIN.QTY / ICR.DV1) * ICR.MT1) /ICR.DV2 + .5),ICR.CNV)    ;* T24805
  CALL EDIT.SUB
  IF VALUE = "" OR VALUE = "END" THEN
    VALUE = 0
    ERRMSG = 'Invalid must enter a number ' ; GOSUB 91000
    GOTO 50
  END
  IF VALUE = "S" THEN
    VALUE = 0
    ERRMSG = 'Invalid option for a KIT ' ; GOSUB 91000
    GOTO 50
  END
  ACTUAL.RESV = INT(((VALUE /ICR.MT1) * ICR.DV1) * ICR.DV2 + .5)
  IF ACTUAL.RESV > TEMP.MF(4) THEN
    ERRMSG = 'Cannot Reserve more than you ordered for a Kit ' ; GOSUB 91000
    GOTO 50
  END
  IF ACTUAL.RESV > TOTAL.BUILD THEN
    ERRMSG = 'Cannot Reserve more than you build for a Kit ' ; GOSUB 91000
    GOTO 50
  END
*
* FIND WHAT BUCKETS TO GET ACTUAL.RESV FOR KITS FROM
*
  RQTY = ""
  RSV.NO = ""
  REL.NO = ""
  REL.QTY = ""
  KIT.ITEM.RESERVE = 0
  TEMP.KEY = CONO:TEMP.MF(1):"!":TEMP.MF(2)
*T26072 v
  MATREAD IWH.REC FROM INV.WHSE, TEMP.KEY THEN    
    ERR.FLG='';ERRMSG='';PERIOD=''                                       
    CALL BUILD.IWH.FI(TEMP.KEY,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
  END ELSE
    MAT IWH.REC = ""                              
  END                                             
*T26072 ^
  LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
    TEMP.CONV = CONVERT(SVM,VM,ORIG.IWH.RESV<1,LINDX>)
    IWH.RSV.FI = TEMP.CONV
    TEMP.CONV = CONVERT(SVM,VM,ORIG.ALOC.AVL<1,LINDX>)
    FGS.A.QTY = TEMP.CONV
    IWH.RESV    = ORIG.IWH.QTY<1,LINDX>
  END ELSE
    ORIG.IWH.QTY = INSERT(ORIG.IWH.QTY,1,LINDX,1,IWH.RESV)
    ORIG.PROD   =INSERT(ORIG.PROD,1,LINDX,1,TEMP.KEY)
    TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
    ORIG.IWH.RESV=INSERT(ORIG.IWH.RESV,1,LINDX,1,TEMP.STR)
    TEMP.STR = CONVERT(VM,SVM,FGS.A.QTY)
    ORIG.ALOC.AVL=INSERT(ORIG.ALOC.AVL,1,LINDX,0,TEMP.STR)
  END
  RTOT = ACTUAL.RESV
  RQTY    = OSD.FI.QTY<1,CURR.POS>
  RSV.NO = OSD.RECP.NO<1,CURR.POS>
  REL.NO = OSD.REL.NO<1,CURR.POS>
  REL.QTY =OSD.REL.QTY<1,CURR.POS>
  PROD.SEQ = OSD.PROD.SEQ<1,CURR.POS>
  IF PROD.SEQ = "" THEN PROD.SEQ = 1
  KIT.TYPE = OSD.KIT<1,CURR.POS>
* T23123
*IF KIT.TYPE = "" THEN KIT.TYPE = "M"
  IF KIT.TYPE = "" THEN KIT.TYPE = "K"
* T23123
  PDNO = TEMP.MF(1); WHNO = TEMP.MF(2); RTYPE = "B"
*
  CALL ORDER.RESERVE.SEL(CONO,("R-":CURR.POS),ORD.CUST,ORDNO,SHPNO,PDNO,WHNO,RTYPE,RTOT,RQTY,RSV.NO,REL.NO,REL.QTY,"","",PROD.SEQ,KIT.TYPE,"")
  NUM.BUCKETS = DCOUNT(OSD.RECP.NO<1,CURR.POS>,SVM)
  FOR N = 1 TO NUM.BUCKETS
    RECP=OSD.RECP.NO<1,CURR.POS,N>
    LOCATE RECP IN IWH.RECP.NO<1> SETTING RPOS THEN
      IWH.RSV.FI<1,RPOS> = IWH.RSV.FI<1,RPOS> + OSD.FI.QTY<1,CURR.POS,N>
    END
  NEXT N
  NUM.BUCKETS = DCOUNT(RSV.NO,SVM)
  FOR N = 1 TO NUM.BUCKETS
    RECP=RSV.NO<1,1,N>
    LOCATE RECP IN IWH.RECP.NO<1> SETTING RPOS THEN
      IWH.RSV.FI<1,RPOS> = IWH.RSV.FI<1,RPOS> - RQTY<1,1,N>
    END
  NEXT N
  TEMP.KEY = CONO:TEMP.MF(1):"!":TEMP.MF(2)
  LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
    ORIG.IWH.QTY<1,LINDX> = ORIG.IWH.QTY<1,LINDX> - OSD.R.QTY<1,CURR.POS> + RTOT
    TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
    ORIG.IWH.RESV<1,LINDX> = TEMP.STR
  END
*
*
* UPDATE BUCKETS FOR PRE BUILT KIT
*
*
* UPDATE CURRENT LINE 
*
  OSD.PROD<1,CURR.POS> = TEMP.MF(1)
  OSD.WHSE<1,CURR.POS> = TEMP.MF(2)
  OSD.G.QTY<1,CURR.POS> = PRE.BUILT.O
  OSD.O.QTY<1,CURR.POS> = PRE.BUILT
  OSD.RECP.NO<1,CURR.POS> = RSV.NO
  OSD.FI.QTY<1,CURR.POS> = RQTY
  OSD.REL.NO<1,CURR.POS> = REL.NO
  OSD.R.QTY<1,CURR.POS> = RTOT
  OSD.JOB.QTY<1,CURR.POS> = 0
  OSD.JOB<1,CURR.POS> = TEMP.MF(13)
  OSD.A.QTY<1,CURR.POS> = 0
  OSD.PRICE<1,CURR.POS> = TEMP.MF(15)
  OSD.REL.QTY<1,CURR.POS> = REL.QTY
  OSD.KIT<1,CURR.POS>     = 'K'
  OSD.BOM.NUM<1,CURR.POS>  = BOM.NUMBER
  OSD.PROD.SEQ<1,CURR.POS> = 1
  OSD.KIT.O.QTY<1,CURR.POS> = TEMP.MF(4)
*OSD.KIT.O.QTY<1,CURR.POS> = INT((TEMP.MF(4) * (1 + (CUST.ADDL.OPS<1,1> / 10000))) + .5)
  OSD.KIT.R.QTY<1,CURR.POS> = OSD.R.QTY<1,CURR.POS>
  OSD.KIT.A.QTY<1,CURR.POS> = 0
  OSD.KIT.F.QTY<1,CURR.POS> = OSD.F.QTY<1,CURR.POS>
  OSD.KIT.S.QTY<1,CURR.POS> = 0
  OSD.KIT.I.QTY<1,CURR.POS> = 0
  OSD.KIT.G.QTY<1,CURR.POS> = OSD.G.QTY<1,CURR.POS>
  OSD.KIT.PRICE<1,CURR.POS> = TEMP.MF(15)
*
* NOT RESERVE WHAT IS LEFT FROM COMPONETS OF THE KIT
*
  RQTY = ""
  RSV.NO = ""
  REL.NO = ""
  REL.QTY = ""
  REMAIN.TO.BUILD = ACTUAL.RESV - RTOT
  OLD.PDNO = PDNO
  IF (REMAIN.TO.BUILD > 0 ) OR (REMAIN.TO.BUILD = 0 AND ACTUAL.RESV = 0) THEN
    FOR I = 1 TO NUM.PROD
      IF BOM.PROD<1,I> NE "" THEN   ; * T23416
        TEMP.KEY = CONO:BOM.PROD<1,I>:"!":TEMP.MF(2)
        MATREAD IWH.REC FROM INV.WHSE, TEMP.KEY THEN
          ERR.FLG='';ERRMSG='';PERIOD=''                                       
          CALL BUILD.IWH.FI(TEMP.KEY,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
        END ELSE
          MAT IWH.REC = ""
        END
        LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
          TEMP.CONV = CONVERT(SVM,VM,ORIG.IWH.RESV<1,LINDX>)
          IWH.RSV.FI = TEMP.CONV
          TEMP.CONV = CONVERT(SVM,VM,ORIG.ALOC.AVL<1,LINDX>)
          FGS.A.QTY = TEMP.CONV
          IWH.RESV    = ORIG.IWH.QTY<1,LINDX>
        END ELSE
          ORIG.IWH.QTY = INSERT(ORIG.IWH.QTY,1,LINDX,1,IWH.RESV)
          ORIG.PROD   =INSERT(ORIG.PROD,1,LINDX,1,TEMP.KEY)
          TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
          ORIG.IWH.RESV=INSERT(ORIG.IWH.RESV,1,LINDX,1,TEMP.STR)
          TEMP.STR = CONVERT(VM,SVM,FGS.A.QTY)
          ORIG.ALOC.AVL=INSERT(ORIG.ALOC.AVL,1,LINDX,0,TEMP.STR)
        END
        POS = CURR.POS + I
        TMP.RATIO = BOM.Q.RATIO<1,I> / 10000
        PDNO = BOM.PROD<1,I>
        RTOT = (REMAIN.TO.BUILD) * TMP.RATIO
        RQTY    = OSD.FI.QTY<1,POS>
        RSV.NO = OSD.RECP.NO<1,POS>
        REL.NO = OSD.REL.NO<1,POS>
        REL.QTY =OSD.REL.QTY<1,POS>
        PROD.SEQ = OSD.PROD.SEQ<1,POS>
        KIT.TYPE = OSD.KIT<1,POS>
        PDNO = BOM.PROD<1,I>; WHNO = TEMP.MF(2); RTYPE = "B"
        CALL ORDER.RESERVE.SEL(CONO,("R-":CURR.POS),ORD.CUST,ORDNO,SHPNO,PDNO,WHNO,RTYPE,RTOT,RQTY,RSV.NO,REL.NO,REL.QTY,"","",PROD.SEQ,KIT.TYPE,"")
        NUM.BUCKETS = DCOUNT(OSD.RECP.NO<1,POS>,SVM)
        FOR N = 1 TO NUM.BUCKETS
          RECP=OSD.RECP.NO<1,POS,N>
          LOCATE RECP IN IWH.RECP.NO<1> SETTING RPOS THEN
            IWH.RSV.FI<1,RPOS> = IWH.RSV.FI<1,RPOS> + OSD.FI.QTY<1,POS,N>
          END
        NEXT N
        NUM.BUCKETS = DCOUNT(RSV.NO,SVM)
        FOR N = 1 TO NUM.BUCKETS
          RECP=RSV.NO<1,1,N>
          LOCATE RECP IN IWH.RECP.NO<1> SETTING RPOS THEN
            IWH.RSV.FI<1,RPOS> = IWH.RSV.FI<1,RPOS> - RQTY<1,1,N>
          END
        NEXT N
        TEMP.KEY = CONO:BOM.PROD<1,I>:"!":TEMP.MF(2)
        LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
          ORIG.IWH.QTY<1,LINDX> = ORIG.IWH.QTY<1,LINDX> - OSD.R.QTY<1,POS> + RTOT
          TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
          ORIG.IWH.RESV<1,LINDX> = TEMP.STR
        END
        OSD.WHSE<1,POS> = WHNO
        OSD.FI.QTY<1,POS> = RQTY
        OSD.RECP.NO<1,POS>  = RSV.NO
        OSD.REL.NO<1,POS> = REL.NO
        OSD.REL.QTY<1,POS> = REL.QTY
        OSD.G.QTY<1,POS>   = TO.BUILD.O * TMP.RATIO
        OSD.O.QTY<1,POS>   = TO.BUILD * TMP.RATIO
        OSD.R.QTY<1,POS>   = RTOT
      END   ; * T23416
    NEXT I
  END ELSE
    FOR I = 1 TO NUM.PROD
      POS = CURR.POS + I
      OSD.FI.QTY<1,POS> = RQTY
      OSD.RECP.NO<1,POS>  = RSV.NO
      OSD.REL.NO<1,POS> = REL.NO
      OSD.REL.QTY<1,POS> = REL.QTY
      OSD.G.QTY<1,POS>   = REMAIN.TO.BUILD
      OSD.O.QTY<1,POS>   = REMAIN.TO.BUILD
      OSD.R.QTY<1,POS>   = REMAIN.TO.BUILD
    NEXT I
  END
  PDNO = OLD.PDNO
*
  OSD.KIT.R.QTY<1,CURR.POS> = ACTUAL.RESV
  OSD.KIT.O.QTY<1,CURR.POS> = TEMP.MF(4)
  OSD.KIT.G.QTY<1,CURR.POS> = TEMP.MF(3)
*
*
*
  IF MODE = "C" THEN
    IF TO.BUILD < 1 THEN
      FOR I = 1 TO NUM.PROD
        POS = CURR.POS + I
        OSD.FI.QTY<1,POS> = ""
        OSD.RECP.NO<1,POS>  = ""
        OSD.REL.NO<1,POS> = ""
        OSD.REL.QTY<1,POS> = ""
        OSD.PRICE<1,POS> = 0
      NEXT I
    END
  END
*
* CALCULATE PRICE
*
80000 *
  ITEM.PRICE = 0
  SLN = 10 + 2 * MOD(LN-1,5)
  P_X = 39 ; P_Y = SLN ; P_VALUE = OCONV(INT(((OSD.KIT.R.QTY<1,CURR.POS> / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV1) "R#10" ; P_OPT = ""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*
  MATREAD INV.REC FROM INVENTORY, CONO:TEMP.MF(1) ELSE
    MAT INV.REC = ""
  END
  MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
    MAT CATG.REC = ""
  END
  IWH.ID = CONO:TEMP.MF(1):"!":TEMP.MF(2)
  MATREAD IWH.REC FROM INV.WHSE, IWH.ID THEN
    ERR.FLG='';ERRMSG='';PERIOD=''                                       
    CALL BUILD.IWH.FI(IWH.ID,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
  END ELSE                                                             
    MAT IWH.REC = ""
  END
  BEGIN CASE
    CASE CATG.SALE.TYPE = "EP"
      DEFAULT = 0
    CASE CATG.SALE.TYPE = "PT"
      MATREAD PGT.REC FROM PRICE.TABLE, CONO:IWH.PRICE.GRP ELSE
        MAT PGT.REC=''
      END
      DEFAULT = ""
      QTY = OCONV(INT(((TEMP.MF(3) / ICR.DV1) * ICR.MT1) / ICR.DV2 + .5),ICR.CNV)
      QCNT = DCOUNT(PGT.QTY,VM)
      FOR Q = 1 TO QCNT WHILE DEFAULT = ""
        IF QTY <= PGT.QTY<1,Q>+0 THEN
          DEFAULT = PGT.PRICE<1,Q>
        END
      NEXT Q
      IF OSD.G.QTY<1,LN> # TEMP.MF(3) THEN TEMP.MF(15) = ""
    CASE CATG.SALE.TYPE = "ES"
      DEFAULT = IWH.EST.SALE
    CASE CATG.SALE.TYPE = "SP"
      BEGIN CASE
        CASE NOT(NUM(CUST.PRICE.CODE))
          DEFAULT = IWH.SELL<1,1>
        CASE CUST.PRICE.CODE > 0 AND CUST.PRICE.CODE < 5
          DEFAULT = IWH.SELL<1,CUST.PRICE.CODE>
        CASE 1
          DEFAULT = IWH.SELL<1,1>
      END CASE
    CASE CATG.SALE.TYPE = "SD"
      DEFAULT = IWH.STD.COST
    CASE CATG.SALE.TYPE = "AV"
      DEFAULT = IWH.AVG.COST
    CASE CATG.SALE.TYPE = "LP"
      DEFAULT = IWH.COST.FI<1,DCOUNT(IWH.COST.FI,VM)>
*--- CATG.SALE.TYPE = "CB"
*CASE TEMP.MF(6) # ""
*CASE TEMP.MF(13) # ""
    CASE CATG.FNGD.TYPE = "ES"
      DEFAULT = IWH.EST.SALE
    CASE CATG.FNGD.TYPE = "SP"
      BEGIN CASE
        CASE NOT(NUM(CUST.PRICE.CODE))
          DEFAULT = IWH.SELL<1,1>
        CASE CUST.PRICE.CODE > 0 AND CUST.PRICE.CODE < 5
          DEFAULT = IWH.SELL<1,CUST.PRICE.CODE>
        CASE 1
          DEFAULT = IWH.SELL<1,1>
      END CASE
    CASE CATG.FNGD.TYPE = "SD"
      DEFAULT = IWH.STD.COST
    CASE CATG.FNGD.TYPE = "AV"
      DEFAULT = IWH.AVG.COST
    CASE CATG.FNGD.TYPE = "LP"
      DEFAULT = IWH.COST.FI<1,DCOUNT(IWH.COST.FI,VM)>
    CASE 1
      DEFAULT = 0
  END CASE
  DEFAULT = INT(DEFAULT + .5)
  BEGIN CASE
    CASE CATG.SALE.TYPE = "EP" AND ORD.ESTIMATE = ""
      TEMP.MF(15) = DEFAULT
      P_X = 61 ; P_Y = SLN ; P_VALUE = OCONV(TEMP.MF(15),"MD4") "R#10" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    CASE OPCO.PRC.MNT = "O" OR OPCO.PRC.MNT = "B"
      X = 61; Y = SLN; MAXL = 10; TYP = 4; SCALER = 4; O.R = "O"
      IF ((TEMP.MF(15) + 0) > 0) THEN
        DEFAULT = TEMP.MF(15)
      END
*    END ELSE
*      DEFAULT = OSD.KIT.PRICE<1,CURR.POS>
*    END
      DEFAULT = OCONV(DEFAULT,"MD4")
      CALL EDIT.SUB
      IF VALUE = "" OR VALUE = "END" THEN
        VALUE = 0
        ERRMSG = 'Invalid must enter a number ' ; GOSUB 91000
        GOTO 80000
      END
      IF VALUE = "END" THEN
        GOTO 80100
      END ELSE
        TEMP.MF(15) = VALUE
        P_X = 61 ; P_Y = SLN ; P_VALUE = OCONV(TEMP.MF(15),"MD4") "R#10" ; P_OPT = ""
        CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      END
    CASE TEMP.MF(15) = ""
      TEMP.MF(15) = DEFAULT
      P_X = 61 ; P_Y = SLN ; P_VALUE = OCONV(TEMP.MF(15),"MD4") "R#10" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    CASE 1
      P_X = 61 ; P_Y = SLN ; P_VALUE = OCONV(TEMP.MF(15),"MD4") "R#10" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  END CASE
*
80100 
*
  OSD.KIT.PRICE<1,CURR.POS> = TEMP.MF(15)
  PQTY = OSD.KIT.G.QTY<1,CURR.POS> / 1000
  OSD.AMT<1,CURR.POS> = INT(OSD.KIT.PRICE<1,CURR.POS> /100 * PQTY / (INV.COST.WT / 100) + .5)
  GOTO 99999
*
100 * FIND WHAT CAN BE RESERVED
  MAT BOM.REC = MAT ORIG.BOM.REC
  PRE.BUILT = 0
  TO.BUILD  = 0
  ACT.BUILD = 0
*IWH.ID = CONO:TEMP.MF(1):"!":TEMP.MF(2)
  TEMP.KEY = CONO:TEMP.MF(1):"!":TEMP.MF(2)
  MATREAD IWH.REC FROM INV.WHSE, TEMP.KEY THEN
    ERR.FLG='';ERRMSG='';PERIOD=''                                       
    CALL BUILD.IWH.FI(TEMP.KEY,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
  END ELSE                                                             
    MAT IWH.REC = ""
  END
  MATREAD FGS.REC FROM FNGD.STATS, TEMP.KEY ELSE
    MAT FGS.REC = ""
  END
  LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
    TEMP.CONV = CONVERT(SVM,VM,ORIG.IWH.RESV<1,LINDX>)
    IWH.RSV.FI = TEMP.CONV
    TEMP.CONV = CONVERT(SVM,VM,ORIG.ALOC.AVL<1,LINDX>)
    FGS.A.QTY = TEMP.CONV
    IWH.RESV    = ORIG.IWH.QTY<1,LINDX>
  END ELSE
    ORIG.IWH.QTY = INSERT(ORIG.IWH.QTY,1,LINDX,1,IWH.RESV)
    ORIG.PROD   =INSERT(ORIG.PROD,1,LINDX,1,TEMP.KEY)
    TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
    ORIG.IWH.RESV=INSERT(ORIG.IWH.RESV,1,LINDX,1,TEMP.STR)
    TEMP.STR = CONVERT(VM,SVM,FGS.A.QTY)
    ORIG.ALOC.AVL=INSERT(ORIG.ALOC.AVL,1,LINDX,0,TEMP.STR)
  END
*AVL.RESV = IWH.ON.HAND - IWH.RESV + TEMP.MF(16)<1,1,1>
*T23123
  IF IWH.ON.HAND - IWH.RESV < 0 THEN
*  AVL.RESV = OSD.R.QTY<1,LN>
    AVL.RESV = OSD.KIT.R.QTY<1,LINDX>
  END ELSE
*  AVL.RESV = IWH.ON.HAND - IWH.RESV + OSD.R.QTY<1,LN>
*T26072 v
    FOSKEY = TEMP.KEY:"!":ORDNO:"!":OSD.PROD.SEQ<1,LINDX>:"!":OSD.KIT<1,LINDX>
    MATREAD FOS.REC FROM FNGD.ORDER.STATS, FOSKEY ELSE MAT FOS.REC = ''
*   AVL.RESV = IWH.ON.HAND - IWH.RESV + OSD.KIT.R.QTY<1,LINDX>
    AVL.RESV = IWH.ON.HAND - IWH.RESV + FOS.R.QTY
*T26072 ^
  END
*T23123
  IF AVL.RESV LE ACTUAL.RESV THEN
    PRE.BUILT = AVL.RESV
    TO.BUILD = ACTUAL.RESV - PRE.BUILT
  END ELSE
    PRE.BUILT = ACTUAL.RESV
    TO.BUILD = 0
  END
*T26072 v Since ACTUAL.RESV includes any overship qty the below qtys donot
*         require being increased again.
* TO.BUILD.O = INT((TO.BUILD / (1 + (CUST.ADDL.OPS<1,1> / 10000))) + .5)
* PRE.BUILT.O = INT((PRE.BUILT / (1+(CUST.ADDL.OPS<1,1> /10000))) + .5)
  TO.BUILD.O = TO.BUILD
  PRE.BUILT.O = PRE.BUILT
*T26072 ^
*
* CHECK TO SEE IF YOU NEED TO BUILD AND HOW MANY YOU CAN BUILD
*
  IF TO.BUILD > 0 THEN
    PLACE.VM = CURR.POS
    IF KIT.PROD # "" THEN
      NUM.PROD = DCOUNT(KIT.PROD,VM)
    END
*T23123
    ST.KIT = PLACE.VM + 1
*  FOR I = 2 TO NUM.PROD
    FOR I = ST.KIT TO NUM.PROD
*T23123
      PLACE.VM = PLACE.VM + 1
      TEMP.KEY = CONO:KIT.PROD<1,I>:"!":TEMP.MF(2)
      MATREAD IWH.REC FROM INV.WHSE, TEMP.KEY THEN
        ERR.FLG='';ERRMSG='';PERIOD=''                                       
        CALL BUILD.IWH.FI(TEMP.KEY,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
      END ELSE                                                             
        MAT IWH.REC = ""
      END
      MATREAD FGS.REC FROM FNGD.STATS, TEMP.KEY ELSE
        MAT FGS.REC = ""
      END
      LOCATE TEMP.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
        TEMP.CONV = CONVERT(SVM,VM,ORIG.IWH.RESV<1,LINDX>)
        IWH.RSV.FI = TEMP.CONV
        TEMP.CONV = CONVERT(SVM,VM,ORIG.ALOC.AVL<1,LINDX>)
        FGS.A.QTY = TEMP.CONV
        IWH.RESV    = ORIG.IWH.QTY<1,LINDX>
      END ELSE
        ORIG.IWH.QTY = INSERT(ORIG.IWH.QTY,1,LINDX,1,IWH.RESV)
        ORIG.PROD   =INSERT(ORIG.PROD,1,LINDX,1,TEMP.KEY)
        TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
        ORIG.IWH.RESV=INSERT(ORIG.IWH.RESV,1,LINDX,1,TEMP.STR)
        TEMP.STR = CONVERT(VM,SVM,FGS.A.QTY)
        ORIG.ALOC.AVL=INSERT(ORIG.ALOC.AVL,1,LINDX,0,TEMP.STR)
      END
      IF IWH.ON.HAND - IWH.RESV < 0 THEN
        AVL.RESV = OSD.R.QTY<1,PLACE.VM>
      END ELSE
        AVL.RESV = IWH.ON.HAND - IWH.RESV + OSD.R.QTY<1,PLACE.VM>
      END
*    BOM.KEY = CONO:OSD.BOM.NUM<1,I>
*    MATREAD BOM.REC FROM FNGD.BOM,BOM.KEY ELSE
      IF OSD.BOM.NUM<1,I> = BOM.NUMBER THEN
        LOCATE KIT.PROD<1,I> IN BOM.PROD<1>,1 SETTING BINDX THEN
          TMP.RATIO = BOM.Q.RATIO<1,BINDX> /10000
        END ELSE
          TMP.RATIO = 1
        END
*    END ELSE 
*      GOSUB 150
      END

*    TMP.RATIO = BOM.Q.RATIO<1,I> / 10000
      QTY.NEEDED = TEMP.MF(4) * TMP.RATIO
      CAN.BUILD = INT(AVL.RESV / TMP.RATIO)
* T23123
*    IF I = 2 THEN
      IF I = ST.KIT THEN
* T23123
        IF CAN.BUILD LT TO.BUILD THEN
          ACT.BUILD = CAN.BUILD
        END ELSE
          ACT.BUILD = TO.BUILD
        END
      END ELSE
        IF CAN.BUILD LE ACT.BUILD THEN
          ACT.BUILD = CAN.BUILD
        END
      END
    NEXT I
  END
*
* T24805 v * Find the picked qty divided by the component's ratio       
  TMP.PROD.CNT = DCOUNT(KIT.PROD<1>, VM) + CURR.POS ; POS = 1
  FOR X = CURR.POS TO TMP.PROD.CNT UNTIL (RESERVED.MIN.QTY)               
    POS += 1
    IF X = CURR.POS AND OSD.P.QTY<1,X> # '' THEN                               
      RESERVED.MIN.QTY = SUM(OSD.P.QTY<1,X>)                              
    END ELSE                                                              
      IF KIT.PROD<1,POS> = '' OR OSD.BOM.NUM<1,X> # BOM.NUMBER THEN CONTINUE
      LOCATE KIT.PROD<1,POS> IN BOM.PROD<1>,1 SETTING BINDX THEN            
        TMP.RATIO = BOM.Q.RATIO<1,BINDX> /10000                           
      END ELSE                                                            
        TMP.RATIO = 1                                                     
      END                                                                 
      TMP.MIN.QTY = SUM(OSD.P.QTY<1,X>)                                   
      RESERVED.MIN.QTY = (TMP.MIN.QTY / TMP.RATIO)                        
    END                                                                   
  NEXT X                                                                  
* T24805 ^                                                              
  TOTAL.BUILD = PRE.BUILT + ACT.BUILD
  RETURN
*
150 *
  LOCATE KIT.PROD<1,I> IN BOM.PROD<1>,1 SETTING KINDX THEN
    KIT.RATIO = BOM.Q.RATIO<1,KINDX> /10000
  END
  BOM.KEY = CONO:OSD.BOM.NUM<1,I>
  READ TEMP.BOM.REC FROM FNGD.BOM,BOM.KEY ELSE
    TEMP.BOM.REC = ""
  END
  NUM.KIT.PRODS = DCOUNT(TEMP.BOM.REC<4>,VM)
  FOR NKP = 1 TO NUM.KIT.PRODS
    T.KEY = CONO:TEMP.BOM.REC<4,NKP>:"!":TEMP.MF(2)
    LOCATE T.KEY IN ORIG.PROD<1>,1 SETTING LINDX THEN
      TEMP.CONV = CONVERT(SVM,VM,ORIG.IWH.RESV<1,LINDX>)
      IWH.RSV.FI = TEMP.CONV
      TEMP.CONV = CONVERT(SVM,VM,ORIG.ALOC.AVL<1,LINDX>)
      FGS.A.QTY = TEMP.CONV
      IWH.RESV    = ORIG.IWH.QTY<1,LINDX>
    END ELSE
      ORIG.IWH.QTY = INSERT(ORIG.IWH.QTY,1,LINDX,1,IWH.RESV)
      ORIG.PROD   =INSERT(ORIG.PROD,1,LINDX,1,TEMP.KEY)
      TEMP.STR = CONVERT(VM,SVM,IWH.RSV.FI)
      ORIG.IWH.RESV=INSERT(ORIG.IWH.RESV,1,LINDX,1,TEMP.STR)
      TEMP.STR = CONVERT(VM,SVM,FGS.A.QTY)
      ORIG.ALOC.AVL=INSERT(ORIG.ALOC.AVL,1,LINDX,0,TEMP.STR)
    END
    IF IWH.ON.HAND - IWH.RESV < 0 THEN
      AVL.RESV = OSD.R.QTY<1,PLACE.VM>
    END ELSE
      AVL.RESV = IWH.ON.HAND - IWH.RESV + OSD.R.QTY<1,PLACE.VM>
    END
    LOCATE KIT.PROD<1,I> IN TEMP.BOM.REC<4>,1 SETTING BBINDX THEN
      TMP.RATIO = TEMP.BOM.REC<7,BBINDX> / 10000
    END ELSE
      TMP.RATIO = 1
    END
    KIT.QTY.NEEDED = TEMP.MF(4) * TMP.RATIO
    KIT.CAN.BUILD = INT(AVL.RESV / TMP.RATIO)
    IF I = 1 THEN
      IF KIT.CAN.BUILD LT TO.BUILD THEN
        ACT.BUILD = CAN.BUILD
      END ELSE
        ACT.BUILD = TO.BUILD
      END
    END ELSE
      IF CAN.BUILD LE ACT.BUILD THEN
        ACT.BUILD = CAN.BUILD
      END
    END
  NEXT NKP
  RETURN
*
*--- CALLS FOR SYSCOM
*
91000 *
  ERR.TYPE = 1;CALL SYSCOM(MAT SYSCOM.REC); RETURN
92000 *
  ERR.TYPE = 2;CALL SYSCOM(MAT SYSCOM.REC); RETURN
93000 *
  ERR.TYPE = 3;CALL SYSCOM(MAT SYSCOM.REC)
99999 *
*
  RETURN
