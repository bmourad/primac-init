 SUBROUTINE ORDER.JOB.SEL(CONO,ORDNO,PDNO,WHNO,ATYPE,ALOC.TOT,ALOC.QTY)
*COPY>CPYLIB>COM1
*COPY>JCS.CPYLIB>COM.JCS.LINK  
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>JCS.CPYLIB>COM.INV.STATS 
*COPY>PMC.CPYLIB>COM.CUST
*COPY>OPS.CPYLIB>COM.ORDER
*COPY>ICS.CPYLIB>COM.INV.CNV
*********************************************************************
* REVISION    - [08.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - BP
* PROGRAM     - ORDER.JOB.SEL
* DATE        - 01/31/84
* DESCRIPTION - This program is used to display all (PO) activities
*               for a product in a warehouse
*T28676 lross 09/21/2005 * If JOB STATUS is 4 or > 5 display 0 for
*                          Avail Qty.
*ENDDOC
*********************************************************************
*
*COPY>PMC.CPYLIB>CUSTOMER
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>INV.CNV
*COPY>ICS.CPYLIB>FNGD.STATS
*COPY>ICS.CPYLIB>FNGD.JOB.STATS
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
 MAT SYSCOM.REC =  ""; SYS.TYPE = 2
*
 LINES = DCOUNT(FGS.JOB,VM)
 S.A.QTY = ""; S.CUST = ""; S.DATE = ""
 LN = 0; IWH.ID = CONO:PDNO:"!":WHNO
 FOR I = 1 TO LINES
   MATREAD FJS.REC FROM FNGD.JOB.STATS, IWH.ID:"!":FGS.JOB<1,I> ELSE MAT FJS.REC = ""
   S.CUST<I> = FJS.CUST
   S.DATE<I> = FJS.DATE
   LOCATE ORDNO IN FJS.ORD<1>,1 SETTING OLOC THEN
     IF FJS.ORD.QTY<1,OLOC> > ALOC.QTY<1,I> THEN
       S.A.QTY<I> = FJS.A.QTY - FJS.ORD.QTY<1,OLOC>
     END ELSE
       S.A.QTY<I> = FJS.A.QTY - ALOC.QTY<1,I>
     END
   END ELSE
     S.A.QTY<I> = FJS.A.QTY
   END
   IF S.A.QTY<I> < 0 THEN S.A.QTY<I> = 0
   S.A.QTY<I> = FJS.M.QTY - FJS.F.QTY - S.A.QTY<I>
*T28676 v
READV JSTATUS FROM JOB,CONO:FGS.JOB<1,I>,2 ELSE JSTATUS = 4
JSTATUS = JSTATUS<1,1>
IF JSTATUS = 4 OR JSTATUS > 5 THEN S.A.QTY<I> = 0
*T28676 ^
   IF S.A.QTY<I> < 0 THEN S.A.QTY<I> = 0
   IF LN = 0 THEN
     IF FJS.M.QTY - FJS.A.QTY > 0 THEN
       LN = I
     END
   END
 NEXT I
 IF LN = 0 THEN LN = 1
 IF ATYPE = "B" THEN
   GOSUB 2000
   GOTO 99999
 END
*
 ESN = ECD.SCRN.NO
*
 PAGE.SIZE = 5
 BEGIN.PAGE = 7
 LINE.SPACE = 2
*
 SCV.REC(1)<ESN> = PDNO
 SCV.REC(2)<ESN> = WHNO
 SCV.REC(3)<ESN> = INV.FULL.DESC
 SCV.REC(21)<ESN> = SUM(FGS.M.QTY)
 SCV.REC(22)<ESN> = SUM(FGS.A.QTY)
 SCV.REC(23)<ESN> = SUM(S.A.QTY)
 SCV.REC(24)<ESN> = SUM(ALOC.QTY)
 FOR I = 21 TO 24
   SCV.REC(I)<ESN> = OCONV(INT(((SCV.REC(I)<ESN>/ICR.DV1) * ICR.MT1) / ICR.DV2 +.5),ICR.CNV1)
 NEXT I
 SCV.REC(32)<ESN> = INT(LINES/PAGE.SIZE+.9) "R%2"
 ECD.ACTION = 3; CALL SCRN.EDIT
 OLD.START.LINE = 0; GOSUB 1900
 MORE = 1
 LOOP
   ECD.NUM = 41; SCV.REC(ECD.NUM)<ESN> = ""
   ECD.ACTION = 4; CALL SCRN.EDIT
   OPTION = ECD.RET.VALUE
   BEGIN CASE
     CASE OPTION = "" OR OPTION = "E" OR OPTION = "END"
       MORE = 0
     CASE OPTION = "B"
       ALOC.QTY = ""
       GOSUB 2000
       OLD.START.LINE = 0; GOSUB 1900
     CASE OPTION = "S" OR OPTION = "SF"
       LN = 1 + INT((LN-1)/PAGE.SIZE) * PAGE.SIZE + PAGE.SIZE
       IF LN > LINES THEN LN = 1
       GOSUB 1900
     CASE OPTION = "SR"
       LN = 1 + INT((LN-1)/PAGE.SIZE) * PAGE.SIZE - PAGE.SIZE
       IF LN < 1 THEN LN = 1
       GOSUB 1900
     CASE OPTION = "ST"
       LN = 1
       GOSUB 1900
     CASE OPTION = "SB"
       LN = LINES
       GOSUB 1900
     CASE OPTION[1,1] = "S" AND NUM(OPTION[2,99])
       LN.NO = OPTION[2,99] + 0
       IF LN.NO < 1 OR LN.NO > LINES THEN
         ERRMSG = "** Invalid selection **"
         GOSUB 91000
       END ELSE
         LN = LN.NO
         GOSUB 1900
       END
     CASE NOT(NUM(OPTION))
       ERRMSG = "Invalid entry, please re-enter"
       GOSUB 91000
     CASE OPTION < 1 OR OPTION > LINES
       ERRMSG = "Out of range, please re-enter"
       GOSUB 91000
     CASE 1
       LN = OPTION
       GOSUB 1000
   END CASE
 WHILE MORE DO REPEAT
 GOTO 99990
*
*---- Qty To Allocate
1000*
 AVL = INT((((S.A.QTY<LN>)/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
 IF AVL < 1 THEN
   ERRMSG = "No available quantity to allocate for Job # ":FGS.JOB<1,LN>
   GOSUB 91000; GOTO 1099
 END
 SLN = BEGIN.PAGE + LINE.SPACE * MOD(LN-1,PAGE.SIZE)
 TYP = ICR.TYPE; SCALER = ICR.SCAL
 X = 61; Y = SLN; MAXL = 12
 MINV = 0; MAXV = AVL
 HMSG = "Enter Quantity to Allocate"
 IF ALOC.QTY<1,LN> > 0 THEN
   O.R = "O"
   DEFAULT = OCONV(INT(((ALOC.QTY<1,LN>/ICR.DV1)*ICR.MT1)/ICR.DV2+.5),ICR.CNV)
 END
 CALL EDIT.SUB
 IF VALUE = "END" THEN
   GOTO 1099
 END
 ALOC.QTY<1,LN> = INT(((VALUE/ICR.MT1)*ICR.DV1)*ICR.DV2+.5)
 P_X  = 61 ; P_Y = SLN ; P_VALUE = OCONV(INT(((ALOC.QTY<1,LN>/ICR.DV1)*ICR.MT1)/ICR.DV2+.5),ICR.CNV1) "R#12" ; P_OPT = ""
 CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
 GOSUB 1700
1099*
 RETURN
*
*---- Display Total Reserve
1700*
 ECD.NUM = 24
 ALOC.TOT = SUM(ALOC.QTY)
 SCV.REC(ECD.NUM)<ESN> = OCONV(INT(((ALOC.TOT/ICR.DV1)*ICR.MT1)/ICR.DV2+.5),ICR.CNV1)
 ECD.ACTION = 5; CALL SCRN.EDIT
 RETURN
*
*---- Scroll Routine
1900*
 START.LINE = 1 + INT((LN-1)/PAGE.SIZE)*PAGE.SIZE
 LAST.LINE = START.LINE + PAGE.SIZE - 1
 IF LAST.LINE > LINES THEN LAST.LINE = LINES
 IF START.LINE = OLD.START.LINE THEN GOTO 1909
 OLD.START.LINE = START.LINE
 ECD.NUM = 31
 SCV.REC(ECD.NUM)<ESN> = INT(LAST.LINE/PAGE.SIZE+.9) "R%2"
 ECD.ACTION = 5; CALL SCRN.EDIT
 CNT = 1
 FOR N = START.LINE TO LAST.LINE
   SLN = BEGIN.PAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
   P_X  = 0 ; P_Y = SLN ; P_VALUE = N "R#3" ; P_OPT = ""
   P_X  := AM:4 ; P_Y := AM:SLN ; P_VALUE := AM:FGS.JOB<1,N> "L#8"
   P_X  := AM:13 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(S.DATE<N>,"D2/") "L#8"
   P_X  := AM:22 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(INT(((FGS.M.QTY<1,N>/ICR.DV1) * ICR.MT1) / ICR.DV2 +.5),ICR.CNV1) "R#12"
   P_X  := AM:35 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(INT(((FGS.A.QTY<1,N>/ICR.DV1) * ICR.MT1) / ICR.DV2 +.5),ICR.CNV1) "R#12"
   P_X  := AM:48 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(INT((((S.A.QTY<N>)/ICR.DV1) * ICR.MT1) / ICR.DV2 +.5),ICR.CNV1) "R#12"
   P_X  := AM:61 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(INT(((ALOC.QTY<1,N>/ICR.DV1) * ICR.MT1) / ICR.DV2 +.5),ICR.CNV1) "R#12"
   CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
   P_X  = 4 ; P_Y = SLN+1 ; P_VALUE = S.CUST<N> "L#8" ; P_OPT = ""
   CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
   MATREAD CUST.REC FROM CUSTOMER, CONO:S.CUST<N> ELSE
     MAT CUST.REC = ""; CUST.NAME = STR("?",30)
   END
   P_X  = 13 ; P_Y = SLN+1 ; P_VALUE = CUST.NAME "L#30" ; P_OPT = ""
   CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
   CNT = CNT + 1
 NEXT N
 FOR M = CNT TO PAGE.SIZE
   SLN = BEGIN.PAGE + LINE.SPACE * MOD(M-1,PAGE.SIZE)
   P_X  = 0 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
   CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
   P_X  = 0 ; P_Y = SLN+1 ; P_VALUE = "" ; P_OPT = "CL"
   CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
 NEXT M
1909 RETURN
*
*---- Adjust job allocations
2000*
 ALOC.DIF = ALOC.TOT - SUM(ALOC.QTY)
 BEGIN CASE
   CASE ALOC.DIF > 0
     LIMIT = LINES
*
*---- Adjust current allocated jobs
*
     FOR A = 1 TO LIMIT
       AVL = S.A.QTY<A> - ALOC.QTY<1,A>
       BEGIN CASE
         CASE ALOC.QTY<1,A> < 1
         CASE AVL < 1
         CASE AVL < ALOC.DIF
           ALOC.QTY<1,A> = ALOC.QTY<1,A> + AVL
           ALOC.DIF = ALOC.DIF - AVL
         CASE 1
           ALOC.QTY<1,A> = ALOC.QTY<1,A> + ALOC.DIF
           ALOC.DIF = 0; LIMIT = 0
       END CASE
     NEXT A
*
*---- Allocate new jobs
*
     FOR A = 1 TO LIMIT
       AVL = S.A.QTY<A> - ALOC.QTY<1,A>
       BEGIN CASE
         CASE AVL < 1
         CASE AVL < ALOC.DIF
           ALOC.QTY<1,A> = ALOC.QTY<1,A> + AVL
           ALOC.DIF = ALOC.DIF - AVL
         CASE 1
           ALOC.QTY<1,A> = ALOC.QTY<1,A> + ALOC.DIF
           ALOC.DIF = 0; LIMIT = 0
       END CASE
     NEXT A
   CASE ALOC.DIF < 0
     ALOC.DIF = 0 - ALOC.DIF
     LIMIT = LINES
     FOR A = 1 TO LIMIT
       BEGIN CASE
         CASE ALOC.QTY<1,A> < 1
         CASE ALOC.QTY<1,A> < ALOC.DIF
           ALOC.DIF = ALOC.DIF - ALOC.QTY<1,A>
           ALOC.QTY<1,A> = 0
         CASE 1
           ALOC.QTY<1,A> = ALOC.QTY<1,A> - ALOC.DIF
           ALOC.DIF = 0; LIMIT = 0
       END CASE
     NEXT A
 END CASE
 ALOC.TOT = SUM(ALOC.QTY)
 RETURN
*
*---- Error message routine
91000 ERR.TYPE=1;CALL SYSCOM(MAT SYSCOM.REC);RETURN
* 91000*
*       PRINT @(0,23) : ERRMSG : CL :
*       INPUT REPLY :
*       PRINT @(0,23) : CL :
*       RETURN
*
*---- End of job
99990 *
 ECD.ACTION=99;CALL SCRN.EDIT
99999*
 RETURN
END
