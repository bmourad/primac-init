*COPY>CPYLIB>COM1
*COPY>JCS.CPYLIB>COM.JCS.LINK  
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>JCS.CPYLIB>COM.INV.STATS 
*COPY>PMC.CPYLIB>COM.CUST
*COPY>OPS.CPYLIB>COM.ORDER
**************************************************************************
* REVISION    - [09.0]
* COPYRIGHT   - 1993 Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - OPSBP
* PROGRAM     - UNPRICED.ORDER.RPT
* AUTHOR      - S.L.Fritz
* DATE        - 08/20/93
* DESCRIPTION - Print the report for the ORDER file with no price.
*
**************************************************************************
*
*---- DATA Structure Libraries
*
*COPY>PMC.CPYLIB>CUSTOMER
*COPY>OPS.CPYLIB>ORDER
*COPY>OPS.CPYLIB>ORDER.DETAIL
*COPY>OPS.CPYLIB>ORDER.DETAIL.INQ
*COPY>ICS.CPYLIB>INVENTORY
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*
*---- File open
*
  OPEN '','CUSTOMER' TO CUSTOMER ELSE ERRMSG = 'CUSTOMER';GOTO 999000
  OPEN '','ORDER' TO ORDER ELSE ERRMSG = 'ORDER';GOTO 999000
  OPEN '','ORDER.DETAIL' TO ORDER.DETAIL ELSE ERRMSG = 'ORDER.DETAIL';GOTO 999000
  OPEN '','INVENTORY' TO INVENTORY ELSE ERRMSG = 'INVENTORY';GOTO 999000
*
*---- Initialize variables
*
  TRUE = 1
  OTHERS = 1
  VOID = ''
  NULL = ''
  FALSE = 0
  PAGE.NO = 0
  TOP.OF.FORM = CHAR(12)
  PAGE.NO = 0
  LINES.THIS.PAGE = 0
  PAGE.HEADING.SIZE = 6
  PAGE.SIZE = 55
     *
  EQU CONO         TO BUFFER<1>
  EQU COMPANY.NAME TO BUFFER<2>
  EQU WARE.NO      TO BUFFER<3>
  EQU BEG.ORD.DATE TO BUFFER<4>
  EQU END.ORD.DATE TO BUFFER<5>
  EQU BEG.CUST.NUM TO BUFFER<6>
  EQU END.CUST.NUM TO BUFFER<7>
  EQU BEG.ORD.NUM  TO BUFFER<8>
  EQU END.ORD.NUM  TO BUFFER<9>
     *
  SHD1 = 'ORDER  '
  SHD1 = SHD1:'ORDER    '
  SHD1 = SHD1:'DUE-DATE '
  SHD1 = SHD1:'CUSTOMER '
  SHD1 = SHD1:'CUSTOMER                      '
  SHD1 = SHD1:'WHSE '
  SHD1 = SHD1:'PRODUCT         '
  SHD1 = SHD1:'DESCRIPTION                     '
  SHD1 = SHD1:'QUANTITY'
     *
  SHD2 = 'NO     '
  SHD2 = SHD2:'DATE     '
  SHD2 = SHD2:'         '
  SHD2 = SHD2:'NUMBER   '
  SHD2 = SHD2:'                              '
  SHD2 = SHD2:'NUMB '
  SHD2 = SHD2:'                '
  SHD2 = SHD2:'                                '
  SHD2 = SHD2:'ORDERED     '
  SHD2 = SHD2:'UOM'
     *
  SHD3 = STR('-',6):SPACE(1)
  SHD3 = SHD3:STR('-',8):SPACE(1)
  SHD3 = SHD3:STR('-',8):SPACE(1)
  SHD3 = SHD3:STR('-',8):SPACE(1)
  SHD3 = SHD3:STR('-',29):SPACE(1)
  SHD3 = SHD3:STR('-',4):SPACE(1)
  SHD3 = SHD3:STR('-',15):SPACE(1)
  SHD3 = SHD3:STR('-',30):SPACE(1)
  SHD3 = SHD3:STR('-',12):SPACE(1)
  SHD3 = SHD3:STR('-',3)
*
  ODQ.O.QTY = 0
*
  PRINTER ON
*
  PROCREAD BUFFER ELSE
    ERRMSG = 'Must run this program from a REPORT.SCRN PROC.'
    GOTO 999000
  END
*
  RPT.NAME = 'UNPRICED ORDER REPORT'
  RPT.NUM = 'XXXX'
  RPT.DATE = DATE()
  HD1 = ''
  HD2 = ''
  CALL GET.PROG.HEAD(CONO,VOID,RPT.NAME,RPT.NUM,RPT.DATE,HD1,HD2)
*
  GOSUB 60000
*
*---- MAIN Function ------------------------------------------------------
*
*          This function prepares the report headings and gets ready to
*          read thru the list of qualified records from the order file.
*
*          This function reads the list passed to it from the PROC.
*
*          The KEY from the list is used to read the order file.  The
*          support files are read, and data is prepared for printing.
*
10000 *-------------------------------------------------------------------
     *
  READNEXT ORDER.KEY ELSE
    GOTO 999999;* Exit the program
  END
     *
  ORDER.NUMBER = ORDER.KEY[4,6]
     *
  MATREAD ORD.REC FROM ORDER, ORDER.KEY ELSE
    MAT ORD.REC = ''
    ERRMSG = 'Can not read the ':ORDER.KEY:' record from the ORDER file.'
    GOTO 10000;* Record disappeared, get next record key from list.
  END
     *
  MATREAD CUST.REC FROM CUSTOMER, CONO:ORD.CUST ELSE
    MAT CUST.REC = ''
    ERRMSG = 'Can not read ':ORD.CUST:' from the CUSTOMER file.'
    GOTO 10000;* Record disappeared, get next record key from list.
  END
*
* Consolidation and product print routine
*
  GOSUB 30000
*
* Go up and get the next record
*
  GOTO 10000
*
*
*---- CONSOLIDATION Function ---------------------------------------------
*
*                   This function develops the data for the product lines.
*
30000 *-------------------------------------------------------------------
     *
  STATUS = 'L'
  SHPNO = 'ALL'
  CALL ORDER.LINE.UPD(CONO,ORDER.NUMBER,SHPNO,STATUS)
     *
     * Define how many product lines there are to print.
     *
  DETAIL.CNTR = DCOUNT(ODQ.PROD,VM)
  TOTAL.ORDER.QTY = 0
  FOR DETAIL.LOOP = 1 TO DETAIL.CNTR
        *
        * If the record just read is not the warehouse desired, skip it.
        * If the warehouse indicated is ALL, proceed.
        *
    IF WARE.NO # 'ALL' AND ODQ.WHSE<1,DETAIL.LOOP> # WARE.NO THEN
      GOTO 30100
    END
        *
    INV.KEY = CONO:ODQ.PROD<1,DETAIL.LOOP>
    MATREAD INV.REC FROM INVENTORY, INV.KEY ELSE
      INV.FULL.DESC = 'Inventory record description missing'
    END
    IF INV.BASE.SKU # '' THEN
      READV DESCRIPTION.ONE FROM INVENTORY, CONO:INV.BASE.SKU, 2 ELSE
        DESCRIPTION.ONE = "Inventory description miissing from file!"
      END
      DESCRIPTION.TWO = INV.FULL.DESC
    END ELSE
      DESCRIPTION.ONE = INV.FULL.DESC
      DESCRIPTION.TWO = ''
    END
        *
        * Force the print quantity to be at least a zero.
        *
    ODQ.O = ODQ.O.QTY<1,DETAIL.LOOP> + 0
    TOTAL.ORDER.QTY = TOTAL.ORDER.QTY + ODQ.O
        *
        * Check to see if the product line will fit BEFORE printing it.
        *
    LINES.THIS.PAGE = LINES.THIS.PAGE + 1
    IF LINES.THIS.PAGE > PAGE.SIZE THEN
      GOSUB 60000
      LINES.THIS.PAGE = LINES.THIS.PAGE + 1
    END
        *
    ORDER.LINE = ORDER.NUMBER'L#6':SPACE(1)
    ORDER.LINE = ORDER.LINE:OCONV(ORD.DATE,'D2/')'L#8':SPACE(1)
    ORDER.LINE = ORDER.LINE:OCONV(ORD.DUE,'D2/')'L#8':SPACE(1)
    ORDER.LINE = ORDER.LINE:ORD.CUST'L#8':SPACE(1)
    ORDER.LINE = ORDER.LINE:CUST.NAME'L#29':SPACE(1)
    ORDER.LINE = ORDER.LINE:ODQ.WHSE<1,DETAIL.LOOP>'L#4':SPACE(1)
    ORDER.LINE = ORDER.LINE:ODQ.PROD<1,DETAIL.LOOP>'L#15':SPACE(1)
    ORDER.LINE = ORDER.LINE:DESCRIPTION.ONE'L#30':SPACE(1)
    ORDER.LINE = ORDER.LINE:OCONV(ODQ.O,'MD0,')'R#12':SPACE(1)
    ORDER.LINE = ORDER.LINE:INV.UNIT<1,3>"R#3"
        *
        * Print the variable which is the product print line.
        *
    PRINT ORDER.LINE
        *
    IF DESCRIPTION.TWO # '' THEN
      LINES.THIS.PAGE = LINES.THIS.PAGE + 1
      IF LINES.THIS.PAGE > PAGE.SIZE THEN
        GOSUB 60000
        LINES.THIS.PAGE = LINES.THIS.PAGE + 1
      END
      PRINT SPACE(85):DESCRIPTION.TWO'L#30'
    END
*
30100 *
*
  NEXT DETAIL.LOOP
*
30200 *
*
* PRINT ORDER TOTAL
*
  IF DETAIL.CNTR > 0 THEN
    LINES.THIS.PAGE = LINES.THIS.PAGE + 3
    IF LINES.THIS.PAGE > PAGE.SIZE THEN
      GOSUB 60000
      LINES.THIS.PAGE = LINES.THIS.PAGE + 1
    END
    PRINT SPACE(116):STR("-",12)
    PRINT SPACE(116):OCONV(TOTAL.ORDER.QTY,"MD0")"R,#12"
    PRINT
  END
*
  RETURN
*
*
*---- HEADING Function ---------------------------------------------------
*
*             This function assembles and prints the report heading
*             information.  A variable tracks the page number.
*
60000 *-------------------------------------------------------------------
*
  PRINT TOP.OF.FORM
  PAGE.NO = PAGE.NO + 1
  PRINT HD1:PAGE.NO
  PRINT HD2
  PRINT
  PRINT SHD1
  PRINT SHD2
  PRINT SHD3
  LINES.THIS.PAGE = PAGE.HEADING.SIZE
*
  RETURN
*
*
*---- ERROR Function -----------------------------------------------------
*
*           This function manages the display of any program
*           processing errors.
*
999000 *------------------------------------------------------------------
*
  CRT ERRMSG
  INPUT ANS
*
*---- EXIT Function ------------------------------------------------------
*
*          This function manages the wrap-up and exit from the program.
*
999999 *------------------------------------------------------------------
*
  PRINTER OFF
*
END
