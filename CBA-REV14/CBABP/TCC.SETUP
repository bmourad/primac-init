   SUBROUTINE TCC.SETUP(CURR.PORT)
*COPY>CPYLIB>COM1
* *COPY>CPYLIB>COMMON3
*COPY>CPYLIB>COM.KSEL
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>TCC
*COPY>CPYLIB>KSEL
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>GEN.XREF.SUB
*COPY>CPYLIB>PORT.MENU
*COPY>PMC.CPYLIB>SECURITY
*COPY>CPYLIB>PORT.CONTROL
*
   DIM KSL.DATA(25)
   DIM PORTS(1000)
   DIM S.TCC.PORT.REC(7)
   DIM S.KSL.REC(15)
*
   MAT S.TCC.PORT.REC = MAT TCC.PORT.REC
   MAT S.KSL.REC = MAT KSL.REC
*
*       PORT.NO = "!%@$#"
*
   PORT.NO = 'TTY'
   CALL SYSVARS.SUB(PORT.NO)
   WRITE.SEC = 0
   UPD.FLAG = 0
   READ DUMMY FROM TCC, CURR.PORT THEN
   END
   DISK.PC.PORT.TYPE = DUMMY<6>
   DISK.PC.PORT.TSEL = DUMMY<7>
   GOSUB 1000
*
   MORE = 1
   LOOP
      TYP = 1; X = 0; Y = 23; MAXL = 2
      PMSG = "Enter # to change, (I), (VA), (VP), (VS), (VF), (F), (E) :"
      HMSG = "Enter # to change, (I)nitialize, (VA) View All ports,"
      HMSG<1,2> = "(VP) View with the current Port setup, (VS) View with"
      HMSG<1,3> = "the Standard setup, (VF) Same as (F) then (VP),"
      HMSG<1,4> = "(F)ile port setup, (E)xit."
      CALL EDIT.SUB
      CRT @(0,23):CL:
      OPTION = VALUE
      BEGIN CASE
         CASE OPTION = "E" OR OPTION = "END" OR OPTION = ""
            MORE = 0
            CALL TCC.SUB(CURR.PORT)
            MAT KSL.REC = MAT S.KSL.REC
         CASE OPTION = "I"
            MAT TCC.PORT.REC = "STD"
            MOUSE.PORT.TYPE = 0
            MAT S.TCC.PORT.REC = MAT TCC.PORT.REC
            UPD.FLAG = 1
            GOSUB 1000
         CASE OPTION = "F"
            MORE = 0
            READU DUMMY FROM TCC, CURR.PORT ELSE NULL
            FOR I = 1 TO 7
               IF S.TCC.PORT.REC(I) # "STD" AND DUMMY<I> = "AUTO" THEN
                  S.TCC.PORT.REC(I) = "AUTO"
               END
            NEXT I
            MATWRITE S.TCC.PORT.REC ON TCC, CURR.PORT
*      MATWRITE TCC.PORT.REC ON TCC, CURR.PORT
            IF WRITE.SEC THEN
               MATWRITE UPM.REC ON SECURITY, "U.":CURR.PORT
            END
            CALL TCC.SUB(CURR.PORT)
            MAT KSL.REC = MAT S.KSL.REC
         CASE OPTION = "VF"
            READU DUMMY FROM TCC, CURR.PORT ELSE NULL
            FOR I = 1 TO 7
               IF S.TCC.PORT.REC(I) # "STD" AND DUMMY<I> = "AUTO" THEN
                  S.TCC.PORT.REC(I) = "AUTO"
               END
            NEXT I
            MATWRITE S.TCC.PORT.REC ON TCC, CURR.PORT
            PORT.NO = CURR.PORT
            GOSUB 1000
         CASE OPTION = "VP"
            PORT.NO = CURR.PORT
            GOSUB 1000
         CASE OPTION = "VS"
*       PORT.NO = "!%@$#"
            PORT.NO = 'TTY'
            CALL SYSVARS.SUB(PORT.NO)
            GOSUB 1000
         CASE OPTION = "VA"
            GOSUB 2000
            GOSUB 1000
         CASE NOT(NUM(OPTION))
         CASE OPTION < 1 OR OPTION > 6
         CASE 1
            MAT TCC.PORT.REC = MAT S.TCC.PORT.REC
            ON OPTION GOSUB 1100,1200,1300,1400,1500,1600
            MAT S.TCC.PORT.REC = MAT TCC.PORT.REC
      END CASE
   WHILE MORE DO REPEAT
   GOTO 99999
*
*---- Display screen
1000*
   CALL TCC.SUB(PORT.NO)
*
1001 *
   CRT @(-1):
   DISPLAY.NAME = "T E R M I N A L   T Y P E   M A I N T E N A N C E"
   P = INT((80 - LEN(DISPLAY.NAME)) / 2)
   IF ETX.EMBED THEN
      CRT @(78,0):ETX.OFF:
      CRT @(0,0):ETX.TOP.OFF:" CBA/VERCOM":
      CRT @(P,0):DISPLAY.NAME:
      CRT @(69,0):OCONV(DATE(),"D2/"):ETX.TOP.OFF:
      CRT @(0,0):ETX.TOP:
   END ELSE
      CRT @(0,0):ETX.TOP:" CBA/VERCOM":
      CRT @(P,0):DISPLAY.NAME:
      CRT @(69,0):OCONV(DATE(),"D2/"):ETX.TOP.OFF:
   END
*
   BOX.X = "C"; BOX.Y = 3
   BOX.COLS = 42; BOX.ROWS = 7
   CALL @GRAPH.SUB
*
   IF ETX.EMBED THEN
      CRT @(BOX.X+1,BOX.Y+1) :"(1) Graphics Type     :":ETX.OFF:
      CRT @(BOX.X+0,BOX.Y+1) :ETX.LHD:
      CRT @(BOX.X+1,BOX.Y+2) :"(2) Video Type        :":ETX.OFF:
      CRT @(BOX.X+0,BOX.Y+2) :ETX.LHD:
      CRT @(BOX.X+1,BOX.Y+3) :"(3) Keyboard Type     :":ETX.OFF:
      CRT @(BOX.X+0,BOX.Y+3) :ETX.LHD:
      CRT @(BOX.X+1,BOX.Y+4) :"(4) Mouse ON/OFF      :":ETX.OFF:
      CRT @(BOX.X+0,BOX.Y+4) :ETX.LHD:
      CRT @(BOX.X+1,BOX.Y+5) :"(5) Screen Mode       :":ETX.OFF:
      CRT @(BOX.X+0,BOX.Y+5) :ETX.LHD:
      CRT @(BOX.X+1,BOX.Y+6) :"(6) PC Emulation      :":ETX.OFF:
      CRT @(BOX.X+0,BOX.Y+6) :ETX.LHD:
   END ELSE
      CRT @(BOX.X+1,BOX.Y+1) :ETX.LHD:"(1) Graphics Type     :":ETX.OFF:
      CRT @(BOX.X+1,BOX.Y+2) :ETX.LHD:"(2) Video Type        :":ETX.OFF:
      CRT @(BOX.X+1,BOX.Y+3) :ETX.LHD:"(3) Keyboard Type     :":ETX.OFF:
      CRT @(BOX.X+1,BOX.Y+4) :ETX.LHD:"(4) Mouse ON/OFF      :":ETX.OFF:
      CRT @(BOX.X+1,BOX.Y+5) :ETX.LHD:"(5) Screen Mode       :":ETX.OFF:
      CRT @(BOX.X+1,BOX.Y+6) :ETX.LHD:"(6) PC Emulation      :":ETX.OFF:
   END
*
   X = BOX.X + 25; Y = BOX.Y + 1
   MAT TCC.PORT.REC = MAT S.TCC.PORT.REC
   BEGIN CASE
      CASE KSEL.PORT.TYPE # "VIA"
         MOUSE.ON = "OFF"
      CASE MOUSE.PORT.TYPE
         MOUSE.ON = "ON"
      CASE 1
         MOUSE.ON = "OFF"
   END CASE
   IF ETX.EMBED THEN
      CRT @(X+1,Y):GRAPH.PORT.TYPE "L#10":ETX.OFF:@(X,Y):ETX.DHD:
      CRT @(X+1,Y+1):VIDEO.PORT.TYPE "L#10":ETX.OFF:@(X,Y+1):ETX.DHD:
      CRT @(X+1,Y+2):KSEL.PORT.TYPE "L#10":ETX.OFF:@(X,Y+2):ETX.DHD:
      CRT @(X+1,Y+3):MOUSE.ON "L#3":ETX.OFF:@(X,Y+3):ETX.DHD:
      CRT @(X+1,Y+4):CRT.PORT.TYPE "L#3":ETX.OFF:@(X,Y+4):ETX.DHD:
      IF DISK.PC.PORT.TYPE = "AUTO" AND NOT(UPD.FLAG) THEN
         CRT @(X+1,Y+5):DISK.PC.PORT.TYPE "L#15":ETX.OFF:@(X,Y+5):ETX.DHD:
      END ELSE
         CRT @(X+1,Y+5):PC.PORT.TYPE "L#15":ETX.OFF:@(X,Y+5):ETX.DHD:
      END
   END ELSE
      CRT @(X+1,Y):ETX.DHD:GRAPH.PORT.TYPE "L#10":ETX.OFF:
      CRT @(X+1,Y+1):ETX.DHD:VIDEO.PORT.TYPE "L#10":ETX.OFF:
      CRT @(X+1,Y+2):ETX.DHD:KSEL.PORT.TYPE "L#10":ETX.OFF:
      CRT @(X+1,Y+3):ETX.DHD:MOUSE.ON "L#3":ETX.OFF:
      CRT @(X+1,Y+4):ETX.DHD:CRT.PORT.TYPE "L#3":ETX.OFF:
      IF DISK.PC.PORT.TYPE = "AUTO" AND NOT(UPD.FLAG) THEN
         CRT @(X+1,Y+5):ETX.DHD:DISK.PC.PORT.TYPE "L#15":ETX.OFF:
      END ELSE
         CRT @(X+1,Y+5):ETX.DHD:PC.PORT.TYPE "L#15":ETX.OFF:
      END
   END
   M.X = X + 1; M.Y = BOX.Y + 1
   RETURN
*
*---- Graph Type
1100*
   TYP = 1; X = M.X; Y = M.Y; MAXL = 10
   VALDAT = "STD":VM:"PRISM9":VM:"PRISM8":VM:"ADDS":VM:"PC":VM:"RL":VM:"VIA":VM:"ANSI"
   HMSG = "Please Enter the terminal graphic characteristic, STD,PRISM9"
   HMSG<1,2> = "PRISM8,ADDS,PC,RL (RealLink),VIA,ANSI"
   IF GRAPH.PORT.TYPE # "" THEN
      O.R = "O"
      DEFAULT = GRAPH.PORT.TYPE
   END
   CALL EDIT.SUB
   IF VALUE # "END" THEN
      GRAPH.PORT.TYPE = VALUE
   END
   RETURN
*
*---- Video Type
1200*
   TYP = 1; X = M.X; Y = M.Y+1; MAXL = 10
   VALDAT = "STD":VM:"MDCSC":VM:"PRISM":VM:"ADDS":VM:"MENTOR":VM:"VIA":VM:"ANSI"
   HMSG = "Please Enter the terminal video characteristic, STD"
   HMSG<1,2> = "MDCSC,PRISM,ADDS,MENTOR,VIA,ANSI"
   IF VIDEO.PORT.TYPE # "" THEN
      O.R = "O"
      DEFAULT = VIDEO.PORT.TYPE
   END
   CALL EDIT.SUB
   IF VALUE # "END" THEN
      VIDEO.PORT.TYPE = VALUE
   END
   RETURN
*
*---- Keyboard Type
1300*
   TYP = 1; X = M.X; Y = M.Y+2; MAXL = 10
   VALDAT = "STD":VM:"PRISM":VM:"PRISMA":VM:"ADDS":VM:"WYSE":VM:"PC":VM:"VIA"
   HMSG = "Please Enter the terminal keyboard characteristic, STD"
   HMSG<1,2> = "PRISM,PRISMA,ADDS,WYSE,PC,VIA"
   IF KSEL.PORT.TYPE # "" THEN
      O.R = "O"
      DEFAULT = KSEL.PORT.TYPE
   END
   CALL EDIT.SUB
   IF VALUE # "END" THEN
      KSEL.PORT.TYPE = VALUE
   END
   RETURN
*
*---- Mouse On/OFF
1400*
   IF KSEL.PORT.TYPE # "VIA" THEN
      VALUE = "OFF"
   END ELSE
      TYP = 1; X = M.X; Y = M.Y+3; MAXL = 3; O.R = "O"
      VALDAT = "ON":VM:"OFF"
      HMSG = "Turn the mouse ON or OFF"
      IF MOUSE.PORT.TYPE THEN
         DEFAULT = "ON"
      END ELSE
         DEFAULT = "OFF"
      END
      CALL EDIT.SUB
      IF VALUE = "END" THEN
         IF MOUSE.PORT.TYPE THEN
            VALUE = "ON"
         END ELSE
            VALUE = "OFF"
         END
      END
   END
   IF VALUE = "ON" THEN
      MOUSE.PORT.TYPE = 1
   END ELSE
      MOUSE.PORT.TYPE = 0
   END
   RETURN
*
*---- Screen Mode
1500*
   TYP = 1; X = M.X; Y = M.Y+4; MAXL = 3; O.R = "O"
   VALDAT = "STD":VM:"BLD"
   HMSG = "(STD) for regular screens, NULL or (BLD) to rebuild screens"
   IF CRT.PORT.TYPE = "" THEN
      CRT.PORT.TYPE = "STD"
   END
   DEFAULT = CRT.PORT.TYPE
   CALL EDIT.SUB
   IF VALUE = "END" THEN
      VALUE = CRT.PORT.TYPE
   END
   CRT.PORT.TYPE = VALUE
   RETURN
*
*---- PC Emulation Mode
1600*
   SAVE.PC.PORT.TYPE = PC.PORT.TYPE
   TYP = 1; X = M.X; Y = M.Y+5; MAXL = 15; O.R = "O"
   VALDAT = "STD":VM:"wIntegrate":VM:"termIte":VM:"termulator":VM:"AUTO"
   HMSG = "(STD) for normal or Non PC, otherwise (wIntegrate), or (termIte)"
   IF PC.PORT.TYPE = "" THEN
      PC.PORT.TYPE = "STD"
   END
   IF DISK.PC.PORT.TYPE = "AUTO" AND NOT(UPD.FLAG) THEN
      DEFAULT = DISK.PC.PORT.TYPE
   END ELSE
      DEFAULT = PC.PORT.TYPE
   END
   CALL EDIT.SUB
   IF VALUE = "END" THEN
      VALUE = PC.PORT.TYPE
   END
   PC.PORT.TYPE = VALUE
   IF PC.PORT.TYPE = "AUTO" THEN
      GOSUB 500
* CALL TCC.SUB(CURR.PORT)
   END
   IF PC.PORT.TYPE # "STD" THEN
      CRT.PORT.TYPE = "BLD"
   END
   IF PC.PORT.TYPE # SAVE.PC.PORT.TYPE THEN
      UPD.FLAG = 1
   END
   RETURN
*
*---- Prompt for PC.PORT.TYPE
500 *
   OPEN "","SECURITY" TO SECURITY THEN
      MATREAD UPM.REC FROM SECURITY, "U.":PORT.NO THEN
         GOSUB 550
      END
   END
   RETURN
*
550 *
   OPEN "","XREF.DATA" TO XREF.DATA THEN
      OPEN "","PREFIX" TO PREFIX THEN
         MAT GEN.XREF.REC = ""
         GXR.NAME = "PC.PORT"
         READ TERMTYPES FROM TCC, "TERMTYPES" THEN
            GXR.IDLIST = TERMTYPES<4>
            O_GRAPH.PORT.TYPE = GRAPH.PORT.TYPE; GRAPH.PORT.TYPE = "STD"
            O_VIDEO.PORT.TYPE = VIDEO.PORT.TYPE; VIDEO.PORT.TYPE = "STD"
            CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
            GRAPH.PORT.TYPE = O_GRAPH.PORT.TYPE
            VIDEO.PORT.TYPE = O_VIDEO.PORT.TYPE
            IF GXR.ID = "" THEN
               GXR.ID = "STD"
               WRITE.SEC = 1
               UPM.PC.TYPE = GXR.ID
* TEST               PC.PORT.TSEL = GXR.ID
               PC.PORT.TYPE = "AUTO"
            END ELSE
               WRITE.SEC = 1
               UPM.PC.TYPE = GXR.ID
* TEST               PC.PORT.TSEL = GXR.ID
               PC.PORT.TYPE = "AUTO"
            END
            MAT S.TCC.PORT.REC = MAT TCC.PORT.REC
            GOSUB 1001
            MAT TCC.PORT.REC = MAT S.TCC.PORT.REC
         END
      END
   END
   RETURN
*
*---- Get all ports
2000*
   STMT = "SSELECT TCC"
   PERFORM STMT RTNLIST TCCLIST CAPTURING RESPONSE
   DATA = 1; LN = 1; LINES = 0
   LOOP
      READNEXT ID FROM TCCLIST ELSE DATA = 0
   WHILE DATA DO
*      IF NUM(ID) OR ID[1,3] = "tty" OR ID[1,3] = "pts" THEN
      IF ID # "TERMTYPES" THEN
         LINES = LINES + 1
         PORTS(LINES) = ID
         IF ID = CURR.PORT THEN LN = LINES
      END
   REPEAT
   IF LINES < 1 THEN
      ERRMSG = "No setup ports were found ?"
      GOSUB 91000
      GOTO 2099
   END
*
   MAT KSL.YX = ""
*
   MAT KSL.REC = ""
   KSL.ESC = KSEL.ESC
   KSL.ETX.SEL = ETX.DIN
   KSL.ETX.OFF = ETX.OFF
   KSL.HROW = "B"
*
   BOX.X = "C"; BOX.Y = 12
   BOX.COLS = 69; BOX.ROWS = 9
   CLR.SPC = SPACE(BOX.COLS - 3)
   BEGIN.PAGE = BOX.Y + 2
   LINE.SPACE = 1
   PAGE.SIZE = BOX.ROWS - 2
   KSL.ROW = BEGIN.PAGE
   KSL.COL = 1
   KSL.COLS = 1
   KSL.PGNO =  INT(LN / PAGE.SIZE + .99)
   KSL.PAGES = INT(LINES / PAGE.SIZE + .99)
   KSL.SCROLL = 1
   IF KSL.PAGES > 1 THEN
      BOX.HROW = 1
   END ELSE
      BOX.HROW = 0
   END
*
   CALL @GRAPH.SUB
   FST.X = BOX.X
   OLD.START.LINE = 0
   IF ETX.EMBED THEN
      CRT @(FST.X+1,BOX.Y):"Port Num":ETX.OFF:@(FST.X,BOX.Y):ETX.HSL:
      CRT @(FST.X+10,BOX.Y):" Graphics ":ETX.OFF:@(FST.X+9,BOX.Y):ETX.HSL:
      CRT @(FST.X+21,BOX.Y):"  Video   ":ETX.OFF:@(FST.X+20,BOX.Y):ETX.HSL:
      CRT @(FST.X+32,BOX.Y):" Keyboard ":ETX.OFF:@(FST.X+31,BOX.Y):ETX.HSL:
      CRT @(FST.X+43,BOX.Y):"Mouse":ETX.OFF:@(FST.X+42,BOX.Y):ETX.HSL:
      CRT @(FST.X+49,BOX.Y):"CRT":ETX.OFF:@(FST.X+48,BOX.Y):ETX.HSL:
      CRT @(FST.X+53,BOX.Y):" PC Emulation  ":ETX.OFF:@(FST.X+52,BOX.Y):ETX.HSL:
   END ELSE
      CRT @(FST.X+1,BOX.Y):ETX.HSL:"Port Num":ETX.OFF:
      CRT @(FST.X+10,BOX.Y):ETX.HSL:" Graphics ":ETX.OFF:
      CRT @(FST.X+21,BOX.Y):ETX.HSL:"  Video   ":ETX.OFF:
      CRT @(FST.X+32,BOX.Y):ETX.HSL:" Keyboard ":ETX.OFF:
      CRT @(FST.X+43,BOX.Y):ETX.HSL:"Mouse":ETX.OFF:
      CRT @(FST.X+49,BOX.Y):ETX.HSL:"CRT":ETX.OFF:
      CRT @(FST.X+53,BOX.Y):ETX.HSL:" PC Emulation  ":ETX.OFF:
   END
   GOSUB 2900
*
   ANCORE = 1
   LOOP
      CALL @KSEL.SUB
      BEGIN CASE
         CASE KSL.SEL = KSL.ESC
            ANCORE = 0
         CASE KSL.SEL = KSEL.SEL
         CASE KSL.SEL = "SF"
            LN = 1 + INT((LN-1)/PAGE.SIZE) * PAGE.SIZE + PAGE.SIZE
            IF LN > LINES THEN LN = 1
            GOSUB 2900
         CASE KSL.SEL = "SR"
            LN = 1 + INT((LN-1)/PAGE.SIZE) * PAGE.SIZE - PAGE.SIZE
            IF LN < 1 THEN LN = 1
            GOSUB 2900
         CASE KSL.SEL = "ST"
            LN = 1
            GOSUB 2900
         CASE KSL.SEL = "SB"
            LN = LINES
            GOSUB 2900
      END CASE
   WHILE ANCORE DO REPEAT
2099*
   RETURN
*
*---- Scrolling Routine
2900*
   START.LINE = 1 + INT((LN-1)/PAGE.SIZE)*PAGE.SIZE
   LAST.LINE = START.LINE + PAGE.SIZE - 1
   IF LAST.LINE > LINES THEN LAST.LINE = LINES
   IF START.LINE = OLD.START.LINE THEN GOTO 2990
   OLD.START.LINE = START.LINE
   SLN = BEGIN.PAGE
   IF ETX.EMBED THEN
      FOR V = START.LINE TO LAST.LINE
         PNO = PORTS(V)
         KSL.YX(SLN) = FST.X
         KSL.DATA(SLN) = PNO
         MATREAD TCC.PORT.REC FROM TCC, PNO ELSE
            MAT TCC.PORT.REC = "STD"
            MOUSE.PORT.TYPE = 0
         END
         IF PNO = CURR.PORT THEN PNO = "*":PNO
         CRT @(FST.X,SLN):ETX.OFF:PNO "L#8":
         CRT @(FST.X+10,SLN):GRAPH.PORT.TYPE "L#10":
         CRT @(FST.X+21,SLN):VIDEO.PORT.TYPE "L#10":
         CRT @(FST.X+32,SLN):KSEL.PORT.TYPE "L#10":
         BEGIN CASE
            CASE KSEL.PORT.TYPE # "VIA"
               MOUSE.ON = "OFF"
            CASE MOUSE.PORT.TYPE
               MOUSE.ON = "ON"
            CASE 1
               MOUSE.ON = "OFF"
         END CASE
         CRT @(FST.X+44,SLN):MOUSE.ON "L#3":
         CRT @(FST.X+49,SLN):CRT.PORT.TYPE "L#3":
         CRT @(FST.X+53,SLN):PC.PORT.TYPE "L#15":ETX.OFF:
         CRT @(FST.X,SLN):ETX.DSL:
         SLN = SLN + LINE.SPACE
      NEXT V
      LST.V = LAST.LINE - START.LINE + 2
      FOR V = LST.V TO PAGE.SIZE
         KSL.YX(SLN) = ""
         CRT @(FST.X,SLN):ETX.OFF:CLR.SPC:ETX.OFF:
         CRT @(FST.X,SLN):ETX.DSL:
         SLN = SLN + LINE.SPACE
      NEXT V
   END ELSE
      FOR V = START.LINE TO LAST.LINE
         PNO = PORTS(V)
         KSL.YX(SLN) = FST.X
         KSL.DATA(SLN) = PNO
         MATREAD TCC.PORT.REC FROM TCC, PNO ELSE
            MAT TCC.PORT.REC = "STD"
            MOUSE.PORT.TYPE = 0
         END
         IF PNO = CURR.PORT THEN PNO = "*":PNO
         CRT @(FST.X+1,SLN):ETX.DSL:PNO "L#8":SPACE(1):
         CRT @(FST.X+10,SLN):GRAPH.PORT.TYPE "L#10":SPACE(1):
         CRT @(FST.X+21,SLN):VIDEO.PORT.TYPE "L#10":SPACE(1):
         CRT @(FST.X+32,SLN):KSEL.PORT.TYPE "L#10":SPACE(2):
         BEGIN CASE
            CASE KSEL.PORT.TYPE # "VIA"
               MOUSE.ON = "OFF"
            CASE MOUSE.PORT.TYPE
               MOUSE.ON = "ON"
            CASE 1
               MOUSE.ON = "OFF"
         END CASE
         CRT @(FST.X+44,SLN):MOUSE.ON "L#3":SPACE(2):
         CRT @(FST.X+49,SLN):CRT.PORT.TYPE "L#3":SPACE(2):
         CRT @(FST.X+53,SLN):PC.PORT.TYPE "L#15":ETX.OFF:
         SLN = SLN + LINE.SPACE
      NEXT V
      LST.V = LAST.LINE - START.LINE + 2
      FOR V = LST.V TO PAGE.SIZE
         KSL.YX(SLN) = ""
         CRT @(FST.X+1,SLN):ETX.DSL:CLR.SPC:ETX.OFF:
         SLN = SLN + LINE.SPACE
      NEXT V
   END
*
*---- Display lines & pages
2910*
   IF ETX.EMBED THEN
      BEGIN CASE
         CASE BOX.HROW < 1
         CASE BOX.COLS < 10
         CASE BOX.COLS < 15
            PX = BOX.X + BOX.COLS - 10
            CRT @(PX,BOX.HROW):ETX.HHD.OFF:KSL.PGNO "R%2":" of ":KSL.PAGES "R%2":ETX.HHD.OFF:
            CRT @(PX,BOX.HROW):ETX.HHD:
         CASE 1
            PX = BOX.X + BOX.COLS - 15
            CRT @(PX,BOX.HROW):ETX.HHD.OFF:"Page ":KSL.PGNO "R%2":" of ":KSL.PAGES "R%2":ETX.HHD.OFF:
            CRT @(PX,BOX.HROW):ETX.HHD:
      END CASE
   END ELSE
      BEGIN CASE
         CASE BOX.HROW < 1
         CASE BOX.COLS < 10
         CASE BOX.COLS < 15
            PX = BOX.X + BOX.COLS - 10
            CRT @(PX,BOX.HROW):ETX.HHD:KSL.PGNO "R%2":" of ":KSL.PAGES "R%2":ETX.HHD.OFF:
         CASE 1
            PX = BOX.X + BOX.COLS - 15
            CRT @(PX,BOX.HROW):ETX.HHD:"Page ":KSL.PGNO "R%2":" of ":KSL.PAGES "R%2":ETX.HHD.OFF:
      END CASE
   END
2990*
   RETURN
91000*
   IF ETX.EMBED THEN
      CRT @(0,23):ETX.EHD.OFF:" ":ERRMSG:ETX.EHD.OFF:CL:
      CRT @(0,23):ETX.EHD:
   END ELSE
      CRT @(0,23):ETX.EHD:" ":ERRMSG:ETX.EHD.OFF:CL:
   END
   INPUT REPLY,1:
   CRT @(0,23):CL:
   RETURN
99999*
   RETURN
END
