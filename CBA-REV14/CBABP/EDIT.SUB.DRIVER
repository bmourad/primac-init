     SUBROUTINE EDIT.SUB.DRIVER
*COPY>CPYLIB>COMMON1
*     SUBROUTINE EDIT.SUB.DRIVER 
**********************************************************************
*
* REVISION    - [08.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
*
* SYSTEM       - PRIMAC
*
* SOURCE      - BP
*
* PROGRAM      - EDIT.SUB.DRIVER
*
* BY           - ZIAD YAMOUT, COMPUTER BUSINESS ASSOCIATES
*
* DATE         - 05/25/83
*
* DESCRIPTION  -
*
*ENDOC
*********************************************************************
*
**************************
* DIMENSIONS AND EQUATES *
**************************
*
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>BUILD.SCREEN
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*
     DIM SAVE.EDIT.COM(30)
******************
* INITIALIZATION *
******************
     DASHES = STR('-',80)
     ERRMSG = ''
*******************
* MAIN PROCESSING *
*******************
100   BEGIN CASE
         CASE ECD.ACTION = 1
            GOSUB 1000
         CASE ECD.ACTION = 2
            GOSUB 2000
         CASE ECD.ACTION = 3
            GOSUB 3000
         CASE ECD.ACTION = 4
            GOSUB 4000
         CASE ECD.ACTION = 5
            GOSUB 5000
         CASE 1
            ERRMSG = 'INVALID ACTION CODE - ':ECD.ACTION
            GOSUB 90000
      END CASE
      GOTO 999999
1000  MAT EDIT.COM = ''
      TYP = 0
      CALL EDIT.SUB
      MAT BLD.SCRN = ''
      DIM BLD.SCRN.SAVE(75)
      MAT BLD.SCRN.SAVE = ''
      FOR MLP = 1 TO ECD.SCRN.CNT
         MATREAD BLD.SCRN.SAVE FROM M.SCREENS, ECD.SCRN.NAME<MLP> ELSE
            ECD.ACTION = 0
            ERRMSG = ECD.SCRN.NAME<MLP> : ' SCREEN IS MISSING'
            GOSUB 90000
            GOTO 999999
         END
         FOR SLP = 1 TO BLD.SCRN.SIZE
            BLD.SCRN(SLP)<MLP> = BLD.SCRN.SAVE(SLP)
         NEXT SLP
         ECD.FIELD.COUNT<MLP> = COUNT(BLD.HEADING<MLP>,VM) + (BLD.HEADING<MLP> # '')
      NEXT MLP
      RETURN
2000*
      PRINT BLD.HEAD.SCRN<ECD.SCRN.NO> :
      RETURN
3000  FOR SEL.NO = 1 TO ECD.FIELD.COUNT<ECD.SCRN.NO>
         IF BLD.MULTI.LN<ECD.SCRN.NO,SEL.NO> = 1 THEN GOSUB 80000
      NEXT SEL.NO
      RETURN
4000  SEL.NO = ECD.NUM
      ECD.VALDAT.ITEM = ''
      GOSUB 10000
      RETURN
5000  SEL.NO = ECD.NUM
      GOSUB 80000
      RETURN
10000 MAT SAVE.EDIT.COM = MAT EDIT.COM
      FOR J = 1 TO EDIT.COM.SIZE
         EDIT.COM(J) = BLD.SCRN(J)<ECD.SCRN.NO,SEL.NO>
      NEXT J
      IF TYP < 1 OR TYP > 9 THEN GOTO 19999
      BEGIN CASE
         CASE ECD.RET.VALUES<ECD.SCRN.NO,SEL.NO,ECD.SUB.NUM> # ''
             DEFAULT = ECD.RET.VALUES<ECD.SCRN.NO,SEL.NO,ECD.SUB.NUM>
         CASE ECD.DEFAULT # ''
            DEFAULT = ECD.DEFAULT
      END CASE
      IF DEFAULT # '' THEN
         O.R = 'O'
         BEGIN CASE
           CASE BLD.TYP<ECD.SCRN.NO,SEL.NO> = 4
              CONV = 'MD':BLD.SCALER<ECD.SCRN.NO,SEL.NO>
              DEFAULT = OCONV(DEFAULT,CONV)
           CASE BLD.TYP<ECD.SCRN.NO,SEL.NO> = 6
              DEFAULT = OCONV(DEFAULT,"D2/")
         END CASE
      END
      IF VALDAT = '' THEN VCNT = 0 ELSE VCNT = COUNT(VALDAT,',') + 1
      IF PATRN = '' THEN PCNT = 0 ELSE PCNT = COUNT(PATRN,',') + 1
      IF PMSG # '' THEN PX = X; PY = Y; X = X + LEN(PMSG) + 1
      IF Y # 23 AND DEFAULT # '' AND O.R = 'O' THEN PRINT.DEFAULT = 1 ELSE PRINT.DEFAULT = 0
11000 IF PMSG # '' THEN PRINT @(PX,PY):CL:PMSG:SPACE(1):
      BEGIN CASE
      CASE TYP = 6 AND MAXL = 8
         FILLER = FILL:FILL:'/':FILL:FILL:'/':FILL:FILL
      CASE TYP = 4
         FILLER = STR(FILL,MAXL-SCALER-1):'.':STR(FILL,SCALER)
      CASE 1
         FILLER = STR(FILL,MAXL)
      END CASE
      IF PRINT.DEFAULT THEN PRINT @(0,23) :CL:'DEFAULT - ':DEFAULT:
      PRINT @(X,Y) : FILLER : @(X,Y) :
      IF ECHO.BACK THEN
         INPUT DVALUE,MAXL  _:
      END ELSE
*        DUMMY = OCONV(0,"U80E0")
         ECHO OFF
         INPUT DVALUE,MAXL  _:
*        DUMMY = OCONV(0,"U70E0")
         ECHO ON
      END
      IF PRINT.DEFAULT THEN PRINT @(0,23):CL:
*---  CHECK ILLEGAL CHARACTER INPUT
      IF DVALUE = ' ' THEN DVALUE = ''; DEFAULT = ''
      INLEN = LEN(DVALUE)
      FOR N = 1 TO INLEN
          DEC.EQUIV = SEQ(DVALUE[N,1])
          IF DEC.EQUIV < 32 OR DEC.EQUIV > 126 THEN
             ERRMSG = '** INVALID INPUT - PLEASE RE-KEY **'
             GOSUB 18000
             GOTO 11000
          END
      NEXT N
*---  CHECK INPUT LENGTH
12000* IF INLEN = MAXL AND NOT(AUTO.RTN) THEN
12001*   PRINT @(X+MAXL-1,Y) : DVALUE[INLEN,1] : @(X+MAXL-1,Y) :
*        INPUT STALL,1 :_
*        IF STALL = '<' THEN GOTO 11000
*        IF STALL # '' THEN GOTO 12001
*     END
      IF INLEN = 0 THEN
         IF O.R = 'O' THEN
            MINL = 0
            DVALUE = DEFAULT
            INLEN = LEN(DVALUE)
            IF DVALUE = '' THEN
               VALUE = DVALUE
               GOTO 19000
            END
         END ELSE
            ERRMSG = '** REQUIRED **'
            GOSUB 18000
            GOTO 11000
         END
      END
*---  CHECK HELP REQUEST
      IF TRIM(DVALUE) = '?' THEN
         IF HMSG = '' THEN HMSG = 'NO HELP MESSAGE FOR THIS FIELD'
         NO.HELPS = COUNT(HMSG,SVM) + (HMSG # '')
         HMSG.NO = 1
12500    PRINT @(0,23):CL:
         PRINT @(2,23):HMSG<1,1,HMSG.NO>[1,78]:CL:
         PRINT @(0,23):
         INPUT STALL,1  _:
         IF STALL = 'S' THEN
           HMSG.NO = HMSG.NO + 1
           IF HMSG.NO > NO.HELPS THEN
             HMSG.NO = 1
           END
           GOTO 12500
         END ELSE
            PRINT @(0,23) : CL :
            GOTO 11000
         END
      END
*---  CHECK END REQUEST
      IF TRIM(DVALUE) = 'END' OR TRIM(DVALUE) = '^' THEN
         DVALUE = PVALUE
         VALUE  = 'END'
         GOTO 19000
      END
*---  THE FOLLOWING ALLOWS DATE OR SPECIFIED INPUT
      IF TYP = 6 AND VCNT THEN
        FND = 0
        FOR V = 1 TO VCNT UNTIL FND
           IF DVALUE = FIELD(VALDAT,',',V) THEN FND = V
        NEXT V
        IF FND THEN
           VALUE = DVALUE
           GOTO 19000
        END ELSE
           VALDAT = ''
           GOTO 13000
        END
      END
*---  RANGE CHECK INPUT LENGTH
13000  IF INLEN < MINL THEN
         ERRMSG = '** MINIMUM LENGTH = ' : MINL : ' **'
         GOSUB 18000
         GOTO 11000
      END
      ERRMSG = ''
*---  PROCESS EDIT REQUEST
      ON TYP GOSUB 17100,17200,17300,17400,17500,17600,17700,17800,17900
      IF ERRMSG # '' THEN
         GOSUB 18000
         GOTO 11000
      END
*---  RANGE CHECK IF REQUESTED
      IF MINV = MAXV AND (MINV = 0 OR MINV = '') THEN GOTO 16000
      IF VALUE < MINV OR VALUE > MAXV THEN
         ERRMSG = '** OUT OF RANGE **'
         GOSUB 18000
         GOTO 11000
      END
*---  CHECK VALID INPUT
16000 IF VCNT THEN
        FND = 0
        FOR V = 1 TO VCNT UNTIL FND
           IF DVALUE = FIELD(VALDAT,',',V) THEN FND = V
        NEXT V
        IF FND = 0 THEN
          ERRMSG = '** INVALID RESPONSE **'
          GOSUB 18000
          GOTO 11000
        END
      END
      GOTO 19000
***************************  
*  EDIT ALPHANUMERIC INPUT *
***************************  
*  
17100 VALUE = DVALUE
17199 RETURN
*  EDIT ALPHABETIC INPUT *
17200 FOR I = 1 TO INLEN
         CHR = DVALUE[I,1]
         IF CHR # ' ' THEN
            IF CHR < 'A' OR CHR > 'Z' THEN
               ERRMSG = '** ALPHA INPUT REQUIRED **'
               GOTO 17299
            END
         END
      NEXT I
      VALUE = DVALUE
17299 RETURN
*  EDIT NUMERIC INPUT *
17300 IF NUM(DVALUE) THEN
         VALUE = DVALUE
      END ELSE
         ERRMSG = '** NUMERIC INPUT REQUIRED **'
      END
17399 RETURN
*  EDIT SCALED DECIMAL INPUT *
17400 CNV = 'MD' : SCALER
      DVALUE = ICONV(DVALUE,CNV)
      IF NOT(NUM(DVALUE)) THEN
         ERRMSG = '** DECIMAL INPUT REQUIRED **'
         GOTO 17499
      END
      VALUE = DVALUE
      DVALUE = OCONV(DVALUE,CNV)
      RETURN
17499 RETURN
*  EDIT (OPEN) *
17500 VALUE = DVALUE
17599 RETURN
*  EDIT DATE INPUT *
17600 IF DVALUE = 'DATE' THEN DVALUE = OCONV(DATE(),'D2')
      VALUE = ICONV(DVALUE,'D')
      IF VALUE = DVALUE OR VALUE = '' THEN
         ERRMSG = '** INVALID DATE **'
      END ELSE
         DVALUE = OCONV(VALUE,'D2/')
         IF MINV = MAXV AND (MINV = 0 OR MINV = '') THEN GOTO 17699
         IF MINV = 'DATE' THEN MINV = DATE()
         IF MAXV = 'DATE' THEN MAXV = DATE()
      END
17699 RETURN
*  EDIT PATTERN INPUT *
17700 FND = 0
      FOR P = 1 TO PCNT UNTIL FND
         IF DVALUE MATCHES FIELD(PATRN,',',P) THEN FND = P
      NEXT P
      IF FND THEN
         VALUE = DVALUE
      END ELSE
         ERRMSG = '** INVALID FORMAT **'
      END
17799 RETURN
*  EDIT YES OR NO *
17800 IF DVALUE # 'Y' AND DVALUE # 'N' THEN
         ERRMSG = '** PLEASE RESPOND (Y) OR (N) **'
      END ELSE
         VALUE = DVALUE
      END
17899 RETURN
*  EDIT (OPEN) *
17900 VALUE = DVALUE
17999 RETURN
*  ERROR ROUTINE
18000  BEGIN CASE
         CASE EMODE = 1 OR EMODE = 4
            ERX = EX
            ERY = EY
         CASE EMODE = 2 OR EMODE = 5
            ERX = 40
            ERY = EY
         CASE EMODE = 3 OR EMODE = 6
            ERX = EX
            ERY = EY
         CASE 1
            ERX = 0
            ERY = 23
      END CASE
      SP.LEN = 79 - ERX
      PRINT @(ERX,ERY) : SPACE(SP.LEN) :
      PRINT @(ERX,ERY) : BEL : ERRMSG :
      IF EMODE < 4 THEN
         INPUT STALL,1  _:
         PRINT @(ERX,ERY) : STR(' ',LEN(ERRMSG)+1) :
      END
      ERRMSG = ''
      RETURN
19000 IF NOT(ECHO.BACK) THEN GOTO 19999
      FORM = JUSTIFY:'#':MAXL
      PVALUE = DVALUE FORM
      PRINT @(X,Y) : PVALUE :
      ECD.RET.VALUE = VALUE
      IF ECD.RET.VALUE = 'END' THEN GOTO 19999
      IF ECD.VALDATION = 'D' THEN
         LOCATE ECD.RET.VALUE IN ECD.RET.VALUES<ECD.SCRN.NO,SEL.NO>,1 SETTING FOUND ELSE FOUND = 0
         IF FOUND AND FOUND # ECD.SUB.NUM THEN
            ERRMSG = '* * ' : ECD.RET.VALUE : ' ALREADY EXISTS ON LINE # ' : FOUND : ' * *'
            GOSUB 90000
            GOTO 11000
         END
      END
      IF ECD.VALDAT.CODE # '' AND ECD.RET.VALUE # '' THEN
         FOUND = 0
         IF BLD.FILE.CODE<ECD.SCRN.NO,SEL.NO> # '' THEN
            CNT = COUNT(BLD.FILE.CODE<ECD.SCRN.NO,SEL.NO>,',') + 1
            FOR I = 1 TO CNT UNTIL FOUND
               IF ECD.RET.VALUE = FIELD(BLD.FILE.CODE<ECD.SCRN.NO,SEL.NO>,',',I) THEN FOUND = I
            NEXT I
         END
         IF FOUND = 0 THEN
            FOUND = 1
            READ ECD.VALDAT.ITEM FROM ECD.VALDAT.FILE, ECD.PREFIX.ID : ECD.RET.VALUE ELSE
               FOUND = 0
               ECD.VALDAT.ITEM = ''
               BEGIN CASE
                 CASE ECD.VALDAT.CODE = '1'
                    ERRMSG = ECD.RET.VALUE : ' IS NOT ON FILE'
                    GOSUB 90000
                 CASE ECD.VALDAT.CODE = '2'
                    ERRMSG = ECD.RET.VALUE : ' IS NOT ON FILE TRY AGAIN !'
                    GOSUB 90000
                    GOTO 11000
                 CASE ECD.VALDAT.CODE = '4'
                    ERRMSG = ECD.RET.VALUE : ' IS NOT ON FILE. DO YOU WANT TO ADD (Y/N) :'
                    GOSUB 90000
                    IF ERRVAL # 'Y' THEN
                       GOTO 11000
                    END
               END CASE
            END
            IF FOUND AND ECD.VALDAT.CODE = '3' THEN
               ERRMSG = '** ':ECD.RET.VALUE:' ALREADY EXISTS ON FILE **'
               GOSUB 90000
               GOTO 11000
            END
         END
      END
      ECD.RET.VALUES<ECD.SCRN.NO,SEL.NO,ECD.SUB.NUM> = ECD.RET.VALUE
19999 MAT EDIT.COM = MAT SAVE.EDIT.COM
      RETURN
80000 IF BLD.DISP.DATA<ECD.SCRN.NO,SEL.NO> = 'Y' THEN
         OUTPUT = ECD.RET.VALUES<ECD.SCRN.NO,SEL.NO,ECD.SUB.NUM>
         BEGIN CASE
           CASE BLD.TYP<ECD.SCRN.NO,SEL.NO> = 4
              CONV = 'MD':BLD.SCALER<ECD.SCRN.NO,SEL.NO>
              OUTPUT = OCONV(OUTPUT,CONV)
           CASE BLD.TYP<ECD.SCRN.NO,SEL.NO> = 6
              OUTPUT = OCONV(OUTPUT,"D2/")
         END CASE
         FORM = BLD.JUSTIFY<ECD.SCRN.NO,SEL.NO>:'#':BLD.MAXL<ECD.SCRN.NO,SEL.NO>
         OUTPUT = OUTPUT FORM
         PRINT @(BLD.X<ECD.SCRN.NO,SEL.NO>,BLD.Y<ECD.SCRN.NO,SEL.NO>):OUTPUT:
      END
      RETURN
90000 PRINT @(0,23) : CL : ERRMSG :
      INPUT ERRVAL,1  _:
      PRINT @(0,23) : CL :
      RETURN
999999 ECD.SUB.NUM = 1
       ECD.DEFAULT = ''
       ECD.VALDATION = ''
       ECD.PREFIX.ID = ''
       ECD.VALDAT.CODE = ''
       ECD.VALDAT.FILE = ''
       RETURN
       END
