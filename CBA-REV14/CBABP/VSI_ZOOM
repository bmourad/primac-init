*COPY>CPYLIB>COM1
*******************************************************************
* Revision    -[10.0]
* Copyright   - 1982 by Computer Business Associates (Vercom Software, Inc)
* Program     - VSI_ZOOM
* System      - CBABP
* BY          - BILAL MOURAD
* DATE        - 12/21/95
* DESCRIPTION - Displays the PMC_PROCESS records for Selection
*             - and runs program or proc.
*             - Builds list from user secured processes and unsecured
*             - processes.
* Called by SCRN.EDIT, EDIT.SUB & SCREEN.INPUT when "}" is entered.
*T21177 diane 11/06/1996 * REV11 UPG
*T21177 walid 04/10/1997 * REV11 UPDATE @USER1 WITH PROGRAM
*T21177 walid 04/10/1997 * PMCUTLCK
*T23342 diane 10/16/1998 * Add process to zoom list when security setup
*                          for whole menu
********************************************************************
* Enddoc
*COPY>CPYLIB>GEN.XREF.SUB
*COPY>CPYLIB>TCC
*COPY>CPYLIB>PORT.CONTROL
*COPY>PMC.CPYLIB>SECURITY
*COPY>PMC.CPYLIB>PMC_PROCESS
*COPY>CPYLIB>PORT.MENU
*COPY>CPYLIB>PORT.MENU.HIST
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
MAT SYSCOM.REC =  ""; SYS.TYPE = 2
*
OPEN "","PMC_PROCESS" TO PMC_PROCESS ELSE
  ERRMSG = "PMC_PROCESS file is missing"; GOTO 93000
END
OPEN "","PREFIX" TO PREFIX ELSE
  ERRMSG = "PREFIX file is missing"; GOTO 93000
END
OPEN "","XREF.DATA" TO XREF.DATA ELSE
  ERRMSG = "XREF.DATA file is missing"; GOTO 93000
END
OPEN "","SECURITY" TO SECURITY ELSE
  ERRMSG = "SECURITY file is missing"; GOTO 93000
END
OPEN "","VOC" TO VOC ELSE
  ERRMSG = "VOC file is missing"; GOTO 93000
END
*T23342 v
OPEN "","PRIMAC.MENUS" TO MENUS ELSE
  ERRMSG = "PRIMAC.MENUS file is missing"; GOTO 93000
END
*T23342 ^
*
LEVEL_NO = "LEVEL"; CALL SYSVARS.SUB(LEVEL_NO)
IF LEVEL_NO > 10 THEN
  ERRMSG = "Too many zooming levels, please return to the original level!"
  GOSUB 91000; GOTO 99999
END
*
*---- Build list
PORT.NO = "TTY"
CALL SYSVARS.SUB(PORT.NO)
SEC.ID = "R.":PORT.NO
UPM.ID="U.":PORT.NO
MATREAD USER.REC FROM SECURITY, SEC.ID ELSE
  ERRMSG = 'Cannot locate the menu "R." record'
  GOSUB 91000; GOTO 99999
END
MATREAD SEC.REC FROM SECURITY, USER.CONO:USER.ID ELSE
  ERRMSG = "Cannot locate the security record for user # ":USER.ID
  GOSUB 91000; GOTO 99999
END
DIM MENU(40)
DIM WORK.MENU(40)
DIM SEL.REF(30)
MST.MENU.ID = "M.MASTER"
CBA.MST.MENU.ID = "M.CBA"
PROCNAME = "VSI_ZOOM_":LEVEL_NO
SAVE_USER.EXEC = USER.EXEC
*
*---- Main processing
1000 *
*
READ PROC.LIST FROM SECURITY, "_":USER.CONO:USER.ID ELSE PROC.LIST = ""
PROC.LIST.CNT = DCOUNT(PROC.LIST,AM)
*
SELECTINDEX "PPS_SEC", "Y" FROM PMC_PROCESS
IDLIST = ""
IF STATUS() = 1 THEN
  GOTO 99999
END
EOF = 0
LOOP
  READNEXT ID ELSE EOF = 1
UNTIL EOF
  IF PROC.LIST.CNT > 0 THEN
    LOCATE ID IN PROC.LIST,1 SETTING PL ELSE GOTO 1009
  END
  MATREAD PPS.REC FROM PMC_PROCESS, ID ELSE GOTO 1009
  BEGIN CASE
    CASE SEC.MENU.LEVEL > 2
    CASE SEC.MENU.FLAG="A"
*T23342     LOCATE PPS.VOC IN SEC.MENU.PROC<1>,1 SETTING FND ELSE GOTO 1009
*T23342     IF SEC.MENU.DISP<1,FND> # "Y" THEN GOTO 1009
      LOCATE PPS.VOC IN SEC.MENU.PROC<1>,1 SETTING FND THEN
        IF SEC.MENU.DISP<1,FND> # "Y" THEN GOTO 1009
      END ELSE
        GOSUB 3000
        IF VAL.ERR THEN GOTO 1009
      END
*T23342 ^
    CASE 1
      LOCATE PPS.VOC IN SEC.MENU.PROC<1>,1 SETTING FND THEN GOTO 1009
  END CASE
  IDLIST = INSERT(IDLIST,1,-1,0,ID)
1009*
REPEAT
*
*---- Display list, select, and run.
*
IF PC.PORT.TYPE = "wIntegrate" THEN
  CRT @(-1):
  CRT
END
MAT GEN.XREF.REC = ""
GXR.NAME = "ZOOM_PROC"
GXR.FILE = PMC_PROCESS
GXR.IDLIST = IDLIST
CALL GEN.XREF.SUB(MAT GEN.XREF.REC,PREFIX,XREF.DATA)
IF GXR.ID = "" THEN GOTO 99999
VOC_ID = "Z_":PORT.NO
CALL VSI_VERB_SUB(VOC_ID,VOC,GXR.ID,PMC_PROCESS,EXE_TYPE,EXE_VERB,ERRMSG)
BEGIN CASE
  CASE ERRMSG # ""
    GOSUB 91000; GOTO 99999
  CASE EXE_VERB = ""
    GOTO 99999
END CASE
MATREAD PPS.REC FROM PMC_PROCESS, GXR.ID ELSE
  ERRMSG = "Cannot locate selected process # ":GXR.ID
  GOSUB 91000; GOTO 99999
END
LOG.ERR = 0
GOSUB 8200
IF LOG.ERR THEN
  GOSUB 8900; GOTO 99999
END
INS GXR.ID BEFORE USER.VERB<1,1>
INS PPS.DESC BEFORE USER.V.DSP<1,1>
IF EXE_TYPE = "P" THEN
  INS PROCNAME BEFORE USER.EXEC<1,1>
END
GOSUB 8500
IF PPS.CEO = "M" THEN
  P_TITLE = PPS.DESC
  CALL EXE_CEOSCRN(EXE_VERB,GUIFORM,P_TITLE,PPS.CEO,GXR.ID,ERROR)
END ELSE
  PREV_PROG_ID = @USER1
  @USER1 = GXR.ID
  EXECUTE EXE_VERB
  @USER1 = PREV_PROG_ID
END
IF EXE_TYPE = "P" OR EXE_TYPE = "PB" THEN
  READU EXEC_PROC FROM VOC, VOC_ID THEN
    DELETE VOC, VOC_ID
  END ELSE
    RELEASE VOC, VOC_ID
  END
END
MATREADU USER.REC FROM SECURITY, SEC.ID THEN
  LOCATE PROCNAME IN USER.EXEC<1>,1 SETTING DELNO THEN
    USER.EXEC = DELETE(USER.EXEC,1,DELNO,0)
  END
END ELSE
  ERRMSG="** VSI_ZOOM NULL return stack after PERFORM **"
  GOSUB 91000
  USER.EXEC = SAVE_USER.EXEC
END
MATWRITE USER.REC ON SECURITY, SEC.ID
GOTO 99999
*****************
3000 *
VAL.ERR = 1
MCNT = DCOUNT(PPS.MENU,VM)
FOR MPTR = 1 TO MCNT
  LOCATE PPS.MENU<1,MPTR> IN SEC.MENU.PROC<1>,1 SETTING FND THEN
    VAL.ERR = 0
    GOTO 3099
  END
NEXT MPTR
3099 *
RETURN
*
*---- Build array with menus to check
*
8200*
BEGIN CASE
  CASE SEC.LOGIN > 0
    NOW=OCONV(TIME(),"MTS")
    NOW=NOW[1,2]:NOW[4,2]
    IF NOW < SEC.LOGIN THEN
      SEL.CMD="** LOGIN TIME **"
      GOSUB 21000
      ERRMSG="** Unauthorized login time frame **"
      GOSUB 91000
      LOG.ERR=1; GOTO 8099
    END
    IF SEC.LOGOUT > 0 AND NOW > SEC.LOGOUT THEN
      SEL.CMD="** LOGOUT TIME **"
      GOSUB 21000
      ERRMSG="** Unauthorized logged on time frame **"
      GOSUB 91000
      LOG.ERR=1; GOTO 8099
    END
  CASE SEC.LOGOUT > 0
    NOW=OCONV(TIME(),"MTS")
    NOW=NOW[1,2]:NOW[4,2]
    IF NOW > SEC.LOGOUT THEN
      SEL.CMD="** LOGOUT TIME **"
      GOSUB 21000
      ERRMSG="** Unauthorized logged on time frame **"
      GOSUB 91000
      LOG.ERR=1; GOTO 8099
    END
END CASE
8099*
RETURN
*
*--- Update PORT & MENU CONTROL
8500*
*   USER.DATE=DATE(); USER.TIME=TIME()
IF USER.DATE = '' THEN
  USER.DATE = DATE()
  USER.TIME = TIME()
END ELSE
  INS DATE() BEFORE USER.DATE<1,1>
  INS TIME() BEFORE USER.TIME<1,1>
END
MATWRITE USER.REC ON SECURITY, SEC.ID
8600*
MATREADU UPM.REC FROM SECURITY, UPM.ID ELSE
  MAT UPM.REC=""
END
UPM.CONO=USER.CONO; UPM.USER=USER.ID
UPM.DIR<1,1>=USER.DIR<1,1>
UPM.DATE=DATE(); UPM.TIME=TIME()
*   UPM.LOGIN = LOGIN_NAME
UPM.LOGIN = @LOGNAME
BEGIN CASE
  CASE USER.STAT="PROC"
    IF USER.VERB<1,1>=UPM.PROC<1,1> AND USER.DIR<1,1>=UPM.P.DIR<1,1> THEN
      UPM.P.DATE<1,1>=USER.DATE<1,1>
      UPM.P.TIME<1,1>=USER.TIME<1,1>
    END ELSE
      INS USER.VERB<1,1> BEFORE UPM.PROC<1,1>
      INS USER.DIR<1,1> BEFORE UPM.P.DIR<1,1>
      INS USER.DATE<1,1> BEFORE UPM.P.DATE<1,1>
      INS USER.TIME<1,1> BEFORE UPM.P.TIME<1,1>
    END
  CASE USER.STAT="VERB"
    P=1
    LOOP
      LOCATE USER.VERB IN UPM.VERB<1>,P SETTING V THEN
        IF USER.DIR<1,1>=UPM.V.DIR<1,V> THEN
*            DEL UPM.VERB<1,V>
*            DEL UPM.V.DIR<1,V>
*            DEL UPM.V.DATE<1,V>
*            DEL UPM.V.TIME<1,V>
          UPM.VERB = DELETE(UPM.VERB,1,V)
          UPM.V.DIR = DELETE(UPM.V.DIR,1,V)
          UPM.V.DATE = DELETE(UPM.V.DATE,1,V)
          UPM.V.TIME = DELETE(UPM.V.TIME,1,V)
          P=0
        END
      END ELSE
        P=0
      END
    WHILE P DO
      P=V + 1
    REPEAT
    INS USER.VERB BEFORE UPM.VERB<1,1>
    INS USER.DIR<1,1> BEFORE UPM.V.DIR<1,1>
    INS USER.DATE BEFORE UPM.V.DATE<1,1>
    INS USER.TIME BEFORE UPM.V.TIME<1,1>
    IF USER.VERB<1,21> # "" THEN
*      DEL UPM.VERB<1,21>
*      DEL UPM.V.DIR<1,21>
*      DEL UPM.V.DATE<1,21>
*      DEL UPM.V.TIME<1,21>
      UPM.VERB = DELETE(UPM.VERB,1,21)
      UPM.V.DIR = DELETE(UPM.V.DIR,1,21)
      UPM.V.DATE = DELETE(UPM.V.DATE,1,21)
      UPM.V.TIME = DELETE(UPM.V.TIME,1,21)
    END
END CASE
MATWRITE UPM.REC ON SECURITY, UPM.ID
RETURN
8900*
MATREADU UPM.REC FROM SECURITY, UPM.ID ELSE
  RELEASE SECURITY, UPM.ID
  GOTO 8990
END
UPMH.ID="H.":PORT.NO:"!":UPM.CONO:UPM.USER
MATREADU UPMH.REC FROM SECURITY, UPMH.ID ELSE
  MAT UPMH.REC=""
END
DIR.NAME = "ACCT"; CALL SYSVARS.SUB(DIR.NAME)
UPMH.DIR=DIR.NAME
UPMH.DIR=USER.DIR<1,1>
UPMH.DATE=DATE()
UPMH.TIME=TIME()
CNT=DCOUNT(UPM.PROC,VM)
FOR V=1 TO CNT
  P=1
  LOOP
    LOCATE UPM.PROC<1,V> IN UPMH.PROC<1>,P SETTING VH THEN
      IF UPM.P.DIR<1,V>=UPMH.P.DIR<1,VH> THEN
        UPMH.P.DATE<1,VH>=UPM.P.DATE<1,V>
        UPMH.P.TIME<1,VH>=UPM.P.TIME<1,V>
        P=0
      END
    END ELSE
      INS UPM.PROC<1,V> BEFORE UPMH.PROC<1,1>
      INS UPM.P.DIR<1,V> BEFORE UPMH.P.DIR<1,1>
      INS UPM.P.DATE<1,V> BEFORE UPMH.P.DATE<1,1>
      INS UPM.P.TIME<1,V> BEFORE UPMH.P.TIME<1,1>
      P=0
    END
  WHILE P DO
    P=VH + 1
  REPEAT
NEXT V
CNT=DCOUNT(UPM.VERB,VM) + 1
IF CNT > 1 THEN
  LIMIT=DCOUNT(UPMH.VERB,VM) + CNT - 1
  IF LIMIT > 40 THEN LIMIT=40
  FOR V=CNT TO LIMIT
    VH=V - CNT + 1
    UPM.VERB<1,V>=UPMH.VERB<1,VH>
    UPM.V.DIR<1,V>=UPMH.V.DIR<1,VH>
    UPM.V.DATE<1,V>=UPMH.V.DATE<1,VH>
    UPM.V.TIME<1,V>=UPMH.V.TIME<1,VH>
  NEXT V
  UPMH.VERB=UPM.VERB
  UPMH.V.DIR=UPM.V.DIR
  UPMH.V.DATE=UPM.V.DATE
  UPMH.V.TIME=UPM.V.TIME
END
MATWRITE UPMH.REC ON SECURITY, UPMH.ID
DELETE SECURITY, UPM.ID
8990*
RETURN
*
*---- Log access violation attempt
21000*
*   IF INV.ACC.NOT.OPEN THEN
OPEN "","INVALID.ACCESS" TO INVALID.ACCESS ELSE
  ERRMSG="** Cannot locate the INVALID.ACCESS file **"
  GOSUB 91000; GOTO 21999
END
*      INV.ACC.NOT.OPEN=0
*   END
IF USER.ID="" THEN USER.ID="??????"
INV.ACC.KEY=USER.ID:"*":DATE():"*":TIME():"*":PORT.NO
WRITE SEL.CMD ON INVALID.ACCESS, INV.ACC.KEY
21999*
RETURN
*****************
*
*---- System Errors
*
91000 ERR.TYPE=1;CALL SYSCOM(MAT SYSCOM.REC);RETURN
93000 ERR.TYPE=3;CALL SYSCOM(MAT SYSCOM.REC)
* 91000 CRT@(0,23):ERRMSG:CL:
* INPUT XX:
* CRT @(0,23):CL:
* RETURN
* 93000 CRT@(0,23):ERRMSG:CL:
* INPUT XX:
99999*
RETURN
END
