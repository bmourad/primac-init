      SUBROUTINE BP.CONV(LINE,ERRMSG)
*
      DIM FUNCS(15)
      ERRMSG = ""
      SPC = SPACE(1)
      S.C = ";"
      OPERS = ":"
      OPERS<2> = "+"
      OPERS<3> = "-"
      OPERS<4> = "*"
      OPERS<5> = "/"
*
*---- Check if there is any non supported functions
*
      FUNCS(1) = "SUMMATION("
      FUNCS(2) = "MAXIMUM("
      FUNCS(3) = "MINIMUM("
      FUNCS(4) = "SPOOLER("
      FUNCS(5) = "UNASSIGNED("
      FUNCS(6) = "SQUOTE("
      FUNCS(7) = "DQUOTE("
      FUNCS(8) = "CHECKSUM("
      FUNCS(9) = "GROUP("
      FUNCS(10) = "BITCHANGE("
      FUNCS(11) = "BITCHECK("
      FUNCS(12) = "BITRESET("
      FUNCS(13) = "BITSET("
      FUNCS(14) = "BITLOAD("
      LIMIT = 14
      FOR I = 1 TO LIMIT
         IF INDEX(LINE,FUNCS(I),1) THEN
            ERRMSG = "Warning, using a non supported function (":FUNCS(I):")"
            LIMIT = 0
         END
      NEXT I
      IF LIMIT = 0 THEN GOTO 99999
      IF NOT(INDEX(LINE,"CONV",1)) THEN
         FUNCS(1) = "U307A"
         FUNCS(2) = "U407A"
         FUNCS(3) = "U50BB"
         FUNCS(4) = "U10DD"
         FUNCS(5) = "U00E0"
         FUNCS(6) = "U10E0"
         FUNCS(7) = "U20E0"
         FUNCS(8) = "U30E0"
         FUNCS(9) = "U40E0"
         FUNCS(10) = "U60E0"
         FUNCS(11) = "U70E0"
         FUNCS(12) = "U80E0"
         FUNCS(13) = "U90E0"
         LIMIT = 13
         FOR I = 1 TO LIMIT
            IF INDEX(LINE,FUNCS(I),1) THEN
               ERRMSG = "Warning, using a user exit function (":FUNCS(I):")"
               LIMIT = 0
            END
         NEXT I
         IF LIMIT = 0 THEN GOTO 99999
      END
      MLEN = LEN(LINE)
      SPTR = 1; INDX = "INPUT "
      LOC = 1; GOSUB 1000
      SPTR = 2; INDX = "PERFORM "
      LOC = 1; GOSUB 1000
*     SPTR = 3; INDX = "LOCATE "
*     LOC = 1; GOSUB 1000
      SPTR = 4; INDX = "SELECTE "
      LOC = 1; GOSUB 1000
      SPTR = 4; INDX = "DELETELIST "
      LOC = 1; GOSUB 1000
      SPTR = 4; INDX = "GETLIST "
      LOC = 1; GOSUB 1000
      SPTR = 4; INDX = "READLIST "
      LOC = 1; GOSUB 1000
      SPTR = 4; INDX = "WRITELIST "
      LOC = 1; GOSUB 1000
      SPTR = 4; INDX = "FIND "
      LOC = 1; GOSUB 1000
*     SPTR = 4; INDX = "FINDSTR "
*     LOC = 1; GOSUB 1000
      SPTR = 4; INDX = "PRINTERR "
      LOC = 1; GOSUB 1000
      SPTR = 4; INDX = "ASSIGN "
      LOC = 1; GOSUB 1000
      SPTR = 1; INDX = "TRIM("
      LOC = 1; GOSUB 4000
      SPTR = 2; INDX = "["
      LOC = 1; GOSUB 4000
      GOTO 99999
1000*
      LOOP
         POS = INDEX(LINE,INDX,LOC)
      WHILE POS DO
            LIMIT = POS - 1
            MIN = 1; VALID = 1
            FOR P = LIMIT TO MIN STEP -1
               CHR = LINE[P,1]
               BEGIN CASE
               CASE CHR = S.C
                  MIN = POS
               CASE CHR # SPC
                  VALID = 0; MIN = POS
               END CASE
            NEXT P
            IF VALID THEN
               ON SPTR GOSUB 2100,2200,2300,2400
            END
         LOC = LOC + 1
      REPEAT
      RETURN
*
*---- INPUT statement conversion
*---- From (INPUT var : _) to (INPUT var _ :)
2100*
      POS = POS + 6
      GOSUB 3000;*Find next char
      IF NOT(XPOS) THEN GOTO 2199
      POS = XPOS + 1; S.CHR = ":"
      GOSUB 3100;*Find the S.CHR
      IF NOT(XPOS) THEN GOTO 2199
      POS = XPOS + 1
      POS1 = XPOS
      GOSUB 3000;*Find next char
      IF NOT(XPOS) THEN GOTO 2199
      IF LINE[XPOS,1] # "_" THEN GOTO 2199
      LINE = LINE[1,XPOS-1]:":":LINE[XPOS+1,999]
		  IF LINE[XPOS-1,1] = " " THEN
         LINE = LINE[1,POS1-1]:"_":LINE[POS1+1,999]
		  END ELSE
         LINE = LINE[1,POS1-1]:" _":LINE[POS1+1,999]
		  END
      ERRMSG = "CNV"
2199*
      RETURN
*
*---- PERFORM statement conversion
*---- From (PERFORM exp {CAPTURING var1} {SETTING var2})
*---- To (EXECUTE exp {RETURING var2} {CAPTURING var1})
2200*
      POS1 = POS
      POS = POS + 7
      GOSUB 3000;*Find next char
      IF NOT(XPOS) THEN GOTO 2299
      POS = XPOS
      GOSUB 3300;*Find string
      BEGIN CASE
      CASE EOL
         LOC = LOC - 1
*        LINE = LINE[1,POS1-1]:"EXECUTE":LINE[POS1+7,999]
*        ERRMSG = "CNV"
      CASE NOT(XPOS)
         ERRMSG = "Could not determine the PREFORM string"
         GOTO 2299
      CASE LINE[XPOS,10] = "CAPTURING "
         POS2 = XPOS
         POS = XPOS + 10
         GOSUB 3000;*Find next char
         IF NOT(XPOS) THEN
            ERRMSG = "Could locate the CAPTURING variable"
            GOTO 2299
         END
         POS = XPOS
         GOSUB 3200;*Find variable
         BEGIN CASE
         CASE EOL
            LOC = LOC - 1
*           LINE = LINE[1,POS1-1]:"EXECUTE":LINE[POS1+7,999]
*           ERRMSG = "CNV"
         CASE NOT(XPOS)
            ERRMSG = "Could identify the CAPTURING variable"
            GOTO 2299
         CASE LINE[XPOS,8] = "SETTING "
*           LOC = LOC - 1
*           POS3 = XPOS
*           LINE = LINE[1,POS1-1]:"EXECUTE":LINE[POS1+7,999]
*           SLINE = LINE[1,POS2-1]:"RETURNING":LINE[POS3+7,999]
*           LINE = SLINE:" CAPTURING":LINE[POS2+9,POS3-POS2-10]
*           ERRMSG = "CNV"
            ERRMSG = "A SETTING clause is encountered in the PERFORM verb"
				CASE 1
            ERRMSG = "A verb other than SETTING follows the CAPTURING variable"
         END CASE
      CASE LINE[XPOS,8] = "SETTING "
*        LOC = LOC - 1
*        POS2 = XPOS
*        LINE = LINE[1,POS1-1]:"EXECUTE":LINE[POS1+7,999]
*        LINE = LINE[1,POS2-1]:"RETURNING":LINE[POS2+7,999]
*        ERRMSG = "CNV"
         ERRMSG = "A SETTING clause is encountered in the PERFORM verb"
      CASE 1
         ERRMSG = "A verb other than CAPTURING or SETTING follows the PERFORM string"
      END CASE
2299*
      RETURN
*
*---- LOCATE statement conversion
*---- From (LOCATE string)
*---- To (LOCATE (string))
2300*
      POS = POS + 7
      GOSUB 3000;*Find next char
      IF NOT(XPOS) THEN GOTO 2399
      POS = XPOS
      IF LINE[POS,1] = "(" THEN GOTO 2399
      POS1 = XPOS - 1
      GOSUB 3300;*Find string
      IF NOT(XPOS) THEN
         ERRMSG = "Could not determine the LOCATE string"
         GOTO 2399
      END
      IF LINE[XPOS,3] # "IN " THEN
         ERRMSG = "Could not locate the IN clause after the LOCATE string"
         GOTO 2399
      END
      IF NO.STR THEN GOTO 2399
      LINE = LINE[1,POS1]:"(":LINE[POS1+1,XPOS-POS1-2]:") ":LINE[XPOS,999]
      ERRMSG = "CNV"
2399*
      RETURN
*
*---- SELECTE,DELETELIST,GETLIST,READLIST,WRITELIST
*---- Statements not supported
2400*
      ERRMSG = "Warning, using a non supported verb (":TRIM(INDX):")"
      RETURN
*
*---- Find the next non space character
3000*
      LIMIT = MLEN; XPOS = 0; EOL = 1
      FOR I = POS TO LIMIT
         CHR = LINE[I,1]
         BEGIN CASE
         CASE CHR = S.C
            LIMIT = 0
         CASE CHR # SPC
            XPOS = I; EOL = 0; LIMIT = 0
         END CASE
      NEXT I
      RETURN
*
*---- Find a specified char
3100*
      LIMIT = MLEN; XPOS = 0; EOL = 1
      FOR I = POS TO LIMIT
         CHR = LINE[I,1]
         BEGIN CASE
         CASE CHR = S.CHR
            XPOS = I; EOL = 0; LIMIT = 0
         CASE CHR = S.C
            LIMIT = 0
         END CASE
      NEXT I
      RETURN
*
*---- Find the next space character
3200*
      LIMIT = MLEN; XPOS = 0; EOL = 1
      FOR J = POS TO LIMIT
         CHR = LINE[J,1]
         BEGIN CASE
         CASE CHR = S.C
            LIMIT = 0
         CASE CHR = SPC
            POS = J + 1; GOSUB 3000;*Find next char
            LIMIT = 0
         END CASE
      NEXT J
      RETURN
*
*---- Find the end of an expression
3300*
      LOCATE LINE[POS,1] IN OPERS,1 SETTING FND ELSE FND = 0
      IF FND THEN
         XPOS = 0
         GOTO 3399
      END
      LIMIT = MLEN; XPOS = 0; EOL = 1; SFND = 0; NO.STR = 1
      LOOP WHILE POS <= LIMIT DO
         CHR = LINE[POS,1]
         BEGIN CASE
         CASE CHR = '"' OR CHR = "'"
            S.CHR = CHR
            POS = POS + 1; GOSUB 3100;*Find the S.CHR
            IF XPOS THEN
               POS = XPOS + 1; XPOS = 0; LIMIT = MLEN
               EOL = 1; SFND = 1
            END ELSE
               LIMIT = 0
            END
         CASE CHR = S.C
            LIMIT = 0
         CASE CHR = SPC
            POS = POS + 1; GOSUB 3000;*Find next char
            IF XPOS THEN
               POS = XPOS; XPOS = 0; LIMIT = MLEN
               EOL = 1; SFND = 1
            END ELSE
               LIMIT = 0
            END
         CASE 1
            LOCATE CHR IN OPERS,1 SETTING FND ELSE
               FND = 0
               IF SFND THEN
                  XPOS = POS; EOL = 0; LIMIT = 0
               END ELSE
                  POS = POS + 1
               END
            END
            IF FND THEN
               POS = POS + 1; NO.STR = 0
               GOSUB 3000;*Find next char
               IF XPOS THEN
                  POS = XPOS; XPOS = 0; LIMIT = MLEN
                  EOL = 1; SFND = 0
               END ELSE
                  LIMIT = 0
               END
            END
         END CASE
      REPEAT
3399*
      RETURN
4000*
      LOOP
         POS = INDEX(LINE,INDX,LOC)
      WHILE POS DO
         ON SPTR GOSUB 4100,4200
         LOC = LOC + 1
      REPEAT
      RETURN
4100*
      LIMIT = MLEN; POS = POS + 5; XPOS = 0; FND = 1
      FOR I = POS TO LIMIT
         CHR = LINE[I,1]
         BEGIN CASE
         CASE CHR = S.C
            LIMIT = 0
         CASE CHR = ")"
            FND = FND - 1
            IF FND = 0 THEN
               XPOS = I; LIMIT = 0
            END
         CASE CHR = "("
            FND = FND + 1
         END CASE
      NEXT I
      IF NOT(XPOS) THEN GOTO 4199
      LIMIT = POS
      POS = XPOS - 1
      FOR I = POS TO LIMIT STEP -1
        CHR = LINE[I,1]
        IF LINE[I,1] # SPC THEN
           XPOS = I; LIMIT = POS + 1
        END
     NEXT I
     IF NOT(XPOS) THEN GOTO 4199
     CHR = LINE[XPOS,1]
     IF CHR # '"' AND CHR # "'" THEN GOTO 4199
     CHR = LINE[XPOS-1,1]
     BEGIN CASE
     CASE CHR = "L"
     CASE CHR = "T"
     CASE CHR = "B"
     CASE CHR = "A"
     CASE CHR = "R"
     CASE 1
        GOTO 4199
     END CASE
      ERRMSG = "Warning, complex TRIM statement"
4199*
      RETURN
4200*
      EXPR = FIELD(LINE[POS+1,999],"]",1)
      VAR = FIELD(EXPR,",",1)
      IF NUM(VAR) THEN
         IF VAR + 0 < 0 THEN
            ERRMSG = 'Negative first number in the "[" (string) function'
         END
      END
      VAR = FIELD(EXPR,",",2)
      IF NUM(VAR) THEN
         IF VAR + 0 < 0 THEN
            ERRMSG = 'Negative second number in the "[" (string) function'
         END
      END
      RETURN
99999*
   RETURN
   END
