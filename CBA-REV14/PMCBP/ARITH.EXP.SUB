      SUBROUTINE ARITH.EXP.SUB(VVARS,VARS,VLOC,STACK,ARITH.EXP)
*COPY>CPYLIB>COM1
************************************************************
* REVISION    - [08.1]
* SOURCE      - UTLBP
* PROGRAM     - ARITH.EXP.SUB
* BY          - ZIAD YAMOUT, VERCOM SOFTWARE, INC.
* DATE        - 11/16/88
* DESCRIPTION -
*T25978 adelgado 01/25/2002 * Add the use of prompts (S,SR,SB,ST).
*ENDDOC
************************************************************
*
*--- Data base libraries
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
      MAT SYSCOM.REC =  ""; SYS.TYPE = 2
*
*--- Initialization
      MAX.ECD.NUM = 4
      BEGIN.PAGE = 15
      BEGIN.PAGE.1 = 5
      PAGE.SIZE = 3
      PAGE.SIZE.1 = 9
      LINE.SPACE = 1
      MAX.LINES = 3
      HD = "Arithmetic expression"
      SYMBOL = "PWR":AM:"REM":AM:"INT":AM:"ABS":AM:"SQRT":AM:"RND"
      FLN = 1; FLINES = 6; F.DESC = ""
      FOR FLN = 1 TO FLINES
         READ SYM.HELP FROM SYMBOLS, SYMBOL<FLN> ELSE
            SYM.HELP = SYMBOL<FLN>
         END
         F.DESC<FLN> = SYM.HELP<1>
      NEXT FLN
*
      OP.HELP = "An arthmetic expression is evaluated by performing the operations specified"
      OP.HELP<2> = "by each of the arthmetic operators on the adjacent constants, identifiers,"
      OP.HELP<3> = "or intrinsic functions in the order of their precedence. If two or more"
      OP.HELP<4> = "operators have the same precedence, the left most operation is performed"
      OP.HELP<5> = "first."
      OP.HELP<6> = "For example,"
      OP.HELP<7> = "              5+15/5       evaluates to 8"
      OP.HELP<8> = "              (5+15)/5     evaluates to 4"
      OP.HELP<9> = "              -50/5+3*2    evaluates to -4"
      OP.HELP<10> = "              2-6+8/2+6    evaluates to 6"
      OP.HELP<11> = "              12/2*3       evaluates to 18"
      OP.HELP<12> = "              12/(2*3)     evaluates to 2"
      OP.HELP<13> = "              -5+2         evaluates to -3"
      OP.HELP<14> = "              -(5+2)       evaluates to -7"
*
      D.DESC = "-999,999,999"
      D.DESC<3> = "Through"
      D.DESC<5> = "999,999,999"
      DLN = 1; DLINES = 5
      IF VVARS # "" THEN
         D.DESC<7> = "Plus the following"
         D.DESC<9> = "Symbols"
         DLINES = 9
         I = 1
         LOOP WHILE VVARS<I> # "" DO
            DLINES = DLINES + 1
            D.DESC<DLINES> = VVARS<I>
            I = I + 1
         REPEAT
      END
*
      FOR ECD.NUM = 1 TO MAX.ECD.NUM
         SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""
      NEXT ECD.NUM
      ECD.ACTION = 6; CALL SCRN.EDIT
      D.OLD.START.LINE = 0; GOSUB 3900
      F.OLD.START.LINE = 0; GOSUB 4900
      ECD.NUM = 1; SCV.REC(ECD.NUM)<ECD.SCRN.NO> = HD
      ECD.ACTION = 5; CALL SCRN.EDIT
      OLD.START.LINE = 0
      IF ARITH.EXP = "" THEN
         LN = 1; LINES = 0
         RESPOND = "A"
         LOOP
            LN = LINES + 1
            OLD.LINES = LINES
            GOSUB 1900
            GOSUB 1000
         WHILE LINES > OLD.LINES AND LINES < MAX.LINES DO REPEAT
         LN = LINES
      END ELSE
         LINES = DCOUNT(ARITH.EXP,AM)
         LN = 1
      END
      GOSUB 1900
      GOSUB 7000
*
*--- Prompt line routine
      MORE = 1
      LOOP
         ECD.NUM = 3; SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""
         ECD.ACTION = 4; CALL SCRN.EDIT
         RESPOND = ECD.RET.VALUE
         BEGIN CASE
            CASE RESPOND = "" OR RESPOND = "E" OR RESPOND = "END"
               MORE = 0
            CASE RESPOND = "A" AND LINES < MAX.LINES
               LOOP
                  LN = LINES + 1
                  OLD.LINES = LINES
                  GOSUB 1900
                  GOSUB 1000
               WHILE LINES > OLD.LINES AND LINES < MAX.LINES DO REPEAT
               LN = LINES
               GOSUB 1900
               GOSUB 7000
            CASE RESPOND = "A"
               ERRMSG = MAX.LINES : " is the maximum number of lines"
               GOSUB 91000
            CASE RESPOND = "O"
               DESC = "Operators"
               DESC = SPACE(INT((21-LEN(DESC))/2)) : DESC
               SYM.HELP = OP.HELP
               GOSUB 5000
            CASE RESPOND = "SD"
               DLN = 1 + INT((DLN-1)/PAGE.SIZE.1) * PAGE.SIZE.1 + PAGE.SIZE.1
               IF DLN > DLINES THEN DLN = 1
               GOSUB 3900
            CASE RESPOND = "SF"
               FLN = 1 + INT((FLN-1)/PAGE.SIZE.1) * PAGE.SIZE.1 + PAGE.SIZE.1
               IF FLN > FLINES THEN FLN = 1
               GOSUB 4900
            CASE NOT(NUM(RESPOND))
               LOCATE RESPOND IN SYMBOL SETTING HPTR ELSE
                  LOCATE RESPOND IN VVARS SETTING HPTR ELSE
                     ERRMSG = "Invalid entry, please re-enter"
                     GOSUB 91000; GOTO 510
                  END
               END
               READ SYM.HELP FROM SYMBOLS, RESPOND ELSE
                  ERRMSG = "Invalid entry, please re-enter"
                  GOSUB 91000; GOTO 510
               END
               DESC = SPACE(INT((21-LEN(SYM.HELP<1>))/2)) : SYM.HELP<1>
               SYM.HELP = DELETE(SYM.HELP,1,0,0)
               GOSUB 5000
510*
            CASE LINES < 1 OR RESPOND < OLD.START.LINE OR RESPOND > LAST.LINE
               ERRMSG = "*** Out of range ***"
               GOSUB 91000
            CASE 1
               LN = RESPOND
               GOSUB 1000
               GOSUB 1900
               GOSUB 7000
         END CASE
      WHILE MORE DO REPEAT
      GOTO 99999
*
*--- Prompt for aritmetic expression
1000  SLN = BEGIN.PAGE + LINE.SPACE * MOD(LN-1,PAGE.SIZE)
      P_X  = 0 ; P_Y = SLN ; P_VALUE = LN "R%2" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*
1010  X = 3; Y = SLN; TYP = 1; MAXL = 75; O.R = "O"
      HMSG = "Enter an arithmetic expression, for help enter (?) at the prompt line"
      IF ARITH.EXP<LN> # "" THEN
         DEFAULT = ARITH.EXP<LN>
      END
      CALL EDIT.SUB
      BEGIN CASE
         CASE (VALUE = "" OR VALUE = "END") AND RESPOND = "A"
            ARITH.EXP = DELETE(ARITH.EXP,LN,0,0)
            P_X  = 0 ; P_Y = SLN ; P_VALUE = LN "R%2" ; P_OPT = "CL"
            CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
            GOTO 1099
         CASE VALUE = ""
            ARITH.EXP = DELETE(ARITH.EXP,LN,0,0)
            LINES = DCOUNT(ARITH.EXP,AM)
            IF LN > 1 AND LN > LINES THEN LN = LN - 1
            IF LN < 1 THEN LN = 1
            OLD.START.LINE = 0
            GOSUB 1900
            GOTO 1099
         CASE VALUE = "END"
            P_X  = 0 ; P_Y = SLN ; P_VALUE = LN "R%2" ; P_OPT = "CL"
            P_X  := AM:3 ; P_Y := AM:SLN ; P_VALUE := AM:ARITH.EXP<LN> "L#75"
            CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
            GOTO 1099
      END CASE
      ARITH.EXP<LN> = VALUE
      LINES = DCOUNT(ARITH.EXP,AM)
1099  RETURN
*
*--- Help routine prompt
5000  ECD.NUM = 1; SCV.REC(ECD.NUM)<ECD.SCRN.NO> = DESC
      ECD.ACTION = 5; CALL SCRN.EDIT
      HLN = 1; HLINES = DCOUNT(SYM.HELP,AM)
      H.OLD.START.LINE = 0; GOSUB 2900
      * T25978 v
      LOOP
         ECD.NUM = 4; SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""
         ECD.ACTION = 4; CALL SCRN.EDIT
      UNTIL ECD.RET.VALUE = "END" OR ECD.RET.VALUE = "" DO
         BEGIN CASE
            CASE ECD.RET.VALUE = 'S'
               HLN = 1+INT((HLN-1)/PAGE.SIZE)*PAGE.SIZE+PAGE.SIZE
               IF HLN > HLINES THEN HLN = 1
               GOSUB 2900
            CASE ECD.RET.VALUE = 'SR'
               HLN = 1 + INT((HLN-1)/PAGE.SIZE) * PAGE.SIZE - PAGE.SIZE
               IF HLN < 1 THEN HLN = 1 
               GOSUB 2900
            CASE ECD.RET.VALUE = 'SB'
               HLN = HLINES
               GOSUB 2900
            CASE ECD.RET.VALUE = 'ST'
               HLN = 1
               GOSUB 2900
            CASE 1
               ERRMSG = 'Invalid Response'
               GOSUB 91000
         END CASE
      REPEAT
      * T25978 ^
      ECD.NUM = 1; SCV.REC(ECD.NUM)<ECD.SCRN.NO> = HD
      ECD.ACTION = 5; CALL SCRN.EDIT
      OLD.START.LINE = 0; GOSUB 1900
      RETURN
*
*--- Display scrolling expression lines
1900  START.LINE = 1 + INT((LN-1)/PAGE.SIZE)*PAGE.SIZE
      LAST.LINE = START.LINE + PAGE.SIZE - 1
      IF LAST.LINE > LINES THEN LAST.LINE = LINES
      IF START.LINE = OLD.START.LINE THEN GOTO 1990
      OLD.START.LINE = START.LINE
      CNT = 1
      FOR N = START.LINE TO LAST.LINE
         SLN = BEGIN.PAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
         P_X  = 0 ; P_Y = SLN ; P_VALUE = N "R%2" ; P_OPT = "CL"
         P_X  := AM:3 ; P_Y := AM:SLN ; P_VALUE := AM:ARITH.EXP<N> "L#75"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         CNT = CNT + 1
      NEXT N
      FOR N = CNT TO PAGE.SIZE
         SLN = BEGIN.PAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
         P_X  = 0 ; P_Y = SLN ; P_VALUE = N "R%2" ; P_OPT = "CL"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      NEXT N
1990  RETURN
*
*--- Display scrolling help lines
2900  START.LINE = 1 + INT((HLN-1)/PAGE.SIZE)*PAGE.SIZE
      LAST.LINE = START.LINE + PAGE.SIZE - 1
      IF LAST.LINE > HLINES THEN LAST.LINE = HLINES
      IF START.LINE = H.OLD.START.LINE THEN GOTO 2990
      H.OLD.START.LINE = START.LINE
      CNT = 1
      FOR N = START.LINE TO LAST.LINE
         SLN = BEGIN.PAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
         P_X  = 0 ; P_Y = SLN ; P_VALUE = N "R%2" ; P_OPT = "CL"
         P_X  := AM:3 ; P_Y := AM:SLN ; P_VALUE := AM:SYM.HELP<N> "L#75"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         CNT = CNT + 1
      NEXT N
      FOR N = CNT TO PAGE.SIZE
         SLN = BEGIN.PAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
         P_X  = 0 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      NEXT N
2990  RETURN
*
*--- Display scrolling data symbols
3900  START.LINE = 1 + INT((DLN-1)/PAGE.SIZE.1)*PAGE.SIZE.1
      LAST.LINE = START.LINE + PAGE.SIZE.1 - 1
      IF LAST.LINE > DLINES THEN LAST.LINE = DLINES
      IF START.LINE = D.OLD.START.LINE THEN GOTO 3990
      D.OLD.START.LINE = START.LINE
      CNT = 1
      FOR N = START.LINE TO LAST.LINE
         SLN = BEGIN.PAGE.1 + LINE.SPACE * MOD(N-1,PAGE.SIZE.1)
         DESC = SPACE(INT((24-LEN(D.DESC<N>))/2)) : D.DESC<N>
         P_X  = 2 ; P_Y = SLN ; P_VALUE = DESC "L#24" ; P_OPT = ""
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         CNT = CNT + 1
      NEXT N
      FOR N = CNT TO PAGE.SIZE.1
         SLN = BEGIN.PAGE.1 + LINE.SPACE * MOD(N-1,PAGE.SIZE.1)
         P_X  = 2 ; P_Y = SLN ; P_VALUE = SPACE(24) ; P_OPT = ""
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      NEXT N
3990  RETURN
*
*--- Display scrolling function symbols
4900  START.LINE = 1 + INT((FLN-1)/PAGE.SIZE.1)*PAGE.SIZE.1
      LAST.LINE = START.LINE + PAGE.SIZE.1 - 1
      IF LAST.LINE > FLINES THEN LAST.LINE = FLINES
      IF START.LINE = F.OLD.START.LINE THEN GOTO 4990
      F.OLD.START.LINE = START.LINE
      CNT = 1
      FOR N = START.LINE TO LAST.LINE
         SLN = BEGIN.PAGE.1 + LINE.SPACE * MOD(N-1,PAGE.SIZE.1)
         DESC = SPACE(INT((6-LEN(SYMBOL<N>))/2)) : SYMBOL<N>
         P_X  = 55 ; P_Y = SLN ; P_VALUE = DESC "L#6" ; P_OPT = ""
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         DESC = SPACE(INT((15-LEN(F.DESC<N>))/2)) : F.DESC<N>
         P_X  = 62 ; P_Y = SLN ; P_VALUE = DESC "L#15" ; P_OPT = ""
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         CNT = CNT + 1
      NEXT N
      FOR N = CNT TO PAGE.SIZE.1
         SLN = BEGIN.PAGE.1 + LINE.SPACE * MOD(N-1,PAGE.SIZE.1)
         P_X  = 55 ; P_Y = SLN ; P_VALUE = SPACE(22) ; P_OPT = ""
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      NEXT N
4990  RETURN
*
*--- Evaluate the arithmetic expression
7000  EQUATION = ARITH.EXP<1>
      FOR I = 2 TO LINES
         EQUATION = EQUATION : ARITH.EXP<I>
      NEXT I
      IF TRIM(EQUATION) = "" THEN
         EVAL.TO = "N O   A R I T H M E T I C   E X P R E S S I O N   T O   E V A L U A T E"
         GOSUB 7500; GOTO 7099
      END
      CALL STACK.SETUP(EQUATION,STACK,VARS,VLOC,ERRMSG)
      BEGIN CASE
         CASE ERRMSG # ""
            EVAL.TO = "I N V A L I D"; GOSUB 7500
            GOSUB 91000
            STACK = ""
         CASE VARS # "" AND VVARS = ""
            EVAL.TO = "I N V A L I D"; GOSUB 7500
            ERRMSG = "301AES Invalid variable in arithmetic expression (":VARS<1>:")"
            GOSUB 91000
            STACK = 0
            STACK = ""
         CASE VARS # ""
            ERRMSG = ""
            VCNT = DCOUNT(VARS,AM)
            FOR V = 1 TO VCNT WHILE ERRMSG = ""
               LOCATE VARS<V> IN VVARS SETTING L ELSE
                  ERRMSG = "310AES Invalid variable in arithmetic expression (":VARS<V>:")"
               END
            NEXT V
            IF ERRMSG = "" THEN
               EVAL.TO = "E V A L U A T E D"; GOSUB 7500
            END ELSE
               EVAL.TO = "I N V A L I D"; GOSUB 7500
               GOSUB 91000
               STACK = ""
            END
         CASE VARS = "" AND VVARS # ""
            EVAL.TO = "I N V A L I D"; GOSUB 7500
            ERRMSG = "Cannot locate any variables in the arithmetic expression"
            GOSUB 91000
            STACK = ""
         CASE 1
            EVAL.TO = "Evalutes to   " : STACK; GOSUB 7500
      END CASE
7099  RETURN
*
*--- Display arithmetic expression value
7500  EVAL.TO = SPACE(INT((78-LEN(EVAL.TO))/2)) : EVAL.TO
      ECD.NUM = 2; SCV.REC(ECD.NUM)<ECD.SCRN.NO> = EVAL.TO
      ECD.ACTION = 5; CALL SCRN.EDIT
      RETURN
*
*--- Error messages routine
91000 ERR.TYPE=1;CALL SYSCOM(MAT SYSCOM.REC);RETURN
* 91000 PRINT @(0,23) : ERRMSG : CL :
*       INPUT XX :
*       PRINT @(0,23) : CL :
*       RETURN
93000 ERR.TYPE=3;CALL SYSCOM(MAT SYSCOM.REC)
* 93000 PRINT @(0,23) : ERRMSG : CL :
*       INPUT XX :
*       PRINT @(0,23) : CL :
99999 *
      ECD.ACTION=99;CALL SCRN.EDIT
      RETURN
   END
