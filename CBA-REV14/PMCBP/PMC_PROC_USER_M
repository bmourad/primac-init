*COPY>CPYLIB>COM1
**********************************************
* REVISION    - [11.0]
* Copyright 1995 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - PMCBP
* PROGRAM     - PMC_PROC_USER_M
* BY          - BILAL MOURAD
* DATE        - 12/21/95
* DESCRIPTION - Maintains the "PMC_PROCESS" file that is used for ZOOM
*             - Sets up user security in the "_":USER.ID type records.
*
*T21177 diane 11/06/1996 * REV11 UPG
*T21177 diane 01/27/1997 * REV11 UPG USE SYSCOM
*T21177 diane 10/08/1998 * FIX MESSAGE
*T26126 adelgado 02/26/2002 * Implement the LOCKED clause for READU.
*T25978 cmykleb 05/14/2002 * Add (S,SR,ST,SB) scroll functions to pgm.
*T26625 cmykleb 05/30/2002 * Do not kick user off the system if the
*                            password entered is not correct.
*ENDDOC
**********************************************
*
*---- Data Structure Libraries
*
*COPY>PMC.CPYLIB>SECURITY
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>PMC_PROCESS
*COPY>CPYLIB>GEN.XREF.SUB
*COPY>CPYLIB>XREF.DATA
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
*
*--- SETUP SYSTEM ERROR MESSAGES
*
   SYS.TYPE = 1
   CALL SYSCOM(MAT SYSCOM.REC)
*
*---- Open Files
*
   OPEN "","PMC.SCREENS" TO M.SCREENS ELSE
      ERRMSG = "PMC.SCREENS file is missing"; GOTO 93000
   END
   OPEN "","PMC_PROCESS" TO PMC_PROCESS ELSE
      ERRMSG = "PMC_PROCESS file is missing"; GOTO 93000
   END
   OPEN "","SECURITY" TO SECURITY ELSE
      ERRMSG = "SECURITY file is missing"; GOTO 93000
   END
   OPEN "","COMPANY" TO COMPANY ELSE
      ERRMSG = "COMPANY file is missing";GOTO 93000
   END
   OPEN "","XREF.DATA" TO XREF.DATA ELSE
      ERRMSG = "XREF.DATA file is missing"; GOTO 93000
   END
   OPEN "","PREFIX" TO PREFIX ELSE
      ERRMSG = "PREFIX file is missing"; GOTO 93000
   END
   OPEN "","CONTROL" TO CONTROL ELSE
      ERRMSG = "CONTROL file is missing"; GOTO 93000
   END
*
*---- Get CONO
*
   MAT COMP.REC = ""
   CONO = ""
   CALL GET.CONO(CONO,MAT COMP.REC)
   IF CONO = "END" THEN GOTO 99999
*
*----  Get Password
*
   MAT SCV.REC = ""
   KW.PW = "VERCOM"
   READ CURR.PW FROM CONTROL, "SECURITY.PW" ELSE
      NEW.PW = "PW"
      CALL ENCODE.SUB("E",KW.PW,NEW.PW,CURR.PW)
   END
   CALL ENCODE.SUB("D",KW.PW,CURR.PW,SECURITY.PW)
*
*---- Initialization
*
   MAT EDIT.COM.DRIVER = ""
   MAT SCV.REC = ""
   MAT PPS.REC = ""
   PROC.LIST = ''
   SAVE.PROC.LIST = ''
   MODE = ""; OLD.LINES = 0; LINE.SPACE = 1
   PAGE.SIZE = 14; BEGIN.PAGE = 6; OLD.START.LINE = 0
*
*---- Paint Screen
*
   ECD.SCRN.CNT = 1
   ECD.SCRN.NAME = "PMC_PROC_USER_M"
   ECD.SCRN.NAME<2> = "SEC.PASSWORD"
   ECD.ACTION = 1; CALL SCRN.EDIT
   ECD.SCRN.NO = 1; ECD.ACTION = 2; CALL SCRN.EDIT
*
*---- Enter Password
*
10*
* ECD.NUM = 12
* ECD.ACTION=4;CALL SCRN.EDIT
   ECD.SCRN.NO = 2
   CALL SEC.PASSWORD(ERROR)
   ECD.SCRN.NO = 1 ; ECD.ACTION = 2 ; CALL SCRN.EDIT
   ECD.RET.VALUE = ERROR
   IF ECD.RET.VALUE = "END" THEN
      ECD.ACTION = 99 ; CALL SCRN.EDIT
      GOTO 99999
   END
   CURR.PW = FIELD(ECD.RET.VALUE,"/",1)
   NEW.PW = FIELD(ECD.RET.VALUE,"/",2)
   BEGIN CASE
      CASE CURR.PW # SECURITY.PW
         ERRMSG = "** Illegal Password **"
*T26625 v
*        ECD.ACTION = 99 ; CALL SCRN.EDIT
*        GOTO 93000
         GOSUB 91000
         GOTO 10
*T26625 ^
      CASE CURR.PW = "PW" AND (NEW.PW = "" OR NEW.PW = CURR.PW)
         ERRMSG = "** Please change the current password **"
         GOSUB 91000; GOTO 10
   END CASE
*
*---- Get user id
*
20*
   MAT PPS.REC = ""
   MAT SCV.REC = ""
   PROC.LIST = ""; SAVE.PROC.LIST = "" MODE = ""
   LINES = 0; LN = 1; OLD.LINES = 0; OLD.START.LINE = 0
   ECD.NUM = 1; ECD.ACTION = 4; CALL SCRN.EDIT
   BEGIN CASE
      CASE ECD.RET.VALUE = "END"
         GOTO 99999
      CASE ECD.RET.VALUE = "" OR ECD.RET.VALUE = "???"
         MAT GEN.XREF.REC = ""
         GXR.NAME = "PROC_USER_XREF"
         GXR.FILE = SECURITY
         GXR.CO = CONO
         GXR.VALUE1 = "!"
         CALL GEN.XREF.SUB(MAT GEN.XREF.REC,PREFIX,XREF.DATA)
         ECD.SCRN.NO = 1; ECD.ACTION = 2; CALL SCRN.EDIT
         IF GXR.ID = "" THEN GOTO 20
         ECD.RET.VALUE = GXR.ID
         SCV.REC(1)<ECD.SCRN.NO> = ECD.RET.VALUE
         ECD.NUM = 1; ECD.ACTION = 5; CALL SCRN.EDIT
   END CASE
   USER.ID = CONO:ECD.RET.VALUE
   MATREAD SEC.REC FROM SECURITY, USER.ID ELSE
      ERRMSG = "Invalid User Id"; GOSUB 91000
      SCV.REC(1)<ECD.SCRN.NO> = ""; GOTO 20
   END
*
*---- Get user's processes
*
   SEC.ID = "_":USER.ID
  * T26126 v
   READU PROC.LIST FROM SECURITY, SEC.ID LOCKED
      ERRMSG = 'SECURITY record is locked by user - ':GETUSERNAME(STATUS())
      GOSUB 91000;GOTO 20 
   END THEN
  * T26126 ^
      SAVE.PROC.LIST = PROC.LIST
      LINES = DCOUNT(PROC.LIST,AM)
      FOR I = 1 TO LINES 
         SCV.REC(2)<ECD.SCRN.NO,I> = I "R%3"
         SCV.REC(3)<ECD.SCRN.NO,I> = PROC.LIST<I>
         MATREAD PPS.REC FROM PMC_PROCESS, PROC.LIST<I> THEN
            SCV.REC(4)<ECD.SCRN.NO,I> = PPS.DESC
         END ELSE
            SCV.REC(4)<ECD.SCRN.NO,LN> = 'UNKNOWN'
         END
      NEXT I
      GOSUB 1500; GOSUB 1750
   END ELSE
      GOSUB 1100
   END
*
*---- Main Program
*
   MORE = 1
   LOOP
      ECD.NUM = 15; ECD.ACTION = 4; CALL SCRN.EDIT
      OPTION = ECD.RET.VALUE
      BEGIN CASE
         CASE OPTION[1,1] = "S" OR OPTION = ""
            GOSUB 1400
         CASE OPTION = "A"
            GOSUB 1100
         CASE OPTION = "D" AND LINES > 0
            GOSUB 1300
            IF LNO # 0 THEN
               LN = LNO
               DEL PROC.LIST<LN>
               DEL SCV.REC(2)<ECD.SCRN.NO,LINES>
               DEL SCV.REC(3)<ECD.SCRN.NO,LN>
               DEL SCV.REC(4)<ECD.SCRN.NO,LN>
               LINES = LINES - 1; LN = OLD.START.LINE
               IF LN > LINES THEN LN = LINES
               OLD.START.LINE = 0; GOSUB 1500; GOSUB 1750
            END
         CASE OPTION = "E" OR OPTION = "END"
            RELEASE SECURITY, SEC.ID
            MORE = 0
         CASE OPTION = "F"
            IF PROC.LIST = "" THEN
               READ XX FROM SECURITY, SEC.ID THEN
                  DELETE SECURITY, SEC.ID
               END ELSE
                  RELEASE SECURITY, SEC.ID
               END
            END ELSE
               WRITE PROC.LIST ON SECURITY, SEC.ID
               IF SAVE.PROC.LIST # PROC.LIST THEN
                  READU PROC.LIST FROM SECURITY, SEC.ID THEN
                     STMT = 'FORM.LIST SECURITY ':SEC.ID
                     UDTEXECUTE STMT CAPTURING RESPONSE RETURNING LISTVAR
                     STMT = 'SELECT PMC_PROCESS BY PPS_DESC'
                     UDTEXECUTE STMT CAPTURING RESPONSE RETURNING LISTVAR
                     READSELECT PROC.LIST THEN
                     WRITE PROC.LIST ON SECURITY, SEC.ID
                  END
               END
            END
         END
         MORE = 0
      CASE 1
         ERRMSG = "*** INVALID ENTRY!! Please re-ENTER. ***"
         GOSUB 91000
   END CASE
   WHILE MORE DO REPEAT
   MAT SCV.REC = ""
   ECD.ACTION = 6; CALL SCRN.EDIT
   GOTO 20
*
*---- Add mode
*
1100*
   MODE = "A"
   LOOP
      LN = LINES + 1
      OLD.LINES = LINES
      GOSUB 1500
      GOSUB 1200
   WHILE LINES > OLD.LINES DO 
      GOSUB 1700
   REPEAT
   LN = LINES
   OLD.START.LINE = 0
   GOSUB 1500; GOSUB 1750
   RETURN
*
*---- Line entries
*
1200*
   SSLN = BEGIN.PAGE + LINE.SPACE * MOD(LN - 1,PAGE.SIZE)
   ECD.NUM = 2; SCV.REC(ECD.NUM)<ECD.SCRN.NO,LN> = LN "R%3"
   ECD.SUB.NUM = LN; ECD.Y = SSLN
   ECD.ACTION = 5; CALL SCRN.EDIT
*
*
1210*
   ECD.NUM = 3
   SSLN = BEGIN.PAGE + LINE.SPACE * MOD(LN - 1,PAGE.SIZE)
   ECD.SUB.NUM = LN; ECD.Y = SSLN; ECD.ACTION = 4; CALL SCRN.EDIT
   BEGIN CASE
      CASE ECD.RET.VALUE = "END"
         BEGIN CASE
            CASE MODE = "A"
               SCV.REC(2) = DELETE(SCV.REC(2),ECD.SCRN.NO,LN,0)
*        CRT @(0,SSLN):CL:
               P_X  = 0 ; P_Y = SSLN ; P_VALUE = "" ; P_OPT = "CL"
               CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
            CASE MODE = "B"
               DEL ID.LIST<LN>
               DEL SCV.REC(1)<ECD.SCRN.NO,LN>
               DEL SCV.REC(2)<ECD.SCRN.NO,LINES>
               LINES = DCOUNT(PROC.LIST,AM)
            CASE 1
               N = LN; GOSUB 1600
         END CASE
         GOTO 1299
      CASE ECD.RET.VALUE = "???"
         MAT GEN.XREF.REC = ""
         GXR.NAME = "PMC_PROC_XREF"
         GXR.FILE = PMC_PROCESS
         GXR.VALUE1 = "Y"
         CALL GEN.XREF.SUB(MAT GEN.XREF.REC,PREFIX,XREF.DATA)
         ECD.ACTION = 2; CALL SCRN.EDIT
*         LINES = LINES + 1; ECD.ACTION = 5; CALL SCRN.EDIT
         LINES = LINES + 1; OLD.START.LINE = 0; GOSUB 1500; GOSUB 1750
         IF GXR.ID = "" THEN
            SCV.REC(3)<ECD.SCRN.NO,LN> = ""
            LINES = LINES - 1; GOTO 1210
         END ELSE
            ECD.RET.VALUE = GXR.ID
            SCV.REC(3)<ECD.SCRN.NO,LN> = GXR.ID
            SSLN = BEGIN.PAGE + LINE.SPACE * MOD(LN - 1,PAGE.SIZE)
            ECD.NUM = 3; ECD.SUB.NUM = LN; ECD.Y = SSLN
            ECD.ACTION = 5; CALL SCRN.EDIT
         END
   END CASE
   LOCATE ECD.RET.VALUE IN PROC.LIST,1 SETTING FND THEN
      ERRMSG = "Process ":ECD.RET.VALUE:" is already used"
      GOSUB 91000; SCV.REC(3)<ECD.SCRN.NO,LN> = ""; LINES = LINES - 1; GOTO 1210
   END
   MATREAD PPS.REC FROM PMC_PROCESS, ECD.RET.VALUE THEN
      IF PPS.SEC = "N" THEN
         SCV.REC(3)<ECD.SCRN.NO,LN> = ""
*DT21177         ERRMSG = "Process ":ECD.RET.VALUE:" is not secure."
         ERRMSG = "Process ":ECD.RET.VALUE:" is not a zoom process."
         GOSUB 91000; LINES = LINES - 1; GOTO 1210
      END ELSE
         SCV.REC(4)<ECD.SCRN.NO,LN> = PPS.DESC
         SSLN = BEGIN.PAGE + LINE.SPACE * MOD(LN - 1,PAGE.SIZE)
         ECD.NUM = 4; ECD.SUB.NUM = LN; ECD.Y = SSLN
         ECD.ACTION = 5; CALL SCRN.EDIT
      END
   END ELSE
      SCV.REC(3)<ECD.SCRN.NO,LN> = ""
      ERRMSG = "Process ":ECD.RET.VALUE:" is missing"
      GOSUB 91000; GOTO 1210
   END
   PROC.LIST<LN> = ECD.RET.VALUE
   LINES = DCOUNT(PROC.LIST,AM)
1299*
   RETURN
*
*---- Check Line Number
*
1300*
   OLD.START.LINE = 0; GOSUB 1500
   ECD.NUM = 16; ECD.ACTION = 4; CALL SCRN.EDIT
   BEGIN CASE
      CASE ECD.RET.VALUE = "" OR ECD.RET.VALUE = "END"
         LNO = 0
      CASE NOT(NUM(ECD.RET.VALUE))
         ERRMSG = "** Invalid Entry !! **"
         GOSUB 91000; GOTO 1300
      CASE ECD.RET.VALUE >= START.LINE AND ECD.RET.VALUE <= LAST.LINE
         LNO = ECD.RET.VALUE
      CASE 1
         ERRMSG = "** OUT OF RANGE **"
         GOSUB 91000; GOTO 1300
   END CASE
   RETURN
*
*---- Find page of scroll
*
1400*
   OPT2 = OPTION[2,1]
   BEGIN CASE
      CASE OPT2 = "" OR OPT2 = "F"
         LN = LN + PAGE.SIZE
         IF LN > LINES THEN LN = 1
      CASE OPT2 = "R"
         LN = LN - PAGE.SIZE
         IF LN < 1 THEN LN = 1
      CASE OPT2 = "T"
         LN = 1
      CASE OPT2 = "B"
         LN = LINES
         IF LN < 1 THEN LN = 1
      CASE NUM(OPT2)
         LN.NO = OPTION[2,99]
         IF LN.NO < 1 OR LN.NO > LINES THEN
            ERRMSG = "*** INVALID SELECTION ***"
            GOSUB 91000
         END ELSE
            LN = LN.NO
         END
   END CASE
*
*---- Printing the page 
*
1500*
   START.LINE = 1 + INT((LN - 1)/PAGE.SIZE) * PAGE.SIZE
   LAST.LINE = START.LINE + PAGE.SIZE - 1
   IF LAST.LINE > LINES THEN LAST.LINE = LINES
   IF START.LINE = OLD.START.LINE THEN GOTO 1599 
   OLD.START.LINE = START.LINE; CNT = 1
   ECD.NUM = 10
   SCV.REC(ECD.NUM)<ECD.SCRN.NO> = INT(LAST.LINE/PAGE.SIZE+.99) "R%2"
   ECD.ACTION = 5; CALL SCRN.EDIT
   FOR N = START.LINE TO LAST.LINE
      SSLN = BEGIN.PAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
      GOSUB 1600
      CNT = CNT + 1
   NEXT N
   GOSUB 1800
1599*
   RETURN
*
*---- Print lines in page
*
1600*
   ECD.NUM = 2; ECD.SUB.NUM = N; ECD.Y = SSLN; ECD.ACTION = 5; CALL SCRN.EDIT
   ECD.NUM = 3; ECD.SUB.NUM = N; ECD.Y = SSLN; ECD.ACTION = 5; CALL SCRN.EDIT
   ECD.NUM = 4; ECD.SUB.NUM = N; ECD.Y = SSLN; ECD.ACTION = 5; CALL SCRN.EDIT
   RETURN
*
*---- Print page.no & page cnt
*
1700*
   ECD.NUM = 10
   SCV.REC(ECD.NUM)<ECD.SCRN.NO> = INT(LN / PAGE.SIZE + .99) "R%2"
   ECD.ACTION = 5; CALL SCRN.EDIT
1750*
   ECD.NUM = 11
   SCV.REC(ECD.NUM)<ECD.SCRN.NO> = INT(LINES/PAGE.SIZE + .99) "R%2"
   ECD.ACTION = 5; CALL SCRN.EDIT
   RETURN
*
*---- Fill rest of page area
*
1800*
   FOR N = CNT TO PAGE.SIZE
      SSLN = BEGIN.PAGE + LINE.SPACE * MOD(N - 1, PAGE.SIZE)
*  CRT @(0,SSLN):CL:
      P_X  = 0 ; P_Y = SSLN ; P_VALUE = "" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
   NEXT N
   RETURN
*
*--- CALLS FOR SYSCOM
*
91000 *
   ERR.TYPE = 1;CALL SYSCOM(MAT SYSCOM.REC); RETURN
92000 *
   ERR.TYPE = 2;CALL SYSCOM(MAT SYSCOM.REC); RETURN
93000 *
   ERR.TYPE = 3;CALL SYSCOM(MAT SYSCOM.REC)
*
99999*
END
