*COPY>CPYLIB>COM1
**********************************************
* REVISION    - [11.0]
* Copyright 1995 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - PMCBP
* PROGRAM     - PMC_PROC_M
* BY          - BILAL MOURAD
* DATE        - 12/21/95
* DESCRIPTION - Maintains the "PMC_PROCESS" file that is used for ZOOM
*             - Displays the PMC_PROCESS records for Selection
*             - to PERFORM, MODIFY, DELETE or ADD
*
*T21177 diane 11/06/1996 * REV11 UPG
*T21177 diane 12/05/1996 * Remove password prompting
*T26090 wyamout 03/13/2002 * Print/View/Email; Add new fields
*ENDDOC
**********************************************
*
*---- Data Structure Libraries
*
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>PMC_PROCESS
*COPY>PMC.CPYLIB>PMC_PROCESS_XREF
*COPY>PMC.CPYLIB>SECURITY
*COPY>CPYLIB>PORT.CONTROL
*COPY>JIS.CPYLIB>SYS_FILES
*COPY>CPYLIB>GEN.XREF.SUB
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
*
*--- SETUP SYSTEM ERROR MESSAGES
*
   SYS.TYPE = 1
   CALL SYSCOM(MAT SYSCOM.REC)
*
   PORT.NO = "TTY"
   CALL SYSVARS.SUB(PORT.NO)
*
*---- Open Files
*
   OPEN "","PMC.SCREENS" TO M.SCREENS ELSE
      ERRMSG = "PMC.SCREENS file is missing"; GOTO 93000
   END
   OPEN "","PMC_PROCESS" TO PMC_PROCESS ELSE
      ERRMSG = "PMC_PROCESS file is missing"; GOTO 93000
   END
   OPEN "","PMC_PROCESS_XREF" TO PMC_PROCESS_XREF ELSE
      ERRMSG = "PMC_PROCESS_XREF file is missing"; GOTO 93000
   END
   OPEN "","SYS_FILES" TO SYS_FILES ELSE
      ERRMSG = "SYS_FILES file is missing"; GOTO 93000
   END
   OPEN "","XREF.DATA" TO XREF.DATA ELSE
      ERRMSG = "XREF.DATA file is missing"; GOTO 93000
   END
   OPEN "","PREFIX" TO PREFIX ELSE
      ERRMSG = "PREFIX file is missing"; GOTO 93000
   END
   OPEN "","COMPANY" TO COMPANY ELSE
      ERRMSG = "COMPANY file is missing"; GOTO 93000
   END
   OPEN "","CONTROL" TO CONTROL ELSE
      ERRMSG = "CONTROL file is missing"; GOTO 93000
   END
   OPEN "","SECURITY" TO SECURITY ELSE
      ERRMSG = "SECURITY file is missing"; GOTO 93000
   END
   OPEN "","VOC" TO VOC ELSE
      ERRMSG = "VOC file is missing"; GOTO 93000
   END
*
   CONO=''
   CALL GET.CONO(CONO,MAT COMP.REC)
   IF CONO="END" THEN GOTO 99999
*
*----  Get Password
*
   MAT SCV.REC = ""
**   KW.PW = "VERCOM"
**   READ CURR.PW FROM CONTROL, "SECURITY.PW" ELSE
**      NEW.PW = "PW"
**      CALL ENCODE.SUB("E",KW.PW,NEW.PW,CURR.PW)
**   END
**   CALL ENCODE.SUB("D",KW.PW,CURR.PW,SECURITY.PW)
*
*---- Initialization
*
   MAT EDIT.COM.DRIVER = ""
   MAT SCV.REC = ""
   MAT PPS.REC = ""
   MODE = ""; LINES = 0; ID.LIST = ""; STMT = ""
   OLD.LINES = 0; LINE.SPACE = 1; LN = 1
   PAGE.SIZE = 15; BEGIN.PAGE = 4; OLD.START.LINE = 0
*
*---- Paint Screen
*
   ECD.SCRN.CNT = 2
**   ECD.SCRN.CNT = 3
   ECD.SCRN.NAME = "PMC_PROC_M"
   ECD.SCRN.NAME<2> = "PMC_PROC_S"
**   ECD.SCRN.NAME<3> = "SEC.PASSWORD"
   ECD.ACTION = 1; CALL SCRN.EDIT
   ECD.SCRN.NO = 1; ECD.ACTION = 2; CALL SCRN.EDIT
*
*---- Enter Password
*
10*
**   ECD.SCRN.NO = 3
**   CALL SEC.PASSWORD(ERROR)
* TEST EDIT.SUB CALL SEC.PASSWORD.SUB(ERROR)
**   ECD.SCRN.NO = 1 ; ECD.ACTION = 2 ; CALL SCRN.EDIT
**   ECD.RET.VALUE = ERROR
**   IF ECD.RET.VALUE = "END" THEN GOTO 99999
**   CURR.PW = FIELD(ECD.RET.VALUE,"/",1)
**   NEW.PW = FIELD(ECD.RET.VALUE,"/",2)
**   BEGIN CASE
**      CASE CURR.PW # SECURITY.PW
**         ERRMSG = "** Illegal Password **"
**         GOTO 93000
**      CASE CURR.PW = "PW" AND (NEW.PW = "" OR NEW.PW = CURR.PW)
**         ERRMSG = "** Please change the current password **"
**         GOSUB 91000; GOTO 10
**   END CASE
*
*---- Get ID LIST
*
* SELECT PMC_PROCESS
* P = 1
* DN = 1
* LOOP
*   READNEXT ID ELSE DN = 0
* WHILE DN DO
*   IF ID[1,1] # "_" THEN
*     ID.LIST<P> = ID
*     P = P + 1
*   END
* REPEAT
****
20*
   RESPONSE = ''
   LISTVAR = ''
   STMT = 'SELECT PMC_PROCESS WITH @ID UNLIKE _... BY PPS_DESC'
   P_X = 3 ; P_Y = 23 ; P_VALUE = "SELECTING PROCESSES" ; P_OPT = "CL"
   CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
   UDTEXECUTE STMT CAPTURING RESPONSE RETURNING LISTVAR
   READSELECT ID.LIST THEN
****
   LINES = DCOUNT(ID.LIST,AM)
*
*---- Print ID LIST
*
   FOR N = 1 TO LINES
      SCV.REC(2)<ECD.SCRN.NO,N> = N "R%3"
      SCV.REC(1)<ECD.SCRN.NO,N> = ID.LIST<N>
      MATREAD PPS.REC FROM PMC_PROCESS, ID.LIST<N> THEN
         SCV.REC(3)<ECD.SCRN.NO,N> = PPS.DESC
*T26090
         SCV.REC(4)<ECD.SCRN.NO,N> = PPS.TYPE
         SCV.REC(5)<ECD.SCRN.NO,N> = PPS.DIR
         SCV.REC(6)<ECD.SCRN.NO,N> = PPS.PREPROCESS
         SCV.REC(7)<ECD.SCRN.NO,N> = PPS.USERINTERFACE
*T26090
      END
   NEXT N
   ECD.ACTION = 3; CALL SCRN.EDIT
   GOSUB 1700
   P_X = 3 ; P_Y = 23 ; P_VALUE = "" ; P_OPT = "CL"
   CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*
*---- Main Program
*
   MORE = 1
   LOOP
      ECD.NUM = 15; ECD.ACTION = 4; CALL SCRN.EDIT
      OPTION = ECD.RET.VALUE
1001*
      BEGIN CASE
         CASE OPTION = "E" OR OPTION = "END"
            MORE = 0
         CASE OPTION = "P" AND LINES > 0
            GOSUB 1300
            IF LNO # 0 THEN
               GOSUB 4000
               IF NOT(VAL.ERR) THEN
*                     IF PPS.TYPE # "B" THEN
*                        ERRMSG = "Cannot run process ":ID.LIST<LNO>
*                        GOSUB 91000; GOTO 1005
*                     END
*                  END
*                  PERFORM PPS.PROCESS
*
                  GOSUB 5000
*
                  ECD.ACTION = 2; CALL SCRN.EDIT
                  OLD.START.LINE = 0; GOSUB 1500; GOSUB 1750
               END
            END
1005*
         CASE OPTION[1,1] = "S" OR OPTION = ""
            GOSUB 1400
         CASE OPTION = "A"
            GOSUB 1100
         CASE OPTION = "D" AND LINES > 0
            GOSUB 1300
            IF LNO # 0 THEN
               ECD.NUM = 17; ECD.ACTION = 4; CALL SCRN.EDIT
               IF ECD.RET.VALUE = "N" THEN GOTO 1010
               LN = LNO
               MATREAD PPS.REC FROM PMC_PROCESS, ID.LIST<LN> THEN
                  DELETE PMC_PROCESS, ID.LIST<LN>
               END
               MATREAD PPSX.REC FROM PMC_PROCESS_XREF, PPS.VOC THEN
                  DELETE PMC_PROCESS_XREF, PPS.VOC
                  ERRMSG = 'NOTE: UPDATE MENUS ':CHANGE(PPS.MENU,VM,", ")
                  GOSUB 91000
               END
               MAT PPS.REC = ""
               ID.LIST = DELETE(ID.LIST,LN,0,0)
               DEL SCV.REC(1)<ECD.SCRN.NO,LN>
               DEL SCV.REC(2)<ECD.SCRN.NO,LINES>
               DEL SCV.REC(3)<ECD.SCRN.NO,LN>
*T26090
               DEL SCV.REC(4)<ECD.SCRN.NO,LN>
               DEL SCV.REC(5)<ECD.SCRN.NO,LN>
               DEL SCV.REC(6)<ECD.SCRN.NO,LN>
               DEL SCV.REC(7)<ECD.SCRN.NO,LN>
*T26090
               LINES = LINES - 1; LN = OLD.START.LINE
               IF LN > LINES THEN LN = LINES
               OLD.START.LINE = 0; GOSUB 1500; GOSUB 1750
            END
1010*
         CASE NOT(NUM(OPTION))
            LOCATE OPTION IN ID.LIST,1 SETTING LN.NO THEN
               OPTION = LN.NO; GOTO 1001
            END
         CASE NUM(OPTION) AND LINES = 0
            ERRMSG = "No processes to be updated."
            GOSUB 91000
         CASE OPTION > 0 AND OPTION =< LINES AND LINES > 0
            ACTION = "M"
            ECD.SCRN.NO = 2
            CALL PMC_PROC_S(ID.LIST<OPTION>,"M")
            ECD.SCRN.NO = 1; ECD.ACTION = 2; CALL SCRN.EDIT
            LN = OPTION
            MATREAD PPS.REC FROM PMC_PROCESS, ID.LIST<OPTION> THEN
               IF SCV.REC(3)<ECD.SCRN.NO,LN> # PPS.DESC THEN
                  SCV.REC(3)<ECD.SCRN.NO,LN> = PPS.DESC
               END
*T26090
               IF SCV.REC(4)<ECD.SCRN.NO,LN> # PPS.TYPE THEN
                  SCV.REC(4)<ECD.SCRN.NO,LN> = PPS.TYPE
               END
               IF SCV.REC(5)<ECD.SCRN.NO,LN> # PPS.DIR THEN
                  SCV.REC(5)<ECD.SCRN.NO,LN> = PPS.DIR
               END
               IF SCV.REC(6)<ECD.SCRN.NO,LN> # PPS.PREPROCESS THEN
                  SCV.REC(6)<ECD.SCRN.NO,LN> = PPS.PREPROCESS
               END
               IF SCV.REC(7)<ECD.SCRN.NO,LN> # PPS.USERINTERFACE THEN
                  SCV.REC(7)<ECD.SCRN.NO,LN> = PPS.USERINTERFACE
               END
*T26090
            END
            OLD.START.LINE = 0; GOSUB 1500; GOSUB 1750
         CASE 1
            ERRMSG = "*** INVALID ENTRY!! Please re-ENTER. ***"
            GOSUB 91000
      END CASE
   WHILE MORE DO REPEAT
   GOTO 99990
*
*---- Add mode
*
1100*
   MODE = "A"
   LOOP
      LN = LINES + 1
      OLD.LINES = LINES
      GOSUB 1500
      GOSUB 1200
   WHILE LINES > OLD.LINES DO 
      GOSUB 1700
   REPEAT
   LN = LINES
   OLD.START.LINE = 0
   GOSUB 1500; GOSUB 1750
   RETURN
*
*---- Line entries
*
1200*
   SSLN = BEGIN.PAGE + LINE.SPACE * MOD(LN - 1,PAGE.SIZE)
   ECD.NUM = 2; SCV.REC(ECD.NUM)<ECD.SCRN.NO,LN> = LN "R%3"
   ECD.SUB.NUM = LN; ECD.Y = SSLN
   ECD.ACTION = 5; CALL SCRN.EDIT
*
   SAVE.SSLN = SSLN
   SAVE.LN = LN
*
1210*
   ECD.NUM = 1
   ECD.SUB.NUM = LN; ECD.Y = SSLN; ECD.ACTION = 4; CALL SCRN.EDIT
   BEGIN CASE
      CASE ECD.RET.VALUE = "END"
         BEGIN CASE
            CASE MODE = "A"
               SCV.REC(2) = DELETE(SCV.REC(2),ECD.SCRN.NO,LN,0)
               CRT @(0,SSLN):CL:
            CASE MODE = "B"
               DEL ID.LIST<LN>
               DEL SCV.REC(1)<ECD.SCRN.NO,LN>
               DEL SCV.REC(2)<ECD.SCRN.NO,LINES>
               DEL SCV.REC(3)<ECD.SCRN.NO,LN>
*T26090
               DEL SCV.REC(4)<ECD.SCRN.NO,LN>
               DEL SCV.REC(5)<ECD.SCRN.NO,LN>
               DEL SCV.REC(6)<ECD.SCRN.NO,LN>
               DEL SCV.REC(7)<ECD.SCRN.NO,LN>
*T26090
               LINES = DCOUNT(ID.LIST,AM)
            CASE 1
               N = LN; GOSUB 1600
         END CASE
         GOTO 1299
      CASE ECD.RET.VALUE = "_"
         ERRMSG = "'_' is reserved character.It cannot be used as 1st char"
         GOSUB 91000; GOTO 1210
   END CASE
   READ XX FROM PMC_PROCESS, ECD.RET.VALUE THEN
      SCV.REC(1)<ECD.SCRN.NO,LN> = ""
      ERRMSG = "Process ":ECD.RET.VALUE:" has been used previously."
      GOSUB 91000; GOTO 1210
   END
   ID.LIST<LN> = ECD.RET.VALUE
   LINES = DCOUNT(ID.LIST,AM)
   ACTION = "M"
   ECD.SCRN.NO = 2
   CALL PMC_PROC_S(ID.LIST<LN>,"M")
   ECD.SCRN.NO = 1; ECD.ACTION = 2; CALL SCRN.EDIT
   OLD.START.LINE = 0; GOSUB 1500; GOSUB 1750
   MATREAD PPS.REC FROM PMC_PROCESS, ID.LIST<LN> THEN
      SCV.REC(3)<ECD.SCRN.NO,LN> = PPS.DESC
      ECD.NUM = 3; ECD.Y = SAVE.SSLN; ECD.SUB.NUM = SAVE.LN; ECD.ACTION = 5; CALL SCRN.EDIT
*T26090
      SCV.REC(4)<ECD.SCRN.NO,LN> = PPS.TYPE
      ECD.NUM = 4; ECD.Y = SAVE.SSLN; ECD.SUB.NUM = SAVE.LN; ECD.ACTION = 5; CALL SCRN.EDIT
      SCV.REC(5)<ECD.SCRN.NO,LN> = PPS.DIR
      ECD.NUM = 5; ECD.Y = SAVE.SSLN; ECD.SUB.NUM = SAVE.LN; ECD.ACTION = 5; CALL SCRN.EDIT
      SCV.REC(6)<ECD.SCRN.NO,LN> = PPS.PREPROCESS
      ECD.NUM = 6; ECD.Y = SAVE.SSLN; ECD.SUB.NUM = SAVE.LN; ECD.ACTION = 5; CALL SCRN.EDIT
      SCV.REC(7)<ECD.SCRN.NO,LN> = PPS.USERINTERFACE
      ECD.NUM = 7; ECD.Y = SAVE.SSLN; ECD.SUB.NUM = SAVE.LN; ECD.ACTION = 5; CALL SCRN.EDIT
*T26090
   END ELSE
      SCV.REC(1)<ECD.SCRN.NO,LN> = ""
      LINES = LINES - 1; ID.LIST<LN> = ""
      GOTO 1200
   END
1299*
   RETURN
*
*---- Check Line Number
*
1300*
   OLD.START.LINE = 0; GOSUB 1500
   ECD.NUM = 16; ECD.ACTION = 4; CALL SCRN.EDIT
   BEGIN CASE
      CASE ECD.RET.VALUE = "" OR ECD.RET.VALUE = "END"
         LNO = 0
      CASE NOT(NUM(ECD.RET.VALUE))
         ERRMSG = "** Invalid Entry !! **"
         GOSUB 91000; GOTO 1300
      CASE ECD.RET.VALUE >= START.LINE AND ECD.RET.VALUE <= LAST.LINE
         LNO = ECD.RET.VALUE
      CASE 1
         ERRMSG = "** OUT OF RANGE **"
         GOSUB 91000; GOTO 1300
   END CASE
   RETURN
*
*---- Find page of scroll
*
1400*
   OLD.START.LINE = 0
   OPT2 = OPTION[2,1]
   BEGIN CASE
      CASE OPT2 = "" OR OPT2 = "F"
         LN = LN + PAGE.SIZE
         IF LN > LINES THEN LN = 1
      CASE OPT2 = "R"
         LN = LN - PAGE.SIZE
         IF LN < 1 THEN LN = 1
      CASE OPT2 = "T"
         LN = 1
      CASE OPT2 = "B"
         LN = LINES
         IF LN < 1 THEN LN = 1
      CASE NUM(OPT2)
         LN.NO = OPTION[2,99]
         IF LN.NO < 1 OR LN.NO > LINES THEN
            ERRMSG = "*** INVALID SELECTION ***"
            GOSUB 91000
         END ELSE
            LN = LN.NO
         END
   END CASE
*
*---- Printing the page 
*
1500*
   START.LINE = 1 + INT((LN - 1)/PAGE.SIZE) * PAGE.SIZE
   LAST.LINE = START.LINE + PAGE.SIZE - 1
   IF LAST.LINE > LINES THEN LAST.LINE = LINES
   IF START.LINE = OLD.START.LINE THEN GOTO 1599 
   OLD.START.LINE = START.LINE; CNT = 1
   ECD.NUM = 10
   SCV.REC(ECD.NUM)<ECD.SCRN.NO> = INT(LAST.LINE/PAGE.SIZE+.99) "R%2"
   ECD.ACTION = 5; CALL SCRN.EDIT
   FOR N = START.LINE TO LAST.LINE
      SSLN = BEGIN.PAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
      GOSUB 1600
      CNT = CNT + 1
   NEXT N
   GOSUB 1800
1599*
   RETURN
*
*---- Print lines in page
*
1600*
   ECD.NUM = 2; ECD.SUB.NUM = N; ECD.Y = SSLN; ECD.ACTION = 5; CALL SCRN.EDIT
   ECD.NUM = 1; ECD.SUB.NUM = N; ECD.Y = SSLN; ECD.ACTION = 5; CALL SCRN.EDIT
   ECD.NUM = 3; ECD.SUB.NUM = N; ECD.Y = SSLN; ECD.ACTION = 5; CALL SCRN.EDIT
   ECD.NUM = 4; ECD.SUB.NUM = N; ECD.Y = SSLN; ECD.ACTION = 5; CALL SCRN.EDIT
   ECD.NUM = 5; ECD.SUB.NUM = N; ECD.Y = SSLN; ECD.ACTION = 5; CALL SCRN.EDIT
   ECD.NUM = 6; ECD.SUB.NUM = N; ECD.Y = SSLN; ECD.ACTION = 5; CALL SCRN.EDIT
   ECD.NUM = 7; ECD.SUB.NUM = N; ECD.Y = SSLN; ECD.ACTION = 5; CALL SCRN.EDIT
   RETURN
*
*---- Print page.no & page cnt
*
1700*
   ECD.NUM = 10
   SCV.REC(ECD.NUM)<ECD.SCRN.NO> = INT(LN / PAGE.SIZE + .99) "R%2"
   ECD.ACTION = 5; CALL SCRN.EDIT
1750*
   ECD.NUM = 11
   SCV.REC(ECD.NUM)<ECD.SCRN.NO> = INT(LINES/PAGE.SIZE + .99) "R%2"
   ECD.ACTION = 5; CALL SCRN.EDIT
   RETURN
*
*---- Fill rest of page area
*
1800*
   FOR N = CNT TO PAGE.SIZE
      SSLN = BEGIN.PAGE + LINE.SPACE * MOD(N - 1, PAGE.SIZE)
*     CRT @(0,SSLN):CL:
      P_X  = 0 ; P_Y = SSLN ; P_VALUE = "" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
   NEXT N
   RETURN
*
*---- Validate access security
4000*
   VAL.ERR = 1
   MATREAD USER.REC FROM SECURITY, "R.":PORT.NO THEN
      MATREAD SEC.REC FROM SECURITY, CONO:USER.ID THEN
         MATREAD PPS.REC FROM PMC_PROCESS, ID.LIST<LNO> THEN
            VAL.ERR=0
            BEGIN CASE
               CASE SEC.MENU.LEVEL > 2
               CASE SEC.MENU.FLAG="A"
                  LOCATE PPS.VOC IN SEC.MENU.PROC<1>,1 SETTING FND ELSE
                     ERRMSG="** You are not authorized to perform this function **"
                     GOSUB 91000; VAL.ERR=1
                  END
               CASE 1
                  LOCATE PPS.VOC IN SEC.MENU.PROC<1>,1 SETTING FND THEN
                     ERRMSG="** You are not authorized to perform this function **"
                     GOSUB 91000; VAL.ERR=1
                  END
            END CASE
         END ELSE
            ERRMSG = 'CANNOT READ PMC_PROCESS ':ID.LIST<LNO>; GOSUB 91000
         END
      END ELSE
         ERRMSG = 'CANNOT READ SECURITY RECORD ':CONO:USER.ID; GOSUB 91000
      END
   END ELSE
      ERRMSG = 'CANNOT READ USER RECORD ':"R.":PORT.NO; GOSUB 91000
   END
   RETURN
*
*---- Execute process
5000 *
   MATREAD PPSX.REC FROM PMC_PROCESS_XREF, PPS.VOC THEN
*      CALL VSI_VERB_SUB("M_":PORT.NO,VOC,PPS.TYPE,PMC_PROCESS,EXE_TYPE,EXE_VERB,ERRMSG)
      VOC_ID = "Z_":PORT.NO
      CALL VSI_VERB_SUB(VOC_ID,VOC,ID.LIST<LNO>,PMC_PROCESS,EXE_TYPE,EXE_VERB,ERRMSG)
      IF ERRMSG # "" THEN
         GOTO 93000
      END
      IF EXE_VERB # "" THEN
         EXECUTE EXE_VERB
         IF EXE_TYPE = "P" OR EXE_TYPE = "PB" THEN
            READU ITEM FROM VOC, VOC_ID THEN
               DELETE VOC, VOC_ID
            END ELSE
               RELEASE VOC, VOC_ID
            END
         END
      END
   END
****************************
   RETURN
*
*
*--- CALLS FOR SYSCOM
*
91000 *
   ERR.TYPE = 1;CALL SYSCOM(MAT SYSCOM.REC); RETURN
92000 *
   ERR.TYPE = 2;CALL SYSCOM(MAT SYSCOM.REC); RETURN
93000 *
   ERR.TYPE = 3;CALL SYSCOM(MAT SYSCOM.REC)
   GOTO 99999
*
99990 *
   ECD.ACTION = 99 ; CALL SCRN.EDIT
*
99999*
END
