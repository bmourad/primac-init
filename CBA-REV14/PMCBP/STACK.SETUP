      SUBROUTINE STACK.SETUP(ARTH.EXP,STACK,VARS,VLOC,ERRMSG)
      EQU AM  TO CHAR(254)
      IF ARTH.EXP = "" THEN
         ERRMSG = "Null arithmetic expression"
         GOTO 99998
      END
      DIM SUB.STACK(50)
      DIM ALG.EXP(5)
      DIM S.PTR(5)
      DIM OPER(4)
      VARS = ""
      VLOC = ""
      SHD = "STACK"
      ARTH.EXP = TRIM(ARTH.EXP)
      EL = LEN(ARTH.EXP)
      ORG.EXP = ""
      OP.PTR = ""
      MAT SUB.STACK = ""
      SS.REF = 1
      FOR I = 2 TO 50
         SS.REF<I> = I
      NEXT I
      SS.PTR = ""
      NCNT = 0
      OCNT = 0
      WORD = ""
      OPER(1) = "^"
      OPER(2) = "/":AM:"*"
      OPER(3) = "-":AM:"+"
      OPER(4) = ","
      OPERS = "(":AM:")":AM:OPER(1):AM:OPER(2):AM:OPER(3):AM:OPER(4)
      FUNCS = "INT":AM:"ABS":AM:"SQRT":AM:"SUM":AM:"PWR":AM:"REM":AM:"RND":AM:"RNDU":AM:"RNDD"
      INDX = 1
      POS = 1
      ERRMSG = ""
      LOOP WHILE POS <= EL DO
         CHR = ARTH.EXP[POS,1]
         IF CHR = " " THEN GOTO 15
         LOCATE CHR IN OPERS SETTING OP ELSE
            WORD = WORD : CHR
            GOTO 15
         END
         P.INDX = INDX - 1
         BEGIN CASE
         CASE OP = 1
            BEGIN CASE
            CASE WORD # ""
               LOCATE WORD IN FUNCS SETTING F THEN
                  ORG.EXP<INDX> = WORD
                  OP.PTR<INDX> = F + 8
                  INDX = INDX + 1
                  WORD = ""
               END ELSE
                  ERRMSG = "Invalid variable (":WORD:") preceeding the left parenthesis"
                  POS = EL + 1; GOTO 19
               END
            CASE P.INDX = 0
            CASE OP.PTR<P.INDX> < 1
               ERRMSG = "Invalid variable is preceeding the left parenthesis"
               POS = EL + 1; GOTO 19
            END CASE
         CASE WORD = ""
            BEGIN CASE
            CASE P.INDX = 0 AND CHR = "-"
               NCNT = NCNT + 1
            CASE P.INDX = 0
               ERRMSG = "The arithmetic expression should not begin with operator (":CHR:")"
               POS = EL + 1; GOTO 19
            CASE CHR = "-" AND (ORG.EXP<P.INDX> = "(" OR ORG.EXP<P.INDX> = ",")
               NCNT = NCNT + 1
            CASE OP.PTR<P.INDX> < 1
            CASE 1
               ERRMSG = "Operator ":ORG.EXP<P.INDX>:" is preceeding another operator ":CHR
               POS = EL + 1; GOTO 19
            END CASE
         CASE NOT(NUM(WORD))
            LOCATE WORD IN VARS SETTING V ELSE
               VARS<V> = WORD
            END
            ORG.EXP<INDX> = WORD
            OP.PTR<INDX> = 0
            INDX = INDX + 1
            WORD = ""
            NCNT = NCNT + 1
         CASE WORD < -999999999 OR WORD > 999999999
            ERRMSG = "Number (" : WORD : ") is out of range"
            POS = EL + 1; GOTO 19
         CASE 1
            ORG.EXP<INDX> = WORD
            OP.PTR<INDX> = 0
            INDX = INDX + 1
            WORD = ""
            NCNT = NCNT + 1
         END CASE
         BEGIN CASE
         CASE OP = 2
            INDX = INDX - 1
            RPTR = 1
            ALG.EXP(RPTR) = ""
            S.PTR(RPTR) = ""
            CCNT = 0
            MIN = 4
            MAX = 1
            LOOP WHILE INDX > 0 AND ORG.EXP<INDX> # "(" DO
               IF OP.PTR<INDX> > 2 AND OP.PTR<INDX> < 9 THEN
                  L = INT(OP.PTR<INDX>/2)
                  IF L < MIN THEN MIN = L
                  IF L > MAX THEN MAX = L
                  CCNT = CCNT + INT(L/4)
               END
               INS ORG.EXP<INDX> BEFORE ALG.EXP(RPTR)<1>
               INS SS.PTR<INDX> BEFORE S.PTR(RPTR)<1>
               ORG.EXP = DELETE(ORG.EXP,INDX,0,0)
               OP.PTR = DELETE(OP.PTR,INDX,0,0)
               SS.PTR = DELETE(SS.PTR,INDX,0,0)
               INDX = INDX - 1
            REPEAT
            P.INDX = INDX - 1
            BEGIN CASE
            CASE INDX = 0
               ERRMSG = "Mismatch between right and left parenthesis"
               POS = EL + 1; GOTO 19
            CASE CCNT > 1 OR (CCNT AND OP.PTR<P.INDX> < 13)
               ERRMSG = "Invalid operator (,) in arithmetic expression"
               POS = EL + 1; GOTO 19
            CASE CCNT  = 0 AND OP.PTR<P.INDX> > 12
               ERRMSG = "Invalid expression for function - ":ORG.EXP<P.INDX>
               POS = EL + 1; GOTO 19
            END CASE
            GOSUB 300
            IF ERRMSG # "" THEN
               POS = EL + 1; GOTO 19
            END
            IF OP.PTR<P.INDX> > 8 THEN
               SUB.STACK(SSREF)<-1> = ORG.EXP<P.INDX>
               ORG.EXP = DELETE(ORG.EXP,INDX,0,0)
               OP.PTR = DELETE(OP.PTR,INDX,0,0)
               SS.PTR = DELETE(SS.PTR,INDX,0,0)
               INDX = INDX - 1
            END
            ORG.EXP<INDX> = ALG.EXP(RPTR)
            SS.PTR<INDX> = SSREF
            OP.PTR<INDX> = 0
            INDX = INDX + 1
         CASE OP > 2 AND OP < 9
            OCNT = OCNT + 1
            ORG.EXP<INDX> = CHR
            OP.PTR<INDX> = OP
            INDX = INDX + 1
         CASE 1
            ORG.EXP<INDX> = CHR
            OP.PTR<INDX> = OP
            INDX = INDX + 1
         END CASE
15       POS = POS + 1
19    REPEAT
      IF ERRMSG # "" THEN GOTO 99998
      LOCATE "," IN ORG.EXP SETTING F THEN
         ERRMSG = "Invalid operator (,) in arithmetic expression"
         GOTO 99998
      END
      BEGIN CASE
      CASE WORD = ""
         INDX = INDX - 1
      CASE NOT(NUM(WORD))
         LOCATE WORD IN VARS SETTING V ELSE
            VARS<V> = WORD
         END
         ORG.EXP<INDX> = WORD
         NCNT = NCNT + 1
      CASE WORD < -999999999 OR WORD > 999999999
         ERRMSG = "Number (" : WORD : ") is out of range"
         GOTO 99998
      CASE 1
         ORG.EXP<INDX> = WORD
         NCNT = NCNT + 1
      END CASE
      IF NCNT <= OCNT THEN
         ERRMSG = "Variable count (":NCNT:") is greater than the operator count (":OCNT:")"
         GOTO 99998
      END
      RPTR = 1
      ALG.EXP(RPTR) = ORG.EXP
      S.PTR(RPTR) = SS.PTR
      MIN = 1; MAX = 4
      GOSUB 300
      IF ERRMSG # "" THEN GOTO 99998
      STACK = SUB.STACK(SSREF)
      VCNT = DCOUNT(VARS,AM)
      IF VCNT THEN
         FOR V = 1 TO VCNT
            P = 1
            LOOP
               LOCATE VARS<V> IN STACK,P SETTING LOC ELSE LOC = 0
            WHILE LOC DO
               VLOC<V,-1> = LOC
               P = LOC + 1
            REPEAT
         NEXT V
      END ELSE
         CALL STACK.CALC(STACK,ERRMSG)
         IF ERRMSG # "" THEN GOTO 99998
      END
      GOTO 99999
300   LOCATE "," IN ALG.EXP(RPTR) SETTING C THEN
         P1 = RPTR
         P2 = RPTR + 1
         RPTR = RPTR + 2
         ALG.EXP(P2) = ALG.EXP(P1)
         S.PTR(P2) = S.PTR(P1)
         ALG.EXP(P1) = ALG.EXP(P2)<C>
         S.PTR(P1) = S.PTR(P2)<C> + 0
         ALG.EXP(P2) = DELETE(ALG.EXP(P2),C,0,0)
         S.PTR(P2) = DELETE(S.PTR(P2),C,0,0)
         C = C - 1
         ALG.EXP(RPTR) = ""
         S.PTR(RPTR) = ""
         FOR I = C TO 1 STEP -1
            ALG.EXP(RPTR)<I> = ALG.EXP(P2)<I>
            ALG.EXP(P2) = DELETE(ALG.EXP(P2),I,0,0)
            S.PTR(RPTR)<I> = S.PTR(P2)<I>
            S.PTR(P2) = DELETE(S.PTR(P2),I,0,0)
         NEXT I
         GOSUB 301
         IF ERRMSG # "" THEN GOTO 399
         INS ALG.EXP(RPTR) BEFORE ALG.EXP(P1)<1>
         INS S.PTR(RPTR) BEFORE S.PTR(P1)<1>
         RPTR = P2
         GOSUB 301
         IF ERRMSG # "" THEN GOTO 399
         ALG.EXP(P1)<-1> = ALG.EXP(RPTR)
         S.PTR(P1)<-1> = S.PTR(RPTR)
         RPTR = P1
      END
301   BEGIN CASE
      CASE ALG.EXP(RPTR)<1> # "-"
      CASE ALG.EXP(RPTR)<3> = ""
         INS "0" BEFORE ALG.EXP(RPTR)<1>
         INS "" BEFORE S.PTR(RPTR)<1>
      CASE 1
         P1 = RPTR
         RPTR = RPTR + 1
         ALG.EXP(RPTR) = 0
         S.PTR(RPTR) = ""
         ALG.EXP(RPTR)<2> = "-"
         ALG.EXP(RPTR)<3> = ALG.EXP(P1)<2>
         S.PTR(RPTR)<3> = S.PTR(P1)<2>
         ALG.EXP(P1) = DELETE(ALG.EXP(P1),1,0,0)
         ALG.EXP(P1) = DELETE(ALG.EXP(P1),1,0,0)
         S.PTR(P1) = DELETE(S.PTR(P1),1,0,0)
         S.PTR(P1) = DELETE(S.PTR(P1),1,0,0)
         GOSUB 302
         IF ERRMSG # "" THEN GOTO 399
         INS ALG.EXP(RPTR) BEFORE ALG.EXP(P1)<1>
         INS S.PTR(RPTR) BEFORE S.PTR(P1)<1>
         RPTR = P1
      END CASE
302   FOR LL = MIN TO MAX
         I = 1
         LOOP
            LOOP
               OP = 0
               IF NUM(ALG.EXP(RPTR)<I>) AND ALG.EXP(RPTR)<I> # "+" AND ALG.EXP(RPTR)<I> # "-" THEN
                  I = I + 1
               END ELSE
                  LOCATE ALG.EXP(RPTR)<I> IN OPER(LL) SETTING OP ELSE
                     OP = 0
                     I = I + 1
                  END
               END
            WHILE OP = 0 AND ALG.EXP(RPTR)<I> # "" DO REPEAT
         WHILE ALG.EXP(RPTR)<I> # "" DO
            STACK = ""
            J = I - 1
            BEGIN CASE
            CASE ALG.EXP(RPTR)<J> = SHD
               INS SUB.STACK(S.PTR(RPTR)<J>) BEFORE STACK<1>
               INS S.PTR(RPTR)<J> BEFORE SS.REF<1>
            CASE ALG.EXP(RPTR)<J> = ""
               ERRMSG = "Invalid null variable in arithmetic expression"
               ALG.EXP(RPTR) = ""
               GOTO 309
            CASE NUM(ALG.EXP(RPTR)<J>) AND ALG.EXP(RPTR)<J> # "+" AND ALG.EXP(RPTR)<J> # "-"
               INS ALG.EXP(RPTR)<J> BEFORE STACK<1>
            CASE 1
               LOCATE ALG.EXP(RPTR)<J> IN VARS SETTING V THEN
                  INS ALG.EXP(RPTR)<J> BEFORE STACK<1>
               END ELSE
                  ERRMSG = "289,S.S Invalid variable in arithmetic expression (":ALG.EXP(RPTR)<J>:")"
                  ALG.EXP(RPTR) = ""
                  GOTO 309
               END
            END CASE
            J = I + 1
            BEGIN CASE
            CASE ALG.EXP(RPTR)<J> = SHD
               INS SUB.STACK(S.PTR(RPTR)<J>) BEFORE STACK<1>
               INS S.PTR(RPTR)<J> BEFORE SS.REF<1>
            CASE ALG.EXP(RPTR)<J> = ""
               ERRMSG = "Invalid null variable in arithmetic expression"
               ALG.EXP(RPTR) = ""
               GOTO 309
            CASE NUM(ALG.EXP(RPTR)<J>) AND ALG.EXP(RPTR)<J> # "+" AND ALG.EXP(RPTR)<J> # "-"
               INS ALG.EXP(RPTR)<J> BEFORE STACK<1>
            CASE 1
               LOCATE ALG.EXP(RPTR)<J> IN VARS SETTING V THEN
                  INS ALG.EXP(RPTR)<J> BEFORE STACK<1>
               END ELSE
                  ERRMSG = "309,S.S Invalid variable in arithmetic expression (":ALG.EXP(RPTR)<J>:")"
                  ALG.EXP(RPTR) = ""
                  GOTO 309
               END
            END CASE
            IF LL <> 4 THEN
               STACK<-1> = ALG.EXP(RPTR)<I>
            END
            ALG.EXP(RPTR) = DELETE(ALG.EXP(RPTR),J,0,0)
            S.PTR(RPTR) = DELETE(S.PTR(RPTR),J,0,0)
            ALG.EXP(RPTR) = DELETE(ALG.EXP(RPTR),I,0,0)
            S.PTR(RPTR) = DELETE(S.PTR(RPTR),I,0,0)
            J = I - 1
            ALG.EXP(RPTR)<J> = SHD
            SREF = SS.REF<1>
            SS.REF = DELETE(SS.REF,1,0,0)
            S.PTR(RPTR)<J> = SREF
            SUB.STACK(SREF) = STACK
309      REPEAT
      NEXT LL
      BEGIN CASE
      CASE ERRMSG # ""
      CASE ALG.EXP(RPTR) = SHD
         SSREF = S.PTR(RPTR)
      CASE NUM(ALG.EXP(RPTR))
         SSREF = SS.REF<1>
         SS.REF = DELETE(SS.REF,1,0,0)
         SUB.STACK(SSREF) = ALG.EXP(RPTR)
         ALG.EXP(RPTR) = SHD
         S.PTR(RPTR) = SSREF
      CASE 1
         LOCATE ALG.EXP(RPTR)<1> IN VARS SETTING V THEN
            SSREF = SS.REF<1>
            SS.REF = DELETE(SS.REF,1,0,0)
            SUB.STACK(SSREF) = ALG.EXP(RPTR)
            ALG.EXP(RPTR) = SHD
            S.PTR(RPTR) = SSREF
         END ELSE
            ERRMSG = "347,S.S Invalid variable in arithmetic expression (":ALG.EXP(RPTR)<1>:")"
REM         ERRMSG = ALG.EXP(RPTR):" ":RPTR:" 347,(":ALG.EXP(RPTR)<1>:")":" ":VARS
         END
      END CASE
399   RETURN
99998 ERRMSG = ERRMSG[1,79]
      STACK = 0
99999 RETURN
   END
