*COPY>CPYLIB>COM1
*********************************************************************
* REVISION     - [11.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM       - PRIMAC
*********************************************************************
*
*
*---- DIMENSIONS AND EQUATES
*
*
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>DIVISION
*COPY>SIS.CPYLIB>SIS_SERVERS
*COPY>SIS.CPYLIB>LOGIN_PARMS
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>SYSCOM
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*
*---- INITILAIZE SYSCOM
*
   SYS.TYPE = 1
   CALL SYSCOM(MAT SYSCOM.REC)
*
*
*---- OPEN FILES
*
   MAT FILE.VARS = ""
   OPEN "", "PMC.SCREENS" TO M.SCREENS ELSE
      ERRMSG = "PMC.SCREENS FILE IS MISSING"
      GOSUB 91000
      GOTO 99999
   END
   OPEN "", "CONTROL" TO CONTROL ELSE
      ERRMSG = "CONTROL FILE IS MISSING"
      GOSUB 91000
      GOTO 99999
   END
   OPEN "", "COMPANY" TO COMPANY ELSE
      ERRMSG = "COMPANY FILE IS MISSING"
      GOSUB 91000
      GOTO 99999
   END
   OPEN "", "SIS_CONTROL" TO SIS_CONTROL ELSE
      ERRMSG = "SIS_CONTROL FILE IS MISSING"
      GOSUB 91000
      GOTO 99999
   END
   OPEN "", "DIVISION" TO DIVISION ELSE
      ERRMSG = "DIVISION FILE IS MISSING"
      GOSUB 91000
      GOTO 99999
   END
*
*---- GET COMPANY
*
   MAT COMP.REC = ""
   CONO = ""
   CALL GET.CONO(CONO,MAT COMP.REC)
   IF CONO = "END" THEN GOTO 99999
*
*---- INIT SCREEN
*
   MAT EDIT.COM.DRIVER = ""
   ECD.SCRN.CNT = 1
   ECD.SCRN.NAME = "SFIS_CONTROL"
   ECD.ACTION = 1
   CALL SCRN.EDIT
   ECD.SCRN.NO = 1
   MAT SCV.REC = ""
*
   TODAY = DATE()
   HQ_PAGE.SIZE = 5
   HQ_BEGIN.PAGE = 14
   HQ_LINE.SPACE = 1
   SQ_PAGE.SIZE = 5
   SQ_BEGIN.PAGE = 14
   SQ_LINE.SPACE = 1
*
*---- MAIN PROCESS
*
100*
   MODE = ""
   READU TREC FROM SIS_CONTROL, CONO : "CNTL_LOCK" THEN
      MODE = "M"
   END LOCKED
      MODE = "I"
   END ELSE
      MODE = "M"
   END
*
   SCV.REC(11)<ECD.SCRN.NO> = CONO
   SCV.REC(12)<ECD.SCRN.NO> = CO.NAME
   READ TREC FROM CONTROL, CONO : "SISLIVE" THEN
      SCV.REC(13)<ECD.SCRN.NO> = "ON"
      SCV.REC(14)<ECD.SCRN.NO> = TREC<1>
   END ELSE
      SCV.REC(13)<ECD.SCRN.NO> = "OFF"
      SCV.REC(14)<ECD.SCRN.NO> = ""
   END
   MATREAD SISLIP_REC FROM SIS_CONTROL, CONO : "LOGIN_PARMS" THEN
      LOCATE "3" IN SISLIP_SHIFT<1>, 1 SETTING FND THEN
         SCV.REC(15)<ECD.SCRN.NO> = SISLIP_TYPE<1,FND>
         HH = SISLIP_TIME<1,FND>[1,2]
         MM = SISLIP_TIME<1,FND>[3,2]
         SCV.REC(16)<ECD.SCRN.NO> = HH:MM
      END ELSE
         SCV.REC(15)<ECD.SCRN.NO> = "N"
         SCV.REC(16)<ECD.SCRN.NO> = ""
      END
   END ELSE
      SCV.REC(15)<ECD.SCRN.NO> = "N"
      SCV.REC(16)<ECD.SCRN.NO> = ""
   END
   READ TREC FROM CONTROL, CONO : "SISQUEUE" THEN
      SCV.REC(17)<ECD.SCRN.NO> = "ON"
      SCV.REC(18)<ECD.SCRN.NO> = TREC<1>
      READ TREC FROM SIS_CONTROL, CONO : "MSG_SEQ" THEN
         SCV.REC(19)<ECD.SCRN.NO> = TREC<2>
         SCV.REC(20)<ECD.SCRN.NO> = TREC<1>
      END ELSE
         SCV.REC(19)<ECD.SCRN.NO> = ""
         SCV.REC(20)<ECD.SCRN.NO> = ""
      END
   END ELSE
      SCV.REC(17)<ECD.SCRN.NO> = "OFF"
      SCV.REC(18)<ECD.SCRN.NO> = ""
      SCV.REC(19)<ECD.SCRN.NO> = ""
      SCV.REC(20)<ECD.SCRN.NO> = ""
   END
   READU TREC FROM SIS_CONTROL, "MSG_LOCK" THEN
      RELEASE SIS_CONTROL, "MSG_LOCK"
      SCV.REC(21)<ECD.SCRN.NO> = "INACTIVE"
      SCV.REC(22)<ECD.SCRN.NO> = ""
      SCV.REC(23)<ECD.SCRN.NO> = ""
      READ TREC FROM SIS_CONTROL, "MSG_CNTL" THEN
         SCV.REC(23)<ECD.SCRN.NO> = TREC<2>
      END
   END LOCKED
      SCV.REC(21)<ECD.SCRN.NO> = "ACTIVE"
      SCV.REC(22)<ECD.SCRN.NO> = ""
      SCV.REC(23)<ECD.SCRN.NO> = ""
      READ TREC FROM SIS_CONTROL, "MSG_CNTL" THEN
         SCV.REC(22)<ECD.SCRN.NO> = TREC<3>
         SCV.REC(23)<ECD.SCRN.NO> = TREC<2>
         IF TREC<1> = "STOP" THEN
            SCV.REC(21)<ECD.SCRN.NO> = "STOPPING"
         END
      END
   END ELSE
      RELEASE SIS_CONTROL, "MSG_LOCK"
      SCV.REC(21)<ECD.SCRN.NO> = "INACTIVE"
      SCV.REC(22)<ECD.SCRN.NO> = ""
      SCV.REC(23)<ECD.SCRN.NO> = ""
   END
   READ TREC FROM SIS_CONTROL, CONO : "MSG_ARCHIVE" THEN
      SCV.REC(24)<ECD.SCRN.NO> = TREC<1>
      SCV.REC(25)<ECD.SCRN.NO> = "ON " : TREC<2>
   END ELSE
      SCV.REC(24)<ECD.SCRN.NO> = "NONE"
      SCV.REC(25)<ECD.SCRN.NO> = ""
   END
   MATREAD SISSVR_REC FROM SIS_CONTROL, CONO : "SIS_SERVERS" ELSE MAT SISSVR_REC = ""
   HQ_COUNT = DCOUNT (SISSVR_SERVER, VM)
   FOR REF = 1 TO HQ_COUNT
      SCV.REC(30)<ECD.SCRN.NO,REF> = REF
      SCV.REC(31)<ECD.SCRN.NO,REF> = SISSVR_SERVER<1,REF>
      DIV.NO = SISSVR_DIVISION<1,REF>
      SCV.REC(32)<ECD.SCRN.NO,REF> = DIV.NO
      IF DIV.NO = "<ALL>" THEN
         MAT DIV.REC = ""
         DIV.DESC = "ALL DIVISIONS"
      END ELSE
         MATREAD DIV.REC FROM DIVISION, CONO : DIV.NO ELSE
            MAT DIV.REC = ""
         END
      END
      SCV.REC(33)<ECD.SCRN.NO,REF> = DIV.DESC
   NEXT REF
   SIS_STMT = "SSELECT SIS_CONTROL"
   UDTEXECUTE SIS_STMT CAPTURING SCREENDATA
   DONE = 0
   SQ_COUNT = 0
   LOOP
      READNEXT ID ELSE DONE = 1
   UNTIL DONE DO
      IF ID[1,4] = "SVR_" THEN
         READ TREC FROM SIS_CONTROL, ID THEN
            SQ_COUNT += 1
            SERVER.ID = ID[5,99]
            SCV.REC(35)<ECD.SCRN.NO,SQ_COUNT> = SQ_COUNT
            SCV.REC(36)<ECD.SCRN.NO,SQ_COUNT> = SERVER.ID
            SCV.REC(37)<ECD.SCRN.NO,SQ_COUNT> = TREC<1>
            SCV.REC(38)<ECD.SCRN.NO,SQ_COUNT> = TREC<2>
         END
      END
   REPEAT
   ECD.ACTION = 3
   CALL SCRN.EDIT
   REF = 1
   HQ_START.LINE = 1
   GOSUB 81500
   LN = 1
   SQ_START.LINE = 1
   GOSUB 82500
500*
   MORE = 1
   LOOP
      IF MODE = "I" THEN
         ECD.NUM  = 5
      END ELSE
         ECD.NUM = 1
      END
      SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""
      ECD.ACTION = 4
      CALL SCRN.EDIT
      REQUEST = ECD.RET.VALUE
      BEGIN CASE
         CASE REQUEST = "END" OR REQUEST = "E"
            MORE = 0
         CASE REQUEST = "F" AND MODE = "I"
         CASE REQUEST = "F"
            GOSUB 1000
            MORE = 0
         CASE REQUEST = "HQ"
            GOSUB 510
         CASE REQUEST = "SQ"
            IF SQ_COUNT > 1 THEN GOSUB 520
         CASE NOT(NUM(REQUEST)) OR MODE = "I"
         CASE REQUEST < 1 OR REQUEST > 3
         CASE 1
            ON REQUEST GOSUB 1100,1200,1300
      END CASE
   WHILE MORE DO REPEAT
   GOTO 99999
*-------------------*
*--- SUBROUTINES ---*
*-------------------*
*
*--- HQ OPTIONS
*
510*
*  IF MODE = "I" AND HQ_COUNT < 1 THEN RETURN
   IF HQ_COUNT < 1 THEN RETURN
   OPTION = ""
   LOOP
      ECD.NUM = 3
      SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""
      ECD.ACTION = 4
      CALL SCRN.EDIT
      OPTION = ECD.RET.VALUE
      BEGIN CASE
         CASE OPTION = "END" OR OPTION = "E" OR OPTION = ""
            OPTION = "E"
         CASE OPTION = "S" OR OPTION = "SF"
            REF = 1 + INT((REF-1)/HQ_PAGE.SIZE)*HQ_PAGE.SIZE + HQ_PAGE.SIZE
            IF REF > HQ_COUNT THEN REF = 1
            GOSUB 81000
         CASE OPTION = "SR"
            REF = 1 + INT((REF-1)/HQ_PAGE.SIZE)*HQ_PAGE.SIZE - HQ_PAGE.SIZE
            IF REF < 1 THEN REF = HQ_COUNT
            IF REF < 1 THEN REF = 1
            GOSUB 81000
         CASE OPTION = "ST"
            REF = 1
            GOSUB 81000
         CASE OPTION = "SB"
            REF = HQ_COUNT
            IF REF < 1 THEN REF = 1
            GOSUB 81000
      END CASE
   UNTIL OPTION = "E" DO REPEAT
   RETURN
*
*--- SQ OPTIONS
*
520*
   OPTION = ""
   LOOP
      ECD.NUM = 3
      SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""
      ECD.ACTION = 4
      CALL SCRN.EDIT
      OPTION = ECD.RET.VALUE
      BEGIN CASE
         CASE OPTION = "END" OR OPTION = "E" OR OPTION = ""
            OPTION = "E"
         CASE OPTION = "S" OR OPTION = "SF"
            LN = 1 + INT((LN-1)/SQ_PAGE.SIZE)*SQ_PAGE.SIZE + SQ_PAGE.SIZE
            IF LN > SQ_COUNT THEN LN = 1
            GOSUB 82000
         CASE OPTION = "SR"
            LN = 1 + INT((LN-1)/SQ_PAGE.SIZE)*SQ_PAGE.SIZE - SQ_PAGE.SIZE
            IF LN < 1 THEN LN = SQ_COUNT
            IF LN < 1 THEN LN = 1
            GOSUB 82000
         CASE OPTION = "ST"
            LN = 1
            GOSUB 82000
         CASE OPTION = "SB"
            LN = SQ_COUNT
            IF LN < 1 THEN LN = 1
            GOSUB 82000
      END CASE
   UNTIL OPTION = "E" DO REPEAT
   RETURN
*
*--- UPDATE THE CONTROL RECORDS
*
1000*
* SISLIVE
   TEMP = SCV.REC(13)<ECD.SCRN.NO>
   IF TEMP = "OFF" THEN
      READU TREC FROM CONTROL, CONO : "SISLIVE" THEN
         DELETE CONTROL, CONO : "SISLIVE"
         READU HREC FROM SIS_CONTROL, CONO : "SISLIVEHIST" ELSE HREC = ""
         HCNT = DCOUNT(HREC<1>, VM) + 1
         HREC<1,HCNT> = TREC<1>
         HREC<2,HCNT> = OCONV(TODAY, "D4/")
         WRITE TREC ON SIS_CONTROL CONO : "SISLIVEHIST"
      END ELSE
         RELEASE CONTROL, CONO : "SISLIVE"
      END
   END ELSE
      READU TREC FROM CONTROL, CONO : "SISLIVE" ELSE
         TREC = OCONV(TODAY, "D4/")
      END
      WRITE TREC ON CONTROL, CONO : "SISLIVE"
   END
* SISQUEUE
   TEMP = SCV.REC(17)<ECD.SCRN.NO>
   IF TEMP = "OFF" THEN
      READU TREC FROM CONTROL, CONO : "SISQUEUE" THEN
         DELETE CONTROL, CONO : "SISQUEUE"
         TREC<2> = OCONV(TODAY, "D4/")
         READU HREC FROM SIS_CONTROL, CONO : "SISQUEUEHIST" ELSE HREC = ""
         HCNT = DCOUNT(HREC<1>, VM) + 1
         HREC<1,HCNT> = TREC<1>
         HREC<2,HCNT> = OCONV(TODAY, "D4/")
         WRITE TREC ON SIS_CONTROL CONO : "SISQUEUEHIST"
      END ELSE
         RELEASE CONTROL, CONO : "SISQUEUE"
      END
   END ELSE
      READU TREC FROM CONTROL, CONO : "SISQUEUE" ELSE
         TREC = OCONV(TODAY, "D4/")
      END
      WRITE TREC ON CONTROL, CONO : "SISQUEUE"
   END
* LOGIN_PARMS
   TEMP = SCV.REC(15)<ECD.SCRN.NO>
   IF TEMP = "N" THEN
      MATREADU SISLIP_REC FROM SIS_CONTROL, CONO : "LOGIN_PARMS" THEN
         LOCATE "3" IN SISLIP_SHIFT<1>, 1 SETTING FND THEN
            DEL SISLIP_SHIFT<1,FND>
            DEL SISLIP_TYPE<1,FND>
            DEL SISLIP_TIME<1,FND>
         END
         IF SISLIP_SHIFT = "" THEN
            DELETE SIS_CONTROL, CONO : "LOGIN_PARMS"
         END ELSE
            MATWRITE SISLIP_REC ON SIS_CONTROL, CONO : "LOGIN_PARMS"
         END
      END ELSE
         RELEASE SIS_CONTROL, CONO : "LOGIN_PARMS"
      END
   END ELSE
      MATREADU SISLIP_REC FROM SIS_CONTROL, CONO : "LOGIN_PARMS" ELSE
         MAT SISLIP_REC = ""
      END
      HH = FIELD(SCV.REC(16)<ECD.SCRN.NO>,":",1)
      MM = FIELD(SCV.REC(16)<ECD.SCRN.NO>,":",2)
      LOCATE "3" IN SISLIP_SHIFT<1>, 1 BY "AR" SETTING FND THEN
         SISLIP_TYPE<1,FND> = SCV.REC(15)<ECD.SCRN.NO>
         SISLIP_TIME<1,FND> = HH:MM
      END ELSE
         INS "3" BEFORE SISLIP_SHIFT<1,FND>
         INS SCV.REC(15)<ECD.SCRN.NO> BEFORE SISLIP_TYPE<1,FND>
         INS HH:MM BEFORE SISLIP_TIME<1,FND>
      END
      MATWRITE SISLIP_REC ON SIS_CONTROL, CONO : "LOGIN_PARMS"
   END
   RETURN
*
*--- LOGIN VALIDATION
*
1100*
   ECD.NUM = 13
   ECD.ACTION = 4
   CALL SCRN.EDIT
   RETURN
*
*--- 3RD SHIFT LOGIN TYPE
*
1200*
   ECD.NUM = 15
   ECD.ACTION = 4
   CALL SCRN.EDIT
   BEGIN CASE
      CASE ECD.RET.VALUE = "+"
         GOSUB 1250
      CASE ECD.RET.VALUE = "-"
         GOSUB 1250
      CASE 1
         ECD.NUM = 16
         SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""
         ECD.ACTION = 5
         CALL SCRN.EDIT
   END CASE
   RETURN
*
*--- 3RD SHIFT LOGIN TIME
*
1250*
   ECD.NUM = 16
   ECD.ACTION = 4
   CALL SCRN.EDIT
   IF ECD.RET.VALUE = "END" THEN
      IF SCV.REC(ECD.NUM)<ECD.SCRN.NO> = "" THEN
         ECD.NUM = 15
         SCV.REC(ECD.NUM)<ECD.SCRN.NO> = "N"
         ECD.ACTION = 5
         CALL SCRN.EDIT
         RETURN
      END
   END
   HH = FIELD(ECD.RET.VALUE,":",1)
   MM = FIELD(ECD.RET.VALUE,":",2)
   IF HH = "" THEN HH = 0
   IF MM = "" THEN MM = 0
   ERRMSG = ""
   BEGIN CASE
      CASE NOT(NUM(HH)) OR NOT(NUM(MM))
         ERRMSG = "** INVALID INPUT **"
      CASE HH < 0 OR HH > 23
         ERRMSG = "** INVALID INPUT **"
      CASE MM < 0 OR MM > 59
         ERRMSG = "** INVALID INPUT **"
   END CASE
   IF ERRMSG # "" THEN
      GOSUB 91000
      SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""
      GOTO 1250
   END ELSE
      SCV.REC(ECD.NUM)<ECD.SCRN.NO> = HH "R%2" : ":" : MM "R%2"
      ECD.ACTION = 5
      CALL SCRN.EDIT
   END
   RETURN
*
*--- AUTO QUEUE
*
1300*
   ECD.NUM = 17
   ECD.ACTION = 4
   CALL SCRN.EDIT
   RETURN
*
*--- SCROLL HOST QUEUE
*
81000*
   START.LINE = 1 + INT((REF-1)/HQ_PAGE.SIZE)*HQ_PAGE.SIZE
   LAST.LINE = START.LINE + HQ_PAGE.SIZE - 1
   IF LAST.LINE > HQ_COUNT THEN LAST.LINE = HQ_COUNT
   IF START.LINE = HQ_START.LINE THEN RETURN
   HQ_START.LINE = START.LINE
   CNT = 1
   FOR N = START.LINE TO LAST.LINE
      ECD.NUM = 30
      ECD.SUB.NUM = N
      ECD.ACTION = 5
      CALL SCRN.EDIT
      ECD.NUM = 31
      ECD.SUB.NUM = N
      ECD.ACTION = 5
      CALL SCRN.EDIT
      ECD.NUM = 32
      ECD.SUB.NUM = N
      ECD.ACTION = 5
      CALL SCRN.EDIT
      ECD.NUM = 33
      ECD.SUB.NUM = N
      ECD.ACTION = 5
      CALL SCRN.EDIT
      CNT = CNT + 1
   NEXT N
   FOR M = CNT TO HQ_PAGE.SIZE
      SLN = HQ_BEGIN.PAGE + HQ_LINE.SPACE * MOD(M-1,HQ_PAGE.SIZE)
      P_X  = 0 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
   NEXT M
*
*---- Page numbers
81500*
   PAGE.STRING = ""
   ECD.NUM = 34
   IF HQ_COUNT < 1 THEN GOTO 81599
   PAGE.STRING = "Page "
   PAGE.STRING = PAGE.STRING : INT(REF / HQ_PAGE.SIZE + .49) "R%2"
   PAGE.STRING = PAGE.STRING : " of "
   PAGE.STRING = PAGE.STRING : INT(HQ_COUNT / HQ_PAGE.SIZE + .99) "R%2"
81599*
   SCV.REC(ECD.NUM)<ECD.SCRN.NO> = PAGE.STRING
   ECD.ACTION = 5
   CALL SCRN.EDIT
   RETURN
*
*--- SCROLL SERVER QUEUE
*
82000*
   START.LINE = 1 + INT((LN-1)/SQ_PAGE.SIZE)*SQ_PAGE.SIZE
   LAST.LINE = START.LINE + SQ_PAGE.SIZE - 1
   IF LAST.LINE > SQ_COUNT THEN LAST.LINE = SQ_COUNT
   IF START.LINE = SQ_START.LINE THEN RETURN
   SQ_START.LINE = START.LINE
   CNT = 1
   FOR N = START.LINE TO LAST.LINE
      ECD.NUM = 35
      ECD.SUB.NUM = N
      ECD.ACTION = 5
      CALL SCRN.EDIT
      ECD.NUM = 36
      ECD.SUB.NUM = N
      ECD.ACTION = 5
      CALL SCRN.EDIT
      ECD.NUM = 37
      ECD.SUB.NUM = N
      ECD.ACTION = 5
      CALL SCRN.EDIT
      ECD.NUM = 38
      ECD.SUB.NUM = N
      ECD.ACTION = 5
      CALL SCRN.EDIT
      CNT = CNT + 1
   NEXT N
   FOR M = CNT TO SQ_PAGE.SIZE
      SLN = SQ_BEGIN.PAGE + SQ_LINE.SPACE * MOD(M-1,SQ_PAGE.SIZE)
      P_X  = 0 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
   NEXT M
*
*---- Page numbers
82500*
   PAGE.STRING = ""
   ECD.NUM = 39
   IF SQ_COUNT < 1 THEN GOTO 82599
   PAGE.STRING = "Page "
   PAGE.STRING = PAGE.STRING : INT(LN / SQ_PAGE.SIZE + .99) "R%2"
   PAGE.STRING = PAGE.STRING : " of "
   PAGE.STRING = PAGE.STRING : INT(SQ_COUNT / SQ_PAGE.SIZE + .99) "R%2"
82599*
   SCV.REC(ECD.NUM)<ECD.SCRN.NO> = PAGE.STRING
   ECD.ACTION = 5
   CALL SCRN.EDIT
   RETURN
*
*---- ERROR ROUTINES
*
91000*
   ERR.TYPE=1
   CALL SYSCOM(MAT SYSCOM.REC)
   RETURN
92000*
   ERR.TYPE=2
   CALL SYSCOM(MAT SYSCOM.REC)
   RETURN
93000*
   ERR.TYPE=3
   CALL SYSCOM(MAT SYSCOM.REC)
99999*
END
