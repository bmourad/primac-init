   SUBROUTINE EST.CASE.MAINT.2A (CONO, ACTION, EST.KEY, STATUS, COMP)
*********************************************************************
* REVISION - [08.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
*
* PROGRAM  - EST.CASE.MAINT.2A
*
* AUTHOR   - CURTIS WILLIAMS, COMPUTER BUSINESS ASSOCIATES
*
* DATE     - 06/15/87
*
* DESCRIPTION
*
* This program is used to capture casmaking related data.
*
*T26312 cmykleb 12/03/2001 * Add line numbers and scrolling ability to
*                            quantity and proce fields for cloth side
*                            and spine.
*T26449 cmykleb 03/05/2002 * Add new field for building in allowance.
*                            Currently this field is hard coded in the
*                            pgm.  This will allow the user to override
*                            the amount.
*T26556 cmykleb 06/03/2002 * Rev12 correction.
*T27924 cmykleb 03/17/2004 * Make calcs work at the component level.
*T29032 cmyklebu 01/02/2007 * Move pgm from rev12 to rev14.
*********************************************************************
*
*---- FILE COPY STATEMENTS
*
*COPY>JES.CPYLIB>SCOMMON.ESTIMATE
*COPY>JES.CPYLIB>ESTIMATE
*COPY>JES.CPYLIB>ESTIMATE.MATL
*COPY>JES.CPYLIB>ESTIMATE.TEMP
*COPY>JES.CPYLIB>EQUIPMENT
*COPY>JES.CPYLIB>ESTIMATE.BIND.SPOIL
*COPY>JES.CPYLIB>JES.FILE.VARS
*COPY>ICS.CPYLIB>COLOR              ; * T26556
*COPY>ICS.CPYLIB>FINISH             ; * T26556
*COPY>PMC.CPYLIB>COMPANY
*COPY>CPYLIB>SCREEN.COM
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
   MAT SYSCOM.REC =  ""; SYS.TYPE = 2
*
*---- OPEN FILES
*
*T29032 v
*  OPEN 'REV12A.SCREENS' TO REV12A.SCREENS ELSE
*     ERRMSG = 'REV12A.SCREENS FILE IS MISSING'
*     GOSUB 90000
*     RETURN
*  END
   OPEN 'JES.SCREENS' TO JES.SCREENS ELSE
      ERRMSG = 'JES.SCREENS FILE IS MISSING'
      GOSUB 90000
      RETURN
   END
*T29032 ^
*
*---- INITIALIZATION
*
*T29032 v
*  SCREEN DEFINE;EST.CASE.MAINT.2A;REV12A.SCREENS
   SCREEN DEFINE;EST.CASE.MAINT.2A;JES.SCREENS
*T29032 ^
   SCREEN FORMAT
*T27924 v
*  IF ACTION = "M" AND EST.BIND.COVER.STYLE = "C" AND EST.CASE.SIDE.CL = "" THEN NEW.REC = 1 ELSE NEW.REC = 0
   IF ACTION = "M" AND EST.BIND.COVER.STYLE<1,COMP> = "C" AND EST.CASE.SIDE.CL<1,COMP> = "" THEN NEW.REC = 1 ELSE NEW.REC = 0
*T27924 ^
   MATREAD ESTM.REC FROM ESTIMATE.MATL, CONO:"C" ELSE
      MAT ESTM.REC = ""
   END
   QCNT = COUNT(EST.QTY,VM) + 1
   QTY.LINE.COUNT = 3 ; * T26312
   GOSUB 80000
   GOSUB 70340
   GOSUB 70440
*
*----- MAIN PROCESSING
*
100*
*T27924 v
   S$DATA(48)<S$SCR> = COMP
   SCREEN DISPLAY;;48
*T27924 ^
120*
   IF NEW.REC THEN
      MODE = "A"
*T27924 v
*     FOR FLD = 1 TO 9
*        ON FLD GOSUB 1100,1200,1300,1400,1500,1600,1700,1800,1900
*        IF S$VALUE = "END" THEN GOTO 99999
*     NEXT FLD
*T27924 ^
      GOSUB 2100
      GOSUB 2200
   END
*
*---- GET OPERATOR REQUEST
*
500*
   BEGIN CASE
      CASE ACTION = "M"
         SCREEN FIELD;;51
         SCREEN INPUT;;51
      CASE 1
         SCREEN FIELD;;53
         SCREEN INPUT;;53
   END CASE
   OPTION = S$VALUE
   BEGIN CASE
      CASE OPTION = "" OR OPTION = "E" OR OPTION = "END"
         GOTO 99999
      CASE NUM(OPTION) AND OPTION # ""
         MODE = "C"
         BEGIN CASE
            CASE OPTION <= 10
               IF ACTION = "M" THEN
                  ON OPTION GOSUB 1100,1200,1300,1400,1500,1600,1700,1800,1900
               END ELSE
                  ERRMSG = "Invalid selection in inquiry mode! "
                  GOSUB 90000
               END
            CASE OPTION <= 20
               IF ACTION = "M" THEN
                  ON OPTION-10 GOSUB 2100,2200
               END ELSE
                  ERRMSG = "Invalid selection in inquiry mode! "
                  GOSUB 90000
               END
         END CASE
      CASE OPTION = "R"
         IF ACTION = "M" THEN
            RECALC = 1
*T27924 v
*           CALL EST.CASE.SUB (CONO, "CLOTH", RECALC)
            CALL EST.CASE.SUB (CONO, "CLOTH", RECALC, COMP)
*T27924 ^
            GOSUB 80000
            GOSUB 70300
            GOSUB 70400
         END ELSE
            ERRMSG = "Invalid selection in inquiry mode! "
            GOSUB 90000
         END
      CASE 1
         ERRMSG = "Invalid Selection"
         GOSUB 90000
   END CASE
   GOTO 500
*
*---- GET BACK STYLE
*
1100*
*T27924 v
*  PREV.BACK.STYLE = EST.CASE.BACK.STYLE
   PREV.BACK.STYLE = EST.CASE.BACK.STYLE<1,COMP>
*T27924 ^
   SCREEN FIELD;;2
   SCREEN INPUT;;2;RETURN
*T27924 v
*  EST.CASE.BACK.STYLE = S$VALUE
*  IF MODE = "C" AND EST.CASE.BACK.STYLE # PREV.BACK.STYLE THEN
   EST.CASE.BACK.STYLE<1,COMP> = S$VALUE
   IF MODE = "C" AND EST.CASE.BACK.STYLE<1,COMP> # PREV.BACK.STYLE THEN
*T27924 ^
      RECALC = 1
*T27924 v
*     CALL EST.CASE.SUB (CONO, "BOARD", RECALC)
*     CALL EST.CASE.SUB (CONO, "CLOTH", RECALC)
      CALL EST.CASE.SUB (CONO, "BOARD", RECALC, COMP)
      CALL EST.CASE.SUB (CONO, "CLOTH", RECALC, COMP)
*T27924 ^
      GOSUB 80000
      GOSUB 70300
      GOSUB 70400
   END
   RETURN
*
*---- GET CASE PIECES
*
1200*
*T27924 v
*  PREV.PIECES = EST.CASE.PIECES
   PREV.PIECES = EST.CASE.PIECES<1,COMP>
*T27924 ^
   SCREEN FIELD;;3
   SCREEN INPUT;;3;RETURN
*T27924 v
*  EST.CASE.PIECES = S$VALUE
*  IF MODE = "C" AND EST.CASE.PIECES # PREV.PIECES THEN
   EST.CASE.PIECES<1,COMP> = S$VALUE
   IF MODE = "C" AND EST.CASE.PIECES<1,COMP> # PREV.PIECES THEN
*T27924 ^
      RECALC = 1
*T27924 v
*     CALL EST.CASE.SUB (CONO, "CLOTH", RECALC)
      CALL EST.CASE.SUB (CONO, "CLOTH", RECALC, COMP)
*T27924 ^
      GOSUB 80000
      GOSUB 70300
      GOSUB 70400
   END
   RETURN
*
*---- GET SHOW DIMENSION
*
1300*
*T27924 v
*  PREV.SHOW.SIZE = EST.CASE.SHOW.SIZE
*  IF EST.CASE.PIECES = 1 THEN
   PREV.SHOW.SIZE = EST.CASE.SHOW.SIZE<1,COMP>
   IF EST.CASE.PIECES<1,COMP> = 1 THEN
*T27924 ^
      S$DATA(4)<S$SCR> = ""
      SCREEN DISPLAY;;4
*T27924 v
*     EST.CASE.SHOW.SIZE = ""
      EST.CASE.SHOW.SIZE<1,COMP> = ""
*T27924 ^
   END ELSE
      SCREEN FIELD;;4
      SCREEN INPUT;;4;RETURN
*T27924 v
*     EST.CASE.SHOW.SIZE = S$VALUE
      EST.CASE.SHOW.SIZE<1,COMP> = S$VALUE
*T27924 ^
   END
*T27924 v
*  IF MODE = "C" AND EST.CASE.SHOW.SIZE # PREV.SHOW.SIZE THEN
   IF MODE = "C" AND EST.CASE.SHOW.SIZE<1,COMP> # PREV.SHOW.SIZE THEN
*T27924 ^
      RECALC = 1
*T27924 v
*     CALL EST.CASE.SUB (CONO, "CLOTH", RECALC)
      CALL EST.CASE.SUB (CONO, "CLOTH", RECALC, COMP)
*T27924 ^
      GOSUB 70300
      GOSUB 70400
   END
   RETURN
*
*---- GET CASE-MAKER DATA
*
1400*
*T27924 v
*  S$DATA(5)<S$SCR> = EST.CASEMAKER.CCTR
   S$DATA(5)<S$SCR> = EST.CASEMAKER.CCTR<1,COMP>
*T27924 ^
   SCREEN FIELD;;5
   SCREEN INPUT;;5;RETURN
   IF S$VALUE = "???" THEN
      FFLD=5;FREF=1;XTYPE="26";GOSUB 49100
      IF XCODE = "" THEN GOTO 1400
   END
   IF S$VALUE # "" THEN
      MATREAD EQUIPMENT.REC FROM EQUIPMENT, CONO:S$VALUE ELSE
         ERRMSG = "Invalid Equipment ID. Try again !"
         GOSUB 90000
         GOTO 1400
      END
      IF EQP.TYPE # "26" THEN
         ERRMSG = "Invalid Equipment Type. Try again! "
         GOSUB 90000
         GOTO 1400
      END
   END
*T27924 v
*  EST.CASEMAKER.CCTR = S$VALUE
   EST.CASEMAKER.CCTR<1,COMP> = S$VALUE
*T27924 ^
   RETURN
*
*---- GET CASE-STAMPER DATA
*
1500*
*T27924 v
*  S$DATA(6)<S$SCR> = EST.CASESTAMP.CCTR
   S$DATA(6)<S$SCR> = EST.CASESTAMP.CCTR<1,COMP>
*T27924 ^
   SCREEN FIELD;;6
   SCREEN INPUT;;6;RETURN
   IF S$VALUE = "???" THEN
      FFLD=6;FREF=1;XTYPE="28";GOSUB 49100
      IF XCODE = "" THEN GOTO 1500
   END
   IF S$VALUE = "" THEN
*T27924 v
*     EST.CASESTAMP.CCTR = ""
*     EST.CASESTAMP.HITS = ""
      EST.CASESTAMP.CCTR<1,COMP> = ""
      EST.CASESTAMP.HITS<1,COMP> = ""
*T27924 ^
   END ELSE
      MATREAD EQUIPMENT.REC FROM EQUIPMENT, CONO:S$VALUE ELSE
         ERRMSG = "Invalid Equipment ID. Try again !"
         GOSUB 90000
         GOTO 1500
      END
      IF EQP.TYPE # "28" THEN
         ERRMSG = "Invalid Equipment Type. Try again! "
         GOSUB 90000
         GOTO 1500
      END
*T27924 v
*     EST.CASESTAMP.CCTR = S$VALUE
      EST.CASESTAMP.CCTR<1,COMP> = S$VALUE
*T27924 ^
      SCREEN FIELD;;7
      SCREEN INPUT;;7;RETURN
*T27924 v
*     EST.CASESTAMP.HITS = S$VALUE
      EST.CASESTAMP.HITS<1,COMP> = S$VALUE
*T27924 ^
   END
   RETURN
*
*---- CASE CASE-IN DATA
*
1600*
*T27924 v
*  S$DATA(8)<S$SCR> = EST.CASEIN.CCTR
   S$DATA(8)<S$SCR> = EST.CASEIN.CCTR<1,COMP>
*T27924 ^
   SCREEN FIELD;;8
   SCREEN INPUT;;8;RETURN
   IF S$VALUE = "???" THEN
      FFLD=8;FREF=1;XTYPE="30";GOSUB 49100
      IF XCODE = "" THEN GOTO 1600
   END
   IF S$VALUE # "" THEN
      MATREAD EQUIPMENT.REC FROM EQUIPMENT, CONO:S$VALUE ELSE
         ERRMSG = "Invalid Equipment ID. Try again !"
         GOSUB 90000
         GOTO 1600
      END
      IF EQP.TYPE # "30" THEN
         ERRMSG = "Invalid Equipment Type. Try again! "
         GOSUB 90000
         GOTO 1600
      END
   END
*T27924 v
*  EST.CASEIN.CCTR = S$VALUE
   EST.CASEIN.CCTR<1,COMP> = S$VALUE
*T27924 ^
   RETURN
*
*---- GET ENDLEAF SPOILAGE
*
1700*
*T27924 v
*  PREV.SPOIL = EST.CASE.SPOIL<1,1>
*  S$DATA(9)<S$SCR> = EST.CASE.SPOIL<1,1>
   PREV.SPOIL = EST.CASE.SPOIL<1,COMP,1>
   S$DATA(9)<S$SCR> = EST.CASE.SPOIL<1,COMP,1>
*T27924 ^
   SCREEN FIELD;;9
   SCREEN INPUT;;9;RETURN
   IF NOT(NUM(S$VALUE)) THEN
      MATREAD BST.REC FROM ESTIMATE.BIND.SPOIL, CONO:S$VALUE ELSE
         ERRMSG = "Invalid bindery spoilage table ID. Try again! "
         GOSUB 90000
         GOTO 1700
      END
   END
*T27924 v
*  EST.CASE.SPOIL<1,1> = S$VALUE
   EST.CASE.SPOIL<1,COMP,1> = S$VALUE
*T27924 ^
   RETURN
*
*---- GET BOARD SPOILAGE
*
1800*
*T27924 v
*  PREV.SPOIL = EST.CASE.SPOIL<1,2>
*  S$DATA(10)<S$SCR> = EST.CASE.SPOIL<1,2>
   PREV.SPOIL = EST.CASE.SPOIL<1,COMP,2>
   S$DATA(10)<S$SCR> = EST.CASE.SPOIL<1,COMP,2>
*T27924 ^
   SCREEN FIELD;;10
   SCREEN INPUT;;10;RETURN
   IF NOT(NUM(S$VALUE)) THEN
      MATREAD BST.REC FROM ESTIMATE.BIND.SPOIL, CONO:S$VALUE ELSE
         ERRMSG = "Invalid bindery spoilage table ID. Try again! "
         GOSUB 90000
         GOTO 1800
      END
   END
*T27924 v
*  EST.CASE.SPOIL<1,2> = S$VALUE
   EST.CASE.SPOIL<1,COMP,2> = S$VALUE
*T27924 ^
   RETURN
*
*---- GET CLOTH SPOILAGE
*
1900*
*T27924 v
*  PREV.SPOIL = EST.CASE.SPOIL<1,3>
*  S$DATA(11)<S$SCR> = EST.CASE.SPOIL<1,3>
   PREV.SPOIL = EST.CASE.SPOIL<1,COMP,3>
   S$DATA(11)<S$SCR> = EST.CASE.SPOIL<1,COMP,3>
*T27924 ^
   SCREEN FIELD;;11
   SCREEN INPUT;;11;RETURN
   IF NOT(NUM(S$VALUE)) THEN
      MATREAD BST.REC FROM ESTIMATE.BIND.SPOIL, CONO:S$VALUE ELSE
         ERRMSG = "Invalid bindery spoilage table ID. Try again! "
         GOSUB 90000
         GOTO 1900
      END
   END
*T27924 v
*  EST.CASE.SPOIL<1,3> = S$VALUE
*  IF MODE = "C" AND EST.CASE.SPOIL<1,3> # PREV.SPOIL THEN
   EST.CASE.SPOIL<1,COMP,3> = S$VALUE
   IF MODE = "C" AND EST.CASE.SPOIL<1,COMP,3> # PREV.SPOIL THEN
*T27924 ^
      GOSUB 70300
      GOSUB 70400
   END
   RETURN
*
*---- GET SIDE CLOTH ITEM
*
2100*
*T27924 v
*  IF EST.CASE.SIDE.CL<1,1> = "" THEN
*     CALL EST.CASE.CUT.SIZE (CONO, "CLOTH")
*     S$DATA(24)<S$SCR> = EST.CASE.SIDE.CL.CUT.SIZE<1,1>
*     S$DATA(25)<S$SCR> = EST.CASE.SIDE.CL.CUT.SIZE<1,2>
   IF EST.CASE.SIDE.CL<1,COMP,1> = "" THEN
      CALL EST.CASE.CUT.SIZE (CONO, "SIDE", COMP)
      S$DATA(24)<S$SCR> = EST.CASE.SIDE.CL.CUT.SIZE<1,COMP,1>
      S$DATA(25)<S$SCR> = EST.CASE.SIDE.CL.CUT.SIZE<1,COMP,2>
*T27924 ^
      SCREEN DISPLAY;;24
      SCREEN DISPLAY;;25
   END
   RECALC = 0
*T27924 v
*  PREV.SIDE.CL = EST.CASE.SIDE.CL<1,1>
   PREV.SIDE.CL = EST.CASE.SIDE.CL<1,COMP,1>
*T27924 ^
   S$DATA(12)<S$SCR> = PREV.SIDE.CL
   SCREEN FIELD;;12
   SCREEN INPUT;;12;RETURN
   IF S$VALUE = "???" THEN
      FFLD=12;FREF=1;XTYPE="C";GOSUB 49200
      IF XCODE="" THEN GOTO 2100
   END
   IF S$VALUE = "" OR S$VALUE # PREV.SIDE.CL THEN
      IF S$VALUE = "" THEN
*T27924 v
*        EST.CASE.SIDE.CL = ""
*        EST.CASE.SIDE.CL.SRC = ""
*        EST.CASE.SIDE.CL.SIZE = ""
*        EST.CASE.SIDE.CL.SPEC = ""
*        EST.CASE.SIDE.CL.CUT.DIR = ""
*        EST.CASE.SIDE.CL.PRICE = ""
         EST.CASE.SIDE.CL<1,COMP> = ""
         EST.CASE.SIDE.CL.SRC<1,COMP> = ""
         EST.CASE.SIDE.CL.SIZE<1,COMP> = ""
         EST.CASE.SIDE.CL.SPEC<1,COMP> = ""
         EST.CASE.SIDE.CL.CUT.DIR<1,COMP> = ""
         EST.CASE.SIDE.CL.PRICE<1,COMP> = ""
         EST.CASE.SIDE.CL.UOM<1,COMP> = ""
*T27924 ^
         RECALC = 1
      END ELSE
         LOCATE S$VALUE IN ESTM.PROD<1>,1 SETTING MP ELSE
            ERRMSG = "Invalid item ID. Try again !"
            GOSUB 90000
            GOTO 2100
         END
*T27924 v
*        EST.CASE.SIDE.CL<1,1> = S$VALUE
*        EST.CASE.SIDE.CL<1,2> = ESTM.DESC<1,MP>
*        EST.CASE.SIDE.CL.SIZE<1,1> = ESTM.WIDTH<1,MP>
*        EST.CASE.SIDE.CL.SIZE<1,2> = ESTM.LENGTH<1,MP>
*        EST.CASE.SIDE.CL.SRC = ""
*        EST.CASE.SIDE.CL.SPEC<1,1> = ESTM.EMBOSS<1,MP>
*        EST.CASE.SIDE.CL.SPEC<1,2> = ESTM.GRAIN<1,MP>
*        EST.CASE.SIDE.CL.SPEC<1,3> = ESTM.CLR.CD<1,MP>
*        EST.CASE.SIDE.CL.SPEC<1,4> = ESTM.FINISH.CD<1,MP>
*        EST.CASE.SIDE.CL.PRICE<1,2> = ESTM.UM<1,MP>
*        EST.CASE.SIDE.CL.PRICE<1,3> = ESTM.COST.UNIT<1,MP>
         EST.CASE.SIDE.CL<1,COMP,1> = S$VALUE
         EST.CASE.SIDE.CL<1,COMP,2> = ESTM.DESC<1,MP>
         EST.CASE.SIDE.CL.SIZE<1,COMP,1> = ESTM.WIDTH<1,MP>
         EST.CASE.SIDE.CL.SIZE<1,COMP,2> = ESTM.LENGTH<1,MP>
         EST.CASE.SIDE.CL.SRC<1,COMP> = ""
         EST.CASE.SIDE.CL.SPEC<1,COMP,1> = ESTM.EMBOSS<1,MP>
         EST.CASE.SIDE.CL.SPEC<1,COMP,2> = ESTM.GRAIN<1,MP>
         EST.CASE.SIDE.CL.SPEC<1,COMP,3> = ESTM.CLR.CD<1,MP>
         EST.CASE.SIDE.CL.SPEC<1,COMP,4> = ESTM.FINISH.CD<1,MP>
         EST.CASE.SIDE.CL.UOM<1,COMP,1> = ESTM.UM<1,MP>
         EST.CASE.SIDE.CL.UOM<1,COMP,2> = ESTM.COST.UNIT<1,MP>
*T27924 ^
         RECALC = 1
      END
      GOSUB 80000
   END
*T27924 v
*  IF EST.CASE.SIDE.CL<1,1> = "" THEN GOTO 2190
*  MATL = EST.CASE.SIDE.CL<1,1>
   IF EST.CASE.SIDE.CL<1,COMP,1> = "" THEN GOTO 2190
   MATL = EST.CASE.SIDE.CL<1,COMP,1>
*T27924 ^
   LOCATE MATL IN ESTM.PROD<1>,1 SETTING MP ELSE MP = 999
2110*
   SCREEN FIELD;;13
   SCREEN INPUT;;13;RETURN
*T27924 v
*  EST.CASE.SIDE.CL<1,2> = S$VALUE
   EST.CASE.SIDE.CL<1,COMP,2> = S$VALUE
*T27924 ^
2112*
*T27924 v
*  PREV.SIZE = EST.CASE.SIDE.CL.SIZE<1,1>
   PREV.SIZE = EST.CASE.SIDE.CL.SIZE<1,COMP,1>
*T27924 ^
   SCREEN FIELD;;14
   SCREEN INPUT;;14;RETURN
*T27924 v
*  EST.CASE.SIDE.CL.SIZE<1,1> = S$VALUE
*  IF EST.CASE.SIDE.CL.SIZE<1,1> # PREV.SIZE THEN RECALC = 1
   EST.CASE.SIDE.CL.SIZE<1,COMP,1> = S$VALUE
   IF EST.CASE.SIDE.CL.SIZE<1,COMP,1> # PREV.SIZE THEN RECALC = 1
*T27924 ^
2114*
*T27924 v
*  PREV.SIZE = EST.CASE.SIDE.CL.SIZE<1,2>
   PREV.SIZE = EST.CASE.SIDE.CL.SIZE<1,COMP,2>
*T27924 ^
   SCREEN FIELD;;15
   SCREEN INPUT;;15;RETURN
*T27924 v
*  EST.CASE.SIDE.CL.SIZE<1,2> = S$VALUE
*  IF EST.CASE.SIDE.CL.SIZE<1,2> # PREV.SIZE THEN RECALC = 1
*  IF EST.CASE.SIDE.CL.SIZE<1,2> = "" THEN
*     EST.CASE.SIDE.CL.SRC = "R"
*  END ELSE
*     EST.CASE.SIDE.CL.SRC = "S"
*  END
*  S$DATA(16)<S$SCR> = EST.CASE.SIDE.CL.SRC
   EST.CASE.SIDE.CL.SIZE<1,COMP,2> = S$VALUE
   IF EST.CASE.SIDE.CL.SIZE<1,COMP,2> # PREV.SIZE THEN RECALC = 1
   IF EST.CASE.SIDE.CL.SIZE<1,COMP,2> = "" THEN
      EST.CASE.SIDE.CL.SRC<1,COMP> = "R"
   END ELSE
      EST.CASE.SIDE.CL.SRC<1,COMP> = "S"
   END
   S$DATA(16)<S$SCR> = EST.CASE.SIDE.CL.SRC<1,COMP>
*T27924 ^
   SCREEN DISPLAY;;16
2118*
   SCREEN FIELD;;17
   SCREEN INPUT;;17;RETURN
*T27924 v
*  EST.CASE.SIDE.CL.SPEC<1,1> = S$VALUE
   EST.CASE.SIDE.CL.SPEC<1,COMP,1> = S$VALUE
*T27924 ^
2120*
   SCREEN FIELD;;18
   SCREEN INPUT;;18;RETURN
*T27924 v
*  EST.CASE.SIDE.CL.SPEC<1,2> = S$VALUE
   EST.CASE.SIDE.CL.SPEC<1,COMP,2> = S$VALUE
*T27924 ^
2122*
   S$DATA(19)<S$SCR> = EST.CASE.SIDE.CL.SPEC<1,COMP,3> ; * T26556
   SCREEN FIELD;;19
   SCREEN INPUT;;19;RETURN
*T26556 v
   MATREAD COLOR.REC FROM COLOR, CONO:S$VALUE ELSE
      ERRMSG = 'Invalid Color. Try again!'
      GOSUB 90000
      GOTO 2122
   END
*T26556 ^
*T27924 v
*  EST.CASE.SIDE.CL.SPEC<1,3> = S$VALUE
   EST.CASE.SIDE.CL.SPEC<1,COMP,3> = S$VALUE
*T27924 ^
2124*
   S$DATA(20)<S$SCR> = EST.CASE.SIDE.CL.SPEC<1,COMP,4> ; * T26556
   SCREEN FIELD;;20
   SCREEN INPUT;;20;RETURN
*T26556 v
   MATREAD FINISH.REC FROM FINISH, CONO:S$VALUE ELSE
      ERRMSG = 'Invalid Finish. Try again!'
      GOSUB 90000
      GOTO 2124
   END
*T26556 ^
*T27924 v
*  EST.CASE.SIDE.CL.SPEC<1,4> = S$VALUE
   EST.CASE.SIDE.CL.SPEC<1,COMP,4> = S$VALUE
*T27924 ^
2128*
*T27924 v
*  IF EST.CASE.SIDE.CL.SRC = "S" THEN
*     EST.CASE.SIDE.CL.PRICE<1,2> = "SHT"
*  END ELSE
*     EST.CASE.SIDE.CL.PRICE<1,2> = "YD"
*  END
*  S$DATA(22)<S$SCR> = EST.CASE.SIDE.CL.PRICE<1,2>
   IF EST.CASE.SIDE.CL.SRC<1,COMP> = "S" THEN
      EST.CASE.SIDE.CL.UOM<1,COMP,1> = "SHT"
   END ELSE
      EST.CASE.SIDE.CL.UOM<1,COMP,1> = "YD"
   END
   S$DATA(22)<S$SCR> = EST.CASE.SIDE.CL.UOM<1,COMP,1>
*T27924 ^
   SCREEN DISPLAY;;22
2130*
   SCREEN FIELD;;23
   SCREEN INPUT;;23;RETURN
*T27924 v
*  EST.CASE.SIDE.CL.PRICE<1,3> = S$VALUE
   EST.CASE.SIDE.CL.UOM<1,COMP,2> = S$VALUE
*T27924 ^
*T26449 v
2135*
   SCREEN FIELD;;49
   BEGIN CASE
      CASE EST.CASE.SIDE.CL.UOM<1,COMP,4> # ''
         S$DEFAULT = EST.CASE.SIDE.CL.UOM<1,COMP,4>
      CASE EST.CASE.BOARD.UOM<1,COMP,4> # ''
         S$DEFAULT = EST.CASE.BOARD.UOM<1,COMP,4>
      CASE EST.BIND.COVER.STYLE = "C" AND EST.CASE.BACK.STYLE = "R"
         BEGIN CASE
            CASE EST.BIND.EDGE.TYPE = "S"
               S$DEFAULT = '01875'
            CASE EST.BIND.EDGE.TYPE = "RF"
               S$DEFAULT = '01250'
            CASE EST.BIND.EDGE.TYPE = "RFF"
               S$DEFAULT = '01250'
         END CASE
      CASE EST.BIND.COVER.STYLE = "C" AND EST.CASE.BACK.STYLE = "F"
         S$DEFAULT = '00625'
   END CASE
   IF S$DEFAULT # "" THEN S$O.R = "O"
   SCREEN INPUT;;49;RETURN
   EST.CASE.SIDE.CL.UOM<1,COMP,4> = S$VALUE
*T26449 ^
2140*
*T27924 v
*  PREV.CUT.DIR = EST.CASE.SIDE.CL.CUT.DIR
   PREV.CUT.DIR = EST.CASE.SIDE.CL.CUT.DIR<1,COMP>
*T27924 ^
   SCREEN FIELD;;46
   SCREEN INPUT;;46;RETURN
*T27924 v
*  EST.CASE.SIDE.CL.CUT.DIR = S$VALUE
*  IF EST.CASE.SIDE.CL.CUT.DIR # PREV.CUT.DIR THEN RECALC = 1
   EST.CASE.SIDE.CL.CUT.DIR<1,COMP> = S$VALUE
   IF EST.CASE.SIDE.CL.CUT.DIR<1,COMP> # PREV.CUT.DIR THEN RECALC = 1
*T27924 ^
2190*
*T27924 v
*  CALL EST.CASE.SUB (CONO, "CLOTH", RECALC)
   CALL EST.CASE.SUB (CONO, "CLOTH", RECALC, COMP)
*T27924 ^
*T27924 v
*  S$DATA(24)<S$SCR> = EST.CASE.SIDE.CL.CUT.SIZE<1,1>
*  S$DATA(25)<S$SCR> = EST.CASE.SIDE.CL.CUT.SIZE<1,2>
*  S$DATA(26)<S$SCR> = EST.CASE.SIDE.CL.CUT.OUT
   S$DATA(24)<S$SCR> = EST.CASE.SIDE.CL.CUT.SIZE<1,COMP,1>
   S$DATA(25)<S$SCR> = EST.CASE.SIDE.CL.CUT.SIZE<1,COMP,2>
   S$DATA(26)<S$SCR> = EST.CASE.SIDE.CL.CUT.OUT<1,COMP>
*T27924 ^
   SCREEN DISPLAY;;24
   SCREEN DISPLAY;;25
   SCREEN DISPLAY;;26
   SIZE.CHG = 0
*T27924 v
*  IF EST.CASE.SIDE.CL.CUT.SIZE<1,1> # "" THEN
*     PREV.SIZE = EST.CASE.SIDE.CL.CUT.SIZE<1,1>
   IF EST.CASE.SIDE.CL<1,COMP,1> # '' THEN
      PREV.SIZE = EST.CASE.SIDE.CL.CUT.SIZE<1,COMP,1>
*T27924 ^
      SCREEN FIELD;;24
      SCREEN INPUT;;24;RETURN
*T27924 v
*     EST.CASE.SIDE.CL.CUT.SIZE<1,1> = S$VALUE
*     IF EST.CASE.SIDE.CL.CUT.SIZE<1,1> # PREV.SIZE THEN SIZE.CHG = 1
*  END
*  IF EST.CASE.SIDE.CL.CUT.SIZE<1,2> # "" THEN
*     PREV.SIZE = EST.CASE.SIDE.CL.CUT.SIZE<1,2>
      EST.CASE.SIDE.CL.CUT.SIZE<1,COMP,1> = S$VALUE
      IF EST.CASE.SIDE.CL.CUT.SIZE<1,COMP,1> # PREV.SIZE THEN SIZE.CHG = 1
   END
   IF EST.CASE.SIDE.CL<1,COMP,1> # '' THEN
      PREV.SIZE = EST.CASE.SIDE.CL.CUT.SIZE<1,COMP,2>
      S$DEFAULT = EST.CASE.SIDE.CL.CUT.SIZE<1,COMP,2>
*T27924 ^
      SCREEN FIELD;;25
      SCREEN INPUT;;25;RETURN
*T27924 v
*     EST.CASE.SIDE.CL.CUT.SIZE<1,2> = S$VALUE
*     IF EST.CASE.SIDE.CL.CUT.SIZE<1,2> # PREV.SIZE THEN SIZE.CHG = 1
      EST.CASE.SIDE.CL.CUT.SIZE<1,COMP,2> = S$VALUE
      IF EST.CASE.SIDE.CL.CUT.SIZE<1,COMP,2> # PREV.SIZE THEN SIZE.CHG = 1
*T27924 ^
   END
   IF SIZE.CHG THEN
*T27924 v
*     CALL EST.CASE.SUB (CONO, "CLOTH", "0")
      CALL EST.CASE.SUB (CONO, "CLOTH", "0", COMP)
*T27924 ^
*T27924 v
*     S$DATA(26)<S$SCR> = EST.CASE.SIDE.CL.CUT.OUT
      S$DATA(26)<S$SCR> = EST.CASE.SIDE.CL.CUT.OUT<1,COMP>
*T27924 ^
      SCREEN DISPLAY;;26
   END
   GOSUB 70300
   RETURN
*
*---- GET SPINE CLOTH ITEM
*
2200*
*T27924 v
*  IF EST.CASE.SPINE.CL<1,1> = "" THEN
*     CALL EST.CASE.CUT.SIZE (CONO, "CLOTH")
*     S$DATA(41)<S$SCR> = EST.CASE.SPINE.CL.CUT.SIZE<1,1>
*     S$DATA(42)<S$SCR> = EST.CASE.SPINE.CL.CUT.SIZE<1,2>
   IF EST.CASE.SPINE.CL<1,COMP,1> = "" THEN
      CALL EST.CASE.CUT.SIZE (CONO, "SPINE", COMP)
      S$DATA(41)<S$SCR> = EST.CASE.SPINE.CL.CUT.SIZE<1,COMP,1>
      S$DATA(42)<S$SCR> = EST.CASE.SPINE.CL.CUT.SIZE<1,COMP,2>
*T27924 ^
      SCREEN DISPLAY;;41
      SCREEN DISPLAY;;42
   END
   RECALC = 0
*T27924 v
*  PREV.SPINE = EST.CASE.SPINE.CL<1,1>
   PREV.SPINE = EST.CASE.SPINE.CL<1,COMP,1>
*T27924 ^
   S$DATA(29)<S$SCR> = PREV.SPINE
   SCREEN FIELD;;29
   SCREEN INPUT;;29;RETURN
   IF S$VALUE = "???" THEN
      FFLD=29;FREF=1;XTYPE="C";GOSUB 49200
      IF XCODE="" THEN GOTO 2200
   END
   IF S$VALUE = "" OR S$VALUE # PREV.SPINE THEN
      IF S$VALUE = "" THEN
*T27924 v
*        EST.CASE.SPINE.CL = ""
*        EST.CASE.SPINE.CL.SRC = ""
*        EST.CASE.SPINE.CL.SIZE = ""
*        EST.CASE.SPINE.CL.SPEC = ""
*        EST.CASE.SPINE.CL.CUT.DIR = ""
*        EST.CASE.SPINE.CL.PRICE = ""
         EST.CASE.SPINE.CL<1,COMP> =  ""
         EST.CASE.SPINE.CL.SRC<1,COMP> =  ""
         EST.CASE.SPINE.CL.SIZE<1,COMP> =  ""
         EST.CASE.SPINE.CL.SPEC<1,COMP> =  ""
         EST.CASE.SPINE.CL.CUT.DIR<1,COMP> =  ""
         EST.CASE.SPINE.CL.PRICE<1,COMP> =  ""
         EST.CASE.SPINE.CL.UOM<1,COMP> = ""
*T27924 ^
         RECALC = 1
      END ELSE
         LOCATE S$VALUE IN ESTM.PROD<1>,1 SETTING MP ELSE
            ERRMSG = "Invalid item ID. Try again !"
            GOSUB 90000
            GOTO 2200
         END
*T27924 v
*        EST.CASE.SPINE.CL<1,1> = S$VALUE
*        EST.CASE.SPINE.CL<1,2> = ESTM.DESC<1,MP>
*        EST.CASE.SPINE.CL.SIZE<1,1> = ESTM.WIDTH<1,MP>
*        EST.CASE.SPINE.CL.SIZE<1,2> = ESTM.LENGTH<1,MP>
*        EST.CASE.SPINE.CL.SRC = ""
*        EST.CASE.SPINE.CL.SPEC<1,1> = ESTM.EMBOSS<1,MP>
*        EST.CASE.SPINE.CL.SPEC<1,2> = ESTM.GRAIN<1,MP>
*        EST.CASE.SPINE.CL.SPEC<1,3> = ESTM.CLR.CD<1,MP>
*        EST.CASE.SPINE.CL.SPEC<1,4> = ESTM.FINISH.CD<1,MP>
*        EST.CASE.SPINE.CL.PRICE<1,2> = ESTM.UM<1,MP>
*        EST.CASE.SPINE.CL.PRICE<1,3> = ESTM.COST.UNIT<1,MP>
         EST.CASE.SPINE.CL<1,COMP,1> = S$VALUE
         EST.CASE.SPINE.CL<1,COMP,2> = ESTM.DESC<1,MP>
         EST.CASE.SPINE.CL.SIZE<1,COMP,1> = ESTM.WIDTH<1,MP>
         EST.CASE.SPINE.CL.SIZE<1,COMP,2> = ESTM.LENGTH<1,MP>
         EST.CASE.SPINE.CL.SRC<1,COMP> = ""
         EST.CASE.SPINE.CL.SPEC<1,COMP,1> = ESTM.EMBOSS<1,MP>
         EST.CASE.SPINE.CL.SPEC<1,COMP,2> = ESTM.GRAIN<1,MP>
         EST.CASE.SPINE.CL.SPEC<1,COMP,3> = ESTM.CLR.CD<1,MP>
         EST.CASE.SPINE.CL.SPEC<1,COMP,4> = ESTM.FINISH.CD<1,MP>
         EST.CASE.SPINE.CL.UOM<1,COMP,1> = ESTM.UM<1,MP>
         EST.CASE.SPINE.CL.UOM<1,COMP,2> = ESTM.COST.UNIT<1,MP>
*T27924 ^
         RECALC = 1
      END
      GOSUB 80000
   END
*T27924 v
*  IF EST.CASE.SPINE.CL<1,1> = "" THEN GOTO 2290
*  MATL = EST.CASE.SPINE.CL<1,1>
   IF EST.CASE.SPINE.CL<1,COMP,1> = "" THEN GOTO 2290
   MATL = EST.CASE.SPINE.CL<1,COMP,1>
*T27924 ^
   LOCATE MATL IN ESTM.PROD<1>,1 SETTING MP ELSE MP = 999
2210*
   SCREEN FIELD;;30
   SCREEN INPUT;;30;RETURN
*T27924 v
*  EST.CASE.SPINE.CL<1,2> = S$VALUE
   EST.CASE.SPINE.CL<1,COMP,2> = S$VALUE
*T27924 ^
2212*
*T27924 v
*  PREV.SIZE = EST.CASE.SPINE.CL.SIZE<1,1>
   PREV.SIZE = EST.CASE.SPINE.CL.SIZE<1,COMP,1>
*T27924 ^
   SCREEN FIELD;;31
   SCREEN INPUT;;31;RETURN
*T27924 v
*  EST.CASE.SPINE.CL.SIZE<1,1> = S$VALUE
*  IF EST.CASE.SPINE.CL.SIZE<1,1> # PREV.SIZE THEN RECALC = 1
*  PREV.SIZE = EST.CASE.SPINE.CL.SIZE<1,2>
   EST.CASE.SPINE.CL.SIZE<1,COMP,1> = S$VALUE
   IF EST.CASE.SPINE.CL.SIZE<1,COMP,1> # PREV.SIZE THEN RECALC = 1
   PREV.SIZE = EST.CASE.SPINE.CL.SIZE<1,COMP,2>
*T27924 ^
   SCREEN FIELD;;32
   SCREEN INPUT;;32;RETURN
*T27924 v
*  EST.CASE.SPINE.CL.SIZE<1,2> = S$VALUE
*  IF EST.CASE.SPINE.CL.SIZE<1,2> # PREV.SIZE THEN RECALC = 1
*  IF EST.CASE.SPINE.CL.SIZE<1,2> = "" THEN
*     EST.CASE.SPINE.CL.SRC = "R"
*  END ELSE
*     EST.CASE.SPINE.CL.SRC = "S"
*  END
*  S$DATA(33)<S$SCR> = EST.CASE.SPINE.CL.SRC
   EST.CASE.SPINE.CL.SIZE<1,COMP,2> = S$VALUE
   IF EST.CASE.SPINE.CL.SIZE<1,COMP,2> # PREV.SIZE THEN RECALC = 1
   IF EST.CASE.SPINE.CL.SIZE<1,COMP,2> = "" THEN
      EST.CASE.SPINE.CL.SRC<1,COMP> = "R"
   END ELSE
      EST.CASE.SPINE.CL.SRC<1,COMP> = "S"
   END
   S$DATA(33)<S$SCR> = EST.CASE.SPINE.CL.SRC<1,COMP>
*T27924 ^
   SCREEN DISPLAY;;33
2218*
   SCREEN FIELD;;34
   SCREEN INPUT;;34;RETURN
*T27924 v
*  EST.CASE.SPINE.CL.SPEC<1,1> = S$VALUE
   EST.CASE.SPINE.CL.SPEC<1,COMP,1> = S$VALUE
*T27924 ^
2220*
   SCREEN FIELD;;35
   SCREEN INPUT;;35;RETURN
*T27924 v
*  EST.CASE.SPINE.CL.SPEC<1,2> = S$VALUE
   EST.CASE.SPINE.CL.SPEC<1,COMP,2> = S$VALUE
*T27924 ^
2221*
   S$DATA(36)<S$SCR> = EST.CASE.SPINE.CL.SPEC<1,3> ; * T26556
   SCREEN FIELD;;36
   SCREEN INPUT;;36;RETURN
*T26556 v
   MATREAD COLOR.REC FROM COLOR, CONO:S$VALUE ELSE
      ERRMSG = 'Invalid Color. Try again!'
      GOSUB 90000
      GOTO 2221
   END
*T26556 ^
*T27924 v
*  EST.CASE.SPINE.CL.SPEC<1,3> = S$VALUE
   EST.CASE.SPINE.CL.SPEC<1,COMP,3> = S$VALUE
*T27924 ^
2222*
   S$DATA(37)<S$SCR> = EST.CASE.SPINE.CL.SPEC<1,4> ; * T26556
   SCREEN FIELD;;37
   SCREEN INPUT;;37;RETURN
*T26556 v
   MATREAD FINISH.REC FROM FINISH, CONO:S$VALUE ELSE
      ERRMSG = 'Invalid Finish. Try again!'
      GOSUB 90000
      GOTO 2222
   END
*T26556 ^
*T27924 v
*  EST.CASE.SPINE.CL.SPEC<1,4> = S$VALUE
*  IF EST.CASE.SPINE.CL.SRC = "S" THEN
*     EST.CASE.SPINE.CL.PRICE<1,2> = "SHT"
*  END ELSE
*     EST.CASE.SPINE.CL.PRICE<1,2> = "YD"
*  END
*  S$DATA(39)<S$SCR> = EST.CASE.SPINE.CL.PRICE<1,2>
   EST.CASE.SPINE.CL.SPEC<1,COMP,4> = S$VALUE
   IF EST.CASE.SPINE.CL.SRC<1,COMP> = "S" THEN
      EST.CASE.SPINE.CL.UOM<1,COMP,1> = "SHT"
   END ELSE
      EST.CASE.SPINE.CL.UOM<1,COMP,1> = "YD"
   END
   S$DATA(39)<S$SCR> = EST.CASE.SPINE.CL.UOM<1,COMP,1>
*T27924 ^
   SCREEN DISPLAY;;39
2230*
   SCREEN FIELD;;40
   SCREEN INPUT;;40;RETURN
*T27924 v
*  EST.CASE.SPINE.CL.PRICE<1,3> = S$VALUE
   EST.CASE.SPINE.CL.UOM<1,COMP,2> = S$VALUE
*T27924 ^
2240*
*T27924 v
*  PREV.CUT.DIR = EST.CASE.SPINE.CL.CUT.DIR
   PREV.CUT.DIR = EST.CASE.SPINE.CL.CUT.DIR<1,COMP>
*T27924 ^
   SCREEN FIELD;;47
   SCREEN INPUT;;47;RETURN
*T27924 v
*  EST.CASE.SPINE.CL.CUT.DIR = S$VALUE
*  IF EST.CASE.SPINE.CL.CUT.DIR # PREV.CUT.DIR THEN RECALC = 1
   EST.CASE.SPINE.CL.CUT.DIR<1,COMP> = S$VALUE
   IF EST.CASE.SPINE.CL.CUT.DIR<1,COMP> # PREV.CUT.DIR THEN RECALC = 1
*T27924 ^
2290*
*T27924 v
*  CALL EST.CASE.SUB (CONO, "CLOTH", RECALC)
   CALL EST.CASE.SUB (CONO, "CLOTH", RECALC, COMP)
*T27924 ^
*T27924 v
*  S$DATA(41)<S$SCR> = EST.CASE.SPINE.CL.CUT.SIZE<1,1>
*  S$DATA(42)<S$SCR> = EST.CASE.SPINE.CL.CUT.SIZE<1,2>
*  S$DATA(43)<S$SCR> = EST.CASE.SPINE.CL.CUT.OUT
   S$DATA(41)<S$SCR> = EST.CASE.SPINE.CL.CUT.SIZE<1,COMP,1>
   S$DATA(42)<S$SCR> = EST.CASE.SPINE.CL.CUT.SIZE<1,COMP,2>
   S$DATA(43)<S$SCR> = EST.CASE.SPINE.CL.CUT.OUT<1,COMP>
*T27924 ^
   SCREEN DISPLAY;;41
   SCREEN DISPLAY;;42
   SCREEN DISPLAY;;43
   SIZE.CHG = 0
*T27924 v
*  IF EST.CASE.SPINE.CL.CUT.SIZE<1,1> # "" THEN
*     PREV.SIZE = EST.CASE.SPINE.CL.CUT.SIZE<1,1>
   IF EST.CASE.SPINE.CL.CUT.SIZE<1,COMP,1> # "" THEN
      PREV.SIZE = EST.CASE.SPINE.CL.CUT.SIZE<1,COMP,1>
*T27924 ^
      SCREEN FIELD;;41
      SCREEN INPUT;;41;RETURN
*T27924 v
*     EST.CASE.SPINE.CL.CUT.SIZE<1,1> = S$VALUE
*     IF EST.CASE.SPINE.CL.CUT.SIZE<1,1> # PREV.SIZE THEN SIZE.CHG = 1
*  END
*  IF EST.CASE.SPINE.CL.CUT.SIZE<1,2> # "" THEN
*     PREV.SIZE = EST.CASE.SPINE.CL.CUT.SIZE<1,2>
      EST.CASE.SPINE.CL.CUT.SIZE<1,COMP,1> = S$VALUE
      IF EST.CASE.SPINE.CL.CUT.SIZE<1,COMP,1> # PREV.SIZE THEN SIZE.CHG = 1
   END
   IF EST.CASE.SPINE.CL.CUT.SIZE<1,COMP,2> # "" THEN
      PREV.SIZE = EST.CASE.SPINE.CL.CUT.SIZE<1,COMP,2>
*T27924 ^
      SCREEN FIELD;;42
      SCREEN INPUT;;42;RETURN
*T27924 v
*     EST.CASE.SPINE.CL.CUT.SIZE<1,2> = S$VALUE
*     IF EST.CASE.SPINE.CL.CUT.SIZE<1,2> # PREV.SIZE THEN SIZE.CHG = 1
      EST.CASE.SPINE.CL.CUT.SIZE<1,COMP,2> = S$VALUE
      IF EST.CASE.SPINE.CL.CUT.SIZE<1,COMP,2> # PREV.SIZE THEN SIZE.CHG=1
*T27924 ^
   END
   IF SIZE.CHG THEN
*T27924 v
*     CALL EST.CASE.SUB (CONO, "CLOTH", "0")
*     S$DATA(43)<S$SCR> = EST.CASE.SPINE.CL.CUT.OUT
      CALL EST.CASE.SUB (CONO, "CLOTH", "0", COMP)
      S$DATA(43)<S$SCR> = EST.CASE.SPINE.CL.CUT.OUT<1,COMP>
*T27924 ^
      SCREEN DISPLAY;;43
   END
   GOSUB 70400
   RETURN
*
*---- EQUIPMENT SELECTION
*
49100*
   CALL EST.EQUIP.XREF(CONO,XTYPE,EQUIPMENT,COST.CNTR,XCODE)
   SCREEN FORMAT
   S$VALUE=XCODE
   S$DATA(FFLD)<S$SCR,FREF>=XCODE
   GOSUB 80090
   GOSUB 70345
   GOSUB 70445
   RETURN
*
*---- MATERIAL SELECTION
*
49200*
   S$SCR = S$SCR + 1
   CALL EST.MATL.XREF(CONO,ACTION,XTYPE,XCODE)
   SCREEN CLOSE
   S$SCR = S$SCR - 1
   SCREEN FORMAT
   S$VALUE=XCODE
   S$DATA(FFLD)<S$SCR,FREF>=XCODE
   GOSUB 80090
   GOSUB 70345
   GOSUB 70445
   RETURN
*
*---- CALCULATE ENDLEAF REQUIREMENT
*
70100*
*T27924 v
*  IF EST.CASE.ENDLF<1,1> # "" AND EST.CASE.ENDLF.CUT.OUT+0 > 0 THEN
   IF EST.CASE.ENDLF<1,COMP,1> # "" AND EST.CASE.ENDLF.CUT.OUT<1,COMP>+0 > 0 THEN
*T27924 ^
      FOR QPTR = 1 TO QCNT
         EQTY = EST.QTY<1,QPTR>
         BEGIN CASE
*T27924 v
*           CASE NUM(EST.CASE.SPOIL<1,1>)
*              SPOIL = INT(EQTY * (EST.CASE.SPOIL<1,1> / 100) + 0.99)
            CASE NUM(EST.CASE.SPOIL<1,COMP,1>)
               SPOIL = INT(EQTY * (EST.CASE.SPOIL<1,COMP,1> / 100) + 0.99)
*T27924 ^
            CASE 1
               MATREAD BST.REC FROM ESTIMATE.BIND.SPOIL, CONO:EST.CASE.SPOIL<1,1> ELSE
                  MAT BST.REC = ""
               END
               LOCATE EQTY IN BST.QTY<1>,1 BY "AR" SETTING BP ELSE NULL
               BEGIN CASE
                  CASE BP = 1
                     BSPCT = BST.PCT<1,BP>
                  CASE BP > COUNT(BST.QTY,VM) + 1
                     BSPCT = BST.PCT<1,BP-1>
                  CASE BST.EXTR = "Y"
                     BSPCT = INT(BST.PCT<1,BP>-(BST.QTY<1,BP>-EQTY)/(BST.QTY<1,BP>-BST.QTY<1,BP-1>)*(BST.PCT<1,BP>-BST.PCT<1,BP-1>)+0.5)
                  CASE 1
                     BSPCT = BST.PCT<1,BP>
               END CASE
               SPOIL = INT(EQTY * (BSPCT / 10000) + 0.99)
         END CASE
*T27924 v
*        NO.OUT = INT(EST.CASE.ENDLF.CUT.OUT / 100)
*        EST.CASE.ENDLF.QTY<1,1,QPTR> = INT((EQTY + SPOIL) * 2 / NO.OUT + 0.99)
*        EST.CASE.ENDLF.QTY<1,2> = "SHT"
         NO.OUT = INT(EST.CASE.ENDLF.CUT.OUT<1,COMP> / 100)
         EST.CASE.ENDLF.QTY<1,COMP,QPTR> = INT((EQTY + SPOIL) * 2 / NO.OUT + 0.99)
         EST.CASE.ENDLF.UOM<1,COMP,3> = "SHT"
*T27924 ^
      NEXT QPTR
   END
   RETURN
*
*---- CALCULATE BOARD REQUIREMENT
*
70200*
*T27924 v
*  IF EST.CASE.BOARD<1,1> # "" THEN
   IF EST.CASE.BOARD<1,COMP,1> # "" THEN
*T27924 ^
      FOR QPTR = 1 TO QCNT
*T27924 v
*        EQTY = EST.QTY<1,QPTR>
         EQTY = EST.COMP.QTY<1,COMP,QPTR>
*T27924 ^
         BEGIN CASE
*T27924 v
*           CASE NUM(EST.CASE.SPOIL<1,2>)
*              SPOIL = INT(EQTY * (EST.CASE.SPOIL<1,2> / 100) + 0.99)
            CASE NUM(EST.CASE.SPOIL<1,COMP,2>)
               SPOIL = INT(EQTY * (EST.CASE.SPOIL<1,COMP,2> / 100) + 0.99)
*T27924 ^
            CASE 1
               MATREAD BST.REC FROM ESTIMATE.BIND.SPOIL, CONO:EST.CASE.SPOIL<1,2> ELSE
                  MAT BST.REC = ""
               END
               LOCATE EQTY IN BST.QTY<1>,1 BY "AR" SETTING BP ELSE NULL
               BEGIN CASE
                  CASE BP = 1
                     BSPCT = BST.PCT<1,BP>
                  CASE BP > COUNT(BST.QTY,VM) + 1
                     BSPCT = BST.PCT<1,BP-1>
                  CASE BST.EXTR = "Y"
                     BSPCT = INT(BST.PCT<1,BP>-(BST.QTY<1,BP>-EQTY)/(BST.QTY<1,BP>-BST.QTY<1,BP-1>)*(BST.PCT<1,BP>-BST.PCT<1,BP-1>)+0.5)
                  CASE 1
                     BSPCT = BST.PCT<1,BP>
               END CASE
               SPOIL = INT(EQTY * (BSPCT / 10000) + 0.99)
         END CASE
*T27924 v
*        NO.OUT = INT(EST.CASE.SIDE.BD.CUT.OUT / 100)
         NO.OUT = INT(EST.CASE.SIDE.BD.CUT.OUT<1,COMP> / 100)
*T27924 ^
         IF NO.OUT+0 > 0 THEN
*T27924 v
*           EST.CASE.SIDE.BD.QTY<1,1,QPTR> = INT((EQTY + SPOIL) * 2 / NO.OUT + 0.99)
            EST.CASE.SIDE.BD.QTY<1,COMP,QPTR> = INT((EQTY + SPOIL) * 2 / NO.OUT + 0.99)
*T27924 ^
         END
*T27924 v
*        EST.CASE.SIDE.BD.QTY<1,2> = "SHT"
*        NO.OUT = INT(EST.CASE.SPINE.BD.CUT.OUT / 100)
         NO.OUT = INT(EST.CASE.SPINE.BD.CUT.OUT<1,COMP> / 100)
*T27924 ^
         IF NO.OUT+0 > 0 THEN
*T27924 v
*           EST.CASE.SPINE.BD.QTY<1,1,QPTR> = INT((EQTY + SPOIL) / NO.OUT + 0.99)
            EST.CASE.SPINE.BD.QTY<1,COMP,QPTR> = INT((EQTY + SPOIL) / NO.OUT + 0.99)
*T27924 ^
         END
*T27924  EST.CASE.SPINE.BD.QTY<1,2> = "SHT"
      NEXT QPTR
   END
   RETURN
*
*---- CALCULATE SIDE CLOTH REQUIREMENT
*
70300*
*T27924 v
*  IF EST.CASE.SIDE.CL<1,1> = "" THEN
*     EST.CASE.SIDE.CL.QTY = ""
*     EST.CASE.SIDE.CL.PRICE = ""
   IF EST.CASE.SIDE.CL<1,COMP,1> = "" THEN
      EST.CASE.SIDE.CL.QTY<1,COMP> = ""
      EST.CASE.SIDE.CL.PRICE<1,COMP> = ""
      EST.CASE.SIDE.CL.UOM<1,COMP> = ""
*T27924 ^
   END ELSE
*T27924 v
*     MATL = EST.CASE.SIDE.CL<1,1>
      MATL = EST.CASE.SIDE.CL<1,COMP,1>
*T27924 ^
      LOCATE MATL IN ESTM.PROD<1>,1 SETTING MP ELSE MP = 999
*T27924 v
*     EST.CASE.SIDE.CL.QTY = ""
      EST.CASE.SIDE.CL.QTY<1,COMP> = ""
*T27924 ^
      MAT ESTD.TEMP = ""
*T27924 v
*     TEMP.OPV = EST.CASE.SIDE.CL<1,1>
      TEMP.OPV = EST.CASE.SIDE.CL<1,COMP,1>
*T27924 ^
      DEPT = ""
*T27924      COMP = 1
      SUB.NAME = "EST.FORMULA.Q":ESTM.QPARAM<1,MP>
      FOR QPTR = 1 TO QCNT
         EQTY = EST.QTY<1,QPTR>
         CALL @SUB.NAME (CONO, ACTION, EQTY, DEPT, COMP)
      NEXT QPTR
   END
   GOSUB 70320
   GOSUB 70340
   GOSUB 70360
   RETURN
*
*---- DETERMINE SIDE CLOTH PRICING
*
70320*
*T27924 v
*  IF EST.CASE.SIDE.CL<1,1> # "" THEN
   IF EST.CASE.SIDE.CL<1,COMP,1> # "" THEN
*T27924 ^
*T26312 v
*     FOR QPTR = 4 TO QCNT+1 STEP -1
*        EST.CASE.SIDE.CL.QTY = DELETE(EST.CASE.SIDE.CL.QTY,1,1,QPTR)
*        EST.CASE.SIDE.CL.PRICE = DELETE(EST.CASE.SIDE.CL.PRICE,1,1,QPTR)
*     NEXT QPTR
*T26312 ^
      FOR QPTR = 1 TO QCNT
*T27924 v
*        QTY = EST.CASE.SIDE.CL.QTY<1,1,QPTR>
         QTY = EST.CASE.SIDE.CL.QTY<1,COMP,QPTR>
*T27924 ^
         LOCATE QTY IN ESTM.END.QTY<1,MP>,1 BY "AR" SETTING CP ELSE NULL
         IF CP > COUNT(ESTM.END.QTY<1,MP>,SM)+1 THEN CP = CP - 1
         COST = ESTM.QCOST<1,MP,CP>
*T26312 v
*        IF COST # "" THEN
*T27924 v
*        IF COST # "" AND EST.CASE.SIDE.CL.PRICE<1,1,QPTR> = "" THEN
         IF COST # "" AND EST.CASE.SIDE.CL.PRICE<1,COMP,QPTR> = "" THEN
*T27924 ^
*T26312 ^
*T27924 v
*           EST.CASE.SIDE.CL.PRICE<1,1,QPTR> = COST
            EST.CASE.SIDE.CL.PRICE<1,COMP,QPTR> = COST
*T27924 ^
         END
      NEXT QPTR
   END
   RETURN
*
*---- DISPLAY SIDE CLOTH QUANTITY AND PRICING DATA
*
70340*
*T26312 v
*  S$DATA(27)<S$SCR,1> = EST.CASE.SIDE.CL.QTY<1,1,1>
*  S$DATA(27)<S$SCR,2> = EST.CASE.SIDE.CL.QTY<1,1,2>
*  S$DATA(27)<S$SCR,3> = EST.CASE.SIDE.CL.QTY<1,1,3>
*  S$DATA(27)<S$SCR,4> = EST.CASE.SIDE.CL.QTY<1,1,4>
*  S$DATA(28)<S$SCR> = EST.CASE.SIDE.CL.QTY<1,2>
*  S$DATA(59)<S$SCR,1> = EST.CASE.SIDE.CL.PRICE<1,1,1>
*  S$DATA(59)<S$SCR,2> = EST.CASE.SIDE.CL.PRICE<1,1,2>
*  S$DATA(59)<S$SCR,3> = EST.CASE.SIDE.CL.PRICE<1,1,3>
*  S$DATA(59)<S$SCR,4> = EST.CASE.SIDE.CL.PRICE<1,1,4>
   FOR E = 1 TO QCNT
*T27924 v
*     S$DATA(27)<S$SCR,E> = EST.CASE.SIDE.CL.QTY<1,1,E>
      S$DATA(27)<S$SCR,E> = EST.CASE.SIDE.CL.QTY<1,COMP,E>
*T27924 ^
*T27924 v
*     S$DATA(59)<S$SCR,E> = EST.CASE.SIDE.CL.PRICE<1,1,E>
      S$DATA(59)<S$SCR,E> = EST.CASE.SIDE.CL.PRICE<1,COMP,E>
*T27924 ^
   NEXT E
*T27924 v
*  S$DATA(28)<S$SCR> = EST.CASE.SIDE.CL.QTY<1,2>
   S$DATA(28)<S$SCR> = EST.CASE.SIDE.CL.UOM<1,COMP,3>
*T26312 ^
70345*
   S$VAL = 1
   S$CNT = 4
*T26312 v
*  SCREEN MULTI;;S;27
   SCREEN MULTI;;C;21;27;59
*T26312 ^
   SCREEN DISPLAY;;28
   RETURN
*
*---- GET SIDE CLOTH PRICING DATA
*
70360*
*T27924 v
*  IF EST.CASE.SIDE.CL<1,1> # "" THEN
   IF EST.CASE.SIDE.CL<1,COMP> # "" THEN
*T27924 ^
      FOR QPTR = 1 TO QCNT
70362 *
*T26312 v
*        S$VAL = QPTR
         S$CNT = QCNT
         S$VAL = QTY.LINE.COUNT * INT((QPTR -1)/QTY.LINE.COUNT) + 1
         SCREEN MULTI;;C;21;27;59
*T27924 v
*        S$DEFAULT = EST.CASE.SIDE.CL.PRICE<1,1,QPTR>
         S$DEFAULT = EST.CASE.SIDE.CL.PRICE<1,COMP,QPTR>
*T27924 ^
         IF QPTR GT 1 AND S$DEFAULT = '' THEN
            S$O.R = "O"
*T27924 v
*           S$DEFAULT = EST.CASE.SIDE.CL.PRICE<1,1,QPTR-1>
            S$DEFAULT = EST.CASE.SIDE.CL.PRICE<1,COMP,QPTR-1>
*T27924 ^
         END
         S$DATA(59)<S$SCR,QPTR> = S$DEFAULT
         S$VAL = QPTR
*T26312 ^
         SCREEN FIELD;;59
         SCREEN INPUT;;59
         IF S$VALUE = "END" THEN GOTO 70362
*T27924 v
*        EST.CASE.SIDE.CL.PRICE<1,1,QPTR> = S$VALUE
         EST.CASE.SIDE.CL.PRICE<1,COMP,QPTR> = S$VALUE
*T27924 ^
      NEXT QPTR
   END
   RETURN
*
*---- CALCULATE SIDE CLOTH REQUIREMENT
*
70400*
*T27924 v
*  IF EST.CASE.SPINE.CL<1,1> = "" THEN
*     EST.CASE.SPINE.CL.QTY = ""
*     EST.CASE.SPINE.CL.PRICE = ""
   IF EST.CASE.SPINE.CL<1,COMP> = "" THEN
      EST.CASE.SPINE.CL.QTY<1,COMP> = ""
      EST.CASE.SPINE.CL.PRICE<1,COMP> = ""
      EST.CASE.SPINE.CL.UOM<1,COMP> = ""
*T27924 ^
   END ELSE
*T27924 v
*     MATL = EST.CASE.SPINE.CL<1,1>
      MATL = EST.CASE.SPINE.CL<1,COMP,1>
*T27924 ^
      LOCATE MATL IN ESTM.PROD<1>,1 SETTING MP ELSE MP = 999
*T27924 v
*     EST.CASE.SPINE.CL.QTY = ""
      EST.CASE.SPINE.CL.QTY<1,COMP> = ""
      EST.CASE.SPINE.CL.UOM<1,COMP> = ""
*T27924 ^
      MAT ESTD.TEMP = ""
*T27924 v
*     TEMP.OPV = EST.CASE.SPINE.CL<1,1>
      TEMP.OPV = EST.CASE.SPINE.CL<1,COMP>
*T27924 ^
      DEPT = ""
*T27924      COMP = 1
      SUB.NAME = "EST.FORMULA.Q":ESTM.QPARAM<1,MP>
      FOR QPTR = 1 TO QCNT
         EQTY = EST.QTY<1,QPTR>
         CALL @SUB.NAME (CONO, ACTION, EQTY, DEPT, COMP)
      NEXT QPTR
   END
   GOSUB 70420
   GOSUB 70440
   GOSUB 70460
   RETURN
*
*---- DETERMINE SPINE CLOTH PRICING
*
70420*
*T27924 v
*  IF EST.CASE.SPINE.CL<1,1> # "" THEN
   IF EST.CASE.SPINE.CL<1,COMP> # "" THEN
*T27924 ^
*T26312 v
*     FOR QPTR = 4 TO QCNT+1 STEP -1
*        EST.CASE.SPINE.CL.QTY = DELETE(EST.CASE.SPINE.CL.QTY,1,1,QPTR)
*        EST.CASE.SPINE.CL.PRICE = DELETE(EST.CASE.SPINE.CL.PRICE,1,1,QPTR)
*     NEXT QPTR
*T26312 ^
      FOR QPTR = 1 TO QCNT
*T27924 v
*        QTY = EST.CASE.SPINE.CL.QTY<1,1,QPTR>
         QTY = EST.CASE.SPINE.CL.QTY<1,COMP,QPTR>
*T27924 ^
         LOCATE QTY IN ESTM.END.QTY<1,MP>,1 BY "AR" SETTING CP ELSE NULL
         IF CP > COUNT(ESTM.END.QTY<1,MP>,SM)+1 THEN CP = CP - 1
         COST = ESTM.QCOST<1,MP,CP>
*T26312 v
*        IF COST # "" THEN
*T27924 v
*        IF COST # "" AND EST.CASE.SPINE.CL.PRICE<1,1,QPTR> = "" THEN
         IF COST # "" AND EST.CASE.SPINE.CL.PRICE<1,COMP,QPTR> = "" THEN
*T27924 ^
*T26312 ^
*T27924 v
*           EST.CASE.SPINE.CL.PRICE<1,1,QPTR> = COST
            EST.CASE.SPINE.CL.PRICE<1,COMP,QPTR> = COST
*T27924 ^
         END
      NEXT QPTR
   END
   RETURN
*
*---- DISPLAY SPINE CLOTH QUANTITY AND PRICING DATA
*
70440*
*T26312 v
*  S$DATA(44)<S$SCR,1> = EST.CASE.SPINE.CL.QTY<1,1,1>
*  S$DATA(44)<S$SCR,2> = EST.CASE.SPINE.CL.QTY<1,1,2>
*  S$DATA(44)<S$SCR,3> = EST.CASE.SPINE.CL.QTY<1,1,3>
*  S$DATA(44)<S$SCR,4> = EST.CASE.SPINE.CL.QTY<1,1,4>
*  S$DATA(45)<S$SCR> = EST.CASE.SPINE.CL.QTY<1,2>
*  S$DATA(60)<S$SCR,1> = EST.CASE.SPINE.CL.PRICE<1,1,1>
*  S$DATA(60)<S$SCR,2> = EST.CASE.SPINE.CL.PRICE<1,1,2>
*  S$DATA(60)<S$SCR,3> = EST.CASE.SPINE.CL.PRICE<1,1,3>
*  S$DATA(60)<S$SCR,4> = EST.CASE.SPINE.CL.PRICE<1,1,4>
   FOR E = 1 TO QCNT
*T27924 v
*     S$DATA(44)<S$SCR,E> = EST.CASE.SPINE.CL.QTY<1,1,E>
*     S$DATA(60)<S$SCR,E> = EST.CASE.SPINE.CL.PRICE<1,1,E>
      S$DATA(44)<S$SCR,E> = EST.CASE.SPINE.CL.QTY<1,COMP,E>
      S$DATA(60)<S$SCR,E> = EST.CASE.SPINE.CL.PRICE<1,COMP,E>
*T27924 ^
   NEXT E
*T27924 v
*  S$DATA(45)<S$SCR,E> = EST.CASE.SPINE.CL.QTY<1,2>
   S$DATA(45)<S$SCR,E> = EST.CASE.SPINE.CL.UOM<1,COMP,3>
*T27924 ^
*T26312 ^
70445*
   S$VAL = 1
   S$CNT = 4
*T26312 v
*  SCREEN MULTI;;S;44
   SCREEN MULTI;;C;38;44;60
*T26312 ^
   SCREEN DISPLAY;;45
   RETURN
*
*---- GET SPINE CLOTH PRICING DATA
*
70460*
*T27924 v
*  IF EST.CASE.SPINE.CL<1,1> # "" THEN
   IF EST.CASE.SPINE.CL<1,COMP> # "" THEN
*T27924 ^
      FOR QPTR = 1 TO QCNT
70462 *
*T26312 v
*        S$VAL = QPTR
         S$CNT = QCNT
         S$VAL = QTY.LINE.COUNT * INT((QPTR-1)/QTY.LINE.COUNT) + 1
         SCREEN MULTI;;C;38;44;60
*T27924 v
*        S$DEFAULT = EST.CASE.SPINE.CL.PRICE<1,1,QPTR>
         S$DEFAULT = EST.CASE.SPINE.CL.PRICE<1,COMP,QPTR>
*T27924 ^
         IF QPTR GT 1 AND S$DEFAULT = '' THEN
            S$O.R = "O"
*T27924 v
*           S$DEFAULT = EST.CASE.SPINE.CL.PRICE<1,1,QPTR-1>
            S$DEFAULT = EST.CASE.SPINE.CL.PRICE<1,COMP,QPTR-1>
*T27924 ^
         END
         S$DATA(60)<S$SCR,QPTR> = S$DEFAULT
         S$VAL = QPTR
*T26312 ^
         SCREEN FIELD;;60
         SCREEN INPUT;;60
         IF S$VALUE = "END" THEN GOTO 70462
*T27924 v
*        EST.CASE.SPINE.CL.PRICE<1,1,QPTR> = S$VALUE
         EST.CASE.SPINE.CL.PRICE<1,COMP,QPTR> = S$VALUE
*T27924 ^
      NEXT QPTR
   END
   RETURN
*
*---- LOAD DATA
*
80000*
*T27924 v
*  S$DATA(2)<S$SCR> = EST.CASE.BACK.STYLE
*  S$DATA(3)<S$SCR> = EST.CASE.PIECES
*  S$DATA(4)<S$SCR> = EST.CASE.SHOW.SIZE
*  S$DATA(5)<S$SCR> = EST.CASEMAKER.CCTR
*  S$DATA(6)<S$SCR> = EST.CASESTAMP.CCTR
*  S$DATA(7)<S$SCR> = EST.CASESTAMP.HITS
*  S$DATA(8)<S$SCR> = EST.CASEIN.CCTR
*  S$DATA(9)<S$SCR> = EST.CASE.SPOIL<1,1>
*  S$DATA(10)<S$SCR> = EST.CASE.SPOIL<1,2>
*  S$DATA(11)<S$SCR> = EST.CASE.SPOIL<1,3>
*  S$DATA(12)<S$SCR> = EST.CASE.SIDE.CL<1,1>
*  S$DATA(13)<S$SCR> = EST.CASE.SIDE.CL<1,2>
*  S$DATA(14)<S$SCR> = EST.CASE.SIDE.CL.SIZE<1,1>
*  S$DATA(15)<S$SCR> = EST.CASE.SIDE.CL.SIZE<1,2>
*  S$DATA(16)<S$SCR> = EST.CASE.SIDE.CL.SRC
*  S$DATA(17)<S$SCR> = EST.CASE.SIDE.CL.SPEC<1,1>
*  S$DATA(18)<S$SCR> = EST.CASE.SIDE.CL.SPEC<1,2>
*  S$DATA(19)<S$SCR> = EST.CASE.SIDE.CL.SPEC<1,3>
*  S$DATA(20)<S$SCR> = EST.CASE.SIDE.CL.SPEC<1,4>
*  S$DATA(22)<S$SCR> = EST.CASE.SIDE.CL.PRICE<1,2>
*  S$DATA(23)<S$SCR> = EST.CASE.SIDE.CL.PRICE<1,3>
*  S$DATA(24)<S$SCR> = EST.CASE.SIDE.CL.CUT.SIZE<1,1>
*  S$DATA(25)<S$SCR> = EST.CASE.SIDE.CL.CUT.SIZE<1,2>
*  S$DATA(26)<S$SCR> = EST.CASE.SIDE.CL.CUT.OUT
*  S$DATA(29)<S$SCR> = EST.CASE.SPINE.CL<1,1>
*  S$DATA(30)<S$SCR> = EST.CASE.SPINE.CL<1,2>
*  S$DATA(31)<S$SCR> = EST.CASE.SPINE.CL.SIZE<1,1>
*  S$DATA(32)<S$SCR> = EST.CASE.SPINE.CL.SIZE<1,2>
*  S$DATA(33)<S$SCR> = EST.CASE.SPINE.CL.SRC
*  S$DATA(34)<S$SCR> = EST.CASE.SPINE.CL.SPEC<1,1>
*  S$DATA(35)<S$SCR> = EST.CASE.SPINE.CL.SPEC<1,2>
*  S$DATA(36)<S$SCR> = EST.CASE.SPINE.CL.SPEC<1,3>
*  S$DATA(37)<S$SCR> = EST.CASE.SPINE.CL.SPEC<1,4>
*  S$DATA(39)<S$SCR> = EST.CASE.SPINE.CL.PRICE<1,2>
*  S$DATA(40)<S$SCR> = EST.CASE.SPINE.CL.PRICE<1,3>
*  S$DATA(41)<S$SCR> = EST.CASE.SPINE.CL.CUT.SIZE<1,1>
*  S$DATA(42)<S$SCR> = EST.CASE.SPINE.CL.CUT.SIZE<1,2>
*  S$DATA(43)<S$SCR> = EST.CASE.SPINE.CL.CUT.OUT
*  S$DATA(46)<S$SCR> = EST.CASE.SIDE.CL.CUT.DIR
*  S$DATA(47)<S$SCR> = EST.CASE.SPINE.CL.CUT.DIR
   S$DATA(2)<S$SCR> = EST.CASE.BACK.STYLE<1,COMP>
   S$DATA(3)<S$SCR> = EST.CASE.PIECES<1,COMP>
   S$DATA(4)<S$SCR> = EST.CASE.SHOW.SIZE<1,COMP>
   S$DATA(5)<S$SCR> = EST.CASEMAKER.CCTR<1,COMP>
   S$DATA(6)<S$SCR> = EST.CASESTAMP.CCTR<1,COMP>
   S$DATA(7)<S$SCR> = EST.CASESTAMP.HITS<1,COMP>
   S$DATA(8)<S$SCR> = EST.CASEIN.CCTR<1,COMP>
   S$DATA(9)<S$SCR> = EST.CASE.SPOIL<1,COMP,1>
   S$DATA(10)<S$SCR> = EST.CASE.SPOIL<1,COMP,2>
   S$DATA(11)<S$SCR> = EST.CASE.SPOIL<1,COMP,3>
   S$DATA(12)<S$SCR> = EST.CASE.SIDE.CL<1,COMP,1>
   S$DATA(13)<S$SCR> = EST.CASE.SIDE.CL<1,COMP,2>
   S$DATA(14)<S$SCR> = EST.CASE.SIDE.CL.SIZE<1,COMP,1>
   S$DATA(15)<S$SCR> = EST.CASE.SIDE.CL.SIZE<1,COMP,2>
   S$DATA(16)<S$SCR> = EST.CASE.SIDE.CL.SRC<1,COMP>
   S$DATA(17)<S$SCR> = EST.CASE.SIDE.CL.SPEC<1,COMP,1>
   S$DATA(18)<S$SCR> = EST.CASE.SIDE.CL.SPEC<1,COMP,2>
   S$DATA(19)<S$SCR> = EST.CASE.SIDE.CL.SPEC<1,COMP,3>
   S$DATA(20)<S$SCR> = EST.CASE.SIDE.CL.SPEC<1,COMP,4>
   S$DATA(22)<S$SCR> = EST.CASE.SIDE.CL.UOM<1,COMP,1>
   S$DATA(23)<S$SCR> = EST.CASE.SIDE.CL.UOM<1,COMP,2>
   S$DATA(49)<S$SCR> = EST.CASE.SIDE.CL.UOM<1,COMP,4>; * T26449
   S$DATA(24)<S$SCR> = EST.CASE.SIDE.CL.CUT.SIZE<1,COMP,1>
   S$DATA(25)<S$SCR> = EST.CASE.SIDE.CL.CUT.SIZE<1,COMP,2>
   S$DATA(26)<S$SCR> = EST.CASE.SIDE.CL.CUT.OUT<1,COMP>
   S$DATA(29)<S$SCR> = EST.CASE.SPINE.CL<1,COMP,1>
   S$DATA(30)<S$SCR> = EST.CASE.SPINE.CL<1,COMP,2>
   S$DATA(31)<S$SCR> = EST.CASE.SPINE.CL.SIZE<1,COMP,1>
   S$DATA(32)<S$SCR> = EST.CASE.SPINE.CL.SIZE<1,COMP,2>
   S$DATA(33)<S$SCR> = EST.CASE.SPINE.CL.SRC<1,COMP>
   S$DATA(34)<S$SCR> = EST.CASE.SPINE.CL.SPEC<1,COMP,1>
   S$DATA(35)<S$SCR> = EST.CASE.SPINE.CL.SPEC<1,COMP,2>
   S$DATA(36)<S$SCR> = EST.CASE.SPINE.CL.SPEC<1,COMP,3>
   S$DATA(37)<S$SCR> = EST.CASE.SPINE.CL.SPEC<1,COMP,4>
   S$DATA(39)<S$SCR> = EST.CASE.SPINE.CL.UOM<1,COMP,1>
   S$DATA(40)<S$SCR> = EST.CASE.SPINE.CL.UOM<1,COMP,2>
   S$DATA(41)<S$SCR> = EST.CASE.SPINE.CL.CUT.SIZE<1,COMP,1>
   S$DATA(42)<S$SCR> = EST.CASE.SPINE.CL.CUT.SIZE<1,COMP,2>
   S$DATA(43)<S$SCR> = EST.CASE.SPINE.CL.CUT.OUT<1,COMP>
   S$DATA(46)<S$SCR> = EST.CASE.SIDE.CL.CUT.DIR<1,COMP>
   S$DATA(47)<S$SCR> = EST.CASE.SPINE.CL.CUT.DIR<1,COMP>
*T27924 ^
80090*
   SCREEN DISPLAY;;ALL
   RETURN
*
*---- ERROR ROUTINE
*
90000 ERR.TYPE=1;CALL SI_SYSCOM(MAT SYSCOM.REC);RETURN
*
*---- END OF PROGRAM
*
99999*
   SCREEN CLEAR;;D
   RETURN
END
