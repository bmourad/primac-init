*
* Modified version of COMP.TWO.PRIMAC.ACCTS.PROGS
* This program will generate a file containing all source
* indicating changes by version
* All BPs SCREENS PROCS and CPYLIBS will be processed
*
* File output is PRIMAC.VERSION.MODS stored in CBA-REV11 account
*
* KEY is FILE "|" ITEM   i.e. "PMCBP|JOB.MAINT"
* <1> is FILE
* <2> is ITEM
* <3> is REV9   to REV10  change flag "*"
* <4> is REV10  to REV10A change flag "*"
* <5> is REV10A to REV10B change flag "*"
* <6> is REV10B to REV11  change flag "*"
* <7> is REV11  to REV11A change flag "*"
* <8> is REV11A to REV11B change flag "*"
* <9> to <15> for future use
*
* <16> is REV9   to REV10  message
* <17> is REV10  to REV10A message
* <18> is REV10A to REV10B message
* <19> is REV10B to REV11  message
* <20> is REV11  to REV11A message
* <21> is REV11A to REV11B message
* <22> to <28> for future use
*
OPEN "MD" TO MD ELSE PRINT "NO MD " ; STOP
OPEN "PRIMAC.VERSION.MODS" TO PRIMAC.VERSION.MODS ELSE PRINT "NO PRIMAC.VERSION.MODS " ; STOP
*
INCLUDE INCS GLOBAL.EQUATES
PLIST    ="APS"
PLIST<-1>="ARS"
PLIST<-1>="CBA"
PLIST<-1>="CNV" ;*
PLIST<-1>="EP4"
PLIST<-1>="EPS"
PLIST<-1>="FAS"
PLIST<-1>="GLS" ;*
PLIST<-1>="ICS"
PLIST<-1>="JCS"
PLIST<-1>="JES"
PLIST<-1>="JIS"
PLIST<-1>="NDC" ;*
PLIST<-1>="OPS"
PLIST<-1>="PMC"
PLIST<-1>="POS"
PLIST<-1>="PR4"
PLIST<-1>="PRS"
PLIST<-1>="PSS"
PLIST<-1>="QPL" ;*
PLIST<-1>="SAS"
PLIST<-1>="SIS"
PLIST<-1>="UTL"
*PLIST<-1>="REPORT.PROC.FILE"
*PLIST<-1>="PRIMAC.MENUS"
NUM.FILES = DCOUNT(PLIST,AM)
*
*  GET THE PART1 OF THE PATH SOURCE
100 *
PRINT " Enter base part of SOURCE path. Enter the LATEST version"
PRINT " If you want to process the CBA-REV10A account for rev10a"
PRINT " you would enter '/usr/ud/primac/rev10/basea/CBA-REV10A' "
PRINT
PRINT "Enter SOURCE path :":
INPUT SPATH
PRINT
PRINT "'":SPATH:"' is this what you want (Y/N):":
INPUT RESP
IF RESP[1,1] # "Y" THEN GO 100
PRINT
200 *
PRINT " Enter base part of DESTINATION path."
PRINT " If you want to process the CBA-NEYLER account for rev10a"
PRINT " you would enter '/vsi/cust/rev10a/neyler/CBA-NEYLER' "
PRINT
PRINT "Enter DESTINATION path :":
INPUT DPATH
PRINT
PRINT "'":DPATH:"' is this what you want (Y/N):":
INPUT RESP
IF RESP[1,1] # "Y" THEN GO 200
*
PRINT
*PRINT "Do you wish to compact printout (Y/N)":
*INPUT RESP
*IF RESP[1,1] = 'Y' THEN
*  SKIP.MSG=1
*END ELSE
SKIP.MSG=0
*END
*
* extract the acct name ... for CBA-REV10A get REV10A
*
NUM.SLASH = DCOUNT(SPATH,"/")
LFIELD = FIELD(SPATH,"/",NUM.SLASH)
IF LFIELD[1,4] # "CBA-" THEN
  PRINT "Unable to process ":SPATH
  PRINT "must be a CBA-... account in path"
  STOP
END ELSE
  SACCT = FIELD(LFIELD,"-",2)
  NSPATH=''
  FOR I = 1 TO NUM.SLASH-1
    IF I = 1 THEN
      NSPATH=FIELD(SPATH,"/",I):"/"
    END ELSE
      NSPATH=NSPATH:FIELD(SPATH,"/",I):"/"
    END
  NEXT I
  SPATH=NSPATH
END
NUM.SLASH = DCOUNT(DPATH,"/")
LFIELD = FIELD(DPATH,"/",NUM.SLASH)
IF LFIELD[1,4] # "CBA-" THEN
  PRINT "Unable to process ":DPATH
  PRINT "must be a CBA-... account in path"
  STOP
END ELSE
  DACCT = FIELD(LFIELD,"-",2)
  NDPATH=''
  FOR I = 1 TO NUM.SLASH-1
    IF I = 1 THEN
      NDPATH=FIELD(DPATH,"/",I):"/"
    END ELSE
      NDPATH=NDPATH:FIELD(DPATH,"/",I):"/"
    END
  NEXT I
  DPATH=NDPATH
END
*
*PRINTER ON 
PRINT
PRINT "COMPARISON OF ":SPATH:SACCT:"   TO "
PRINT "              ":DPATH:DACCT
PRINT
PRINT "DACCT=(":DACCT:")"
BEGIN CASE
  CASE DACCT = "DEMO"
    CVAL = 3
    MVAL = 16
  CASE DACCT = "REV10"
    CVAL = 4
    MVAL = 17
  CASE DACCT = "REV10A"
    CVAL = 5
    MVAL = 18
  CASE DACCT = "REV10B"
    CVAL = 6
    MVAL = 19
  CASE DACCT = "REV11"
    CVAL = 7
    MVAL = 20
  CASE DACCT = "REV11A"
    CVAL = 8
    MVAL = 21
  CASE DACCT = "REV11B"
    CVAL = 9
    MVAL = 22
END CASE
PRINT "CVAL=(":CVAL:")"
PRINT "MVAL=(":MVAL:")"
FOR I = 1 TO NUM.FILES
  CURR.MOD = PLIST<I>
  PRINT "PROCESSING ":CURR.MOD
*
*   PROCESS BP , PROC, SCREENS, VOC
  IF CURR.MOD # 'CBA' THEN
    IF CURR.MOD = "PMC" THEN
      ORIG.VOC = SACCT:"/VOC"
      NEW.VOC =  DACCT:"/VOC"
    END ELSE
      ORIG.VOC = SACCT:"-":CURR.MOD:"/VOC"
      NEW.VOC = DACCT:"-":CURR.MOD:"/VOC"
    END
    FNAME1 = NEW.VOC
    FNAME2 = ORIG.VOC
    ONAME=CURR.MOD:"VOC"
    VOCTRUE=1
*      GOSUB 1000;* PROCESS FNAME1 AND FNAME2
    VOCTRUE=0
    GOSUB 2000
  END ELSE
*      IN THE CBA MOD COMPARE MENUS, REPORT.PROC.FILE AND VOC
    IF CURR.MOD = "PMC" THEN
      ORIG.VOC = SACCT:"/VOC"
      NEW.VOC =  DACCT:"/VOC"
    END ELSE
      ORIG.VOC = SACCT:"-":CURR.MOD:"/VOC"
      NEW.VOC = DACCT:"-":CURR.MOD:"/VOC"
    END
    FNAME1 = NEW.VOC
    FNAME2 = ORIG.VOC
    ONAME=CURR.MOD:"VOC"
    VOCTRUE=1
*      GOSUB 1000;* PROCESS FNAME1 AND FNAME2
    VOCTRUE=0
    GOSUB 2000
    FNAME1="CBA-":DACCT:"/PRIMAC.MENUS"
    FNAME2="CBA-":SACCT:"/PRIMAC.MENUS"
    ONAME="PRIMAC.MENUS"
    GOSUB 1000
    FNAME1=DACCT:"/REPORT.PROC.FILE"
    FNAME2=SACCT:"/REPORT.PROC.FILE"
    ONAME="REPORT.PROC.FILE"
    GOSUB 1000
*      FNAME1="CBA-":DACCT:"/NDCBP"
*      FNAME2="CBA-":SACCT:"/NDCBP"
*      ONAME="NDCBP"
*      GOSUB 1000
*      FNAME1="CBA-":DACCT:"/NDCPROCS"
*      FNAME2="CBA-":SACCT:"/NDCPROCS"
*      ONAME="NDCPROCS"
*      GOSUB 1000
*      FNAME1="CBA-":DACCT:"/NDC.CPYLIB"
*      FNAME2="CBA-":SACCT:"/NDC.CPYLIB"
*      ONAME="NDC.CPYLIB"
*      GOSUB 1000
*      FNAME1="CBA-":DACCT:"/NDC.SCREENS"
*      FNAME2="CBA-":SACCT:"/NDC.SCREENS"
*      ONAME="NDC.SCREENS"
*      GOSUB 1000
*      FNAME1="CBA-":DACCT:"/CNVBP"
*      FNAME2="CBA-":SACCT:"/CNVBP"
*      ONAME="CNVBP"
*      GOSUB 1000
*      FNAME1="CBA-":DACCT:"/CNVPROCS"
*      FNAME2="CBA-":SACCT:"/CNVPROCS"
*      ONAME="CNVPROCS"
*      GOSUB 1000
*      FNAME1="CBA-":DACCT:"/CNV.CPYLIB"
*      FNAME2="CBA-":SACCT:"/CNV.CPYLIB"
*      ONAME="CNV.CPYLIB"
*      FNAME2="CBA-":SACCT:"/NDCPROCS"
*      GOSUB 1000
*      FNAME1="CBA-":DACCT:"/CNV.SCREENS"
*      FNAME2="CBA-":SACCT:"/CNV.SCREENS"
*      ONAME="CNV.SCREENS"
*      GOSUB 1000
*      FNAME1="CBA-":DACCT:"/GLSBP"
*      FNAME2="CBA-":SACCT:"/GLSBP"
*      ONAME="GLSBP"
*      GOSUB 1000
*      FNAME1="CBA-":DACCT:"/GLSPROCS"
*      FNAME2="CBA-":SACCT:"/GLSPROCS"
*      ONAME="GLSPROCS"
*      GOSUB 1000
*      FNAME1="CBA-":DACCT:"/GLS.CPYLIB"
*      FNAME2="CBA-":SACCT:"/GLS.CPYLIB"
*      ONAME="GLS.CPYLIB"
*      GOSUB 1000
*      FNAME1="CBA-":DACCT:"/GLS.SCREENS"
*      FNAME2="CBA-":SACCT:"/GLS.SCREENS"
*      ONAME="GLS.SCREENS"
*      GOSUB 1000
*      FNAME1="CBA-":DACCT:"/QPLBP"
*      FNAME2="CBA-":SACCT:"/QPLBP"
*      ONAME="QPLBP"
*      GOSUB 1000
*      FNAME1="CBA-":DACCT:"/QPLPROCS"
*      FNAME2="CBA-":SACCT:"/QPLPROCS"
*      ONAME="QPLPROCS"
*      GOSUB 1000
*      FNAME1="CBA-":DACCT:"/QPL.CPYLIB"
*      FNAME2="CBA-":SACCT:"/QPL.CPYLIB"
*      ONAME="QPL.CPYLIB"
*      GOSUB 1000
*      FNAME1="CBA-":DACCT:"/QPL.SCREENS"
*      FNAME2="CBA-":SACCT:"/QPL.SCREENS"
*      ONAME="QPL.SCREENS"
*      GOSUB 1000
  END
NEXT I
*
*
STOP
*
1000 ***
CTR = 0
MCTR=0
*
*    FNAME1 AND FNAME2 ARE IMPORTED AND TO BE PROCESSED
*
ERROUT=''
LEN.ONAME=LEN(ONAME)
IF ONAME[LEN.ONAME-7,8]='.SCREENS' THEN
  ISA.SCREEN=TRUE
END ELSE
  ISA.SCREEN=FALSE
END
DELETE MD, "TEMPQNAME1"
DELETE MD, "TEMPQNAME2"
CMD1 = 'SETFILE ':DPATH:FNAME1:" TEMPQNAME2 OVERWRITING"
*INPATH = DPATH:FNAME1
*QPTR = "TEMPQNAME2"
*GOSUB 4000
*IF ERROUT THEN
*   PRINTER ON 
*   ERR.PRINTED=1
*   PRINT SPACE(3):FNAME1:"  Unable to Open "
*   PRINTER OFF
*END
CMD2 = 'SETFILE ':SPATH:FNAME2:" TEMPQNAME1 OVERWRITING"
*INPATH = SPATH:FNAME2
*QPTR = "TEMPQNAME1"
*GOSUB 4000
*IF ERROUT THEN
*   PRINTER ON 
*   ERR.PRINTED=1
*   PRINT SPACE(3):FNAME2:"  Unable to Open "
*   PRINTER OFF
*END
UDTEXECUTE CMD1 CAPTURING ERRMSG1
ERR.PRINTED=0
IF ERRMSG1[1,7] = "No such" THEN
  ERR.PRINTED=1
*  PRINTER ON
  PRINT SPACE(3):FNAME1:"  Unable to Open "
*  PRINTER OFF
END
UDTEXECUTE CMD2 CAPTURING ERRMSG2
READ V1 FROM MD,"TEMPQNAME1" THEN
  IF ISA.SCREEN THEN
    V1<3> = "D_M.SCREENS"
  END ELSE
    IF V1<3> = "" THEN V1<3> = "D_VOC"
  END
  WRITE V1 ON MD,"TEMPQNAME1" 
END
IF ERRMSG2[1,7] = "No such" THEN
*  PRINTER ON
  ERR.PRINTED=1
  PRINT SPACE(3):FNAME2:" Unable to Open "
*  PRINTER OFF
END
IF ERR.PRINTED THEN RETURN
READ V1 FROM MD,"TEMPQNAME2" THEN
  IF ISA.SCREEN THEN
    V1<3> = "D_M.SCREENS"
  END ELSE
    IF V1<3> = "" THEN V1<3> = "D_VOC"
  END
  WRITE V1 ON MD,"TEMPQNAME2"
END
PRINT CMD1
PRINT CMD2
SELECTVERB="SSELECT TEMPQNAME1"
DONE=0
*PRINTER ON
*  OPEN THE FILES TO FILEVAR1 AND FILEVAR2
OPEN "TEMPQNAME1" TO FILEVAR1 ELSE
  PRINT "UNABLE TO OPEN ":FNAME1
  RETURN
END
OPEN "TEMPQNAME2" TO FILEVAR2 ELSE
  PRINT "UNABLE TO OPEN ":FNAME2
  RETURN
END
*
*PRINTER OFF
*
SCREEN.ARRAY=''
PRINT.ONAME=TRUE
LEN.ONAME=LEN(ONAME)
IF ONAME[LEN.ONAME-7,8]='.SCREENS' THEN
  ISA.SCREEN=TRUE
END ELSE
  ISA.SCREEN=FALSE
END
PRINT SELECTVERB
PERFORM SELECTVERB
SELECT FILEVAR1 TO LIST1
*PRINTER ON
LOOP
  READNEXT ID FROM LIST1 ELSE DONE=1
UNTIL DONE DO
  CFLAG = ""
  MFLAG = ""
  CTR=CTR+1
  IF ID[1,1] # "_" THEN
    IF ISA.SCREEN THEN
      SCRNAME=ONAME:"|":FIELD(ID,"*",1)
    END
    GOSUB 5000
    READ REC1 FROM FILEVAR1,ID THEN
      FOUND.SCREEN=TRUE
      IF ISA.SCREEN THEN
        SCRNAME=ONAME:"|":FIELD(ID,"*",1)
        LOCATE SCRNAME IN SCREEN.ARRAY<1>,1 SETTING POS ELSE
          SCREEN.ARRAY = INSERT(SCREEN.ARRAY,1,POS;SCRNAME)
          FOUND.SCREEN=FALSE
        END
      END
      READ REC2 FROM FILEVAR2,ID THEN
        IF REC1 # REC2 THEN
*            THIS ITEM HAS CHANGED"
          IF PRINT.ONAME THEN
*            PRINT SPACE(3):ONAME
            PRINT.ONAME=FALSE
          END
          IF ISA.SCREEN THEN
            IF NOT(FOUND.SCREEN) THEN
*              PRINT SPACE(6):SCRNAME
            END
            CFLAG = "*"
            GOSUB 5100
          END ELSE
            R1=REC1<1>
            IF (R1='V' OR R1='S' OR R1='K' OR R1='SQLV' OR R1='s') AND VOCTRUE THEN
              * NO PRINT LINE THIS IS A SYSTEM VERB
            END ELSE
              IF (R1 = "F" OR R1 = "DIR" OR R1 = "D") AND VOCTRUE THEN
                * NO PRINT ONLY DIFFERENT
                *  THIS IS WHERE THE DICTIONARY ITEMS NEED TO BE CHECKED
                *
                IF INDEX(REC1<2>,"/",1) THEN
                  *  This is a pointer to another acct not a local file
                END ELSE
                  IF REC1<2> = ID OR REC1<2> = "" AND REC1<3>[3,99]=ID THEN
                    GOSUB 3000 ;* PROCESS DICTIONARY OF FILE
*                    PRINTER ON
                  END
                END
              END ELSE
*                PRINT SPACE(6):ID:STR("-",40-LEN(ID)):"         ":REC1<1>[1,50]
*                PRINT SPACE(6):ID
                CFLAG = "*"
                GOSUB 5100
              END
            END
          END
          MCTR=MCTR+1
        END ELSE
*          THEN ITEMS ARE THE SAME
          GOSUB 5100
          R1=REC1<1>[1,1]
          IF (R1 = "F" OR R1 = "D") AND VOCTRUE THEN
            * NO PRINT ONLY DIFFERENT
            *  THIS IS WHERE THE DICTIONARY ITEMS NEED TO BE CHECKED
            *
            IF INDEX(REC1<2>,"/",1) THEN
              *  This is a pointer to another acct not a local file
            END ELSE
              IF REC1<2> = ID OR REC1<3>[3,99] = ID THEN
*                PRINTER OFF
                GOSUB 3000 ;* PROCESS DICTIONARY OF FILE
*                PRINTER ON 
              END
            END
          END
        END
      END ELSE
*          THE ITEM ONLY EXIST IN FILEVAR1
        MCTR=MCTR+1
        IF PRINT.ONAME THEN
*          PRINT SPACE(3):ONAME
          PRINT.ONAME=FALSE
        END
        IF ISA.SCREEN THEN
          IF NOT(FOUND.SCREEN) THEN
*            PRINT SPACE(6):SCRNAME     
          END
          CFLAG = "*"
          GOSUB 5100
        END ELSE
          R1=REC1<1>
          IF (R1='V' OR R1='S' OR R1='K' OR R1='SQLV' OR R1='s') AND VOCTRUE THEN
              * NO PRINT LINE THIS IS A SYSTEM VERB
          END ELSE
              * SPECIAL CHECK IF UNDERSCORE CHECK FOR WITHOUT AND IF SO
              * THEN EXCLUDE
            DO.PRINT=1
            IF INDEX(ID,"_",1) AND (REC1<1>[1,1]='F' OR REC1<1>[1,1]='D') AND VOCTRUE THEN
              IF REC1<2> # ID THEN
                IF INDEX(REC1<2>,"/",1) THEN
                  NUMS = DCOUNT(REC1<2>,"/")
                  IF FIELD(REC1<2>,"/",NUMS) # ID THEN
                    DO.PRINT=0
                  END
                END ELSE
                  IF REC1<3>[3,99]=ID THEN
                    DO.PRINT=1
                  END ELSE
                    DO.PRINT=0
                  END
                END
              END
            END
            IF DO.PRINT THEN
*                PRINT SPACE(6):ID:STR("-",40-LEN(ID)):" MISSING ":REC1<1>[1,50]
*              PRINT SPACE(6):ID:STR(" ",40-LEN(ID))" MISSING"
              MFLAG = "MISSING"
              GOSUB 5100
            END
          END
        END
      END
    END ELSE
*     THIS SHOULD NEVER OCCUR
*      PRINTER ON
*      PRINT SPACE(4):"**************":"ITEM IN SELECT LIST NOT IN FILE??? ":FNAME1:" ":ID
*      PRINTER OFF
    END
  END
REPEAT
*PRINT SPACE(2):"FOR FILE ":FNAME1:" PROCESSED ":CTR:" RECORDS AND ":MCTR:" MISMATCHED"
IF MCTR > 0 AND NOT(SKIP.MSG) THEN
*  PRINT SPACE(3):ONAME:"  *** PROCESSED ":CTR:" MISSMATCH ":MCTR
END
*PRINTER OFF
RETURN
*
2000 *
*
P1 = "CBA-":SACCT:"/"
P2 = "CBA-":DACCT:"/"
ORIGBP = P1:CURR.MOD:"BP"
NEWBP = P2:CURR.MOD:"BP"
FNAME1=NEWBP;FNAME2=ORIGBP
ONAME=CURR.MOD:"BP"
GOSUB 1000
ORIGPROCS = P1:CURR.MOD:"PROCS"
NEWPROCS  = P2:CURR.MOD:"PROCS"
FNAME1=NEWPROCS;FNAME2=ORIGPROCS
ONAME=CURR.MOD:"PROCS"
GOSUB 1000
ORIG.SCREENS = P1:CURR.MOD:".SCREENS"
NEW.SCREENS  = P2:CURR.MOD:".SCREENS"
FNAME1=NEW.SCREENS;FNAME2 = ORIG.SCREENS
ONAME=CURR.MOD:".SCREENS"
GOSUB 1000
ORIG.CPYLIB = P1:CURR.MOD:".CPYLIB"
NEW.CPYLIB = P2:CURR.MOD:".CPYLIB"
FNAME1=NEW.CPYLIB ; FNAME2=ORIG.CPYLIB
ONAME=CURR.MOD:".CPYLIB"
GOSUB 1000
*
RETURN
*
3000 * PROCESS THE DICT OF A FILE
*PRINTER OFF
*
*
IF CURR.MOD = "PMC" THEN
  DORIG.T = SACCT
  DNEW.T =  DACCT
END ELSE
  DORIG.T = SACCT:"-":CURR.MOD
  DNEW.T = DACCT:"-":CURR.MOD
END
*
ERR.PRINTED=0
DELETE MD, "TEMPQNAME3"
DELETE MD, "TEMPQNAME4"
CMD1 = 'SETFILE ':DPATH:DNEW.T:"/":ID:" TEMPQNAME4 OVERWRITING"
*INPATH = DPATH:DNEW.T:"/":ID
*QPTR = "TEMPQNAME4"
*GOSUB 4000
UDTEXECUTE CMD1 CAPTURING ERRMSG2
IF ERRMSG2[1,7] = "No such" THEN
*  PRINTER ON 
  ERR.PRINTED=1
  PRINT SPACE(3):DNEW.T:"/":ID:"  Unable to Open "
*  PRINTER OFF
END
*CMD2 = 'SETFILE ':SPATH:FNAME2:" TEMPQNAME1 OVERWRITING"
CMD2 = 'SETFILE ':SPATH:DORIG.T:"/":ID:" TEMPQNAME3 OVERWRITING"
UDTEXECUTE CMD2 CAPTURING ERRMSG2
*INPATH = SPATH:DORIG.T:"/":ID
*QPTR = "TEMPQNAME3"
*GOSUB 4000
*IF ERROUT THEN
IF ERRMSG2[1,7] = "No such" THEN
*  PRINTER ON 
  ERR.PRINTED=1
  PRINT SPACE(3):DORIG.T:"/":ID:"  Unable to Open "
*  PRINTER OFF
END
IF ERR.PRINTED THEN RETURN
*
OPEN "DICT","TEMPQNAME3" TO SDICTFILE ELSE
  PRINT "UNABLE TO OPEN DICT OF SRC ":FNAME1:"()":CMD1
  RETURN
END
OPEN "DICT","TEMPQNAME4" TO DDICTFILE ELSE
  PRINT "UNABLE TO OPEN DICT OF DEST ":FNAME1:"()":CMD2
  RETURN
END
*
PERFORM "SSELECT DICT TEMPQNAME3"
SELECT SDICTFILE TO LIST2
DDONE = 0
DITEMCTR=0
DITEMMIS=0
*PRINTER ON
HDGTXT="Processing DICT ":ID
PRTHDG=0
LOOP
  READNEXT DID FROM LIST2 ELSE DDONE=1
UNTIL DDONE DO
  DITEMCTR=DITEMCTR+1
  READ DREC1 FROM SDICTFILE,DID THEN
    READ DREC2 FROM DDICTFILE,DID THEN
      IF DREC1 # DREC2 THEN
        * THE DICT ITEMS ARE DIFFERENT PRINT AN ERROR
        IF NOT(PRTHDG) THEN
          PRINT SPACE(8):HDGTXT
          PRTHDG=1
        END
*        PRINT SPACE(8):"    ":DID:STR("-",34-LEN(DID)):" MISSMATCH"
        PRINT SPACE(8):"    ":DID:STR(" ",34-LEN(DID)):" MISSMATCH"
        PRINT SPACE(8):"    ":DID:STR(" ",34-LEN(DID)):" MISMATCH"
        DITEMMIS=DITEMMIS+1
      END ELSE
        * THEY MATCH
      END
    END ELSE
      * THE ITEM IS MISSING FROM THE DESTINATION FILE
      IF NOT(PRTHDG) THEN
        PRINT SPACE(8):HDGTXT
        PRTHDG=1
      END
*      PRINT SPACE(8):"    ":DID:STR(" ",34-LEN(DID)):" MISSING "
      DITEMMIS=DITEMMIS+1
    END
  END ELSE
    * THIS IS A MISSING ITEM FROM THE FILE SELECTED
    PRINT " MISSING ITEM FROM SOURCE DICT ":ID:" ":DID
  END
REPEAT
IF DITEMMIS <= 0 THEN
  * NO PRINT
END ELSE
  PRINT SPACE(8):"Processed DICT ":ID:" Items ":DITEMCTR:" Missmatch ":DITEMMIS
END
*PRINTER OFF
RETURN
*
4000 *
*
*****  SETFILE replacement
*
*  expects INPATH and QPTR as input and will write to the MD the ptr
*  also will set ERROROUT if error encountered
*  expects that the VOC file will be opened to MD
*
*   
IF INDEX(INPATH,"/",1) THEN
  * THIS is a relative or absolute path not a local file
  NUMSLASH = DCOUNT(INPATH,"/")
  QFNAME = FIELD(INPATH,"/",NUMSLASH)
  DO.DIR=0
  ERROUT=''
  IF INPATH[1,1] = '/' THEN
    * This is an absolute ptr 
    VRB = "ls -dla ":INPATH
    UDTEXECUTE VRB CAPTURING BACKDATA
    IF BACKDATA[1,1] = 'd' THEN
      * this file is a directory
      DO.DIR=1
    END ELSE
      * this file is a normal file
    END
  END ELSE
    * This is a relative ptr
    ERROUT = "Cannot handle relative ptrs yet ":INPATH
  END
  IF ERROUT='' THEN
    PARENTPATH=''
    LCTR=NUMSLASH-1
    FOR II = 1 TO LCTR
      IF II = 1 THEN
        PARENTPATH="/"
      END ELSE
        PARENTPATH = PARENTPATH:"/":FIELD(INPATH,"/",II)
      END
    NEXT II
    IF DO.DIR THEN
      OUTMDREC="DIR"
    END ELSE
      OUTMDREC="F"
    END
    OUTMDREC<2>=INPATH
    OUTMDREC<3>=PARENTPATH:"/D_":QFNAME
    WRITE OUTMDREC ON MD,QPTR
    OPEN QPTR TO TEMPQFILE ELSE
      ERROUT = "Unable to open file ":INPATH
    END
  END
END ELSE
  ERROUT = "Unable to handle ":INPATH
END
RETURN
*
*** PROCESS OUTPUT FILE
5000 *
IF ISA.SCREEN THEN
  FKEY = SCRNAME
  FID = FIELD(ID,"*",1)
END ELSE
  FKEY = ONAME:"|":ID
  FID = ID
END
READU FREC FROM PRIMAC.VERSION.MODS, FKEY THEN
  RELEASE PRIMAC.VERSION.MODS, FKEY
END ELSE
  FREC = ""
  FREC<1> = ONAME
  FREC<2> = FID
  WRITE FREC ON PRIMAC.VERSION.MODS , FKEY
END
RETURN
5100 *
READU FREC FROM PRIMAC.VERSION.MODS, FKEY THEN
  IF ISA.SCREEN THEN
    IF NOT(FOUND.SCREEN) THEN            ;* FIRST TIME SCREEN
      IF CFLAG # "" THEN
        FREC<CVAL> = CFLAG
      END ELSE
        IF FREC<CVAL> # "" THEN
          FREC<CVAL> = ""
        END
      END
      IF MFLAG # "" THEN
        FREC<MVAL> = MFLAG
      END ELSE
        IF FREC<MVAL> # "" THEN
          FREC<MVAL> = ""
        END
      END
    END ELSE            ;* SECOND TIME SCREEN
      IF CFLAG # "" THEN
        FREC<CVAL> = CFLAG
      END
      IF MFLAG # "" THEN
        FREC<MVAL> = MFLAG
      END
    END
  END ELSE
    IF CFLAG # "" THEN
      FREC<CVAL> = CFLAG
    END ELSE
      IF FREC<CVAL> # "" THEN
        FREC<CVAL> = ""
      END
    END
    IF MFLAG # "" THEN
      FREC<MVAL> = MFLAG
    END ELSE
      IF FREC<MVAL> # "" THEN
        FREC<MVAL> = ""
      END
    END
  END
  WRITE FREC ON PRIMAC.VERSION.MODS , FKEY
END
RETURN
