*********************************************************************
*
* PROGRAM  - RCV.MANIFEST.MAINT
*
* AUTHOR   - Nick Amendola, NASTech, Inc.
*
* DATE     - 09/28/97
*
* DESCRIPTION
*
* This program is used to maintain the Manifest data for the
* Roll/Skid Receiving system.
*
*T25697 edvard 03/20/2001 * Make manifest weight and received weight   
*                           total weight for the whole manifest not    
*                           just one product.                          
*                           Manifest weight is now single valued field 
*                           while received weight is per product but is
*                           displayed as a sum of all products.        
*                           Remove LBS as only uom option. csf 38401
*                           RCVMAN.TOT.WGT and RCVMAN.REC.WGT are 
*                           stored in MD2 format while RCVMAN.RWEIGHT
*                           format depends on RSKI.UNIT of measure.
*                           So for LBS and MSI it is in MD2 and
*                           everything else is in MD0
*T26496 lhelms 03/21/2002 * UPGRADE TO REV12 REMOVE ROLL.SKID.INFO
*                           REPLACE WITH INV_SERIAL CALL NEW UPDATE
*                           PROGRAM, REMOVE RCV.MANIFEST REPLACE WITH
*                           DAILY_STOCK
*T26556 cmykleb 05/08/2002 * Have report get the rpt # from the proc and
*                            use GET.PROG.HEAD for the heading.
*T25740 lhelms 05/08/2002 * PROBLEM 478, NEED TO DISPLAY INFO AFTER
*                           POSTED AND ADD TO MANIFEST
*T25740 lhelms 05/09/2002 * MODS TO INQUIRY MODE
*T25740 epitka 06/12/2002 * FIX MISMATCH IN COMMON ARRAYS
*T26556 adelgado 06/17/2002 * FIX DISPLAY OF REC QTY & PROD REC QTY
*C40208 lhelms   06/20/2002 * CORRECTED PROD DISPLAY
*T27705 lross 11/14/2003 * Expand Serial to 15 chars.
*T28441 lross 02/14/2005 * Handle multi-same-prods on PO.
*T28214 lross 06/09/2006 * Check MILL ID validation.
*********************************************************************
*
*---- COPY STATEMENTS
*
*COPY>CPYLIB>COM1
*COPY>ICS.CPYLIB>COM.INV.MAIN
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>ICS.CPYLIB>COM.INV.LINK
*COPY>POS.CPYLIB>COM.PO.INTRF
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>CUSTOMER
*COPY>ICS.CPYLIB>DAILY_STOCK
*COPY>ICS.CPYLIB>CATEGORY
*COPY>CPYLIB>GEN.XREF.SUB
*COPY>PMC.CPYLIB>VEND
*COPY>PMC.CPYLIB>PO
*COPY>JCS.CPYLIB>JOB
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>ICS.CPYLIB>INV_SERIAL
*COPY>ICS.CPYLIB>PO.MAN.XREF
*COPY>ICS.CPYLIB>PO.RSKI.XREF ;*T28214
*COPY>ICS.CPYLIB>MILL_TO_SERIAL
*COPY>RCV.CPYLIB>RCV.FILE.VARS
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*
   DEFFUN CALC.DIAM(COST.QTY,STK.QTY,MAT INV.REC)
*
*
*---- PRE-INITIALIZATION
*
   PROCREAD PARAM ELSE PARAM = ""
   ACTION = PARAM<1>
   RPT.NO = PARAM<2> ; * T26556
*
*---- OPEN ALL FILES
*
   OPEN "","COMPANY" TO COMPANY ELSE
      ERRMSG = "CANNOT OPEN COMPANY FILE"; GOSUB 90000; STOP
   END
   OPEN "","CONTROL" TO CONTROL ELSE
      ERRMSG = "CANNOT OPEN CONTROL FILE"; GOSUB 90000; STOP
   END
   OPEN "","CATEGORY" TO CATEGORY ELSE
      ERRMSG = "CANNOT OPEN CATEGORY FILE"; GOSUB 90000; STOP
   END
   OPEN "","DAILY_STOCK" TO DAILY_STOCK ELSE
      ERRMSG = "CANNOT OPEN DAILY_STOCK FILE"; GOSUB 90000; STOP
   END
   OPEN "","SECURITY" TO SECURITY ELSE
      ERRMSG = "CANNOT OPEN SECURITY FILE"; GOSUB 90000; STOP
   END
   OPEN "","PO" TO PO ELSE
      ERRMSG = "CANNOT OPEN PO FILE"; GOSUB 90000; STOP
   END
   OPEN "","PO.MAN.XREF" TO PO.MAN.XREF ELSE
      ERRMSG = "CANNOT OPEN PO.MAN.XREF"; GOSUB 90000;STOP
   END
   OPEN "","PO.RSKI.XREF" TO PO.RSKI.XREF ELSE
      ERRMSG = "CANNOT OPEN PO.RSKI.XREF"; GOSUB 90000;STOP
   END
   OPEN "","VEND" TO VEND ELSE
      ERRMSG = "CANNOT OPEN VEND FILE"; GOSUB 90000; STOP
   END
   OPEN "","JOB" TO JOB ELSE
      ERRMSG = "CANNOT OPEN JOB FILE"; GOSUB 90000; STOP
   END
   OPEN "","CUSTOMER" TO CUSTOMER ELSE
      ERRMSG = "CANNOT OPEN CUSTOMER FILE"; GOSUB 90000; STOP
   END
   OPEN "","WAREHOUSE" TO WAREHOUSE ELSE
      ERRMSG = "CANNOT OPEN WAREHOUSE FILE"; GOSUB 90000; STOP
   END
   OPEN "","INVENTORY" TO INVENTORY ELSE
      ERRMSG = "CANNOT OPEN INVENTORY FILE"; GOSUB 90000; STOP
   END
   OPEN "","INV.WHSE" TO INV.WHSE ELSE
      ERRMSG = "CANNOT OPEN INV.WHSE FILE"; GOSUB 90000; STOP
   END
   OPEN "","INV_SERIAL" TO INV_SERIAL ELSE
      ERRMSG = "CANNOT OPEN INV_SERIAL FILE"; GOSUB 90000; STOP
   END
   OPEN "","RCV.PO.XREF" TO RCV.PO.XREF ELSE
      ERRMSG = "CANNOT OPEN RCV.PO.XREF FILE"; GOSUB 90000; STOP
   END
   OPEN "","RCV.ROLL.XREF" TO RCV.ROLL.XREF ELSE
      ERRMSG = "CANNOT OPEN RCV.ROLL.XREF FILE"; GOSUB 90000; STOP
   END
   OPEN "","RCV.SCREENS" TO M.SCREENS ELSE
      ERRMSG = "CANNOT OPEN RCV.SCREENS FILE"; GOSUB 90000; STOP
   END
*T28214 v
   OPEN "","MILL_TO_SERIAL" TO MILL_TO_SERIAL ELSE
     ERRMSG="CANNOT OPEN MILL_TO_SERIAL FILE";GOSUB 90000; STOP
   END
*
*---- INITIALIZATION
*
   CONO = ""
   CALL GET.CONO1 (CONO, MAT COMP.REC, COMPANY, CONTROL)
   MAT EDIT.COM.DRIVER = ""
   ECD.SCRN.CNT = 1
   ECD.SCRN.NAME = "RCV.MANIFEST.MAINT"
   ECD.ACTION=1; CALL SCRN.EDIT
   ECD.SCRN.NO = 1
   ESN = ECD.SCRN.NO
*
*---- INITIALIZATION
*
   PORT.NO='TTY'
   CALL SYSVARS.SUB(PORT.NO)
   READV OPER.ID FROM SECURITY, "R.":PORT.NO,2 ELSE OPER.ID = ''
   MAT SCV.REC = ""
   ECD.ACTION=2; CALL SCRN.EDIT
   BEGIN.PAGE = 10
   PAGE.SIZE = 10
   LINE.SPACE = 1
   PROD.CNT = 0
   PROD.PTR = 1
   ROLL.CNT = 0
   REF.NO = ""
   OLD.START = ""
   MAN.NO = ""
   PO.NO = ""
   DEL.LIST = ""
   SCALER = 2
   ROLL.ARR=""
   RCVD.WGT = 0
   MAT GEN.XREF.REC = ""
   GXR.CO = CONO
*
   DIM HOLD.ISTK.REC(ISTK.REC.SIZE) ; MAT HOLD.ISTK.REC=""
   MAT ISTK.REC = ""
  *
   GOTO 110
*
*---- MAIN PROCESSING
*
100 *
   RELEASE
   ECD.ACTION=6; CALL SCRN.EDIT
   MAT SCV.REC = ""
110 *
   SCV.REC(1)<ESN> = DATE()
   ECD.NUM=1; ECD.ACTION=5; CALL SCRN.EDIT

* GET PO
   GOSUB 920
   IF ECD.RET.VALUE = "END" THEN GOTO 99999
*
   GOSUB ENT.MANIFEST.NBR
   IF ECD.RET.VALUE = "END" THEN GOTO 100
*
   NEW.REC = 0
*
   IF ACTION = "M" THEN
      MATREADU DSR.REC FROM DAILY_STOCK, CONO:PO.NO:"!":MAN.NO LOCKED
         ERRMSG = "Sorry, item is locked. Try again later! "
         GOSUB 90000
         GOTO 100
      END ELSE
         MAT DSR.REC = ""
         DSR.PO = PO.NO
         DSR.SHPMNT.NO = MAN.NO
         DSR.DATE = RSMAN.ENTRY.DATE
         DSR.EMP = @LOGNAME
         DSR.VEND = PO.VEND.NO
         NEW.REC = 1
*
* LOAD OLD DATA
*
         GOSUB LOAD.DAILY.STOCK
      END
   END ELSE
      MATREAD DSR.REC FROM DAILY_STOCK, CONO:PO.NO:"!":MAN.NO ELSE
         MAT DSR.REC = ""
         DSR.PO = PO.NO
         DSR.SHPMNT.NO = MAN.NO
         DSR.DATE = RSMAN.ENTRY.DATE
         DSR.EMP = @LOGNAME
         DSR.VEND = PO.VEND.NO
         NEW.REC = 1
*
* LOAD OLD DATA
*
         GOSUB LOAD.DAILY.STOCK
      END
   END
   GOSUB 85100
   PROD.CNT = DCOUNT(DSR.PROD,VM)
   IF PROD.CNT = 0 THEN
      ERRMSG = "No Serial Stock on P/O. Try again! "
      GOSUB 90000
      GOTO 100
   END
   PROD.PTR = 1
120 *
*IF NEW.REC THEN
* GOSUB 990
* IF ECD.RET.VALUE = "END" THEN GOTO 100
* ROLL.CNT = 0
* GOSUB LOAD.HEADER.DATA
* GOSUB LOAD.MLINE.DATA
* REF.NO = 1
* OLD.START = ""
* GOSUB DISP.MLINE.DATA
* GOSUB 1010
* IF ECD.RET.VALUE = "END" THEN GOTO 100
* ROLL.CNT = 0
*END ELSE
   GOSUB 990
   IF ECD.RET.VALUE = "END" THEN GOTO 100
   NUM.PROD = DCOUNT(DSR.PROD,VM)
   FOR P = 1 TO NUM.PROD
      NUM.SERIAL = DCOUNT(DSR.SERIAL<1,P>,SVM)
      FOR S = 1 TO NUM.SERIAL
         MATREAD ISTK.REC FROM INV_SERIAL, CONO:DSR.SERIAL<1,P,S> ELSE
            MAT ISTK.REC = ""
         END
         LOCATE DSR.SERIAL<1,P,S> IN ROLL.ARR<1>,1 SETTING RPOS THEN
            ROLL.ARR<1,RPOS> = DSR.SERIAL<1,P,S>
            ROLL.ARR<2,RPOS> = ""
            ROLL.ARR<3,RPOS> = ""
            ROLL.ARR<4,RPOS> = ISTK.QTY.ENTERED
         END ELSE
            ROLL.ARR<1,-1> = DSR.SERIAL<1,P,S>
            ROLL.ARR<2,-1> = ""
            ROLL.ARR<3,-1> = ""
            ROLL.ARR<4,-1> = ISTK.QTY.ENTERED
         END
      NEXT S
   NEXT P
   ROLL.CNT = DCOUNT(DSR.SERIAL<1,PROD.PTR>,SM)
   GOSUB LOAD.HEADER.DATA
   GOSUB LOAD.MLINE.DATA
   REF.NO = 1
   OLD.START = ""
   GOSUB DISP.MLINE.DATA
   IF NEW.REC THEN GOSUB 1010 ;*T28214
*END
*
*---- GET OPERATOR REPLY
*
500 *
   BEGIN CASE
      CASE ACTION = "M"
         ECD.NUM=21; ECD.ACTION=4; CALL SCRN.EDIT
      CASE 1
         ECD.NUM=23; ECD.ACTION=4; CALL SCRN.EDIT
   END CASE
   OPT = ECD.RET.VALUE
510 *
   BEGIN CASE
      CASE OPT = "E" OR OPT = "END"
         IF ACTION = "M" THEN
            MISMATCH = 0
            READ VREC FROM DAILY_STOCK, CONO:PO.NO:"!":MAN.NO ELSE VREC = ""
            FOR VPTR = 1 TO DSR.REC.SIZE UNTIL MISMATCH
               IF DSR.REC(VPTR) # VREC<VPTR> THEN MISMATCH = 1
            NEXT VPTR
            IF MISMATCH THEN
               ECD.NUM=25; ECD.ACTION=4; CALL SCRN.EDIT
               IF ECD.RET.VALUE # "Y" THEN GOTO 500
            END
         END
         GOTO 100
      CASE NUM(OPT) AND OPT # ""
         ON OPT GOSUB 1010
      CASE OPT = "A" AND ROLL.CNT < 999
         MODE = "A"
         DONE = 0
         FOR REF.NO = ROLL.CNT+1 TO 999 UNTIL DONE
            GOSUB DISP.MLINE.DATA
            GOSUB ENT.MLINE.DATA
            IF ECD.RET.VALUE = "END" THEN
               DONE = 1
               GOSUB DEL.MLINE.DATA
            END ELSE
               ROLL.CNT = ROLL.CNT + 1
            END
         NEXT REF.NO
         REF.NO = ROLL.CNT
         OLD.START = ""
         GOSUB DISP.MLINE.DATA
      CASE OPT = "C" AND ROLL.CNT > 0
         MODE = "C"
         GOSUB GET.LINE.NBR
         IF ECD.RET.VALUE # "" AND ECD.RET.VALUE # "END" THEN
            REF.NO = ECD.RET.VALUE
            GOSUB ENT.MLINE.DATA
            IF ECD.RET.VALUE = "END" THEN
               OLD.START = ""
               GOSUB DISP.MLINE.DATA
            END
         END
      CASE OPT = "D" AND ROLL.CNT > 0
         MODE = "D"
         GOSUB GET.LINE.NBR
         IF ECD.RET.VALUE # "" AND ECD.RET.VALUE # "END" THEN
            REF.NO = ECD.RET.VALUE
*
            IF DSR.LOC.STATUS<1,PROD.PTR,REF.NO> = "Delete from Manifest" THEN
               DSR.LOC.STATUS<1,PROD.PTR,REF.NO> = ""
               ROLL.ID = DSR.SERIAL<1,PROD.PTR,REF.NO>
               LOCATE ROLL.ID IN DEL.LIST<1>,1 SETTING DINDX THEN DEL DEL.LIST<1,DINDX>
            END ELSE
               DSR.LOC.STATUS<1,PROD.PTR,REF.NO> = "Delete from Manifest"
               ROLL.ID = DSR.SERIAL<1,PROD.PTR,REF.NO>
               LOCATE ROLL.ID IN DEL.LIST<1>,1 SETTING DINDX ELSE DEL.LIST<1,DINDX> = ROLL.ID
            END
            GOSUB LOAD.MLINE.DATA
            OLD.START = ""
            GOSUB DISP.MLINE.DATA
         END
         GOSUB DISP.TOT.WGT ; * 38020
      CASE OPT = "S" OR OPT = "SF"
         REF.NO = OLD.START + PAGE.SIZE
         IF REF.NO > ROLL.CNT THEN REF.NO = 1
         GOSUB DISP.MLINE.DATA
      CASE OPT = "SR"
         REF.NO = OLD.START - PAGE.SIZE
         IF REF.NO < 1 THEN REF.NO = 1
         GOSUB DISP.MLINE.DATA
      CASE OPT = "ST"
         REF.NO = 1
         GOSUB DISP.MLINE.DATA
      CASE OPT = "SB"
         REF.NO = ROLL.CNT
         IF REF.NO < 1 THEN REF.NO = 1
         GOSUB DISP.MLINE.DATA
      CASE OPT = "P" AND PROD.PTR > 1
         PROD.PTR -= 1
         ROLL.CNT = DCOUNT(DSR.SERIAL<1,PROD.PTR>,SM)
         GOSUB LOAD.HEADER.DATA
         GOSUB LOAD.MLINE.DATA
         REF.NO = 1
         OLD.START = ""
         GOSUB DISP.MLINE.DATA
      CASE OPT = "N" AND PROD.PTR < PROD.CNT
         PROD.PTR += 1
         ROLL.CNT = DCOUNT(DSR.SERIAL<1,PROD.PTR>,SM)
         GOSUB LOAD.HEADER.DATA
         GOSUB LOAD.MLINE.DATA
         REF.NO = 1
         OLD.START = ""
         GOSUB DISP.MLINE.DATA
      CASE OPT = "R"
         CALL RCV.PROD.SEL(CONO, DSR.PROD, INVENTORY, SELECTION)
         ECD.ACTION=2; CALL SCRN.EDIT
         IF SELECTION > 0 THEN
            PROD.PTR = SELECTION
            ROLL.CNT = DCOUNT(DSR.SERIAL<1,PROD.PTR>,SM)
            GOSUB LOAD.HEADER.DATA
            GOSUB LOAD.MLINE.DATA
         END ELSE
            GOSUB 80050
         END
         OLD.START = ""
         GOSUB DISP.MLINE.DATA
      CASE OPT = "F" AND ACTION = "M"
         GOSUB 85200                             ;* Update associated files
         MATWRITE DSR.REC ON DAILY_STOCK, CONO:PO.NO:"!":MAN.NO
         GOTO 100
* CASE OPT = "PUR"
*   ERRMSG = ""
*   FOR PP = 1 TO PROD.CNT WHILE ERRMSG = ""
*     IF DSR.POST.DATE<1,PP> # "" THEN
*       ERRMSG = "Cannot purge posted receipts. Try again! "
*     END
*   NEXT PP
*   IF ERRMSG # "" THEN
*     GOSUB 90000
*   END ELSE
*     SCV.REC(24)<ESN> = ""
*     ECD.NUM=24; ECD.ACTION=4; CALL SCRN.EDIT
*     IF ECD.RET.VALUE = "Y" THEN
*       FOR PP = PROD.CNT TO 1 STEP -1
*         ROLL.ID = DSR.SERIAL<1,PP>
*         MILL.ID = DSR.MILL.ID<1,PP>
*         DEL DSR.SERIAL<1,PP>
*         DEL DSR.MILL.ID<1,PP>
*         DEL DSR.QTY<1,PP>
*         DEL DSR.WHSE<1,PP>
*         DEL DSR.LOC<1,PP>
*         DEL DSR.STATUS<1,PP>
*         DEL DSR.POST.DATE<1,PP>
*         MATWRITEU DSR.REC ON DAILY_STOCK, CONO:PO.NO:"!":MAN.NO
**        CALL RCV.ROLL.XREF.MAINT(CONO, MILL.ID, "", ROLL.ID, MAT RCV.FILE.VARS)
*       NEXT PP
*       DELETE DAILY_STOCK, CONO:PO.NO:"!":MAN.NO
*       GOTO 100
*     END
*   END
      CASE OPT = "POST"
         PROD.FLAG = "A"
         IF SUM(DSR.QTY<1>) # (DSR.SHPMNT.TOT<1> * 10) THEN
            SCV.REC(29)<ESN> = ""
            ECD.NUM=29; ECD.ACTION=4; CALL SCRN.EDIT
            IF ECD.RET.VALUE # "Y" THEN GOTO 500
         END
         SCV.REC(28)<ESN> = ""
         ECD.NUM=28; ECD.ACTION=4; CALL SCRN.EDIT
         IF ECD.RET.VALUE = "END" THEN GOTO 500
         REPORT.FLAG = ECD.RET.VALUE
*38020 ^
         GOSUB 85200                             ;* Update associated files
         MATWRITE DSR.REC ON DAILY_STOCK, CONO:PO.NO:"!":MAN.NO
*T26556 v
*        CALL RCV.MANIFEST.POST(CONO, PO.NO, MAN.NO, PROD.FLAG, MAT DSR.REC, DAILY_STOCK, REPORT.FLAG, ERRMSG)
         CALL RCV.MANIFEST.POST(CONO,PO.NO,MAN.NO,PROD.FLAG,MAT DSR.REC,DAILY_STOCK,REPORT.FLAG,ERRMSG,RPT.NO)
*T26556 ^
*   FOR PPTR = 1 TO PROD.CNT WHILE ERRMSG = ""
*     RCNT = DCOUNT(DSR.SERIAL<1,PPTR>,SM)
*     FOR RPTR = 1 TO RCNT WHILE ERRMSG = ""
*       IF DSR.LOC.STATUS<1,PPTR,RPTR> # "" THEN
*         ERRMSG = "Please check errors! "; GOSUB 90000
*       END
*     NEXT RPTR
*   NEXT PPTR
*
         ECD.SCRN.NO = ESN
         ECD.ACTION = 2; CALL SCRN.EDIT
         ECD.ACTION = 3; CALL SCRN.EDIT
*
         IF ERRMSG = 1 THEN
            ERRMSG = "Please check errors! "; GOSUB 90000
         END ELSE
            IF ERRMSG = "" OR ERRMSG = 0 THEN
               ERRMSG = "** COMPLETED **"
               GOSUB 90000
               GOTO 100
            END
         END
      CASE 1
         PRINT BEL:
   END CASE
   GOTO 500
*
*************
GET.LINE.NBR: 
*************
*
   ECD.MINV = OLD.START
   ECD.MAXV = ECD.MINV + PAGE.SIZE - 1
   IF ECD.MAXV > ROLL.CNT THEN ECD.MAXV = ROLL.CNT
   ECD.NUM=22; ECD.ACTION=4; CALL SCRN.EDIT
   RETURN
*
***************
DEL.MLINE.DATA: 
***************
*
   DEL DSR.SERIAL<1,PROD.PTR,REF.NO>
   DEL DSR.MILL.ID<1,PROD.PTR,REF.NO>
   DEL DSR.QTY<1,PROD.PTR,REF.NO>
   DEL DSR.WHSE<1,PROD.PTR,REF.NO>
   DEL DSR.LOC<1,PROD.PTR,REF.NO>
   DEL DSR.LOC.STATUS<1,PROD.PTR,REF.NO>
   GOSUB LOAD.MLINE.DATA
   RETURN
*
*****************
ENT.MANIFEST.NBR: 
*****************
*
   SCV.REC(2)<ESN> = MAN.NO
   ECD.NUM=2; ECD.ACTION=4; CALL SCRN.EDIT
   IF ECD.RET.VALUE = "END" THEN RETURN
   IF ECD.RET.VALUE = "???" THEN
      OPEN "","PREFIX" TO PREFIX ELSE
         ERRMSG = "UNABLE TO OPEN PREFIX"
         GOSUB 90000
         GOTO ENT.MANIFEST.NBR
      END
      OPEN "","XREF.DATA" TO XREF.DATA ELSE
         ERRMSG = "UNABLE TO OPEN XREF.DATA"
         GOSUB 90000
         GOTO ENT.MANIFEST.NBR
      END
      GXR.NAME = "MANIFEST"
      GXR.FILE = PO.MAN.XREF
      GXR.OPEN.DATA = 'PO.MAN.XREF'
      CALL GEN.XREF.SUB(MAT GEN.XREF.REC,PREFIX,XREF.DATA)
      ECD.ACTION = 2; CALL SCRN.EDIT
      ECD.ACTION = 3; CALL SCRN.EDIT
      IF GXR.ID = "" THEN GOTO ENT.MANIFEST.NBR
      ECD.RET.VALUE = FIELD(GXR.ID,"!",2)
      ECD.ACTION = 3; CALL SCRN.EDIT
   END
   IF ECD.RET.VALUE # "END" THEN
      ECD.RET.VALUE = UPCASE(TRIM(ECD.RET.VALUE))
      SCV.REC(2)<ESN> = ECD.RET.VALUE
      ECD.NUM=2; ECD.ACTION=5; CALL SCRN.EDIT
      MAN.NO = ECD.RET.VALUE
   END
   MATREADU RSMAN.REC FROM PO.MAN.XREF, CONO:PO.NO:"!":MAN.NO LOCKED
      ERRMSG = "P/O XREF IS locked"; GOSUB 90000; GOTO ENT.MANIFEST.NBR
   END ELSE
* Creating new manifest with roll/skids that are not assigned to a manifest yet.
      MAT RSMAN.REC = ""
      MANIFEST = MAN.NO
      ECD.RET.VALUE = MANIFEST
      RSMAN.RS.NO = RSXRF.RS.NO
      RSMAN.LINE.NO = RSXRF.LN.NO;*T28441
      RCNT = DCOUNT(RSXRF.RS.NO,VM)
      MAT HOLD.ISTK.REC = MAT ISTK.REC
      FOR RPTR = 1 TO RCNT
         ROLLMAN = ''
         MATREAD ISTK.REC FROM INV_SERIAL,CONO:RSXRF.RS.NO<1,RPTR> THEN
*T28441     IF ISTK.MANIFEST.NO # '' THEN
            IF ISTK.MANIFEST.NO # '' AND ISTK.MANIFEST.NO # MAN.NO THEN
               LOCATE RSXRF.RS.NO<1,RPTR> IN RSMAN.RS.NO<1>,1 SETTING SPTR THEN
                  RSMAN.RS.NO = DELETE(RSMAN.RS.NO,1,SPTR,0)
                  DEL RSMAN.LINE.NO<1,SPTR>;*T28441
               END
            END
         END
      NEXT RPTR
      MAT ISTK.REC = MAT HOLD.ISTK.REC
      IF RSMAN.RS.NO = '' THEN
         ERRMSG = 'There are no unassigned Serials, Cannot add Manifest'
         GOSUB 90000
         GOTO ENT.MANIFEST.NBR
      END
      NEW.MANIFEST = 1
      RSMAN.MAN.NO = MANIFEST
   END
   S.SERIAL = RSMAN.RS.NO
   S.PO.LINE.NO=RSMAN.LINE.NO
   MANIFEST = ECD.RET.VALUE
   RETURN
*
*---- GET P/O NUMBER
*
920 *
   SCV.REC(3)<ESN> = PO.NO
   ECD.NUM=3; ECD.ACTION=4; CALL SCRN.EDIT
   IF ECD.RET.VALUE = "END" THEN RETURN
   MATREADU PO.REC FROM PO, CONO:ECD.RET.VALUE LOCKED
      ERRMSG = "P/O is locked"; GOSUB 90000; GOTO 920
   END ELSE
      ERRMSG = "Invalid P/O number. Try again! "; GOSUB 90000; GOTO 920
   END
*
   MATREADU RSXRF.REC FROM PO.RSKI.XREF, CONO: ECD.RET.VALUE LOCKED 
      RELEASE
      ERRMSG = 'P/O record is locked by user - ':GETUSERNAME(STATUS())
      GOSUB 90000;GOTO 920 
   END ELSE
      RELEASE
      ERRMSG ="Invalid P/O for this function"
      GOSUB 90000; GOTO 920
   END
*
   MATREAD VEND.REC FROM VEND, CONO:PO.VEND.NO ELSE
      MAT VEND.REC = ""
      VEND.DESC = "???????????????"
   END
   PO.NO = ECD.RET.VALUE
   SCV.REC(4)<ESN> = VEND.DESC
   ECD.NUM=4; ECD.ACTION=5; CALL SCRN.EDIT
   GXR.SRCH.ID = PO.MAN
   MCNT = DCOUNT(PO.MAN,VM)
   FOR MPTR = 1 TO MCNT
      MAN.ID = PO.NO:'!':PO.MAN<1,MPTR>
      GXR.SRCH.ID = REPLACE(GXR.SRCH.ID,1,MPTR,0,MAN.ID)
   NEXT MPTR
*
   RETURN
*
*---- GET MANIFEST DATE
*
990 *
   IF ACTION # "M" AND DSR.DATE # "" THEN RETURN
   SCV.REC(55)<ESN> = DSR.DATE
   ECD.NUM=55; ECD.ACTION=4; CALL SCRN.EDIT
   IF ECD.RET.VALUE # "END" THEN
      DSR.DATE = ECD.RET.VALUE
   END
   RETURN
*
*---- GET MANIFEST WEIGHT
*
1010 *
   ECD.NUM=10; ECD.ACTION=4; CALL SCRN.EDIT
   IF ECD.RET.VALUE # "END" THEN
      DSR.SHPMNT.TOT<1> = ECD.RET.VALUE
   END
   SCV.REC(10)<ESN> = OCONV(DSR.SHPMNT.TOT<1>,"MD2,"); * 38020
   ECD.NUM=10; ECD.ACTION=5; CALL SCRN.EDIT
*
   RETURN
*
***************
ENT.MLINE.DATA: 
***************
   ;*
   ;* line number
   ;*
   ECD.SUB.NUM=REF.NO
   ECD.NUM=11; ECD.ACTION=5; CALL SCRN.EDIT
   ;*
10100 *
   ;* roll id
   ;*
   SCV.REC(12)<ESN,REF.NO> = DSR.SERIAL<1,PROD.PTR,REF.NO>
   ECD.SUB.NUM=REF.NO
   ECD.NUM=12; ECD.ACTION=4; CALL SCRN.EDIT
   IF ECD.RET.VALUE = "END" THEN GOTO 19950
*T27705 v
   VALID=1
   IF LEN(ECD.RET.VALUE) = 8 THEN
      CALL CHECK.DIGIT("T", ECD.RET.VALUE, "10RL", CKDIG, VALID)
   END
*T27705 ^
   IF NOT(VALID) THEN
      ERRMSG = "Invalid Roll/Skid #. Try again! "; GOSUB 90000
      GOTO 10100
   END
   LOCATE ECD.RET.VALUE IN DSR.SERIAL<1,PROD.PTR>,1 SETTING P THEN
      IF P <> REF.NO THEN
         ERRMSG = "Duplicate Roll/Skid on line # ":P
         GOSUB 90000
         GOTO 10100
      END
   END
* 26496
*
* MATREADU RSKI.REC FROM ROLL.SKID.INFO, CONO:ECD.RET.VALUE LOCKED
   MATREADU ISTK.REC FROM INV_SERIAL, CONO:ECD.RET.VALUE LOCKED
      ERRMSG = "Record locked by another user. Try again later! "
      GOSUB 90000
      GOTO 10100
   END THEN
      ERRMSG = ""
      IF ISTK.POST.DATE = "" THEN
         BEGIN CASE
            CASE ISTK.PO.NO # "" AND ISTK.PO.NO # PO.NO
               ERRMSG = "Serial Item already present on P/O ":ISTK.PO.NO:", Manifest ":ISTK.MANIFEST.NO
            CASE ISTK.MANIFEST.NO # "" AND ISTK.MANIFEST.NO # MAN.NO
               ERRMSG = "Serial Item already present on P/O ":ISTK.PO.NO:", Manifest ":ISTK.MANIFEST.NO
            CASE ISTK.PO.LINE # PROD.PTR
               ERRMSG="Serial Item is not for this product/PO line."
         END CASE
      END ELSE
         ERRMSG = "Serial Item has already been posted."
      END
      IF ERRMSG # "" THEN
         RELEASE INV_SERIAL, CONO:ECD.RET.VALUE
         GOSUB 90000
         GOTO 10100
      END
   END ELSE
      MAT ISTK.REC = ""
      ISTK.ENTRY.DATE = DATE()
   END
   TEMP.MF1 = ECD.RET.VALUE
   PREV.PPTR = 0
   PREV.RPTR = 0
   FOR PPTR = PROD.CNT TO 1 STEP -1 WHILE PREV.PPTR = 0
      IF PPTR # PROD.PTR THEN
         LOCATE TEMP.MF1 IN DSR.SERIAL<1,PPTR>,1 SETTING RPTR THEN
            PREV.PPTR = PPTR
            PREV.RPTR = RPTR
         END
      END
   NEXT PPTR
   GOSUB 40000
*T28441 IF ISTK.UOM='LBS' OR ISTK.UOM='MSI' THEN
   IF ISTK.UOM#'SHT' AND ISTK.UOM#'FT' AND ISTK.UOM#'PC' THEN
      SCALER= 2
   END ELSE
      SCALER= 0
   END
   DSR.UOM<1,PROD.PTR> = ISTK.UOM
   ;*
10200 *
   ;*  mill id
   ;*
   IF PREV.PPTR > 0 THEN
      SCV.REC(13)<ESN,REF.NO> = DSR.MILL.ID<1,PREV.PPTR,PREV.RPTR>
   END
   ECD.SUB.NUM=REF.NO
   ECD.NUM=13; ECD.ACTION=4; CALL SCRN.EDIT
   IF ECD.RET.VALUE = "END" THEN GOTO 19950
   ECD.RET.VALUE = UPCASE(TRIM(ECD.RET.VALUE))
   SCV.REC(13)<ESN,REF.NO> = ECD.RET.VALUE
   ECD.SUB.NUM=REF.NO
   ECD.NUM=13; ECD.ACTION=5; CALL SCRN.EDIT
*T28214 v
   MATREAD MTS.REC FROM MILL_TO_SERIAL, CONO:ECD.RET.VALUE THEN
     IF MTS.SERIAL # TEMP.MF1 THEN
       ERRMSG='Mill ID belongs to Serial ':MTS.SERIAL:', choose again.'
       GOSUB 90000
       GOTO 10200
     END
   END
*T28214 ^
   TEMP.MF2 = ECD.RET.VALUE
   ;*
10300 *
   ;* weight/quantity
   ;*
*T28441 IF ISTK.UOM='LBS' OR ISTK.UOM='MSI' THEN
   IF ISTK.UOM#'SHT' AND ISTK.UOM#'FT' AND ISTK.UOM#'PC' THEN
      SCV.REC(14)<ESN,REF.NO>=OCONV(ISTK.QTY.ENTERED,"MD2")
*     SCV.REC(14)<ESN,REF.NO>=SCV.REC(14)<ESN,REF.NO> * 100
      SCALER = 2
   END ELSE
      SCV.REC(14)<ESN,REF.NO> = ISTK.QTY.ENTERED
      SCALER = 0
   END
   ECD.SUB.NUM=REF.NO
   ECD.NUM=14;ECD.SCALER = SCALER
   ECD.ACTION=4; CALL SCRN.EDIT
   IF ECD.RET.VALUE = "END" THEN GOTO 19950
*T28441 IF ISTK.UOM='LBS' OR ISTK.UOM='MSI' THEN
   IF ISTK.UOM#'SHT' AND ISTK.UOM#'FT' AND ISTK.UOM#'PC' THEN
     ECD.RET.VALUE *= 100
   END
   TEMP.MF3 = ECD.RET.VALUE
***
   VALUE = TEMP.MF3
   TEMP.QTY.ENTERED = VALUE
   IF DIFF.UM = "Y" THEN
      TEMP.WEIGHT = VALUE
      IF ICR.CNV<1,2> = "MD0" THEN
         VALUE = INT(((VALUE/ICR.MT1<1,2>)*ICR.DV1<1,2>)*ICR.DV2<1,2> + .5)
      END
      IF ICR.CNV<1,1> = "MD0" THEN
         IF ICR.CNV<1,2> # "MD0" THEN
            VALUE = ECD.RET.VALUE * 10
         END
         VALUE = INT(((VALUE/ICR.DV1<1,1>)*ICR.MT1<1,1>)/ICR.DV2<1,1> + .5)
         TEMP.SHEET = VALUE
         VALUE = INT(((VALUE/ICR.MT1<1,1>)*ICR.DV1<1,1>)*ICR.DV2<1,1> + .5)
      END ELSE
         VALUE = VALUE * ICR.MT1<1,1> * 10
         TEMP.SHEET = ""
      END
   END ELSE
      IF ICR.CNV<1,1> = "MD0" THEN
         TEMP.SHEET = VALUE
         VALUE = INT(((VALUE/ICR.MT1<1,1>)*ICR.DV1<1,1>)*ICR.DV2<1,1> + .5)
      END ELSE
         VALUE = VALUE * 10
         TEMP.SHEET = ""
      END
   END
   TEMP.WEIGHT = VALUE
   LOCATE TEMP.MF1 IN ROLL.ARR<1>,1 SETTING RPOS THEN
      ROLL.ARR<1,RPOS> = TEMP.MF1
      ROLL.ARR<2,RPOS> = TEMP.WEIGHT
      ROLL.ARR<3,RPOS> = TEMP.SHEET
      ROLL.ARR<4,RPOS> = TEMP.QTY.ENTERED
   END ELSE
      ROLL.ARR<1,-1> = TEMP.MF1
      ROLL.ARR<2,-1> = TEMP.WEIGHT
      ROLL.ARR<3,-1> = TEMP.SHEET
      ROLL.ARR<4,-1> = TEMP.QTY.ENTERED
   END
***
*T28441 IF ISTK.UOM='LBS' OR ISTK.UOM='MSI' THEN
   IF ISTK.UOM#'SHT' AND ISTK.UOM#'FT' AND ISTK.UOM#'PC' THEN
      SCV.REC(14)<ESN,REF.NO> = OCONV(TEMP.MF3,"MD2"); * 38017
      SCALER = 2
   END ELSE
      SCV.REC(14)<ESN,REF.NO> = OCONV(TEMP.MF3,"MD0"); * 38017
      SCALER = 0
   END
   ECD.SUB.NUM=REF.NO
   ECD.NUM=14;ECD.SCALER = SCALER
   ECD.ACTION=5; CALL SCRN.EDIT
* T26424
   IF (TEMP.MF3 + 0) = 0 THEN
      TEMP.MF4 = DSR.WHSE<1,PROD.PTR>
      TEMP.MF5 = DSR.LOC<1,PROD.PTR,REF.NO>
      GOTO 19900
   END
   ISTK.QTY.ENTERED = TEMP.MF3
   ;*
10400 *
   ;* whse
   ;*
   BEGIN CASE
      CASE PREV.PPTR > 0
         SCV.REC(15)<ESN,REF.NO> = DSR.WHSE<1,PREV.PPTR>
      CASE REF.NO > 1 AND DSR.WHSE<1,PROD.PTR> = ""
         SCV.REC(15)<ESN,REF.NO> = DSR.WHSE<1,PROD.PTR>
      CASE 1
         SCV.REC(15)<ESN,REF.NO> = DSR.WHSE<1,PROD.PTR>
   END CASE
   ECD.SUB.NUM=REF.NO
   ECD.NUM=15; ECD.ACTION=4; CALL SCRN.EDIT
   IF ECD.RET.VALUE = "END" THEN GOTO 19950
   ECD.RET.VALUE = UPCASE(TRIM(ECD.RET.VALUE))
   SCV.REC(15)<ESN,REF.NO> = ECD.RET.VALUE
   ECD.SUB.NUM=REF.NO
   ECD.NUM=15; ECD.ACTION=5; CALL SCRN.EDIT
   MATREAD WHSE.REC FROM WAREHOUSE, CONO:ECD.RET.VALUE ELSE
      ERRMSG = "Invalid Warehouse. Try again! "; GOSUB 90000; GOTO 10400
   END
   MATREAD IWH.REC FROM INV.WHSE, CONO:DSR.PROD<1,PROD.PTR>:"!":ECD.RET.VALUE ELSE
      ERRMSG = "Product not defined for Warehouse. Try again! "; GOSUB 90000; GOTO 10400
   END
   TEMP.MF4 = ECD.RET.VALUE
   ;*
10500 *
   ;* location
   ;*
   BEGIN CASE
      CASE PREV.PPTR > 0
         SCV.REC(16)<ESN,REF.NO> = DSR.LOC<1,PREV.PPTR,PREV.RPTR>
      CASE REF.NO > 1 AND DSR.LOC<1,PROD.PTR,REF.NO> = ""
         SCV.REC(16)<ESN,REF.NO> = DSR.LOC<1,PROD.PTR,REF.NO-1>
      CASE 1
         SCV.REC(16)<ESN,REF.NO> = DSR.LOC<1,PROD.PTR,REF.NO>
   END CASE
   ECD.SUB.NUM=REF.NO
   ECD.NUM=16; ECD.ACTION=4; CALL SCRN.EDIT
   IF ECD.RET.VALUE = "END" THEN GOTO 19950
   ECD.RET.VALUE = UPCASE(TRIM(ECD.RET.VALUE))
   SCV.REC(16)<ESN,REF.NO> = ECD.RET.VALUE
   ECD.SUB.NUM=REF.NO
   ECD.NUM=16; ECD.ACTION=5; CALL SCRN.EDIT
   TEMP.MF5 = ECD.RET.VALUE
19900 *
   IF PREV.PPTR > 0 THEN
      DEL DSR.SERIAL<1,PREV.PPTR,PREV.RPTR>
      DEL DSR.MILL.ID<1,PREV.PPTR,PREV.RPTR>
      DEL DSR.QTY<1,PREV.PPTR,PREV.RPTR>
      DEL DSR.LOC<1,PREV.PPTR,PREV.RPTR>
      DEL DSR.LOC.STATUS<1,PREV.PPTR,PREV.RPTR>
      DEL DSR.POST.DATE<1,PREV.PPTR,PREV.RPTR>
   END
   LOCATE TEMP.MF1 IN DSR.SERIAL<1,PROD.PTR>,1 BY "AL" SETTING RP ELSE
      INS "" BEFORE DSR.SERIAL<1,PROD.PTR,RP>
      INS "" BEFORE DSR.MILL.ID<1,PROD.PTR,RP>
      INS "" BEFORE DSR.QTY<1,PROD.PTR,RP>
      INS "" BEFORE DSR.DIAM<1,PROD.PTR,RP>
      INS "" BEFORE DSR.LOC<1,PROD.PTR,RP>
      INS "" BEFORE DSR.LOC.STATUS<1,PROD.PTR,RP>
      INS "" BEFORE DSR.POST.DATE<1,PROD.PTR,RP>
   END
   DSR.SERIAL<1,PROD.PTR,RP> = TEMP.MF1
   DSR.MILL.ID<1,PROD.PTR,RP> = TEMP.MF2
   DSR.QTY<1,PROD.PTR,RP> = TEMP.WEIGHT
   MATREAD INV.REC FROM INVENTORY,CONO:DSR.PROD<1,PROD.PTR> THEN
      DSR.DIAM<1,PROD.PTR,RP>=CALC.DIAM(TEMP.WEIGHT,DSR.STK.QTY<1,PROD.PTR,RP>,MAT INV.REC)
   END ELSE
      MAT INV.REC=''
   END
   DSR.WHSE<1,PROD.PTR>   = TEMP.MF4
   DSR.LOC<1,PROD.PTR,RP>   = TEMP.MF5
   IF (TEMP.MF3 + 0) = 0 THEN
      DSR.LOC.STATUS<1,PROD.PTR,RP> = 'Delete entire Serial'
   END ELSE
      DSR.LOC.STATUS<1,PROD.PTR,RP> = ""
   END
   GOSUB 19950
   OLD.START = ""
   GOSUB DISP.MLINE.DATA
   GOSUB DISP.TOT.WGT ; * 38020
*
   LOCATE TEMP.MF1 IN DEL.LIST<1>,1 SETTING P THEN DEL DEL.LIST<1,P>
   RETURN
19950 *
   GOSUB LOAD.MLINE.DATA
   RETURN
******************
DISP.MLINE.DATA: 
******************
*
   START.LINE = 1 + INT((REF.NO-1)/PAGE.SIZE) * PAGE.SIZE
   LAST.LINE = START.LINE + PAGE.SIZE - 1
   IF LAST.LINE > ROLL.CNT THEN LAST.LINE = ROLL.CNT
   IF START.LINE = OLD.START THEN RETURN
   OLD.START = START.LINE
   FOR ECD.NUM = 11 TO 17
      ECD.SUB.NUM = START.LINE
      ECD.SCALER = SCALER
      ECD.ACTION = 7
      CALL SCRN.EDIT
   NEXT ECD.NUM
   P1 = INT((START.LINE-1)/PAGE.SIZE)+1
   P2 = INT((ROLL.CNT)/PAGE.SIZE)+1; IF P2=0 THEN P2=1
   SCV.REC(51)<ESN> = P1
   ECD.NUM=51; ECD.ACTION=5; CALL SCRN.EDIT
   SCV.REC(52)<ESN> = P2
   ECD.NUM=52; ECD.ACTION=5; CALL SCRN.EDIT
   RETURN
*
****************
LOAD.DAILY.STOCK: 
****************
*
   NUM.SERIAL = DCOUNT(S.SERIAL,VM)
   FOR N = 1 TO NUM.SERIAL
      MATREAD ISTK.REC FROM INV_SERIAL,CONO:S.SERIAL<1,N> ELSE            
         MAT ISTK.REC = ""                                                  
         ERRMSG = "Serial information record cannot be found":S.SERIAL<1,N>
         GOTO 90000                                                         
      END                                                                  
      INV.ID = CONO:ISTK.PROD
      IWH.ID = INV.ID:"!":ISTK.WHSE
      GOSUB CHECK.DATA
*T28441 LOCATE ISTK.PROD IN DSR.PROD<1>,1 SETTING PINDEX THEN
      LOCATE ISTK.PO.LINE IN DSR.PO.LINE<1>,1 SETTING PINDEX THEN
*T28466  LOCATE S.SERIAL<1,N> IN DSR.SERIAL<1,PINDEX>,1 SETTING SINDEX ELSE
         LOCATE S.SERIAL<1,N> IN DSR.SERIAL<1,PINDEX>,1 SETTING SINDEX THEN
            DSR.POST.DATE<1,PINDEX,SINDEX> = ISTK.POST.DATE
         END ELSE
*T28466 ^
            DSR.SERIAL<1,PINDEX,SINDEX> = S.SERIAL<1,N>
            DSR.LOC<1,PINDEX,SINDEX> = ISTK.LOC
            DSR.MILL.ID<1,PINDEX,SINDEX> = ISTK.MILL.ID
            DSR.POST.DATE<1,PINDEX,SINDEX> = ISTK.POST.DATE
         END
      END ELSE
         DSR.PROD<1,PINDEX> = ISTK.PROD
         DSR.WHSE<1,PINDEX> = ISTK.WHSE
* C 40208
         DSR.PO<1,PINDEX> = ISTK.PO.NO
         DSR.PO.LINE<1,PINDEX> = ISTK.PO.LINE
         DSR.UOM<1,PINDEX> = ISTK.UOM
         LOCATE S.SERIAL<1,N> IN DSR.SERIAL<1,PINDEX>,1 SETTING SINDEX ELSE
            DSR.SERIAL<1,PINDEX,SINDEX> = S.SERIAL<1,N>
            DSR.LOC<1,PINDEX,SINDEX> = ISTK.LOC
            DSR.MILL.ID<1,PINDEX,SINDEX> = ISTK.MILL.ID
            DSR.POST.DATE<1,PINDEX,SINDEX> = ISTK.POST.DATE
         END
      END
   NEXT N
   RETURN
*
************
CHECK.DATA:*
*
   INV.PRESENT = 1
   IWH.PRESENT = 1
   S.STATUS = ""
   MAT INV.REC = ""
   MATREAD INV.REC FROM INVENTORY,INV.ID ELSE
      INV.PRESENT = 0
      IWH.PRESENT = 0
      MAT INV.REC = ""
      MAT IWH.REC = ""
      ERRMSG = "Inventory record cannot be found - ":ISTK.PROD
      GOSUB 90000
      S.STATUS = "INV.REC. MISSING"
   END
   IF INV.PRESENT THEN
      MATREAD IWH.REC FROM INV.WHSE,IWH.ID ELSE
         MAT IWH.REC = ""
         ERRMSG = "Inventory warehouse record cannot be found - ":IWH.ID
         GOSUB 90000
         S.STATUS = "IWH.REC":IWH.ID:" IS MISSING"
      END
   END
   IF S.STATUS = '' THEN
      MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
         ERRMSG = "Product Line '":INV.LINE:"' Missing"; GOSUB 90000
         S.STATUS = ERRMSG
      END
      IF S.STATUS = '' THEN
         IF CATG.INV="" OR CATG.ACCRU.LIAB="" OR CATG.AP.ACCT="" THEN
            ERRMSG = "Acct Details Missing for Prod Line '":INV.LINE:"'"; GOSUB 90000
            S.STATUS = ERRMSG
         END
      END
   END
   RETURN
****************
LOAD.HEADER.DATA: 
*****************
*
   MATREAD PO.REC FROM PO, CONO:PO.NO THEN
      MATREAD VEND.REC FROM VEND, CONO:PO.VEND.NO ELSE
         MAT VEND.REC = ""
         VEND.DESC = "Vendor # ":PO.VEND.NO:" not on file."
      END
   END ELSE
      MAT PO.REC = ""
      MAT VEND.REC = ""
      VEND.DESC = "???????????????"
   END
   JCNT = DCOUNT(JOB.NOS<1,PROD.PTR>,SM)
   CCNT = DCOUNT(CUST.NOS<1,PROD.PTR>,SM)
   BEGIN CASE
      CASE JCNT = 1
         JOBNO = JOB.NOS<1,PROD.PTR>
         CNAME = "???????????????"
         MATREAD JOB.REC FROM JOB, CONO:JOBNO THEN
            CNAME = "Customer # ":JOB.CUST
            MATREAD CUST.REC FROM CUSTOMER, CONO:JOB.CUST THEN CNAME = CUST.NAME
         END
      CASE CCNT = 1
         JOBNO = "MULTIPLE"
         CUSTNO = CUST.NOS<1,PROD.PTR>
         CNAME = "Customer # ":CUSTNO
         MATREAD CUST.REC FROM CUSTOMER, CONO:CUSTNO THEN CNAME = CUST.NAME
      CASE JCNT > 1
         JOBNO = "MULTIPLE"
         CUSTNO = ""
         CNAME = ''
      CASE 1
         JOBNO = ""
         CNAME = ""
   END CASE
   PROD.NO = DSR.PROD<1,PROD.PTR>
   MATREAD INV.REC FROM INVENTORY, CONO:PROD.NO THEN
      IDESC1 = INV.DESC
      BASWGT = INT(INV.BAS.WT/100)
      BEGIN CASE
         CASE MOD(INV.PAP.WIDTH,10000) = 0
            IWIDTH = OCONV(INT(INV.PAP.WIDTH/10000),"MD0")
         CASE MOD(INV.PAP.WIDTH,1000) = 0
            IWIDTH = OCONV(INT(INV.PAP.WIDTH/1000),"MD1")
         CASE MOD(INV.PAP.WIDTH,100) = 0
            IWIDTH = OCONV(INT(INV.PAP.WIDTH/100),"MD2")
         CASE MOD(INV.PAP.WIDTH,10) = 0
            IWIDTH = OCONV(INT(INV.PAP.WIDTH/10),"MD3")
         CASE 1
            IWIDTH = OCONV(INV.PAP.WIDTH,"MD4")
      END CASE
      IDESC2 = BASWGT:"# ":IWIDTH:'"'
   END ELSE
      MAT INV.REC = ""
      IDESC1 = "???????????????"
      IDESC2 = ""
   END
   SCV.REC(10)<ESN> = ""
   ECD.NUM=10; ECD.ACTION=5; CALL SCRN.EDIT
   SCV.REC(59)<ESN> = ""
   ECD.NUM=59; ECD.ACTION=5; CALL SCRN.EDIT
   SCV.REC(56)<ESN> = ""
   ECD.NUM=56; ECD.ACTION=5; CALL SCRN.EDIT
   SCV.REC(1)<ESN>  = DATE()
   SCV.REC(2)<ESN>  = MAN.NO
   SCV.REC(3)<ESN>  = PO.NO
   SCV.REC(4)<ESN>  = VEND.DESC
   SCV.REC(5)<ESN>  = JOBNO
   SCV.REC(6)<ESN>  = CNAME
   SCV.REC(7)<ESN>  = PROD.NO
   SCV.REC(8)<ESN>  = IDESC1
   SCV.REC(9)<ESN>  = IDESC2
   SCV.REC(10)<ESN> = OCONV(RSMAN.MAN.TOT.WGT<1>,"MD2,") ; * 38020
   SCV.REC(53)<ESN> = PROD.PTR
   SCV.REC(54)<ESN> = PROD.CNT
   SCV.REC(55)<ESN> = DSR.DATE
* CALC.WEIGHT = SUM(DSR.QTY<1,PROD.PTR>)
* IF DSR.UOM<1,PROD.PTR>='LBS' OR DSR.UOM<1,PROD.PTR>='MSI' THEN
*   NULL
* END ELSE
*   CALC.WEIGHT = ICONV(CALC.WEIGHT,"MD2")
* END
   PROD.ENTERED = ""
   IF DSR.SERIAL<1,PROD.PTR> # "" THEN
      NUM.SERIAL = DCOUNT(DSR.SERIAL<1,PROD.PTR>,SVM)
      FOR S = 1 TO NUM.SERIAL
         MATREAD ISTK.REC FROM INV_SERIAL, CONO:DSR.SERIAL<1,PROD.PTR,S> ELSE
            MAT ISTK.REC = ""
         END
         LOCATE DSR.SERIAL<1,PROD.PTR,S> IN ROLL.ARR<1>,1 SETTING RPOS THEN
            ISTK.QTY.ENTERED = ROLL.ARR<4,RPOS>
         END
      * IF DSR.POST.DATE<1,PROD.PTR,S> = "" THEN     ;* T26556
         IF DSR.UOM<1,PROD.PTR> = "LBS" OR DSR.UOM<1,PROD.PTR> = "MSI" THEN
            PROD.ENTERED+=ISTK.QTY.ENTERED
         END ELSE
            PROD.ENTERED+=ISTK.QTY.ENTERED*100
         END
      * END                                          ;* T26556
      NEXT S
   END
   ENTERED = ""
   IF DSR.SERIAL # "" THEN
      NUM.PROD = DCOUNT(DSR.PROD,VM)
      FOR P = 1 TO NUM.PROD
         NUM.SERIAL = DCOUNT(DSR.SERIAL<1,P>,SVM)
         FOR S = 1 TO NUM.SERIAL
            MATREAD ISTK.REC FROM INV_SERIAL, CONO:DSR.SERIAL<1,P,S> ELSE
               MAT ISTK.REC = ""
            END
            LOCATE DSR.SERIAL<1,P,S> IN ROLL.ARR<1>,1 SETTING RPOS THEN
               ISTK.QTY.ENTERED = ROLL.ARR<4,RPOS>
            END
        * IF DSR.POST.DATE<1,P,S> = "" THEN     ;* T26556
            IF DSR.UOM<1,P> = "LBS" OR DSR.UOM<1,P> = "MSI" THEN
               ENTERED+=ISTK.QTY.ENTERED
            END ELSE
               ENTERED+=ISTK.QTY.ENTERED*100
            END
        * END                                   ;* T26556
         NEXT S
      NEXT P
   END
* SCV.REC(59)<ESN> = OCONV(SUM(DSR.QTY<1>),"MD2,") ; * 38020
   SCV.REC(59)<ESN> = OCONV(ENTERED,"MD2,")  
*  SCV.REC(56)<ESN> = OCONV(CALC.WEIGHT,"MD2,"); * 38017
   SCV.REC(56)<ESN> = OCONV(PROD.ENTERED,"MD2,")
   SCV.REC(60)<ESN> = DSR.UOM<1,PROD.PTR>
80050 *
   ECD.ACTION=3; CALL SCRN.EDIT
   RETURN
*
****************
LOAD.MLINE.DATA: 
****************
*
   SCV.REC(11)<ESN> = ""
   SCV.REC(12)<ESN> = ""
   SCV.REC(13)<ESN> = ""
   SCV.REC(14)<ESN> = ""
   SCV.REC(15)<ESN> = ""
   SCV.REC(16)<ESN> = ""
   SCV.REC(17)<ESN> = ""
   LCNT = DCOUNT(DSR.SERIAL<1,PROD.PTR>,SM)
   FOR REF = 1 TO LCNT
      SCV.REC(11)<ESN,REF> = REF
      SCV.REC(12)<ESN,REF> = DSR.SERIAL<1,PROD.PTR,REF>
      SERIAL.ID = CONO:DSR.SERIAL<1,PROD.PTR,REF>
      MATREAD ISTK.REC FROM INV_SERIAL,SERIAL.ID THEN
         LOCATE DSR.SERIAL<1,PROD.PTR,REF> IN ROLL.ARR<1>,1 SETTING RPOS THEN
            ISTK.QTY.ENTERED = ROLL.ARR<4,RPOS>
         END
         IF ISTK.UOM='LBS' OR ISTK.UOM='MSI' THEN
            SCV.REC(14)<ESN,REF>=OCONV(ISTK.QTY.ENTERED,"MD2")
         END ELSE
            SCV.REC(14)<ESN,REF> = ISTK.QTY.ENTERED
         END
         SCV.REC(13)<ESN,REF> = DSR.MILL.ID<1,PROD.PTR,REF>
         SCV.REC(15)<ESN,REF> = DSR.WHSE<1,PROD.PTR>
         SCV.REC(16)<ESN,REF> = DSR.LOC<1,PROD.PTR,REF>
         IF ISTK.POST.DATE # "" THEN
            SCV.REC(17)<ESN,REF> = "Posted on ":OCONV(ISTK.POST.DATE,"D2/")
         END ELSE
            SCV.REC(17)<ESN,REF> = DSR.LOC.STATUS<1,PROD.PTR,REF>
         END
      END
   NEXT REF
   RETURN
*
*---- DERIVE RELEVANT PRODUCTS, JOBS AND CUSTOMERS
*
85100 *
   JOB.NOS  = ""
   CUST.NOS = ""
*PCNT = DCOUNT(PO.PROD.NUM,VM)
* PCNT = DCOUNT(DSR.PROD,VM)
* FOR PO.LINE = 1 TO PCNT
*  IF PO.PROD.TYPE<1,PO.LINE> = "ROLL" OR PO.PROD.TYPE = "SHEET" THEN
* PROD.NO = PO.PROD.NUM<1,PO.LINE>
* PROD.NO = DSR.PROD<1,PO.LINE>
* LOCATE PO.LINE IN DSR.PO.LINE<1>,1 SETTING P ELSE
*   DSR.PO.LINE<1,P> = PO.LINE
*   DSR.PROD<1,P> = PROD.NO
*   DSR.WHSE<1,P> = PO.WHSE<1,PO.LINE>
*   DSR.UN.PRICE<1,P> =  PO.GROS.PRICE<1,PO.LINE>
*   DSR.UOM<1,P> = PO.UNIT.FLG<1,PO.LINE>
* END
* JOB.NOS<1,P> = PO.JOB.NO<1,PO.LINE>
* JCNT = DCOUNT(PO.JOB.NO<1,PO.LINE>,SM)
* FOR JP = 1 TO JCNT
*   JOBNO = PO.JOB.NO<1,PO.LINE,JP>
*   MATREAD JOB.REC FROM JOB, CONO:JOBNO THEN
*     IF JOB.CUST # "" THEN
*       LOCATE JOB.CUST IN CUST.NOS<1,P>,1 SETTING P ELSE CUST.NOS<1,P,-1> = JOB.CUST
*     END
*   END
* NEXT JP
*  END
* NEXT PO.LINE
   RETURN
*
*---- UPDATE INV_SERIAL FILE
*
85200 *
   DCNT = DCOUNT(DEL.LIST,VM)
   FOR DP = 1 TO DCNT
      ROLL.ID = DEL.LIST<1,DP>
      MATREADU ISTK.REC FROM INV_SERIAL, CONO:ROLL.ID THEN
         ERRMSG = ""
         BEGIN CASE
            CASE ISTK.PO.NO # "" AND ISTK.PO.NO # PO.NO
               ERRMSG = "Cannot delete Serial Item ":ROLL.ID:". Mismatch for P/O ":ISTK.PO.NO:", Manifest ":ISTK.MANIFEST.NO:"."
            CASE ISTK.MANIFEST.NO # "" AND ISTK.MANIFEST.NO # MAN.NO
               ERRMSG = "Cannot delete Serial Item ":ROLL.ID:". Roll mismatch for P/O ":ISTK.PO.NO:", Manifest ":ISTK.MANIFEST.NO:"."
         END CASE
         IF ERRMSG = "" THEN

            ISTK.MANIFEST.NO = ""
            ISTK.LBS.ENTERED = ""
            ISTK.LOC = ""
            ISTK.MILL.ID = ""
            ISTK.ENTRY.DATE = ""
            ISTK.EDIT.DATE = ""
            ISTK.POST.DATE = ""
            ISTK.STATUS = ""
            ISTK.WHSE = PO.WHSE
            MATWRITE ISTK.REC ON INV_SERIAL, CONO:ROLL.ID
            LOCATE ROLL.ID IN RSMAN.RS.NO<1>,1 SETTING SINDEX THEN
               RSMAN.RS.NO = DELETE(RSMAN.RS.NO,1,SINDEX,0)
               RSMAN.MAN.TOT.WGT = DELETE(RSMAN.MAN.TOT.WGT,1,SINDEX,0)
               RSMAN.MAN.NO = DELETE(RSMAN.MAN.NO,1,SINDEX,0)
               RSMAN.ENTRY.DATE = DELETE(RSMAN.ENTRY.DATE,1,SINDEX,0)
               RSMAN.STATUS = DELETE(RSMAN.STATUS,1,SINDEX,0)
               RSMAN.LINE.NO = DELETE(RSMAN.LINE.NO,1,SINDEX,0)
               RSMAN.PLACE = DELETE(RSMAN.PLACE,1,SINDEX,0)
               MATWRITEU RSMAN.REC ON PO.MAN.XREF,CONO:PO.NO:"!":MAN.NO
            END
            FIND ROLL.ID IN DSR.SERIAL SETTING FLD,VL,SVL THEN
               DEL DSR.LOC<FLD,VL,SVL>
               DEL DSR.SERIAL<FLD,VL,SVL>
               DEL DSR.QTY<FLD,VL,SVL>
               DEL DSR.DIAM<FLD,VL,SVL>
               DEL DSR.STK.QTY<FLD,VL,SVL>
               DEL DSR.MILL.ID<FLD,VL,SVL>
               DEL DSR.LOC.STATUS<FLD,VL,SVL>
               DEL DSR.NO.PIECES<FLD,VL,SVL>
               DEL DSR.JOB<FLD,VL,SVL>
               DEL DSR.JOB.QTY<FLD,VL,SVL>
               DEL DSR.JOB.STATUS<FLD,VL,SVL>
            END
         END ELSE
            RELEASE INV_SERIAL, CONO:ROLL.ID
            GOSUB 90000
         END
      END
   NEXT DP
   FOR PP = 1 TO PROD.CNT
      RCNT = DCOUNT(DSR.SERIAL<1,PP>,SM)
      FOR RP = 1 TO RCNT
         IF DSR.POST.DATE<1,PP,RP> = "" THEN
            ROLL.ID = DSR.SERIAL<1,PP,RP>
            MATREADU ISTK.REC FROM INV_SERIAL, CONO:ROLL.ID ELSE
               MAT ISTK.REC = ""
               ISTK.WHSE    = DSR.WHSE<1,PP,RP>
               ISTK.LOC     = DSR.LOC<1,PP,RP>
               ISTK.ENTRY.DATE = DATE()
            END
            ERRMSG = ""
            BEGIN CASE
               CASE ISTK.PO.NO # "" AND ISTK.PO.NO # PO.NO
                  ERRMSG = "Cannot update Serial Item ":ROLL.ID:". Mismatch for P/O ":ISTK.PO.NO:", Manifest ":ISTK.MANIFEST.NO:"."
               CASE ISTK.MANIFEST.NO # "" AND ISTK.MANIFEST.NO # MAN.NO
                  ERRMSG = "Cannot update Serial Item ":ROLL.ID:". Roll mismatch for P/O ":ISTK.PO.NO:", Manifest ":ISTK.MANIFEST.NO:"."
            END CASE
            IF ERRMSG = "" THEN
               PMILL = ISTK.MILL.ID
               ISTK.ENTRY.DATE = DATE()
               ISTK.PO.NO        = PO.NO
               ISTK.PO.LINE = DSR.PO.LINE<1,PP>
               ISTK.LOC = DSR.LOC<1,PP,RP>
               ISTK.PROD       = DSR.PROD<1,PP>
               ISTK.MANIFEST.NO  = MAN.NO
               ISTK.MILL.ID = DSR.MILL.ID<1,PP,RP>
               ISTK.PLACE = "R"
               CMILL = ISTK.MILL.ID
               LOCATE ROLL.ID IN ROLL.ARR<1>,1 SETTING RPOS THEN
                  ISTK.LBS.ENTERED = ROLL.ARR<4,RPOS>
               END
               MATWRITE ISTK.REC ON INV_SERIAL, CONO:ROLL.ID
*
               LOCATE MAN.NO IN PO.MAN<1>,1 SETTING PINDX ELSE
                  PO.MAN = INSERT(PO.MAN,1,PINDX,0,MAN.NO)
               END
               MATWRITEU PO.REC ON PO, CONO:PO.NO
*
               LOCATE ROLL.ID IN RSMAN.RS.NO<1>,1 SETTING SPTR THEN
                  RSMAN.MAN.TOT.WGT<1,SPTR> = DSR.QTY<1,PP,RP>
                  RSMAN.MAN.NO<1,SPTR>      = MAN.NO
                  RSMAN.ENTRY.DATE<1,SPTR>  = DATE()
                  RSMAN.PLACE<1,SPTR>       = "R"
               END ELSE
                  RSMAN.RS.NO = INSERT(RSMAN.RS.NO,1,SPTR,0,ROLL.ID)
                  RSMAN.MAN.TOT.WGT = INSERT(RSMAN.MAN.TOT.WGT,1,SPTR,0,DSR.QTY<1,PP,RP>)
                  RSMAN.MAN.NO = INSERT(RSMAN.MAN.NO,1,SPTR,0,MAN.NO)
                  RSMAN.ENTRY.DATE = INSERT(RSMAN.ENTRY.DATE,1,SPTR,0,DATE())
                  RSMAN.LINE.NO    = INSERT(RSMAN.LINE.NO,1,SPTR,0,PP)
                  RSMAN.PLACE = INSERT(RSMAN.PLACE,1,SPTR,0,"R")
               END
               MATWRITEU RSMAN.REC ON PO.MAN.XREF, CONO:PO.NO:"!":MAN.NO
            END ELSE
               RELEASE INV_SERIAL, CONO:ROLL.ID
               GOSUB 90000
            END
         END
      NEXT RP
   NEXT PP
   RETURN
*
**************
DISP.TOT.WGT: 
**************
*
   PROD.ENTERED = ""
   IF DSR.SERIAL<1,PROD.PTR> # "" THEN
      NUM.SERIAL = DCOUNT(DSR.SERIAL<1,PROD.PTR>,SVM)
      FOR S = 1 TO NUM.SERIAL
         MATREAD ISTK.REC FROM INV_SERIAL, CONO:DSR.SERIAL<1,PROD.PTR,S> ELSE
            MAT ISTK.REC = ""
         END
         LOCATE DSR.SERIAL<1,PROD.PTR,S> IN ROLL.ARR<1>,1 SETTING RPOS THEN
            ISTK.QTY.ENTERED = ROLL.ARR<4,RPOS>
         END
         IF DSR.POST.DATE<1,PROD.PTR,S> = "" THEN
            IF DSR.UOM<1,PROD.PTR> = "LBS" OR DSR.UOM<1,PROD.PTR> = "MSI" THEN
               PROD.ENTERED+=ISTK.QTY.ENTERED
            END ELSE
               PROD.ENTERED+=ISTK.QTY.ENTERED*100
            END
         END
      NEXT S
   END
   ENTERED = ""
   IF DSR.SERIAL # "" THEN
      NUM.PROD = DCOUNT(DSR.PROD,VM)
      FOR P = 1 TO NUM.PROD
         NUM.SERIAL = DCOUNT(DSR.SERIAL<1,P>,SVM)
         FOR S = 1 TO NUM.SERIAL
            MATREAD ISTK.REC FROM INV_SERIAL, CONO:DSR.SERIAL<1,P,S> ELSE
               MAT ISTK.REC = ""
            END
            LOCATE DSR.SERIAL<1,P,S> IN ROLL.ARR<1>,1 SETTING RPOS THEN
               ISTK.QTY.ENTERED = ROLL.ARR<4,RPOS>
            END
            IF DSR.POST.DATE<1,P,S> = "" THEN
               IF DSR.UOM<1,P> = "LBS" OR DSR.UOM<1,P> = "MSI" THEN
                  ENTERED+=ISTK.QTY.ENTERED
               END ELSE
                  ENTERED+=ISTK.QTY.ENTERED*100
               END
            END
         NEXT S
      NEXT P
   END
   SCV.REC(59)<ESN> = OCONV(ENTERED,"MD2,")  
   ECD.NUM = 59; ECD.ACTION =5; CALL SCRN.EDIT
   SCV.REC(56)<ESN> = OCONV(PROD.ENTERED,"MD2,")
   ECD.NUM = 56; ECD.ACTION =5; CALL SCRN.EDIT
*  DSR.QTY<1,PROD.PTR> = SUM(DSR.QTY<1,PROD.PTR>)
*  IF DSR.UOM<1,PROD.PTR>='LBS' OR DSR.UOM<1,PROD.PTR>='MSI' THEN
*     NULL
*  END ELSE
*     DSR.QTY<1,PROD.PTR>= ICONV(DSR.QTY<1,PROD.PTR>,"MD2")
*  END
*  RECV.WEIGHT = SUM(DSR.QTY<1>)                        
*  SCV.REC(59)<ESN> = OCONV(RECV.WEIGHT,"MD2,")                
*  ECD.NUM = 59; ECD.ACTION=5; CALL SCRN.EDIT                  
*  CALC.WEIGHT = SUM(DSR.QTY<1,PROD.PTR>)               
*  IF DSR.UOM<1,PROD.PTR>='LBS' OR DSR.UOM<1,PROD.PTR>='MSI' THEN
*     SCV.REC(56)<ESN> = OCONV(CALC.WEIGHT,"MD2,")                
*  END ELSE
*     SCV.REC(56)<ESN> = OCONV(ICONV(CALC.WEIGHT,"MD2"),"MD2")
*  END
*  ECD.NUM=56; ECD.ACTION=5; CALL SCRN.EDIT                    
   RETURN
*
*---- GET CONVERSIONS
*
40000 *
*
   ICR.CNV = ""                                               
   ICR.DV1 = ""                                               
   ICR.DV2 = ""                                               
   ICR.MT1 = ""                                               
   BEGIN CASE                                                 
      CASE INV.UNIT<1,2> = "SHT" AND INV.UNIT<1,3> = "LBS"       
         ICR.CNV<1,1> = "MD0";             ICR.DV2<1,1> = 1      
         ICR.DV1<1,1> = INV.M.WT;          ICR.MT1<1,1> = 1      
      CASE INV.UNIT<1,2> = "PC" AND INV.UNIT<1,3> = "MSI"        
         ICR.CNV<1,1> = "MD0";             ICR.DV2<1,1> = 1      
         ICR.DV1<1,1> = INV.PAP.WIDTH/100; ICR.MT1<1,1> = 10     
      CASE INV.UNIT<1,2> = "FT" AND INV.UNIT<1,3> = "MSI"        
         ICR.CNV<1,1> = "MD0";             ICR.DV2<1,1> = 12     
         ICR.DV1<1,1> = INV.PAP.WIDTH/100; ICR.MT1<1,1> = 100    
      CASE 1                                                     
         ICR.CNV<1,1> = "MD2";             ICR.DV2<1,1> = 1      
         ICR.DV1<1,1> = 10;                ICR.MT1<1,1> = INV.SBR
   END CASE                                                   
*                                                            
   BEGIN CASE                                             
      CASE ISTK.UOM = "SHT" AND INV.UNIT<1,3> = "LBS"       
         ICR.CNV<1,2> = "MD0";             ICR.DV2<1,2> = 1  
         ICR.DV1<1,2> = INV.M.WT;          ICR.MT1<1,2> = 1  
      CASE ISTK.UOM = "PC" AND INV.UNIT<1,3> = "MSI"        
         ICR.CNV<1,2> = "MD0";             ICR.DV2<1,2> = 1  
         ICR.DV1<1,2> = INV.PAP.WIDTH/100; ICR.MT1<1,2> = 10 
      CASE ISTK.UOM = "FT" AND INV.UNIT<1,3> = "MSI"        
         ICR.CNV<1,2> = "MD0";             ICR.DV2<1,2> = 12 
         ICR.DV1<1,2> = INV.PAP.WIDTH/100; ICR.MT1<1,2> = 100
      CASE 1                                                 
         ICR.CNV<1,2> = "MD2";             ICR.DV2<1,2> = 1  
         ICR.DV1<1,2> = 10;                ICR.MT1<1,2> = 1  
   END CASE                                               
*                                                            
   IF ISTK.UOM # INV.UNIT<1,2> THEN
      DIFF.UM = "Y"
   END ELSE
      DIFF.UM = "N"
   END
   RETURN
*
*---- ERROR ROUTINE
*
90000 *
   PRINT @(0,23):@(-4):ERRMSG:
   INPUT REPLY:
   PRINT @(0,23):@(-4):
   RETURN
*
*---- END OF PROGRAM
*
99999 *
   PRINT @(-1)
END
