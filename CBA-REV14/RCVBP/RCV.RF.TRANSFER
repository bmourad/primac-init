  SUBROUTINE RCV.RF.TRANSFER (ACTION, CONO, EMPID, MAT RCV.FILE.VARS)
*********************************************************************
*
* PROGRAM  - RCV.RF.TRANSFER
*
* AUTHOR   - NICK AMENDOLA, NASTech, Inc.
*
* DATE     - 09/27/97
*
* DESCRIPTION
*
* This program is used to process the Roll Transfer transaction
* from the hand-held R-F units used in the warehouse.
*
*T26132 cm 09/06/2001 * Change screen size from 21x16 to 20x15.
*T26436 cm 02/13/2002 * The location entry field should be required.
*T26496 lhelms 03/21/2002 * UPGRADE TO REV12 REMOVE ROLL.SKID.INFO FOR
*                           REPLACE WITH INV_SERIAL
*C40541 adelgado 08/09/2002 * Don't check reservations if it's within whse
*                             & JOB.STATS file.
*T26831 adelgado 09/03/2002 * Force to transfer Real Time.
*T27750 lross 10/13/2003 * Error in WHS.DIV.
*T27705 lross 11/14/2003 * Expand Serial to 15 chars.
*********************************************************************
*
*---- COPY STATEMENTS
*
*COPY>CPYLIB>COM1
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>ICS.CPYLIB>COM.INV.LINK  
*COPY>RCV.CPYLIB>RCV.FILE.VARS
*COPY>PMC.CPYLIB>COMPANY
*COPY>CPYLIB>SCREEN.COM
*COPY>ICS.CPYLIB>DAILY_TRANSFER
*COPY>PMC.CPYLIB>EMPLOYEE
*COPY>PMC.CPYLIB>PO
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>ICS.CPYLIB>INV.HIST
*COPY>ICS.CPYLIB>INV_SERIAL
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>ICS.CPYLIB>TRANSFER
*COPY>ICS.CPYLIB>INV.CNV
*COPY>JCS.CPYLIB>JOB
*COPY>JCS.CPYLIB>JOB.STATS
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*
*---- OPEN ALL FILES
*
  OPEN "","COMPANY" TO COMPANY ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","CONTROL" TO CONTROL ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","DAILY_TRANSFER" TO DAILY_TRANSFER ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","EMPLOYEE" TO EMPLOYEE ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","PO" TO PO ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","INV_SERIAL" TO INV_SERIAL ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","CATEGORY" TO CATEGORY ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","INVENTORY" TO INVENTORY ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","INV.WHSE" TO INV.WHSE ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","INV.HIST" TO INV.HIST ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","INV.TRAN.HIST" TO INV.TRAN.HIST ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","RS.XFER" TO RS.XFER ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","TRANSFER" TO TRANSFER ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","JOB" TO JOB ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","JOB.STATS" TO JOB.STATS ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN '','INV.WHSE.LOC.TEMP' TO INV.WHSE.LOC.TEMP ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN '','INV_SERIAL_TEMP' TO INV_SERIAL_TEMP ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN '','INV_AUDIT_HIST' TO INV_AUDIT_HIST ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN '','INV_AUDIT_HIST_TEMP' TO INV_AUDIT_HIST_TEMP ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN '','INV_AUDIT_TAG' TO INV_AUDIT_TAG ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN '','INV_RECEIPTS' TO INV_RECEIPTS ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN '','INV_RECEIPTS_TEMP' TO INV_RECEIPTS_TEMP ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN '','INV_RECP_WHSE' TO INV_RECP_WHSE ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN '','INV_RECP_WHSE_TEMP' TO INV_RECP_WHSE_TEMP ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
*
*---- INITIALIZATION
*
*VT101107
*^
  REAL.TIME = 1
*
  TEST.MODE = 0
  IF LEN(ACTION) > 1 THEN
    IF ACTION[LEN(ACTION),1] = "T" THEN
      TEST.MODE = 1
    END
  END
  MATREAD COMP.REC FROM COMPANY,CONO ELSE
    MAT COMP.REC = ""
  END
  SPX = ""
  EMPNAME = "???????????????"
  MATREAD EMP.REC FROM EMPLOYEE, CONO:EMPID THEN
    EMPNAME = (EMP.FRST.NAME:" ":EMP.LAST.NAME)[1,20]
  END
  IF LEN(EMPNAME) < 20 THEN SPX = SPACE(INT((21-LEN(EMPNAME))/2))
  EMPNAME = SPX:EMPNAME
  NEW.DEF = ""
  FROM.WHS.DIV = ""
*
  TODAY = DATE()
  OTODAY = OCONV(TODAY,"D4/")
*  OTODAY = "01/31/2002"
*  TODAY = ICONV(OTODAY,"D4-")
*
*---- INITIALIZE SCREEN.COM
*
  MAT S$EDIT = ""
  S$TYP = 0
  CALL RF.INPUT
  GOSUB 89990
  S$MASK = "#"
  ERY = 15
*
*---- DISPLAY SCREEN
*
*T26132 v
*     DIM SCRN(16)
*     MAT SCRN = ""
*     XXXXXXXX = " 123456789012345678901 "
*     XXXXXXXX = "+---------------------+"
*     SCRN(01) = "|   Stock Transfers   |"
*     SCRN(02) = "|---------------------|"
*     SCRN(03) = "|@@@@@@@@@@@@@@@@@@@@@|"
*     SCRN(04) = "|---------------------|"
*     SCRN(05) = "|BR#: ########        |"
*     SCRN(06) = "|MR#: ################|"
*     SCRN(07) = "|Wgt: ######          |"
*     SCRN(08) = "|Loc: #########       |"
*     SCRN(09) = "|                     |"
*     SCRN(10) = "|Moved To: #########  |"
*     SCRN(11) = "|                     |"
*     SCRN(12) = "|------- Prior -------|"
*     SCRN(13) = "|BR#: ########        |"
*     SCRN(14) = "|MR#: ################|"
*     SCRN(15) = "|Loc: #########       |"
*     SCRN(16) = "|                     |"
*     XXXXXXXX = "+---------------------+"
*     XXXXXXXX = " 123456789012345678901 "
  DIM SCRN(15)
  MAT SCRN = ""
  XXXXXXXX = " 12345678901234567890 "
  XXXXXXXX = "+--------------------+"
  SCRN(01) = "|  Stock Transfers   |"
  SCRN(02) = "|--------------------|"
  SCRN(03) = "|@@@@@@@@@@@@@@@@@@@@|"
  SCRN(04) = "|--------------------|"
  SCRN(05) = "|BR#: ###############|" ;*T27705
  SCRN(06) = "|MR#: ###############|"
  SCRN(07) = "|Wgt: ######         |"
  SCRN(08) = "|Loc: #########      |"
  SCRN(09) = "|                    |"
  SCRN(10) = "|Moved To: ######### |"
  SCRN(11) = "|                    |"
  SCRN(12) = "|------ Prior -------|"
  SCRN(13) = "|BR#: ###############|" ;*T27705
  SCRN(14) = "|MR#: ###############|"
  SCRN(15) = "|Loc: #########      |"
  XXXXXXXX = "+---------------------+"
  XXXXXXXX = " 12345678901234567890 "
*T26132 ^
*
  SLINE = @(-1)
*T26132 v
*     FOR SL = 1 TO 16
*        SDATA = SCRN(SL)[2,21]
  FOR SL = 1 TO 15
    SDATA = SCRN(SL)[2,20]
*T26132 ^
    CONVERT "#" TO " " IN SDATA
    CONVERT "@" TO " " IN SDATA
    SDATA = TRIMB(SDATA)
    LDATA = LEN(SDATA)
    LDONE = 0
    FOR N = 1 TO LDATA UNTIL LDONE
      IF SDATA[N,1] # " " THEN
        SLINE = SLINE:@((N-1),(SL-1)):SDATA[N,99]
        LDONE = 1
      END
    NEXT N
  NEXT SL
  PRINT SLINE:
  GOSUB 89990
  MAN.NO = ""
  PO.NO = ""
  PROD.ID = ""
  JOB.NO = ""
  TOT.WGT = ""
  WHSE = ""
  WLOC = ""
*
*---- MAIN PROCESSING
*
  LOOP
    RELEASE
    PRINT @(00,02):EMPNAME:
    PRINT @(05,04):@(-4):
    PRINT @(05,05):@(-4):
    PRINT @(05,06):@(-4):
    PRINT @(05,07):@(-4):
    PRINT @(05,09):@(-4):
    GOSUB 89990
*T27705 S$TYP=1; S$X=5; S$Y=4; S$MINL=8; S$MAXL=8; S$EX=0; S$EY=9; ERY=9 
    S$TYP=1; S$X=5; S$Y=4; S$MINL=0; S$MAXL=15; S$EX=0; S$EY=9; ERY=9 
    S$O.R="O"; S$DEFAULT=""
    CALL RF.INPUT
    GOSUB 89990
    IF S$VALUE = "END" THEN GOTO 99999
    IF S$VALUE = "" THEN GOTO 99999
*T27705 v Should really look at CATG.BARCODE for below check.
    VALID=1
    IF LEN(S$VALUE) = 8 THEN
      CALL CHECK.DIGIT("T", S$VALUE, "10RL", CKDIG, VALID)
    END
*T27705 ^
    IF NOT(VALID) THEN
      ERRMSG = "INVALID SERIAL"; GOSUB 91000; GOTO 1090
    END
    MATREADU ISTK.REC FROM INV_SERIAL, CONO:S$VALUE LOCKED
      ERRMSG = "SERIAL LOCKED"; GOSUB 91000; GOTO 1090
    END ELSE
      RELEASE INV_SERIAL, CONO:S$VALUE
      ERRMSG = "INVALID SERIAL"; GOSUB 91000; GOTO 1090
    END
*
*
    IF CO.INTR.WHSE # "" THEN
      IF CO.INTR.WHSE = ISTK.WHSE THEN
        RELEASE INV_SERIAL, CONO:S$VALUE
        ERRMSG = "NO INTER-DIV"; GOSUB 91000; GOTO 1090
      END
*T27750 v Move read below out of above 'IF'
*     MATREAD WHSE.REC FROM WAREHOUSE, CONO:ISTK.WHSE ELSE
*       RELEASE INV_SERIAL, CONO:S$VALUE
*       ERRMSG = "NO WHSE DIV"; GOTO 93000; GOTO  1090
*     END
    END
    MATREAD WHSE.REC FROM WAREHOUSE, CONO:ISTK.WHSE ELSE
      RELEASE INV_SERIAL, CONO:S$VALUE
      ERRMSG = "NO WHSE DIV"; GOTO 93000; GOTO  1090
    END
*T27750 ^
    FROM.WHSE.DIV = WHS.DIV
*
    DEF.PERIOD = "";ERR.FLG = "";ERRMSG = ""
    CALL CHECK.PERIOD.DATE(CONO,TODAY,DEF.PERIOD,FROM.WHSE.DIV,ERR.FLG,ERRMSG,COMPANY,CONTROL)
    BEGIN CASE
      CASE ERRMSG = ""
      CASE ERR.FLG = 0
        ERRMSG = "DATE WARNING"; GOSUB 91000
      CASE ERR.FLG = 1
        RELEASE INV_SERIAL, CONO:S$VALUE
        ERRMSG = "DTE-PER MISMATCH" ;GOSUB 91000 ; GOTO 1090
      CASE ERR.FLG = 2
        RELEASE INV_SERIAL, CONO:S$VALUE
        ERRMSG = "FISCAL MISSING" ;GOSUB 91000 ; GOTO 1090
    END CASE
    ERRMSG = ""
    ERR.FLG = ""
*
    IF ISTK.RECP.PERIOD > DEF.PERIOD THEN
      RELEASE INV_SERIAL, CONO:S$VALUE
      ERRMSG = "RECP PER GREATER" ; GOSUB 91000 ; GOTO 1090
    END
    IF ISTK.POST.DATE = "" THEN
      RELEASE INV_SERIAL, CONO:S$VALUE
      ERRMSG = "SERIAL NOT RCVD"; GOSUB 91000; GOTO 1090
    END
    IF (ISTK.CUR.QTY + 0) = 0 THEN
      RELEASE INV_SERIAL, CONO:S$VALUE
      ERRMSG = "NO QTY"; GOSUB 91000; GOTO 1090
    END
    * C40541 v
    * IF ISTK.CUR.QTY # ISTK.RSVB.QTY THEN
    *   RELEASE INV_SERIAL, CONO:S$VALUE
    *   ERRMSG = "QTY RESERVED"; GOSUB 91000; GOTO 1090
    * END
    * C40541 ^
*
    MATREAD INV.REC FROM INVENTORY, CONO:ISTK.PROD ELSE
      RELEASE INV_SERIAL, CONO:S$VALUE
      ERRMSG = "INVALID PRODUCT"; GOSUB 91000; GOTO 1090
    END
*
*COPY>ICSBP>INV.UM.CNV
*
    PRINT @(05,05):ISTK.MILL.ID[1,15]:
*
    MATREAD IWLO.REC FROM INV.WHSE.LOC, CONO:ISTK.PROD:"!":ISTK.WHSE:"!":ISTK.LOC ELSE
      RELEASE INV_SERIAL, CONO:S$VALUE
      ERRMSG = "CANT FIND SERIAL"; GOSUB 91000; GOTO 1090
    END
    LOCATE S$VALUE IN IWLO.SERIAL<1>,1 SETTING P ELSE
      RELEASE INV_SERIAL, CONO:S$VALUE
      ERRMSG = "CANT FIND SERIAL"; GOSUB 91000; GOTO 1090
    END
    TEMP.DISPLAY=INT(((ISTK.CUR.QTY/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
    PRINT @(05,06):OCONV(TEMP.DISPLAY,ICR.CNV):
*
    IF ISTK.LOC = "" THEN
      PRINT @(10,07):ISTK.WHSE"L#4":
    END ELSE
      PRINT @(10,07):(ISTK.WHSE:"-":ISTK.LOC)"L#9":
    END
    ROLL.ID = S$VALUE
1050 *
    ROLL.WHSE = ISTK.WHSE
    PRINT @(10,09):ISTK.WHSE:"-":
    S$TYP=1;S$X=10+LEN(ISTK.WHSE)+1;S$Y=9;S$MAXL=4;S$EX=0;S$EY=15;ERY=15
*T26436 v
*     IF ISTK.LOC # "" THEN S$O.R="O"
*T28466 v
    IF NEW.DEF # "" THEN
      S$O.R = 'O'; S$DEFAULT=NEW.DEF
    END ELSE
      S$O.R="R"
    END
*T28466 ^
*T26436 ^
    CALL RF.INPUT
    GOSUB 89990
    IF S$VALUE = "END" THEN GOTO 1080
    IF S$VALUE = "" THEN S$VALUE = NEW.DEF
    NEW.DEF = S$VALUE
    ROLL.LOC = OCONV(S$VALUE,"MCU")
    BEGIN CASE
      CASE ISTK.WHSE = ROLL.WHSE AND ISTK.LOC = ROLL.LOC
      CASE REAL.TIME
        GOSUB 5000
        IF ERRMSG # "" THEN
          RELEASE INV_SERIAL, CONO:S$VALUE
          GOSUB 91000; GOTO 1090
        END
*        CASE 1
*           READU TRANSEQ FROM CONTROL, CONO:"RS.XFER.NO" ELSE TRANSEQ = 0
*           FOUND = 1
*           LOOP
*              TRANSEQ = MOD(TRANSEQ,999999) + 1
*              MATREADU RS.XFER.REC FROM RS.XFER, CONO:TRANSEQ ELSE
*                 MAT RS.XFER.REC = ""
*                 RS.XFER.DESC = "Barcode data - ":OCONV(TODAY,"D2/")
*                 RS.XFER.ENTRY.DATE = TODAY
*                 FOUND = 0
*              END
*           WHILE FOUND DO
*              RELEASE RS.XFER, CONO:TRANSEQ
*           REPEAT
*           WRITE TRANSEQ ON CONTROL, CONO:"RS.XFER.NO"
*           XPTR = DCOUNT(RS.XFER.ID,VM) + 1
*           RS.XFER.ID<1,XPTR>      = ROLL.ID
*           RS.XFER.TO.WHSE<1,XPTR> = ROLL.WHSE
*           RS.XFER.TO.LOC<1,XPTR>  = ROLL.LOC
*           MATWRITE RS.XFER.REC ON RS.XFER, CONO:TRANSEQ
    END CASE
*T27705 PRINT @(05,12):ROLL.ID"L#8":
    PRINT @(05,12):ROLL.ID"L#15":
*T26132 v
    PRINT @(05,13):ISTK.MILL.ID"L#15":
*T26132 ^
    PRINT @(05,14):(ROLL.WHSE:"-":ROLL.LOC)"L#9":
1080 *
    PRINT @(05,04):@(-4):
    PRINT @(05,05):@(-4):
    PRINT @(05,06):@(-4):
    PRINT @(05,07):@(-4):
    PRINT @(05,09):@(-4):
    GOSUB 89990
1090 REPEAT
  RETURN
*
*---- PROCESS TRANSFER
*
5000 *
  ERRMSG = ""
  IF ISTK.JOB = "" THEN
    MAT JOB.REC = ""
  END ELSE
* C40541 v
*   MATREAD JOB.REC FROM JOB, CONO:ISTK.JOB ELSE
*     ERRMSG = "ERROR 5001"      ;* "Job does not exist on Job Stats file"
*     RETURN
*   END
*   IF JOB.STATUS = "9" THEN
*     ERRMSG = "ERROR 5002"      ;* "Job has been cancelled"
*     RETURN
*   END
*   MATREAD JSTAT.REC FROM JOB.STATS, CONO:ISTK.JOB ELSE
*     ERRMSG = "ERROR 5003"      ;* "Job Stats does not exist"
*     RETURN
*   END
*   IF JSTAT.SHP.PROD = "" THEN
*     ERRMSG = "ERROR 5004"      ;* "No prod on Job Stats file"
*     RETURN
*   END
*   LOCATE ROLL.ID IN JSTAT.SHP.R.S.ID<1>,1 SETTING FNGD ELSE
*     ERRMSG = "ERROR 5005"      ;* "Serial not on JSTATS file"
*     RETURN
*   END
* C40541 ^
  END
  MATREAD IWH.REC FROM INV.WHSE, CONO:ISTK.PROD:"!":ISTK.WHSE ELSE
    ERRMSG = "NO INV.WHSE"         ;* "From Whse does not exist"
    RETURN
  END
  MATREAD IWLO.REC FROM INV.WHSE.LOC, CONO:ISTK.PROD:"!":ISTK.WHSE:"!":ISTK.LOC ELSE
    ERRMSG = "NO INV.WHSE.LOC"         ;* "From Loc does not exist"
    RETURN
  END
  LOCATE ROLL.ID IN IWLO.SERIAL<1>,1 SETTING RSPTR ELSE
    ERRMSG = "NO SER # IN LOC"         ;* "Serial not in location"
    RETURN
  END
* C40541 v
* MATREAD IWH.REC FROM INV.WHSE, CONO:ISTK.PROD:"!":ISTK.WHSE ELSE
*   ERRMSG = "ERROR 5106"         ;* "To Whse does not exist"
*   RETURN
* END
* C40541 ^
*
*---- LOAD TRANSFER RECORD
  MAT D.TRAN.REC = ""
  D.TRAN.CODE = "N"
  D.TRAN.PROD.NO         = ISTK.PROD
  D.TRAN.SERIAL          = ROLL.ID
  D.TRAN.RECP            = ISTK.RECP
  D.TRAN.TOT.WHT         = ISTK.CUR.QTY
  D.TRAN.FROM.WHSE       = ISTK.WHSE        
  D.TRAN.FROM.LOC        = ISTK.LOC         
  D.TRAN.TO.WHSE         = ISTK.WHSE      
  D.TRAN.TO.LOC          = ROLL.LOC        
  D.TRAN.QTY             = ISTK.CUR.QTY        
  D.TRAN.TOT.QTY         = ISTK.CUR.QTY        
  D.TRAN.REASON.DESC     = "RF GUN TRANSFER"
  D.TRAN.DATE.ENTER      = TODAY
  D.TRAN.PRT.DATE        = TODAY
  D.TRAN.PERIOD          = DEF.PERIOD
  D.TRAN.JOB             = ISTK.JOB
  D.TRAN.EMP             = EMPID
  MAT TRAN.REC = ""
  NEW.ERRMSG = ""
  PROCESS.FLAG = CO.ICS.REAL.TRAN
  PROCESS.FLAG = 'Y'               ;* T26831
  CALL TRAN.UPDATE(CONO,D.TRAN.CODE,MAT TRAN.REC,PROCESS.FLAG,CO.ICS.LOC.TRAN,NEW.ERRMSG)
*  IF ERRMSG = "" THEN
*     MATWRITE D.TRAN.REC ON TRANSFER, CONO:TRAN.NO
*     ISTK.WHSE = ISTK.WHSE
*     ISTK.LOC = ROLL.LOC
*     MATWRITE ISTK.REC ON INV_SERIAL, CONO:ROLL.ID
*  END ELSE
*     RELEASE INV_SERIAL, CONO:ROLL.ID
*     GOSUB 91000
*     ERRMSG = "ERROR 5201"         ;* "Update Error"
*     RETURN
*  END
  RETURN
*
*---- DRAW BORDER
*
89990 *
  IF TEST.MODE THEN
*T26132 v
*     FOR SL = 1 TO 16
*        PRINT @(21,(SL-1)):"|":
*     NEXT SL
*     PRINT @(0,16):"---------------------+":
    FOR SL = 1 TO 15
      PRINT @(20,(SL-1)):"|":
    NEXT SL
    PRINT @(0,15):"--------------------+":
*T26132 ^
  END
  RETURN
*
*---- ERROR ROUTINE
*
91000 *
  PRINT @(0,ERY):@(-4):BEL:BEL:ERRMSG[1,19]:
  INPUT REPLY,1:
  PRINT @(0,ERY):@(-4):
  ERY = 15
  RETURN
93000 *
  GOSUB 91000
*
*---- END OF PROGRAM
*
99999 *
  RETURN
END
