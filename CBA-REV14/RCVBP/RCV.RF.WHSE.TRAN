  SUBROUTINE RCV.RF.WHSE.TRAN (ACTION, CONO, EMPID, MAT RCV.FILE.VARS)
*********************************************************************
*
* PROGRAM  - RCV.RF.WHSE.TRAN
*
* AUTHOR   - JULIANNE MATHESON, NASTech, Inc.
*
* DATE     - 05/05/00
*
* DESCRIPTION
*
* This program is used to process interdivisional warehouse transfers
* from the hand-held R-F units used in the warehouse.
*
*T26132 cm 09/06/2001 * Change screen size from 16x21 to 15x20.
*T26497 adelgado 03/29/2002 * Modify to incorporate the new
*                             Inter-Divisional transfer.   
*T27705 lross 11/14/2003 * Expand Serial to 15 chars.
*********************************************************************
*
*---- COPY STATEMENTS
*
*COPY>CPYLIB>COM1
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>ICS.CPYLIB>COM.INV.LINK  
*COPY>RCV.CPYLIB>RCV.FILE.VARS
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>EMPLOYEE
*COPY>CPYLIB>SCREEN.COM
*COPY>PMC.CPYLIB>DIVISION
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>ICS.CPYLIB>INV_SERIAL
*COPY>ICS.CPYLIB>CATEGORY
*COPY>ICS.CPYLIB>INV.CNV
*COPY>RCV.CPYLIB>INTR_DIV_TRANSFER
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*
*---- OPEN ALL FILES
*
  OPEN "","INTR_DIV_TRANSFER" TO INTR_DIV_TRANSFER ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","CATEGORY" TO CATEGORY ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","PO" TO PO ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","INVENTORY" TO INVENTORY ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","INV.WHSE" TO INV.WHSE ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","INV_SERIAL" TO INV_SERIAL ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","INTR_SERIAL_XREF" TO INTR_SERIAL_XREF ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","WAREHOUSE" TO WAREHOUSE ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
  OPEN "","DIVISION" TO DIVISION ELSE
    ERRMSG = 'FILE MISSING'
    GOTO 93000
  END
*
*---- INITIALIZATION
*
  MATREAD COMP.REC FROM COMPANY,CONO ELSE MAT COMP.REC = ''
  IF CO.INTR.WHSE = '' THEN CO.INTR.WHSE = 'INTR'
  REAL.TIME = 1
  TEST.MODE = 0
  IF LEN(ACTION) > 1 THEN
    IF ACTION[LEN(ACTION),1] = "T" THEN
      TEST.MODE = 1
    END
  END
  SPX = ""
  EMPNAME = "???????????????"
  MATREAD EMP.REC FROM EMPLOYEE, CONO:EMPID THEN
    EMPNAME = (EMP.FRST.NAME:" ":EMP.LAST.NAME)[1,20]
  END
  IF LEN(EMPNAME) < 20 THEN SPX = SPACE(INT((21-LEN(EMPNAME))/2))
  EMPNAME = SPX:EMPNAME
*
*---- INITIALIZE SCREEN.COM
*
  MAT S$EDIT = ""
  S$TYP = 0
  CALL RF.INPUT
  GOSUB 89990
  S$MASK = "#"
  ERY = 15
*
*---- DISPLAY SCREEN
*
  DIM SCRN(15)
  MAT SCRN = ""
  XXXXXXXX = " 01234567890123456789 "
  XXXXXXXX = "+--------------------+"
  SCRN(01) = "|   TRANSFER OUT     |"
  SCRN(02) = "|--------------------|"
  SCRN(03) = "|@@@@@@@@@@@@@@@@@@@@|"
  SCRN(04) = "|--------------------|"
  SCRN(05) = "|                    |"
  SCRN(06) = "|Warehouse : ####    |"
  SCRN(07) = "|To Div    : ##      |"
*T27705  SCRN(08) = "|Serial    : ########|"
  SCRN(08) = "|BR : ###############|"
  SCRN(09) = "|                    |"
*T27705  SCRN(10) = "|--------------------|"
  SCRN(10) = "|------ Prior -------|"
  SCRN(11) = "|                    |"
*T27705  SCRN(12) = "|Prior     : XXXXXXXX|"
  SCRN(12) = "|BR : XXXXXXXXXXXXXXX|"
  SCRN(13) = "|                    |"
  SCRN(14) = "|Correct (Y/N)? #    |"
  SCRN(15) = "|                    |"
  XXXXXXXX = "+--------------------+"
  XXXXXXXX = " 01234567890123456789 "
*
  SLINE = @(-1)
  FOR SL = 0 TO 14
    SDATA = SCRN(SL+1)[2,20]
    CONVERT "#" TO " " IN SDATA
    CONVERT "@" TO " " IN SDATA
    SDATA = TRIMB(SDATA)
    LDATA = LEN(SDATA)
    LDONE = 0
    FOR N = 1 TO LDATA UNTIL LDONE
      IF SDATA[N,1] # " " THEN
        SLINE = SLINE:@((N-1),(SL)):SDATA[N,99]
        LDONE = 1
      END
    NEXT N
  NEXT SL
  PRINT SLINE:
  GOSUB 89990
*
*---- MAIN PROCESSING
*
  LOOP
    RELEASE
    PRINT @(00,02):EMPNAME:
    PRINT @(12,05):@(-4):
    PRINT @(12,07):@(-4):
    PRINT @(12,11):@(-4):
    GOSUB 89990
*
1030 *
    DIV = ''  
    TO.DIV = '' 
    WHSE = ""
    SERIAL.IDS = ""
    S$TYP=1; S$X=12; S$Y=5; S$MINL=1; S$MAXL=4; S$EX=0; S$EY=15; ERY=15 
    S$O.R="O"; S$DEFAULT=""
    CALL RF.INPUT
    GOSUB 89990
    IF S$VALUE = "END" THEN GOTO 1039
    IF S$VALUE = "" THEN GOTO 1039
    IF S$VALUE = CO.INTR.WHSE THEN
      ERRMSG = "NO TRANSIT WHSE"; GOSUB 91000; GOTO 1030
    END
    MATREAD WHSE.REC FROM WAREHOUSE, CONO:S$VALUE ELSE
      ERRMSG = "INVALID WHSE"; GOSUB 91000; GOTO 1030
    END
    WHSE = S$VALUE
1035 *
    DIV = WHS.DIV   
    S$TYP=3; S$X=12; S$Y=6; S$MINL=1; S$MAXL=2; S$EX=0; S$EY=15; ERY=15 
    S$O.R="O"; S$DEFAULT=""
    CALL RF.INPUT
    GOSUB 89990
    IF S$VALUE = "END" THEN GOTO 1030
    IF S$VALUE = "" THEN GOTO 1030
    IF S$VALUE = DIV THEN
      ERRMSG = "SAME DIVISION"; GOSUB 91000; GOTO 1035
    END
    MATREAD DIV.REC FROM DIVISION, CONO:S$VALUE ELSE
      ERRMSG = 'INVALID DIVISION'; GOSUB 91000; GOTO 1035
    END
    TO.DIV = S$VALUE
1039 *
  UNTIL WHSE = "" DO
    LOOP
    UNTIL S$VALUE = "END" OR S$VALUE = "" DO
      RELEASE
      PRINT @(00,02):EMPNAME:
      PRINT @(12,07):@(-4):
      GOSUB 89990
1040*
*T27705  S$TYP=1; S$X=12; S$Y=7; S$MINL=8; S$MAXL=8; S$EX=0; S$EY=15; ERY=15
      S$TYP=1; S$X=5; S$Y=7; S$MINL=0; S$MAXL=15; S$EX=0; S$EY=15; ERY=15
      S$O.R="O"; S$DEFAULT=""
      CALL RF.INPUT
      GOSUB 89990
      IF S$VALUE = "END" THEN GOTO 1050
      IF S$VALUE = "" THEN GOTO 1050
*T27705 v Should really look at CATG.BARCODE for below check.
      VALID=1
      IF LEN(S$VALUE) = 8 THEN
        CALL CHECK.DIGIT("T", S$VALUE, "10RL", CKDIG, VALID)
      END
*T27705 ^
      IF NOT(VALID) THEN
        ERRMSG = "INVALID SERIAL"; GOSUB 91000; GOTO 1050
      END
      MATREAD ISTK.REC FROM INV_SERIAL, CONO:S$VALUE ELSE
        ERRMSG = "INVALID SERIAL"; GOSUB 91000; GOTO 1050
      END
      READ TEST.REC FROM INTR_SERIAL_XREF, CONO:S$VALUE THEN
        IF TEST.REC<1> # '' THEN
          ERRMSG = "ALREADY IN-TRAN"; GOSUB 91000; GOTO 1050
        END
      END
      IF ISTK.POST.DATE = "" THEN
        ERRMSG = "SERIAL NOT RCVD"; GOSUB 91000; GOTO 1050
      END
      IF ISTK.WHSE # WHSE THEN
        ERRMSG = "WHSE MISMATCH"; GOSUB 91000; GOTO 1050
      END
      MATREAD IWLO.REC FROM INV.WHSE.LOC, CONO:ISTK.PROD:"!":ISTK.WHSE:"!":ISTK.LOC ELSE
        ERRMSG = "NO INV.WHSE.LOC"; GOSUB 91000; GOTO 1050
      END
      LOCATE S$VALUE IN IWLO.SERIAL<1>,1 SETTING P ELSE
        ERRMSG = "NO SER # IN LOC"; GOSUB 91000; GOTO 1050
      END
      LOCATE S$VALUE IN SERIAL.IDS<1>,1 SETTING ROLLPTR ELSE
        SERIAL.IDS<1,ROLLPTR> = S$VALUE
      END
*T27705  PRINT @(12,11):S$VALUE"L#8":
      PRINT @(5,11):S$VALUE"L#15":
1050 *
    REPEAT
    IF SERIAL.IDS = "" THEN GOTO 1090
1070 *
    S$TYP=8; S$X=16; S$Y=13; S$EX=0; S$EY=15; S$ERY=15
    CALL RF.INPUT
    GOSUB 89990
    IF S$VALUE = "END" THEN GOTO 1080
    IF S$VALUE = "Y" THEN
      MAT IDM.REC = ''
      IDM.TO.DIV = TO.DIV
      IDM.FROM.DIV = DIV
      IDM.FROM.WHSE = WHSE
      GOSUB GET.TRANS.ID
      RCNT = DCOUNT(SERIAL.IDS,VM)
      FOR RPTR = 1 TO RCNT
        GOSUB 5000
        IF ERRMSG # "" THEN
          GOSUB 91000
        END
      NEXT RPTR
      IDM.STATUS = 1
      MATWRITE IDM.REC ON INTR_DIV_TRANSFER, CONO:TRANS.ID
      ERRMSG = 'TRANSIT #':TRANS.ID
      GOSUB 91000
    END
1080 *
    PRINT @(12,05):@(-4):
    PRINT @(12,06):@(-4): 
    PRINT @(12,07):@(-4):
    PRINT @(12,11):@(-4):
    GOSUB 89990
1090 REPEAT
  RETURN
*
*---- PROCESS TRANSFER
*
5000 *
  ERRMSG = ""
  SERIAL.ID = SERIAL.IDS<1,RPTR>
  MATREAD ISTK.REC FROM INV_SERIAL, CONO:SERIAL.ID ELSE MAT ISTK.REC = ''
  MATREAD INV.REC FROM INVENTORY, CONO:ISTK.PROD ELSE
    ERRMSG = "INVALID PRODUCT"         ;* "INV.REC does not exist"
    RETURN
  END
  MATREAD IWH.REC FROM INV.WHSE, CONO:ISTK.PROD:"!":ISTK.WHSE ELSE
    ERRMSG = "NO INV.WHSE"         ;* "From Whse does not exist"
    RETURN
  END
  MATREAD IWLO.REC FROM INV.WHSE.LOC, CONO:ISTK.PROD:"!":ISTK.WHSE:"!":ISTK.LOC ELSE
    ERRMSG = "NO INV.WHSE.LOC"         ;* "From Loc does not exist"
    RETURN
  END
  LOCATE SERIAL.ID IN IWLO.SERIAL<1>,1 SETTING RSPTR ELSE
    ERRMSG = "NO SER # IN LOC"         ;* "Roll/skid not in location"
    RETURN
  END
  IF ISTK.RSVB.QTY LE 1 THEN
    ERRMSG = "NO QTY"         ;* "Roll/skid weight = zero"
    RETURN
  END
  * BUILD IDM.REC AND INTR.RS.XREF
  LOCATE ISTK.PROD IN IDM.PROD.NO<1>,1 SETTING POS THEN
    LOCATE SERIAL.ID IN IDM.SERIAL<1,POS>,1 SETTING QOS ELSE
      IDM.SERIAL<1,POS,QOS> = SERIAL.ID
      IDM.FROM.LOC<1,POS,QOS> = ISTK.LOC
      IDM.SERIAL.MILL<1,POS,QOS> = ISTK.MILL.ID
      WRITE TRANS.ID ON INTR_SERIAL_XREF, CONO:SERIAL.ID
    END
  END ELSE
    IDM.PROD.NO<1,POS> = ISTK.PROD
    IDM.SERIAL<1,POS> = SERIAL.ID
    IDM.FROM.LOC<1,POS> = ISTK.LOC
    IDM.SERIAL.MILL<1,POS> = ISTK.MILL.ID
    WRITE TRANS.ID ON INTR_SERIAL_XREF, CONO:SERIAL.ID
  END
  RETURN
*
*---- DRAW BORDER
*
89990 *
  IF TEST.MODE THEN
*T26132 v
*     FOR SL = 1 TO 16
*        PRINT @(21,(SL-1)):"|":
*     NEXT SL
*     PRINT @(0,16):"---------------------+":
    FOR SL = 1 TO 15
      PRINT @(20,(SL-1)):"|":
    NEXT SL
    PRINT @(0,15):"--------------------+":
*T26132 ^
  END
  RETURN
*
GET.TRANS.ID: 
*
  FND = 1
  READU TRANS.SEQ FROM CONTROL, CONO:"INTR.DIV.SEQ" ELSE TRANS.SEQ = "1"
  LOOP
  WHILE FND DO
    TRANS.CODE = STR("0",6-LEN(TRANS.SEQ)):TRANS.SEQ
    TRANS.SEQ = TRANS.CODE + 1
    IF TRANS.SEQ > 999999 THEN TRANS.SEQ = 1
    TRANS.ID = TRANS.CODE:"T"
    READ REC FROM INTR_DIV_TRANSFER, CONO:TRANS.ID ELSE FND = 0
  REPEAT
  WRITE TRANS.SEQ ON CONTROL, CONO:"INTR.DIV.SEQ"
  *
  RETURN
*
*---- ERROR ROUTINE
*
91000 *
  PRINT @(0,ERY):@(-4):BEL:BEL:ERRMSG[1,19]:
  INPUT REPLY,1:
  PRINT @(0,ERY):@(-4):
  ERY = 15
  RETURN
93000 *
  GOSUB 91000
*
*---- END OF PROGRAM
*
99999 *
  RETURN
END
