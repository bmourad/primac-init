*COPY>CPYLIB>COM1              
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>ICS.CPYLIB>COM.INV.LINK  
*********************************************************************
*
* PROGRAM  - INTR.IN.MAINFEST.MAINT
*
* AUTHOR   - Alejandro Delgado, Vercom
*
* DATE     - 12/28/2001
*
* DESCRIPTION
*
* This program is used to maintain the Manifest data for the
* Roll/Skid Inter-Divisional Transfer system.
*
*T26219 adelgado 02/04/2002 * Original Code
*T26497 adelgado 03/28/2002 * Migrate inter-divisional transfer to
*                             Rev12.
*T26556 cmykleb 06/14/2002 * Rev12 changes.
*T26556 adelgado 06/26/2002 * Allow a product to receive into any whse
*                             within the To/From divisions.
*T27384 adelgado 04/15/2003 * Fix default of Period when
*                             CO.ICS.PERIOD.FLG = 'Y'.
*T27448 lross 05/19/2003 * Check for future period on orig xfer-in.
*T28216 lross 08/11/2004 * Page -- of X - X is incorrect if number of
*                          rolls evenly divisble by page size.
*********************************************************************
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>FISCAL
*COPY>PMC.CPYLIB>GLTABLE
*COPY>ICS.CPYLIB>CATEGORY
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>ICS.CPYLIB>INV_SERIAL
*COPY>ICS.CPYLIB>INV.CNV
*COPY>ICS.CPYLIB>DAILY_TRANSFER
*COPY>ICS.CPYLIB>TRANSFER
*COPY>RCV.CPYLIB>INTR_DIV_TRANSFER
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>GEN.XREF.SUB
*COPY>CPYLIB>XREF.DATA
*COPY>CPYLIB>SYSCOM
  SYS.TYPE = 1               
  CALL SYSCOM(MAT SYSCOM.REC)
*
*---- OPEN ALL FILES
*
  OPEN "","COMPANY" TO COMPANY ELSE
    ERRMSG = "CANNOT OPEN COMPANY FILE"; GOSUB 91000; STOP
  END
  OPEN "","CONTROL" TO CONTROL ELSE
    ERRMSG = "CANNOT OPEN CONTROL FILE"; GOSUB 91000; STOP
  END
  OPEN "","SECURITY" TO SECURITY ELSE
    ERRMSG = "CANNOT OPEN SECURITY FILE"; GOSUB 91000; STOP
  END
  OPEN "","WAREHOUSE" TO WAREHOUSE ELSE
    ERRMSG = "CANNOT OPEN WAREHOUSE FILE"; GOSUB 91000; STOP
  END
  OPEN "","CATEGORY" TO CATEGORY ELSE
    ERRMSG = "CANNOT OPEN CATEGORY FILE"; GOSUB 91000; STOP
  END
  OPEN "","DIVISION" TO DIVISION ELSE
    ERRMSG = "CANNOT OPEN DIVISION FILE"; GOSUB 91000; STOP
  END
  OPEN "","INVENTORY" TO INVENTORY ELSE
    ERRMSG = "CANNOT OPEN INVENTORY FILE"; GOSUB 91000; STOP
  END
  OPEN "","INVENTORY.XREF" TO INVENTORY.XREF ELSE
    ERRMSG = "CANNOT OPEN INVENTORY.XREF FILE"; GOSUB 91000; STOP
  END
  OPEN "","INV.WHSE" TO INV.WHSE ELSE
    ERRMSG = "CANNOT OPEN INV.WHSE FILE"; GOSUB 91000; STOP
  END
  OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE
    ERRMSG = "CANNOT OPEN INV.WHSE.LOC FILE"; GOSUB 91000; STOP
  END
  OPEN "","INV.WHSE.LOC.TEMP" TO INV.WHSE.LOC.TEMP ELSE
    ERRMSG = "CANNOT OPEN INV.WHSE.LOC.TEMP FILE"; GOSUB 91000; STOP
  END
  OPEN "","INV_SERIAL" TO INV_SERIAL ELSE
    ERRMSG = "CANNOT OPEN INV_SERIAL FILE"; GOSUB 91000; STOP
  END
  OPEN "","INV_SERIAL_TEMP" TO INV_SERIAL_TEMP ELSE
    ERRMSG = "CANNOT OPEN INV_SERIAL_TEMP FILE"; GOSUB 91000; STOP
  END
  OPEN "","INV_AUDIT_HIST" TO INV_AUDIT_HIST ELSE
    ERRMSG = "CANNOT OPEN INV_AUDIT_HIST FILE"; GOSUB 91000; STOP
  END
  OPEN "","INV_AUDIT_HIST_TEMP" TO INV_AUDIT_HIST_TEMP ELSE
    ERRMSG = "CANNOT OPEN INV_AUDIT_HIST_TEMP FILE"; GOSUB 91000; STOP
  END
  OPEN "","INV_AUDIT_TAG" TO INV_AUDIT_TAG ELSE
    ERRMSG = "CANNOT OPEN INV_AUDIT_TAG FILE"; GOSUB 91000; STOP
  END
  OPEN "","INV_RECEIPTS" TO INV_RECEIPTS ELSE
    ERRMSG = "CANNOT OPEN INV_RECEIPTS FILE"; GOSUB 91000; STOP
  END
  OPEN "","INV_RECEIPTS_TEMP" TO INV_RECEIPTS_TEMP ELSE
    ERRMSG = "CANNOT OPEN INV_RECEIPTS_TEMP FILE"; GOSUB 91000; STOP
  END
  OPEN "","INV_RECP_WHSE" TO INV_RECP_WHSE ELSE
    ERRMSG = "CANNOT OPEN INV_RECP_WHSE FILE"; GOSUB 91000; STOP
  END
  OPEN "","INV_RECP_WHSE_TEMP" TO INV_RECP_WHSE_TEMP ELSE
    ERRMSG = "CANNOT OPEN INV_RECP_WHSE_TEMP FILE"; GOSUB 91000; STOP
  END
  OPEN "","INTR_DIV_TRANSFER" TO INTR_DIV_TRANSFER ELSE
    ERRMSG = "CANNOT OPEN INTR_DIV_TRANSFER FILE"; GOSUB 91000; STOP
  END
  OPEN "","INTR_SERIAL_XREF" TO INTR_SERIAL_XREF ELSE
    ERRMSG = "CANNOT OPEN INTR_SERIAL_XREF FILE"; GOSUB 91000; STOP
  END
  OPEN "","RCV.SCREENS" TO M.SCREENS ELSE
    ERRMSG = "CANNOT OPEN RCV.SCREENS FILE"; GOSUB 91000; STOP
  END
  OPEN "","XREF.DATA" TO XREF.DATA ELSE
    ERRMSG = "CANNOT OPEN XREF.DATA FILE"; GOSUB 91000; STOP
  END
  OPEN "","PREFIX" TO PREFIX ELSE
    ERRMSG = "CANNOT OPEN PREFIX FILE"; GOSUB 91000; STOP
  END
  OPEN "","PO" TO PO ELSE
    ERRMSG = "CANNOT OPEN PO FILE"; GOSUB 91000; STOP
  END
*
*---- INITIALIZATION
*
  CONO = ""
  CALL GET.CONO1 (CONO, MAT COMP.REC, COMPANY, CONTROL)
  IF CO.INTR.WHSE = '' THEN
    ERRMSG = 'THE INTER-DIVISIONAL WAREHOUSE IS NOT SETUP IN THE COMPANY FILE.'
    GOSUB 91000 ; STOP
  END
  MATREAD WHSE.REC FROM WAREHOUSE, CONO:CO.INTR.WHSE ELSE
    ERRMSG = 'INTER-DIVISIONAL WAREHOUSE IS NOT SETUP IN THE WAREHOUSE FILE'
    GOSUB 91000 ; STOP
  END
  READ DIVISION.REC FROM CONTROL, CONO:"DIVISIONS" ELSE 
    ERRMSG = "DIVISIONS CONTROL FILE RECORD IS MISSING" 
    GOTO 93000
  END 
  READ SECURITY.REC FROM CONTROL, CONO:"DIV.SECURITY" ELSE
    ERRMSG = "DIV.SECURITY CONTROL FILE RECORD IS MISSING"
    GOTO 93000
  END 
  MATREAD FISCAL.REC FROM CONTROL, CONO:"ICFISCAL" ELSE
    ERRMSG = "Cannot locate Inventory Control Fiscal Period !!"
    GOSUB 93000
  END
  MATREAD GLTABLE.REC FROM CONTROL, CONO:'GLTABLE' THEN
    IF GLTB.IC.INT.DIV = '' THEN
      ERRMSG = 'NO G/L ACCT EXIST FOR INTER-DIVISIONAL ACCOUNTING'
      GOSUB 91000 ; STOP
    END
  END ELSE
    ERRMSG = 'Cannot locate General Ledger Table'
    GOSUB 93000
  END
  MAT EDIT.COM.DRIVER = ""
  ECD.SCRN.CNT = 1
  ECD.SCRN.NAME = "INTR.IN.MANIFEST.MAINT"
  ECD.ACTION=1; CALL SCRN.EDIT
  ECD.SCRN.NO = 1
  ESN = ECD.SCRN.NO
  PORT.NO='TTY'
  CALL SYSVARS.SUB(PORT.NO)
  READV OPER.ID FROM SECURITY, "R.":PORT.NO,2 ELSE OPER.ID = ''
  IF OPER.ID = '' THEN
    OPER.ID = 'T-???'
  END ELSE
    OPER.ID = 'T-':OPER.ID
  END
  MAT SCV.REC = ""
  ECD.ACTION=2; CALL SCRN.EDIT
  BEGIN.PAGE = 10
  PAGE.SIZE = 10
  TODAY = DATE()
  LINE.SPACE = 1
  MAT GEN.XREF.REC = ''
  GXR.CO = CONO
*
*        MAIN LOOP
*
  LOOP
    ALL.DONE = 0
    GOSUB INIT.VAR
    GOSUB GET.TRANSFER
    IF INQUIRY.FLG = 0 THEN GOSUB AUTO.PROMPT
  UNTIL (ALL.DONE) DO
    IF NOT(ALL.DONE) THEN GOSUB BOTTOM.PROMPT
  REPEAT
  GOTO 99999
*
INIT.VAR: 
*
  TRANS.ID = ''
  PROD.ARRAY = ''
  RS.ARRAY = ''
  PROD.CNT = 1
  PROD.PTR = 1
  ROLL.CNT = 1
  ROLL.PTR = 1
  OLD.START = ""
  ECD.ACTION=6; CALL SCRN.EDIT
  MAT SCV.REC = ""
  INQUIRY.FLG = 0
  POST.PER = '' ; POST.DATE = ''
  U.M = ''
  MAT INV.CNV.REC = ""
  *
  RETURN
*
GET.TRANSFER: 
*
  LOOP
    LOOP.DONE = 1 ; ERRMSG = ''
    ECD.NUM = 1
    ECD.ACTION = 4; CALL SCRN.EDIT
    BEGIN CASE
      CASE ECD.RET.VALUE = 'END' OR ECD.RET.VALUE = 'E'
        ALL.DONE = 1
      CASE 1
        TMP = LEN(TRIM(ECD.RET.VALUE))
        IF ECD.RET.VALUE[TMP,1] # 'T' AND TMP LT 7 THEN
          ECD.RET.VALUE = ECD.RET.VALUE:'T' ; TMP += 1
        END
        IF TMP GT 7 THEN TMP = 7
        TMP = 7 - TMP
        ECD.RET.VALUE = STR('0',TMP):ECD.RET.VALUE
        MATREADU IDM.REC FROM INTR_DIV_TRANSFER, CONO:ECD.RET.VALUE LOCKED
          ERRMSG = 'TRANSFER record is locked by user - ':GETUSERNAME(STATUS())
          GOSUB 91000 ; LOOP.DONE = 0 ; CONTINUE
        END ELSE
          ERRMSG = 'TRANSIT #':ECD.RET.VALUE:' IS NOT ON FILE'
          GOSUB 91000 ; LOOP.DONE = 0 ; CONTINUE
        END
        BEGIN CASE
          CASE IDM.STATUS = 1
            ERRMSG = 'THE TRANSIT MUST BE TRANSFERRED OUT BEFORE RECEIVING IT'
            GOSUB 91000 ; LOOP.DONE = 0 ; CONTINUE
            RELEASE INTR_DIV_TRANSFER, CONO:ECD.RET.VALUE
          CASE IDM.STATUS = 4
            ERRMSG = 'THE TRANSIT HAS BEEN COMPLETED'
            GOSUB 91000 ; INQUIRY.FLG = 1
            RELEASE INTR_DIV_TRANSFER, CONO:ECD.RET.VALUE
        END CASE
        TRANS.ID = ECD.RET.VALUE
        SCV.REC(ECD.NUM)<ESN> = TRANS.ID
        GOSUB BUILD.SCV.REC
    END CASE
  UNTIL (LOOP.DONE) DO REPEAT
  IF NOT(ALL.DONE) THEN
    ECD.ACTION = 5 ; CALL SCRN.EDIT
  END
  *
  RETURN
*
BUILD.SCV.REC: 
* 
  IF SECURITY.REC<1> = "Y" AND SECURITY.REC<2> = "Y" THEN
    LOCATE IDM.TO.DIV IN DIVISION.REC<1>,1 SETTING DIV.POS ELSE
      DIV.POS = 1
    END
  END ELSE
    DIV.POS = 1
  END
  VALID.PRODUCT = 1 ; VALID.ROLL = 1
  PROD.QTY = 0
  PROD.CNT = DCOUNT(IDM.PROD.NO,@VM)
  FOR PROD.PTR = 1 TO PROD.CNT
    PROD.ID = IDM.PROD.NO<1,PROD.PTR>
    GOSUB VALIDATE.INV
    ERRMSG = ''
    PROD.ARRAY<1,PROD.PTR> = PROD.ID         
    PROD.ARRAY<2,PROD.PTR> = INV.DESC              
    PROD.ARRAY<3,PROD.PTR> = U.M                   
    ROLL.CNT = DCOUNT(IDM.SERIAL<1,PROD.PTR>,@SVM)
    FOR ROLL.PTR = 1 TO ROLL.CNT
      SERIAL.ID = IDM.SERIAL<1,PROD.PTR,ROLL.PTR>
      IF INQUIRY.FLG = 0 AND IDM.RECV.POST<1,PROD.PTR,ROLL.PTR> = '' THEN GOSUB VALIDATE.SERIAL
      RS.ARRAY<PROD.PTR,ROLL.PTR,1> = SERIAL.ID
      RS.ARRAY<PROD.PTR,ROLL.PTR,2> = IDM.TO.WHSE<1,PROD.PTR,ROLL.PTR>
      RS.ARRAY<PROD.PTR,ROLL.PTR,3> = IDM.TO.LOC<1,PROD.PTR,ROLL.PTR>
      RS.ARRAY<PROD.PTR,ROLL.PTR,5> = INT(((IDM.SERIAL.QTY<1,PROD.PTR,ROLL.PTR>/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
      BEGIN CASE
        CASE IDM.RECV.POST<1,PROD.PTR,ROLL.PTR> # ''
          RS.ARRAY<PROD.PTR,ROLL.PTR,6> = 'P'
          RS.ARRAY<PROD.PTR,ROLL.PTR,4> = RS.ARRAY<PROD.PTR,ROLL.PTR,5>
        CASE IDM.RECV.STATUS<1,PROD.PTR,ROLL.PTR> = 'R'
          RS.ARRAY<PROD.PTR,ROLL.PTR,6> = 'R'
          RS.ARRAY<PROD.PTR,ROLL.PTR,4> = RS.ARRAY<PROD.PTR,ROLL.PTR,5>
        CASE IDM.RECV.STATUS<1,PROD.PTR,ROLL.PTR> = 'I'
          RS.ARRAY<PROD.PTR,ROLL.PTR,6> = 'I'
          RS.ARRAY<PROD.PTR,ROLL.PTR,4> = RS.ARRAY<PROD.PTR,ROLL.PTR,5>
      END CASE
      RS.ARRAY<PROD.PTR,ROLL.PTR,7> = IDM.SERIAL.MILL<1,PROD.PTR,ROLL.PTR>
    NEXT ROLL.PTR
  NEXT PROD.PTR
  PROD.PTR = 1
  SCV.REC(2) = IDM.DESC
  SCV.REC(3) = IDM.FROM.DIV
  SCV.REC(4) = IDM.TO.DIV
  SCV.REC(5) = IDM.RECV.POST<1,1,1> ;*T27448
  SCV.REC(48) = IDM.RECV.MON<1,1,1> ;*T27448
  GOSUB DISPLAY.PROD
  *
  RETURN
*
AUTO.PROMPT: 
*
  FOR X = 1 TO 2 UNTIL (ALL.DONE)
    ON X GOSUB GET.DATE, GET.PERIOD
  NEXT X
  *
  RETURN
*
GET.DATE: 
*
  IF POST.DATE = '' THEN ECD.DEFAULT = TODAY
  ECD.NUM = 5 ; ECD.ACTION = 4 ; CALL SCRN.EDIT
  IF ECD.RET.VALUE = 'END' THEN
    ALL.DONE = 1
  END ELSE
    DEF.PERIOD = '' ; ERR.FLG = '' ; ERRMSG = ''
    CALL CHECK.PERIOD.DATE(CONO,ECD.RET.VALUE,DEF.PERIOD,IDM.TO.DIV,ERR.FLG,ERRMSG,COMPANY,CONTROL)
    BEGIN CASE                            
      CASE ERRMSG = ""                    
        POST.DATE = ECD.RET.VALUE
        SCV.REC(ECD.NUM)<ESN> = POST.DATE
* T27384 v
        IF CO.ICS.PERIOD.FLG = 'Y' THEN
          ECD.NUM = 48
          POST.PER = DEF.PERIOD
          SCV.REC(ECD.NUM)<ESN> = POST.PER
          ECD.ACTION = 5 ; CALL SCRN.EDIT
        END
* T27384 ^
      CASE ERR.FLG = 0                    
        POST.DATE = ECD.RET.VALUE
        SCV.REC(ECD.NUM)<ESN> = POST.DATE
* T27384 v
        IF CO.ICS.PERIOD.FLG = 'Y' THEN
          ECD.NUM = 48
          POST.PER = DEF.PERIOD
          SCV.REC(ECD.NUM)<ESN> = POST.PER
          ECD.ACTION = 5 ; CALL SCRN.EDIT
        END
* T27384 ^
        GOSUB 91000                       
      CASE ERR.FLG = 1                    
        GOSUB 91000; GOTO GET.DATE             
      CASE ERR.FLG = 2                    
        GOSUB 91000 ; ALL.DONE = 1
    END CASE                              
*T27448 v
    IF LEN(POST.PER) = 6 THEN
      IF POST.PER < IDM.SHIP.MON THEN
        ERRMSG = 'PERIOD CANNOT BE LESS THAN THE TRANSFER OUT PERIOD (':IDM.SHIP.MON:')'
        GOSUB 91000
        GOTO GET.DATE
      END
    END
*T27448 ^
  END
  *
  RETURN
*
GET.PERIOD: 
*
  IF CO.ICS.PERIOD.FLG = 'N' THEN ; * T26556
    IF FR.CURR.PER<1,DIV.POS> GT IDM.SHIP.MON THEN TMP = FR.CURR.PER<1,DIV.POS> ELSE TMP = IDM.SHIP.MON
    IF POST.PER = '' THEN ECD.DEFAULT = TMP
    ECD.NUM = 48 ; ECD.ACTION = 4 ; CALL SCRN.EDIT
    IF ECD.RET.VALUE = 'END' THEN
      ALL.DONE = 1
    END ELSE
      ERR.FLG = '' ; ERRMSG = ''
      CALL CHECK.PERIOD.DATE(CONO,POST.DATE,ECD.RET.VALUE,IDM.TO.DIV,ERR.FLG,ERRMSG,COMPANY,CONTROL)
      BEGIN CASE                            
        CASE ECD.RET.VALUE LT IDM.SHIP.MON
          ERRMSG = 'PERIOD CANNOT BE LESS THAN THE TRANSFER OUT PERIOD (':IDM.SHIP.MON:')'
          GOSUB 91000; GOTO GET.PERIOD
        CASE ERRMSG = ""                    
          POST.PER = ECD.RET.VALUE         
          SCV.REC(ECD.NUM)<ESN> = POST.PER
        CASE ERR.FLG = 0                    
          POST.PER = ECD.RET.VALUE         
          SCV.REC(ECD.NUM)<ESN> = POST.PER
          GOSUB 91000                       
        CASE ERR.FLG = 1                    
          GOSUB 91000; GOTO GET.PERIOD             
        CASE ERR.FLG = 2                    
          GOSUB 91000 ; ALL.DONE = 1
      END CASE                              
    END
*T26556 v
  END ELSE
    ECD.NUM = 48
    POST.PER = DEF.PERIOD
    SCV.REC(ECD.NUM)<ESN> = POST.PER
    ECD.ACTION = 5 ; CALL SCRN.EDIT
  END
*T26556 ^
*T27448 v
  IF POST.PER < IDM.SHIP.MON AND NOT(ALL.DONE) THEN
    ERRMSG = 'PERIOD CANNOT BE LESS THAN THE TRANSFER OUT PERIOD (':IDM.SHIP.MON:')'
    GOSUB 91000
    GOSUB GET.DATE
    GOTO GET.PERIOD
  END
*T27448 ^
*
  RETURN
*
VALIDATE.INV: 
*
  MATREAD INV.REC FROM INVENTORY, CONO:PROD.ID THEN
    MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE THEN
*COPY>ICSBP>INV.UM.CNV
      BEGIN CASE           
        CASE CATG.TYPE="L" 
          U.M="LBS"        
        CASE CATG.TYPE="S" 
          U.M="SHT"        
        CASE CATG.TYPE="RL"
          U.M="PC "        
        CASE CATG.TYPE="PC"
          U.M="FT "        
        CASE 1             
          ERRMSG='PRODUCT ':PROD.ID:' IS NOT A PAPER PRODUCT LINE'
      END CASE 
      MATREAD IWH.REC FROM INV.WHSE, CONO:PROD.ID:'!':CO.INTR.WHSE THEN
        IF IWH.ON.HAND-IWH.RESV LE 1 THEN
          ERRMSG = 'PRODUCT ':PROD.ID:' HAS NO QUANTITY AVAILABLE TO TRANSFER'
        END
        IF CATG.TRK.LVL # 'S' THEN
          ERRMSG = 'PRODUCT ':PROD.ID:' IS NOT SERIAL TRACKED'
        END
        LOCATE CO.INTR.WHSE IN INV.WHSE.CODE<1>,1 SETTING ZPOS ELSE
          ERRMSG = 'WAREHOUSE #':CO.INTR.WHSE:' IS NOT SETUP FOR PRODUCT ':PROD.ID
        END
      END ELSE
        ERRMSG = 'INV.WHSE #':CONO:PROD.ID:'!':IDM.FROM.WHSE:'IS NOT ON FILE'
      END
    END ELSE
      ERRMSG = 'INVALID PRODUCT LINE ASSOCIATED TO THE PRODUCT ':PROD.ID
    END
  END ELSE
    ERRMSG = 'INVALID PRODUCT ':PROD.ID
  END
  IF INQUIRY.FLG = 0 AND ERRMSG # '' THEN
    GOSUB 91000 ; VALID.PRODUCT = 0
  END
  *
  RETURN
*
VALIDATE.SERIAL: 
*
  LOCATE SERIAL.ID IN RS.ARRAY<PROD.PTR>,1 SETTING P THEN
    IF P <> ROLL.PTR THEN
      ERRMSG = 'DUPLICATE SERIAL #':SERIAL.ID
      GOSUB 91000 ; VALID.ROLL = 0 ; RETURN
    END
  END
  MATREAD ISTK.REC FROM INV_SERIAL, CONO:SERIAL.ID THEN
    IF ISTK.POST.DATE = "" THEN
      ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') HAS NOT BEEN RECIEVED INTO INVENTORY.'
      GOSUB 91000 ; VALID.ROLL = 0 ; RETURN
    END
  END ELSE
    ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') DOES NOT EXIST.'
    GOSUB 91000 ; VALID.ROLL = 0
  END
  IF VALID.ROLL = 0 THEN RETURN
  IF ISTK.PROD # PROD.ARRAY<1,PROD.PTR> THEN
    ERRMSG = 'THE SERIAL NUMBER (':SERIAL.ID:') IS NOT TIED TO PRODUCT ':PROD.ARRAY<1,PROD.PTR>
    GOSUB 91000 ; VALID.ROLL = 0 ; RETURN
  END
  IF ISTK.LOC # IDM.TO.DIV THEN
    ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') DOES NOT BELONG TO INTR-DIVISIONAL LOCATION (':IDM.TO.DIV:')'
    GOSUB 91000 ; VALID.ROLL = 0 ; RETURN
  END
  IF ISTK.WHSE # CO.INTR.WHSE THEN
    ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') DOES NOT BELONG TO INTR-DIVISIONAL WHSE (':CO.INTR.WHSE:')'
    GOSUB 91000 ; VALID.ROLL = 0 ; RETURN
  END
  IF ISTK.RSVB.QTY LE 1 THEN
    ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') HAS NO QUANTITY AVAILABLE TO TRANSFER'
    GOSUB 91000 ; VALID.ROLL = 0 ; RETURN
  END
  IF ISTK.RSVB.QTY # ISTK.CUR.QTY THEN
    ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') HAS QUANTITY RESERVED AND CAN NOT BE TRANSFERRED'
    GOSUB 91000 ; VALID.ROLL = 0 ; RETURN
  END
  IF IDM.SERIAL.QTY<1,PROD.PTR,ROLL.PTR> # ISTK.CUR.QTY THEN
    ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') HAS QUANTITY RESERVED AND CAN NOT BE TRANSFERRED'
    GOSUB 91000 ; VALID.ROLL = 0 ; RETURN
  END
  IWLO.ID = CONO:PROD.ARRAY<1,PROD.PTR>:'!':ISTK.WHSE:'!':ISTK.LOC
  MATREAD IWLO.REC FROM INV.WHSE.LOC, IWLO.ID THEN
    LOCATE SERIAL.ID IN IWLO.SERIAL<1>,1 SETTING ROS ELSE
      ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') DOES NOT EXIST FOR WHSE #':ISTK.WHSE:' AND LOCATION #':ISTK.LOC
      GOSUB 91000 ; VALID.ROLL = 0 ; RETURN
    END
  END ELSE
    ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:' DOES NOT EXIST FOR WHSE #':ISTK.WHSE:' AND LOCATION #':ISTK.LOC
    GOSUB 91000 ; VALID.ROLL = 0 ; RETURN
  END
  *
  RETURN
*
BOTTOM.PROMPT: 
*
  LOOP
    IF INQUIRY.FLG = 0 THEN
      ECD.NUM = 42
    END ELSE
      ECD.NUM = 46
    END
    ECD.ACTION=4 ; CALL SCRN.EDIT
    OPT = ECD.RET.VALUE
    BEGIN CASE
      CASE OPT = "E" OR OPT = "END"
        ALL.DONE = 1
      CASE OPT = 1 OR OPT = 2
        ON OPT GOSUB GET.DATE, GET.PERIOD
      CASE OPT = 'S'
        IF PROD.CNT LE 1 THEN CONTINUE
        PROD.PTR += 1
        IF PROD.PTR > PROD.CNT THEN PROD.PTR = 1
        GOSUB DISPLAY.PROD
      CASE OPT = 'SR'
        IF PROD.CNT LE 1 THEN CONTINUE
        PROD.PTR -= 1
        IF PROD.PTR < 1 THEN PROD.PTR = 1
        GOSUB DISPLAY.PROD
      CASE OPT = 'SB'
        PROD.PTR = PROD.CNT
        GOSUB DISPLAY.PROD
      CASE OPT = 'ST'
        PROD.PTR = 1
        GOSUB DISPLAY.PROD
      CASE OPT = 'R'
        GOSUB REVIEW.SERIAL
      CASE OPT = 'P'
        GOSUB PRINT.TRANSFER
      CASE OPT = "F"
        GOSUB FILE.TRANSFER
        MATWRITE IDM.REC ON INTR_DIV_TRANSFER, CONO:TRANS.ID
        ALL.DONE = 1
      CASE OPT = "POST"
        GOSUB POST.TRANSFER
        ALL.DONE = 1
      CASE 1
        ERRMSG = 'INVALID RESPONSE.'
        GOSUB 91000
    END CASE
  UNTIL (ALL.DONE) DO REPEAT
  RELEASE
  RETURN
*
FILE.TRANSFER: 
*
  PROD.CNT = DCOUNT(PROD.ARRAY<1>,@VM)
  FOR PROD.PTR = 1 TO PROD.CNT
    PROD.ID = PROD.ARRAY<1,PROD.PTR>
    ROLL.CNT = DCOUNT(RS.ARRAY<PROD.PTR>, @VM)
    FOR ROLL.PTR = 1 TO ROLL.CNT
      IDM.TO.WHSE<1,PROD.PTR,ROLL.PTR> = RS.ARRAY<PROD.PTR,ROLL.PTR,2>
      IDM.TO.LOC<1,PROD.PTR,ROLL.PTR> = RS.ARRAY<PROD.PTR,ROLL.PTR,3>
      TMP.STATUS = RS.ARRAY<PROD.PTR,ROLL.PTR,6>
      BEGIN CASE
        CASE TMP.STATUS = 'I'
          IDM.RECV.STATUS<1,PROD.PTR,ROLL.PTR> = 'I'
        CASE TMP.STATUS = 'R'
          IDM.RECV.STATUS<1,PROD.PTR,ROLL.PTR> = 'R'
      END CASE
    NEXT ROLL.PTR
  NEXT PROD.PTR
  IDM.STATUS = 3
  *
  RETURN
*
DISPLAY.PROD: 
*
  MATREAD INV.REC FROM INVENTORY, CONO:PROD.ARRAY<1,PROD.PTR> THEN
*COPY>ICSBP>INV.UM.CNV
  END ELSE
    ICR.CNV1 = 'MD2'
  END
  OLD.START = ''
  PROD.TOT.QTY = 0 ; PROD.RCV.QTY = 0
  PROD.CNT = DCOUNT(PROD.ARRAY<1>,@VM)
  ROLL.CNT = DCOUNT(RS.ARRAY<PROD.PTR>,@VM)
  SCV.REC(22)<ESN> = ''
  SCV.REC(23)<ESN> = ''
  SCV.REC(24)<ESN> = ''
  SCV.REC(25)<ESN> = ''
  SCV.REC(26)<ESN> = ''
  SCV.REC(27)<ESN> = ''
  SCV.REC(28)<ESN> = ''
  FOR ROLL.PTR = 1 TO ROLL.CNT                     
    SCV.REC(22)<ESN,ROLL.PTR> = RS.ARRAY<PROD.PTR,ROLL.PTR,1>
    SCV.REC(23)<ESN,ROLL.PTR> = RS.ARRAY<PROD.PTR,ROLL.PTR,2>
    SCV.REC(24)<ESN,ROLL.PTR> = RS.ARRAY<PROD.PTR,ROLL.PTR,3>
    SCV.REC(25)<ESN,ROLL.PTR> = OCONV(RS.ARRAY<PROD.PTR,ROLL.PTR,4>,ICR.CNV1)
    SCV.REC(26)<ESN,ROLL.PTR> = OCONV(RS.ARRAY<PROD.PTR,ROLL.PTR,5>,ICR.CNV1)
    SCV.REC(27)<ESN,ROLL.PTR> = RS.ARRAY<PROD.PTR,ROLL.PTR,6>
    SCV.REC(28)<ESN,ROLL.PTR> = RS.ARRAY<PROD.PTR,ROLL.PTR,7>
    PROD.RCV.QTY += RS.ARRAY<PROD.PTR,ROLL.PTR,4>
    PROD.TOT.QTY += RS.ARRAY<PROD.PTR,ROLL.PTR,5>
  NEXT ROLL.PTR
  ROLL.PTR = 1
  SCV.REC(6)<ESN> = PROD.ARRAY<1,PROD.PTR>
  SCV.REC(7)<ESN> = PROD.ARRAY<3,PROD.PTR>
  SCV.REC(8)<ESN> = PROD.ARRAY<2,PROD.PTR>
  SCV.REC(10)<ESN> = PROD.PTR
  SCV.REC(11)<ESN> = PROD.CNT
  SCV.REC(12)<ESN> = OCONV(PROD.TOT.QTY,ICR.CNV1)
  SCV.REC(9)<ESN> = OCONV(PROD.RCV.QTY,ICR.CNV1)
  ECD.ACTION = 2 ; CALL SCRN.EDIT
  ECD.ACTION = 3 ; CALL SCRN.EDIT
  GOSUB DISP.SERIAL
  *
  RETURN
*
REVIEW.SERIAL: 
* 
  EXIT.LOOP = 0
  LOOP
    ROLL.CNT = DCOUNT(RS.ARRAY<PROD.PTR>,@VM)
    IF INQUIRY.FLG = 0 THEN
      ECD.NUM = 45
    END ELSE
      ECD.NUM = 47
    END
    ECD.ACTION=4 ; CALL SCRN.EDIT
    RESPONSE = ECD.RET.VALUE
    BEGIN CASE
      CASE RESPONSE = "E" OR RESPONSE = "END"
        EXIT.LOOP = 1
      CASE NUM(RESPONSE) AND RESPONSE # 0
        TMP = OLD.START + PAGE.SIZE
        IF TMP GT ROLL.CNT THEN TMP = ROLL.CNT
        IF RESPONSE GE OLD.START AND RESPONSE LE TMP THEN
          ROLL.PTR = RESPONSE
          GOSUB GET.SERIAL.INFO
        END ELSE
          ERRMSG = 'INVALID RESPONSE'
          GOSUB 91000
        END
      CASE RESPONSE = "S"
        ROLL.PTR = OLD.START + PAGE.SIZE      
        IF ROLL.PTR > ROLL.CNT THEN ROLL.PTR = 1
        GOSUB DISP.SERIAL
      CASE RESPONSE = "SR"
        ROLL.PTR = OLD.START - PAGE.SIZE
        IF ROLL.PTR < 1 THEN ROLL.PTR = 1 
        GOSUB DISP.SERIAL         
      CASE RESPONSE = "SB"
        ROLL.PTR = ROLL.CNT
        IF ROLL.PTR < 1 THEN ROLL.PTR = 1
        GOSUB DISP.SERIAL
      CASE RESPONSE = "ST"
        ROLL.PTR = 1
        GOSUB DISP.SERIAL
    END CASE
  UNTIL (EXIT.LOOP) DO REPEAT
  *
  RETURN
*
GET.SERIAL.INFO: 
*
  IF RS.ARRAY<PROD.PTR,ROLL.PTR,6> = 'P' THEN
    ERRMSG = 'UNABLE TO CHANGE LINE ONCE IT HAS BEEN POSTED'
    GOSUB 91000 ; RETURN
  END
  ROLL.DONE = 0
  GOSUB DISP.SERIAL
  FOR TT = 1 TO 3 UNTIL (ROLL.DONE)
    LOOP
      VALID.RESP = 1
      ECD.SUB.NUM = ROLL.PTR
      IF TT = 3 THEN SCV.REC(25)<ESN,ROLL.PTR> = OCONV(RS.ARRAY<PROD.PTR,ROLL.PTR,5>,ICR.CNV1)
      ECD.NUM=22+TT ; ECD.ACTION=4 ; CALL SCRN.EDIT
      BEGIN CASE
        CASE ECD.RET.VALUE = 'END'
          ROLL.DONE = 1
        CASE TT = 1 ; GOSUB VALIDATE.WHSE
          IF (VALID.RESP) THEN
            RS.ARRAY<PROD.PTR,ROLL.PTR,2> = ECD.RET.VALUE
          END
        CASE TT = 2
          RS.ARRAY<PROD.PTR,ROLL.PTR,3> = ECD.RET.VALUE
        CASE TT = 3
          SCV.REC(25)<ESN,ROLL.PTR> = ''
          IF ECD.RET.VALUE = '' OR ECD.RET.VALUE = 0 THEN
            RS.ARRAY<PROD.PTR,ROLL.PTR,4> = ''
            RS.ARRAY<PROD.PTR,ROLL.PTR,6> = ''
          END ELSE
            IF ICONV(ECD.RET.VALUE,ICR.CNV) = RS.ARRAY<PROD.PTR,ROLL.PTR,5> THEN
              RS.ARRAY<PROD.PTR,ROLL.PTR,4> = RS.ARRAY<PROD.PTR,ROLL.PTR,5>
              IF WHS.DIV = IDM.TO.DIV THEN
                RS.ARRAY<PROD.PTR,ROLL.PTR,6> = 'I'
              END ELSE
                RS.ARRAY<PROD.PTR,ROLL.PTR,6> = 'R'
              END
            END ELSE
              ERRMSG = 'ONLY THE FULL BALANCE AMOUNT CAN BE TRANSFERRED.'
              GOSUB 91000 ; VALID.RESP = 0
            END
          END
      END CASE
      IF (VALID.RESP) THEN
        SCV.REC(23)<ESN,ROLL.PTR> = RS.ARRAY<PROD.PTR,ROLL.PTR,2>
        SCV.REC(24)<ESN,ROLL.PTR> = RS.ARRAY<PROD.PTR,ROLL.PTR,3>
        SCV.REC(25)<ESN,ROLL.PTR> = OCONV(RS.ARRAY<PROD.PTR,ROLL.PTR,4>,ICR.CNV1)
        SCV.REC(27)<ESN,ROLL.PTR> = RS.ARRAY<PROD.PTR,ROLL.PTR,6>
        FOR ECD.NUM = 21 TO 28
          ECD.SUB.NUM = ROLL.PTR
          ECD.ACTION = 5
          CALL SCRN.EDIT
        NEXT ECD.NUM
        IF TT = 3 THEN
          PROD.RCV.QTY = 0
          FOR XX = 1 TO ROLL.CNT
            PROD.RCV.QTY += RS.ARRAY<PROD.PTR,XX,4>
          NEXT XX
          SCV.REC(9)<ESN> = OCONV(PROD.RCV.QTY,ICR.CNV1)
          ECD.NUM = 9 ; ECD.ACTION = 5 ; CALL SCRN.EDIT
        END
      END
    UNTIL (VALID.RESP) DO REPEAT
  NEXT TT
  *
  RETURN
*
VALIDATE.WHSE: 
*
  BEGIN CASE
    CASE ECD.RET.VALUE = CO.INTR.WHSE
      ERRMSG = 'CANNOT USE INTER-DIVISIONAL WAREHOUSE'
      GOSUB 91000 ; VALID.RESP = 0
    CASE 1
      MATREAD WHSE.REC FROM WAREHOUSE,CONO:ECD.RET.VALUE ELSE
        ERRMSG = 'CANNOT LOCATE WAREHOUSE.'
        GOSUB 91000 ; VALID.RESP = 0 ; RETURN
      END
      IF WHS.DIV # IDM.TO.DIV THEN
        IF WHS.DIV # IDM.FROM.DIV THEN
          ERRMSG = "THE WHSE DIVISION MUST MATCH THE 'TO' OR THE 'FROM' DIVISION"
          GOSUB 91000 ; VALID.RESP = 0 ; RETURN
        END
      END
      * T26556 v
      * MATREAD IWH.REC FROM INV.WHSE, CONO:PROD.ARRAY<1,PROD.PTR>:'!':ECD.RET.VALUE ELSE
      *   ERRMSG = 'WAREHOUSE DOES NOT EXIST TO THE PRODUCT.'
      *   GOSUB 91000 ; VALID.RESP = 0 ; RETURN
      * END
      * T26556 ^
  END CASE
  *
  RETURN
*
PRINT.TRANSFER: 
* 
  CMD = 'SSELECT INTR_DIV_TRANSFER WITH TRANSIT = "':TRANS.ID:'"'
  PERFORM CMD CAPTURING MSG
  TMP = CONO
  TMP<2> = 'IC443'
  PROCWRITE TMP
  CALL INTR.DIV.JOURNAL
  *
  RETURN
*
POST.TRANSFER: 
*
  GOSUB FILE.TRANSFER
  PROD.CNT = DCOUNT(PROD.ARRAY<1>, @VM) ; ROLL.FOUND = 0
  FOR PROD.PTR = 1 TO PROD.CNT
    PROD.ID = PROD.ARRAY<1,PROD.PTR>
    ROLL.CNT = DCOUNT(RS.ARRAY<PROD.PTR>, @VM)
    FOR ROLL.PTR = 1 TO ROLL.CNT
      SERIAL.ID = RS.ARRAY<PROD.PTR,ROLL.PTR,1>
      WHSE.ID = RS.ARRAY<PROD.PTR,ROLL.PTR,2>
      LOC.ID = RS.ARRAY<PROD.PTR,ROLL.PTR,3>
      TMP.AMT = RS.ARRAY<PROD.PTR,ROLL.PTR,4>
      TMP.STATUS = RS.ARRAY<PROD.PTR,ROLL.PTR,6>
      BEGIN CASE
        CASE WHSE.ID = '' ; CONTINUE
        CASE LOC.ID = '' ; CONTINUE
        CASE TMP.AMT = 0 OR TMP.AMT = '' ; CONTINUE
        CASE TMP.STATUS = 'P' ; CONTINUE
        CASE TMP.STATUS = '' ; CONTINUE
      END CASE
      GOSUB CHECK.INV.WHSE       ;* T26556
      MAT D.TRAN.REC = ""
      D.TRAN.EMP = OPER.ID
      D.TRAN.PRT.DATE = TODAY
      D.TRAN.PERIOD = POST.PER
      D.TRAN.DATE.ENTER = POST.DATE
      D.TRAN.FROM.WHSE = CO.INTR.WHSE
      D.TRAN.REASON.DESC = IDM.DESC
      MATREADU ISTK.REC FROM INV_SERIAL, CONO:SERIAL.ID ELSE MAT ISTK.REC = ''
      D.TRAN.PROD.NO<1> = PROD.ID
      D.TRAN.SERIAL<1> = SERIAL.ID
      D.TRAN.RECP<1> = ISTK.RECP
      D.TRAN.FROM.LOC<1> = ISTK.LOC
      D.TRAN.TO.WHSE<1> = WHSE.ID
      D.TRAN.TO.LOC<1> = LOC.ID
      D.TRAN.QTY<1> = ISTK.CUR.QTY
      D.TRAN.TOT.QTY<1> = ISTK.CUR.QTY
      MAT TRAN.REC='' ; ERRMSG=''
      CALL TRAN.UPDATE(CONO,TRANS.ID,MAT TRAN.REC,'TRANIN',CO.ICS.LOC.TRAN,ERRMSG)
      IF D.TRAN.ERRMSG # '' THEN
        ERRMSG = D.TRAN.ERRMSG
        GOSUB 91000
      END ELSE
        ROLL.FOUND = 1
        IDM.RECV.OPER<1,PROD.PTR,ROLL.PTR> = OPER.ID
        IDM.RECV.DATE<1,PROD.PTR,ROLL.PTR> = TODAY
        IDM.RECV.POST<1,PROD.PTR,ROLL.PTR> = POST.DATE
        IDM.RECV.MON<1,PROD.PTR,ROLL.PTR> = POST.PER
        DELETE INTR_SERIAL_XREF,CONO:SERIAL.ID
      END
    NEXT ROLL.PTR
  NEXT PROD.PTR
  IDM.STATUS = 4
  FOR PROD.PTR = 1 TO PROD.CNT
    ROLL.CNT = DCOUNT(IDM.SERIAL<1,PROD.PTR>, @SVM)
    FOR ROLL.PTR = 1 TO ROLL.CNT
      IF IDM.RECV.POST<1,PROD.PTR,ROLL.PTR> = '' THEN
        IDM.STATUS = 3
      END
    NEXT ROLL.PTR
  NEXT PROD.PTR
  MATWRITE IDM.REC ON INTR_DIV_TRANSFER, CONO:TRANS.ID
  IF ROLL.FOUND = 0 THEN
    ERRMSG = 'CAN NOT POST, NO SERIAL QTY TO TRANSFER'
    GOSUB 91000
  END
  *
  RETURN
*
CHECK.INV.WHSE: 
*
  IWH.ID = CONO:PROD.ID:'!':IDM.FROM.WHSE
  IWH.ID2 = CONO:PROD.ID:'!':WHSE.ID
  MATREADU IWH.REC FROM INV.WHSE, IWH.ID2 ELSE
    MATREAD IWH.REC FROM INV.WHSE, IWH.ID THEN
      SIWH.STD.COST = IWH.STD.COST  
      SIWH.LIST.COST = IWH.LIST.COST
      SIWH.AVG.COST = IWH.AVG.COST  
      SIWH.MARKUP = IWH.MARKUP      
      SIWH.FOH.PCT = IWH.FOH.PCT    
      SIWH.MIN.QTY = IWH.MIN.QTY    
      SIWH.MAX.QTY = IWH.MAX.QTY    
      MAT IWH.REC = ""              
      IWH.STD.COST = SIWH.STD.COST  
      IWH.LIST.COST = SIWH.LIST.COST
      IWH.AVG.COST = SIWH.AVG.COST  
      IWH.MARKUP = SIWH.MARKUP      
      IWH.FOH.PCT = SIWH.FOH.PCT    
      IWH.MIN.QTY = SIWH.MIN.QTY    
      IWH.MAX.QTY = SIWH.MAX.QTY    
      MATWRITE IWH.REC ON INV.WHSE, IWH.ID2
      MATREADU INV.REC FROM INVENTORY, CONO:PROD.ID THEN
        LOCATE WHSE.ID IN INV.WHSE.CODE<1>,1 SETTING TOS ELSE
          INV.WHSE.CODE<1,TOS> = WHSE.ID
        END
        MATWRITE INV.REC TO INVENTORY, CONO:PROD.ID
      END
    END 
  END
  *
  RETURN
*
DISP.SERIAL: 
*
  START.LINE = 1 + INT((ROLL.PTR-1)/PAGE.SIZE) * PAGE.SIZE
  LAST.LINE = START.LINE + PAGE.SIZE - 1
  IF LAST.LINE > ROLL.CNT THEN LAST.LINE = ROLL.CNT
  IF START.LINE = OLD.START THEN RETURN
  OLD.START = START.LINE
  FOR ECD.NUM = 21 TO 28
    ECD.SUB.NUM = START.LINE
    ECD.ACTION = 7
    CALL SCRN.EDIT
  NEXT ECD.NUM
  P1 = INT((START.LINE-1)/PAGE.SIZE)+1
*T28216v P2 = INT((ROLL.CNT)/PAGE.SIZE)+1; IF P2=0 THEN P2=1
  P2 = INT((ROLL.CNT-1)/PAGE.SIZE)+1; IF P2=0 THEN P2=1
  SCV.REC(30)<ESN> = P1
  ECD.NUM=30; ECD.ACTION=5; CALL SCRN.EDIT
  SCV.REC(31)<ESN> = P2
  ECD.NUM=31; ECD.ACTION=5; CALL SCRN.EDIT
  RETURN
*
*---- ERROR ROUTINE
*
91000 ERR.TYPE=1;CALL SYSCOM(MAT SYSCOM.REC);RETURN
92000 ERR.TYPE=2;CALL SYSCOM(MAT SYSCOM.REC);RETURN
93000 ERR.TYPE=3;CALL SYSCOM(MAT SYSCOM.REC)
99999 * 
  ECD.ACTION = 99
  CALL SCRN.EDIT
END
