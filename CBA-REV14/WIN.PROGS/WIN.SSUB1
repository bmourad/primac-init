SUBROUTINE WIN.SSUB1(ACTION, MAT SS.ARGS, ARG)
* Example service subroutine for WIN.SERVER/WIN.TRANSFER
* Compile For:
* (C) Copyright IBM Corporation 2003. All rights reserved
*
AMVM=1; AMVM<1,2>=2; AMVM<2>=3
AM=AMVM[4,1]
VM=AMVM[2,1]
* Arguments for Service subroutine
DIM SS.ARGS(30)
EQU SS.PROGS  TO SS.ARGS(1)
EQU SS.PARAM  TO SS.ARGS(2)
EQU SS.RESULT TO SS.ARGS(3)
EQU SS.EXTRA1 TO SS.ARGS(4)
EQU SS.EXTRA2 TO SS.ARGS(5)
*
* User defined attributes
EQU F.VOC TO SS.ARGS(10)
EQU OPEN.OK TO SS.ARGS(11)
EQU F.HOLD TO SS.ARGS(12)
EQU HOLD.OK TO SS.ARGS(13)
*
EQU SSA.INIT     TO 1
EQU SSA.FILESEL  TO 2
EQU SSA.FILECHK  TO 3
EQU SSA.FIELDSEL TO 4
EQU SSA.FIELDCHK TO 5
EQU SSA.EXECCHK  TO 6
EQU SSA.TRANCHK  TO 7
EQU SSA.SLAVEON  TO 8
EQU SSA.SLAVEOFF TO 9
EQU SSA.HPRTON   TO 10
EQU SSA.HPRTOFF  TO 11
EQU SSA.READCHK  TO 12
EQU SSA.WRITECHK TO 13
EQU SSA.DELETECHK TO 14
EQU SSA.PREFILE  TO 15
EQU SSA.PREITEM  TO 16
EQU SSA.PREFIELD TO 17
*
BEGIN CASE
CASE ACTION = SSA.INIT;     GOSUB 100; * Initialise
CASE ACTION = SSA.FILESEL;  GOSUB 200; * File selection
CASE ACTION = SSA.FILECHK;  GOSUB 300; * Check FILE
CASE ACTION = SSA.FIELDSEL; GOSUB 400; * Fields selection
CASE ACTION = SSA.FIELDCHK; GOSUB 500; * Check fields
CASE ACTION = SSA.EXECCHK;  GOSUB 600; * Check execute
CASE ACTION = SSA.TRANCHK;  GOSUB 700; * Check file transfer
CASE ACTION = SSA.SLAVEON;  GOSUB 800; * Slave printer on
CASE ACTION = SSA.SLAVEOFF; GOSUB 900; * Slave printer off
CASE ACTION = SSA.HPRTON;   GOSUB 1000;* Setup host printer
CASE ACTION = SSA.HPRTOFF;  GOSUB 1100;* Reset host printer
CASE ACTION = SSA.READCHK;  GOSUB 1200;* Check ok to read item
CASE ACTION = SSA.WRITECHK; GOSUB 1300;* Check ok to write item
CASE ACTION = SSA.DELETECHK; GOSUB 1400;* Check ok to delete item
CASE ACTION = SSA.PREFILE; GOSUB 1500;* File name preprocessing
CASE ACTION = SSA.PREITEM; GOSUB 1600;* Items preprocessing
CASE ACTION = SSA.PREFIELD; GOSUB 1700;* Fields preprocessing
END CASE
*
RETURN
*
* Initialise subroutine
* Set up when we want this routine called
100 ARG = ''
ARG<SSA.FILESEL>  = 1
ARG<SSA.FILECHK>  = 1
ARG<SSA.FIELDSEL> = 1
ARG<SSA.FIELDCHK> = 1
ARG<SSA.EXECCHK>  = 1
ARG<SSA.TRANCHK>  = 1
ARG<SSA.SLAVEON>  = 1
ARG<SSA.SLAVEOFF> = 1
ARG<SSA.HPRTON>   = 1
ARG<SSA.HPRTOFF>  = 1
ARG<SSA.READCHK>  = 1
ARG<SSA.WRITECHK> = 1
ARG<SSA.DELETECHK> = 1
ARG<SSA.PREFILE> = 1
ARG<SSA.PREITEM> = 1
ARG<SSA.PREFIELD> = 1
OPEN.OK = 1
OPEN 'VOC' TO F.VOC ELSE OPEN.OK = 0
HOLD.OK = 1
OPEN '_HOLD_' TO F.HOLD ELSE HOLD.OK = 0
RETURN
*
* Set up file selection
200 * On Unidata, just list files Starting with an alphabetical name
ARG = 'SSELECT VOC WITH @ID GE "A" AND @ID LE "Z" AND ':SS.PARAM<11>
SS.RESULT = 1
RETURN
*
* Check an individual file name
300 * Just eliminate the directory files
IF OPEN.OK THEN
   SS.RESULT = 1
   READV TYPE FROM F.VOC,ARG,1 ELSE TYPE = "DIR"
   IF OCONV(TYPE, "MCU") = "DIR" THEN SS.RESULT = 0
END
RETURN
*
* Fields selection
* On Entry
*  ARG is the default selection
*  SS.EXTRA1 is the filename
* On Exit
*  Modify ARG to the new selection
*  SS.RESULT = 2 if ARG contains a list of keys
*
* Restricts list to data fields only
400 ARG = 'SELECT DICT ':SS.EXTRA1:' WITH F1 LIKE "D..." USING DICT VOC'
    SS.RESULT = 1
RETURN
*
* Check fields
* On entry
*    ARG = field name
* On exit
*    SS.RESULT = 0  - don't use key
*    SS.RESULT = 1  - use key
* Just filter out @ID entry
500 SS.RESULT = 1
    IF ARG = "@ID" THEN SS.RESULT = 0 
    RETURN
*
* Check execute in case someone typed something in we don't want them
* to use
* In this example we are just checking that they haven't typed in an
* file name which doesn't match our earlier selection
*
* On entry
*    ARG = Dynamic array of lines to be executed
* On Exit:  ARG = actual statement to be executed
*          SS.RESULT = 0 - Invalid execute statement
*             SS.EXTRA1 = error message or "" for no message
*          SS.RESULT = 1 - Statement ok
*
600 N = DCOUNT(ARG, AM)
    SS.RESULT = 1
    FOR J = 1 TO N WHILE SS.RESULT = 1
       LINE = TRIM(ARG<J>)
       VRB = FIELD(LINE," ",1)
       FIL = FIELD(LINE," ",2)
       IF VRB = "SORT" OR VRB = "SELECT" OR VRB = "SSELECT" OR VRB = "LIST" THEN
          GOSUB 2000;* Check filename
       END
    NEXT J
*
    IF SS.RESULT = 0 THEN SS.EXTRA1 = "Invalid file name"
    RETURN           
*
* Check file transfer details
* On Entry:  ARG = Information to be checked
*                 (format same as in USERCHECK subroutine)
* On Exit:   SS.RESULT = 1 - ok
*            SS.RESULT = 0 - invalid parameters
*              SS.EXTRA1 = error message
*
700 FIL = ARG<4>; * Filename
SS.RESULT = 1
GOSUB 2000;* Check filename
IF SS.RESULT = 0 THEN
   SS.EXTRA1 = "Filename must start with a letter and not be a directory"
END
RETURN
*
* Check filename
2000 IF FIL >= "A" AND FIL <= "Z" THEN
        READV TYPE FROM F.VOC,FIL,1 ELSE TYPE = "DIR"
        IF OCONV(TYPE, "MCU") = "DIR" THEN SS.RESULT = 0
     END ELSE SS.RESULT = 0
     RETURN
*
* Slave printer on
* ACTION = SSA.SLAVEON
* On Entry: ARG = Destination for capture usually "Printer"
* On Exit:  SS.RESULT = 0, all processing done here
*                     = 1, do standard processing in WIN.SERVER
*                     = 2, Just do capture on stuff
*           ARG - modify to send printout to file
*
800 CALL WIN.PCSCRIPT("wintsys\wit_scr\view132","")
    EXECUTE "TERM 132"
    SS.RESULT = 2
    RETURN
*
* Slave printer off
* ACTION = SSA.SLAVEOFF
* On Exit:  SS.RESULT = 0, all processing done here
*                     = 1, do standard processing in WIN.SERVER
*                     = 2, Just do capture off stuff
*
900 EXECUTE "TERM 80"
    SCRIPT ='Capture Off ServerPrint'
    SCRIPT<-1> = 'Screen On'
    SCRIPT<-1> = 'SCRIPT "wintsys\wit_scr\view80"'
    SCRIPT<-1> = 'Print "Local print finished"'
    CALL WIN.COMSUB(SCRIPT)
    SS.RESULT = 0
    RETURN
*
* Host printer setup
* ACTION = SSA.HPRTON
1000 * Find next hold number and set printer to 132x60
IF HOLD.OK THEN
  FOUND = 0
  NN = 0
  LOOP
    KEY = "P_":FMT(NN,"4'0'R")
    READV DUM FROM F.HOLD, KEY,1 ELSE FOUND = 1
  UNTIL FOUND DO
    NN += 1
  REPEAT
*
  CALL WIN.STATLINE("Hold entry ":KEY)
  EXECUTE "SETPTR 0,132,60,3,3,3,BANNER ":KEY:",BRIEF"
END
  RETURN
*
* Host printer reset
* ACTION = SSA.HPRTOFF
* Reset printer to 80x60
1100 IF HOLD.OK THEN
        EXECUTE "SETPTR 0,80,60,3,3,1,BRIEF"
     END
     RETURN
*
* Check ok to read item
* ACTION = SSA.READCHK
* On entry
*    ARG = file name
*    SS.EXTRA1 = item name
*    SS.EXTRA2 = field number (or "" for whole record)
* On exit
*    SS.RESULT = 0  - Access denied
*    SS.RESULT = 1  - Access granted
*
* Example stops view of VOC
1200 IF ARG # "VOC" THEN SS.RESULT = 1
     RETURN
*
* Check ok to write item
* ACTION = SSA.WRITECHK
* On entry
*    ARG = file name
*    SS.EXTRA1 = item name
*    SS.EXTRA2 = field number (or "" for whole record)
* On exit
*    SS.RESULT = 0  - Access denied
*    SS.RESULT = 1  - Access granted
*
* Example stops writting to VOC or any dictionary
1300 IF ARG # "VOC" AND FIELD(ARG, " ",1) # "DICT" THEN SS.RESULT = 1
     RETURN
*
* Check ok to delete item
* ACTION = SSA.DELETECHK
* On entry
*    ARG = file name
*    SS.EXTRA1 = item name
* On exit
*    SS.RESULT = 0  - Access denied
*    SS.RESULT = 1  - Access granted
*
* Example stops deleting from VOC
1400 IF ARG # "VOC" THEN SS.RESULT = 1
RETURN
*
* Allow modification of file name passed to the host
* ACTION = SSA.PREFILE
* On entry
*    ARG = file name (possibly preceeded by account)
* On exit
*    ARG = file name to use
*
* Example converts file name to upper case
1500 ARG = OCONV(ARG,"MCU")
RETURN
*
* Allow modification of item names passed to the host
* ACTION = SSA.PREITEM
* On entry
*    ARG = ITEMS (space separated)
*    SS.EXTRA1 = file name
*    SS.EXTRA2 = account name
* On exit
*    ARG = ITEMS to use
*
* Note: can be called multiple times for one transfer
*
* Example converts items to upper case
1600 ARG = OCONV(ARG,"MCU")
RETURN
*
* Allow modification of field names passed to the host
* ACTION = SSA.PREFIELD
* On entry
*    ARG = FIELDS (space separated)
*    SS.EXTRA1 = file name
*    SS.EXTRA2 = account name
* On exit
*    ARG = FIELDSS to use
*
* Note: can be called multiple times for one transfer
*
* Example converts field names to upper case
1700 ARG = OCONV(ARG,"MCU")
RETURN
*
END
