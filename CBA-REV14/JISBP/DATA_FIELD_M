      SUBROUTINE DATA_FIELD_M(TABLE_ID,PFX,FLD_ID,ATTNO)
*COPY>CPYLIB>COM1
*COPY>JIS.CPYLIB>COM_DATA_STRUC_M
*********************************************************************
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* Revision      - [10.0]
* Revision Date - 03/22/94
* System        - PRIMAC
* Library       - JISBP/DATA_FIELD_M
* Author        - Ziad Yamout, VERCOM Software, Inc.
* MOD DT 8/28/96
*T21177 diane 02/10/1997 * REV11 UPG
*T22957 renee 06/26/1998 * If nothing selected when returning from the
*                          "link" cross reference, then keep what was
*                          there before. Right now, it is being wiped
*                          out.
*********************************************************************
*
*---- Data Structure Libraries
*
* *COPY>PMC.CPYLIB>MENUS.CONTROL
*COPY>JIS.CPYLIB>SYS_FILES
*COPY>JIS.CPYLIB>PFX_FILES
*COPY>JIS.CPYLIB>SYS_FIELDS
*COPY>CPYLIB>NEW.BUILD.SCREEN
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>GEN.XREF.SUB
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
*
*---- SET UP SYSCOM
*
      SYS.TYPE = 1
      CALL SYSCOM(MAT SYSCOM.REC)
*
      DIM O_DFD.REC(35)
*
*---- Setup variables
      ESN = ECD.SCRN.NO
      TYPE_INI = "T"; TYPE_DSC = "Text"; OTYP_INI = 1
      TYPE_INI<2> = "N"; TYPE_DSC<2> = "Numeric"; OTYP_INI<2> = 3
      TYPE_INI<3> = "C"; TYPE_DSC<3> = "deCimal"; OTYP_INI<3> = 4
      TYPE_INI<4> = "A"; TYPE_DSC<4> = "Alpha"; OTYP_INI<4> = 2
      TYPE_INI<5> = "D"; TYPE_DSC<5> = "Date"; OTYP_INI<5> = 6
      TYPE_INI<6> = "L"; TYPE_DSC<6> = "Logical"; OTYP_INI<6> = 8
      TYPE_INI<7> = "P"; TYPE_DSC<7> = "Pattern"; OTYP_INI<7> = 7
      TYPE_INI<8> = "U"; TYPE_DSC<8> = "coUnter"; OTYP_INI<8> = 3
      JTYPE_INI = "L"; LTYPE_INI = 0
      JTYPE_INI<2> = "R"; LTYPE_INI<2> = 11
      JTYPE_INI<3> = "R"; LTYPE_INI<3> = 13
      JTYPE_INI<4> = "L"; LTYPE_INI<4> = 0
      JTYPE_INI<5> = "L"; LTYPE_INI<5> = 8
      JTYPE_INI<6> = "L"; LTYPE_INI<6> = 1
      JTYPE_INI<7> = "L"; LTYPE_INI<7> = 0
      JTYPE_INI<8> = "R"; LTYPE_INI<8> = 9
      ORVALDAT_INI = 0; ORVALDAT_DSC = "AND"
      ORVALDAT_INI<2> = 1; ORVALDAT_DSC<2> = "OR"
      O.R_INI = "O"; O.R_DSC = "Optional"
      O.R_INI<2> = "R"; O.R_DSC<2> = "Required"
      Y.N_INI = "Y"; Y.N_DSC = "Yes"
      Y.N_INI<2> = "N"; Y.N_DSC<2> = "No"
      JUSTIFY_INI = "L"; JUSTIFY_DSC = "Left"
      JUSTIFY_INI<2> = "R"; JUSTIFY_DSC<2> = "Right"
      JUSTIFY_INI<3> = "C"; JUSTIFY_DSC<3> = "Center"
      LVL_INI = "S"; LVL_DSC = "Single Value"
      LVL_INI<2> = "M"; LVL_DSC<2> = "Multi Values"
      LVL_INI<3> ="V"; LVL_DSC<3> = "Sub Multi Values"
      VC.OT = "-":AM:"C":AM:"<"
      V.OT = "Z":AM:",":AM:"$":AM:VC.OT
      LINE.SPACE = 1
      BEGIN.PPAGE = 9; PPAGE.SIZE = 2
      BEGIN.RPAGE = 6; RPAGE.SIZE = 2
      BEGIN.VPAGE = 15; VPAGE.SIZE = 2
      V_X = 45
      BEGIN.PAGE = 19; PAGE.SIZE = 2
      LN = 1; LINES = 0
      PLN = 1; PLINES = 0
      RLN = 1; RLINES = 0
      VLN = 1; VLINES = 0
*
*---- Display screen header & data
      ECD.ACTION = 2; CALL SCRN.EDIT
      DFLT_ECD.NUM = 29
      LOCATE DFLT_ECD.NUM IN BLD.EXT.REF<1>,1 SETTING DFLT_SCN.NUM ELSE
         DFLT_SCN.NUM = 0
      END
      IF PFX = "" THEN
         ITEM_ID = FLD_ID
         ID_FLD = 1
         MATREAD PFR.REC FROM PFX_FILES, FLD_ID ELSE
            ERRMSG = "Cannot locate Prefix # ":FLD_ID
            GOSUB 91000
            MAT PFR.REC = ""
            PFR_FILE = TABLE_ID
         END
      END ELSE
         ITEM_ID = PFX:"_":FLD_ID
         ID_FLD = 0
         MAT PFR.REC = ""
      END
      NEWREC = 0
      MATREADU DFD.REC FROM SYS_FIELDS, ITEM_ID THEN
         S_DFD_M_LNK = DFD_M_LNK; S_DFD_V_LNK = DFD_V_LNK
      END ELSE
         S_DFD_M_LNK = ""; S_DFD_V_LNK = ""
         MAT DFD.REC = ""
         IF NOT(ID_FLD) THEN
            GOSUB 1100
            IF DFD_LNK # "" THEN
               TMP_LNK = DFD_LNK; TMP_LNK_FILE = DFD_LNK_FILE
               MATREAD DFD.REC FROM SYS_FIELDS, TMP_LNK THEN
                  DFD_ATTNO = ""
                  DFD_TABLE = ""
                  DFD_LNK = TMP_LNK
                  DFD_LNK_FILE = TMP_LNK_FILE
               END ELSE
                  MAT DFD.REC = ""
               END
            END
         END
         IF DFD_LNK = "" THEN
            NEWREC = 1
            DFD_TYPE = "T"
            DFD_LEN = 1
            DFD_MINL = 1
            DFD_JUSTIFY = "L"
            DFD_O_R = "R"
            DFD_LVL = "S"
         END
      END
      IF DFD_LEN > 15 THEN
         MAX_LEN = 15
      END ELSE
         MAX_LEN = DFD_LEN
      END
      BEGIN CASE
         CASE DFD_VALD_DSC # ""
            VDSC = "Y"
         CASE DFD_VALDAT # ""
            VDSC = "N"
         CASE 1
            VDSC = ""
      END CASE
      SCV.REC(1)<ESN> = FLD_ID
      SCV.REC(2)<ESN> = TABLE_ID
      SCV.REC(3)<ESN> = DFD_LNK
      SCV.REC(4)<ESN> = DFD_LNK_FILE
      LOCATE DFD_TYPE IN TYPE_INI,1 SETTING TLOC THEN
         SCV.REC(5)<ESN> = TYPE_DSC<TLOC>
      END ELSE
         SCV.REC(5)<ESN> = DFD_TYPE
      END
      SCV.REC(6)<ESN> = DFD_DESC
      SCV.REC(7)<ESN> = DFD_DEC
      SCV.REC(9)<ESN> = DFD_LEN
      SCV.REC(10)<ESN>= DFD_MINL
      SCV.REC(11)<ESN>= DFD_MINV
      SCV.REC(13)<ESN>= DFD_MAXV
      LOCATE (DFD_ORVALDAT + 0) IN ORVALDAT_INI,1 SETTING FND THEN
         SCV.REC(12)<ESN> = ORVALDAT_DSC<FND>
      END ELSE
         SCV.REC(12)<ESN> = DFD_ORVALDAT
      END
      LOCATE VDSC IN Y.N_INI,1 SETTING FND THEN
         SCV.REC(14)<ESN> = Y.N_DSC<FND>
      END ELSE
         SCV.REC(14)<ESN> = VDSC
      END
      LOCATE DFD_JUSTIFY IN JUSTIFY_INI,1 SETTING FND THEN
         SCV.REC(15)<ESN> = JUSTIFY_DSC<FND>
      END ELSE
         SCV.REC(15)<ESN> = DFD_JUSTIFY
      END
      SCV.REC(16)<ESN>= DFD_FILL
      SCV.REC(17)<ESN> = DFD_INVALCHR
      SCV.REC(19)<ESN>= DFD_PIC
      LOCATE DFD_O_R IN O.R_INI,1 SETTING FND THEN
         SCV.REC(21)<ESN> = O.R_DSC<FND>
      END ELSE
         SCV.REC(21)<ESN> = DFD_O_R
      END
      LOCATE DFD_LVL IN LVL_INI,1 SETTING FND THEN
         SCV.REC(23)<ESN> = LVL_DSC<FND>
      END ELSE
         SCV.REC(23)<ESN> = DFD_LVL
      END
      IF DFD_M_ASOC = "" THEN
         SCV.REC(25)<ESN> = "  :"
      END ELSE
         SCV.REC(25)<ESN> = "(*)"
      END
      SCV.REC(26)<ESN> = DFD_M_LNK
      IF DFD_V_ASOC = "" THEN
         SCV.REC(27)<ESN> = "  :"
      END ELSE
         SCV.REC(27)<ESN> = "(*)"
      END
      SCV.REC(28)<ESN> = DFD_V_LNK
      BEGIN CASE
         CASE DFD_TYPE = "D"
            SCV.REC(DFLT_ECD.NUM)<ESN>= OCONV(DFD_DEFAULT,"D2/")
         CASE DFD_TYPE = "C"
            SCV.REC(DFLT_ECD.NUM)<ESN>= OCONV(DFD_DEFAULT,"MD":DFD_DEC)
         CASE 1
            SCV.REC(DFLT_ECD.NUM)<ESN>= DFD_DEFAULT
      END CASE
      RLINES = DCOUNT(DFD_LNK_FLD,VM)
      SCV.REC(55)<ESN> = INT(RLINES/RPAGE.SIZE+.9) "R%2"
      PLINES = DCOUNT(DFD_PATRN,VM)
      SCV.REC(45)<ESN> = INT(PLINES/PPAGE.SIZE+.9) "R%2"
      VLINES = DCOUNT(DFD_VALDAT,VM)
      SCV.REC(47)<ESN> = INT(VLINES/VPAGE.SIZE+.9) "R%2"
      READU HMSG_REC FROM SYS_FLD_HMSG, ITEM_ID ELSE
         HMSG_REC = ""
      END
      LINES = DCOUNT(HMSG_REC,AM)
      SCV.REC(49)<ESN> = INT(LINES/PAGE.SIZE+.9) "R%2"
      GOSUB 10000
      IF NEWREC THEN
         LIMIT = 5
         FOR OPTION = 1 TO LIMIT
            ON OPTION GOSUB 1200,1300,1400,1500,2100
         NEXT OPTION
      END
*---- Prompt line
      MORE = 1
      LOOP
         ECD.NUM = 51; SCV.REC(ECD.NUM)<ESN> = ""
         ECD.ACTION = 4; CALL SCRN.EDIT
         OPTION = ECD.RET.VALUE
         BEGIN CASE
            CASE OPTION = "E" OR OPTION = "END"
               GOSUB 8000
               IF ERRMSG # "" THEN
                  GOSUB 91000
               END
               RELEASE SYS_FIELDS, ITEM_ID
               RELEASE SYS_FLD_HMSG, ITEM_ID
               MORE = 0
            CASE OPTION = "MV" AND DFD_M_ASOC # ""
               MAT GEN.XREF.REC = ""
               GXR.NAME = "MV.GEN.SEL"
               GXR.IDLIST = DFD_M_ASOC
               CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
               ECD.ACTION = 2; CALL SCRN.EDIT
               GOSUB 10000
            CASE OPTION = "SMV" AND DFD_V_ASOC # ""
               MAT GEN.XREF.REC = ""
               GXR.NAME = "MV.GEN.SEL"
               GXR.IDLIST = DFD_V_ASOC
               CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
               ECD.ACTION = 2; CALL SCRN.EDIT
               GOSUB 10000
            CASE OPTION = "MV" OR OPTION = "SMV"
               ERRMSG = "Cannot locate any associated (":OPTION:") values with this field."
               GOSUB 91000
            CASE ID_FLD AND TABLE_ID # PFR_FILE
               ERRMSG = "Cannot maintain ID except from the orginating file"
               GOSUB 91000
            CASE OPTION = "F"
               GOSUB 8000
               IF ERRMSG = "" THEN
                  BEGIN CASE
                     CASE ATTNO = "I"
                        DFD_ATTNO = 0
                        DFD_TABLE = TABLE_ID
                     CASE NOT(NUM(ATTNO))
                     CASE ATTNO > 0
                        DFD_ATTNO = ATTNO
                        DFD_TABLE = TABLE_ID
                  END CASE
                  MATWRITE DFD.REC ON SYS_FIELDS, ITEM_ID
                  WRITE HMSG_REC ON SYS_FLD_HMSG, ITEM_ID
                  O_DFD_LVL = DFD_LVL
                  O_DFD_M_LNK = DFD_M_LNK; O_DFD_V_LNK = DFD_V_LNK
                  IF S_DFD_M_LNK # "" AND S_DFD_M_LNK # FLD_ID AND S_DFD_M_LNK # O_DFD_M_LNK THEN
                     MATREADU DFD.REC FROM SYS_FIELDS, PFX:"_":S_DFD_M_LNK THEN
                        LOCATE FLD_ID IN DFD_M_ASOC<1>,1 SETTING FND THEN
                           DFD_M_ASOC = DELETE(DFD_M_ASOC,1,FND,0)
                        END
                        MATWRITE DFD.REC ON SYS_FIELDS, PFX:"_":S_DFD_M_LNK
                     END ELSE
                        RELEASE SYS_FIELDS, PFX:"_":S_DFD_M_LNK
                     END
                  END
                  IF S_DFD_V_LNK # "" AND S_DFD_V_LNK # FLD_ID AND S_DFD_V_LNK # O_DFD_V_LNK THEN
                     MATREADU DFD.REC FROM SYS_FIELDS, PFX:"_":S_DFD_V_LNK THEN
                        LOCATE FLD_ID IN DFD_V_ASOC<1>,1 SETTING FND THEN
                           DFD_V_ASOC = DELETE(DFD_V_ASOC,1,FND,0)
                        END
                        MATWRITE DFD.REC ON SYS_FIELDS, PFX:"_":S_DFD_V_LNK
                     END ELSE
                        RELEASE SYS_FIELDS, PFX:"_":S_DFD_V_LNK
                     END
                  END
                  BEGIN CASE
                     CASE O_DFD_LVL = "V"
                        IF O_DFD_M_LNK # FLD_ID THEN
                           MATREADU DFD.REC FROM SYS_FIELDS, PFX:"_":O_DFD_M_LNK THEN
                              LOCATE FLD_ID IN DFD_M_ASOC<1>,1 SETTING FND ELSE
                                 DFD_M_ASOC<1,FND> = FLD_ID
                              END
                              MATWRITE DFD.REC ON SYS_FIELDS, PFX:"_":O_DFD_M_LNK
                           END ELSE
                              RELEASE SYS_FIELDS, PFX:"_":O_DFD_M_LNK
                           END
                        END
                        IF O_DFD_V_LNK # FLD_ID THEN
                           MATREADU DFD.REC FROM SYS_FIELDS, PFX:"_":O_DFD_V_LNK THEN
                              LOCATE FLD_ID IN DFD_V_ASOC<1>,1 SETTING FND ELSE
                                 DFD_V_ASOC<1,FND> = FLD_ID
                              END
                              MATWRITE DFD.REC ON SYS_FIELDS, PFX:"_":O_DFD_V_LNK
                           END ELSE
                              RELEASE SYS_FIELDS, PFX:"_":O_DFD_V_LNK
                           END
                        END
                     CASE O_DFD_LVL = "M" AND O_DFD_M_LNK # FLD_ID
                        MATREADU DFD.REC FROM SYS_FIELDS, PFX:"_":O_DFD_M_LNK THEN
                           LOCATE FLD_ID IN DFD_M_ASOC<1>,1 SETTING FND ELSE
                              DFD_M_ASOC<1,FND> = FLD_ID
                           END
                           MATWRITE DFD.REC ON SYS_FIELDS, PFX:"_":O_DFD_M_LNK
                        END ELSE
                           RELEASE SYS_FIELDS, PFX:"_":O_DFD_M_LNK
                        END
                  END CASE
                  MORE = 0
               END ELSE
                  GOSUB 91000
               END
            CASE OPTION = "L"
               GOSUB 1100
            CASE OPTION = "H"
               GOSUB 7000
            CASE OPTION = "T"
               X = 1; Y = 23
               TYP = OTYP_INI<TLOC>; SCALER = DFD_DEC
               MAXL = DFD_LEN; MINL = DFD_MINL
               MAXV = DFD_MAXV; MINV = DFD_MINV
               JUSTIFY = DFD_JUSTIFY; FILL.CHR = DFD_FILL
               O.R = DFD_O_R; DEFAULT = DFD_DEFAULT
               PATRN = DFD_PATRN
               INVALCHR = FIELD(DFD_INVALCHR,",",1)
               CNT = DCOUNT(DFD_INVALCHR,",")
               FOR I = 2 TO CNT
                  INVALCHR<1,I> = FIELD(DFD_INVALCHR,",",I)
               NEXT I
               ORVATDAT = DFD_ORVALDAT; VALDAT = DFD_VALDAT
               HMSG = HMSG_REC<1>
               FOR I = 2 TO LINES
                  HMSG<1,I> = HMSG_REC<I>
               NEXT I
               CALL EDIT.SUB
               P_X = 0 ; P_Y = 23 ; P_VALUE = "" ; P_OPT = "CL"
               CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
            CASE OPTION = "R" AND DFD_LNK = ""
               ERRMSG = "Cannot assign remote files to non-linked file"
               GOSUB 91000
            CASE OPTION = "R"
               GOSUB 6000
            CASE DFD_LNK # ""
               BEGIN CASE
                  CASE OPTION = "1"
                     GOSUB 1200
                  CASE OPTION = "9"
                     GOSUB 2000
                  CASE OPTION = "10"
                     GOSUB 2100
                  CASE OPTION = "11"
                     GOSUB 2200
                  CASE OPTION = "12"
                     GOSUB 2300
                  CASE 1
                     ERRMSG = "Cannot maintain a linked field"
                     GOSUB 91000
               END CASE
            CASE OPTION = "V"
               GOSUB 5000
            CASE NOT(NUM(OPTION))
               ERRMSG = "Invalid entry, please re-enter"
               GOSUB 91000
            CASE OPTION < 1 OR OPTION > 12
               ERRMSG = "Out of range, please re-enter"
               GOSUB 91000
            CASE 1
               ON OPTION GOSUB 1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300
         END CASE
      WHILE MORE DO REPEAT
      FOR I = 1 TO SCV.REC.SIZE
         SCV.REC(I)<ESN> = ""
      NEXT I
      GOTO 99999
*---- Link File Prefix
1100*
      ECD.DEFAULT = DFD_LNK   ; * T22957
      ECD.NUM = 3
      ECD.ACTION = 4; CALL SCRN.EDIT
      BEGIN CASE
         CASE ECD.RET.VALUE = "END"
            GOTO 1199
         CASE ECD.RET.VALUE = "???"
            MAT GEN.XREF.REC = ""
            GXR.NAME = "PFX_FILES"
            GXR.FILE = PFX_FILES
            CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
            ECD.ACTION = 2; CALL SCRN.EDIT
            SCV.REC(3)<ESN> = GXR.ID
            GOSUB 10000
            IF GXR.ID = "" THEN GOTO 1100
            ECD.RET.VALUE = GXR.ID
         CASE ECD.RET.VALUE = ""
            MAT PFR.REC = ""
            GOTO 1150
      END CASE
      MATREAD PFR.REC FROM PFX_FILES, ECD.RET.VALUE ELSE
         ERRMSG = "Cannot locate File Prefix # ":ECD.RET.VALUE
         GOSUB 91000; GOTO 1100
      END
1150*
      DFD_LNK = ECD.RET.VALUE
      DFD_LNK_FILE = PFR_FILE
      ECD.NUM = 4; SCV.REC(ECD.NUM)<ESN> = DFD_LNK_FILE
      ECD.ACTION = 5; CALL SCRN.EDIT
1199  RETURN
*---- Data Field Description
1200*
      ECD.NUM = 6
      ECD.ACTION = 4; CALL SCRN.EDIT
      IF ECD.RET.VALUE = "END" THEN GOTO 1299
      DFD_DESC = ECD.RET.VALUE
1299  RETURN
*---- Data field type
1300*
      ECD.NUM = 5
      SCV.REC(ECD.NUM)<ESN> = DFD_TYPE
      ECD.ACTION = 5; CALL SCRN.EDIT
      ECD.MAXL = 1; ECD.ACTION = 4; CALL SCRN.EDIT
      BEGIN CASE
         CASE ECD.RET.VALUE = "END"
            GOTO 1399
         CASE ECD.RET.VALUE = ""
            MAT GEN.XREF.REC = ""
            GXR.NAME = "AM.SEL"
            GXR.IDLIST = TYPE_DSC
            CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
            ECD.ACTION = 2; CALL SCRN.EDIT
            LOCATE GXR.ID IN TYPE_DSC,1 SETTING FND THEN
               GXR.ID = TYPE_INI<FND>
            END ELSE
               GXR.ID = ""
            END
            SCV.REC(ECD.NUM)<ESN> = GXR.ID
            GOSUB 10000
            IF GXR.ID = "" THEN GOTO 1300
            ECD.RET.VALUE = GXR.ID
      END CASE
      LOCATE ECD.RET.VALUE IN TYPE_INI,1 SETTING TLOC ELSE
         LOCATE ECD.RET.VALUE IN OTYP_INI,1 SETTING TLOC THEN
            ECD.RET.VALUE = TYPE_INI<TLOC>
         END ELSE
            ERRMSG = "Cannot locate type # ":ECD.RET.VALUE
            GOSUB 91000; GOTO 1300
         END
      END
      O_DFD_TYPE = DFD_TYPE
      DFD_TYPE = ECD.RET.VALUE
      ECD.NUM = 5; SCV.REC(ECD.NUM)<ESN> = TYPE_DSC<TLOC>
      ECD.ACTION = 5; CALL SCRN.EDIT
      BEGIN CASE
         CASE DFD_TYPE = "P"
            GOSUB 3000
            IF PLINES < 1 THEN
               ERRMSG = "No Pattern matching values for the Pattern type !"
               GOSUB 91000
               DFD_TYPE = O_DFD_TYPE
               SCV.REC(ECD.NUM)<ESN> = DFD_TYPE
               ECD.ACTION = 5; CALL SCRN.EDIT
               GOTO 1300
            END
         CASE DFD_PATRN # ""
            DFD_PATRN = ""
            PLINES = 0; PLN = PLINES
            GOSUB 3900; GOSUB 3955
      END CASE
      IF DFD_TYPE = O_DFD_TYPE THEN GOTO 1399
      PMSG = ""
      BEGIN CASE
         CASE DFD_DEFAULT # "" AND DFD_VALDAT # "" AND DFD_ORVALDAT < 1
            PMSG = "The Default and Valid Values will be cleared (Y/N) "
         CASE DFD_DEFAULT # ""
            PMSG = "The Default value will be cleared (Y/N) "
         CASE DFD_VALDAT # "" AND DFD_ORVALDAT < 1
            PMSG = "The Valid Values will be cleared (Y/N) "
      END CASE
      IF PMSG # "" THEN
         TYP = 8; X = 0; Y = 23; O.R = "O"; DEFAULT = "Y"
         CALL EDIT.SUB
         IF VALUE # "Y" THEN
            DFD_TYPE = O_DFD_TYPE
            SCV.REC(ECD.NUM)<ESN> = DFD_TYPE
            ECD.ACTION = 5; CALL SCRN.EDIT
            GOTO 1300
         END
         IF DFD_DEFAULT # "" THEN
            DFD_DEFAULT = ""; GOSUB 12200
         END
         IF DFD_VALDAT # "" AND DFD_ORVALDAT < 1 THEN
            DFD_VALDAT = ""; DFD_ORVALDAT = ""
            VLINES = ""; OLD.START.VLINE = 0; GOSUB 5900
         END
         P_X = 0 ; P_Y = 23 ; P_VALUE = "" ; P_OPT = "CL"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      END
      BEGIN CASE
         CASE DFD_TYPE = "C"
            IF DFD_DEC = "" THEN
               DFD_DEC = 2
               GOSUB 11300
            END
         CASE DFD_TYPE # "C" AND DFD_DEC # ""
            DFD_DEC = ""
            GOSUB 11300
      END CASE
      BEGIN CASE
         CASE DFD_TYPE = "D" AND DFD_LEN < 8
            DFD_LEN = 8; MAX_LEN = DFD_LEN; GOSUB 11400
         CASE DFD_TYPE = "L" AND DFD_MINL > 1
            DFD_MINL = 1; GOSUB 11450
      END CASE
      BEGIN CASE
         CASE DFD_FILL = ""
         CASE DFD_TYPE = "D" OR DFD_TYPE = "L" OR DFD_TYPE = "U"
            DFD_FILL = ""; GOSUB 11750
         CASE NOT(NUM(DFD_FILL)) AND (DFD_TYPE = "N" OR DFD_TYPE = "C")
            DFD_FILL = ""; GOSUB 11750
         CASE NOT(ALPHA(DFD_FILL)) AND DFD_TYPE = "A"
            DFD_FILL = ""; GOSUB 11750
      END CASE
      LOCATE O_DFD_TYPE IN TYPE_INI,1 SETTING OLOC THEN
         IF JTYPE_INI<OLOC> = DFD_JUSTIFY THEN
            IF DFD_JUSTIFY # JTYPE_INI<TLOC> THEN
               ECD.RET.VALUE = JTYPE_INI<TLOC>
               GOSUB 11700
               IF JLOC THEN
                  DFD_JUSTIFY = ECD.RET.VALUE
               END
            END
         END
      END
1399  RETURN
*---- Decimal position
1400*
      IF DFD_TYPE # "C" THEN GOTO 1499
      ECD.NUM = 7
      ECD.MINV = 0; ECD.MAXV = 6
      ECD.ACTION = 4; CALL SCRN.EDIT
      IF ECD.RET.VALUE = "END" THEN GOTO 1499
      DFD_DEC = ECD.RET.VALUE
1499  RETURN
*---- Field size
1500*
      ECD.NUM = 9
      IF DFD_DEC > 0 THEN
         ECD.MINV = DFD_DEC + 2
      END ELSE
         ECD.MINV = 1
      END
      ECD.MAXV = 129
      ECD.ACTION = 4; CALL SCRN.EDIT
      IF ECD.RET.VALUE = "END" THEN GOTO 1599
      DFD_LEN = ECD.RET.VALUE
      IF DFD_LEN > 15 THEN
         MAX_LEN = 15
      END ELSE
         MAX_LEN = DFD_LEN
      END
*---- Minimum length
      ECD.NUM = 10
      IF DFD_TYPE = "L" THEN
         DFD_MINL = 1; SCV.REC(ECD.NUM)<ESN> = DFD_MINL
         ECD.ACTION = 5; CALL SCRN.EDIT
         GOTO 1499
      END
      ECD.MINV = 1; ECD.MAXV = DFD_LEN
      ECD.ACTION = 4; CALL SCRN.EDIT
      IF ECD.RET.VALUE = "END" THEN GOTO 1599
      DFD_MINL = ECD.RET.VALUE
1599  RETURN
*---- Minimum value
1600*
      ECD.NUM = 11
      ECD.MAXV = DFD_MAXV; ECD.MAXL = MAX_LEN
      ECD.ACTION = 4; CALL SCRN.EDIT
      BEGIN CASE
         CASE ECD.RET.VALUE = "END"
            GOTO 1799
         CASE ECD.RET.VALUE > DFD_MAXV AND DFD_MAXV = ""
            O_DFD_MINV = DFD_MINV
            DFD_MINV = ECD.RET.VALUE
            GOSUB 1700
            IF ECD.RET.VALUE = "END" THEN
               DFD_MINV = O_DFD_MINV
               GOTO 1600
            END
            ECD.RET.VALUE = DFD_MINV
         CASE ECD.RET.VALUE > DFD_MAXV
            ERRMSG = "Minimum value should not be greater than the Maximum value"
            GOSUB 91000; GOTO 1600
         CASE 1
      END CASE
      DFD_MINV = ECD.RET.VALUE
*1699     RETURN
*---- Maximum value
1700*
      ECD.NUM = 13
      ECD.MAXL = MAX_LEN
      ECD.ACTION = 4; CALL SCRN.EDIT
      BEGIN CASE
         CASE ECD.RET.VALUE = "END"
            GOTO 1799
         CASE ECD.RET.VALUE < DFD_MINV
            ERRMSG = "Maximum value should not be less than the Minimum value"
            GOSUB 91000; GOTO 1700
      END CASE
      DFD_MAXV = ECD.RET.VALUE
1799  RETURN
*---- Justify
1800*
      ECD.NUM = 15
      SCV.REC(ECD.NUM)<ESN> = DFD_JUSTIFY
      ECD.ACTION = 5; CALL SCRN.EDIT
      ECD.MAXL = 1
      ECD.ACTION = 4; CALL SCRN.EDIT
      BEGIN CASE
         CASE ECD.RET.VALUE = "END"
            GOTO 1899
         CASE ECD.RET.VALUE = ""
            MAT GEN.XREF.REC = ""
            GXR.NAME = "AM.SEL"
            GXR.IDLIST = JUSTIFY_DSC
            CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
            ECD.ACTION = 2; CALL SCRN.EDIT
            LOCATE GXR.ID IN JUSTIFY_DSC,1 SETTING FND THEN
               GXR.ID = JUSTIFY_INI<FND>
            END ELSE
               GXR.ID = ""
            END
            SCV.REC(ECD.NUM)<ESN> = GXR.ID
            GOSUB 10000
            IF GXR.ID = "" THEN GOTO 1800
            ECD.RET.VALUE = GXR.ID
      END CASE
      GOSUB 11700
      IF JLOC = 0 THEN
         ERRMSG = "Cannot locate justification # ":ECD.RET.VALUE
         GOSUB 91000; GOTO 1800
      END
      DFD_JUSTIFY = ECD.RET.VALUE
      IF DFD_TYPE = "D" OR DFD_TYPE = "L" OR DFD_TYPE = "U" THEN
         DFD_FILL = ""; ECD.NUM = 16
         SCV.REC(ECD.NUM)<ESN> = DFD_FILL
         ECD.ACTION = 5; CALL SCRN.EDIT
         GOTO 1899
      END
*---- Fill
1850*
      ECD.NUM = 16
      ECD.MAXL = 1
      ECD.ACTION = 4; CALL SCRN.EDIT
      BEGIN CASE
         CASE ECD.RET.VALUE = "END"
            GOTO 1899
         CASE NOT(NUM(ECD.RET.VALUE)) AND (DFD_TYPE = "N" OR DFD_TYPE = "C")
            ERRMSG = "* Numeric input required *"
            GOSUB 91000; GOTO 1850
         CASE NOT(ALPHA(ECD.RET.VALUE)) AND DFD_TYPE = "A"
            ERRMSG = "* Alpha input required *"
            GOSUB 91000; GOTO 1850
      END CASE
      DFD_FILL = ECD.RET.VALUE
1899  RETURN
*---- Invalid characters
1900*
      ECD.NUM = 17
      ECD.ACTION = 4; CALL SCRN.EDIT
      BEGIN CASE
         CASE ECD.RET.VALUE = "END"
            GOTO 1999
         CASE ECD.RET.VALUE # ""
            ICNT = DCOUNT(ECD.RET.VALUE,",")
            FOR I = 1 TO ICNT
               VALUE = FIELD(ECD.RET.VALUE,",",I)
               BEGIN CASE
                  CASE VALUE = ""
                     ERRMSG = "** Invalid NULL character **"
                     GOSUB 91000; ICNT = 0
                  CASE LEN(VALUE) > 1
                     ERRMSG = "** Only ONE character values are valid **"
                     GOSUB 91000; ICNT = 0
               END CASE
            NEXT I
            IF NOT(ICNT) THEN GOTO 1900
      END CASE
      DFD_INVALCHR = ECD.RET.VALUE
1999  RETURN
*---- Picture
2000*
      ECD.NUM = 19
      ECD.ACTION = 4; CALL SCRN.EDIT
      IF ECD.RET.VALUE = "END" THEN GOTO 2099
      VOT = V.OT; VCOT = VC.OT
      VNO = 0; I = 1
      LOOP
         CHR = ECD.RET.VALUE[I,1]
      WHILE CHR # "" DO
         BEGIN CASE
*            CASE NUM(CHR) AND I = 1
*               I = 99; ERRMSG = "Cannot have a number in the first character"
            CASE NUM(CHR) AND VNO
               I = 99; ERRMSG = "Cannot have a number twice"
            CASE NUM(CHR)
               I = I + 1
               LOOP
                  CHR = ECD.RET.VALUE[I,1]
               WHILE CHR # "" AND NUM(CHR) DO
                  I = I + 1
               REPEAT
               IF CHR = "" THEN
                  I = 99; ERRMSG = "Missing a trailer character after the specified number"
               END ELSE
                  I = I + 1; VNO = 1
               END
            CASE 1
               LOCATE CHR IN VOT SETTING K THEN
                  FOR J = K TO 1 STEP -1
                     VOT = DELETE(VOT,J,0,0)
                  NEXT J
                  LOCATE CHR IN VCOT SETTING K THEN
                     VCOT = DELETE(VCOT,K,0,0)
                     FOR J = 1 TO 2
                        LOCATE VCOT<J> IN VOT SETTING K THEN
                           VOT = DELETE(VOT,K,0,0)
                        END
                     NEXT J
                     VCOT = ""
                  END
                  I = I + 1
               END ELSE
                  I = 99; ERRMSG = "Invalid or out of sequence output character (":CHR:")"
               END
         END CASE
      REPEAT
      IF I = 99 THEN GOSUB 91000; GOTO 2000
      DFD_PIC = ECD.RET.VALUE
2099  RETURN
*---- Option/Required
2100*
      ECD.NUM = 21
      SCV.REC(ECD.NUM)<ESN> = DFD_O_R
      ECD.ACTION = 5; CALL SCRN.EDIT
      ECD.MAXL = 1
      ECD.ACTION = 4; CALL SCRN.EDIT
      BEGIN CASE
         CASE ECD.RET.VALUE = "END"
            GOTO 2199
         CASE ECD.RET.VALUE = ""
            MAT GEN.XREF.REC = ""
            GXR.NAME = "AM.SEL"
            GXR.IDLIST = O.R_DSC
            CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
            ECD.ACTION = 2; CALL SCRN.EDIT
            LOCATE GXR.ID IN O.R_DSC,1 SETTING FND THEN
               GXR.ID = O.R_INI<FND>
            END ELSE
               GXR.ID = ""
            END
            SCV.REC(ECD.NUM)<ESN> = GXR.ID
            GOSUB 10000
            IF GXR.ID = "" THEN GOTO 2100
            ECD.RET.VALUE = GXR.ID
      END CASE
      LOCATE ECD.RET.VALUE IN O.R_INI,1 SETTING FND ELSE
         ERRMSG = "Must be (O)ptional or (R)equired"
         GOSUB 91000; GOTO 2100
      END
      DFD_O_R = ECD.RET.VALUE
      ECD.NUM = 21; SCV.REC(ECD.NUM)<ESN> = O.R_DSC<FND>
      ECD.ACTION = 5; CALL SCRN.EDIT
      IF DFD_O_R = "R" AND DFD_DEFAULT # "" THEN
         DFD_DEFAULT = ""
         GOSUB 12200
      END
2199  RETURN
*---- Data Level
2200*
      BEGIN CASE
         CASE DFD_V_ASOC # ""
            ECD.RET.VALUE = "V"
            GOTO 2220
         CASE DFD_M_ASOC # ""
            ECD.RET.VALUE = "M"
            GOTO 2220
      END CASE
2210*
      ECD.NUM = 23
      SCV.REC(ECD.NUM)<ESN> = DFD_LVL
      ECD.ACTION = 5; CALL SCRN.EDIT
      ECD.MAXL = 1
      ECD.ACTION = 4; CALL SCRN.EDIT
      BEGIN CASE
         CASE ECD.RET.VALUE = "END"
            GOTO 2299
         CASE ECD.RET.VALUE = ""
            MAT GEN.XREF.REC = ""
            GXR.NAME = "AM.SEL"
            GXR.IDLIST = LVL_DSC
            CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
            ECD.ACTION = 2; CALL SCRN.EDIT
            LOCATE GXR.ID IN LVL_DSC,1 SETTING FND THEN
               GXR.ID = LVL_INI<FND>
            END ELSE
               GXR.ID = ""
            END
            SCV.REC(ECD.NUM)<ESN> = GXR.ID
            GOSUB 10000
            IF GXR.ID = "" THEN GOTO 2210
            ECD.RET.VALUE = GXR.ID
      END CASE
2220*
      LOCATE ECD.RET.VALUE IN LVL_INI,1 SETTING FND ELSE
         ERRMSG = "Cannot locate data level # ":ECD.RET.VALUE
         GOSUB 91000; GOTO 2210
      END
      DFD_LVL = ECD.RET.VALUE
      ECD.NUM = 23; SCV.REC(ECD.NUM)<ESN> = LVL_DSC<FND>
      ECD.ACTION = 5; CALL SCRN.EDIT
      BEGIN CASE
         CASE DFD_LVL = "V" AND DFD_V_ASOC # ""
            GOTO 2290
         CASE DFD_LVL = "M" AND DFD_M_ASOC # ""
            DFD_V_LNK = ""; DFD_V_ASOC = ""
            GOTO 2290
         CASE DFD_LVL = "S"
            DFD_V_LNK = ""; DFD_V_ASOC = ""
            DFD_M_LNK = ""; DFD_M_ASOC = ""
            GOTO 2290
      END CASE
2250*
      ECD.NUM = 26
      ECD.ACTION = 4; CALL SCRN.EDIT
      BEGIN CASE
         CASE ECD.RET.VALUE = "END"
            GOTO 2210
         CASE ECD.RET.VALUE = ""
            MAT GEN.XREF.REC = ""
            GXR.NAME = "AM.SEL"
            GXR.IDLIST = FLD_REC
            CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
            ECD.ACTION = 2; CALL SCRN.EDIT
            SCV.REC(26)<ESN> = GXR.ID
            GOSUB 10000
            IF GXR.ID = "" THEN GOTO 2250
            ECD.RET.VALUE = GXR.ID
      END CASE
      LOCATE ECD.RET.VALUE IN FLD_REC,1 SETTING FND ELSE
         ERRMSG = "Cannot locate field (":ECD.RET.VALUE:") for this table"
         GOSUB 91000; GOTO 2250
      END
      IF ECD.RET.VALUE # FLD_ID THEN
         MAT O_DFD.REC = MAT DFD.REC
         MATREAD DFD.REC FROM SYS_FIELDS, PFX:"_":ECD.RET.VALUE ELSE
            MAT DFD.REC = MAT O_DFD.REC
            ERRMSG = "Cannot locate the definition for field - ":ECD.RET.VALUE
            GOSUB 91000; GOTO 2250
         END
         BEGIN CASE
            CASE DFD_LVL # "M" AND DFD_LVL # "V"
               MAT DFD.REC = MAT O_DFD.REC
               ERRMSG = "Field (":ECD.RET.VALUE:") must be setup as a Multi/Sub Multi value"
               GOSUB 91000; GOTO 2250
            CASE DFD_M_LNK # ECD.RET.VALUE
               ERRMSG = "Field (":ECD.RET.VALUE:") is a sub link for field - ":DFD_M_LNK
               MAT DFD.REC = MAT O_DFD.REC
               GOSUB 91000; GOTO 2250
         END CASE
         MAT DFD.REC = MAT O_DFD.REC
      END
      DFD_M_LNK = ECD.RET.VALUE
      IF DFD_LVL = "M" THEN
         DFD_V_LNK = ""; DFD_V_ASOC = ""
         GOTO 2295
      END
2270*
      ECD.NUM = 28
      ECD.ACTION = 4; CALL SCRN.EDIT
      BEGIN CASE
         CASE ECD.RET.VALUE = "END"
            GOTO 2250
         CASE ECD.RET.VALUE = ""
            MAT GEN.XREF.REC = ""
            GXR.NAME = "AM.SEL"
            GXR.IDLIST = FLD_REC
            CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
            ECD.ACTION = 2; CALL SCRN.EDIT
            SCV.REC(28)<ESN> = GXR.ID
            GOSUB 10000
            IF GXR.ID = "" THEN GOTO 2250
            ECD.RET.VALUE = GXR.ID
      END CASE
      LOCATE ECD.RET.VALUE IN FLD_REC,1 SETTING FND ELSE
         ERRMSG = "Cannot locate field (":ECD.RET.VALUE:") for this table"
         GOSUB 91000; GOTO 2270
      END
      IF ECD.RET.VALUE # FLD_ID THEN
         O_DFD_M_LNK = DFD_M_LNK
         MAT O_DFD.REC = MAT DFD.REC
         MATREAD DFD.REC FROM SYS_FIELDS, PFX:"_":ECD.RET.VALUE ELSE
            MAT DFD.REC = MAT O_DFD.REC
            ERRMSG = "Cannot locate the definition for field - ":ECD.RET.VALUE
            GOSUB 91000; GOTO 2270
         END
         BEGIN CASE
            CASE DFD_LVL # "V"
               MAT DFD.REC = MAT O_DFD.REC
               ERRMSG = "Field (":ECD.RET.VALUE:") must be setup as a Sub Multi value"
               GOSUB 91000; GOTO 2270
            CASE DFD_M_LNK # O_DFD_M_LNK
               ERRMSG = "Field (":ECD.RET.VALUE:") is a sub link for field - ":DFD_M_LNK
               MAT DFD.REC = MAT O_DFD.REC
               GOSUB 91000; GOTO 2270
            CASE DFD_V_LNK # ECD.RET.VALUE
               ERRMSG = "Field (":ECD.RET.VALUE:") is a sub link for field - ":DFD_V_LNK
               MAT DFD.REC = MAT O_DFD.REC
               GOSUB 91000; GOTO 2270
         END CASE
         MAT DFD.REC = MAT O_DFD.REC
      END
      DFD_V_LNK = ECD.RET.VALUE
      GOTO 2299
2290*
      ECD.NUM = 26; SCV.REC(ECD.NUM)<ESN> = DFD_M_LNK
      ECD.ACTION = 5; CALL SCRN.EDIT
2295*
      ECD.NUM = 28; SCV.REC(ECD.NUM)<ESN> = DFD_V_LNK
      ECD.ACTION = 5; CALL SCRN.EDIT
2299  RETURN
*---- Default value
2300*
      IF DFD_O_R = "R" THEN GOTO 2399
      ECD.NUM = DFLT_ECD.NUM
      IF DFLT_SCN.NUM THEN
         LOCATE DFD_TYPE IN TYPE_INI,1 SETTING FND THEN
            SCV.REC(ECD.NUM)<ESN> = DFD_DEFAULT
            BLD.SCRN(DFLT_SCN.NUM)<1,B.TYP> = OTYP_INI<FND>
            BLD.SCRN(DFLT_SCN.NUM)<1,B.JUSTIFY> = JTYPE_INI<FND>
            IF DFD_TYPE = "C" THEN
               ECD.SCALER = DFD_DEC
            END
            IF LTYPE_INI<FND> > 0 AND LTYPE_INI<FND> < MAX_LEN THEN
               ECD.MAXL = LTYPE_INI<FND>
            END ELSE
               ECD.MAXL = MAX_LEN
            END
         END ELSE
            ECD.MAXL = MAX_LEN
         END
      END ELSE
         ECD.MAXL = MAX_LEN
      END
      ECD.MINV = DFD_MINV; ECD.MAXV = DFD_MAXV
      ECD.ACTION = 4; CALL SCRN.EDIT
      IF ECD.RET.VALUE = "END" THEN GOTO 2399
      DFD_DEFAULT = ECD.RET.VALUE
2399  RETURN
*---- Pattern Match
3000*
      IF PLINES < 1 THEN
         REQ = "A"
         LOOP
            PLN = PLINES + 1
            OLD.LINES = PLINES
            GOSUB 3100
         WHILE PLINES > OLD.LINES DO
            GOSUB 3950
         REPEAT
         PLN = PLINES
         GOSUB 3900; GOSUB 3955
      END
      P_MORE = 1
      LOOP
         ECD.NUM = 53; SCV.REC(ECD.NUM)<ESN> = ""
         ECD.ACTION = 4; CALL SCRN.EDIT
         REQ = ECD.RET.VALUE
         BEGIN CASE
            CASE REQ = "END" OR REQ = "E"
               P_MORE = 0
            CASE REQ = "A"
               LOOP
                  PLN = PLINES + 1
                  OLD.LINES = PLINES
                  GOSUB 3100
               WHILE PLINES > OLD.LINES DO
                  GOSUB 3950
               REPEAT
               PLN = PLINES; GOSUB 3900; GOSUB 3955
            CASE REQ = "C"
               GOSUB 3800
               IF LN.NO THEN
                  PLN = LN.NO
                  SLN = BEGIN.PPAGE + LINE.SPACE * MOD(PLN-1,PPAGE.SIZE)
                  GOSUB 3110
               END
            CASE REQ = "D"
               GOSUB 3800
               IF LN.NO THEN
                  PLN = LN.NO
                  DFD_PATRN = DELETE(DFD_PATRN,1,PLN,0)
                  PLINES = DCOUNT(DFD_PATRN,VM)
                  IF PLN > PLINES THEN PLN = PLN - 1
                  OLD.START.PLINE = 0; GOSUB 3900; GOSUB 3955
               END
            CASE REQ = "S" OR REQ = "SF"
               PLN = 1+INT((PLN-1)/PPAGE.SIZE)*PPAGE.SIZE+PPAGE.SIZE
               IF PLN > PLINES THEN PLN = 1
               GOSUB 3900
            CASE REQ = "SR"
               PLN = 1+INT((PLN-1)/PPAGE.SIZE)*PPAGE.SIZE-PPAGE.SIZE
               IF PLN < 1 THEN PLN = 1
               GOSUB 3900
            CASE REQ = "ST"
               PLN = 1
               GOSUB 3900
            CASE REQ = "SB"
               PLN = PLINES
               GOSUB 3900
            CASE REQ[1,1] = "S" AND NUM(REQ[2,99])
               LN.NO = REQ[2,99] + 0
               IF LN.NO < 1 OR LN.NO > PLINES THEN
                  ERRMSG = "** Invalid selection **"
                  GOSUB 91000
               END ELSE
                  PLN = LN.NO
                  GOSUB 3900
               END
            CASE 1
               ERRMSG = "Invalid entry, please re-enter"
               GOSUB 91000
         END CASE
      WHILE P_MORE DO REPEAT
      RETURN
*---- Scrolling line prompt
3100*
      GOSUB 3900
      SLN = BEGIN.PPAGE + LINE.SPACE * MOD(PLN-1,PPAGE.SIZE)
      P_X = 42 ; P_Y = SLN ; P_VALUE = PLN "R%2" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*---- Pattern
3110*
      X = 45; Y = SLN; TYP = 1; MAXL = 15; O.R = "R"
      IF DFD_PATRN<1,PLN> # "" THEN
         O.R = "O"
         DEFAULT = DFD_PATRN<1,PLN>
      END
      CALL EDIT.SUB
      IF VALUE = "END" THEN
         IF REQ = "A" THEN
            P_X = 42 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
            CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
            DFD_PATRN = DELETE(DFD_PATRN,1,PLN,0)
         END ELSE
            N = PLN; GOSUB 3910
         END
         GOTO 3399
      END
      LOCATE VALUE IN DFD_PATRN<1>,1 SETTING FND THEN
         IF FND <> PLN THEN
            ERRMSG = "Pattern (":VALUE:") is already setup for line # ":FND
            GOSUB 91000; GOTO 3110
         END
      END
      DFD_PATRN<1,PLN> = VALUE
      PLINES = DCOUNT(DFD_PATRN,VM)
3399  RETURN
*---- Line # to change or delete
3800*
      GOSUB 3900
      ECD.NUM = 54; SCV.REC(ECD.NUM)<ESN> = ""
      ECD.MINV = OLD.START.PLINE; ECD.MAXV = LAST.PLINE
      ECD.ACTION = 4; CALL SCRN.EDIT
      LN.NO = ECD.RET.VALUE
      IF LN.NO = "" OR LN.NO = "END" THEN
         LN.NO = 0
      END
      RETURN
*---- Display scrolling lines
3900*
      START.PLINE = 1 + INT((PLN-1)/PPAGE.SIZE)*PPAGE.SIZE
      LAST.PLINE = START.PLINE + PPAGE.SIZE - 1
      IF LAST.PLINE > PLINES THEN LAST.PLINE = PLINES
      IF START.PLINE = OLD.START.PLINE THEN GOTO 3990
      OLD.START.PLINE = START.PLINE
      ECD.NUM = 44
      SCV.REC(ECD.NUM)<ESN> = INT(LAST.PLINE/PPAGE.SIZE+.9) "R%2"
      ECD.ACTION = 5; CALL SCRN.EDIT
      CNT = 1
      FOR N = START.PLINE TO LAST.PLINE
         SLN = BEGIN.PPAGE + LINE.SPACE * MOD(N-1,PPAGE.SIZE)
         GOSUB 3910
         CNT = CNT + 1
      NEXT N
      FOR M = CNT TO PPAGE.SIZE
         SLN = BEGIN.PPAGE + LINE.SPACE * MOD(M-1,PPAGE.SIZE)
         P_X = 42 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      NEXT M
3990  RETURN
3910*
      P_X = 42 ; P_Y = SLN ; P_VALUE = N "R%2" ; P_OPT = "CL"
      P_X := AM:45 ; P_Y := AM:SLN ; P_VALUE := AM:DFD_PATRN<1,N> "L#25"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      RETURN
3950*
      ECD.NUM = 44
      SCV.REC(ECD.NUM)<ESN> = INT(PLN/PPAGE.SIZE+.9) "R%2"
      ECD.ACTION = 5; CALL SCRN.EDIT
3955*
      ECD.NUM = 45
      SCV.REC(ECD.NUM)<ESN> = INT(PLINES/PPAGE.SIZE+.9) "R%2"
      ECD.ACTION = 5; CALL SCRN.EDIT
      RETURN
*---- Valid Values
5000*
      ECD.NUM = 12
      SCV.REC(ECD.NUM)<ESN> = DFD_ORVALDAT
      ECD.ACTION = 5; CALL SCRN.EDIT
      ECD.MAXL = 1; ECD.ACTION = 4; CALL SCRN.EDIT
      IF ECD.RET.VALUE = "END" THEN GOTO 5099
      LOCATE (ECD.RET.VALUE + 0) IN ORVALDAT_INI,1 SETTING VLOC ELSE
         ERRMSG = "Must be 0 (AND) or 1 (OR) !"
         GOSUB 91000; GOTO 5000
      END
      IF ECD.RET.VALUE # DFD_ORVALDAT AND DFD_VALDAT # "" THEN
         PMSG = "The Valid Values will be cleared (Y/N) "
         TYP = 8; X = 0; Y = 23; O.R = "O"; DEFAULT = "Y"
         CALL EDIT.SUB
         IF VALUE # "Y" THEN GOTO 5000
         DFD_VALDAT = ""
         VLINES = ""; OLD.START.VLINE = 0; GOSUB 5900
         P_X = 0 ; P_Y = 23 ; P_VALUE = "" ; P_OPT = "CL"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      END
      DFD_ORVALDAT = ECD.RET.VALUE
      SCV.REC(ECD.NUM)<ESN> = ORVALDAT_DSC<VLOC>
      ECD.ACTION = 5; CALL SCRN.EDIT
      BEGIN CASE
         CASE VDSC = "Y" AND DFD_VALD_DSC # ""
            GOTO 5050
         CASE VDSC = "N" AND DFD_VALDAT # ""
            GOTO 5050
      END CASE
5010*
      ECD.NUM = 14
*--------------------- Temporarly ---------------------*
*     SCV.REC(ECD.NUM)<ESN> = VDSC
*     ECD.ACTION = 5; CALL SCRN.EDIT
*     ECD.MAXL = 1; ECD.ACTION = 4; CALL SCRN.EDIT
      ECD.RET.VALUE = "N"
*------------------------------------------------------*
      IF ECD.RET.VALUE = "END" THEN GOTO 5099
      LOCATE ECD.RET.VALUE IN Y.N_INI,1 SETTING VDLOC ELSE
         ERRMSG = "Must be (Y)es or (N)o !"
         GOSUB 91000; GOTO 5010
      END
      VDSC = ECD.RET.VALUE
      SCV.REC(ECD.NUM)<ESN> = Y.N_DSC<VDLOC>
      ECD.ACTION = 5; CALL SCRN.EDIT
5050*
      IF VLINES < 1 THEN
         REQ = "A"
         LOOP
            VLN = VLINES + 1
            OLD.LINES = VLINES
            GOSUB 5100
         WHILE VLINES > OLD.LINES DO
            GOSUB 5950
         REPEAT
         VLN = VLINES
         GOSUB 5900; GOSUB 5955
      END
      P_MORE = 1
      LOOP
         ECD.NUM = 53; SCV.REC(ECD.NUM)<ESN> = ""
         ECD.ACTION = 4; CALL SCRN.EDIT
         REQ = ECD.RET.VALUE
         BEGIN CASE
            CASE REQ = "END" OR REQ = "E"
               P_MORE = 0
            CASE REQ = "A"
               LOOP
                  VLN = VLINES + 1
                  OLD.LINES = VLINES
                  GOSUB 5100
               WHILE VLINES > OLD.LINES DO
                  GOSUB 5950
               REPEAT
               VLN = VLINES; GOSUB 5900; GOSUB 5955
            CASE REQ = "C"
               GOSUB 5800
               IF LN.NO THEN
                  VLN = LN.NO
                  SLN = BEGIN.VPAGE + LINE.SPACE * MOD(VLN-1,VPAGE.SIZE)
                  GOSUB 5110
               END
            CASE REQ = "D"
               GOSUB 5800
               IF LN.NO THEN
                  VLN = LN.NO
                  DFD_VALDAT = DELETE(DFD_VALDAT,1,VLN,0)
                  DFD_VALD_DSC = DELETE(DFD_VALD_DSC,1,VLN,0)
                  VLINES = DCOUNT(DFD_VALDAT,VM)
                  IF VLN > VLINES THEN VLN = VLN - 1
                  OLD.START.VLINE = 0; GOSUB 5900; GOSUB 5955
               END
            CASE REQ = "S" OR REQ = "SF"
               VLN = 1+INT((VLN-1)/VPAGE.SIZE)*VPAGE.SIZE+VPAGE.SIZE
               IF VLN > VLINES THEN VLN = 1
               GOSUB 5900
            CASE REQ = "SR"
               VLN = 1+INT((VLN-1)/VPAGE.SIZE)*VPAGE.SIZE-VPAGE.SIZE
               IF VLN < 1 THEN VLN = 1
               GOSUB 5900
            CASE REQ = "ST"
               VLN = 1
               GOSUB 5900
            CASE REQ = "SB"
               VLN = VLINES
               GOSUB 5900
            CASE REQ[1,1] = "S" AND NUM(REQ[2,99])
               LN.NO = REQ[2,99] + 0
               IF LN.NO < 1 OR LN.NO > VLINES THEN
                  ERRMSG = "** Invalid selection **"
                  GOSUB 91000
               END ELSE
                  VLN = LN.NO
                  GOSUB 5900
               END
            CASE 1
               ERRMSG = "Invalid entry, please re-enter"
               GOSUB 91000
         END CASE
      WHILE P_MORE DO REPEAT
5099  RETURN
*---- Scrolling line prompt
5100*
      GOSUB 5900
      SLN = BEGIN.VPAGE + LINE.SPACE * MOD(VLN-1,VPAGE.SIZE)
      P_X = 42 ; P_Y = SLN ; P_VALUE = VLN "R%2" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*---- Valid values
5110*
      Y = SLN; O.R = "R"; FMT_FLD = ""
      BEGIN CASE
         CASE VDSC = "Y"
            TYP = 1; X = 45; MAXL = 3
         CASE DFD_ORVALDAT < 1
            X = 49; MAXL = 30
            LOCATE DFD_TYPE IN TYPE_INI,1 SETTING FND THEN
               TYP = OTYP_INI<FND>; JUSTIFY = JTYPE_INI<FND>
               BEGIN CASE
                  CASE DFD_TYPE = "C"
                     SCALER = DFD_DEC
                     FMT_FLD = "MD":SCALER
                  CASE DFD_TYPE = "D"
                     FMT_FLD = "D2/"
               END CASE
               IF LTYPE_INI<FND> > 0 AND LTYPE_INI<FND> < MAXL THEN
                  MAXL = LTYPE_INI<FND>
               END
            END ELSE
               TYP = 1
            END
         CASE 1
            TYP = 1; X = 49; MAXL = 30
      END CASE
      IF MAXL > DFD_LEN THEN MAXL = DFD_LEN
      IF DFD_VALDAT<1,VLN> # "" THEN
         O.R = "O"
         IF FMT_FLD = "" THEN
            DEFAULT = DFD_VALDAT<1,VLN>
         END ELSE
            DEFAULT = OCONV(DFD_VALDAT<1,VLN>,FMT_FLD)
         END
      END
      CALL EDIT.SUB
      IF VALUE = "END" THEN
         IF REQ = "A" THEN
            P_X = 42 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
            CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
            DFD_VALDAT = DELETE(DFD_VALDAT,1,VLN,0)
            DFD_VALD_DSC = DELETE(DFD_VALD_DSC,1,VLN,0)
         END ELSE
            N = VLN; GOSUB 5910
         END
         GOTO 5399
      END
      LOCATE VALUE IN DFD_VALDAT<1>,1 SETTING FND THEN
         IF FND <> VLN THEN
            ERRMSG = "Validate value (":VALUE:") is already setup for line # ":FND
            GOSUB 91000; GOTO 5110
         END
      END
      DFD_VALDAT<1,VLN> = VALUE
      IF VDSC = "Y" THEN
         X = 49; MAXL = 30; O.R = "R"
         TYP = 1; Y = SLN
         IF DFD_VALD_DSC<1,VLN> # "" THEN
            O.R = "O"
            DEFAULT = DFD_VALD_DSC<1,VLN>
         END
         CALL EDIT.SUB
         IF VALUE = "END" THEN GOTO 5110
         DFD_VALD_DSC<1,VLN> = VALUE
      END
      VLINES = DCOUNT(DFD_VALDAT,VM)
5399  RETURN
*---- Line # to change or delete
5800*
      GOSUB 5900
      ECD.NUM = 54; SCV.REC(ECD.NUM)<ESN> = ""
      ECD.MINV = OLD.START.VLINE; ECD.MAXV = LAST.VLINE
      ECD.ACTION = 4; CALL SCRN.EDIT
      LN.NO = ECD.RET.VALUE
      IF LN.NO = "" OR LN.NO = "END" THEN
         LN.NO = 0
      END
      RETURN
*---- Display scrolling lines
5900*
      START.VLINE = 1 + INT((VLN-1)/VPAGE.SIZE)*VPAGE.SIZE
      LAST.VLINE = START.VLINE + VPAGE.SIZE - 1
      IF LAST.VLINE > VLINES THEN LAST.VLINE = VLINES
      IF START.VLINE = OLD.START.VLINE THEN GOTO 5990
      OLD.START.VLINE = START.VLINE
      ECD.NUM = 46
      SCV.REC(ECD.NUM)<ESN> = INT(LAST.VLINE/VPAGE.SIZE+.9) "R%2"
      ECD.ACTION = 5; CALL SCRN.EDIT
      CNT = 1
      FOR N = START.VLINE TO LAST.VLINE
         SLN = BEGIN.VPAGE + LINE.SPACE * MOD(N-1,VPAGE.SIZE)
         GOSUB 5910
         CNT = CNT + 1
      NEXT N
      FOR M = CNT TO VPAGE.SIZE
         SLN = BEGIN.VPAGE + LINE.SPACE * MOD(M-1,VPAGE.SIZE)
         P_X = 42 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      NEXT M
5990  RETURN
5910*
      P_X = 42 ; P_Y = SLN ; P_VALUE = N "R%2" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      BEGIN CASE
         CASE DFD_VALD_DSC<1,1> # ""
            P_X = 45 ; P_Y = SLN ; P_VALUE = DFD_VALDAT<1,N> "L#3" ; P_OPT = ""
            P_X := AM:49 ; P_Y := AM:SLN ; P_VALUE := AM:DFD_VALD_DSC<1,N> "L#30"
            CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         CASE DFD_ORVALDAT > 0
            P_X = 49 ; P_Y = SLN ; P_VALUE = DFD_VALDAT<1,N> "L#30" ; P_OPT = ""
            CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         CASE DFD_TYPE = "D"
            P_X = 49 ; P_Y = SLN ; P_VALUE = OCONV(DFD_VALDAT<1,N>,"D2/") "L#30" ; P_OPT = ""
            CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         CASE DFD_TYPE = "C"
            P_X = 49 ; P_Y = SLN ; P_VALUE = OCONV(DFD_VALDAT<1,N>,"MD":DFD_DEC) "L#30" ; P_OPT = ""
            CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         CASE 1
            P_X = 49 ; P_Y = SLN ; P_VALUE = DFD_VALDAT<1,N> "L#30" ; P_OPT = ""
            CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      END CASE
      RETURN
5950*
      ECD.NUM = 46
      SCV.REC(ECD.NUM)<ESN> = INT(VLN/VPAGE.SIZE+.9) "R%2"
      ECD.ACTION = 5; CALL SCRN.EDIT
5955*
      ECD.NUM = 47
      SCV.REC(ECD.NUM)<ESN> = INT(VLINES/VPAGE.SIZE+.9) "R%2"
      ECD.ACTION = 5; CALL SCRN.EDIT
      RETURN
*---- Remote Fields
6000*
      IF RLINES < 1 THEN
         REQ = "A"
         LOOP
            RLN = RLINES + 1
            OLD.LINES = RLINES
            GOSUB 6100
         WHILE RLINES > OLD.LINES DO
            GOSUB 6950
         REPEAT
         RLN = RLINES
         GOSUB 6900; GOSUB 6955
      END
      R_MORE = 1
      LOOP
         ECD.NUM = 53; SCV.REC(ECD.NUM)<ESN> = ""
         ECD.ACTION = 4; CALL SCRN.EDIT
         REQ = ECD.RET.VALUE
         BEGIN CASE
            CASE REQ = "END" OR REQ = "E"
               R_MORE = 0
            CASE REQ = "A"
               LOOP
                  RLN = RLINES + 1
                  OLD.LINES = RLINES
                  GOSUB 6100
               WHILE RLINES > OLD.LINES DO
                  GOSUB 6950
               REPEAT
               RLN = RLINES; GOSUB 6900; GOSUB 6955
            CASE REQ = "C"
               GOSUB 6800
               IF LN.NO THEN
                  RLN = LN.NO
                  SLN = BEGIN.RPAGE + LINE.SPACE * MOD(RLN-1,RPAGE.SIZE)
                  GOSUB 6110
               END
            CASE REQ = "D"
               GOSUB 6800
               IF LN.NO THEN
                  RLN = LN.NO
                  DFD_LNK_FLD = DELETE(DFD_LNK_FLD,1,RLN,0)
                  DFD_LNK_NAM = DELETE(DFD_LNK_NAM,1,RLN,0)
                  RLINES = DCOUNT(DFD_LNK_FLD,VM)
                  IF RLN > RLINES THEN RLN = RLN - 1
                  OLD.START.RLINE = 0; GOSUB 6900; GOSUB 6955
               END
            CASE REQ = "S" OR REQ = "SF"
               RLN = 1+INT((RLN-1)/RPAGE.SIZE)*RPAGE.SIZE+RPAGE.SIZE
               IF RLN > RLINES THEN RLN = 1
               GOSUB 6900
            CASE REQ = "SR"
               RLN = 1+INT((RLN-1)/RPAGE.SIZE)*RPAGE.SIZE-RPAGE.SIZE
               IF RLN < 1 THEN RLN = 1
               GOSUB 6900
            CASE REQ = "ST"
               RLN = 1
               GOSUB 6900
            CASE REQ = "SB"
               RLN = RLINES
               GOSUB 6900
            CASE REQ[1,1] = "S" AND NUM(REQ[2,99])
               LN.NO = REQ[2,99] + 0
               IF LN.NO < 1 OR LN.NO > RLINES THEN
                  ERRMSG = "** Invalid selection **"
                  GOSUB 91000
               END ELSE
                  RLN = LN.NO
                  GOSUB 6900
               END
            CASE 1
               ERRMSG = "Invalid entry, please re-enter"
               GOSUB 91000
         END CASE
      WHILE R_MORE DO REPEAT
      RETURN
*---- Scrolling line prompt
6100*
      GOSUB 6900
      SLN = BEGIN.RPAGE + LINE.SPACE * MOD(RLN-1,RPAGE.SIZE)
      P_X = 26 ; P_Y = SLN ; P_VALUE = RLN "R%2" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      TEMP.LNK.FLD = DFD_LNK_FLD<1,RLN>
      TEMP.LNK.NAM = DFD_LNK_NAM<1,RLN>
*---- Remote Field
6110*
      X = 29; Y = SLN; TYP = 1; MAXL = 25; O.R = "R"
*      IF DFD_LNK_FLD<1,RLN> # "" THEN
      IF TEMP.LNK.FLD # "" THEN
         O.R = "O"
*         DEFAULT = DFD_LNK_FLD<1,RLN>
         DEFAULT = TEMP.LNK.FLD
      END
      CALL EDIT.SUB
      IF VALUE = "END" THEN
         IF REQ = "A" THEN
            P_X = 26 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
            CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
            DFD_LNK_FLD = DELETE(DFD_LNK_FLD,1,RLN,0)
            DFD_LNK_NAM = DELETE(DFD_LNK_NAM,1,RLN,0)
         END ELSE
            N = RLN; GOSUB 6910
         END
         GOTO 6399
      END
*      LOCATE VALUE IN DFD_LNK_FLD<1>,1 SETTING FND THEN
*         IF FND <> RLN THEN
*            ERRMSG = "Pattern (":VALUE:") is already setup for line # ":FND
*            GOSUB 91000; GOTO 6110
*         END
*      END
      IF VALUE = "???" OR VALUE = "" THEN
         SAVE.SLN = SLN
         MAT GEN.XREF.REC = ""
         GXR.NAME = "SYS_FIELDS"
         GXR.FILE = SYS_FIELDS
         GXR.VALUE1 = DFD_LNK
         CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
         ECD.ACTION = 2; CALL SCRN.EDIT
*            GOSUB 10000
         ECD.ACTION = 3; CALL SCRN.EDIT
         OLD.START.PLINE = 0; GOSUB 3900
         OLD.START.RLINE = 0; GOSUB 6900
         OLD.START.VLINE = 0; GOSUB 5900
         OLD.START.LINE = 0; GOSUB 7900
         SLN = SAVE.SLN
         IF GXR.ID = "" THEN GOTO 6110
         IF GXR.ID = DFD_LNK THEN
            ERRMSG = 'CANNOT LINK FIELD TO ITSELF'
            GOSUB 91000
            GOTO 6110
         END
         P_X = 26 ; P_Y = SLN ; P_VALUE = RLN "R%2" ; P_OPT = "CL"
         P_X := AM:29 ; P_Y := AM:SLN ; P_VALUE := AM:GXR.ID "L#25"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         VALUE = GXR.ID
      END ELSE
         READ DUMMY FROM SYS_FIELDS, VALUE ELSE
            ERRMSG = 'NOT A VALID SYS_FIELDS ITEM'
            GOSUB 91000
            GOTO 6110
         END
      END
      TEMP.LNK.FLD = VALUE
*---- Remote Field New Name
6120 *
      X = 55; Y = SLN; TYP = 1; MAXL = 25; O.R = "O"
*      IF DFD_LNK_NAM<1,RLN> # "" THEN
      IF TEMP.LNK.NAM # "" THEN
         O.R = "O"
*         DEFAULT = DFD_LNK_NAM<1,RLN>
         DEFAULT = TEMP.LNK.NAM
      END
      CALL EDIT.SUB
      IF VALUE = "END" THEN
         IF REQ = "A" THEN
            P_X = 26 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
            CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
            DFD_LNK_FLD = DELETE(DFD_LNK_FLD,1,RLN,0)
            DFD_LNK_NAM = DELETE(DFD_LNK_NAM,1,RLN,0)
         END ELSE
            N = RLN; GOSUB 6910
         END
         GOTO 6399
      END
      IF VALUE # "" THEN
         LOCATE VALUE IN DFD_LNK_NAM<1>,1 SETTING FND THEN
            IF FND <> RLN THEN
               ERRMSG = "New Name (":VALUE:") is already setup for line # ":FND
               GOSUB 91000; GOTO 6120
            END
         END
      END
      DFD_LNK_FLD<1,RLN> = TEMP.LNK.FLD
      DFD_LNK_NAM<1,RLN> = VALUE
      RLINES = DCOUNT(DFD_LNK_FLD,VM)
6399  RETURN
*---- Line # to change or delete
6800*
      GOSUB 6900
      ECD.NUM = 54; SCV.REC(ECD.NUM)<ESN> = ""
      ECD.MINV = OLD.START.RLINE; ECD.MAXV = LAST.RLINE
      ECD.ACTION = 4; CALL SCRN.EDIT
      LN.NO = ECD.RET.VALUE
      IF LN.NO = "" OR LN.NO = "END" THEN
         LN.NO = 0
      END
      RETURN
*---- Display scrolling lines
6900*
      START.RLINE = 1 + INT((RLN-1)/RPAGE.SIZE)*RPAGE.SIZE
      LAST.RLINE = START.RLINE + RPAGE.SIZE - 1
      IF LAST.RLINE > RLINES THEN LAST.RLINE = RLINES
      IF START.RLINE = OLD.START.RLINE THEN GOTO 6990
      OLD.START.RLINE = START.RLINE
      ECD.NUM = 57
      SCV.REC(ECD.NUM)<ESN> = INT(LAST.RLINE/RPAGE.SIZE+.9) "R%2"
      ECD.ACTION = 5; CALL SCRN.EDIT
      CNT = 1
      FOR N = START.RLINE TO LAST.RLINE
         SLN = BEGIN.RPAGE + LINE.SPACE * MOD(N-1,RPAGE.SIZE)
         GOSUB 6910
         CNT = CNT + 1
      NEXT N
      FOR M = CNT TO RPAGE.SIZE
         SLN = BEGIN.RPAGE + LINE.SPACE * MOD(M-1,RPAGE.SIZE)
         P_X = 26 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      NEXT M
6990  RETURN
6910*
      P_X = 26 ; P_Y = SLN ; P_VALUE = N "R%2" ; P_OPT = "CL"
      P_X = 29 ; P_Y = SLN ; P_VALUE = DFD_LNK_FLD<1,N> "L#25"
      P_X = 55 ; P_Y = SLN ; P_VALUE = DFD_LNK_NAM<1,N> "L#25"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      RETURN
6950*
      ECD.NUM = 57
      SCV.REC(ECD.NUM)<ESN> = INT(RLN/RPAGE.SIZE+.9) "R%2"
      ECD.ACTION = 5; CALL SCRN.EDIT
6955*
      ECD.NUM = 58
      SCV.REC(ECD.NUM)<ESN> = INT(RLINES/RPAGE.SIZE+.9) "R%2"
      ECD.ACTION = 5; CALL SCRN.EDIT
      RETURN
*---- Help Message
7000*
      IF LINES < 1 THEN
         REQ = "A"
         LOOP
            LN = LINES + 1
            OLD.LINES = LINES
            GOSUB 7100
         WHILE LINES > OLD.LINES DO
            GOSUB 7950
         REPEAT
         LN = LINES
         GOSUB 7900; GOSUB 7955
      END
      P_MORE = 1
      LOOP
         ECD.NUM = 53; SCV.REC(ECD.NUM)<ESN> = ""
         ECD.ACTION = 4; CALL SCRN.EDIT
         REQ = ECD.RET.VALUE
         BEGIN CASE
            CASE REQ = "END" OR REQ = "E"
               P_MORE = 0
            CASE REQ = "A"
               LOOP
                  LN = LINES + 1
                  OLD.LINES = LINES
                  GOSUB 7100
               WHILE LINES > OLD.LINES DO
                  GOSUB 7950
               REPEAT
               LN = LINES; GOSUB 7900; GOSUB 7955
            CASE REQ = "C"
               GOSUB 7800
               IF LN.NO THEN
                  LN = LN.NO
                  SLN = BEGIN.PAGE + LINE.SPACE * MOD(LN-1,PAGE.SIZE)
                  GOSUB 7110
               END
            CASE REQ = "D"
               GOSUB 7800
               IF LN.NO THEN
                  LN = LN.NO
                  HMSG_REC = DELETE(HMSG_REC,LN,0,0)
                  LINES = DCOUNT(HMSG_REC,AM)
                  IF LN > LINES THEN LN = LN - 1
                  OLD.START.LINE = 0; GOSUB 7900; GOSUB 7955
               END
            CASE REQ = "S" OR REQ = "SF"
               LN = 1+INT((LN-1)/PAGE.SIZE)*PAGE.SIZE+PAGE.SIZE
               IF LN > LINES THEN LN = 1
               GOSUB 7900
            CASE REQ = "SR"
               LN = 1+INT((LN-1)/PAGE.SIZE)*PAGE.SIZE-PAGE.SIZE
               IF LN < 1 THEN LN = 1
               GOSUB 7900
            CASE REQ = "ST"
               LN = 1
               GOSUB 7900
            CASE REQ = "SB"
               LN = LINES
               GOSUB 7900
            CASE REQ[1,1] = "S" AND NUM(REQ[2,99])
               LN.NO = REQ[2,99] + 0
               IF LN.NO < 1 OR LN.NO > LINES THEN
                  ERRMSG = "** Invalid selection **"
                  GOSUB 91000
               END ELSE
                  LN = LN.NO
                  GOSUB 7900
               END
            CASE 1
               ERRMSG = "Invalid entry, please re-enter"
               GOSUB 91000
         END CASE
      WHILE P_MORE DO REPEAT
      RETURN
*---- Scrolling line prompt
7100*
      GOSUB 7900
      SLN = BEGIN.PAGE + LINE.SPACE * MOD(LN-1,PAGE.SIZE)
      P_X = 1 ; P_Y = SLN ; P_VALUE = LN "R%2" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*---- Help Message
7110*
      X = 4; Y = SLN; TYP = 1; MAXL = 65; O.R = "R"
      IF HMSG_REC<LN> # "" THEN
         O.R = "O"
         DEFAULT = HMSG_REC<LN>
      END
      CALL EDIT.SUB
      IF VALUE = "END" THEN
         IF REQ = "A" THEN
            P_X = 1 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
            CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
            HMSG_REC = DELETE(HMSG_REC,LN,0,0)
         END ELSE
            N = LN; GOSUB 7910
         END
         GOTO 7399
      END
      HMSG_REC<LN> = VALUE
      LINES = DCOUNT(HMSG_REC,AM)
7399  RETURN
*---- Line # to change or delete
7800*
      GOSUB 7900
      ECD.NUM = 54; SCV.REC(ECD.NUM)<ESN> = ""
      ECD.MINV = OLD.START.LINE; ECD.MAXV = LAST.LINE
      ECD.ACTION = 4; CALL SCRN.EDIT
      LN.NO = ECD.RET.VALUE
      IF LN.NO = "" OR LN.NO = "END" THEN
         LN.NO = 0
      END
      RETURN
*---- Display scrolling lines
7900*
      START.LINE = 1 + INT((LN-1)/PAGE.SIZE)*PAGE.SIZE
      LAST.LINE = START.LINE + PAGE.SIZE - 1
      IF LAST.LINE > LINES THEN LAST.LINE = LINES
      IF START.LINE = OLD.START.LINE THEN GOTO 7090
      OLD.START.LINE = START.LINE
      ECD.NUM = 48
      SCV.REC(ECD.NUM)<ESN> = INT(LAST.LINE/PAGE.SIZE+.9) "R%2"
      ECD.ACTION = 5; CALL SCRN.EDIT
      CNT = 1
      FOR N = START.LINE TO LAST.LINE
         SLN = BEGIN.PAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
         GOSUB 7910
         CNT = CNT + 1
      NEXT N
      FOR M = CNT TO PAGE.SIZE
         SLN = BEGIN.PAGE + LINE.SPACE * MOD(M-1,PAGE.SIZE)
         P_X = 0 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      NEXT M
7090  RETURN
7910*
      P_X = 1 ; P_Y = SLN ; P_VALUE = N "R%2" ; P_OPT = "CL"
      P_X := AM:4 ; P_Y := AM:SLN ; P_VALUE := AM:HMSG_REC<N> "L#65"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      RETURN
7950*
      ECD.NUM = 48
      SCV.REC(ECD.NUM)<ESN> = INT(LN/PAGE.SIZE+.9) "R%2"
      ECD.ACTION = 5; CALL SCRN.EDIT
7955*
      ECD.NUM = 49
      SCV.REC(ECD.NUM)<ESN> = INT(LINES/PAGE.SIZE+.9) "R%2"
      ECD.ACTION = 5; CALL SCRN.EDIT
      RETURN
*---- Field structure validation
8000*
      ERRMSG = ""
      BEGIN CASE
         CASE DFD_TYPE = "C" AND DFD_DEC = ""
            ERRMSG = "No specified decimal number !!"
            GOTO 8099
         CASE DFD_TYPE = "C" AND DFD_DEC > 0
            LENLMT = DFD_DEC + 2
            IF LENLMT > DFD_LEN THEN
               ERRMSG = "Size should be at least ":LENLMT:" characters long !!"
               GOTO 8099
            END
         CASE DFD_MINL > DFD_LEN
            ERRMSG = "Minimum length is greater than Size !!"
            GOTO 8099
         CASE DFD_ATTNO # "" AND DFD_ATTNO # ATTNO AND (DFD_ATTNO = 0 AND ATTNO # "I")
            ERRMSG = "Data Field location mismatch, possible data corruption !"
            GOTO 8099
         CASE DFD_TABLE # "" AND DFD_TABLE # TABLE_ID
            ERRMSG = "Table name mismatch, possible data corruption !"
            GOTO 8099
      END CASE
      BEGIN CASE
         CASE DFD_LVL = "V"
            O_DFD_M_LNK = DFD_M_LNK; O_DFD_V_LNK = DFD_V_LNK
            MAT O_DFD.REC = MAT DFD.REC
            IF DFD_M_LNK = FLD_ID THEN GOTO 8055
            MATREAD DFD.REC FROM SYS_FIELDS, PFX:"_":DFD_M_LNK ELSE
               ERRMSG = "Cannot locate the definition for field - ":DFD_M_LNK
               GOTO 8059
            END
            BEGIN CASE
               CASE DFD_LVL # "M" AND DFD_LVL # "V"
                  ERRMSG = "Field (":DFD_M_LNK:") must be setup as a Multi/Sub Multi value"
                  GOTO 8059
               CASE DFD_M_LNK # O_DFD_M_LNK
                  ERRMSG = "Field (":O_DFD_M_LNK:") is a sub link for field - ":DFD_M_LNK
                  GOTO 8059
            END CASE
8055*
            BEGIN CASE
               CASE O_DFD_V_LNK = FLD_ID
                  GOTO 8059
               CASE O_DFD_V_LNK # O_DFD_M_LNK
                  MATREAD DFD.REC FROM SYS_FIELDS, PFX:"_":O_DFD_V_LNK ELSE
                     ERRMSG = "Cannot locate the definition for field - ":O_DFD_V_LNK
                     GOTO 8059
                  END
            END CASE
            BEGIN CASE
               CASE DFD_LVL # "V"
                  ERRMSG = "Field (":O_DFD_V_LNK:") must be setup as a Sub Multi value"
                  GOTO 8059
               CASE DFD_M_LNK # O_DFD_M_LNK
                  ERRMSG = "Field (":O_DFD_M_LNK:") is a sub link for field - ":DFD_M_LNK
                  GOTO 8059
               CASE DFD_V_LNK # O_DFD_V_LNK
                  ERRMSG = "Field (":O_DFD_V_LNK:") is a sub link for field - ":DFD_V_LNK
                  GOTO 8059
            END CASE
8059*
            MAT DFD.REC = MAT O_DFD.REC
         CASE DFD_LVL = "M"
            O_DFD_M_LNK = DFD_M_LNK
            MAT O_DFD.REC = MAT DFD.REC
            IF DFD_M_LNK = FLD_ID THEN GOTO 8079
            MATREAD DFD.REC FROM SYS_FIELDS, PFX:"_":DFD_M_LNK ELSE
               ERRMSG = "Cannot locate the definition for field - ":DFD_M_LNK
               GOTO 8079
            END
            BEGIN CASE
               CASE DFD_LVL # "M" AND DFD_LVL # "V"
                  ERRMSG = "Field (":DFD_M_LNK:") must be setup as a Multi/Sub Multi value"
                  GOTO 8079
               CASE DFD_M_LNK # O_DFD_M_LNK
                  ERRMSG = "Field (":O_DFD_M_LNK:") is a sub link for field - ":DFD_M_LNK
                  GOTO 8079
            END CASE
8079*
            MAT DFD.REC = MAT O_DFD.REC
      END CASE
8099  RETURN
*---- Display all data fields
10000*
      ECD.ACTION = 3; CALL SCRN.EDIT
      OLD.START.PLINE = 0; GOSUB 3900
      OLD.START.RLINE = 0; GOSUB 6900
      OLD.START.VLINE = 0; GOSUB 5900
      OLD.START.LINE = 0; GOSUB 7900
      RETURN
*---- Re Display data fields
11300*
      ECD.NUM = 7; SCV.REC(ECD.NUM)<ESN> = DFD_DEC
      ECD.ACTION = 5; CALL SCRN.EDIT
      RETURN
11400*
      ECD.NUM = 9; SCV.REC(ECD.NUM)<ESN> = DFD_LEN
      ECD.ACTION = 5; CALL SCRN.EDIT
      RETURN
11450*
      ECD.NUM = 10; SCV.REC(ECD.NUM)<ESN> = DFD_MINL
      ECD.ACTION = 5; CALL SCRN.EDIT
      RETURN
11700*
      LOCATE ECD.RET.VALUE IN JUSTIFY_INI,1 SETTING JLOC THEN
         ECD.NUM = 15; SCV.REC(ECD.NUM)<ESN> = JUSTIFY_DSC<JLOC>
         ECD.ACTION = 5; CALL SCRN.EDIT
      END ELSE
         JLOC = 0
      END
      RETURN
11750*
      ECD.NUM = 16; SCV.REC(ECD.NUM)<ESN> = DFD_FILL
      ECD.ACTION = 5; CALL SCRN.EDIT
      RETURN
12200*
      ECD.NUM = DFLT_ECD.NUM; SCV.REC(ECD.NUM)<ESN> = DFD_DEFAULT
      ECD.ACTION = 5; CALL SCRN.EDIT
      RETURN
*---- Error routines
91000*
      ERR.TYPE = 1
      CALL SYSCOM(MAT SYSCOM.REC)
      RETURN
93000*
      ERR.TYPE = 3
      CALL SYSCOM(MAT SYSCOM.REC)
*
99999*
ECD.ACTION = 99 ; CALL SCRN.EDIT
      RETURN
   END
