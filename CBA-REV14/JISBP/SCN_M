      SUBROUTINE SCREEN_MAINT(PASS_VARS,ID_VARS,M_REC,USER.MAIL,OPN_FILES)
*COPY>CPYLIB>COM1
*********************************************************************
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* Revision      - [10.0]
* Revision Date - 04/28/94
* System        - PRIMAC
* Library       - JISBP/DATA_SCN_M
* Author        - Ziad Yamout, VERCOM Software, Inc.
*********************************************************************
*
*---- Data Structure Libraries
*
* *COPY>PMC.CPYLIB>MENUS.CONTROL
*COPY>PMC.CPYLIB>COMPANY
*COPY>JIS.CPYLIB>SYS_SCN_DEF
*COPY>JIS.CPYLIB>SYS_FILES
*COPY>JIS.CPYLIB>SYS_FIELDS
*COPY>CPYLIB>PORT.CONTROL
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>GEN.XREF.SUB
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
MAT SYSCOM.REC =  ""; SYS.TYPE = 2
*
DIM DREC(200)
DIM TBL_REC(30)
DIM TBL_ID(30)
DIM TBL_ID_TYPE(30)
DIM TBL_KEY(30)
DIM TBL_ID_FNO(30)
*
*---- Get Parameters & Initialize variables
*
      THIS_FUNC = PASS_VARS<1>
      SCN_LOC = PASS_VARS<2>
      SCN_NAMES = PASS_VARS<3>
      EDITMODE = PASS_VARS<4>
      CHGMODE = PASS_VARS<5>
      PRT_CRT = PASS_VARS<6>
      ERRFLG = PASS_VARS<6>
*
      PORT.NO = "TTY"; CALL SYSVARS.SUB(PORT.NO)
      MATREAD USER.REC FROM SECURITY, "R.":PORT.NO ELSE
         ERRMSG = "Cannot locate the logged on user ID !"
         GOTO 93000
      END
*
*---- Get company
*
      CONO = ""; MAT COMP.REC = ""
      CALL GET.CONO(CONO,MAT COMP.REC)
      IF CONO = "END" THEN GOTO 99999
*
CAL_FLDS = "CO"
EDIT_FILES = "JOB_TKT"
CAL_FLDS<2> = "@DATE"
CAL_FLDS<3> = "@TIME"
*
      MAT DREC = ""
      SCN_FLDS = ""
      FLD_FPTR = ""; FLD_TPTR = ""; FLD_IPTR = ""
      FLD_X = ""; FLD_Y = ""
      FLD_CNV = ""; FLD_FMT = ""
      FLD_LOC = ""; FLD_REF = ""
      FLD_MVNO = ""; FLD_SMVNO = ""
      MVNO_REF = ""; SMVNO_REF = ""
      MVNO_RCNT = 0; SMVNO_RCNT = 0
      FLD_LINES = ""; FLD_LNSPC = ""
      FLD_LNO = ""; FLD_OLNO = ""
      FLD_LNK = ""; FLD_LPTR = ""; FLD_LCNT = ""
      FLD_LCHR = ""; FLD_HIDE = ""
      FLD_DSTLST = ""
*
*
      TBL_IDX = ""; TBL_LOC = ""; TBL_FLD_LOC = ""
*
      MIN_ROW = 0; MAX_ROW = 23
      MIN_Y = MIN_ROW + 1; MAX_Y = MAX_ROW + 1
      MIN_COL = 0; MAX_COL = 79
      MIN_X = MIN_COL + 1; MAX_X = MAX_COL + 1
      MAX_SPC = SPACE(MAX_X)
*
      TYPE_INI = "T"; TYPE_DSC = "Text"; OTYP_INI = 1
      TYPE_INI<2> = "N"; TYPE_DSC<2> = "Numeric"; OTYP_INI<2> = 3
      TYPE_INI<3> = "C"; TYPE_DSC<3> = "deCimal"; OTYP_INI<3> = 4
      TYPE_INI<4> = "A"; TYPE_DSC<4> = "Alpha"; OTYP_INI<4> = 2
      TYPE_INI<5> = "D"; TYPE_DSC<5> = "Date"; OTYP_INI<5> = 6
      TYPE_INI<6> = "L"; TYPE_DSC<6> = "Logical"; OTYP_INI<6> = 8
      TYPE_INI<7> = "P"; TYPE_DSC<7> = "Pattern"; OTYP_INI<7> = 7
      TYPE_INI<8> = "U"; TYPE_DSC<8> = "coUnter"; OTYP_INI<8> = 3
*
*---- Begin Processing
*
      SCN_NAME = FIELD(SCN_NAMES,",",SCN_LOC)
      IF SCN_NAME = "" THEN
         ERRMSG = "No specified Screen function to EXECUTE"
         GOTO 93000
      END
*
*---- Get Screen Definitions
*
      MATREAD SSD.REC FROM SYS_SCN_DEF, SCN_NAME ELSE
         ERRMSG = "Cannot access Screen (":SCN_NAME:")"
         GOTO 93000
      END
*
*---- Open Screen file
*
      IF SCN_LOC = 1 THEN
         OPEN "",SSD_SRC_FILE TO M.SCREENS ELSE
            ERRMSG = "Cannot access Screen file (":SSD_SRC_FILE:")"
            GOTO 93000
         END
      END
      READ SCN_FLD_DEF FROM M.SCREENS, SCN_NAME:"_FLD" ELSE
*        ERRMSG = "Cannot access Screen Fields Definition (":SCN_NAME:")"
*        GOTO 93000
         SCN_FLD_DEF = ""
      END
      IF PRT_CRT THEN
         CALL SCN_CRT_BLD(SCN_NAME,SCN_HDR_CRT,SCN_CLR_CRT,ERRMSG)
      END ELSE
         CALL SCN_PRT_BLD(SCN_NAME,SCN_HDR_PRT,ERRMSG)
      END
      IF ERRMSG # "" THEN GOTO 93000
*
*---- Open Data files
*
      MATREAD SFR.REC FROM SYS_FILES, SSD_M_TABLE ELSE
         ERRMSG = "Cannot locate table (":SSD_M_TABLE:") definition"
         GOTO 93000
      END
      FID_CNT = DCOUNT(SFR.ID,VM)
      IF FID_CNT < 1 THEN
         ERRMSG = "Cannot determine the KEY fields for table - ":SSD_M_TABLE
         GOTO 93000
      END
      IDCNT = 0; IDPTR = ""
      REQ_CO = 0; MID_NO = 0
      FOR I = 1 TO FID_CNT
         BEGIN CASE
         CASE SFR.ID<1,I> = "CO"
            REQ_CO = 1
         CASE SFR.ID.TYPE<1,I> # "T"
            LOCATE SFR.ID<1,I> IN SSD_M_ID<1>,1 SETTING FND THEN
               IDCNT = IDCNT + 1
               IDPTR<IDCNT> = FND
               IF SFR.ID.TYPE<1,I> = "I" THEN
                  MID_NO = IDCNT
               END
            END ELSE
               ERRMSG = "Cannot locate the screen definition for Key - ":SFR.ID<1,I>
               FID_CNT = 0
            END
         END CASE
      NEXT I
      BEGIN CASE
      CASE FID_CNT = 0
         GOTO 93000
      CASE IDCNT < 1
         ERRMSG = "Cannot determine the Key field for table - ":SSD_M_TABLE
         GOTO 93000
      END CASE
      READ FVAR_REC FROM CPYLIB, "FILE.VARS" ELSE
         ERRMSG = "Cannot locate CPYLIB, FILE.VARS"
         GOTO 93000
      END
      PFX = "^IGNORE^"
      CALL CPYLIB_SUB(FVAR_REC,PFX,ARRAY_NAME,FVAR_SIZE,ERRMSG)
      IF ERRMSG # "" THEN
         GOTO 93000
      END
      LOCATE SSD_M_TABLE IN FVAR_REC,1 SETTING MTBL_PTR THEN
         LOCATE SSD_M_TABLE IN EDIT_FILES,1 SETTING FND THEN
            MAINTMODE = 1
         END ELSE
            MAINTMODE = 0
         END
      END ELSE
         LIMIT = 1
         FOR MTBL_PTR = FVAR_SIZE TO LIMIT STEP -1
            IF FVAR_REC<MTBL_PTR> = "" THEN
               FVAR_REC<MTBL_PTR> = CONVERT(".","_",SSD_M_TABLE)
               LIMIT = FVAR_SIZE
            END
         NEXT MTBL_PTR
         IF LIMIT = 1 THEN
            ERRMSG = "Cannot determine the ":SSD_M_TABLE:" main table link pointer"
            GOTO 93000
         END
         MAINTMODE = 1
      END
      BEGIN CASE
      CASE SCN_LOC = 1
         OPEN "",SSD_M_TABLE TO FILE.VARS(MTBL_PTR) ELSE
            ERRMSG = "Cannot locate the ":SSD_M_TABLE:" table"
            GOTO 93000
         END
         OPN_FILES = MTBL_PTR
      CASE MTBL_PTR # OPN_FILES<1>
         ERRMSG = "Master data file mismatch between screens"
         GOTO 93000
      END CASE
      STCNT = DCOUNT(SSD_S_TABLE,VM)
      IF STCNT > 0 THEN
         STBL_PTR = ""
         FOR ST = 1 TO STCNT
            LOCATE SSD_S_TABLE<1,ST> IN FVAR_REC,1 SETTING FND THEN
               LIMIT = FVAR_SIZE
            END ELSE
IF FND > FVAR_SIZE THEN
LIMIT = 1
END ELSE
  LIMIT = FND
END
*              LIMIT = 1
*              FOR FND = FVAR_SIZE TO LIMIT STEP -1
*                 IF FVAR_REC<FND> = "" THEN
*                    FVAR_REC<FND> = CONVERT(".","_",SSD_S_TABLE<1,ST>)
                     FVAR_REC<FND> = SSD_S_TABLE<1,ST>
*                    LIMIT = FVAR_SIZE
*                 END
*              NEXT FND
ERRMSG="FND=":FND:"|FVAR_REC<FND>=":FVAR_REC<FND>:"|SSD_S_TABLE<1,ST>=":SSD_S_TABLE<1,ST>:"|"; GOSUB 91000
            END
            IF LIMIT = 1 THEN
               ERRMSG = "Cannot determine the (":SSD_S_TABLE<1,ST>:") table link pointer"
               STCNT = 0
            END ELSE
FND=LIMIT
ERRMSG ="LIMIT=":LIMIT:"|"; GOSUB 91000
               LOCATE FND IN OPN_FILES,2 SETTING OFPTR THEN
                  STBL_PTR<ST> = FND
               END ELSE
                  OPEN "",SSD_S_TABLE<1,ST> TO FILE.VARS(FND) THEN
                     STBL_PTR<ST> = FND
                     OPN_FILES<OFPTR> = FND
                  END ELSE
                     ERRMSG = "Cannot locate the [":SSD_S_TABLE<1,ST>:"] table"
                     STCNT = 0
                  END
               END
            END
         NEXT ST
         IF STCNT = 0 THEN GOTO 93000
      END
      ID_FNO = ""; MID_FNO = 0
      FOR I = 1 TO IDCNT
         FLD_NAME = SSD_M_ID<1,IDPTR<I>>
         LOCATE FLD_NAME IN SCN_FLDS,1 SETTING FNO THEN
            ERRMSG = "Field (":FLD_NAME:") is defined twice"
            IDCNT = 0
         END ELSE
            SCN_FLDS<FNO> = FLD_NAME
            FLD_FPTR<FNO> = 0
            FLD_TPTR<FNO> = 0
            FLD_LOC<FNO> = 0
            FLD_MVNO<FNO> = 1
            FLD_SMVNO<FNO> = 1
            FLD_LINES<FNO> = 1
            FLD_LNSPC<FNO> = 1
            FLD_LNO<FNO> = 1
            FLD_X<FNO> = SSD_ID_X<1,I>
            FLD_Y<FNO> = SSD_ID_Y<1,I>
            FLD_FMT<FNO> = SSD_ID_FMT<1,I>
            FLD_CNV<FNO> = SSD_ID_CNV<1,I>
            ID_FNO<I> = FNO
            IF I = MID_NO THEN
               MID_FNO = FNO
            END
         END
      NEXT I
      IF IDCNT < 1 THEN
         GOTO 93000
      END
      FLDCNT = DCOUNT(SSD_FIELDS,VM)
      FLD_FNO = ""
      FOR I = 1 TO FLDCNT
         FLD_NAME = SSD_FIELDS<1,I>
         TBL_NAME = SSD_FLD_TABLE<1,I>
*        LOCATE FLD_NAME IN XXX<1>,1 SETTING FNO THEN
*        END ELSE
*           LOCATE FLD_NAME IN CAL_FLDS,1 SETTING FND THEN
*           END ELSE
*           END
*        END
         LOCATE FLD_NAME IN SCN_FLDS,1 SETTING FNO THEN
            ERRMSG = "Field (":FLD_NAME:") is defined twice"
            GOSUB 91000
         END ELSE
            SCN_FLDS<FNO> = FLD_NAME
            IF TBL_NAME = "" THEN
               FLD_FPTR<FNO> = MTBL_PTR
               FLD_TPTR<FNO> = 0
            END ELSE
               LOCATE TBL_NAME IN TBL_IDX,1 SETTING FND THEN
                  FLD_FPTR<FNO> = TBL_LOC<FND>
                  FLD_TPTR<FNO> = FND
                  TBL_FLD_LOC<FND,-1> = FNO
               END ELSE
                  LOCATE TBL_NAME IN FVAR_REC,1 SETTING FPTR THEN
                     LOCATE FPTR IN OPN_FILES,2 SETTING OFPTR THEN
                        OPEN.OK = 1
                     END ELSE
                        OPEN "",TBL_NAME TO FILE.VARS(FPTR) THEN
                           OPEN.OK = 1
                           OPN_FILES<OFPTR> = FPTR
                        END ELSE
                           OPEN.OK = 0
                        END
                     END
                     IF OPEN.OK THEN
                        MATREAD SFR.REC FROM SYS_FILES, TBL_NAME THEN
                           TBL_ID_FNO(FND) = ""
                           ICNT = DCOUNT(SFR.ID,VM)
                           FOR II = 1 TO ICNT
                              BEGIN CASE
                              CASE SFR.ID<1,II> = "CO"
                              CASE SFR.ID.TYPE<1,II> = "T"
                              CASE 1
                                 LOCATE SFR.ID<1,II> IN SSD_FLD_PFX<1>,1 SETTING PLOC THEN
                                    IF PLOC >= I THEN
                                       ERRMSG = "out of sequence, ":SFR.ID<1,II>:" @ ":PLOC:" while ":FLD_NAME:" @ ":I
                                       ICNT = 0
                                    END ELSE
                                       TBL_ID_FNO(FND)<II> = FLD_FNO<PLOC>
                                       FLD_IPTR<FLD_FNO<PLOC>> = FND
                                    END
                                 END ELSE
                                    ERRMSG = "Cannot determine"
                                    ICNT = 0
                                 END
                              END CASE
                           NEXT II
                           IF ICNT = 0 THEN
                              GOSUB 91000
                           END ELSE
                              TBL_ID(FND) = SFR.ID
                              TBL_ID_TYPE(FND) = SFR.ID.TYPE
                              TBL_IDX<FND> = TBL_NAME
                              TBL_LOC<FND> = FPTR
                              TBL_FLD_LOC<FND> = FNO
                              FLD_FPTR<FNO> = FPTR
                              FLD_TPTR<FNO> = FND
                           END
                        END ELSE
                           ERRMSG = "Cannot locate table (":SSD_M_TABLE:") definition"
                           GOSUB 91000
                        END
                     END ELSE
                        ERRMSG = "Cannot locate the ":TBL_NAME:" table"
                        GOSUB 91000
                     END
                  END ELSE
                     ERRMSG = "Cannot determine the ":TBL_NAME:" table link pointer"
                     GOSUB 91000
                  END
               END
            END
            FLD_LOC<FNO> = SSD_FLD_ATTNO<1,I>
            FLD_LCHR<FNO> = SSD_FLD_LCHR<1,I>
            FLD_MVNO<FNO> = SSD_FLD_MVNO<1,I>
            IF NOT(NUM(FLD_MVNO<FNO>)) THEN
               MVNO_RCNT = MVNO_RCNT + 1
               MVNO_REF<MVNO_RCNT> = FNO
            END
            FLD_SMVNO<FNO> = SSD_FLD_SMVNO<1,I>
            IF NOT(NUM(FLD_SMVNO<FNO>)) THEN
               SMVNO_RCNT = SMVNO_RCNT + 1
               SMVNO_REF<SMVNO_RCNT> = FNO
            END
            FLD_LINES<FNO> = SSD_FLD_LINES<1,I>
            FLD_LNSPC<FNO> = SSD_FLD_LNSPC<1,I>
            IF SSD_FLD_LNK<1,I> # "" THEN
               LOCATE SSD_FLD_LNK<1,I> IN FLD_LNK,1 SETTING LFND THEN
                  CNT = DCOUNT(FLD_LPTR<LFND>,VM) + 1
                  FLD_LCNT<LFND> = CNT
                  FLD_LPTR<LFND,CNT> = FNO
                  FLD_HIDE<FNO> = 1
               END
            END
            FLD_LNK<FNO> = SSD_FLD_LNK<1,I>
            FLD_LNO<FNO> = 1
            FLD_REF<FNO> = SSD_FLD_REF<1,I>
            FLD_X<FNO> = SSD_FLD_X<1,I>
            FLD_Y<FNO> = SSD_FLD_Y<1,I>
            FLD_FMT<FNO> = SSD_FLD_FMT<1,I>
            FLD_CNV<FNO> = SSD_FLD_CNV<1,I>
            FLD_DSTLST<FNO> = SSD_FLD_DSTLST<1,I>
            FLD_FNO<I> = FNO
         END
      NEXT I
      IF MVNO_RCNT THEN
         MVNO_RPTR = ""
         FOR I = MVNO_RCNT TO 1 STEP -1
            FNO = MVNO_REF<I>
            LOCATE FLD_MVNO<FNO> IN SCN_FLDS,1 SETTING FND THEN
               MVNO_RPTR<I> = FND
            END ELSE
               FLD_MVNO<FNO> = 1
               MVNO_REF = DELETE(MVNO_REF,I,0,0)
            END
         NEXT I
         MVNO_RCNT = DCOUNT(MVNO_REF,AM)
      END
      IF SMVNO_RCNT THEN
         SMVNO_RPTR = ""
         FOR I = SMVNO_RCNT TO 1 STEP -1
            FNO = SMVNO_REF<I>
            LOCATE FLD_SMVNO<FNO> IN SCN_FLDS,1 SETTING FND THEN
               SMVNO_RPTR<I> = FND
            END ELSE
               FLD_SMVNO<FNO> = 1
               SMVNO_REF = DELETE(SMVNO_REF,I,0,0)
            END
         NEXT I
         SMVNO_RCNT = DCOUNT(SMVNO_REF,AM)
      END
*
      FLD_NAME = "_PROMPT_LINE"
      LOCATE FLD_NAME IN SCN_FLDS,1 SETTING FNO THEN
         ERRMSG = "Field (":FLD_NAME:") is defined twice"
         GOSUB 91000
      END ELSE
         SCN_FLDS<FNO> = FLD_NAME
         FLD_FPTR<FNO> = 0
         FLD_LOC<FNO> = 0
         FLD_MVNO<FNO> = 1
         FLD_SMVNO<FNO> = 1
         FLD_LINES<FNO> = 1
         FLD_LNSPC<FNO> = 1
         FLD_LNO<FNO> = 1
         FLD_X<FNO> = 1
         FLD_Y<FNO> = 21
         FLD_FMT<FNO> = "L#4"
         FLD_CNV<FNO> = ""
         FLD_DSTLST<FNO> = ""
      END
      PLN_FNO = FNO
*
      TBLCNT = DCOUNT(TBL_IDX,AM)
*
REV_CTL = 1; GEN_N_ID = 1
      IOFLG = 1
      INQMODE = 0
      IF PRT_CRT THEN
         CRT SCN_HDR_CRT :
      END
*
*---- Get Key fields
100*
      IF SCN_LOC = 1 THEN
         EDITMODE = MAINTMODE
      END
      IDNUM = 1
      FNO = ID_FNO<IDNUM>
      BEGIN CASE
      CASE SCN_LOC > 1
         VALUE = ID_VARS<IDNUM>
         DREC(FNO)<1,FLD_MVNO<FNO>,FLD_SMVNO<FNO>> = VALUE
         GOSUB 3110
      CASE THIS_FUNC = "JOB.MAINT"
         VALUE = ID_VARS<IDNUM>
         DREC(FNO)<1,FLD_MVNO<FNO>,FLD_SMVNO<FNO>> = VALUE
         GOSUB 3110
      CASE 1
         GOSUB 1000
         IF VALUE = "END" THEN
            GOTO 99999
         END
         IF IDCNT = 1 AND VALUE = "???" THEN
            MAT GEN.XREF.REC = ""
            GXR.CO = CONO
            GXR.NAME = "GEN.CODE"
            GXR.FILE = FILE.VARS(MTBL_PTR)
            GXR.SORT.FILE = SSD_M_TABLE
            CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
            CRT SCN_HDR_CRT :
            DREC(FNO)<1,FLD_MVNO<FNO>,FLD_SMVNO<FNO>> = GXR.ID
            GOSUB 3110
            IF GXR.ID = "" THEN
               GOTO 100
            END
            ID_VARS = GXR.ID
         END ELSE
            ID_VARS = VALUE
         END
      END CASE
      GOSUB 210
      IF LIMIT = 0 THEN GOTO 99999
      BEGIN CASE
      CASE SCN_LOC > 1
      CASE EDITMODE
         READU M_REC FROM FILE.VARS(MTBL_PTR), IDKEY THEN
            CHGMODE = 1
            IF REV_CTL AND MID_FNO THEN
               VALUE = DREC(MID_FNO)
               L_VALUE = LEN(VALUE)
               IF VALUE[L_VALUE-2,1] # "-" OR NOT(NUM(VALUE[L_VALUE-1,2])) THEN
                  IF L_VALUE > (FIELD(FLD_FMT<MID_FNO>,"#",2) - 3) THEN
                     ERRMSG = "The last three digits of the ID are reserved for revision control"
                     GOSUB 91000; GOTO 100
                  END
                  VALUE = VALUE :"-00"
                  L_VALUE = LEN(VALUE)
               END
               VALUE_BASE = VALUE[1,L_VALUE-2]
               CNTR = VALUE[L_VALUE-1,2]
               OLD_IDKEY = IDKEY; OLD_IDREF = IDREF
               OLD_VALUE = DREC(MID_FNO)
               LOOP
                  NEW_IDKEY = IDKEY
                  NEW_VALUE = DREC(MID_FNO)
                  LST_IDREF = IDREF
                  CNTR = CNTR + 1
                  DREC(MID_FNO) = VALUE_BASE:STR("0",2-LEN(CNTR)):CNTR
                  GOSUB 220
                  READ T_REC FROM FILE.VARS(MTBL_PTR), IDKEY ELSE
                     IDREF = LST_IDREF
                     CNTR = 0
                  END
               WHILE CNTR DO REPEAT
               IDKEY = OLD_IDKEY
               DREC(MID_FNO) = OLD_VALUE
               IF IDREF # OLD_IDREF THEN
                  IF THIS_FUNC = "JOB.MAINT" THEN
                     IDKEY = NEW_IDKEY
                     DREC(MID_FNO) = NEW_VALUE
                     FNO = MID_FNO
                     GOSUB 3110
                  END ELSE
                     ERRMSG = "Inquiry mode, Last Revision = ":LST_IDREF
                     GOSUB 91000
                     EDITMODE = 0
                  END
               END
            END
         END ELSE
            IF REV_CTL AND MID_FNO THEN
               VALUE = DREC(MID_FNO)<1,FLD_MVNO<MID_FNO>,FLD_SMVNO<MID_FNO>>
               BEGIN CASE
               CASE INDEX(VALUE,"-",1)
                  ERRMSG = "Cannot utilize the dash '-', it is reserved for revision control"
                  GOSUB 91000; GOTO 100
               CASE LEN(VALUE) > (FIELD(FLD_FMT<MID_FNO>,"#",2) - 3)
                  RELEASE FILE.VARS(MTBL_PTR), IDKEY
                  ERRMSG = "The last three digits of the ID are reserved for revision control"
                  GOSUB 91000; GOTO 100
               END CASE
            END
            M_REC = ""; CHGMODE = 0
         END
         OLD_M_REC = M_REC
      CASE 1
         READ M_REC FROM FILE.VARS(MTBL_PTR), IDKEY THEN
            CHGMODE = 1
         END ELSE
            ERRMSG = "Cannot locate ":SSD_M_TABLE:" # ":IDREF
            GOSUB 91000; GOTO 100
         END
      END CASE
      IF CHGMODE<1,1> OR CHGMODE<1,SCN_LOC> THEN
         OPTR = 1
         LOOP
            LOCATE MTBL_PTR IN FLD_FPTR,OPTR SETTING OPT ELSE
               OPTR = 0
            END
         WHILE OPTR DO
            DREC(OPT) = M_REC<FLD_LOC<OPT>>
            OPTR = OPT + 1
         REPEAT
         FOR T = 1 TO TBLCNT
            TBL_TO_READ = T
            IOFLG = 0; GOSUB 4010
         NEXT T
FOR I = 1 TO MVNO_RCNT
   FNO = MVNO_REF<I>; RNO = MVNO_RPTR<I>
   IF NUM(DREC(RNO)) THEN
      FLD_MVNO<FNO> = DREC(RNO) + 0
   END ELSE
      FLD_MVNO<FNO> = 1
   END
NEXT I
FOR I = 1 TO SMVNO_RCNT
   FNO = SMVNO_REF<I>; RNO = SMVNO_RPTR<I>
   IF NUM(DREC(RNO)) THEN
      FLD_SMVNO<FNO> = DREC(RNO) + 0
   END ELSE
      FLD_SMVNO<FNO> = 1
   END
NEXT I
         GOSUB 3000
      END ELSE
*ADD MODE QUESTION
         OPTR = 1
         LOOP
            LOCATE MTBL_PTR IN FLD_FPTR,OPTR SETTING OPT THEN
               FNO = OPT
               IF SCN_LOC = 1 THEN
                  IF SCN_FLDS<FNO> = "JKT_JOB_NO" THEN
                     VALUE = ID_VARS<IDNUM>
                     DREC(FNO) = VALUE; GOSUB 3110
                     MVNO = FLD_MVNO<FNO>
                     SMVNO = FLD_SMVNO<FNO>
                     DREC(FNO) = ""; GOSUB 1130
                  END ELSE
                     GOSUB 1000
                  END
               END ELSE
                  VALUE = M_REC<FLD_LOC<FNO>>
                  IF VALUE = "" THEN
                     GOSUB 1000
                  END ELSE
                     DREC(FNO) = VALUE; GOSUB 3110
                     MVNO = FLD_MVNO<FNO>
                     SMVNO = FLD_SMVNO<FNO>
                     DREC(FNO) = ""; GOSUB 1130
                  END
               END
               IF VALUE = "END" THEN OPTR = 0
            END ELSE
               OPTR = 0
            END
         WHILE OPTR DO
            OPTR = OPT + 1
         REPEAT
         IF VALUE = "END" THEN
            IF SCN_LOC = 1 THEN
               IF THIS_FUNC = "JOB.MAINT" THEN
                  ERRFLG = SCN_LOC
                  GOTO 99999
               END ELSE
                  IF EDITMODE THEN
                     RELEASE FILE.VARS(MTBL_PTR), IDKEY
                  END
                  CRT SCN_CLR_CRT :
                  GOTO 100
               END
            END ELSE
               ERRFLG = SCN_LOC
               GOTO 99999
            END
         END
         IF SCN_LOC > 1 THEN
            CHGMODE<1,SCN_LOC> = 1
         END
      END
      IF NOT(PRT_CRT) THEN
         FOR I = 1 TO 24
            PRINT SCN_HDR_PRT<I>
         NEXT I
         GOTO 99999
      END
*
*---- Get prompt line request
*
      MORE = 1
      IF EDITMODE THEN
         VAR1 = "change,"
         VAR2 = " (M)ove, (P)rint, (F)ile,"
      END ELSE
         VAR1 = "review,"
         VAR2 = ""
      END
      IF SCN_LOC = 1 THEN
         IF FIELD(SCN_NAMES,",",2) = "" THEN
OPT_MSG = "Enter # to ":VAR1:VAR2:" (E)xit :"
         END ELSE
OPT_MSG = "Enter # to ":VAR1:" (N)ext screen,":VAR2:" (E)xit :"
         END
      END ELSE
         IF FIELD(SCN_NAMES,",",SCN_LOC+1) = "" THEN
OPT_MSG = "Enter # to ":VAR1:" (E)nd :"
         END ELSE
OPT_MSG = "Enter # to ":VAR1:" (N)ext screen, (E)nd :"
         END
      END
      LOOP
         FNO = PLN_FNO<1>
         PMSG = OPT_MSG
         DREC(FNO) = ""
         GOSUB 1000
PMSG = ""
         OPTION = VALUE
         BEGIN CASE
         CASE OPTION = "END" OR OPTION = "E" OR OPTION = "e"
            IF SCN_LOC = 1 THEN
               IF EDITMODE THEN
                  RELEASE FILE.VARS(MTBL_PTR), IDKEY
               END
            END ELSE
               FOR I = 1 TO FLDCNT
                  FNO = FLD_FNO<I>
                  IF FLD_FPTR<FNO> = MTBL_PTR THEN
                     M_REC<FLD_LOC<FNO>> = DREC(FNO)
                  END
               NEXT I
            END
            MORE = 0
         CASE OPTION = "N" OR OPTION = "n"
            SCN_LOC = SCN_LOC + 1
            IF FIELD(SCN_NAMES,",",SCN_LOC) # "" THEN
               FOR I = 1 TO FLDCNT
                  FNO = FLD_FNO<I>
                  IF FLD_FPTR<FNO> = MTBL_PTR THEN
                     M_REC<FLD_LOC<FNO>> = DREC(FNO)
                  END
               NEXT I
               GOSUB 470
               CRT SCN_HDR_CRT :
               FOR IDNO = 1 TO IDCNT
                  FNO = ID_FNO<IDNO>
                  GOSUB 3110
               NEXT IDNO
               GOSUB 3000
            END
            SCN_LOC = SCN_LOC - 1
         CASE (OPTION = "M" OR OPTION = "m") AND EDITMODE AND SCN_LOC = 1
            IDNUM = 1
            FNO = ID_FNO<IDNUM>
            OLD_IDKEY = IDKEY
            OLD_IDVALUE = DREC(FNO)<1,FLD_MVNO<FNO>,FLD_SMVNO<FNO>>
            GOSUB 1000
            IF VALUE = "END" THEN
               DREC(FNO)<1,FLD_MVNO<FNO>,FLD_SMVNO<FNO>> = OLD_IDVALUE
               GOSUB 3110
            END ELSE
               FOR IDNO = 2 TO IDCNT
                  FNO = ID_FNO<IDNO>
                  OLD_IDVALUE<IDNO> = DREC(FNO)<1,FLD_MVNO<FNO>,FLD_SMVNO<FNO>>
               NEXT IDNO
               ID_VARS = VALUE
               GOSUB 210
               IF LIMIT THEN
                  IF IDKEY = OLD_IDKEY THEN
                     ERRMSG = "Cannot move to the same record ID !"
                     LIMIT = 0; GOSUB 91000
                  END ELSE
                     READU T_REC FROM FILE.VARS(MTBL_PTR), IDKEY THEN
                        RELEASE FILE.VARS(MTBL_PTR), IDKEY
                        ERRMSG = SSD_M_TABLE:" (":IDREF:") already exists on file !"
                        LIMIT = 0; GOSUB 91000
                     END ELSE
                        CHGMODE<1,1> = 0
                        RELEASE FILE.VARS(MTBL_PTR), OLD_IDKEY
                     END
                  END
               END
               IF NOT(LIMIT) THEN
                  IDKEY = OLD_IDKEY
                  FOR IDNO = 1 TO IDCNT
                     FNO = ID_FNO<IDNO>
                     DREC(FNO)<1,FLD_MVNO<FNO>,FLD_SMVNO<FNO>> = OLD_IDVALUE<IDNO>
                     GOSUB 3110
                  NEXT IDNO
               END
            END
         CASE (OPTION = "F" OR OPTION = "f" OR OPTION = "P" OR OPTION = "p") AND EDITMODE AND SCN_LOC = 1
            IF CHGMODE<1,1> THEN
               NEW_REV = 0
               IF REV_CTL AND MID_FNO THEN
                  FOR I = 1 TO FLDCNT
                     FNO = FLD_FNO<I>
                     IF FLD_FPTR<FNO> = MTBL_PTR THEN
                        ATTNO = FLD_LOC<FNO>
                        M_REC<ATTNO> = DREC(FNO)
                        IF M_REC<ATTNO> # OLD_M_REC<ATTNO> THEN
                           IF FLD_DSTLST<FNO> # "" THEN
                              GOSUB 350
                           END
                           NEW_REV = 1
                        END
                     END
                  NEXT I
                  ATT_FLDS = ""
               END ELSE
                  FOR I = 1 TO FLDCNT
                     FNO = FLD_FNO<I>
                     IF FLD_FPTR<FNO> = MTBL_PTR THEN
                        ATTNO = FLD_LOC<FNO>
                        M_REC<ATTNO> = DREC(FNO)
                     END
                  NEXT I
               END
            END ELSE
               NEW_REV = 0; ERRMSG = ""
               LOOP
                  SCN_LOC = SCN_LOC + 1
                  BEGIN CASE
                  CASE FIELD(SCN_NAMES,",",SCN_LOC) = ""
                     SCN_LOC = 1
                  CASE CHGMODE<1,SCN_LOC> < 1
                     ERRMSG = "Screen (":SCN_LOC:") information has not been loaded!!"
                     SCN_LOC = 1
                  END CASE
               WHILE SCN_LOC > 1 DO REPEAT
               IF ERRMSG # "" THEN
                  GOSUB 91000; GOTO 106
               END
               FOR I = 1 TO FLDCNT
                  FNO = FLD_FNO<I>
                  IF FLD_FPTR<FNO> = MTBL_PTR THEN
                     ATTNO = FLD_LOC<FNO>
                     M_REC<ATTNO> = DREC(FNO)
                  END
               NEXT I
               IF GEN_N_ID AND MID_FNO THEN
                  IF DREC(MID_FNO) = "N" THEN
                     FLD_NAME = SCN_FLDS<MID_FNO>
                     READU CNTR FROM CONTROL, CONO:FLD_NAME ELSE
                        CNTR = 1000
                     END
                     CNTR = CNTR + 1
                     DREC(MID_FNO) = CNTR
                     GOSUB 220
                     LOOP
                       LST_IDKEY = IDKEY
                       READU T_REC FROM FILE.VARS(MTBL_PTR), IDKEY THEN
                          RELEASE FILE.VARS(MTBL_PTR), IDKEY
                          CNTR = CNTR + 1
                          DREC(MID_FNO) = CNTR
                          GOSUB 220
                       END
                     WHILE IDKEY # LST_IDKEY DO REPEAT
                     FNO = MID_FNO
                     GOSUB 3110
                     ERRMSG = "Please note down the new number"
                     GOSUB 91000
                     WRITE CNTR ON CONTROL, CONO:FLD_NAME
                  END
               END
            END
*           IF NEW_REV THEN
IF NEW_REV AND (OPTION = "P" OR OPTION = "p") THEN
               VALUE = DREC(MID_FNO)
               L_VALUE = LEN(VALUE)
               IF VALUE[L_VALUE-2,1] # "-" OR NOT(NUM(VALUE[L_VALUE-1,2])) THEN
                  IF L_VALUE > (FIELD(FLD_FMT<MID_FNO>,"#",2) - 3) THEN
                     ERRMSG = "The last three digits of the ID are reserved for revision control"
                     GOSUB 91000; GOTO 106
                  END
                  VALUE = VALUE :"-00"
                  L_VALUE = LEN(VALUE)
               END
               VALUE_BASE = VALUE[1,L_VALUE-2]
               CNTR = VALUE[L_VALUE-1,2]
               LOOP
                  CNTR = CNTR + 1
                  DREC(MID_FNO) = VALUE_BASE:STR("0",2-LEN(CNTR)):CNTR
                  GOSUB 220
                  READU T_REC FROM FILE.VARS(MTBL_PTR), IDKEY THEN
                     RELEASE FILE.VARS(MTBL_PTR), IDKEY
                  END ELSE
                     CNTR = 0
                  END
               WHILE CNTR DO REPEAT
               FNO = MID_FNO
               GOSUB 3110
               ERRMSG = "Please note down the new revision number"
               GOSUB 91000
            END
            WRITE M_REC ON FILE.VARS(MTBL_PTR), IDKEY
            IF OPTION = "F" OR OPTION = "f" THEN
               MORE = 0
               GOTO 106
            END
            CALL SCN_PRT_BLD(SCN_NAME,SCN_HDR_PRT,ERRMSG)
            IF ERRMSG # "" THEN
               GOSUB 91000
               GOTO 106
            END
            PRT_CRT = 0
            FOR IDNO = 1 TO IDCNT
               FNO = ID_FNO<IDNO>
               GOSUB 3110
            NEXT IDNO
            GOSUB 3000
            PRINTER ON
            FOR I = 1 TO 24
               PRINT SCN_HDR_PRT<I>
            NEXT I
            IF FIELD(SCN_NAMES,",",2) # "" THEN
               LOOP
                  SCN_LOC = SCN_LOC + 1
                  SCN_NAME = FIELD(SCN_NAMES,",",SCN_LOC)
               WHILE SCN_NAME # "" DO
                  GOSUB 470
               REPEAT
               SCN_LOC = 1
               SCN_NAME = FIELD(SCN_NAMES,",",SCN_LOC)
            END
            PRINTER CLOSE
            PRINTER OFF
            PRT_CRT = 1
106*
         CASE OPTION # "0"
            LOCATE OPTION IN FLD_REF,1 SETTING FNO THEN
*              FNO = FLD_RPTR<FND>
               BEGIN CASE
               CASE EDITMODE = 0
                  INQMODE = 1
               CASE FLD_FPTR<FNO> = 0 OR FLD_FPTR<FNO> = MTBL_PTR
                  INQMODE = 0
               CASE 1
                  INQMODE = 1
               END CASE
               GOSUB 1000
               INQMODE = 0
            END ELSE
               ERRMSG = "Invalid entry, please re-enter"
               GOSUB 91000
            END
         END CASE
      WHILE MORE DO REPEAT
      IF SCN_LOC = 1 THEN
         IF THIS_FUNC = "JOB.MAINT" THEN
            GOTO 99999
         END ELSE
            CRT SCN_CLR_CRT :
            MAT DREC = ""
            GOTO 100
         END
      END ELSE
         GOTO 99999
      END
*
*--- Build Item ID
210*
      LIMIT = IDCNT
      FOR IDNUM = 2 TO LIMIT
         FNO = ID_FNO<IDNUM>
         IF SCN_LOC > 1 THEN
            VALUE = ID_VARS<IDNUM>
            DREC(FNO)<1,FLD_MVNO<FNO>,FLD_SMVNO<FNO>> = VALUE
            GOSUB 3110
         END ELSE
            GOSUB 1000
            IF VALUE = "END" THEN
               LIMIT = 0
            END
            ID_VARS<IDNUM> = VALUE
         END
      NEXT IDNUM
      IF LIMIT THEN
         GOSUB 220
      END
      IDNUM = 0
      RETURN
220*
      IDNO = 0; IDKEY = ""; IDREF = ""
      FOR I = 1 TO FID_CNT
         BEGIN CASE
         CASE SFR.ID<1,I> = "CO"
            IDKEY = IDKEY:CONO
         CASE SFR.ID.TYPE<1,I> = "T"
            IDKEY = IDKEY:SFR.ID<1,I>
            IDREF = IDREF:SFR.ID<1,I>
         CASE 1
            IDNO = IDNO + 1
            IDKEY = IDKEY:DREC(ID_FNO<IDNO>)
            IDREF = IDREF:DREC(ID_FNO<IDNO>)
         END CASE
      NEXT I
      RETURN
350*
      MCNT = DCOUNT(FLD_DSTLST<FNO>,",")
      IF MCNT < 1 THEN GOTO 359
      MLIST = ""
      FOR M = 1 TO MCNT
         MAIL.ID = FIELD(FLD_DSTLST<FNO>,",",M)
         IF MAIL.ID[1,2] = "L!" THEN
            READ SLIST FROM USER.MAIL, MAIL.ID ELSE
               ERRMSG = "Cannot locate users distribution list # ":MAIL.ID
               GOSUB 91000; GOTO 359
            END
            SCNT = DCOUNT(SLIST,AM)
            FOR S = 1 TO SCNT
               LOCATE SLIST<S>[4,99] IN MLIST,1 SETTING FND ELSE
                  MLIST<FND> = SLIST<S>[4,99]
               END
            NEXT S
         END ELSE
            LOCATE MAIL.ID IN SCN_FLDS,1 SETTING FND THEN
               MAIL.ID = M_REC<FLD_LOC<FND>>
            END
            LOCATE MAIL.ID IN MLIST,1 SETTING FND ELSE
               MLIST<FND> = MAIL.ID
            END
         END
      NEXT T
      LCNT = DCOUNT(MLIST,AM)
      IF LCNT < 1 THEN GOTO 359
      MAIL.F.ID = USER.ID
      M_MSG = SCN_FLDS<FNO>
      M_MSG<2> = OLD_M_REC<ATTNO>
      M_MSG<3> = M_REC<ATTNO>
      CALL PMC_MAIL_S(CONO,MAIL.F.ID,MLIST,SECURITY,USER.MAIL,M_MSG,ERRMSG)
      IF ERRMSG # "" THEN
         GOSUB 91000
      END
359*
      RETURN
470*
      PASS_VARS = THIS_FUNC
      PASS_VARS<2> = SCN_LOC
      PASS_VARS<3> = SCN_NAMES
      PASS_VARS<4> = EDITMODE
      PASS_VARS<5> = CHGMODE
      PASS_VARS<6> = PRT_CRT
      PASS_VARS<7> = ERRFLG
      CALL SCN_M(PASS_VARS,ID_VARS,M_REC,USER.MAIL,OPN_FILES)
      CHGMODE = PASS_VARS<5>
      ERRFLG = PASS_VARS<7>
      RETURN
*
*---- Prompt for a Data field
1000*
      FLD_NAME = SCN_FLDS<FNO>
      GOSUB 7000
      IF ERRMSG # "" THEN
         GOSUB 91000; GOTO 1099
      END
      BEGIN CASE
      CASE FLD_SMVNO<FNO> < 1 AND FLD_MVNO<FNO> < 1
         ERRMSG = "Canot utilize an MV & SMV values at the same time"
         GOSUB 91000; GOTO 1099
      CASE FLD_SMVNO<FNO> < 1
         MVNO = FLD_MVNO<FNO>
         LN_PG = FLD_LINES<FNO>; LN_SPC = FLD_LNSPC<FNO>
         LN_Y = FLD_Y<FNO>; LN_OLD_FST = FLD_OLNO<FNO>
         LN_CNT = DCOUNT(DREC(FNO)<1,MVNO>,SVM)
         CRT @(64,22):"(Page 01 of 01)":
         IF LN_CNT < 1 AND NOT(INQMODE) THEN
            CRT @(52,22):"(Line    ),":
            LOOP
               SMVNO = LN_CNT + 1
               OLD_LN_CNT = LN_CNT
               Y = LN_Y + LN_SPC * MOD(SMVNO-1,LN_PG)
               LNO = SMVNO
               CRT @(58,22): LNO "R%3":
               GOSUB 3100
               GOSUB 7100; GOSUB 1100
               LN_CNT = DCOUNT(DREC(FNO)<1,MVNO>,SVM)
            WHILE LN_CNT > OLD_LN_CNT DO
               CRT @(70,22): INT(LNO/LN_PG+.9) "R%2":
               CRT @(76,22): INT(LN_CNT/LN_PG+.9) "R%2":
            REPEAT
            LNO = LN_CNT
            CRT @(52,22):SPACE(11):
         END ELSE
            LNO = FLD_LNO<FNO>
         END
         GOSUB 3100
         CRT @(76,22): INT(LN_CNT/LN_PG+.9) "R%2":
         IF INQMODE THEN
SMVPMSG = "Enter (S)croll, (E)nd :"
         END ELSE
SMVPMSG = "Enter (A)dd, (C)hange, (D)elete, (S)croll, (E)nd :"
         END
         SMVMORE = 1
         LOOP
            SMVFNO = FNO
            FNO = PLN_FNO<1>
            PMSG = SMVPMSG
            DREC(FNO) = ""
            GOSUB 1000
            FNO = SMVFNO
PMSG = ""
            SMVOPT = VALUE
            BEGIN CASE
            CASE SMVOPT = "" OR SMVOPT = "END" OR SMVOPT = "E" OR SMVOPT = "e"
               SMVMORE = 0
            CASE SMVOPT = "" OR SMVOPT = "S" OR SMVOPT = "s" OR SMVOPT = "SF" OR SMVOPT = "sf"
               LNO = 1 + INT((LNO-1)/LN_PG) * LN_PG + LN_PG
               IF LNO > LN_CNT THEN LNO = 1
               GOSUB 3100
            CASE SMVOPT = "SR" OR SMVOPT = "sr"
               LNO = 1 + INT((LNO-1)/LN_PG) * LN_PG - LN_PG
               IF LNO < 1 THEN LNO = LN_CNT
               GOSUB 3100
            CASE SMVOPT = "ST" OR SMVOPT = "st"
               LNO = 1; GOSUB 3100
            CASE SMVOPT = "SB" OR SMVOPT = "sb"
               LNO = LN_CNT; GOSUB 3100
            CASE (SMVOPT[1,1] = "S" OR SMVOPT[1,1] = "s") AND NUM(SMVOPT[2,99])
               LN_NO = SMVOPT[2,99] + 0
               IF LN_NO < 1 OF LN_NO > LN_CNT THEN
                  ERRMSG = "*** Invalid Selection ***"
                  GOSUB 91000
               END
               LN = LN_NO; GOSUB 3100
            CASE INQMODE
            CASE SMVOPT = "A" OR SMVOPT = "a"
               CRT @(52,22):"(Line    ),":
               LOOP
                  SMVNO = LN_CNT + 1
                  OLD_LN_CNT = LN_CNT
                  LNO = SMVNO
                  CRT @(58,22): LNO "R%3":
                  GOSUB 3100
                  Y = LN_Y + LN_SPC * MOD(SMVNO-1,LN_PG)
                  GOSUB 7100; GOSUB 1100
                  LN_CNT = DCOUNT(DREC(FNO)<1,MVNO>,SVM)
               WHILE LN_CNT > OLD_LN_CNT DO
                  CRT @(70,22): INT(LNO/LN_PG+.9) "R%2":
                  CRT @(76,22): INT(LN_CNT/LN_PG+.9) "R%2":
               REPEAT
               CRT @(52,22):SPACE(11):
               LNO = LN_CNT
               GOSUB 3100
               CRT @(76,22): INT(LN_CNT/LN_PG+.9) "R%2":
            CASE SMVOPT = "D" OR SMVOPT = "d"
               DELFNO = FNO
               FNO = PLN_FNO<1>
PMSG = "Enter Line Number :"
               DREC(FNO) = ""
               GOSUB 1000
               FNO = DELFNO
PMSG = ""
               LN_NO = VALUE
               BEGIN CASE
               CASE LN_NO = "" OR LN_NO = "END"
                  LN_NO = 0
               CASE NOT(NUM(LN_NO))
                  LN_NO = 0
               CASE LN_NO < 1 OR LN_NO > LN_CNT
               CASE 1
                  LNO = LN_NO
                  DREC(FNO) = DELETE(DREC(FNO),1,MVNO,LNO)
                  LN_CNT = DCOUNT(DREC(FNO)<1,MVNO>,SVM)
                  IF LNO > LN_CNT THEN LNO = LNO - 1
                  LN_OLD_FST = 0; GOSUB 3100
                  CRT @(76,22): INT(LN_CNT/LN_PG+.9) "R%2":
               END CASE
            CASE SMVOPT = "C" OR SMVOPT = "c"
               CHGFNO = FNO
               FNO = PLN_FNO<1>
PMSG = "Enter Line Number :"
               DREC(FNO) = ""
               GOSUB 1000
               FNO = CHGFNO
PMSG = ""
               LN_NO = VALUE
               BEGIN CASE
               CASE LN_NO = "" OR LN_NO = "END"
                  LN_NO = 0
               CASE NOT(NUM(LN_NO))
                  LN_NO = 0
               CASE LN_NO < 1 OR LN_NO > LN_CNT
               CASE 1
                  LNO = LN_NO; SMVNO = LN_NO
                  CRT @(58,22): LNO "R%3":
                  GOSUB 3100
                  Y = LN_Y + LN_SPC * MOD(SMVNO-1,LN_PG)
                  GOSUB 7100; GOSUB 1100
               END CASE
            END CASE
         WHILE SMVMORE DO REPEAT
         CRT @(64,22):CL:
         FLD_LNO<FNO> = LNO; FLD_OLNO<FNO> = LN_OLD_FST
      CASE FLD_MVNO<FNO> < 1
         SMVNO = FLD_SMVNO<FNO>
         LN_PG = FLD_LINES<FNO>; LN_SPC = FLD_LNSPC<FNO>
         LN_Y = FLD_Y<FNO>; LN_OLD_FST = FLD_OLNO<FNO>
         LN_CNT = DCOUNT(DREC(FNO),VM)
         CRT @(64,22):"(Page 01 of 01)":
         IF LN_CNT < 1 AND NOT(INQMODE) THEN
            CRT @(52,22):"(Line    ),":
            LOOP
               MVNO = LN_CNT + 1
               OLD_LN_CNT = LN_CNT
               Y = LN_Y + LN_SPC * MOD(MVNO-1,LN_PG)
               LNO = MVNO
               CRT @(58,22): LNO "R%3":
               GOSUB 3100
               GOSUB 7100; GOSUB 1100
               LN_CNT = DCOUNT(DREC(FNO),VM)
            WHILE LN_CNT > OLD_LN_CNT DO
               CRT @(70,22): INT(LNO/LN_PG+.9) "R%2":
               CRT @(76,22): INT(LN_CNT/LN_PG+.9) "R%2":
            REPEAT
            LNO = LN_CNT
            CRT @(52,22):SPACE(11):
         END ELSE
            LNO = FLD_LNO<FNO>
         END
         GOSUB 3100
         CRT @(76,22): INT(LN_CNT/LN_PG+.9) "R%2":
         IF INQMODE THEN
MVPMSG = "Enter (S)croll, (E)nd :"
         END ELSE
MVPMSG = "Enter (A)dd, (C)hange, (D)elete, (S)croll, (E)nd :"
         END
         MVMORE = 1
         LOOP
            MVFNO = FNO
            FNO = PLN_FNO<1>
            PMSG = MVPMSG
            DREC(FNO) = ""
            GOSUB 1000
            FNO = MVFNO
PMSG = ""
            MVOPT = VALUE
            BEGIN CASE
            CASE MVOPT = "" OR MVOPT = "END" OR MVOPT = "E" OR MVOPT = "e"
               MVMORE = 0
            CASE MVOPT = "" OR MVOPT = "S" OR MVOPT = "s" OR MVOPT = "SF" OR MVOPT = "sf"
               LNO = 1 + INT((LNO-1)/LN_PG) * LN_PG + LN_PG
               IF LNO > LN_CNT THEN LNO = 1
               GOSUB 3100
            CASE MVOPT = "SR" OR MVOPT = "sr"
               LNO = 1 + INT((LNO-1)/LN_PG) * LN_PG - LN_PG
               IF LNO < 1 THEN LNO = LN_CNT
               GOSUB 3100
            CASE MVOPT = "ST" OR MVOPT = "st"
               LNO = 1; GOSUB 3100
            CASE MVOPT = "SB" OR MVOPT = "sb"
               LNO = LN_CNT; GOSUB 3100
            CASE (MVOPT[1,1] = "S" OR MVOPT[1,1] = "s") AND NUM(MVOPT[2,99])
               LN_NO = MVOPT[2,99] + 0
               IF LN_NO < 1 OF LN_NO > LN_CNT THEN
                  ERRMSG = "*** Invalid Selection ***"
                  GOSUB 91000
               END
               LN = LN_NO; GOSUB 3100
            CASE INQMODE
            CASE MVOPT = "A" OR MVOPT = "a"
               CRT @(52,22):"(Line    ),":
               LOOP
                  MVNO = LN_CNT + 1
                  OLD_LN_CNT = LN_CNT
                  LNO = MVNO
                  CRT @(58,22): LNO "R%3":
                  GOSUB 3100
                  Y = LN_Y + LN_SPC * MOD(MVNO-1,LN_PG)
                  GOSUB 7100; GOSUB 1100
                  LN_CNT = DCOUNT(DREC(FNO),VM)
               WHILE LN_CNT > OLD_LN_CNT DO
                  CRT @(70,22): INT(LNO/LN_PG+.9) "R%2":
                  CRT @(76,22): INT(LN_CNT/LN_PG+.9) "R%2":
               REPEAT
               CRT @(52,22):SPACE(11):
               LNO = LN_CNT
               GOSUB 3100
               CRT @(76,22): INT(LN_CNT/LN_PG+.9) "R%2":
            CASE MVOPT = "D" OR MVOPT = "d"
               DELFNO = FNO
               FNO = PLN_FNO<1>
PMSG = "Enter Line Number :"
               DREC(FNO) = ""
               GOSUB 1000
               FNO = DELFNO
PMSG = ""
               LN_NO = VALUE
               BEGIN CASE
               CASE LN_NO = "" OR LN_NO = "END"
                  LN_NO = 0
               CASE NOT(NUM(LN_NO))
                  LN_NO = 0
               CASE LN_NO < 1 OR LN_NO > LN_CNT
               CASE 1
                  LNO = LN_NO
                  DREC(FNO) = DELETE(DREC(FNO),1,LNO,0)
                  LN_CNT = DCOUNT(DREC(FNO),VM)
                  IF LNO > LN_CNT THEN LNO = LNO - 1
                  LN_OLD_FST = 0; GOSUB 3100
                  CRT @(76,22): INT(LN_CNT/LN_PG+.9) "R%2":
               END CASE
            CASE MVOPT = "C" OR MVOPT = "c"
               CHGFNO = FNO
               FNO = PLN_FNO<1>
PMSG = "Enter Line Number :"
               DREC(FNO) = ""
               GOSUB 1000
               FNO = CHGFNO
PMSG = ""
               LN_NO = VALUE
               BEGIN CASE
               CASE LN_NO = "" OR LN_NO = "END"
                  LN_NO = 0
               CASE NOT(NUM(LN_NO))
                  LN_NO = 0
               CASE LN_NO < 1 OR LN_NO > LN_CNT
               CASE 1
                  LNO = LN_NO; MVNO = LN_NO
                  CRT @(58,22): LNO "R%3":
                  GOSUB 3100
                  Y = LN_Y + LN_SPC * MOD(MVNO-1,LN_PG)
                  GOSUB 7100; GOSUB 1100
               END CASE
            END CASE
         WHILE MVMORE DO REPEAT
         CRT @(64,22):CL:
         FLD_LNO<FNO> = LNO; FLD_OLNO<FNO> = LN_OLD_FST
      CASE FLD_LCHR<FNO> # ""
         LCHR = FLD_LCHR<FNO>
         MVNO = FLD_MVNO<FNO>; SMVNO = FLD_SMVNO<FNO>
         LN_PG = FLD_LINES<FNO>; LN_SPC = FLD_LNSPC<FNO>
         LN_Y = FLD_Y<FNO>; LN_OLD_FST = FLD_OLNO<FNO>
         LN_CNT = DCOUNT(DREC(FNO)<1,MVNO,SMVNO>,LCHR)
         CRT @(64,22):"(Page 01 of 01)":
         LNO = FLD_LNO<FNO>
         GOSUB 3100
         CRT @(76,22): INT(LN_CNT/LN_PG+.9) "R%2":
         LCHRMORE = 1
         LOOP
            LCHRFNO = FNO
            FNO = PLN_FNO<1>
PMSG = "Enter (S)croll, (E)nd :"
            DREC(FNO) = ""
            GOSUB 1000
            FNO = LCHRFNO
PMSG = ""
            LCHROPT = VALUE
            BEGIN CASE
            CASE LCHROPT = "" OR LCHROPT = "E" OR LCHROPT = "END"
               LCHRMORE = 0
            CASE LCHROPT = "" OR LCHROPT = "S" OR LCHROPT = "SF"
               LNO = 1 + INT((LNO-1)/LN_PG) * LN_PG + LN_PG
               IF LNO > LN_CNT THEN LNO = 1
               GOSUB 3100
            CASE LCHROPT = "SR"
               LNO = 1 + INT((LNO-1)/LN_PG) * LN_PG - LN_PG
               IF LNO < 1 THEN LNO = LN_CNT
               GOSUB 3100
            CASE LCHROPT = "ST"
               LNO = 1; GOSUB 3100
            CASE LCHROPT = "SB"
               LNO = LN_CNT; GOSUB 3100
            CASE LCHROPT[1,1] = "S" AND NUM(LCHROPT[2,99])
               LN_NO = LCHROPT[2,99] + 0
               IF LN_NO < 1 OF LN_NO > LN_CNT THEN
                  ERRMSG = "*** Invalid Selection ***"
                  GOSUB 91000
               END
               LN = LN_NO; GOSUB 3100
            END CASE
         WHILE LCHRMORE DO REPEAT
         CRT @(64,22):CL:
         FLD_LNO<FNO> = LNO; FLD_OLNO<FNO> = LN_OLD_FST
      CASE INQMODE AND PMSG = ""
      CASE 1
         MVNO = FLD_MVNO<FNO>
         SMVNO = FLD_SMVNO<FNO>
         Y = FLD_Y<FNO>
         GOSUB 7100; GOSUB 1100
      END CASE
1099*
      RETURN
*
*---- Get value
1100*
      X = FLD_X<FNO>
      IF DREC(FNO)<1,MVNO,SMVNO> # "" THEN
         O.R = "O"
         IF FLD_CNV<FNO> = "" THEN
            DEFAULT = DREC(FNO)<1,MVNO,SMVNO>
         END ELSE
            DEFAULT = OCONV(DREC(FNO)<1,MVNO,SMVNO>,FLD_CNV<FNO>)
         END
      END
      CALL EDIT.SUB
      BEGIN CASE
      CASE VALUE # "???"
         GOTO 1130
      CASE IDNUM OR INQMODE
         GOTO 1130
      CASE FLD_IPTR<FNO> = 0
         GOTO 1130
      END CASE
      MAT GEN.XREF.REC = ""
      GXR.CO = CONO
      GXR.NAME = "GEN.CODE"
      GXR.FILE = FILE.VARS(TBL_LOC<FLD_IPTR<FNO>>)
      GXR.SORT.FILE = TBL_IDX<FLD_IPTR<FNO>>
      CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
      CRT SCN_HDR_CRT :
      OLD1_FNO = FNO
      FOR IDNO = 1 TO IDCNT
         FNO = ID_FNO<IDNO>
         GOSUB 3110
      NEXT IDNO
      GOSUB 3000
      FNO = OLD1_FNO
      IF GXR.ID = "" THEN
         GOSUB 7100; GOTO 1100
      END ELSE
         VALUE = GXR.ID
         GXR.ID = DREC(FNO)<1,FLD_MVNO<FNO>,FLD_SMVNO<FNO>>
         DREC(FNO)<1,FLD_MVNO<FNO>,FLD_SMVNO<FNO>> = VALUE
         GOSUB 3110
         DREC(FNO)<1,FLD_MVNO<FNO>,FLD_SMVNO<FNO>> = GXR.ID
      END
1130*
      BEGIN CASE
      CASE VALUE = "END"
      CASE VALUE = DREC(FNO)<1,MVNO,SMVNO>
      CASE 1
         OLD_VALUE = DREC(FNO)<1,MVNO,SMVNO>
         DREC(FNO)<1,MVNO,SMVNO> = VALUE
         IF FLD_IPTR<FNO> > 0 THEN
            TBL_TO_READ = FLD_IPTR<FNO>
            IOFLG = 2; GOSUB 4010
            IF IOFLG = 2 THEN
               DREC(FNO)<1,MVNO,SMVNO> = OLD_VALUE
               GOSUB 7100; GOTO 1100
            END
            LOOP WHILE TBL_TO_READ # "" DO
               GOSUB 4010
            REPEAT
            FNO = OLD_FNO
         END
      END CASE
      RETURN
*
*---- Display Data
3000*
      FOR I = 1 TO FLDCNT
         FNO = I + 1
         GOSUB 3110
      NEXT I
      RETURN
3100*
      BEGIN CASE
      CASE FLD_HIDE<FNO>
      CASE FLD_SMVNO<FNO> < 1 AND FLD_MVNO<FNO> < 1
         GOSUB 3210
      CASE FLD_SMVNO<FNO> < 1
         MVNO = FLD_MVNO<FNO>
         GOSUB 3310
         IF LN_OLD_FST # LN_FST THEN
            CRT @(70,22):INT(LN_LST/LN_PG+.9) "R%2":
            GOSUB 3220
         END
      CASE FLD_MVNO<FNO> < 1
         SMVNO = FLD_SMVNO<FNO>
         GOSUB 3310
         IF LN_OLD_FST # LN_FST THEN
            CRT @(70,22):INT(LN_LST/LN_PG+.9) "R%2":
            GOSUB 3230
         END
      CASE FLD_LCHR<FNO> # ""
         LCHR = FLD_LCHR<FNO>
         MVNO = FLD_MVNO<FNO>; SMVNO = FLD_SMVNO<FNO>
         GOSUB 3310
         IF LN_OLD_FST # LN_FST THEN
            CRT @(70,22):INT(LN_LST/LN_PG+.9) "R%2":
            GOSUB 3240
         END
      CASE 1
         GOSUB 3250
      END CASE
      RETURN
3110*
      BEGIN CASE
      CASE FLD_HIDE<FNO>
      CASE FLD_SMVNO<FNO> < 1 AND FLD_MVNO<FNO> < 1
         GOSUB 3210
      CASE FLD_SMVNO<FNO> < 1
         MVNO = FLD_MVNO<FNO>
         LNO = FLD_LNO<FNO>
         LN_OLD_FST = 0
         LN_CNT = DCOUNT(DREC(FNO)<1,MVNO>,SVM)
         GOSUB 3310
         IF LN_OLD_FST # LN_FST THEN
            GOSUB 3220
         END
         FLD_OLNO<FNO> = LN_OLD_FST
      CASE FLD_MVNO<FNO> < 1
         SMVNO = FLD_SMVNO<FNO>
         LNO = FLD_LNO<FNO>
         LN_OLD_FST = 0
         LN_CNT = DCOUNT(DREC(FNO),VM)
         GOSUB 3310
         IF LN_OLD_FST # LN_FST THEN
            GOSUB 3230
         END
         FLD_OLNO<FNO> = LN_OLD_FST
      CASE FLD_LCHR<FNO> # ""
         LCHR = FLD_LCHR<FNO>
         MVNO = FLD_MVNO<FNO>; SMVNO = FLD_SMVNO<FNO>
         LNO = FLD_LNO<FNO>
         LN_OLD_FST = 0
         LN_CNT = DCOUNT(DREC(FNO),LCHR)
         GOSUB 3310
         IF LN_OLD_FST # LN_FST THEN
            GOSUB 3240
         END
         FLD_OLNO<FNO> = LN_OLD_FST
      CASE 1
         GOSUB 3250
      END CASE
      RETURN
3210*
      Y_L = FLD_Y<FNO>
      PVALUE = DREC(FNO)<1,1>
      GOSUB 3300
      RETURN
3220*
      LN_OLD_FST = LN_FST
      LN_CNTR = 1
      IF FLD_LCNT<FNO> THEN
         FOR LN_NO = LN_FST TO LN_LST
            Y_L = LN_Y + LN_SPC * MOD(LN_NO-1,LN_PG)
            PVALUE = DREC(FNO)<1,MVNO,LN_NO>
            GOSUB 3300
            LCNT = FLD_LCNT<FNO>
            SAVE_FNO = FNO
            FOR CLN = 1 TO LCNT
               FNO = FLD_LPTR<SAVE_FNO,CLN>
               PVALUE = DREC(FNO)<1,MVNO,LN_NO>
               GOSUB 3300
            NEXT CLN
            FNO = SAVE_FNO
            LN_CNTR = LN_CNTR + 1
         NEXT LN_NO
      END ELSE
         FOR LN_NO = LN_FST TO LN_LST
            Y_L = LN_Y + LN_SPC * MOD(LN_NO-1,LN_PG)
            PVALUE = DREC(FNO)<1,MVNO,LN_NO>
            GOSUB 3300
            LN_CNTR = LN_CNTR + 1
         NEXT LN_NO
      END
      GOSUB 3320
      RETURN
3230*
      LN_OLD_FST = LN_FST
      LN_CNTR = 1
      IF FLD_LCNT<FNO> THEN
         FOR LN_NO = LN_FST TO LN_LST
            Y_L = LN_Y + LN_SPC * MOD(LN_NO-1,LN_PG)
            PVALUE = DREC(FNO)<1,LN_NO,SMVNO>
            GOSUB 3300
            LCNT = FLD_LCNT<FNO>
            SAVE_FNO = FNO
            FOR CLN = 1 TO LCNT
               FNO = FLD_LPTR<SAVE_FNO,CLN>
               PVALUE = DREC(FNO)<1,LN_NO,SMVNO>
               GOSUB 3300
            NEXT CLN
            FNO = SAVE_FNO
            LN_CNTR = LN_CNTR + 1
         NEXT LN_NO
      END ELSE
         FOR LN_NO = LN_FST TO LN_LST
            Y_L = LN_Y + LN_SPC * MOD(LN_NO-1,LN_PG)
            PVALUE = DREC(FNO)<1,LN_NO,SMVNO>
            GOSUB 3300
            LN_CNTR = LN_CNTR + 1
         NEXT LN_NO
      END
      GOSUB 3320
      RETURN
3240*
      LN_OLD_FST = LN_FST
      LN_CNTR = 1
      IF FLD_LCNT<FNO> THEN
         FOR LN_NO = LN_FST TO LN_LST
            Y_L = LN_Y + LN_SPC * MOD(LN_NO-1,LN_PG)
            PVALUE = FIELD(DREC(FNO)<1,MVNO,SMVNO>,LCHR,LN_NO)
            GOSUB 3300
            LCNT = FLD_LCNT<FNO>
            SAVE_FNO = FNO
            FOR CLN = 1 TO LCNT
               FNO = FLD_LPTR<SAVE_FNO,CLN>
               PVALUE = FIELD(DREC(FNO)<1,MVNO,SMVNO>,LCHR,LN_NO)
               GOSUB 3300
            NEXT CLN
            FNO = SAVE_FNO
            LN_CNTR = LN_CNTR + 1
         NEXT LN_NO
      END ELSE
         FOR LN_NO = LN_FST TO LN_LST
            Y_L = LN_Y + LN_SPC * MOD(LN_NO-1,LN_PG)
            PVALUE = FIELD(DREC(FNO)<1,MVNO,SMVNO>,LCHR,LN_NO)
            GOSUB 3300
            LN_CNTR = LN_CNTR + 1
         NEXT LN_NO
      END
      GOSUB 3320
      RETURN
3250*
      Y_L = FLD_Y<FNO>
      PVALUE = DREC(FNO)<1,FLD_MVNO<FNO>,FLD_SMVNO<FNO>>
      GOSUB 3300
      RETURN
3300*
      IF PRT_CRT THEN
         IF FLD_CNV<FNO> = "" THEN
            CRT @(FLD_X<FNO>,Y_L) : PVALUE FLD_FMT<FNO> :
         END ELSE
            CRT @(FLD_X<FNO>,Y_L) : OCONV(PVALUE,FLD_CNV<FNO>) FLD_FMT<FNO> :
         END
      END ELSE
         IF FLD_CNV<FNO> = "" THEN
            STMT = PVALUE FLD_FMT<FNO>
         END ELSE
            STMT = OCONV(PVALUE,FLD_CNV<FNO>) FLD_FMT<FNO>
         END
         Y_L = Y_L + 1; X_L = FLD_X<FNO>
         L = LEN(STMT) + 1
         SCN_HDR_PRT<Y_L> = SCN_HDR_PRT<Y_L>[1,X_L]:STMT:SCN_HDR_PRT<Y_L>[X_L+L,999]
         Y_L = Y_L - 1
      END
      RETURN
3310*
      LN_PG = FLD_LINES<FNO>; LN_SPC = FLD_LNSPC<FNO>
      LN_Y = FLD_Y<FNO>
      LN_FST = 1 + INT((LNO-1)/LN_PG) * LN_PG
      LN_LST = LN_FST + LN_PG - 1
      IF LN_LST > LN_CNT THEN LN_LST = LN_CNT
      RETURN
3320*
      IF FLD_LCNT<FNO> THEN
         FOR LN_NO = LN_CNTR TO LN_PG
            Y_L = LN_Y + LN_SPC * MOD(LN_NO-1,LN_PG)
            PVALUE = ""; GOSUB 3300
            SAVE_FNO = FNO; LCNT = FLD_LCNT<FNO>
            FOR CLN = 1 TO LCNT
               FNO = FLD_LPTR<SAVE_FNO,CLN>
               PVALUE = ""; GOSUB 3300
            NEXT CLN
            FNO = SAVE_FNO
         NEXT LN_NO
      END ELSE
         FOR LN_NO = LN_CNTR TO LN_PG
            Y_L = LN_Y + LN_SPC * MOD(LN_NO-1,LN_PG)
            PVALUE = ""
            GOSUB 3300
         NEXT LN_NO
      END
      RETURN
4010*
      OLD_FNO = FNO
      TTR = TBL_TO_READ<1>
      TBL_TO_READ = DELETE(TBL_TO_READ,1,0,0)
      IDNO = 0; TBL_KEY(TTR) = ""
      ICNT = DCOUNT(TBL_ID(TTR),VM)
      FOR IL = 1 TO ICNT
         BEGIN CASE
         CASE TBL_ID(TTR)<1,IL> = "CO"
            TBL_KEY(TTR) = TBL_KEY(TTR):CONO
         CASE TBL_ID_TYPE(TTR)<1,IL> = "T"
            TBL_KEY(TTR) = TBL_KEY(TTR):TBL_ID(TTR)<1,IL>
         CASE 1
            IDNO = IDNO + 1
            FNO = TBL_ID_FNO(TTR)<IL>
*
*---- Multiple Multi & Sub multi values are not supported for Item IDs
*---- Also, MVNO & SMVNO cannot reference a different ID.
*
            IF NOT(NUM(FLD_SMVNO<FNO>)) THEN
               FLD_SMVNO<FNO> = 1
            END
            IF NOT(NUM(FLD_MVNO<FNO>)) THEN
               FLD_MVNO<FNO> = 1
            END
            BEGIN CASE
            CASE FLD_SMVNO<FNO> < 1
               MVNO = FLD_MVNO<FNO>
               SMVNO = 1
            CASE FLD_MVNO<FNO> < 1
               MVNO = 1
               SMVNO = FLD_SMVNO<FNO>
            CASE 1
               MVNO = FLD_MVNO<FNO>
               SMVNO = FLD_SMVNO<FNO>
            END CASE
            TBL_KEY(TTR) = TBL_KEY(TTR):DREC(FNO)<1,MVNO,SMVNO>
         END CASE
      NEXT IL
ERRMSG="FVAR_REC<TBL_LOC<TTR>>=":FVAR_REC<TBL_LOC<TTR>>:"|"; GOSUB 91000
      READ TBL_REC(TTR) FROM FILE.VARS(TBL_LOC<TTR>), TBL_KEY(TTR) ELSE
         TBL_REC(TTR) = ""
         BEGIN CASE
         CASE IOFLG = 1
            ERRMSG = "Cannot locate (":TBL_IDX<TTR>:") record # ":DREC(FNO)<1,MVNO,SMVNO>
            GOSUB 91000
         CASE IOFLG = 2
            ERRMSG = "Cannot locate (":TBL_IDX<TTR>:") record # ":DREC(FNO)<1,MVNO,SMVNO>
            GOSUB 91000; GOTO 4019
         END CASE
      END
      CNT = DCOUNT(TBL_FLD_LOC<TTR>,VM)
      IF IOFLG THEN
         FOR IL = 1 TO CNT
            FNO = TBL_FLD_LOC<TTR,IL>
            DREC(FNO) = TBL_REC(TTR)<FLD_LOC<FNO>>
            IF FLD_IPTR<FNO> > 0 THEN
               LOCATE FLD_IPTR<FNO> IN TBL_TO_READ,1 SETTING RLOC ELSE
                  TBL_TO_READ<RLOC> = FLD_IPTR<FNO>
               END
            END
            GOSUB 3110
         NEXT IL
      END ELSE
         FOR IL = 1 TO CNT
            FNO = TBL_FLD_LOC<TTR,IL>
            DREC(FNO) = TBL_REC(TTR)<FLD_LOC<FNO>>
         NEXT IL
      END
      IOFLG = 1
4019*
      FNO = OLD_FNO
      RETURN
*
*---- Get Table Fields
7000*
      ERRMSG = ""
      MATREAD DFD.REC FROM SYS_FIELDS, FLD_NAME THEN
         BEGIN CASE
         CASE DFD_LVL = "V"
            IF FLD_MVNO<FNO> < 1 THEN
               ERRMSG = "A specific Multi Value location is required for field - ":FLD_NAME
               GOTO 7099
            END
         CASE DFD_LVL = "M"
            IF FLD_SMVNO<FNO> < 1 THEN
               ERRMSG = "A specific Sub Multi Value location is required for field - ":FLD_NAME
               GOTO 7099
            END
         CASE FLD_MVNO<FNO> = 1
         CASE FLD_SMVNO<FNO> = 1
         CASE FLD_LINES<FNO> = 1
         CASE FLD_LNSPC<FNO> = 1
         CASE 1
            ERRMSG = "An MV,SMV,LINES, or LNSPC value is not setup properly for field - ":FLD_NAME
            GOTO 7099
         END CASE
      END ELSE
         ERRMSG = "Cannot locate field (":FLD_NAME:") Definition"
         GOTO 7099
      END
      RETURN
*
*---- Setup EDIT.SUB
7100*
      LOCATE DFD_TYPE IN TYPE_INI,1 SETTING TLOC ELSE TLOC = 1
      TYP = OTYP_INI<TLOC>; SCALER = DFD_DEC
*     MAXL = DFD_LEN; MINL = DFD_MINL
      MAXL = FIELD(FLD_FMT<FNO>,"#",2); MINL = DFD_MINL
      MAXV = DFD_MAXV; MINV = DFD_MINV
*     JUSTIFY = DFD_JUSTIFY; FILL.CHR = DFD_FILL
      JUSTIFY = FIELD(FLD_FMT<FNO>,"#",1); FILL.CHR = DFD_FILL
      O.R = DFD_O_R; DEFAULT = DFD_DEFAULT
      PATRN = DFD_PATRN
      INVALCHR = FIELD(DFD_INVALCHR,",",1)
      CNT = DCOUNT(DFD_INVALCHR,",")
      FOR I = 2 TO CNT
         INVALCHR<1,I> = FIELD(DFD_INVALCHR,",",I)
      NEXT I
      ORVATDAT = DFD_ORVALDAT; VALDAT = DFD_VALDAT
      READ HMSG_REC FROM SYS_FLD_HMSG, FLD_NAME ELSE
         HMSG_REC = ""
      END
      HMSG = HMSG_REC<1>
      CNT = DCOUNT(HMSG_REC,AM)
      FOR I = 2 TO CNT
         HMSG<1,I> = HMSG_REC<I>
      NEXT I
7099*
      RETURN
*
*---- Error routines
91000 ERR.TYPE=1;CALL SYSCOM(MAT SYSCOM.REC);RETURN
* 91000*
*       CRT @(0,23):ERRMSG:CL:
*       INPUT REPLY,1_:
*       CRT @(0,23):CL:
*       RETURN
93000 ERR.TYPE=3;CALL SYSCOM(MAT SYSCOM.REC)
* 93000*
      ERRFLG = SCN_LOC
*       CRT @(0,23):ERRMSG:CL:
*       INPUT REPLY,1_:
99999*
      PASS_VARS<5> = CHGMODE
      PASS_VARS<7> = ERRFLG
      RETURN
END
