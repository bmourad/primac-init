      SUBROUTINE JKT_TRN_S(STKD_ID)
*COPY>CPYLIB>COM_FORMCTL
*********************************************************************
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* Revision      - [10.0]
* Revision Date - 08/22/95
* System        - PRIMAC
* Library       - JISBP/JKT_TRN_S
* Author        - Bilal Mourad, VERCOM Software, Inc.
*ENDDOC
*T22786 renee 04/27/1998 * Allow user to exit out of line when entring
*                          either a "matching value" or "sort sequence".
*T25024 diane 05/02/2000 * Update with version
*********************************************************************
*
*---- Data Structure Libraries
*
*COPY>JIS.CPYLIB>SYS_SCN_DEF
*COPY>JIS.CPYLIB>SYS_FIELDS
*COPY>JIS.CPYLIB>SYS_TKT_DEF
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>GEN.XREF.SUB
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>TCC
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
*
*---- SET UP SYSCOM
*
      SYS.TYPE = 1
      CALL SYSCOM(MAT SYSCOM.REC)
*
      DIM FLD_NAME_REC(13)
      DIM X_LOC_REC(13)
      DIM Y_LOC_REC(13)
      DIM FMT_REC(13)
      MAX_SNO = 2; SCNO = 1
      DIM SCN_HDR_CRT(MAX_SNO)
      DIM SCN_CLR_CRT(MAX_SNO)
*
*
      EQU WTH_X_L  TO X_LOC_REC(1)
      EQU WFLD_X_L TO X_LOC_REC(2)
      EQU WEQ_X_L TO X_LOC_REC(3)
      EQU WVAL_X_L TO X_LOC_REC(4)
      EQU SRT_X_L TO X_LOC_REC(5)
      EQU SFLD_X_L TO X_LOC_REC(6)
      EQU SSUM_X_L TO X_LOC_REC(7)
      EQU SEL_X_L TO X_LOC_REC(8)
      EQU TRN_X_L TO X_LOC_REC(9)
      EQU PC_X_L TO X_LOC_REC(10)
      EQU APL_X_L TO X_LOC_REC(11)
      EQU BATCH_X_L TO X_LOC_REC(12)
      EQU TRANS_X_L TO X_LOC_REC(13)
*
      EQU WTH_Y_L  TO Y_LOC_REC(1)
      EQU WFLD_Y_L TO Y_LOC_REC(2)
      EQU WEQ_Y_L TO Y_LOC_REC(3)
      EQU WVAL_Y_L TO Y_LOC_REC(4)
      EQU SRT_Y_L TO Y_LOC_REC(5)
      EQU SFLD_Y_L TO Y_LOC_REC(6)
      EQU SSUM_Y_L TO Y_LOC_REC(7)
      EQU SEL_Y_L TO Y_LOC_REC(8)
      EQU TRN_Y_L TO Y_LOC_REC(9)
      EQU PC_Y_L  TO Y_LOC_REC(10)
      EQU APL_Y_L TO Y_LOC_REC(11)
      EQU BATCH_Y_L TO Y_LOC_REC(12)
      EQU TRANS_Y_L TO Y_LOC_REC(13)
*
      EQU WTH_FMT  TO FMT_REC(1)
      EQU WFLD_FMT TO FMT_REC(2)
      EQU WEQ_FMT TO FMT_REC(3)
      EQU WVAL_FMT TO FMT_REC(4)
      EQU SRT_FMT TO FMT_REC(5)
      EQU SFLD_FMT TO FMT_REC(6)
      EQU SSUM_FMT TO FMT_REC(7)
      EQU SEL_FMT TO FMT_REC(8)
      EQU TRN_FMT TO FMT_REC(9)
      EQU PC_FMT TO FMT_REC(10)
      EQU APL_FMT TO FMT_REC(11)
      EQU BATCH_FMT TO FMT_REC(12)
      EQU TRANS_FMT TO FMT_REC(13)
*
      FLD_NAME_REC(1) = "STKD_WITH"
      FLD_NAME_REC(2) = "STKD_WITH_FLD"
      FLD_NAME_REC(3) = "STKD_WITH_EQ"
      FLD_NAME_REC(4) = "STKD_WITH_VAL"
      FLD_NAME_REC(5) = "STKD_SORT"
      FLD_NAME_REC(6) = "STKD_SORT_FLD"
      FLD_NAME_REC(7) = "STKD_SORT_SUM"
      FLD_NAME_REC(8) = "STKD_SELMODE"
      FLD_NAME_REC(9) = "STKD_TRN_PCFILE"
      FLD_NAME_REC(10) = "STKD_PC_APL"
      FLD_NAME_REC(11) = "STKD_APL_PCFILE"
      FLD_NAME_REC(12) = "STKD_BATCHMODE"
      FLD_NAME_REC(13) = "STKD_TRANSMODE"
*
      SCN_NAME = "JKT_TRN_S"
*
      MAT SCN_HDR_CRT = ""; MAT SCN_CLR_CRT = ""; FLD_VAR = ""
      MLN = 1; FLN = 1; SSLN = 0; PSLN = 0
      PAGE.SIZE = 3; BEGIN.MPAGE = 11; BEGIN.FPAGE = 17
      LINE.SPACE = 1; OLD.START.MLINE = 0; OLD.START.FLINE = 0
      OLD.LINES = 0; MODE = ""; STKD_VAR = ""
      M.LINES = DCOUNT(STKD_WITH_FLD,VM)
      F.LINES = DCOUNT(STKD_SORT_FLD,VM)
*
      ESN = ECD.SCRN.NO + 1
*
*---- Copy screen
*
      CALL SCN_CRT_BLD(SCN_NAME,MAT SCN_HDR_CRT,MAT SCN_CLR_CRT,ERRMSG)
      IF ERRMSG # "" THEN GOTO 93000
*
      MATREAD SSD.REC FROM SYS_SCN_DEF, SCN_NAME ELSE
         ERRMSG = "Cannot locate Setup screen - ":SCN_NAME
         GOTO 93000
      END
*
*---- Prompt messages' X & Y
*
      PMSG_X_L = 0; PMSG_Y_L = 21
*
*---- Copy data to arrays
*
      FOR OPT = 1 TO 13
         LOCATE FLD_NAME_REC(OPT) IN SSD_FIELDS<1>,1 SETTING LOC ELSE LOC=1
         X_LOC_REC(OPT) = SSD_FLD_X<1,LOC>
         Y_LOC_REC(OPT) = SSD_FLD_Y<1,LOC>
         FMT_REC(OPT) = SSD_FLD_FMT<1,LOC>
      NEXT OPT
*
*---- Type initializations
*
      TYPE_INI = "T"; TYPE_DSC = "Text"; OTYP_INI = 1
      TYPE_INI<2> = "N"; TYPE_DSC<2> = "Numeric"; OTYP_INI<2> = 3
      TYPE_INI<3> = "C"; TYPE_DSC<3> = "deCimal"; OTYP_INI<3> = 4
      TYPE_INI<4> = "A"; TYPE_DSC<4> = "Alpha"; OTYP_INI<4> = 2
      TYPE_INI<5> = "D"; TYPE_DSC<5> = "Date"; OTYP_INI<5> = 6
      TYPE_INI<6> = "L"; TYPE_DSC<6> = "Logical"; OTYP_INI<6> = 8
      TYPE_INI<7> = "P"; TYPE_DSC<7> = "Pattern"; OTYP_INI<7> = 7
      TYPE_INI<8> = "U"; TYPE_DSC<8> = "coUnter"; OTYP_INI<8> = 3
*
*---- Prompt messages
*
      PMSG1 = "Enter # to change, (M)atching values, (S)orting Sequence, (E)nd :"
      PMSG2 = "(A)dd, (C)hange, (I)nsert, (D)elete, (S)croll, (E)nd :"
      PMSG3 = "Line Number :"
*
*---- Print screen
*
*      CRT SCN_HDR_CRT(SCNO):
      IF PC.PORT.TYPE = "termulator" THEN
         TFILE = "JISFORMS"
         TNAME = "JKT_TRN_S"
         M_FRMHNDL = ""
TU_FUNC = "TU.FORM.LOAD":TU_VERNO     ;*T25024
         CALL @TU_FUNC(TFILE,TNAME,M_FRMHNDL,"",FRMHNDL,ERROR)     ;*T25024
         IF ERROR = 0 THEN
            GUIFORM = FRMHNDL
         END ELSE
            PC.PORT.TYPE = "STD"
            GUIFORM = ""
            CRT SCN_HDR_CRT(SCNO):
         END
      END ELSE
         GUIFORM = ""
         CRT SCN_HDR_CRT(SCNO):
      END
      GOSUB 8100; GOSUB 1500; GOSUB 1700
      GOSUB 2500; GOSUB 2700
*
*---- Prompt line
*
      MORE = 1
      LOOP
         X = PMSG_X_L; Y = PMSG_Y_L
         TYP = 1; MAXL = 4; DEFAULT = ""
         PMSG = PMSG1; CALL EDIT.SUB
         VALUE = OCONV(VALUE,"MCU")
         BEGIN CASE
            CASE VALUE = "E" OR VALUE = "END"
               MORE = 0
            CASE VALUE = "M"
               GOSUB 1000
            CASE VALUE = "S"
               GOSUB 2000
            CASE NOT(NUM(VALUE))
            CASE VALUE >= 1 AND VALUE <= 6
               OPT = VALUE
               ON OPT GOSUB 110,120,130,140,150,160
            CASE 1
               ERRMSG = "*** OUT OF RANGE ***"
               GOSUB 91000
         END CASE
      WHILE MORE DO REPEAT
      IF GUIFORM THEN
TU_FUNC = "TU.FORM.KILL":TU_VERNO     ;*T25024
         CALL @TU_FUNC(GUIFORM,ERROR)     ;*T25024
      END
      GOTO 99999
*---- End of loop
*
*
*---- Batch Mode
*
110*
      FLD_NAME = "STKD_BATCHMODE"
      GOSUB 5000
      IF ERRMSG = "" THEN
         GOSUB 6000
         X = BATCH_X_L; Y = BATCH_Y_L; O.R = "O"
         IF STKD_BATCHMODE # "" THEN
            IF STKD_BATCHMODE = 1 THEN
               DEFAULT = "Y"
            END ELSE
               DEFAULT = "N"
            END
         END ELSE
            DEFAULT = "N"
         END
         CALL EDIT.SUB
         IF VALUE # "END" THEN
            IF VALUE = "Y" THEN
               STKD_BATCHMODE = 1
            END ELSE
               STKD_BATCHMODE = 0
            END
         END
      END ELSE
         GOSUB 91000
      END
      RETURN
*
*---- Transfer Mode
*
120*
      FLD_NAME = "STKD_TRANSMODE"
      GOSUB 5000
      IF ERRMSG = "" THEN
         GOSUB 6000
         X = TRANS_X_L; Y = TRANS_Y_L; O.R = "O"
         IF STKD_TRANSMODE # "" THEN
            IF STKD_TRANSMODE = 1 THEN
               DEFAULT = "Y"
            END ELSE
               DEFAULT = "N"
            END
         END ELSE
            DEFAULT = "N"
         END
         CALL EDIT.SUB
         IF VALUE # "END" THEN
            IF VALUE = "Y" THEN
               STKD_TRANSMODE = 1
            END ELSE
               STKD_TRANSMODE = 0
            END
         END
      END ELSE
         GOSUB 91000
      END
      RETURN
*
*---- Select Mode
*
130*
      FLD_NAME = "STKD_SELMODE"
      GOSUB 5000
      IF ERRMSG = "" THEN
         GOSUB 6000
         X = SEL_X_L; Y = SEL_Y_L
         IF STKD_SELMODE # "" THEN
            O.R = "O"
            DEFAULT = STKD_SELMODE
         END ELSE
            O.R = "R"; DEFAULT = ""
         END
         CALL EDIT.SUB
         IF VALUE # "END" THEN
            STKD_SELMODE = VALUE
         END ELSE
            STKD_SELMODE = ""
         END
      END ELSE
         GOSUB 91000
      END
      RETURN
*
*---- PC Transfer name
*
140*
      OPT = ""
      FLD_NAME = "STKD_TRN_PCFILE"
      GOSUB 5000
      IF ERRMSG = "" THEN
         GOSUB 6000
         X = TRN_X_L; Y = TRN_Y_L
         IF STKD_TRN_PCFILE # "" THEN
            O.R = "O"
            DEFAULT = STKD_TRN_PCFILE
         END ELSE
            O.R = "R"; DEFAULT = ""
         END
         CALL EDIT.SUB
         IF VALUE # "END" THEN
            STKD_TRN_PCFILE = VALUE
         END
      END ELSE
         GOSUB 91000
      END
      RETURN
*
*---- PC Application name
*
150*
      OPT = ""
      FLD_NAME = "STKD_PC_APL"
      GOSUB 5000
      IF ERRMSG = "" THEN
         GOSUB 6000
         X = PC_X_L; Y = PC_Y_L
         IF STKD_PC_APL # "" THEN
            O.R = "O"
            DEFAULT = STKD_PC_APL
         END ELSE
            O.R = "R"; DEFAULT = ""
         END
         CALL EDIT.SUB
         IF VALUE # "END" THEN
            STKD_PC_APL = VALUE
         END
      END ELSE
         GOSUB 91000
      END
      RETURN
*
*---- PC application file name
*
160*
      OPT = ""
      FLD_NAME = "STKD_APL_PCFILE"
      GOSUB 5000
      IF ERRMSG = "" THEN
         GOSUB 6000
         X = APL_X_L; Y = APL_Y_L
         IF STKD_APL_PCFILE # "" THEN
            O.R = "O"
            DEFAULT = STKD_APL_PCFILE
         END ELSE
            O.R = "R"; DEFAULT = ""
         END
         CALL EDIT.SUB
         IF VALUE # "END" THEN
            STKD_APL_PCFILE = VALUE
         END
      END ELSE
         GOSUB 91000
      END
      RETURN
*
*---- Matching Values
*
1000*
      IF M.LINES < 1 THEN
         GOSUB 1100
      END
      MORE1 = 1
      LOOP
         X = PMSG_X_L; Y = PMSG_Y_L; MAXL = 4; MINL = 1
         O.R = "O"; TYP = 1; PMSG = PMSG2; CALL EDIT.SUB
         OPTION = VALUE
         BEGIN CASE
            CASE OPTION = "E" OR OPTION = "END"
               MORE1 = 0
            CASE OPTION[1,1] = "S" OR OPTION = ""
               GOSUB 1400
            CASE OPTION = "A"
               GOSUB 1100
            CASE OPTION = "D" AND M.LINES > 0
               GOSUB 1300
               IF LNO # 0 THEN
                  MLN = LNO
                  STKD_WITH = DELETE(STKD_WITH,1,MLN,0)
                  STKD_WITH_FLD = DELETE(STKD_WITH_FLD,1,MLN,0)
                  STKD_WITH_EQ = DELETE(STKD_WITH_EQ,1,MLN,0)
                  STKD_WITH_VAL = DELETE(STKD_WITH_VAL,1,MLN,0)
                  M.LINES = M.LINES - 1; MLN = OLD.START.MLINE
                  IF MLN > M.LINES THEN MLN = M.LINES
                  OLD.START.MLINE = 0; GOSUB 1500; GOSUB 1750
               END
            CASE OPTION = "C" AND M.LINES > 0
               MODE = "C"; GOSUB 1300
               BEGIN CASE
                  CASE LNO = "0"
                  CASE NUM(LNO)
                     MLN = LNO; GOSUB 1200
               END CASE
            CASE OPTION = "I" AND M.LINES > 0
               MODE = "B"; GOSUB 1300
               IF LNO > 0 THEN
                  STKD_WITH = INSERT(STKD_WITH,1,LNO,0,"")
                  STKD_WITH_FLD = INSERT(STKD_WITH_FLD,1,LNO,0,"")
                  STKD_WITH_EQ = INSERT(STKD_WITH_EQ,1,LNO,0,"")
                  STKD_WITH_VAL = INSERT(STKD_WITH_VAL,1,LNO,0,"")
                  OLD.START.MLINE = 0; M.LINES = M.LINES + 1; GOSUB 1500
                  GOSUB 1750; MLN = LNO; GOSUB 1200
               END
               OLD.START.MLINE = 0; GOSUB 1500
            CASE 1
               ERRMSG = "*** INVALID ENTRY ***"
               GOSUB 91000
         END CASE
      WHILE MORE1 DO REPEAT
      RETURN
*
*----  Add mode
*
1100*
      MODE = "A"
      LOOP
         MLN = M.LINES + 1
         OLD.LINES = M.LINES
         GOSUB 1500
         GOSUB 1200
      WHILE M.LINES > OLD.LINES DO
         GOSUB 1700
      REPEAT
      MLN = M.LINES
      OLD.START.MLINE = 0; GOSUB 1500; GOSUB 1750
      RETURN
*
*---- Prompt lines in paging area
*
1200*
      SSLN = BEGIN.MPAGE + LINE.SPACE * MOD(MLN-1,PAGE.SIZE)
*      CRT @(0,SSLN): MLN "R%3":
      P_X = 0 ; P_Y = SSLN ; P_VALUE = MLN "R%3" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      GET_WITH = ""
      IF MLN = 1 THEN
         GOTO 1210
      END
      FLD_NAME = "STKD_WITH"; GOSUB 5000
      IF ERRMSG = "" THEN
         GOSUB 6000; X = WTH_X_L; Y = SSLN
         O.R = "O"; DEFAULT = "A"
         CALL EDIT.SUB 
         BEGIN CASE
* T22786    CASE VALUE = "END"
            CASE VALUE = "END" OR VALUE = "E"      ; * T22786
               GOSUB 1250
               GOTO 1299
            CASE VALUE = ""
*            GET_WITH = DVAL
*            GET_WITH = "A"
*            CRT @(WTH_X_L,SSLN):GET_WITH WTH_FMT:
            CASE VALUE = "A" OR VALUE = "O"
               GET_WITH = VALUE
            CASE 1
               ERRMSG = "** INVALID CHARACTER (":VALUE:") INPUT **"
               GOSUB 91000; GOTO 1200
         END CASE
1210*
         FLD_NAME = "STKD_WITH_FLD"; GOSUB 5000
         IF ERRMSG = "" THEN
            GOSUB 6000; X = WFLD_X_L; Y = SSLN; O.R = "R"
            IF STKD_WITH_FLD<1,MLN> # "" THEN
               O.R = "O"; DEFAULT = STKD_WITH_FLD<1,MLN>
            END
            CALL EDIT.SUB
            BEGIN CASE 
               CASE VALUE = "END"
                  IF MLN = 1 THEN
                     GOSUB 1250; GOTO 1299
                  END ELSE
                     GOTO 1200
                  END
               CASE VALUE = "???"
                  MAT GEN.XREF.REC = ""
                  GXR.NAME = "AM.SEL1"
                  GXR.VALUE1 = STKD_ID:"*FLD"
                  GXR.FILE = SYS_TKT_DEF
                  GXR.OPEN.XREF = "SYS_TKT_DEF"
                  GXR.SRCH.ID = GXR.VALUE1
                  CALL GEN.XREF.SUB(MAT GEN.XREF.REC,PREFIX,XREF.DATA)
*               CRT SCN_HDR_CRT(SCNO):
                  IF GUIFORM = "" THEN
                     CRT SCN_HDR_CRT(SCNO):
                  END
                  GOSUB 8100; OLD.START.MLINE = 0; GOSUB 1500; GOSUB 1700
                  OLD.START.FLINE = 0; GOSUB 2500; GOSUB 2700
                  SSLN = BEGIN.MPAGE + LINE.SPACE * MOD(MLN-1,PAGE.SIZE)
*                  CRT @(0,SSLN): MLN "R%3":
*                  CRT @(WTH_X_L,SSLN):GET_WITH WTH_FMT:
                  P_X = 0 ; P_Y = SSLN ; P_VALUE = MLN "R%3" ; P_OPT = ""
                  P_X := AM:0 ; P_Y := AM:SSLN ; P_VALUE := AM:GET_WITH WTH_FMT
                  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
                  IF GXR.ID = "" THEN  GOTO 1210
                  VALUE = GXR.ID
*                  CRT @(WFLD_X_L,SSLN): VALUE WFLD_FMT:
                  P_X = WFLD_X_L ; P_Y = SSLN ; P_VALUE = VALUE WFLD_FMT ; P_OPT = ""
                  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
            END CASE
            READ STKD_VAR FROM SYS_TKT_DEF, STKD_ID:"*FLD" THEN
               LOCATE VALUE IN STKD_VAR,1 SETTING FNUM THEN
                  GET_FLD = VALUE
               END ELSE
                  ERRMSG = "*** Entry is not a field in table SYS_TKT_DEF ***"
                  GOSUB 91000; GOTO 1210
               END
            END ELSE
               ERRMSG = "** Cannot locate field name - ":VALUE
               GOSUB 91000; GOTO 1210
            END
1220*
            FLD_NAME = "STKD_WITH_EQ"; GOSUB 5000
            IF ERRMSG = "" THEN
               GOSUB 6000; X = WEQ_X_L; Y = SSLN
               O.R = "O"
               IF STKD_WITH_EQ<1,MLN> # "" THEN
                  DEFAULT = STKD_WITH_EQ<1,MLN>
               END ELSE
                  DEFAULT = "EQ"
               END
               CALL EDIT.SUB
               IF VALUE = "END" THEN GOTO 1200
               GET_EQ = VALUE
1230*
               FLD_NAME = "STKD_WITH_VAL"; GOSUB 5000
               IF ERRMSG = "" THEN
                  GOSUB 6000; X = WVAL_X_L; Y = SSLN
                  O.R = "O"
                  IF STKD_WITH_VAL<1,MLN> # "" THEN
                     DEFAULT = STKD_WITH_VAL<1,MLN>
                  END
                  CALL EDIT.SUB
                  IF VALUE = "END" THEN GOTO 1200
                  STKD_WITH_VAL<1,MLN> = VALUE
               END ELSE
                  GOSUB 91000
               END
            END ELSE
               GOSUB 91000
            END
         END ELSE
            GOSUB 91000
         END
      END ELSE
         GOSUB 91000
      END
      STKD_WITH<1,MLN> = GET_WITH
      STKD_WITH_FLD<1,MLN> = GET_FLD
      STKD_WITH_EQ<1,MLN> = GET_EQ
      M.LINES = DCOUNT(STKD_WITH_FLD,VM)
1299**
      RETURN
*
*---- Clear line
*
1250*
      BEGIN CASE
         CASE MODE = "A"
*            CRT @(0,SSLN): CL:
            P_X = 0 ; P_Y = SSLN ; P_VALUE = "" ; P_OPT = "CL"
            CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         CASE MODE = "B"
            DEL STKD_WITH<1,MLN>
            DEL STKD_WITH_FLD<1,MLN>
            DEL STKD_WITH_EQ<1,MLN>
            DEL STKD_WITH_VAL<1,MLN>
            M.LINES = DCOUNT(STKD_WITH_FLD,VM)
         CASE 1
            N = MLN; GOSUB 1600
      END CASE
      RETURN
*
*---- Check line number
*
1300*
      OLD.START.MLINE = 0; GOSUB 1500
      X = PMSG_X_L
      Y = PMSG_Y_L; MINL = 1; MAXL = 3; O.R = "O"; TYP = 1; DEFAULT = ""
      PMSG = PMSG3; CALL EDIT.SUB
      BEGIN CASE
         CASE VALUE = "" OR VALUE = "END"
            LNO = 0
         CASE NOT(NUM(VALUE))
            ERRMSG = "*** INVALID ENRTY ***"
            GOSUB 91000; GOTO 1300
         CASE VALUE >= START.MLINE AND VALUE <= LAST.MLINE
            LNO = VALUE
         CASE 1
            ERRMSG = "*** OUT OF RANGE ***"
            GOSUB 91000; GOTO 1300
      END CASE
      RETURN
*
*---- Find page of scroll
*
1400*
      OPT2 = OPTION[2,1]
      BEGIN CASE
         CASE OPT2 = "" OR OPT2 = "F"
            MLN = MLN + PAGE.SIZE
            IF MLN > M.LINES THEN MLN = 1
         CASE OPT2 = "R"
            MLN = MLN - PAGE.SIZE
            IF MLN < 1 THEN MLN = 1
         CASE OPT2 = "T"
            MLN = 1
         CASE OPT2 = "B"
            MLN = M.LINES
            IF MLN < 1 THEN MLN = 1
         CASE NUM(OPT2)
            LN.NO = OPTION[2,99]
            IF LN.NO < 1 OR LN.NO > M.LINES THEN
               ERRMSG = "*** INVALID SELECTION ***"
               GOSUB 91000
            END ELSE
               MLN = LN.NO
            END
      END CASE
*
*---- Print data
*
1500*
      START.MLINE = 1 + INT((MLN - 1)/PAGE.SIZE) * PAGE.SIZE
      LAST.MLINE = START.MLINE + PAGE.SIZE - 1
      IF LAST.MLINE > M.LINES THEN LAST.MLINE = M.LINES
      IF START.MLINE = OLD.START.MLINE THEN GOTO 1599
      OLD.START.MLINE = START.MLINE
      PAGE.NO = INT(LAST.MLINE/PAGE.SIZE+.9) "R%2"
*      CRT @(70,14): PAGE.NO:
      P_X = 70 ; P_Y = 14 ; P_VALUE = PAGE.NO ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      CNT = 1
      FOR N = START.MLINE TO LAST.MLINE
         SSLN = BEGIN.MPAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
         GOSUB 1600
         CNT = CNT + 1
      NEXT N
      GOSUB 1800
1599*
      RETURN
*
*---- Print Line
*
1600*
*      CRT @(0,SSLN):N "R%3":
*      CRT @(WTH_X_L,SSLN):STKD_WITH<1,N> WTH_FMT:
*      CRT @(WFLD_X_L,SSLN):STKD_WITH_FLD<1,N> WFLD_FMT:
*      CRT @(WEQ_X_L,SSLN):STKD_WITH_EQ<1,N> WEQ_FMT:
*      CRT @(WVAL_X_L,SSLN):STKD_WITH_VAL<1,N> WVAL_FMT:CL:
      P_X = 0 ; P_Y = SSLN ; P_VALUE = N "R%3" ; P_OPT = ""
      P_X := AM:WTH_X_L ; P_Y := AM:SSLN ; P_VALUE := AM:STKD_WITH<1,N> WTH_FMT
      P_X := AM:WFLD_X_L ; P_Y := AM:SSLN ; P_VALUE := AM:STKD_WITH_FLD<1,N> WFLD_FMT
      P_X := AM:WEQ_X_L ; P_Y := AM:SSLN ; P_VALUE := AM:STKD_WITH_EQ<1,N> WEQ_FMT
      P_X := AM:WVAL_X_L ; P_Y := AM:SSLN ; P_VALUE := AM:STKD_WITH_VAL<1,N> WVAL_FMT
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      RETURN
*
*---- Print page no & pages
*
1700*
      PAGE.NO = INT(MLN/PAGE.SIZE+.9) "R%2"
*      CRT @(70,14):PAGE.NO:
      P_X = 70 ; P_Y = 14 ; P_VALUE = PAGE.NO ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
1750*
      PAGES = INT(M.LINES/PAGE.SIZE+.9) "R%2"
*      CRT @(76,14): PAGES:
      P_X = 76 ; P_Y = 14 ; P_VALUE = PAGES ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      RETURN
*
*
1800*
      FOR N = CNT TO PAGE.SIZE
         SSLN = BEGIN.MPAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
*         CRT @(0,SSLN):CL:
         P_X = 0 ; P_Y = SSLN ; P_VALUE = "" ; P_OPT = "CL"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      NEXT N
      RETURN
*
*----
*
2000*
      IF F.LINES < 1 THEN
         GOSUB 2100
      END
      MORE1 = 1
      LOOP
         X = PMSG_X_L; Y = PMSG_Y_L; MAXL = 4; MINL = 1
         O.R = "O"; TYP = 1; PMSG = PMSG2; CALL EDIT.SUB
         OPTION = VALUE
         BEGIN CASE
            CASE OPTION = "E" OR OPTION = "END"
               MORE1 = 0
            CASE OPTION[1,1] = "S" OR OPTION = ""
               GOSUB 2400
            CASE OPTION = "A"
               GOSUB 2100
            CASE OPTION = "D" AND F.LINES > 0
               MODE = "B"; GOSUB 2300
               IF LNO # 0 THEN
                  FLN = LNO
                  STKD_SORT = DELETE(STKD_SORT,1,FLN,0)
                  STKD_SORT_FLD = DELETE(STKD_SORT_FLD,1,FLN,0)
                  F.LINES = F.LINES - 1; FLN = OLD.START.FLINE
                  IF FLN > F.LINES THEN FLN = F.LINES
                  OLD.START.FLINE = 0; GOSUB 2500; GOSUB 2750
               END
            CASE OPTION = "C" AND F.LINES > 0
               MODE = "C"; GOSUB 2300
               BEGIN CASE
                  CASE LNO = "0"
                  CASE NUM(LNO)
                     FLN = LNO; GOSUB 2200
               END CASE
            CASE OPTION = "I" AND F.LINES > 0
               MODE = "B"; GOSUB 2300
               IF LNO > 0 THEN
                  STKD_SORT = INSERT(STKD_SORT,1,LNO,0,"")
                  STKD_SORT_FLD = INSERT(STKD_SORT_FLD,1,LNO,0,"")
                  OLD.START.FLINE = 0; F.LINES = F.LINES + 1; GOSUB 2500
                  GOSUB 2750; FLN = LNO; GOSUB 2200
               END
               OLD.START.FLINE = 0; GOSUB 2500
            CASE 1
               ERRMSG = "*** INVALID ENTRY ***"
               GOSUB 91000
         END CASE
      WHILE MORE1 DO REPEAT
      RETURN
*
*----  Add mode
*
2100*
      MODE = "A"
      LOOP
         FLN = F.LINES + 1
         OLD.LINES = F.LINES
         GOSUB 2500
         GOSUB 2200
      WHILE F.LINES > OLD.LINES DO
         GOSUB 2700
      REPEAT
      FLN = F.LINES
      OLD.START.FLINE = 0; GOSUB 2500; GOSUB 2750
      RETURN
*
*---- Prompt lines in paging area
*
2200*
      PSLN = BEGIN.FPAGE + LINE.SPACE * MOD(FLN-1,PAGE.SIZE)
*      CRT @(0,PSLN): FLN "R%3":
      P_X = 0 ; P_Y = PSLN ; P_VALUE = FLN "R%3" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      FLD_NAME = "STKD_SORT"; GOSUB 5000
      IF ERRMSG = "" THEN
         GOSUB 6000
         X = SRT_X_L; Y = PSLN
         O.R = "O"; DEFAULT = ""
         IF STKD_SORT<1,FLN> # "" THEN
            DEFAULT = STKD_SORT<1,FLN>
         END ELSE
            DEFAULT = "A"
         END
         CALL EDIT.SUB
* T22786 IF VALUE = "END" THEN
         IF VALUE = "END" OR VALUE = "E" THEN     ; * T22786
            GOSUB 2250
            GOTO 2299
         END ELSE
            GET_SORT = VALUE
         END 
2210*
         FLD_NAME = "STKD_SORT_FLD"
         GOSUB 5000
         IF ERRMSG = "" THEN
            GOSUB 6000
            X = SFLD_X_L; Y = PSLN
            IF STKD_SORT_FLD<1,FLN> # "" THEN
               O.R = "O"
               DEFAULT = STKD_SORT_FLD<1,FLN>
            END
            CALL EDIT.SUB
            READU STKD_VAR FROM SYS_TKT_DEF,STKD_ID:"*FLD" THEN
               STKD_VAR = INSERT(STKD_VAR,-1,0,0,"@ID")
               WRITE STKD_VAR ON SYS_TKT_DEF, STKD_ID:"*FLD"
            END
            BEGIN CASE
               CASE VALUE = "END"
                  GOTO 2200
               CASE VALUE = "???" 
                  MAT GEN.XREF.REC = ""
                  GXR.NAME = "AM.SEL1"
                  GXR.FILE = SYS_TKT_DEF
                  GXR.OPEN.XREF = "SYS_TKT_DEF"
                  GXR.SRCH.ID = STKD_ID:"*FLD"
                  CALL GEN.XREF.SUB(MAT GEN.XREF.REC,PREFIX,XREF.DATA)
*               CRT SCN_HDR_CRT(SCNO):
                  IF GUIFORM = "" THEN
                     CRT SCN_HDR_CRT(SCNO):
                  END
                  GOSUB 8100; OLD.START.MLINE = 0; GOSUB 1500; GOSUB 1700
                  OLD.START.FLINE = 0; GOSUB 2500; GOSUB 2700
                  PSLN = BEGIN.FPAGE + LINE.SPACE * MOD(FLN-1,PAGE.SIZE)
*                  CRT @(0,PSLN): FLN "R%3":
*                  CRT @(SRT_X_L,PSLN): GET_SORT SRT_FMT:
                  P_X = 0 ; P_Y = PSLN ; P_VALUE = FLN "R%3" ; P_OPT = ""
                  P_X := AM:SRT_X_L ; P_Y := AM:PSLN ; P_VALUE := AM:GET_SORT SRT_FMT
                  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
                  IF GXR.ID = "" THEN GOTO 2210
                  VALUE = GXR.ID
*                  CRT @(SFLD_X_L,PSLN): VALUE SFLD_FMT:
                  P_X = SFLD_X_L ; P_Y = PSLN ; P_VALUE = VALUE SFLD_FMT ; P_OPT = ""
                  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
            END CASE
            READU STKD_VAR FROM SYS_TKT_DEF, STKD_ID:"*FLD" THEN
               LOCATE VALUE IN STKD_VAR,1 SETTING FNUM THEN
                  LOCATE VALUE IN STKD_SORT_FLD<1>,1 SETTING QNUM THEN
                     IF QNUM # FLN THEN
                        ERRMSG = "** This entry has been used **"
                        GOSUB 91000; GOSUB 2210
                     END ELSE
                        GET_SFLD = VALUE
                     END
                  END ELSE
                     GET_SFLD = VALUE
                  END
               END ELSE
                  ERRMSG = "*** Entry is not a field in table SYS_TKT_DEF"
                  GOSUB 91000; GOTO 2210
               END
               STKD_VAR = DELETE(STKD_VAR,DCOUNT(STKD_VAR,AM),00)
               WRITE STKD_VAR ON SYS_TKT_DEF, STKD_ID:"*FLD"
            END ELSE
               ERRMSG = "*** Cannot locate field name - ":VALUE
               GOSUB 91000; GOTO 2210
            END
            FLD_NAME = "STKD_SORT_SUM"; GOSUB 5000
            IF ERRMSG = "" THEN
               GOSUB 6000; X = SSUM_X_L; Y = PSLN; O.R = "O"
               IF STKD_SORT_SUM<1,FLN> # "" THEN
                  DEFAULT = STKD_SORT_SUM<1,FLN>
               END
               CALL EDIT.SUB
               IF VALUE = "END" THEN GOTO 2200
               STKD_SORT_SUM<1,FLN> = VALUE
            END ELSE
               GOSUB 91000
            END
         END ELSE
            GOSUB 91000
         END
      END ELSE
         GOSUB 91000
      END
      STKD_SORT<1,FLN> = GET_SORT
      STKD_SORT_FLD<1,FLN> = GET_SFLD
      F.LINES = DCOUNT(STKD_SORT_FLD,VM)
2299*
      RETURN
*
*----  Check for END entry
*
2250*
      BEGIN CASE
         CASE MODE = "A"
*            CRT @(0,PSLN): CL:
            P_X = 0 ; P_Y = PSLN ; P_VALUE = "" ; P_OPT = "CL"
            CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         CASE MODE = "B"
            DEL STKD_SORT<1,FLN>
            DEL STKD_SORT_FLD<1,FLN>
            F.LINES = DCOUNT(STKD_SORT_FLD,VM)
         CASE 1
            N = FLN; GOSUB 2600
      END CASE
      RETURN
*
*---- Check line number
*
2300*
      OLD.START.FLINE = 0; GOSUB 2500
      X = PMSG_X_L
      Y = PMSG_Y_L; MINL = 1; MAXL = 3; O.R = "O"; TYP = 1; DEFAULT = ""
      PMSG = PMSG3; CALL EDIT.SUB
      BEGIN CASE
         CASE VALUE = "" OR VALUE = "END"
            LNO = 0
         CASE NOT(NUM(VALUE))
            ERRMSG = "*** INVALID ENRTY ***"
            GOSUB 91000; GOTO 2300
         CASE VALUE >= START.FLINE AND VALUE <= LAST.FLINE
            LNO = VALUE
         CASE 1
            ERRMSG = "*** OUT OF RANGE ***"
            GOSUB 91000; GOTO 2300
      END CASE
      RETURN
*
*---- Find page of scroll
*
2400*
      OPT2 = OPTION[2,1]
      BEGIN CASE
         CASE OPT2 = "" OR OPT2 = "F"
            FLN = FLN + PAGE.SIZE
            IF FLN > F.LINES THEN FLN = 1
         CASE OPT2 = "R"
            FLN = FLN - PAGE.SIZE
            IF FLN < 1 THEN FLN = 1
         CASE OPT2 = "T"
            FLN = 1
         CASE OPT2 = "B"
            FLN = F.LINES
            IF FLN < 1 THEN FLN = 1
         CASE NUM(OPT2)
            LN.NO = OPTION[2,99]
            IF LN.NO < 1 OR LN.NO > F.LINES THEN
               ERRMSG = "*** INVALID ENTRY ***"
               GOSUB 91000
            END ELSE
               FLN = LN.NO
            END
      END CASE
*
*
2500*
      START.FLINE = 1 + INT((FLN - 1)/PAGE.SIZE) * PAGE.SIZE
      LAST.FLINE = START.FLINE + PAGE.SIZE - 1
      IF LAST.FLINE > F.LINES THEN LAST.FLINE = F.LINES
      IF START.FLINE = OLD.START.FLINE THEN GOTO 2599
      OLD.START.FLINE = START.FLINE
      PAGE.NO = INT(LAST.FLINE/PAGE.SIZE+.9) "R%2"
*      CRT @(70,20): PAGE.NO:
      P_X = 70 ; P_Y = 20 ; P_VALUE = PAGE.NO ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      CNT = 1
      FOR N = START.FLINE TO LAST.FLINE
         PSLN = BEGIN.FPAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
         GOSUB 2600
         CNT = CNT + 1
      NEXT N
      GOSUB 2800
2599*
      RETURN
*
*---- Print line
*
2600*
*      CRT @(0,PSLN):N "R%3":CL:
*      CRT @(SRT_X_L,PSLN):STKD_SORT<1,N> SRT_FMT:CL:
*      CRT @(SFLD_X_L,PSLN):STKD_SORT_FLD<1,N> SFLD_FMT:CL:
*      CRT @(SSUM_X_L,PSLN):STKD_SORT_SUM<1,N> SSUM_FMT:CL:
      P_X = 0 ; P_Y = PSLN ; P_VALUE = N "R%3" ; P_OPT = "CL"
      P_X := AM:SRT_X_L ; P_Y := AM:PSLN ; P_VALUE := AM:STKD_SORT<1,N> SRT_FMT
      P_X := AM:SFLD_X_L ; P_Y := AM:PSLN ; P_VALUE := AM:STKD_SORT_FLD<1,N> SFLD_FMT
      P_X := AM:SSUM_X_L ; P_Y := AM:PSLN ; P_VALUE := AM:STKD_SORT_SUM<1,N> SSUM_FMT
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      RETURN
*
*---- Print page.no & pages
*
2700*
      PAGE.NO = INT(FLN/PAGE.SIZE+.9) "R%2"
*      CRT @(70,20): PAGE.NO:
      P_X = 70 ; P_Y = 20 ; P_VALUE = PAGE.NO ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
2750*
      PAGES = INT(F.LINES/PAGE.SIZE+.99) "R%2"
*      CRT @(76,20): PAGES:
      P_X = 76 ; P_Y = 20 ; P_VALUE = PAGES ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      RETURN
*
*
2800*
      FOR N = CNT TO PAGE.SIZE
         PSLN = BEGIN.FPAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
*         CRT @(0,PSLN):CL:
         P_X = 0 ; P_Y = PSLN ; P_VALUE = "" ; P_OPT = "CL"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      NEXT N
      RETURN
*---- Get field Definition
5000*
      ERRMSG = ""
      MATREAD DFD.REC FROM SYS_FIELDS, FLD_NAME ELSE
         ERRMSG = "Cannot locate field (":FLD_NAME:") Definition"
      END
      RETURN
*
*---- Setup EDIT.SUB
6000*
      LOCATE DFD_TYPE IN TYPE_INI,1 SETTING TLOC ELSE TLOC = 1
      TYP = OTYP_INI<TLOC>; SCALER = DFD_DEC
      MAXL = DFD_LEN; MINL = DFD_MINL
      MAXV = DFD_MAXV; MINV = DFD_MINV
      JUSTIFY = DFD_JUSTIFY; FILL.CHR = DFD_FILL
      O.R = DFD_O_R; DEFAULT = DFD_DEFAULT
      PATRN = DFD_PATRN
      INVALCHR = FIELD(DFD_INVALCHR,",",1)
      CNT = DCOUNT(DFD_INVALCHR,",")
      FOR I = 2 TO CNT
         INVALCHR<1,I> = FIELD(DFD_INVALCHR,",",I)
      NEXT I
      ORVATDAT = DFD_ORVALDAT; VALDAT = DFD_VALDAT
      READ HMSG_REC FROM SYS_FLD_HMSG, FLD_NAME ELSE
         HMSG_REC = ""
      END
      HMSG = HMSG_REC<1>
      CNT = DCOUNT(HMSG_REC,AM)
      FOR I = 2 TO CNT
         HMSG<1,I> = HMSG_REC<I>
      NEXT I
      RETURN
*
*---- Fill data in non-paging fields
*
8100*
      IF STKD_BATCHMODE = "1" THEN
*         CRT @(BATCH_X_L,BATCH_Y_L):"Y":CL:
P_X = BATCH_X_L ; P_Y = BATCH_Y_L ; P_VALUE = "Y" ; P_OPT = "CL"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      END ELSE
*         CRT @(BATCH_X_L,BATCH_Y_L):"N":CL:
P_X = BATCH_X_L ; P_Y = BATCH_Y_L ; P_VALUE = "N" ; P_OPT = "CL"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      END
      IF STKD_TRANSMODE = "1" THEN
*         CRT @(TRANS_X_L,TRANS_Y_L):"Y":CL:
         P_X = TRANS_X_L ; P_Y = TRANS_Y_L ; P_VALUE = "Y" ; P_OPT = "CL"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      END ELSE
*         CRT @(TRANS_X_L,TRANS_Y_L):"N":CL:
         P_X = TRANS_X_L ; P_Y = TRANS_Y_L ; P_VALUE = "N" ; P_OPT = "CL"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      END
*      CRT @(SEL_X_L,SEL_Y_L): STKD_SELMODE SEL_FMT:CL:
*      CRT @(TRN_X_L,TRN_Y_L):STKD_TRN_PCFILE TRN_FMT:CL:
*      CRT @(PC_X_L,PC_Y_L):STKD_PC_APL PC_FMT:CL:
*      CRT @(APL_X_L,APL_Y_L):STKD_APL_PCFILE APL_FMT:CL:
      P_X = SEL_X_L ; P_Y = SEL_Y_L ; P_VALUE = STKD_SELMODE SEL_FMT ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      P_X = TRN_X_L ; P_Y = TRN_Y_L ; P_VALUE = STKD_TRN_PCFILE TRN_FMT ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      P_X = PC_X_L ; P_Y = PC_Y_L ; P_VALUE = STKD_PC_APL PC_FMT ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      P_X = APL_X_L ; P_Y = APL_Y_L ; P_VALUE = STKD_APL_PCFILE APL_FMT ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      RETURN
*
*---- Error routines
91000*
      ERR.TYPE = 1
      CALL SYSCOM(MAT SYSCOM.REC)
      RETURN
93000*
      ERR.TYPE = 3
      CALL SYSCOM(MAT SYSCOM.REC)
*
99999*
      RETURN
   END
