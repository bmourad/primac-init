*COPY>CPYLIB>COM_SCREENM
*********************************************************************
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* Revision      - [10.0]
* Revision Date - 04/28/94
* System        - PRIMAC
* Library       - JISBP/DATA_SCN_M
* Author        - Ziad Yamout, VERCOM Software, Inc.
* TASK 20309 MWS 4/20/96 FIX LINE NUMBERING 
*T21177 diane 11/06/1996 * REV11 UPG
*C29529 bilal 09/16/1997 * "C"OPY FUNCTION IS NOT WORKING.
*T21177 diane 12/04/1997 * CLEAR SCREEN BEFORE INPUT
*T22798 renee 04/29/1998 * Blows up when entered directly after a data
*                          structure listing.
*T24958 edvard 04/05/2000 * FIX MULTIPLE PROBLEMS.
*T12345 renee 07/07/1998 * X
*C38211 bilal 04/23/2001 * XLOC and YLOC are stopping at the limits set.
*********************************************************************
*
*---- Data Structure Libraries
*
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>MENUS.CONTROL
*COPY>JIS.CPYLIB>SYS_SCN_DEF
*COPY>JIS.CPYLIB>PFX_FILES
*COPY>JIS.CPYLIB>SYS_FILES
*COPY>JIS.CPYLIB>SYS_FIELDS
*COPY>CPYLIB>TCC
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>GEN.XREF.SUB
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*
   MAX_SNO = 2
   DIM SCN_HDR(24,MAX_SNO)
   DIM SCN_CLR(24,2)
   DIM SCN_HDR_CRT(MAX_SNO)
   DIM SCN_FLD_CRT(MAX_SNO)
   DIM MIN_COL(MAX_SNO)
   DIM MAX_COL(MAX_SNO)
   DIM MIN_X(MAX_SNO)
   DIM MAX_X(MAX_SNO)
   DIM Y_LOC(MAX_SNO)
   DIM X_LOC(MAX_SNO)
   DIM X_ADJ(MAX_SNO)
   DIM MAX_SPC(MAX_SNO)
   DIM SCN_LST_COL(MAX_SNO)
   DIM SCN_CLR_CRT(MAX_SNO)
   DIM CPYLIB_FILE(100)
*
*---- Get Passed Parameters
*
   PROCREAD BUFFER ELSE
      BUFFER = "SYS_SCN_DEF"
   END
   THIS_FUNC = BUFFER<1>
   SCN_NAME = BUFFER<2>
*
*---- Open required Files
*
   OPEN "","SYS_TKT_DEF" TO SYS_TKT_DEF ELSE
      ERRMSG = "Cannot locate the SYS_TKT_DEF file"
      GOTO 93000
   END
   OPEN "","SYS_SCN_DEF" TO SYS_SCN_DEF ELSE
      ERRMSG = "Cannot locate the SYS_SCN_DEF file"
      GOTO 93000
   END
   OPEN "","SYS_FILES" TO SYS_FILES ELSE
      ERRMSG = "Cannot locate the SYS_FILES file"
      GOTO 93000
   END
   OPEN "","PFX_FILES" TO PFX_FILES ELSE
      ERRMSG = "Cannot locate the PFX_FILES file"
      GOTO 93000
   END
   OPEN "","SYS_FIELDS" TO SYS_FIELDS ELSE
      ERRMSG = "Cannot locate the SYS_FIELDS file"
      GOTO 93000
   END
   OPEN "","SYS_FLD_HMSG" TO SYS_FLD_HMSG ELSE
      ERRMSG = "Cannot locate the SYS_FLD_HMSG file"
      GOTO 93000
   END
   OPEN "","CONTROL" TO CONTROL ELSE
      ERRMSG = "Cannot locate the CONTROL file"
      GOTO 93000
   END
   OPEN "","COMPANY" TO COMPANY ELSE
      ERRMSG = "Cannot locate the COMPANY file"
      GOTO 93000
   END
   OPEN "","SECURITY" TO SECURITY ELSE
      ERRMSG = "Cannot locate the SECURITY file"
      GOTO 93000
   END
   OPEN "","USER.MAIL" TO USER.MAIL ELSE
      ERRMSG = "Cannot locate the USER.MAIL file"
      GOTO 93000
   END
   OPEN "","JIS.SCREENS" TO M.SCREENS ELSE
      ERRMSG = "Cannot locate the JIS.SCREENS file"
      GOTO 93000
   END
   OPEN "","CPYLIB" TO CPYLIB ELSE
      ERRMSG = "Cannot locate the CPYLIB file"
      GOTO 93000
   END
   OPEN "","XREF.DATA" TO XREF.DATA ELSE
      ERRMSG = "Cannot locate the XREF.DATA file"
      GOTO 93000
   END
   OPEN "","PREFIX" TO PREFIX ELSE
      ERRMSG = "Cannot locate the PREFIX file"
      GOTO 93000
   END
*
*---- Get setup variables
*
   CONO = ""; MAT COMP.REC = ""
   CALL GET.CONO1(CONO,MAT COMP.REC,COMPANY,CONTROL)
   IF CONO = "END" THEN GOTO 99999
*
   MATREAD MENU.REC FROM CONTROL, "MENUS.CONTROL" ELSE
      ERRMSG = "Cannot locate the CONTROL, MENUS.CONTROL record"
      GOTO 93000
   END
   CNT = COUNT(PRIMAC.PATH,"/") + 1
   IF M.ACCOUNT # FIELD(PRIMAC.PATH,"/",CNT) THEN
      ERRMSG = "PRIMAC Control setup error ?"
      GOSUB 91000; GOTO 99999
   END
   CNT = COUNT(CBA.PATH,"/") + 1
   CBA.ACCT = FIELD(CBA.PATH,"/",CNT)
   PORT_NO = "TTY"; CALL SYSVARS.SUB(PORT_NO)
   DIR_NAME = "ACCT"; CALL SYSVARS.SUB(DIR_NAME)
*
   PMC.ACCTS = "CBA"
   PMC.ACCTS<2> = "PMC"
   SYSLINES = DCOUNT(VALID.SYS,VM)
   FOR I = 1 TO SYSLINES
      PMC.ACCTS<2+I> = VALID.SYS<1,I>
   NEXT I
   LOCATE "RES" IN PMC.ACCTS,1 SETTING RESLOC THEN
      LOCATE "JES" IN PMC.ACCTS,1 SETTING FND THEN
         PMC.ACCTS = DELETE(PMC.ACCTS,RESLOC,0,0)
         SYSLINES = SYSLINES - 1
      END
   END
   SYSLINES = SYSLINES + 2
*
*---- Initialize SCRN.EDIT, EDIT.SUB, and other variables
*
   MAT EDIT.COM = ""
   TYP = 0; CALL EDIT.SUB; FILL = "#"
*
   BEGIN.PAGE = 9; PAGE.SIZE = 11
   LINE.SPACE = 1
*
   CAL_FLDS = "CO"
   CAL_FLDS<2> = "@DATE"
   CAL_FLDS<3> = "@TIME"
*
   TBL_FLDS = ""
   TBL_FLD_LNK = ""
   TBL_XREF = ""
   REQ_IDS = ""
   PMC_SYS_ID = "CO"
*
   CPYLIB_NAME = ""; MAT CPYLIB_FILE = ""
*
   MIN_ROW = 0; MAX_ROW = 23
   MIN_Y = MIN_ROW + 1; MAX_Y = MAX_ROW + 1
   MIN_COL(1) = 0; MAX_COL(1) = 79
   MIN_COL(2) = 0; MAX_COL(2) = 52
   FOR I = 1 TO MAX_SNO
      MIN_X(I) = MIN_COL(I) + 1; MAX_X(I) = MAX_COL(I) + 1
      MAX_SPC(I) = SPACE(MAX_X(I))
   NEXT I
   X_ADJ(1) = 0; X_ADJ(2) = 80
   SCNO = 1; SCN_X = 79
*
*---- Begin Processing
*
   CRT CS
* T22798 v I can't think of a reason why screen name shouldn't always
*          be null.
   SCN_NAME = ""
* T22798 ^
   IF SCN_NAME # "" THEN GOTO 120
*
*---- Get Screen Name
110*
   X = 0; Y = 23; MAXL = 30
   TYP = 11
   PMSG = "Form Name :"
   CALL EDIT.SUB
   IF VALUE = "END" THEN GOTO 99999
   SCN_NAME = VALUE
*
*---- Get Screen Definitions
120*
   MATREAD SSD.REC FROM SYS_SCN_DEF, SCN_NAME THEN
      VALUE = SSD_SRC_FILE; GOTO 140
   END
   MAT SSD.REC = ""
*
*---- Get Screen file name
130*
   X = 0; Y = 23; MAXL = 30; TYP = 11
   PMSG = "Form File name :"
   CALL EDIT.SUB
   IF VALUE = "END" THEN GOTO 110
*
*---- Open Screen file
140*
   OPEN "",VALUE TO SECOND.SCREENS ELSE
      ERRMSG = "Cannot access Screen file (":VALUE:")"
      GOSUB 91000; GOTO 130
   END
   SSD_SRC_FILE = VALUE
   READ SCN_HDR_DEF FROM SECOND.SCREENS, SCN_NAME:"_DEF" ELSE
      READ SCN_HDR_DEF FROM SECOND.SCREENS, SCN_NAME:"*DEF" THEN
         X = 0; Y = 23; TYP = 8
         PMSG = "An older version FORM, Duplicate with current version (Y/N) :"
         CALL EDIT.SUB
         IF VALUE # "Y" THEN GOTO 110
      END ELSE
         SCN_HDR_DEF = ""
      END
   END
   IF SSD_M_TABLE # "" THEN
      TABLE_ID = SSD_M_TABLE
      GOTO 160
   END
*
*---- Verify Master TABLE
150*
   X = 0; Y = 23; MAXL = 30; TYP = 11
   PMSG = "Form TABLE name :"
   CALL EDIT.SUB
   IF VALUE = "END" THEN GOTO 110
   TABLE_ID = VALUE
160*
   GOSUB 7000
   IF ERRMSG # "" THEN GOTO 150
   GOSUB 7100
*      SSD_S_TABLE = "JOB"  ;* T21177
   REQ_IDCNT = DCOUNT(REQ_IDS,AM)
   IF REQ_IDCNT < 1 THEN
      ERRMSG = "Cannot detemine the required ID/KEY for table # ":TABLE_ID
      GOSUB 91000; GOTO 150
   END
   SSD_M_TABLE = TABLE_ID
   LIMIT = REQ_IDCNT; ID_ONHAND = 0
   FOR I = 1 TO LIMIT
      LOCATE REQ_IDS<I> IN SSD_M_ID<1>,1 SETTING FND ELSE
         LIMIT = 0
      END
   NEXT I
   IF LIMIT THEN
      ID_ONHAND = 1
      GOSUB 7200
*
      LOCATE "JOB" IN SSD_S_TABLE<1>,1 SETTING FND THEN
         LOCATE "ESTIMATE.JOB" IN SSD_S_TABLE<1>,1 SETTING FND ELSE  ;* T21177
            SSD_S_TABLE<1,-1> = "ESTIMATE.JOB"
         END  ;* T21177
         LOCATE "JOB.SCHED" IN SSD_S_TABLE<1>,1 SETTING FND ELSE  ;* T21177
            SSD_S_TABLE<1,-1> = "JOB.SCHED"
         END  ;* T21177
         LOCATE "JOB.FNGD.STATS" IN SSD_S_TABLE<1>,1 SETTING FND ELSE  ;* T21177
            SSD_S_TABLE<1,-1> = "JOB.FNGD.STATS"
         END  ;* T21177
      END  ;* T21177
      TPTR = 1
      LOOP
         TABLE_ID = SSD_S_TABLE<1,TPTR>
      WHILE TABLE_ID # "" DO
         GOSUB 7000
         IF ERRMSG = "" THEN
            GOSUB 7200
         END
         TPTR = TPTR + 1
         LOCATE "ESTIMATE.RES" IN SSD_S_TABLE<1>,1 SETTING FND ELSE  ;* T21177
            LOCATE "ESTIMATE" IN SSD_S_TABLE<1>,1 SETTING FND THEN
               SSD_S_TABLE<1,-1> = "ESTIMATE.RES"  ;* T21177
            END
         END
         LOCATE "INV.FNGD" IN SSD_S_TABLE<1>,1 SETTING FND ELSE
            LOCATE "INVENTORY" IN SSD_S_TABLE<1>,1 SETTING FND THEN
               SSD_S_TABLE<1,-1> = "INV.FNGD"
            END
         END
         LOCATE "ORDER.DETAIL" IN SSD_S_TABLE<1>,1 SETTING FND ELSE
            LOCATE "ORDER" IN SSD_S_TABLE<1>,1 SETTING FND THEN
               LOCATE "SHIP.TO" IN SSD_S_TABLE<1>,1 SETTING FND THEN
                  SSD_S_TABLE<1,-1> = "ORDER.DETAIL"
               END
            END
         END
*T21177 v
         LOCATE "INV.JOB.STATS" IN SSD_S_TABLE<1>,1 SETTING FND ELSE
            LOCATE "INVENTORY" IN SSD_S_TABLE<1>,1 SETTING FND THEN
               LOCATE "JOB" IN SSD_S_TABLE<1>,1 SETTING FND THEN
                  LOCATE "WAREHOUSE" IN SSD_S_TABLE<1>,1 SETTING FND THEN
                     SSD_S_TABLE<1,-1> = "INV.JOB.STATS"
                  END
               END
            END
         END
*T21177 ^
      REPEAT
      TABLE_ID = SSD_M_TABLE
   END
*
   GOSUB 2100
   CRT SCN_HDR_CRT(SCNO):
   GOSUB 2300
   CRT SCN_FLD_CRT(SCNO):
*
1100*
   MORE = 1
   MAT Y_LOC = 0; MAT X_LOC = 0
   YLOC = Y_LOC(SCNO); XLOC = X_LOC(SCNO)
*---- C29529
   ERRMSG = ""
*---- ^
   LOOP
*TASK20309 
*         CRT @(74,23):XLOC "R%2":",":YLOC "R%2":
      CRT @(74,23):XLOC+1 "R%2":",":YLOC+1 "R%2":
*** ^
      CRT @(XLOC,YLOC) :
      ECHO OFF
      INPUT OPT,1:
      IF OPT = CHAR(27) THEN
            CRT: 
         INPUT ADDL_OPT,-1:
         IF ADDL_OPT THEN
            CLEARINPUT
            OPT = ""
         END ELSE
            OPT = "E"
         END
      END
      DEC_EQV = SEQ(OPT)
      IF DEC_EQV < 32 OR DEC_EQV > 126 THEN
         OPT = ""
      END
      ECHO ON
      CRT @(0,23):"|":OPT:"|":
      CRT SEQ(OPT):"|":
      OPT = OCONV(OPT,"MCU")
      BEGIN CASE
         CASE OPT = "H"
            Y_LOC(SCNO) = YLOC; X_LOC(SCNO) = XLOC
            SCNO = SCNO + 1
            IF SCNO > MAX_SNO THEN SCNO = 1
            YLOC = Y_LOC(SCNO); XLOC = X_LOC(SCNO)
            CRT SCN_HDR_CRT(SCNO):
            CRT SCN_FLD_CRT(SCNO):
         CASE OPT = "2"
            YLOC = YLOC + 1
            IF YLOC > MAX_Y - 1 THEN YLOC = MAX_Y - 1;* C38211
         CASE OPT = "6"
            XLOC = XLOC + 1
*C38211   IF XLOC > MAX_X(SCNO) THEN XLOC = MAX_X(SCNO)
            IF XLOC > MAX_X(SCNO) - 1 THEN XLOC = MAX_X(SCNO) - 1;* C38211
         CASE OPT = "8"
            YLOC = YLOC - 1
            IF YLOC < 0 THEN YLOC = 0
         CASE OPT = "4"
            XLOC = XLOC - 1
            IF XLOC < 0 THEN XLOC = 0
         CASE OPT = "1"
*C38211   XLOC = MAX_X(SCNO); YLOC = MAX_Y
            XLOC = 79; YLOC = 23;* C38211
         CASE OPT = "3"
*C38211   YLOC = MAX_Y
            YLOC = 23;* C38211
         CASE OPT = "5"
            XLOC = INT((MAX_X(SCNO)-1)/2)
            YLOC = INT((MAX_Y-1)/2)
         CASE OPT = "7"
            XLOC = 0; YLOC = 0
         CASE OPT = "9"
            YLOC = 0
         CASE OPT = "?"
            MAT GEN.XREF.REC = ""
            GXR.OPEN.XREF = "SCREEN.HELP.FILE"
            GXR.NAME = "HELP"
            GXR.SRCH.ID = "SCN_HDR_M"
            CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
            CRT SCN_HDR_CRT(SCNO):
            CRT SCN_FLD_CRT(SCNO):
         CASE OPT = "O"
1105*
            CRT @(70,23):"OVR":
*C38211 v
            IF YLOC > MAX_Y - 1 THEN YLOC = MAX_Y - 1
            IF XLOC > MAX_X(SCNO) - 1 THEN XLOC = MAX_X(SCNO) - 1
*C38211 ^
            CRT @(XLOC,YLOC):
            MAXL = MAX_X(SCNO) - XLOC
            IF YLOC = MAX_Y THEN MAXL = MAXL - 1
            INPUT VALUE,MAXL:_
            L_VALUE = LEN(VALUE)
            IF L_VALUE > 0 THEN
               FOR LV = 1 TO L_VALUE
                  DEC_EQV = SEQ(VALUE[LV,1])
                  IF DEC_EQV < 32 OR DEC_EQV > 126 THEN L_VALUE = 0
               NEXT LV
               IF L_VALUE < 1 THEN
                  ERRMSG = "Invalid characters in data entered !!"
                  GOSUB 91000
                  GOSUB 5000
                  GOSUB 2100
                  GOTO 1105
               END
            END
            CRT @(70,23):"   ":
            NEW_XLOC = XLOC + L_VALUE
            O_LINE = SCN_HDR(YLOC+1,SCNO)
            SCN_HDR(YLOC+1,SCNO) = O_LINE[1,XLOC]:VALUE:O_LINE[NEW_XLOC+1,999]
            GOSUB 5000; GOSUB 2100
            XLOC = NEW_XLOC
*C38211 v
            IF XLOC > MAX_X(SCNO) - 1 THEN XLOC = MAX_X(SCNO) - 1
*C38211 ^
         CASE OPT = "K"
            LOCATE YLOC IN SSD_ID_Y<1>,1 SETTING FND THEN
               ERRMSG = "Item ID fields must be deleted before row deletion"
               GOSUB 91000
            END ELSE
               LOCATE YLOC IN SSD_FLD_Y<1>,1 SETTING FND THEN
                  ERRMSG = "Data fields must be deleted before row deletion"
                  GOSUB 91000
               END ELSE
                  DPTR = DCOUNT(SCN_HDR_DEF,AM)
                  FOR DEF = DPTR TO 1 STEP -1
                     BEGIN CASE
                        CASE SCN_HDR_DEF<DEF,1> = YLOC
                           SCN_HDR_DEF = DELETE(SCN_HDR_DEF,DEF,0,0)
                        CASE SCN_HDR_DEF<DEF,1> > YLOC
                           SCN_HDR_DEF<DEF,1> = SCN_HDR_DEF<DEF,1> - 1
                     END CASE
                  NEXT DEF
                  GOSUB 2100
                  CRT SCN_HDR_CRT(SCNO):
                  DPTR = DCOUNT(SSD_M_ID,VM)
                  FOR DEF = 1 TO DPTR
                     IF SSD_ID_Y<1,DEF> > YLOC THEN
                        SSD_ID_Y<1,DEF> = SSD_ID_Y<1,DEF> - 1
                     END
                  NEXT DEF
                  DPTR = DCOUNT(SSD_FIELDS,VM)
                  FOR DEF = 1 TO DPTR
                     IF SSD_FLD_Y<1,DEF> > YLOC THEN
                        SSD_FLD_Y<1,DEF> = SSD_FLD_Y<1,DEF> - 1
                     END
                  NEXT DEF
                  GOSUB 2300
                  CRT SCN_FLD_CRT(SCNO):
               END
            END
         CASE OPT = "I"
            LOCATE 20 IN SSD_ID_Y<1>,1 SETTING FND THEN
               ERRMSG = "Item ID fields must be deleted from last row before row deletion"
               GOSUB 91000
            END ELSE
               LIMIT = DCOUNT(SSD_FIELDS,VM)
               FOR L = 1 TO LIMIT
                  IF (SSD_FLD_Y<1,L> + SSD_FLD_LINES<1,L> * SSD_FLD_LNSPC<1,L> - SSD_FLD_LNSPC<1,L>) > 19 THEN
                     ERRMSG = "Data fields must be deleted from last row before row deletion"
                     LIMIT = 0; GOSUB 91000
                  END
               NEXT L
               IF LIMIT THEN
                  DPTR = DCOUNT(SCN_HDR_DEF,AM)
                  FOR DEF = DPTR TO 1 STEP -1
                     IF SCN_HDR_DEF<DEF,1> >= YLOC THEN
                        IF SCN_HDR_DEF<DEF,1> = 20 THEN
                           SCN_HDR_DEF = DELETE(SCN_HDR_DEF,DEF,0,0)
                        END ELSE
                           SCN_HDR_DEF<DEF,1> = SCN_HDR_DEF<DEF,1> + 1
                        END
                     END
                  NEXT DEF
                  GOSUB 2100
                  CRT SCN_HDR_CRT(SCNO):
                  DPTR = DCOUNT(SSD_M_ID,VM)
                  FOR DEF = 1 TO DPTR
                     IF SSD_ID_Y<1,DEF> >= YLOC THEN
                        SSD_ID_Y<1,DEF> = SSD_ID_Y<1,DEF> + 1
                     END
                  NEXT DEF
                  DPTR = DCOUNT(SSD_FIELDS,VM)
                  FOR DEF = 1 TO DPTR
                     IF SSD_FLD_Y<1,DEF> >= YLOC THEN
                        SSD_FLD_Y<1,DEF> = SSD_FLD_Y<1,DEF> + 1
                     END
                  NEXT DEF
                  GOSUB 2300
                  CRT SCN_FLD_CRT(SCNO):
               END
            END
         CASE OPT = "E"
            X = 0; Y = 23; TYP = 8; O.R = "O"
            PMSG = "Screen has not been filed. Continue (Y/N) :"
            CALL EDIT.SUB
            CRT @(0,23):CL:
            IF VALUE = "Y" THEN
               MORE = 0
            END
         CASE OPT = "F"
            GOSUB 6000
            GOSUB 6500
            IF ERRMSG = "" THEN
               GOSUB 5000
               GOSUB 5500
               MATWRITE SSD.REC ON SYS_SCN_DEF, SCN_NAME
               WRITE SCN_HDR_DEF ON SECOND.SCREENS, SCN_NAME:"_DEF"
               WRITE SCN_CLR_DEF ON SECOND.SCREENS, SCN_NAME:"_CLR"
* PER ZIAD THIS COED WAS ADDED FOD NEW SHOP FLOOR BUT IT CAN BE COMMENTED
* OUT v
*               READ SISQUEUE FROM CONTROL, CONO:"SISQUEUE" THEN
*               OPEN "","VOC" TO VOC THEN
*               SELECT SYS_TKT_DEF
*               TKTCHK = 1
*               LOOP
*                  READNEXT TKTID ELSE TKTCHK = 0
*               WHILE TKTCHK DO
*IF TKTID = "JOBTICK" THEN
*               READ ITEM FROM SYS_TKT_DEF, TKTID THEN
*               LOCATE SCN_NAME IN ITEM<1>,1 SETTING TKTFND THEN
*                  ITEM = "PQN"
*                  ITEM<2> = 'MV %1 "':TKTID:'"'
*                  ITEM<3> = 'MV %2 "HEADER"'
*                  ITEM<4> = "HDOCUSET_TRN_DRV"
*                  ITEM<5> = "P"
*                  WRITE ITEM ON VOC, "DOCUSET_TRN_VERB"
*                  PERFORM "DOCUSET_TRN_VERB"
*                  CALL SISQUEUE(CONO,TKTID,"DOCUSET",SIS_CONTROL,SIS_OUTPUT,SISERRMSG)
*END
*               END
*               END
*               REPEAT
*               END
*               END
* PER ZIAD ^
               CALL SCN_HDR_TUF(SCN_NAME, MAT SSD.REC, SCN_HDR_DEF, SECOND.SCREENS,SYS_FIELDS,SYS_FLD_HMSG)
               CALL BUILD_FORM_PROPERTIES(RTN_CODE,SCN_NAME)
               MORE = 0
            END
         CASE OPT = "C"
            X = 0; Y = 22; TYP = 1; MAXL = 20; O.R = "O"  ;* T21177
            PMSG = "Enter new screen name :"
            CALL EDIT.SUB
            CRT @(0,22):CL:  ;* T21177
            CRT @(0,23):CL:
            BEGIN CASE
               CASE VALUE = "END" OR VALUE = ""
                  ERRMSG = "X"
               CASE VALUE = SCN_NAME
                  ERRMSG = "Cannot copy the screen to itself !"
                  GOSUB 91000
               CASE 1
                  READ DUMMY FROM SYS_SCN_DEF, VALUE THEN
                     ERRMSG = "Screen (":VALUE:") has already been defined !"
                     GOSUB 91000
                  END ELSE
                     READ DUMMY FROM SECOND.SCREENS, VALUE:"_DEF" THEN
                        ERRMSG = "Screen (":VALUE:") header has already been defined !"
                        GOSUB 91000
                     END
                  END
            END CASE
            IF ERRMSG = "" THEN
               O_SCN_NAME = SCN_NAME
               SCN_NAME = VALUE
               GOSUB 6000
               GOSUB 6500
               IF ERRMSG = "" THEN
                  GOSUB 5000
                  GOSUB 5500
                  MATWRITE SSD.REC ON SYS_SCN_DEF, SCN_NAME
                  WRITE SCN_HDR_DEF ON SECOND.SCREENS, SCN_NAME:"_DEF"
                  WRITE SCN_CLR_DEF ON SECOND.SCREENS, SCN_NAME:"_CLR"
               END ELSE
                  SCN_NAME = O_SCN_NAME
               END
            END
         CASE OPT = "D"
            X = 0; Y = 23; TYP = 1; MAXL = 4; O.R = "O"
            PMSG = "DELETE screen ":SCN_NAME:" ? (Y/N) :"
            CALL EDIT.SUB
            CRT @(0,23):CL:
            IF VALUE = "Y***" THEN
               READU DUMMY FROM SYS_SCN_DEF, SCN_NAME THEN
                  DELETE SYS_SCN_DEF, SCN_NAME
               END ELSE
                  RELEASE SYS_SCN_DEF, SCN_NAME
               END
               READU DUMMY FROM SECOND.SCREENS, SCN_NAME:"_DEF" THEN
                  DELETE SECOND.SCREENS, SCN_NAME:"_DEF"
               END ELSE
                  RELEASE SECOND.SCREENS, SCN_NAME:"_DEF"
               END
               READU DUMMY FROM SECOND.SCREENS, SCN_NAME:"_CLR" THEN
                  DELETE SECOND.SCREENS, SCN_NAME:"_CLR"
               END ELSE
                  RELEASE SECOND.SCREENS, SCN_NAME:"_CLR"
               END
* DELETE FORM_PROPERTIES
               SELECT FORM_PROPERTIES
               DATA = 1
               LOOP
                  READNEXT ID ELSE DATA = 0
               WHILE DATA DO
                  IF FIELD(ID,"_",1) = SCN_NAME THEN
                     READU ITEM FROM FORM_PROPERTIES, ID THEN
                        DELETE FORM_PROPERTIES, ID
                     END ELSE
                        RELEASE FORM_PROPERTIES, ID
                     END
                  END
               REPEAT
               MORE = 0
            END
         CASE YLOC = 21 OR YLOC > 22
*TASK20309
*            ERRMSG = "Lines 21 and 23 are reserved"
            ERRMSG = "Lines 22 and 24 are reserved"
*** ^
            GOSUB 91000
*        CASE YLOC = 22
*           ERRMSG = "Line 22 is reserved for display only"
*           GOSUB 91000
         CASE OPT = ""
            GOSUB 3100
            IF VALUE = "" THEN
            END ELSE
               FLD_ID = VALUE
               XPOS = XLOC + X_ADJ(SCNO)
               CALL SCN_FLD_M(SCN_NAME,FLD_ID,XPOS,YLOC)
               GOSUB 2300
               CRT SCN_HDR_CRT(SCNO):
               CRT SCN_FLD_CRT(SCNO):
            END
         CASE OPT = "0" AND TBL_FLDS = ""
            ERRMSG = "Cannot locate any Data Fields to choose from !"
            GOSUB 91000
         CASE OPT = "0"
            PTR = 1
            LOOP
               LOCATE YLOC IN SSD_ID_Y<1>,PTR SETTING LFND THEN
                  IF XLOC = SSD_ID_X<1,LFND> THEN
                     LFND = 0; PTR = 0
                     ERRMSG = "Cannot insert a data field on the same coordinates as of an Item ID"
                     GOSUB 91000
                  END
               END ELSE
                  LFND = 0
               END
            WHILE LFND DO
               PTR = LFND + 1
            REPEAT
            IF PTR = 0 THEN GOTO 1119
            PTR = 1
            LOOP
               LOCATE YLOC IN SSD_FLD_Y<1>,PTR SETTING LFND THEN
                  IF XLOC = SSD_FLD_X<1,LFND> THEN
                     LFND = 0; PTR = 0
                     ERRMSG = "Cannot insert a data field on the same coordinates as of an another"
                     GOSUB 91000
                  END
               END ELSE
                  LFND = 0
               END
            WHILE LFND DO
               PTR = LFND + 1
            REPEAT
            IF PTR = 0 THEN GOTO 1119
1110*
            MAT GEN.XREF.REC = ""
            GXR.NAME = "AM.SEL"
            GXR.IDLIST = "All Fields"
            NEXT_NO = 2
*REMOVED PER ZIAD SINCE THESE FUNCTIONS NEVER WERE COMPLETED AS
*PLANNED
*           GXR.IDLIST<NEXT_NO> = "Calculated"
*           NEXT_NO = NEXT_NO + 1
*            GXR.IDLIST<NEXT_NO> = "System Fields"
*            NEXT_NO = NEXT_NO + 1
*            GXR.IDLIST<NEXT_NO> = "Subroutines"
*            NEXT_NO = NEXT_NO + 1
            GXR.IDLIST<NEXT_NO> = SSD_M_TABLE
            STBL_CNT = DCOUNT(SSD_S_TABLE,VM)
            FOR I = 1 TO STBL_CNT
               IF SSD_S_TABLE<1,I> # "" THEN
                  LOCATE SSD_S_TABLE<1,I> IN GXR.IDLIST,NEXT_NO BY "AL" SETTING FND ELSE
                     INS SSD_S_TABLE<1,I> BEFORE GXR.IDLIST<FND>
                  END
               END
            NEXT I
            CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
            IF GXR.ID = "" THEN
               GOTO 1117
            END
            BEGIN CASE
               CASE GXR.ID = "All Fields"
                  IDLIST = TBL_FLDS
*           CASE GXR.ID = "Calculated"
*              IDLIST = "New Calculation"
*              FCNT = DCOUNT(SSD_FIELDS,VM)
*              FOR FPTR = 1 TO FCNT
*                 IF SSD_FLD_EXPR<1,FPTR> # "" THEN
*                    IDLIST<-1> = SSD_FIELDS<1,FPTR>
*                 END
*              NEXT FPTR
*            CASE GXR.ID = "System Fields"
*               IDLIST = "DATE"
*               IDLIST<2> = "PORT"
*              IDLIST<3> = "USER_NAME"
*            CASE GXR.ID = "Subroutines"
*IDLIST = ""
*              IDLIST = "GET_XXX_VALUE"
*              IDLIST<2> = "GET_YYY_VALUE"
*** ^
               CASE 1
                  IDLIST = ""
                  I = 1
                  LOOP
                     LOCATE GXR.ID IN TBL_XREF,I SETTING FND THEN
                        LOCATE TBL_FLDS<FND> IN IDLIST,1 BY "AL" SETTING XFND ELSE
                           INS TBL_FLDS<FND> BEFORE IDLIST<XFND>
                        END
                     END ELSE
                        FND = 0
                     END
                  WHILE FND DO
                     I = I + 1
                  REPEAT
                  IF IDLIST = "" THEN
                     ERRMSG = "Cannot locate any setup fields for this file"
                     GOSUB 91000; GOTO 1117
                  END
            END CASE
            MAT GEN.XREF.REC = ""
            GXR.NAME = "AM.SEL"
            GXR.IDLIST = IDLIST
            CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
*           BEGIN CASE
*           CASE GXR.ID = "New Calculation"
*              FLD_ID = ""
*           CASE 1
            LOCATE GXR.ID IN TBL_FLDS,1 SETTING FND ELSE
               GXR.ID = ""; GOTO 1117
            END
            FLD_ID = TBL_FLDS<FND>;* ???? WHY
*           END CASE
            XPOS = XLOC + X_ADJ(SCNO)
            LOCATE FLD_ID IN SSD_FIELDS<1>,1 SETTING FLOC THEN
               ERRMSG = "Field (":FLD_ID:") is already setup. Do you want a duplicate (Y/N) :"
               GOSUB 91000
               IF REPLY = "Y" THEN
                  ORG_FLD_ID = FLD_ID
                  LLOC = 1
                  LOOP
                     FLD_ID = "@":ORG_FLD_ID:"@":LLOC
                     LOCATE FLD_ID IN SSD_FIELDS<1>,1 SETTING FLOC ELSE
                        LLOC = 0
                     END
                  WHILE LLOC DO
                     LLOC = LLOC + 1
                  REPEAT
                  CALL SCN_FLD_M(SCN_NAME,FLD_ID,XPOS,YLOC)
               END
            END ELSE
               CALL SCN_FLD_M(SCN_NAME,FLD_ID,XPOS,YLOC)
            END
            BEGIN CASE
               CASE FIELD(FLD_ID,"_",1) = FLD_ID
                  LIMIT = REQ_IDCNT
                  FOR I = 1 TO LIMIT
                     LOCATE REQ_IDS<I> IN SSD_M_ID<1>,1 SETTING FND ELSE
                        LIMIT = 0
                     END
                  NEXT I
                  IF LIMIT THEN
                     ID_ONHAND = 1
                     GOSUB 7200
                  END
               CASE TBL_FLD_LNK<FND> # ""
                  TABLE_ID = TBL_FLD_LNK<FND>
                  GOSUB 7000
                  IF ERRMSG = "" THEN
                     LOCATE TABLE_ID IN SSD_S_TABLE<1>,1 SETTING ILOC ELSE
                        SSD_S_TABLE<1,ILOC> = TABLE_ID
                     END
                     GOSUB 7200
*LOCATE FLD_ID IN SSD_FIELDS<1>,1 SETTING FND THEN
*  SSD_FLD_PFX<1,FND> = FIELD(FLD_ID,"_",1)
*END
                  END
                  TABLE_ID = SSD_M_TABLE
            END CASE
            GOSUB 2300
1117*
            CRT SCN_HDR_CRT(SCNO):
            CRT SCN_FLD_CRT(SCNO):
1119*
         CASE OPT = "."
            GOSUB 3100
            IF VALUE = "" THEN
            END ELSE
               FLD_ID = VALUE
*              XPOS = XLOC + X_ADJ(SCNO)
*              CALL SCN_FLD_M(SCN_NAME,FLD_ID,XPOS,YLOC)
               IF FIELD(FLD_ID,"_",1) = FLD_ID THEN
                  LOCATE FLD_ID IN SSD_M_ID<1>,1 SETTING FLOC THEN
                     SSD_M_ID = DELETE(SSD_M_ID,1,FLOC,0)
                     SSD_ID_X = DELETE(SSD_ID_X,1,FLOC,0)
                     SSD_ID_Y = DELETE(SSD_ID_Y,1,FLOC,0)
                     SSD_ID_CNV = DELETE(SSD_ID_CNV,1,FLOC,0)
                     SSD_ID_FMT = DELETE(SSD_ID_FMT,1,FLOC,0)
                  END
               END ELSE
                  LOCATE FLD_ID IN SSD_FIELDS<1>,1 SETTING FLOC THEN
                     SSD_FIELDS = DELETE(SSD_FIELDS,1,FLOC,0)
                     SSD_FLD_ATTNO = DELETE(SSD_FLD_ATTNO,1,FLOC,0)
                     SSD_FLD_MVNO = DELETE(SSD_FLD_MVNO,1,FLOC,0)
                     SSD_FLD_SMVNO = DELETE(SSD_FLD_SMVNO,1,FLOC,0)
                     SSD_FLD_TABLE = DELETE(SSD_FLD_TABLE,1,FLOC,0)
                     SSD_FLD_PFX = DELETE(SSD_FLD_PFX,1,FLOC,0)
                     SSD_FLD_SEQ = DELETE(SSD_FLD_SEQ,1,FLOC,0)
                     SSD_FLD_REF = DELETE(SSD_FLD_REF,1,FLOC,0)
                     SSD_FLD_TYPE = DELETE(SSD_FLD_TYPE,1,FLOC,0)
                     SSD_FLD_X = DELETE(SSD_FLD_X,1,FLOC,0)
                     SSD_FLD_Y = DELETE(SSD_FLD_Y,1,FLOC,0)
                     SSD_FLD_CNV = DELETE(SSD_FLD_CNV,1,FLOC,0)
                     SSD_FLD_FMT = DELETE(SSD_FLD_FMT,1,FLOC,0)
                     SSD_FLD_LINES = DELETE(SSD_FLD_LINES,1,FLOC,0)
                     SSD_FLD_LNSPC = DELETE(SSD_FLD_LNSPC,1,FLOC,0)
                     SSD_FLD_LNK = DELETE(SSD_FLD_LNK,1,FLOC,0)
                     SSD_FLD_LCHR = DELETE(SSD_FLD_LCHR,1,FLOC,0)
                     SSD_FLD_DSTLST = DELETE(SSD_FLD_DSTLST,1,FLOC,0)
                     SSD_FLD_HIDE = DELETE(SSD_FLD_HIDE,1,FLOC,0)
                     SSD_FLD_EXPR = DELETE(SSD_FLD_EXPR,1,FLOC,0)
                     SSD_FLD_ESTK = DELETE(SSD_FLD_ESTK,1,FLOC,0)
                     SSD_FLD_TSTK = DELETE(SSD_FLD_TSTK,1,FLOC,0)
                     SSD_FLD_ORG = DELETE(SSD_FLD_ORG,1,FLOC,0)
                     SSD_FLD_SUBR = DELETE(SSD_FLD_SUBR,1,FLOC,0)
                     SSD_FLD_LNKREF = DELETE(SSD_FLD_LNKREF,1,FLOC,0)
                     SSD_SBR_VID = DELETE(SSD_SBR_VID,1,FLOC,0)
                     SSD_SBR_VVALUE = DELETE(SSD_SBR_VVALUE,1,FLOC,0)
                  END
               END
               GOSUB 2300
               CRT SCN_HDR_CRT(SCNO):
               CRT SCN_FLD_CRT(SCNO):
            END
         CASE OPT = "A"
            MAT GEN.XREF.REC = ""
            GXR.NAME = "AM.SEL"
            GXR.IDLIST = CAL_FLDS
            CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
            CRT SCN_HDR_CRT(SCNO):
            CRT SCN_FLD_CRT(SCNO):
            LOCATE GXR.ID IN CAL_FLDS,1 SETTING FND THEN
               GXR.ID = CAL_FLDS<FND>
            END ELSE
               GXR.ID = ""
            END
      END CASE
   WHILE MORE DO REPEAT
   GOTO 99999
*
*---- Build Screen header
2100*
   FOR LY = 1 TO MAX_Y
      FOR LS = 1 TO MAX_SNO
         SCN_HDR(LY,LS) = MAX_SPC(LS)
      NEXT LS
   NEXT LY
   MAT SCN_HDR_CRT = CS
   DPTR = DCOUNT(SCN_HDR_DEF,AM)
   IF GRAPH.PORT.TYPE = "STD" OR HORZ.CHAR = "-" OR VERT.CHAR = "|" THEN
      FOR DEF = 1 TO DPTR
         Y = SCN_HDR_DEF<DEF,1> + 1
         X = SCN_HDR_DEF<DEF,2>
         STMT = SCN_HDR_DEF<DEF,3>
         L = LEN(STMT)
         IF X > SCN_X THEN
            S_NO = 2
         END ELSE
            S_NO = 1
         END
         X = X - X_ADJ(S_NO)
         SCN_HDR(Y,S_NO) = SCN_HDR(Y,S_NO)[1,X]:STMT:SCN_HDR(Y,S_NO)[X+L+1,999]
         SCN_HDR_CRT(S_NO) = SCN_HDR_CRT(S_NO):@(X,Y-1):STMT
      NEXT DEF
      GOTO 2199
   END
   FOR DEF = 1 TO DPTR
      Y = SCN_HDR_DEF<DEF,1> + 1
      X = SCN_HDR_DEF<DEF,2>
      STMT = SCN_HDR_DEF<DEF,3>
      L = LEN(STMT)
      IF X > SCN_X THEN
         S_NO = 2
      END ELSE
         S_NO = 1
      END
      X = X - X_ADJ(S_NO)
      SCN_HDR(Y,S_NO) = SCN_HDR(Y,S_NO)[1,X]:STMT:SCN_HDR(Y,S_NO)[X+L+1,999]
      POS = INDEX(STMT,"--",1)
      IF POS THEN
         STMT.LEN = LEN(STMT)
         IF STMT = STR("-",STMT.LEN) THEN
            STMT = BOX.ON:STR(HORZ.CHAR,STMT.LEN):BOX.OFF
         END ELSE
            OSTMT = STMT
            IF POS > 1 THEN
               STMT = OSTMT[1,POS-1]
            END ELSE
               STMT = ""
            END
            BLEN = 2; POS = POS + 2
            FOR I = POS TO STMT.LEN
               CHR = OSTMT[I,1]
               BEGIN CASE
                  CASE CHR = "-"
                     BLEN = BLEN + 1
                  CASE BLEN
                     STMT = STMT:BOX.ON:STR(HORZ.CHAR,BLEN):BOX.OFF:CHR
                     BLEN = 0
                  CASE 1
                     STMT = STMT:CHR
               END CASE
            NEXT I
            OSTMT = ""
            IF BLEN THEN
               STMT = STMT:BOX.ON:STR(HORZ.CHAR,BLEN):BOX.OFF
            END
         END
      END
      POS = INDEX(STMT,"|",1)
      IF POS THEN
         IF STMT = "|" THEN
            STMT = BOX.ON:VERT.CHAR:BOX.OFF
         END ELSE
            LOOP
               STMT = STMT[1,POS-1]:BOX.ON:VERT.CHAR:BOX.OFF:STMT[POS+1,999]
               POS = INDEX(STMT,"|",1)
            WHILE POS DO REPEAT
         END
      END
      SCN_HDR_CRT(S_NO) = SCN_HDR_CRT(S_NO):@(X,Y-1):STMT
   NEXT DEF
2199 RETURN
*
*---- Build Screen data
2300*
************ Check routine 7000 in CBABP/SCREEN.BUILD.HDR ************
   MAT SCN_FLD_CRT = ""
   DPTR = DCOUNT(SSD_M_ID,VM)
   FOR DEF = 1 TO DPTR
      FLD_FMT =SSD_ID_FMT<1,DEF>
      L_DSC = FIELD(FLD_FMT,"#",2)
      BEGIN CASE
         CASE SSD_ID_CNV<1,DEF> = ""
            FLD_DSC = STR("#",L_DSC)
         CASE SSD_ID_CNV<1,DEF> = "D2/"
            FLD_DSC = "99/99/99"
            L_DSC = 8
         CASE 1
            FLD_DSC = OCONV(STR(9,(L_DSC-1)),SSD_ID_CNV<1,DEF>)
      END CASE
      FLD_DSC = FLD_DSC FLD_FMT
      X = SSD_ID_X<1,DEF>
      IF X > SCN_X THEN
         S_NO = 2
      END ELSE
         S_NO = 1
      END
      X = X - X_ADJ(S_NO)
      IF S_NO = 1 AND X + L_DSC > MAX_X(S_NO) THEN
         OFST = MAX_X(S_NO) - X
         SCN_FLD_CRT(S_NO) = SCN_FLD_CRT(S_NO):@(X,SSD_ID_Y<1,DEF>):FLD_DSC[1,OFST]
         OFST = OFST + 1
         SCN_FLD_CRT(MAX_SNO) = SCN_FLD_CRT(MAX_SNO):@(MIN_COL(MAX_SNO),SSD_ID_Y<1,DEF>):FLD_DSC[OFST,MAX_X(MAX_SNO)]
      END ELSE
         SCN_FLD_CRT(S_NO) = SCN_FLD_CRT(S_NO):@(X,SSD_ID_Y<1,DEF>):FLD_DSC
      END
   NEXT DEF
   DPTR = DCOUNT(SSD_FIELDS,VM)
   FOR DEF = 1 TO DPTR
      FLD_FMT = SSD_FLD_FMT<1,DEF>
      L_DSC = FIELD(FLD_FMT,"#",2)
      BEGIN CASE
         CASE SSD_FLD_CNV<1,DEF> = ""
            FLD_DSC = STR("#",L_DSC)
         CASE SSD_FLD_CNV<1,DEF> = "D2/"
            FLD_DSC = "99/99/99"
            L_DSC = 8
         CASE 1
            FLD_DSC = OCONV(STR(9,(L_DSC-1)),SSD_FLD_CNV<1,DEF>)
      END CASE
      FLD_DSC = FLD_DSC FLD_FMT
      LINES = SSD_FLD_LINES<1,DEF>
      IF LINES < 1 THEN LINES = 1
      X = SSD_FLD_X<1,DEF>
      IF X > SCN_X THEN
         S_NO = 2
      END ELSE
         S_NO = 1
      END
      X = X - X_ADJ(S_NO)
      IF S_NO = 1 AND X + L_DSC > MAX_X(S_NO) THEN
         OFST = MAX_X(S_NO) - X
         DSC1 = FLD_DSC[1,OFST]
         OFST = OFST + 1
         DSC2 = FLD_DSC[OFST,MAX_X(MAX_SNO)]
         FOR DEF_L = 1 TO LINES
            DEF_Y = SSD_FLD_Y<1,DEF> + DEF_L - 1
            SCN_FLD_CRT(S_NO) = SCN_FLD_CRT(S_NO):@(X,DEF_Y):DSC1
            SCN_FLD_CRT(MAX_SNO) = SCN_FLD_CRT(MAX_SNO):@(MIN_COL(MAX_SNO),DEF_Y):DSC2
         NEXT DEF_L
      END ELSE
         FOR DEF_L = 1 TO LINES
            DEF_Y = SSD_FLD_Y<1,DEF> + DEF_L - 1
            SCN_FLD_CRT(S_NO) = SCN_FLD_CRT(S_NO):@(X,DEF_Y):FLD_DSC
         NEXT DEF_L
      END
   NEXT DEF
   RETURN
*
*---- Get requested field
3100*
   VALUE = ""
   DPTR = DCOUNT(SSD_M_ID,VM)
   IF DPTR > 0 THEN
      FOR DEF = 1 TO DPTR
         BEGIN CASE
            CASE YLOC # SSD_ID_Y<1,DEF>
            CASE XLOC < SSD_ID_X<1,DEF> - X_ADJ(SCNO)
            CASE XLOC < SSD_ID_X<1,DEF> + FIELD(SSD_ID_FMT<1,DEF>,"#",2) - X_ADJ(SCNO)
               DPTR = 0; VALUE = SSD_M_ID<1,DEF>
         END CASE
      NEXT DEF
      IF DPTR THEN
         DPTR = DCOUNT(SSD_FIELDS,VM)
      END
   END ELSE
      DPTR = DCOUNT(SSD_FIELDS,VM)
   END
   FOR DEF = 1 TO DPTR
      BEGIN CASE
         CASE YLOC # SSD_FLD_Y<1,DEF>
         CASE XLOC < SSD_FLD_X<1,DEF> - X_ADJ(SCNO)
         CASE XLOC < SSD_FLD_X<1,DEF> + FIELD(SSD_FLD_FMT<1,DEF>,"#",2) - X_ADJ(SCNO)
            DPTR = 0; VALUE = SSD_FIELDS<1,DEF>
      END CASE
   NEXT DEF
   RETURN
*
*---- Build SCN_HDR_DEF record
5000*
   SCN_HDR_DEF = ""; DPTR = 0
   FOR ROW = MIN_ROW TO MAX_ROW
      FOR S_NO = 1 TO MAX_SNO
         GOSUB 5100
      NEXT S_NO
   NEXT ROW
   RETURN
*
*--- Build SCN_HDR_DEF columns
5100*
   BEGIN CASE
      CASE TRIM(SCN_HDR(ROW+1,S_NO)) = ""
      CASE SCN_HDR(ROW+1,S_NO) = STR(SCN_HDR(ROW+1,S_NO)[1,1],MAX_X(S_NO))
         DPTR = DPTR + 1
         SCN_HDR_DEF<DPTR> = ROW
         SCN_HDR_DEF<DPTR,2> = MIN_ROW + X_ADJ(S_NO)
         SCN_HDR_DEF<DPTR,3> = SCN_HDR(ROW+1,S_NO)
      CASE 1
         DUP.CNT = 0; SCOL = MIN_COL(S_NO); STMT = ""
         FOR COL = MIN_COL(S_NO) TO MAX_COL(S_NO)
            CHR = SCN_HDR(ROW+1,S_NO)[COL+1,1]
            BEGIN CASE
               CASE TRIM(CHR) = ""
                  DUP.CNT = DUP.CNT + 1
*           CASE DUP.CNT < ADR.CNT
               CASE DUP.CNT < 4
                  STMT = STMT:SPACE(DUP.CNT):CHR
                  DUP.CNT = 0
               CASE 1
                  IF STMT # "" THEN
                     DPTR = DPTR + 1
                     SCN_HDR_DEF<DPTR> = ROW
                     SCN_HDR_DEF<DPTR,2> = SCOL + X_ADJ(S_NO)
                     SCN_HDR_DEF<DPTR,3> = STMT
                  END
                  STMT = CHR
                  SCOL = COL
                  DUP.CNT = 0
            END CASE
         NEXT COL
         IF STMT # "" THEN
            DPTR = DPTR + 1
            SCN_HDR_DEF<DPTR> = ROW
            SCN_HDR_DEF<DPTR,2> = SCOL + X_ADJ(S_NO)
            SCN_HDR_DEF<DPTR,3> = STMT
         END
   END CASE
   RETURN
*
*---- DERIVE STRING TO CLEAR DATA ONLY
5500*
   MAT SCN_LST_COL = ""
   MAT SCN_CLR = ""
   FOR S_NO = 1 TO MAX_SNO
      FOR ROW = MIN_ROW TO MAX_ROW
         LIMIT = MIN_COL(S_NO)
         FOR COL = MAX_COL(S_NO) TO LIMIT STEP -1
            IF SCN_HDR(ROW+1,S_NO)[COL+1,1] # " " THEN
               SCN_LST_COL(S_NO)<ROW+1> = COL + 1 + X_ADJ(S_NO)
               LIMIT = MAX_COL(S_NO)
            END
         NEXT COL
         IF LIMIT = MIN_COL(S_NO) THEN
            SCN_LST_COL(S_NO)<ROW+1> = X_ADJ(S_NO)
         END
      NEXT ROW
   NEXT S_NO
   DPTR = DCOUNT(SSD_M_ID,VM)
   FOR DEF = 1 TO DPTR
      ROW = SSD_ID_Y<1,DEF>
      COL = SSD_ID_X<1,DEF>
      M_L = SSD_FLD_LINES<1,DEF>
      L_S = SSD_FLD_LNSPC<1,DEF>
      L_DSC = FIELD(SSD_ID_FMT<1,DEF>,"#",2)
      IF COL > SCN_X THEN
         S_NO = 2
      END ELSE
         S_NO = 1
      END
      IF COL + L_DSC > MAX_X(S_NO) + X_ADJ(S_NO) THEN
         OFST = COL + L_DSC - MAX_X(S_NO) - X_ADJ(S_NO)
      END ELSE
         OFST = 0
      END
      FOR M = 1 TO M_L STEP L_S
         MROW = ROW + (M-1) * L_S
         IF COL < SCN_LST_COL(S_NO)<MROW+1> THEN
            CLR_DEF = MROW
            CLR_DEF<1,2> = COL
            CLR_DEF<1,3> = L_DSC
            SCN_CLR(MROW+1,S_NO)<-1> = CLR_DEF
         END
         IF OFST THEN
            IF MIN_COL(MAX_SNO) < SCN_LST_COL(MAX_SNO)<MROW+1> THEN
               CLR_DEF = MROW
               CLR_DEF<1,2> = MIN_COL(MAX_SNO)
               CLR_DEF<1,3> = OFST
               SCN_CLR(MROW+1,MAX_SNO)<-1> = CLR_DEF
            END
         END
      NEXT M
   NEXT DEF
   DPTR = DCOUNT(SSD_FIELDS,VM)
   FOR DEF = 1 TO DPTR
      ROW = SSD_FLD_Y<1,DEF>
      COL = SSD_FLD_X<1,DEF>
      M_L = SSD_FLD_LINES<1,DEF>
      L_S = SSD_FLD_LNSPC<1,DEF>
      L_DSC = FIELD(SSD_FLD_FMT<1,DEF>,"#",2)
      IF COL > SCN_X THEN
         S_NO = 2
      END ELSE
         S_NO = 1
      END
      IF COL + L_DSC > MAX_X(S_NO) + X_ADJ(S_NO) THEN
         OFST = COL + L_DSC - MAX_X(S_NO) - X_ADJ(S_NO)
      END ELSE
         OFST = 0
      END
      FOR M = 1 TO M_L STEP L_S
         MROW = ROW + (M-1) * L_S
         IF COL < SCN_LST_COL(S_NO)<MROW+1> THEN
            CLR_DEF = MROW
            CLR_DEF<1,2> = COL
            CLR_DEF<1,3> = L_DSC
            SCN_CLR(MROW+1,S_NO)<-1> = CLR_DEF
         END
         IF OFST THEN
            IF MIN_COL(MAX_SNO) < SCN_LST_COL(MAX_SNO)<MROW+1> THEN
               CLR_DEF = MROW
               CLR_DEF<1,2> = MIN_COL(MAX_SNO)
               CLR_DEF<1,3> = OFST
               SCN_CLR(MROW+1,MAX_SNO)<-1> = CLR_DEF
            END
         END
      NEXT M
   NEXT DEF
   SCN_CLR_DEF = ""; DLOC = 0
   FOR ROW = MIN_ROW TO MAX_ROW
      MROW = ROW + 1; FLOC = 1
      FOR S_NO = 1 TO MAX_SNO
         LOOP WHILE SCN_CLR(MROW,S_NO)<FLOC> # "" DO
            DLOC = DLOC + 1
            SCN_CLR_DEF<DLOC> = SCN_CLR(MROW,S_NO)<FLOC>
            FLOC = FLOC + 1
         REPEAT
         COL = SCN_LST_COL(S_NO)<MROW> - X_ADJ(S_NO)
         IF COL < MAX_X(S_NO) THEN
            DLOC = DLOC + 1
            SCN_CLR_DEF<DLOC> = ROW
            SCN_CLR_DEF<DLOC,2> = COL + X_ADJ(S_NO)
            SCN_CLR_DEF<DLOC,3> = "L"
         END
      NEXT S_NO
   NEXT ROW
   MAT SCN_CLR_CRT = ""
   FOR ROW = 1 TO DLOC
      Y = SCN_CLR_DEF<ROW,1>
      X = SCN_CLR_DEF<ROW,2>
      ML = SCN_CLR_DEF<ROW,3>
      IF X > SCN_X THEN
         S_NO = 2
      END ELSE
         S_NO = 1
      END
      X = X - X_ADJ(S_NO)
      IF NUM(ML) THEN
         SCN_CLR_CRT(S_NO) = SCN_CLR_CRT(S_NO):@(X,Y):SPACE(ML)
      END ELSE
         SCN_CLR_CRT(S_NO) = SCN_CLR_CRT(S_NO):@(X,Y):CL
      END
   NEXT ROW
   RETURN
*
*---- SORT FIELDS BY SEQUENCE NUMBER
6000*
   ZCNTR1 = 1001; ZCNTR2 = 2001; ZCNTR3 = 3001
   LOOP
      LOCATE "0" IN SSD_FLD_SEQ<1>,1 SETTING DPOS ELSE DPOS = 0
   WHILE DPOS DO
      BEGIN CASE
         CASE SSD_FIELDS<1,DPOS> = "@CALC" OR SSD_FLD_ORG<1,DPOS> = "@CALC"
            SSD_FLD_SEQ<1,DPOS> = ZCNTR1
            ZCNTR1 = ZCNTR1 + 1
         CASE SSD_FIELDS<1,DPOS>[1,1] = "@"
            SSD_FLD_SEQ<1,DPOS> = ZCNTR3
            ZCNTR3 = ZCNTR3 + 1
         CASE 1
            SSD_FLD_SEQ<1,DPOS> = ZCNTR2
            ZCNTR2 = ZCNTR2 + 1
      END CASE
   REPEAT
   DPTR = DCOUNT(SSD_FIELDS,VM)
   LOOP
      SEQNO = SSD_FLD_SEQ<1,DPTR>
      IF SEQNO > 0 THEN
         LOCATE SEQNO IN SSD_FLD_SEQ<1>,1 BY "AR" SETTING DPOS ELSE NULL
         IF DPOS < DPTR THEN
            INS SSD_FIELDS<1,DPTR> BEFORE SSD_FIELDS<1,DPOS>
            INS SSD_FLD_ATTNO<1,DPTR> BEFORE SSD_FLD_ATTNO<1,DPOS>
            INS SSD_FLD_MVNO<1,DPTR> BEFORE SSD_FLD_MVNO<1,DPOS>
            INS SSD_FLD_SMVNO<1,DPTR> BEFORE SSD_FLD_SMVNO<1,DPOS>
            INS SSD_FLD_TABLE<1,DPTR> BEFORE SSD_FLD_TABLE<1,DPOS>
            INS SSD_FLD_PFX<1,DPTR> BEFORE SSD_FLD_PFX<1,DPOS>
            INS SEQNO BEFORE SSD_FLD_SEQ<1,DPOS>
            INS SSD_FLD_REF<1,DPTR> BEFORE SSD_FLD_REF<1,DPOS>
            INS SSD_FLD_TYPE<1,DPTR> BEFORE SSD_FLD_TYPE<1,DPOS>
            INS SSD_FLD_X<1,DPTR> BEFORE SSD_FLD_X<1,DPOS>
            INS SSD_FLD_Y<1,DPTR> BEFORE SSD_FLD_Y<1,DPOS>
            INS SSD_FLD_CNV<1,DPTR> BEFORE SSD_FLD_CNV<1,DPOS>
            INS SSD_FLD_FMT<1,DPTR> BEFORE SSD_FLD_FMT<1,DPOS>
            INS SSD_FLD_LINES<1,DPTR> BEFORE SSD_FLD_LINES<1,DPOS>
            INS SSD_FLD_LNSPC<1,DPTR> BEFORE SSD_FLD_LNSPC<1,DPOS>
            INS SSD_FLD_LNK<1,DPTR> BEFORE SSD_FLD_LNK<1,DPOS>
            INS SSD_FLD_LCHR<1,DPTR> BEFORE SSD_FLD_LCHR<1,DPOS>
            INS SSD_FLD_DSTLST<1,DPTR> BEFORE SSD_FLD_DSTLST<1,DPOS>
            INS SSD_FLD_HIDE<1,DPTR> BEFORE SSD_FLD_HIDE<1,DPOS>
            INS SSD_FLD_EXPR<1,DPTR> BEFORE SSD_FLD_EXPR<1,DPOS>
            INS SSD_FLD_ESTK<1,DPTR> BEFORE SSD_FLD_ESTK<1,DPOS>
            INS SSD_FLD_TSTK<1,DPTR> BEFORE SSD_FLD_TSTK<1,DPOS>
            INS SSD_FLD_ORG<1,DPTR> BEFORE SSD_FLD_ORG<1,DPOS>
            INS SSD_FLD_SUBR<1,DPTR> BEFORE SSD_FLD_SUBR<1,DPOS>
            INS SSD_FLD_LNKREF<1,DPTR> BEFORE SSD_FLD_LNKREF<1,DPOS>
            INS SSD_SBR_VID<1,DPTR> BEFORE SSD_SBR_VID<1,DPOS>
            INS SSD_SBR_VVALUE<1,DPTR> BEFORE SSD_SBR_VVALUE<1,DPOS>
            DPTR = DPTR + 1
            SSD_FIELDS = DELETE(SSD_FIELDS,1,DPTR,0)
            SSD_FLD_ATTNO = DELETE(SSD_FLD_ATTNO,1,DPTR,0)
            SSD_FLD_MVNO = DELETE(SSD_FLD_MVNO,1,DPTR,0)
            SSD_FLD_SMVNO = DELETE(SSD_FLD_SMVNO,1,DPTR,0)
            SSD_FLD_TABLE = DELETE(SSD_FLD_TABLE,1,DPTR,0)
            SSD_FLD_PFX = DELETE(SSD_FLD_PFX,1,DPTR,0)
            SSD_FLD_SEQ = DELETE(SSD_FLD_SEQ,1,DPTR,0)
            SSD_FLD_REF = DELETE(SSD_FLD_REF,1,DPTR,0)
            SSD_FLD_TYPE = DELETE(SSD_FLD_TYPE,1,DPTR,0)
            SSD_FLD_X = DELETE(SSD_FLD_X,1,DPTR,0)
            SSD_FLD_Y = DELETE(SSD_FLD_Y,1,DPTR,0)
            SSD_FLD_CNV = DELETE(SSD_FLD_CNV,1,DPTR,0)
            SSD_FLD_FMT = DELETE(SSD_FLD_FMT,1,DPTR,0)
            SSD_FLD_LINES = DELETE(SSD_FLD_LINES,1,DPTR,0)
            SSD_FLD_LNSPC = DELETE(SSD_FLD_LNSPC,1,DPTR,0)
            SSD_FLD_LNK = DELETE(SSD_FLD_LNK,1,DPTR,0)
            SSD_FLD_LCHR = DELETE(SSD_FLD_LCHR,1,DPTR,0)
            SSD_FLD_DSTLST = DELETE(SSD_FLD_DSTLST,1,DPTR,0)
            SSD_FLD_HIDE = DELETE(SSD_FLD_HIDE,1,DPTR,0)
            SSD_FLD_EXPR = DELETE(SSD_FLD_EXPR,1,DPTR,0)
            SSD_FLD_ESTK = DELETE(SSD_FLD_ESTK,1,DPTR,0)
            SSD_FLD_TSTK = DELETE(SSD_FLD_TSTK,1,DPTR,0)
            SSD_FLD_ORG = DELETE(SSD_FLD_ORG,1,DPTR,0)
            SSD_FLD_SUBR = DELETE(SSD_FLD_SUBR,1,DPTR,0)
            SSD_FLD_LNKREF = DELETE(SSD_FLD_LNKREF,1,DPTR,0)
            SSD_SBR_VID = DELETE(SSD_SBR_VID,1,DPTR,0)
            SSD_SBR_VVALUE = DELETE(SSD_SBR_VVALUE,1,DPTR,0)
         END
      END
   WHILE DPTR DO
      DPTR = DPTR - 1
   REPEAT
   FOR ZSEQ = 1001 TO ZCNTR1
      LOCATE ZSEQ IN SSD_FLD_SEQ<1>,1 SETTING DPOS THEN
         SSD_FLD_SEQ<1,DPOS> = 0
      END
   NEXT ZSEQ
   FOR ZSEQ = 2001 TO ZCNTR2
      LOCATE ZSEQ IN SSD_FLD_SEQ<1>,1 SETTING DPOS THEN
         SSD_FLD_SEQ<1,DPOS> = 0
      END
   NEXT ZSEQ
   RETURN
*
*---- CHECK FORMULA VARIABLE SEQUENCING
6500*
   ERRMSG = ""
   IF SSD_FLD_EXPR = "" THEN RETURN
   IF SSD_FLD_EXPR = STR(VM,LEN(SSD_FLD_EXPR)) THEN RETURN
   FCNT = DCOUNT(SSD_FIELDS,VM)
   FOR FPTR = 1 TO FCNT
      IF SSD_FLD_EXPR<1,FPTR> # "" THEN
         ECNT = DCOUNT(SSD_FLD_TSTK<1,FPTR>,SVM)
         FOR EPTR = 1 TO ECNT
            IF SSD_FLD_TSTK<1,FPTR,EPTR> = "V" THEN
               EXPVAR = SSD_FLD_ESTK<1,FPTR,EPTR>
               BEGIN CASE
                  CASE EXPVAR = "CO"
                  CASE EXPVAR = "@CONO"
                  CASE EXPVAR = "@DATE"
                  CASE EXPVAR = "@TIME"
                  CASE 1
                     FLDNAM = SSD_FIELDS<1,FPTR>
                     POSEXP = "(":SSD_FLD_X<1,FPTR>:",":SSD_FLD_Y<1,FPTR>:")"
                     LOCATE EXPVAR IN SSD_FIELDS<1>,1 SETTING VPTR THEN
                        IF SSD_FLD_SEQ<1,VPTR> > SSD_FLD_SEQ<1,FPTR> THEN
                           POSVAR = "(":SSD_FLD_X<1,VPTR>:",":SSD_FLD_Y<1,VPTR>:")"
                           ERRMSG = "Variable ":EXPVAR:" @":POSVAR:" is out of sequence for formula @":POSEXP:"."
                           GOSUB 91000
                        END
                     END ELSE
                        ERRMSG = "Variable ":EXPVAR:" missing for formula @":POSEXP:"."
                        GOSUB 91000
                     END
               END CASE
            END
         NEXT EPTR
      END
   NEXT FPTR
   RETURN
*
*---- Get Table Fields
7000*
   ERRMSG = ""
   MATREAD SFR.REC FROM SYS_FILES, TABLE_ID ELSE
      ERRMSG = "Cannot locate TABLE # ":TABLE_ID
      GOSUB 91000; GOTO 7099
   END
   BEGIN CASE
      CASE SFR.TYPE # "D" AND SFR.TYPE # "O"
         ERRMSG = "TABLE (":TABLE_ID:") is defined as a utility table"
         GOSUB 91000; GOTO 7099
      CASE SFR.CPYLIB = ""
         ERRMSG = "The Data Structure has not been set for TABLE # ":TABLE_ID
         GOSUB 91000; GOTO 7099
   END CASE
   LOCATE SFR.CPYLIB IN CPYLIB_NAME,1 SETTING CPLB_LOC ELSE
      OPEN "", SFR.CPYLIB TO CPYLIB_FILE(CPLB_LOC) ELSE
         ERRMSG = "Cannot locate the (":SFR.CPYLIB:") Data structure"
         GOSUB 91000; GOTO 7099
      END
      CPYLIB_NAME<CPLB_LOC> = SFR.CPYLIB
   END
   READ CPYLIB_REC FROM CPYLIB_FILE(CPLB_LOC), SFR.CPLB.NAME ELSE
      ERRMSG = "Cannot locate the Data Structure for TABLE # ":SFR.CPLB.NAME
      GOSUB 91000; GOTO 7099
   END
*
   OPEN "",TABLE_ID TO DATA_FILE_PTR ELSE
      ERRMSG = "Cannot locate the (":TABLE_ID:") data file"
      GOSUB 91000; GOTO 7099
   END
   OPEN "DICT", TABLE_ID TO DICT_FILE_PTR ELSE
      ERRMSG = "Cannot locate the (":TABLE_ID:") dict file"
      GOSUB 91000; GOTO 7099
   END
   PFX = ""; FLD_REC = CPYLIB_REC
   CALL CPYLIB_SUB(FLD_REC,PFX,ARRAY_NAME,ARRAY_SIZE,ERRMSG)
   IF ERRMSG # "" THEN
      GOSUB 91000; GOTO 7099
   END ELSE
      MATREAD PFR.REC FROM PFX_FILES, PFX ELSE
         MAT PFR.REC = ""
         PFR_FILE = TABLE_ID
      END
*        IF PFR_FILE # TABLE_ID THEN
*           ERRMSG = "Prefix (":PFX:") has already been setup for table (":PFR_FILE:")"
*           GOSUB 91000; GOTO 7099
*        END
   END
7099*
   RETURN
*
*---- Get ID fields
7100*
   IDCNT = DCOUNT(SFR.ID,VM)
   FOR I = 1 TO IDCNT
      BEGIN CASE
         CASE SFR.ID.TYPE<1,I> = "I"
            INS SFR.ID<1,I> BEFORE TBL_FLDS<1>
            INS TABLE_ID BEFORE TBL_FLD_LNK<1>
            INS TABLE_ID BEFORE TBL_XREF<1>
            LOCATE SFR.ID<1,I> IN REQ_IDS,1 SETTING ILOC ELSE
               REQ_IDS<ILOC> = SFR.ID<1,I>
            END
         CASE SFR.ID.TYPE<1,I> = "D"
            MATREAD PFR.REC FROM PFX_FILES, SFR.ID<1,I> THEN
               LOCATE SFR.ID<1,I> IN PMC_SYS_ID,1 SETTING ILOC ELSE
                  LOCATE SFR.ID<1,I> IN REQ_IDS,1 SETTING ILOC ELSE
                     REQ_IDS<ILOC> = SFR.ID<1,I>
                  END
               END
               IF PFR_FILE # SSD_M_TABLE THEN
                  LOCATE PFR_FILE IN SSD_S_TABLE<1>,1 SETTING ILOC ELSE
                     SSD_S_TABLE<1,ILOC> = PFR_FILE
                  END
               END
            END
      END CASE
   NEXT I
   RETURN
*
*---- Get Data Fields
7200*
   CCNT = DCOUNT(FLD_REC,AM)
   FOR CI = 1 TO CCNT
      IF FLD_REC<CI> # "" THEN
         FLD_NAME = PFX:"_":FLD_REC<CI>
         MATREAD DFD.REC FROM SYS_FIELDS, FLD_NAME THEN
*              IF DFD_LVL = "S" THEN
            LOCATE FLD_NAME IN TBL_FLDS,1 BY "AL" SETTING ILOC ELSE
               INS FLD_NAME BEFORE TBL_FLDS<ILOC>
               INS DFD_LNK_FILE BEFORE TBL_FLD_LNK<ILOC>
               INS TABLE_ID BEFORE TBL_XREF<ILOC>
            END
            IF DFD_LNK_FILE # "" AND DFD_LNK_FILE # SSD_M_TABLE THEN
               LOCATE FLD_NAME IN SSD_FIELDS<1>,1 SETTING ILOC THEN
                  LOCATE DFD_LNK_FILE IN SSD_S_TABLE<1>,1 SETTING ILOC ELSE
                     SSD_S_TABLE<1,ILOC> = DFD_LNK_FILE
                  END
               END
            END
*              END
         END
      END
   NEXT CI
   RETURN
*
*---- Error routines
91000*
   CRT @(0,23):ERRMSG:CL:
   INPUT REPLY,1_:
   CRT @(0,23):CL:
   RETURN
93000*
   CRT @(0,23):ERRMSG:CL:
   INPUT REPLY,1_:
99999*
END
