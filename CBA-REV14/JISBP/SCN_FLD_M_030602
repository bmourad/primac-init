      SUBROUTINE SCN_FLD_M(S_NAME,FLD_ID,XLOC,YLOC)
*COPY>CPYLIB>COM_SCREENM
*T22664 rick 03/18/1998 * Modify distribution list to allow entry of
*                         @CSR and @SLS to represent CSR or Salesperson
*                         from the Job.
*********************************************************************
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* Revision      - [10.0]
* Revision Date - 04/28/94
* System        - PRIMAC
* Library       - JISBP/DATA_SCN_M
* Author        - Ziad Yamout, VERCOM Software, Inc.
*
*TASK20309 MWS 5/25/96 MAKE ROW AND COLUMN NUMBERS CONSISTANT IN FORM
*          BUILD AND FORMS CONTROL.
*
*********************************************************************
*
*---- Data Structure Libraries
*
*COPY>PMC.CPYLIB>MENUS.CONTROL
*COPY>PMC.CPYLIB>SECURITY
*COPY>JIS.CPYLIB>SYS_SCN_DEF
*COPY>JIS.CPYLIB>SYS_FILES
*COPY>JIS.CPYLIB>PFX_FILES
*COPY>JIS.CPYLIB>SYS_FIELDS
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>GEN.XREF.SUB
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*
      DIM S_SSD_REC(40)
      DIM S_DFD.REC(35)
      DIM SCN_FLD_REC(29)
      DIM FLD_NAME_REC(22)
      DIM X_LOC_REC(24)
      DIM Y_LOC_REC(24)
      DIM FMT_REC(24)
      MAX_SNO = 2; SCNO = 1
      DIM SCN_HDR_CRT(MAX_SNO)
      DIM SCN_CLR_CRT(MAX_SNO)
*
      EQU FLD_TABLE  TO SCN_FLD_REC(1)
      EQU FLD_PFX    TO SCN_FLD_REC(2)
      EQU FLD_ATTNO  TO SCN_FLD_REC(5)
      EQU FLD_MVNO   TO SCN_FLD_REC(6)
      EQU FLD_SMVNO  TO SCN_FLD_REC(7)
      EQU FLD_LCHR   TO SCN_FLD_REC(8)
      EQU FLD_SEQ    TO SCN_FLD_REC(9)
      EQU FLD_REF    TO SCN_FLD_REC(10)
      EQU FLD_TYPE   TO SCN_FLD_REC(11)
      EQU FLD_X      TO SCN_FLD_REC(12)
      EQU FLD_Y      TO SCN_FLD_REC(13)
      EQU FLD_CNV    TO SCN_FLD_REC(14)
      EQU FLD_FMT    TO SCN_FLD_REC(15)
      EQU FLD_LINES  TO SCN_FLD_REC(16)
      EQU FLD_LNSPC  TO SCN_FLD_REC(17)
      EQU FLD_LNK    TO SCN_FLD_REC(18)
      EQU FLD_LNKREF TO SCN_FLD_REC(19)
      EQU FLD_DSTLST TO SCN_FLD_REC(20)
      EQU FLD_HIDE   TO SCN_FLD_REC(21)
      EQU FLD_EXPR   TO SCN_FLD_REC(22)
      EQU FLD_ESTK   TO SCN_FLD_REC(23)
      EQU FLD_FNAME  TO SCN_FLD_REC(23)
      EQU FLD_TSTK   TO SCN_FLD_REC(24)
      EQU FLD_VNAME  TO SCN_FLD_REC(24)
      EQU FLD_JSTFY  TO SCN_FLD_REC(25)
      EQU FLD_LEN    TO SCN_FLD_REC(26)
      EQU FLD_SUBR   TO SCN_FLD_REC(27)
      EQU FLD_VID    TO SCN_FLD_REC(28)
      EQU FLD_VVALUE TO SCN_FLD_REC(29)
*
      EQU TABLE_X_L  TO X_LOC_REC(1)
      EQU PFX_X_L    TO X_LOC_REC(2)
      EQU ATTNO_X_L  TO X_LOC_REC(5)
      EQU MVNO_X_L   TO X_LOC_REC(6)
      EQU SMVNO_X_L  TO X_LOC_REC(7)
      EQU LCHR_X_L   TO X_LOC_REC(8)
      EQU SEQ_X_L    TO X_LOC_REC(9)
      EQU REF_X_L    TO X_LOC_REC(10)
      EQU TYPE_X_L   TO X_LOC_REC(11)
      EQU X_X_L      TO X_LOC_REC(12)
      EQU Y_X_L      TO X_LOC_REC(13)
      EQU CNV_X_L    TO X_LOC_REC(14)
      EQU FMT_X_L    TO X_LOC_REC(15)
      EQU LINES_X_L  TO X_LOC_REC(16)
      EQU LNSPC_X_L  TO X_LOC_REC(17)
      EQU LNK_X_L    TO X_LOC_REC(18)
      EQU LNKREF_X_L TO X_LOC_REC(19)
      EQU DSTLST_X_L TO X_LOC_REC(20)
      EQU HIDE_X_L   TO X_LOC_REC(21)
      EQU EXPR_X_L   TO X_LOC_REC(22)
      EQU JSTFY_X_L  TO X_LOC_REC(23)
      EQU LEN_X_L    TO X_LOC_REC(24)
*
      EQU TABLE_Y_L  TO Y_LOC_REC(1)
      EQU PFX_Y_L    TO Y_LOC_REC(2)
      EQU ATTNO_Y_L  TO Y_LOC_REC(5)
      EQU MVNO_Y_L   TO Y_LOC_REC(6)
      EQU SMVNO_Y_L  TO Y_LOC_REC(7)
      EQU LCHR_Y_L   TO Y_LOC_REC(8)
      EQU SEQ_Y_L    TO Y_LOC_REC(9)
      EQU REF_Y_L    TO Y_LOC_REC(10)
      EQU TYPE_Y_L   TO Y_LOC_REC(11)
      EQU X_Y_L      TO Y_LOC_REC(12)
      EQU Y_Y_L      TO Y_LOC_REC(13)
      EQU CNV_Y_L    TO Y_LOC_REC(14)
      EQU FMT_Y_L    TO Y_LOC_REC(15)
      EQU LINES_Y_L  TO Y_LOC_REC(16)
      EQU LNSPC_Y_L  TO Y_LOC_REC(17)
      EQU LNK_Y_L    TO Y_LOC_REC(18)
      EQU LNKREF_Y_L TO Y_LOC_REC(19)
      EQU DSTLST_Y_L TO Y_LOC_REC(20)
      EQU HIDE_Y_L   TO Y_LOC_REC(21)
      EQU EXPR_Y_L   TO Y_LOC_REC(22)
      EQU JSTFY_Y_L  TO Y_LOC_REC(23)
      EQU LEN_Y_L    TO Y_LOC_REC(24)
*
      EQU TABLE_FMT  TO FMT_REC(1)
      EQU PFX_FMT    TO FMT_REC(2)
      EQU ATTNO_FMT  TO FMT_REC(5)
      EQU MVNO_FMT   TO FMT_REC(6)
      EQU SMVNO_FMT  TO FMT_REC(7)
      EQU LCHR_FMT   TO FMT_REC(8)
      EQU SEQ_FMT    TO FMT_REC(9)
      EQU REF_FMT    TO FMT_REC(10)
      EQU TYPE_FMT   TO FMT_REC(11)
      EQU X_FMT      TO FMT_REC(12)
      EQU Y_FMT      TO FMT_REC(13)
      EQU CNV_FMT    TO FMT_REC(14)
      EQU FMT_FMT    TO FMT_REC(15)
      EQU LINES_FMT  TO FMT_REC(16)
      EQU LNSPC_FMT  TO FMT_REC(17)
      EQU LNK_FMT    TO FMT_REC(18)
      EQU LNKREF_FMT TO FMT_REC(19)
      EQU DSTLST_FMT TO FMT_REC(20)
      EQU HIDE_FMT   TO FMT_REC(21)
      EQU EXPR_FMT   TO FMT_REC(22)
      EQU JSTFY_FMT  TO FMT_REC(23)
      EQU LEN_FMT    TO FMT_REC(24)
*
      FLD_NAME_REC(1)  = "SSD_FLD_TABLE"
      FLD_NAME_REC(2)  = "SSD_FLD_PFX"
      FLD_NAME_REC(5)  = "SSD_FLD_ATTNO"
      FLD_NAME_REC(6)  = "SSD_FLD_MVNO"
      FLD_NAME_REC(7)  = "SSD_FLD_SMVNO"
      FLD_NAME_REC(8)  = "SSD_FLD_LCHR"
      FLD_NAME_REC(9)  = "SSD_FLD_SEQ"
      FLD_NAME_REC(10) = "SSD_FLD_REF"
      FLD_NAME_REC(11) = "SSD_FLD_TYPE"
      FLD_NAME_REC(12) = "SSD_FLD_X"
      FLD_NAME_REC(13) = "SSD_FLD_Y"
      FLD_NAME_REC(14) = "SSD_FLD_CNV"
      FLD_NAME_REC(15) = "SSD_FLD_FMT"
      FLD_NAME_REC(16) = "SSD_FLD_LINES"
      FLD_NAME_REC(17) = "SSD_FLD_LNSPC"
      FLD_NAME_REC(18) = "SSD_FLD_LNK"
      FLD_NAME_REC(19) = "SSD_FLD_LNKREF"
      FLD_NAME_REC(20) = "SSD_FLD_DSTLST"
      FLD_NAME_REC(21) = "SSD_FLD_HIDE"
      FLD_NAME_REC(22) = "SSD_FLD_EXPR"
*
      SCN_NAME = "SCN_FLD_M"
*
      CALL SCN_CRT_BLD(SCN_NAME,MAT SCN_HDR_CRT,MAT SCN_CLR_CRT,ERRMSG)
      IF ERRMSG # "" THEN GOTO 93000
      MAT S_SSD_REC = MAT SSD.REC
      MATREAD SSD.REC FROM SYS_SCN_DEF, SCN_NAME ELSE
         ERRMSG = "Cannot locate Setup screen - ":SCN_NAME
         GOTO 93000
      END
*
      PMSG_X_L = 36; PMSG_Y_L = 21
      ID_X_L = 17; ID_Y_L = 2
*
      FOR OPT = 1 TO 2
         LOCATE FLD_NAME_REC(OPT) IN SSD_FIELDS<1>,1 SETTING LOC ELSE LOC=1
         X_LOC_REC(OPT) = SSD_FLD_X<1,LOC>
         Y_LOC_REC(OPT) = SSD_FLD_Y<1,LOC>
         FMT_REC(OPT) = SSD_FLD_FMT<1,LOC>
      NEXT OPT
      FOR OPT = 5 TO 22
         LOCATE FLD_NAME_REC(OPT) IN SSD_FIELDS<1>,1 SETTING LOC ELSE LOC=1
         X_LOC_REC(OPT) = SSD_FLD_X<1,LOC>
         Y_LOC_REC(OPT) = SSD_FLD_Y<1,LOC>
         FMT_REC(OPT) = SSD_FLD_FMT<1,LOC>
      NEXT OPT
      JSTFY_X_L = LINES_X_L; JSTFY_Y_L = LINES_Y_L+1; JSTFY_FMT = "L#1"
      LEN_X_L = LNSPC_X_L; LEN_Y_L = LNSPC_Y_L+1; LEN_FMT = "L#3"
      MAT SSD.REC = MAT S_SSD_REC
*
      SCN_M_ID = SSD_M_ID
      SCN_FIELDS = SSD_FIELDS
*
      DTYP_INI = "E"; DTYP_DSC = "Edit"
      DTYP_INI<2> = "D"; DTYP_DSC<2> = "Display"
*
      TYPE_INI = "T"; TYPE_DSC = "Text"; OTYP_INI = 1
      TYPE_INI<2> = "N"; TYPE_DSC<2> = "Numeric"; OTYP_INI<2> = 3
      TYPE_INI<3> = "C"; TYPE_DSC<3> = "deCimal"; OTYP_INI<3> = 4
      TYPE_INI<4> = "A"; TYPE_DSC<4> = "Alpha"; OTYP_INI<4> = 2
      TYPE_INI<5> = "D"; TYPE_DSC<5> = "Date"; OTYP_INI<5> = 6
      TYPE_INI<6> = "L"; TYPE_DSC<6> = "Logical"; OTYP_INI<6> = 8
      TYPE_INI<7> = "P"; TYPE_DSC<7> = "Pattern"; OTYP_INI<7> = 7
      TYPE_INI<8> = "U"; TYPE_DSC<8> = "coUnter"; OTYP_INI<8> = 3
*
      CRT SCN_HDR_CRT(SCNO):
      BEGIN CASE
      CASE FLD_ID[1,2] = "@@"
         ORG_FLD_ID = "@":FIELD(FLD_ID,"@",3)
      CASE FLD_ID = "@DATE"
         ORG_FLD_ID = FLD_ID
      CASE FLD_ID = "@TIME"
         ORG_FLD_ID = FLD_ID
      CASE FLD_ID[1,1] = "@"
         ORG_FLD_ID = FIELD(FLD_ID,"@",2)
      CASE 1
         ORG_FLD_ID = FLD_ID
      END CASE
      FLD_NAME = ORG_FLD_ID
      ID_PFX = FIELD(FLD_NAME,"_",1):"_"
      GOSUB 1000
      IF ERRMSG # "" THEN GOTO 93000
      BEGIN CASE
      CASE DFD_LVL = "M"
         FLD_LNK = FIELD(ORG_FLD_ID,"_",1):"_":DFD_M_LNK
         IF ORG_FLD_ID = DFD_M_LNK THEN
            FLD_ASOC = DFD_M_ASOC
            INS DFD_M_LNK BEFORE FLD_ASOC<1,1>
         END ELSE
            MAT S_DFD.REC = MAT DFD.REC
            M_LNK = DFD_M_LNK
            MATREAD DFD.REC FROM SYS_FIELDS, M_LNK ELSE
               MAT DFD.REC = ""
            END
            FLD_ASOC = DFD_M_ASOC
            INS M_LNK BEFORE FLD_ASOC<1,1>
            MAT DFD.REC = MAT S_DFD.REC
         END
      CASE DFD_LVL = "V"
         FLD_LNK = FIELD(ORG_FLD_ID,"_",1):"_":DFD_V_LNK
         IF ORG_FLD_ID = DFD_V_LNK THEN
            FLD_ASOC = DFD_V_ASOC
            INS DFD_V_LNK BEFORE FLD_ASOC<1,1>
         END ELSE
            MAT S_DFD.REC = MAT DFD.REC
            V_LNK = DFD_V_LNK
            MATREAD DFD.REC FROM SYS_FIELDS, V_LNK ELSE
               MAT DFD.REC = ""
            END
            FLD_ASOC = DFD_V_ASOC
            INS V_LNK BEFORE FLD_ASOC<1,1>
            MAT DFD.REC = MAT S_DFD.REC
         END
      CASE 1
         FLD_ASOC = ""
         FLD_LNK = ""
      END CASE
      LIMIT = DCOUNT(FLD_ASOC,VM)
      FOR OPT = 1 TO LIMIT
         ASOC_NAME = ID_PFX:FLD_ASOC<1,OPT>
         IF ASOC_NAME # ORG_FLD_ID THEN
            LOCATE ASOC_NAME IN SCN_FIELDS<1>,1 SETTING LOC THEN
IF SSD_FLD_Y<1,LOC> = YLOC THEN
               LIMIT = 0
END
            END
         END
      NEXT OPT
      IF LIMIT THEN
         DFLT_LNK = ""
         DFLT_MVNO = ""
         DFLT_SMVNO = ""
         DFLT_LCHR = ""
         DFLT_LINES = ""
         DFLT_LNSPC = ""
      END ELSE
         DFLT_LNK = SSD_FLD_LNK<1,LOC>
         DFLT_MVNO = SSD_FLD_MVNO<1,LOC>
         DFLT_SMVNO = SSD_FLD_SMVNO<1,LOC>
         DFLT_LCHR = SSD_FLD_LCHR<1,LOC>
         DFLT_LINES = SSD_FLD_LINES<1,LOC>
         DFLT_LNSPC = SSD_FLD_LNSPC<1,LOC>
      END
*
*     CRT SCN_HDR_CRT(SCNO):
*
      CRT @(ID_X_L,ID_Y_L): FLD_ID "L#25" :
      IF FIELD(ORG_FLD_ID,"_",1) = ORG_FLD_ID THEN
         FLDTYPE = "ID"
      END ELSE
         FLDTYPE = "DATA"
      END
      FLD_LVL = DFD_LVL
      MAT SCN_FLD_REC = ""
      IF FLDTYPE = "ID" THEN
         LOCATE FLD_ID IN SCN_M_ID<1>,1 SETTING FLOC THEN
            FLD_X = SSD_ID_X<1,FLOC>
            FLD_Y = SSD_ID_Y<1,FLOC>
            FLD_CNV = SSD_ID_CNV<1,FLOC>
            FLD_FMT = SSD_ID_FMT<1,FLOC>
            FLD_MVNO = 1; FLD_SMVNO = 1
            FLD_LINES = 1; FLD_LNSPC = 1
            FLD_JSTFY = FIELD(FLD_FMT,"#",1)
            FLD_LEN = FIELD(FLD_FMT,"#",2)
            GOSUB 4000
         END ELSE
            SCN_M_ID<1,FLOC> = FLD_ID
            FLD_ATTNO = 0
            FLD_X = XLOC
            FLD_Y = YLOC
            BEGIN CASE
            CASE DFD_TYPE = "C"
               FLD_CNV = "MD":(DFD_DEC+0):DFD_PIC
            CASE DFD_TYPE = "D"
               FLD_CNV = "D2/"
            CASE DFD_TYPE = "N" AND DFD_PIC # ""
               FLD_CNV = "MD0":DFD_PIC
            CASE 1
               FLD_CNV = ""
            END CASE
            FLD_FMT = DFD_JUSTIFY:"#":DFD_LEN
            FLD_JSTFY = DFD_JUSTIFY
            FLD_LEN = DFD_LEN
            FLD_MVNO = 1; FLD_SMVNO = 1
            FLD_LINES = 1; FLD_LNSPC = 1
            GOSUB 4000
         END
      END ELSE
         LOCATE FLD_ID IN SCN_FIELDS<1>,1 SETTING FLOC THEN
            FLD_ATTNO = SSD_FLD_ATTNO<1,FLOC>
            FLD_MVNO = SSD_FLD_MVNO<1,FLOC>
            FLD_SMVNO = SSD_FLD_SMVNO<1,FLOC>
            FLD_LCHR = SSD_FLD_LCHR<1,FLOC>
            FLD_TABLE = SSD_FLD_TABLE<1,FLOC>
            FLD_PFX = SSD_FLD_PFX<1,FLOC>
            FLD_SEQ = SSD_FLD_SEQ<1,FLOC>
            FLD_REF = SSD_FLD_REF<1,FLOC>
            FLD_TYPE = SSD_FLD_TYPE<1,FLOC>
            FLD_X = SSD_FLD_X<1,FLOC>
            FLD_Y = SSD_FLD_Y<1,FLOC>
            FLD_CNV = SSD_FLD_CNV<1,FLOC>
            FLD_FMT = SSD_FLD_FMT<1,FLOC>
            FLD_LINES = SSD_FLD_LINES<1,FLOC>
            FLD_LNSPC = SSD_FLD_LNSPC<1,FLOC>
***********
            FLD_LNK = SSD_FLD_LNK<1,FLOC>
            FLD_DSTLST = SSD_FLD_DSTLST<1,FLOC>
            FLD_HIDE = SSD_FLD_HIDE<1,FLOC>
            FLD_EXPR = SSD_FLD_EXPR<1,FLOC>
            FLD_ESTK = SSD_FLD_ESTK<1,FLOC>
            FLD_TSTK = SSD_FLD_TSTK<1,FLOC>
***********
            FLD_SUBR = SSD_FLD_SUBR<1,FLOC>
            FLD_LNKREF = SSD_FLD_LNKREF<1,FLOC>
            FLD_VID = SSD_SBR_VID<1,FLOC>
            FLD_VVALUE = SSD_SBR_VVALUE<1,FLOC>
            FLD_JSTFY = FIELD(FLD_FMT,"#",1)
            FLD_LEN = FIELD(FLD_FMT,"#",2)
            GOSUB 4500; GOSUB 4510
         END ELSE
            SCN_FIELDS<1,FLOC> = FLD_ID
            FLD_ATTNO = DFD_ATTNO
            IF DFD_TABLE # SSD_M_TABLE THEN
               FLD_TABLE = DFD_TABLE
            END
            FLD_PFX = DFD_LNK
*           FLD_TYPE = DFD_TYPE
            FLD_X = XLOC
            FLD_Y = YLOC
            BEGIN CASE
            CASE DFD_TYPE = "C"
               FLD_CNV = "MD":DFD_DEC:DFD_PIC
            CASE DFD_TYPE = "D"
               FLD_CNV = "D2/"
            CASE DFD_TYPE = "N" AND DFD_PIC # ""
               FLD_CNV = "MD0":DFD_PIC
            CASE 1
               FLD_CNV = ""
            END CASE
            FLD_FMT = DFD_JUSTIFY:"#":DFD_LEN
            FLD_JSTFY = DFD_JUSTIFY
            FLD_LEN = DFD_LEN
*
            GOSUB 4500; GOSUB 4520
            IF YLOC = 22 THEN
               OPTLMT = 7
            END ELSE
               OPTLMT = 6
            END
            FOR OPTION = 1 TO OPTLMT
               ON OPTION GOSUB 130,140,150,160,170,190,220
               IF VALUE = "END" THEN OPTLMT = 0
            NEXT OPTION
            IF OPTLMT = 0 THEN
               SCN_FIELDS = DELETE(SCN_FIELDS,1,FLOC,0)
            END
         END
      END
*
*---- Prompt line
*
      MORE = 1
      LOOP
         X = PMSG_X_L; Y = PMSG_Y_L
         TYP = 1; MAXL = 3
         CALL EDIT.SUB
         OPTION = OCONV(VALUE,"MCU")
         BEGIN CASE
         CASE OPTION = "E" OR OPTION = "END"
            MORE = 0
         CASE OPTION = "F" AND FLD_Y = 22 AND FLD_HIDE < 1
            ERRMSG = "All fields positioned on row 23 are required to be hidden"
            GOSUB 91000
         CASE OPTION = "F"
            BEGIN CASE
            CASE FLDTYPE = "ID"
               SSD_M_ID = SCN_M_ID
               SSD_ID_X<1,FLOC> = FLD_X
               SSD_ID_Y<1,FLOC> = FLD_Y
               SSD_ID_CNV<1,FLOC> = FLD_CNV
               SSD_ID_FMT<1,FLOC> = FLD_FMT
            CASE 1
               SSD_FIELDS = SCN_FIELDS
               SSD_FLD_ATTNO<1,FLOC> = FLD_ATTNO
               SSD_FLD_LNK<1,FLOC> = FLD_LNK
               SSD_FLD_MVNO<1,FLOC> = FLD_MVNO
               SSD_FLD_SMVNO<1,FLOC> = FLD_SMVNO
               SSD_FLD_LCHR<1,FLOC> = FLD_LCHR
               SSD_FLD_TABLE<1,FLOC> = FLD_TABLE
               SSD_FLD_PFX<1,FLOC> = FLD_PFX
               SSD_FLD_SEQ<1,FLOC> = FLD_SEQ
               SSD_FLD_REF<1,FLOC> = FLD_REF
               SSD_FLD_TYPE<1,FLOC> = FLD_TYPE
               SSD_FLD_X<1,FLOC> = FLD_X
               SSD_FLD_Y<1,FLOC> = FLD_Y
               SSD_FLD_CNV<1,FLOC> = FLD_CNV
               SSD_FLD_FMT<1,FLOC> = FLD_FMT
               SSD_FLD_LINES<1,FLOC> = FLD_LINES
               SSD_FLD_LNSPC<1,FLOC> = FLD_LNSPC
               SSD_FLD_LNK<1,FLOC> = FLD_LNK
               SSD_FLD_DSTLST<1,FLOC> = FLD_DSTLST
               SSD_FLD_HIDE<1,FLOC> = FLD_HIDE
               SSD_FLD_EXPR<1,FLOC> = FLD_EXPR
               SSD_FLD_ESTK<1,FLOC> = FLD_ESTK
               SSD_FLD_TSTK<1,FLOC> = FLD_TSTK
               IF ORG_FLD_ID # FLD_ID THEN
                  SSD_FLD_ORG<1,FLOC> = ORG_FLD_ID
               END
               SSD_FLD_SUBR<1,FLOC> = FLD_SUBR
               SSD_FLD_LNKREF<1,FLOC> = FLD_LNKREF
               SSD_SBR_VID<1,FLOC> = FLD_VID
               SSD_SBR_VVALUE<1,FLOC> = FLD_VVALUE
            END CASE
            MORE = 0
         CASE OPTION = "L"
            GOSUB 300
         CASE NOT(NUM(OPTION))
         CASE OPTION < 1 OR OPTION > 13
         CASE 1
            ON OPTION GOSUB 110,120,130,140,150,160,170,180,190,210,220,230,240
         END CASE
      WHILE MORE DO REPEAT
      GOTO 99999
*
*---- Row
110*
      FLD_NAME = "SSD_FLD_Y"
      GOSUB 1000
      IF ERRMSG = "" THEN
         GOSUB 1100
         X = Y_X_L; Y = Y_Y_L
         JUSTIFY = FIELD(Y_FMT,"#",1); MAXL = FIELD(Y_FMT,"#",2)
         IF FLD_Y # "" THEN
            O.R = "O"
*TASK20903
*            DEFAULT = FLD_Y
            DEFAULT = (FLD_Y + 1)
*** ^
         END
         CALL EDIT.SUB
         IF VALUE # "END" THEN
*TASK20903
*            FLD_Y = VALUE
            FLD_Y = VALUE - 1
*** ^
         END
      END ELSE
         GOSUB 91000
      END
      RETURN
*
*---- Column
120*
      FLD_NAME = "SSD_FLD_X"
      GOSUB 1000
      IF ERRMSG = "" THEN
         GOSUB 1100
         X = X_X_L; Y = X_Y_L
         JUSTIFY = FIELD(X_FMT,"#",1); MAXL = FIELD(X_FMT,"#",2)
         IF FLD_X # "" THEN
            O.R = "O"
*TASK20903
*            DEFAULT = FLD_X
            DEFAULT = (FLD_X + 1)
*** ^
         END
         CALL EDIT.SUB
         IF VALUE # "END" THEN
*TASK20903
*            FLD_X = VALUE
            FLD_X = VALUE - 1
*** ^
         END
      END ELSE
         GOSUB 91000
      END
      RETURN
*
*---- Sequence
130*
      IF FLDTYPE = "ID" THEN GOTO 139
      FLD_NAME = "SSD_FLD_SEQ"
      GOSUB 1000
      IF ERRMSG # "" THEN
         GOSUB 91000; GOTO 139
      END
      GOSUB 1100
      X = SEQ_X_L; Y = SEQ_Y_L
      JUSTIFY = FIELD(SEQ_FMT,"#",1); MAXL = FIELD(SEQ_FMT,"#",2)
      IF FLD_SEQ = "" THEN
         DFLT_SEQ = 0; LIMIT = 100
         FOR I = 1 TO LIMIT
            LOCATE I IN SSD_FLD_SEQ<1>,1 SETTING FND ELSE
               DFLT_SEQ = I; LIMIT = 0
            END
         NEXT I
         IF DFLT_SEQ THEN
            O.R = "O"
            DEFAULT = DFLT_SEQ
         END
      END ELSE
         O.R = "O"
         DEFAULT = FLD_SEQ
      END
      CALL EDIT.SUB
      IF VALUE = "END" THEN GOTO 139
      IF VALUE > 0 THEN
         LOCATE VALUE IN SSD_FLD_SEQ<1>,1 SETTING FND THEN
            IF SSD_FIELDS<1,FND> # FLD_ID THEN
               IF FLD_SEQ # "" THEN
                  ERRMSG = "Sequence # ":VALUE:", is already utilized for Field (":SSD_FIELDS<1,FND>:")"
                  GOSUB 91000; GOTO 130
               END
               ERRMSG = "Seq # ":VALUE:", is already utilized for Field (":SSD_FIELDS<1,FND>:") Re-Seq (Y/N) :"
               GOSUB 91000
               IF REPLY # "Y" THEN GOTO 130
               SPTR = FND
               NEWSEQ = VALUE + 1
               LOOP
                  LOCATE NEWSEQ IN SSD_FLD_SEQ<1>,1 SETTING FND THEN
                     SPTR<-1> = FND
                     NEWSEQ = NEWSEQ + 1
                  END ELSE
                     NEWSEQ = 0
                  END
               WHILE NEWSEQ DO REPEAT
               CNT = DCOUNT(SPTR,AM)
               NEWSEQ = VALUE + 1
               FOR SL = 1 TO CNT
                  SSD_FLD_SEQ<1,SPTR<SL>> = VALUE + SL
               NEXT SL
            END
         END
      END
      FLD_SEQ = VALUE
139*
      RETURN
*
*---- Reference
140*
      BEGIN CASE
      CASE FLDTYPE = "ID"
         GOTO 149
      CASE FLD_TABLE = ""
      CASE FLD_LVL = "S" OR DFLT_MVNO # "" OR DFLT_SMVNO # ""
         FLD_REF = 0
         CRT @(REF_X_L,REF_Y_L):FLD_REF REF_FMT:
         GOTO 149
      END CASE
      FLD_NAME = "SSD_FLD_REF"
      GOSUB 1000
      IF ERRMSG # "" THEN
         GOSUB 91000; GOTO 149
      END
      GOSUB 1100
      X = REF_X_L; Y = REF_Y_L
      JUSTIFY = FIELD(REF_FMT,"#",1); MAXL = FIELD(REF_FMT,"#",2)
      BEGIN CASE
      CASE FLD_REF # ""
         O.R = "O"
         DEFAULT = FLD_REF
      CASE FLD_TABLE # ""
         O.R = "O"
         DEFAULT = 0
      CASE FLD_SEQ > 0
         O.R = "O"
         DEFAULT = FLD_SEQ
      END CASE
      CALL EDIT.SUB
      BEGIN CASE
      CASE VALUE = "END"
         GOTO 149
      CASE VALUE # "0"
         LOCATE VALUE IN SSD_FLD_REF<1>,1 SETTING FND THEN
            IF SSD_FIELDS<1,FND> # FLD_ID THEN
               ERRMSG = "Reference # ":VALUE:", is already utilized for Field - ":SSD_FIELDS<1,FND>
               GOSUB 91000; GOTO 140
            END
         END
      END CASE
      FLD_REF = VALUE
      IF NUM(FLD_REF) THEN
         IF LEN(FLD_REF) > 1 AND FLD_REF < 10 AND FLD_REF > 0 THEN
            FLD_REF = FLD_REF + 0
            CRT @(REF_X_L,REF_Y_L):FLD_REF REF_FMT:
         END
      END
149*
      RETURN
*
*---- Associated field
150*
      IF FLDTYPE = "ID" THEN GOTO 159
      FLD_NAME = "SSD_FLD_LNK"
      GOSUB 1000
      BEGIN CASE
      CASE ERRMSG # ""
         GOSUB 91000; GOTO 159
      CASE DFLT_LNK # ""
         FLD_LNK = DFLT_LNK
         CRT @(LNK_X_L,LNK_Y_L):FLD_LNK LNK_FMT:
         GOTO 159
      END CASE
151*
      GOSUB 1100
      X = LNK_X_L; Y = LNK_Y_L
      JUSTIFY = FIELD(LNK_FMT,"#",1); MAXL = FIELD(LNK_FMT,"#",2)
      O.R = "O"
      IF FLD_LNK # "" THEN
         DEFAULT = FLD_LNK
      END
      CALL EDIT.SUB
      BEGIN CASE
      CASE VALUE = "END"
         GOTO 159
      CASE VALUE = "" OR VALUE = FLD_ID
         FLD_LNK = VALUE
         GOTO 159
      END CASE
      LOCATE VALUE IN SSD_FIELDS<1>,1 SETTING FND THEN
         FLD_LNK = VALUE
      END ELSE
         ERRMSG = "Cannot locate Field (":VALUE:") definition for this screen!"
         GOSUB 91000; GOTO 151
      END
159*
      RETURN
*
*---- Multi Value
160*
      IF FLDTYPE = "ID" THEN GOTO 169
      FLD_NAME = "SSD_FLD_MVNO"
      GOSUB 1000
      BEGIN CASE
      CASE ERRMSG # ""
         GOSUB 91000; GOTO 169
      CASE FLD_LVL = "S"
         FLD_MVNO = 1
         CRT @(MVNO_X_L,MVNO_Y_L):FLD_MVNO MVNO_FMT:
         GOTO 169
      CASE DFLT_MVNO # ""
         FLD_MVNO = DFLT_MVNO
         CRT @(MVNO_X_L,MVNO_Y_L):FLD_MVNO MVNO_FMT:
         GOTO 169
      END CASE
      GOSUB 1100
      X = MVNO_X_L; Y = MVNO_Y_L
      JUSTIFY = FIELD(MVNO_FMT,"#",1); MAXL = FIELD(MVNO_FMT,"#",2)
      O.R = "O"
      IF FLD_MVNO = "" THEN
         DEFAULT = 0
      END ELSE
         DEFAULT = FLD_MVNO
      END
      CALL EDIT.SUB
      IF VALUE # "END" THEN
         FLD_MVNO = VALUE
      END
169*
      RETURN
*
*---- Sub Multi Value
170*
      IF FLDTYPE = "ID" THEN GOTO 179
      FLD_NAME = "SSD_FLD_SMVNO"
      GOSUB 1000
      BEGIN CASE
      CASE ERRMSG # ""
         GOSUB 91000; GOTO 179
      CASE FLD_LVL # "V"
         FLD_SMVNO = 1
         CRT @(SMVNO_X_L,SMVNO_Y_L):FLD_SMVNO SMVNO_FMT:
         GOTO 179
      CASE DFLT_SMVNO # ""
         FLD_SMVNO = DFLT_SMVNO
         CRT @(SMVNO_X_L,SMVNO_Y_L):FLD_SMVNO SMVNO_FMT:
         GOTO 179
      END CASE
      GOSUB 1100
      X = SMVNO_X_L; Y = SMVNO_Y_L
      JUSTIFY = FIELD(SMVNO_FMT,"#",1); MAXL = FIELD(SMVNO_FMT,"#",2)
      O.R = "O"
      IF FLD_SMVNO = "" THEN
         DEFAULT = 0
      END ELSE
         DEFAULT = FLD_SMVNO
      END
      CALL EDIT.SUB
      IF VALUE # "END" THEN
         FLD_SMVNO = VALUE
      END
179*
      RETURN
*
*---- Level Character
180*
      IF FLDTYPE = "ID" THEN GOTO 189
      FLD_NAME = "SSD_FLD_LCHR"
      GOSUB 1000
      BEGIN CASE
      CASE ERRMSG # ""
         GOSUB 91000; GOTO 189
      CASE FLD_MVNO < 1 OR FLD_SMVNO < 1
         FLD_LCHR = ""
         CRT @(LCHR_X_L,LCHR_Y_L):FLD_LCHR LCHR_FMT:
         GOTO 189
      CASE DFLT_LCHR # ""
         FLD_LCHR = DFLT_LCHR
         CRT @(LCHR_X_L,LCHR_Y_L):FLD_LCHR LCHR_FMT:
         GOTO 189
      END CASE
      GOSUB 1100
      X = LCHR_X_L; Y = LCHR_Y_L
      JUSTIFY = FIELD(LCHR_FMT,"#",1); MAXL = FIELD(LCHR_FMT,"#",2)
      O.R = "O"
      IF FLD_LCHR # "" THEN
         DEFAULT = FLD_LCHR
      END
      CALL EDIT.SUB
      IF VALUE # "END" THEN
         FLD_LCHR = VALUE
      END
189*
      RETURN
*
*---- Lines
190*
      IF FLDTYPE = "ID" THEN GOTO 199
      FLD_NAME = "SSD_FLD_LINES"
      GOSUB 1000
      BEGIN CASE
      CASE ERRMSG # ""
         GOSUB 91000; GOTO 199
      CASE (FLD_LVL = "S" AND FLD_LCHR = "") OR (FLD_LVL = "M" AND FLD_MVNO > 0 AND FLD_LCHR = "") OR (FLD_LVL = "V" AND FLD_SMVNO > 0 AND FLD_LCHR = "")
         FLD_LINES = 1; FLD_LNSPC = 1
         CRT @(LINES_X_L,LINES_Y_L):FLD_LINES LINES_FMT:
         CRT @(LNSPC_X_L,LNSPC_Y_L):FLD_LNSPC LNSPC_FMT:
         GOTO 199
      CASE DFLT_LINES # ""
         FLD_LINES = DFLT_LINES; FLD_LNSPC = DFLT_LNSPC
         CRT @(LINES_X_L,LINES_Y_L):FLD_LINES LINES_FMT:
         CRT @(LNSPC_X_L,LNSPC_Y_L):FLD_LNSPC LNSPC_FMT:
         GOTO 199
      END CASE
      GOSUB 1100
      X = LINES_X_L; Y = LINES_Y_L
      JUSTIFY = FIELD(LINES_FMT,"#",1); MAXL = FIELD(LINES_FMT,"#",2)
      O.R = "O"
      IF FLD_LINES = "" THEN
         DEFAULT = 1
      END ELSE
         DEFAULT = FLD_LINES
      END
      CALL EDIT.SUB
      IF VALUE # "END" THEN
         FLD_LINES = VALUE
         GOSUB 200
      END
199*
      RETURN
*
*---- Line Space
200*
      IF FLDTYPE = "ID" THEN GOTO 209
      FLD_NAME = "SSD_FLD_LNSPC"
      GOSUB 1000
      BEGIN CASE
      CASE ERRMSG # ""
         GOSUB 91000; GOTO 209
      CASE FLD_LINES < 2
         FLD_LNSPC = 1
         CRT @(LNSPC_X_L,LNSPC_Y_L):FLD_LNSPC LNSPC_FMT:
         GOTO 209
      CASE DFLT_LNSPC # ""
         FLD_LNSPC = DFLT_LNSPC
         CRT @(LNSPC_X_L,LNSPC_Y_L):FLD_LNSPC LNSPC_FMT:
         GOTO 209
      END CASE
      GOSUB 1100
      X = LNSPC_X_L; Y = LNSPC_Y_L
      JUSTIFY = FIELD(LNSPC_FMT,"#",1); MAXL = FIELD(LNSPC_FMT,"#",2)
      O.R = "O"
      IF FLD_LNSPC = "" THEN
         DEFAULT = 1
      END ELSE
         DEFAULT = FLD_LNSPC
      END
      CALL EDIT.SUB
      IF VALUE # "END" THEN
         FLD_LNSPC = VALUE
      END
209*
      RETURN
*
*---- Justify
210*
      X = JSTFY_X_L; Y = JSTFY_Y_L
      TYP = 1; JUSTIFY = "L"
      VALDAT = "L"; VALDAT<1,2> = "R"
      O.R = "O"; DEFAULT = FLD_JSTFY
      CALL EDIT.SUB
      IF VALUE # "END" THEN
         FLD_JSTFY = VALUE
         FLD_FMT = FLD_JSTFY:"#":FLD_LEN
         CRT @(FMT_X_L,FMT_Y_L):FLD_FMT FMT_FMT:
         GOSUB 215
      END
      RETURN
*
*---- Length
215*
      X = LEN_X_L; Y = LEN_Y_L
      TYP = 3; MAXL = 3; JUSTIFY = "L"
      MINV = 1; MAXV = 132
      O.R = "O"; DEFAULT = FLD_LEN
      CALL EDIT.SUB
      IF VALUE # "END" THEN
         FLD_LEN = VALUE
         FLD_FMT = FLD_JSTFY:"#":FLD_LEN
         CRT @(FMT_X_L,FMT_Y_L):FLD_FMT FMT_FMT:
      END
      RETURN
*
*---- Hide field
220*
      FLD_NAME = "SSD_FLD_HIDE"
      GOSUB 1000
      IF ERRMSG # "" THEN
         GOSUB 91000; GOTO 229
      END
      GOSUB 1100
      X = HIDE_X_L; Y = HIDE_Y_L
      JUSTIFY = FIELD(HIDE_FMT,"#",1); MAXL = FIELD(HIDE_FMT,"#",2)
      O.R = "O"
      BEGIN CASE
      CASE FLD_HIDE # ""
         DEFAULT = FLD_HIDE
      CASE YLOC = 22
         DEFAULT = 1
      END CASE
      CALL EDIT.SUB
      IF VALUE = "END" THEN GOTO 229
      IF VALUE < 1 AND FLD_Y = 22 THEN
         ERRMSG = "All fields positioned on row 22 are required to be hidden"
         GOSUB 91000; GOTO 220
      END
      FLD_HIDE = VALUE
229*
      RETURN
*
*---- Distribution list
230*
      IF FLDTYPE = "ID" THEN GOTO 239
      FLD_NAME = "SSD_FLD_DSTLST"
      GOSUB 1000
      BEGIN CASE
      CASE ERRMSG # ""
         GOSUB 91000; GOTO 239
      END CASE
      GOSUB 1100
      X = DSTLST_X_L; Y = DSTLST_Y_L
      JUSTIFY = FIELD(DSTLST_FMT,"#",1); MAXL = FIELD(DSTLST_FMT,"#",2)
      O.R = "O"
      IF FLD_DSTLST # "" THEN
         DEFAULT = FLD_DSTLST
      END
      CALL EDIT.SUB
      BEGIN CASE
      CASE VALUE = "END"
         GOTO 239
      CASE VALUE = ""
         FLD_DSTLST = VALUE
         GOTO 239
      END CASE
      LIMIT = DCOUNT(VALUE,",")
      FOR L = 1 TO LIMIT
         USRID = FIELD(VALUE,",",L)
*T22664 v
*T22664         IF USRID[1,2] = "L!" THEN
         BEGIN CASE
          CASE USRID[1,2] = "L!"
            READ REC FROM USER.MAIL, USRID ELSE
               ERRMSG = "Cannot locate user list # ":USRID[3,99]
               LIMIT = 0; GOSUB 91000
            END
*T22664               END ELSE
          CASE USRID[1,1] = "@"
            BEGIN CASE
              CASE USRID = "@SLS"
              CASE USRID = "@CSR"
              CASE 1
                 ERRMSG = "Invalid special user code ":USRID
                 LIMIT=0 ; GOSUB 91000
            END CASE
          CASE 1
*T22664 ^
            MATREAD SEC.REC FROM SECURITY, CONO:USRID ELSE
               LOCATE USRID IN SSD_FIELDS<1>,1 SETTING FND ELSE
                  ERRMSG = "Cannot locate user # ":USRID
                  LIMIT = 0; GOSUB 91000
               END
            END
*T22664              END
         END CASE     ;*T22664
      NEXT L
      IF LIMIT THEN
         FLD_DSTLST = VALUE
      END ELSE
         GOTO 230
      END
239*
      RETURN
*
*---- Calculation expression
240*
      BEGIN CASE
      CASE FLDTYPE = "ID"
         GOTO 249
      CASE FIELD(FLD_ID,"_",1) # SSD_M_ID AND FIELD(FIELD(FLD_ID,"@",2),"_",1) # SSD_M_ID
         GOTO 249
      END CASE
      FLD_NAME = "SSD_FLD_EXPR"
      GOSUB 1000
      BEGIN CASE
      CASE ERRMSG # ""
         GOSUB 91000; GOTO 249
      END CASE
      TEMP_EXPR = FLD_EXPR
      IF FLD_EXPR = "@SUBR" THEN
         GOSUB 700
         IF VALUE # "END" THEN GOTO 247
      END
245*
      REF = 1; GOSUB 270
      BEGIN CASE
      CASE VALUE = "END"
         GOTO 247
      CASE VALUE = "@SUBR"
         TEMP_EXPR = VALUE
         GOSUB 700
         IF VALUE = "END" THEN GOTO 245
         FLD_EXPR = TEMP_EXPR
         GOTO 247
      END CASE
      ERRMSG = ""
      TEMP_EXPR<1,1,1> = VALUE
      LIMIT = 3
      FOR REF = 2 TO LIMIT
         GOSUB 270
         IF VALUE = "END" THEN
            LIMIT = 0
         END ELSE
            ERRMSG = ""
            TEMP_EXPR<1,1,REF> = VALUE
         END
      NEXT REF
      IF LIMIT = 0 THEN GOTO 247
      ERRMSG = ""
      EXPR = ""
      FOR REF = 1 TO 3
         EXPR = EXPR:TEMP_EXPR<1,1,REF>
      NEXT REF
      CALL EXP.COMPILE(EXPR, FLD_ESTK, FLD_TSTK, SVM, ERRMSG, ERRPTR)
      IF ERRMSG = "" THEN
         ECNT = DCOUNT(FLD_TSTK,SVM)
         FOR EPTR = 1 TO ECNT WHILE ERRMSG = ""
            IF FLD_TSTK<1,1,EPTR> = "V" THEN
               EXPVAR = FLD_ESTK<1,1,EPTR>
               BEGIN CASE
               CASE EXPVAR = "CO"
               CASE EXPVAR = "@CONO"
               CASE EXPVAR = "@DATE"
               CASE EXPVAR = "@TIME"
               CASE 1
                  LOCATE EXPVAR IN SSD_FIELDS<1>,1 SETTING FND ELSE
                     ERRMSG = "WARNING - Variable ":EXPVAR:" cannot be found!"
                     GOSUB 91000
                     ERRMSG = ""
                  END
               END CASE
            END
         NEXT EPTR
      END
      IF ERRMSG # "" THEN
         GOSUB 91000
         GOTO 245
      END
      FLD_EXPR = ""
      FOR REF = 1 TO 3
         IF TEMP_EXPR<1,1,REF> # "" THEN
            FLD_EXPR<1,1,REF> = TEMP_EXPR<1,1,REF>
         END
      NEXT REF
247*
      FOR REF = 1 TO 3
         CRT @(EXPR_X_L,EXPR_Y_L+REF-1):FLD_EXPR<1,1,REF> EXPR_FMT:
      NEXT REF
249*
      RETURN
*
270*
      GOSUB 1100
      X = EXPR_X_L; Y = EXPR_Y_L + REF - 1
      JUSTIFY = FIELD(EXPR_FMT,"#",1); MAXL = FIELD(EXPR_FMT,"#",2)
      DEFAULT = TEMP_EXPR<1,1,REF>
      CALL EDIT.SUB
      RETURN
*
*---- Table Link Field
300*
      IF FLDTYPE = "ID" THEN GOTO 309
      FLD_NAME = "SSD_FLD_LNKREF"
      GOSUB 1000
      BEGIN CASE
      CASE ERRMSG # ""
         GOSUB 91000; GOTO 309
      END CASE
301*
      GOSUB 1100
      X = LNKREF_X_L; Y = LNKREF_Y_L
      JUSTIFY = FIELD(LNKREF_FMT,"#",1); MAXL = FIELD(LNKREF_FMT,"#",2)
      O.R = "O"
      IF FLD_LNKREF # "" THEN
         DEFAULT = FLD_LNKREF
      END
      CALL EDIT.SUB
      BEGIN CASE
      CASE VALUE = "END"
         GOTO 309
      CASE VALUE = ""
         FLD_LNKREF = VALUE
         GOTO 309
      CASE VALUE = FLD_ID
         ERRMSG = "Cannot utilize the same field for its Table Link!"
         GOSUB 91000; GOTO 301
      END CASE
      LOCATE VALUE IN SSD_FIELDS<1>,1 SETTING FND ELSE FND = 0
      BEGIN CASE
      CASE FND = 0
         ERRMSG = "Cannot locate Field (":VALUE:") definition for this screen!"
         GOSUB 91000; GOTO 301
      CASE SSD_FLD_PFX<1,FND> = ""
         ERRMSG = "Field (":VALUE:") is not linked to any Table!"
         GOSUB 91000; GOTO 301
      CASE 1
         FLD_LNKREF = VALUE
      END CASE
309*
      RETURN
*
*---- Call Subroutine Definition
700*
      CALL SCN_SUBR_M(S_NAME,FLD_ID,FLD_SUBR,FLD_FNAME,FLD_VNAME,FLD_VID,FLD_VVALUE)
      CRT SCN_HDR_CRT(SCNO):
      CRT @(ID_X_L,ID_Y_L): FLD_ID "L#25" :
      IF FLDTYPE = "ID" THEN
         GOSUB 4000
      END ELSE
         GOSUB 4500; GOSUB 4510
      END
      IF FLD_FNAME = "" AND FLD_VNAME = "" THEN
         VALUE = "END"
      END
      RETURN
*
*---- Get field Definition
1000*
      ERRMSG = ""
      MATREAD DFD.REC FROM SYS_FIELDS, FLD_NAME ELSE
         ERRMSG = "Cannot locate field (":FLD_NAME:") Definition"
         GOTO 1099
      END
1099*
      RETURN
*
*---- Setup EDIT.SUB
1100*
      LOCATE DFD_TYPE IN TYPE_INI,1 SETTING TLOC ELSE TLOC = 1
      TYP = OTYP_INI<TLOC>; SCALER = DFD_DEC
      MAXL = DFD_LEN; MINL = DFD_MINL
      MAXV = DFD_MAXV; MINV = DFD_MINV
      JUSTIFY = DFD_JUSTIFY; FILL.CHR = DFD_FILL
      O.R = DFD_O_R; DEFAULT = DFD_DEFAULT
      PATRN = DFD_PATRN
      INVALCHR = FIELD(DFD_INVALCHR,",",1)
      CNT = DCOUNT(DFD_INVALCHR,",")
      FOR I = 2 TO CNT
         INVALCHR<1,I> = FIELD(DFD_INVALCHR,",",I)
      NEXT I
      ORVATDAT = DFD_ORVALDAT; VALDAT = DFD_VALDAT
      READ HMSG_REC FROM SYS_FLD_HMSG, FLD_NAME ELSE
         HMSG_REC = ""
      END
      HMSG = HMSG_REC<1>
      CNT = DCOUNT(HMSG_REC,AM)
      FOR I = 2 TO CNT
         HMSG<1,I> = HMSG_REC<I>
      NEXT I
      RETURN
*
*---- Display Data
4000*
      LOCATE DFD_TYPE IN DTYP_INI,1 SETTING TLOC THEN
         FLD_DSC = DTYP_DSC<TLOC>
      END ELSE
         FLD_DSC = DFD_TYPE
      END
      CRT @(PFX_X_L,PFX_Y_L):DFD_TABLE TABLE_FMT:
      CRT @(TABLE_X_L,TABLE_Y_L):"Data Entry" TABLE_FMT:
      CRT @(LNKREF_X_L,LNKREF_Y_L):FLD_LNKREF LNKREF_FMT:
*TEST 
      CRT @(Y_X_L,Y_Y_L):(FLD_Y + 1) Y_FMT:
      CRT @(ATTNO_X_L,ATTNO_Y_L):DFD_ATTNO ATTNO_FMT:
      CRT @(LNK_X_L,LNK_Y_L):FLD_LNK LNK_FMT:
      CRT @(MVNO_X_L,MVNO_Y_L):FLD_MVNO MVNO_FMT:
      CRT @(SMVNO_X_L,SMVNO_Y_L):FLD_SMVNO SMVNO_FMT:
      CRT @(LCHR_X_L,LCHR_Y_L):FLD_LCHR LCHR_FMT:
*TEST 
      CRT @(X_X_L,X_Y_L):(FLD_X + 1) X_FMT:
      CRT @(SEQ_X_L,SEQ_Y_L):FLD_SEQ SEQ_FMT:
      CRT @(REF_X_L,REF_Y_L):FLD_REF REF_FMT:
      CRT @(TYPE_X_L,TYPE_Y_L):FLD_DSC TYPE_FMT:
      CRT @(CNV_X_L,CNV_Y_L):FLD_CNV CNV_FMT:
      CRT @(FMT_X_L,FMT_Y_L):FLD_FMT FMT_FMT:
      CRT @(LINES_X_L,LINES_Y_L):FLD_LINES LINES_FMT:
      CRT @(LNSPC_X_L,LNSPC_Y_L):FLD_LNSPC LNSPC_FMT:
      CRT @(JSTFY_X_L,JSTFY_Y_L):FLD_JSTFY JSTFY_FMT:
      CRT @(LEN_X_L,LEN_Y_L):FLD_LEN LEN_FMT:
      CRT @(HIDE_X_L,HIDE_Y_L):FLD_HIDE HIDE_FMT:
      CRT @(DSTLST_X_L,DSTLST_Y_L):FLD_DSTLST DSTLST_FMT:
      FOR REF = 1 TO 3
         CRT @(EXPR_X_L,EXPR_Y_L+REF-1):FLD_EXPR<1,1,REF> EXPR_FMT:
      NEXT REF
      RETURN
4500*
      IF FLD_PFX = "" THEN
         CRT @(PFX_X_L,PFX_Y_L):FLD_PFX PFX_FMT:
      END ELSE
         MATREAD PFR.REC FROM PFX_FILES, FLD_PFX ELSE
            PFR_FILE = FLD_PFX
         END
         CRT @(PFX_X_L,PFX_Y_L):PFR_FILE PFX_FMT:
      END
      IF FLD_TABLE = "" THEN
         CRT @(TABLE_X_L,TABLE_Y_L):DFD_TABLE TABLE_FMT:
      END ELSE
         CRT @(TABLE_X_L,TABLE_Y_L):FLD_TABLE TABLE_FMT:
      END
      CRT @(LNKREF_X_L,LNKREF_Y_L):FLD_LNKREF LNKREF_FMT:
*TEST
*      CRT @(Y_X_L,Y_Y_L):FLD_Y Y_FMT:
      CRT @(Y_X_L,Y_Y_L):(FLD_Y + 1) Y_FMT:
      CRT @(ATTNO_X_L,ATTNO_Y_L):FLD_ATTNO ATTNO_FMT:
      CRT @(LNK_X_L,LNK_Y_L):FLD_LNK LNK_FMT:
      CRT @(MVNO_X_L,MVNO_Y_L):FLD_MVNO MVNO_FMT:
      CRT @(SMVNO_X_L,SMVNO_Y_L):FLD_SMVNO SMVNO_FMT:
      CRT @(LCHR_X_L,LCHR_Y_L):FLD_LCHR LCHR_FMT:
* TEST
*      CRT @(X_X_L,X_Y_L):FLD_X X_FMT:
      CRT @(X_X_L,X_Y_L):(FLD_X + 1) X_FMT:
      RETURN
4510*
      CRT @(SEQ_X_L,SEQ_Y_L):FLD_SEQ SEQ_FMT:
      CRT @(REF_X_L,REF_Y_L):FLD_REF REF_FMT:
4520*
      LOCATE DFD_TYPE IN DTYP_INI,1 SETTING TLOC THEN
         FLD_DSC = DTYP_DSC<TLOC>
      END ELSE
         FLD_DSC = DFD_TYPE
      END
      CRT @(TYPE_X_L,TYPE_Y_L):FLD_DSC TYPE_FMT:
      CRT @(CNV_X_L,CNV_Y_L):FLD_CNV CNV_FMT:
      CRT @(FMT_X_L,FMT_Y_L):FLD_FMT FMT_FMT:
      CRT @(LINES_X_L,LINES_Y_L):FLD_LINES LINES_FMT:
      CRT @(LNSPC_X_L,LNSPC_Y_L):FLD_LNSPC LNSPC_FMT:
      CRT @(JSTFY_X_L,JSTFY_Y_L):FLD_JSTFY JSTFY_FMT:
      CRT @(LEN_X_L,LEN_Y_L):FLD_LEN LEN_FMT:
      CRT @(HIDE_X_L,HIDE_Y_L):FLD_HIDE HIDE_FMT:
      CRT @(DSTLST_X_L,DSTLST_Y_L):FLD_DSTLST DSTLST_FMT:
      FOR REF = 1 TO 3
         CRT @(EXPR_X_L,EXPR_Y_L+REF-1):FLD_EXPR<1,1,REF> EXPR_FMT:
      NEXT REF
      RETURN
*
*---- Error routines
91000*
      CRT @(0,23):ERRMSG:CL:
      INPUT REPLY,1_:
      CRT @(0,23):CL:
      RETURN
93000*
      CRT @(0,23):ERRMSG:CL:
      INPUT REPLY,1_:
99999*
      RETURN
   END
