  SUBROUTINE RCV.RF.WHSE.RECV (ACTION, CONO, EMPID, MAT RCV.FILE.VARS)
*********************************************************************
*
* PROGRAM  - RCV.RF.WHSE.RECV
*
* AUTHOR   - JULIANNE MATHESON, NASTech, Inc.
*
* DATE     - 05/10/00
*
* DESCRIPTION
*
* This program is used to process interdivisional warehouse transfers
* from the hand-held R-F units used in the warehouse.
*
*T26132 cm 09/07/2001 * Change screen size from 21x16 to 20x15.
*T26497 adelgado 04/01/2002 * Modify to incorporate the new
*                             Inter-Divisional transfer.
*********************************************************************
*
*---- COPY STATEMENTS
*
*COPY>CPYLIB>COM1
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>ICS.CPYLIB>COM.INV.LINK  
*COPY>RCV.CPYLIB>RCV.FILE.VARS
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>EMPLOYEE
*COPY>CPYLIB>SCREEN.COM
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>ICS.CPYLIB>INV_SERIAL
*COPY>ICS.CPYLIB>CATEGORY
*COPY>ICS.CPYLIB>INV.CNV
*COPY>RCV.CPYLIB>INTR_DIV_TRANSFER
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*
*---- OPEN ALL FILES
*
  OPEN "","INTR_DIV_TRANSFER" TO INTR_DIV_TRANSFER ELSE
    ERRMSG = "NO INTR_DIV_TRANSFER FILE"
    GOTO 93000
  END
  OPEN "","CATEGORY" TO CATEGORY ELSE
    ERRMSG = "NO CATEGORY FILE"
    GOTO 93000
  END
  OPEN "","INVENTORY" TO INVENTORY ELSE
    ERRMSG = "NO INVENTORY FILE"
    GOTO 93000
  END
  OPEN "","INV.WHSE" TO INV.WHSE ELSE
    ERRMSG = "NO INV.WHSE FILE"
    GOTO 93000
  END
  OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE
    ERRMSG = "NO INV.WHSE.LOC FILE"
    GOTO 93000
  END
  OPEN "","INV_SERIAL" TO INV_SERIAL ELSE
    ERRMSG = "NO INV_SERIAL FILE"
    GOTO 93000
  END
  OPEN "","INTR_SERIAL_XREF" TO INTR_SERIAL_XREF ELSE
    ERRMSG = "NO INTR_SERIAL_XREF"
    GOTO 93000
  END
  OPEN "","WAREHOUSE" TO WAREHOUSE ELSE
    ERRMSG = "NO WAREHOUSE FILE"
    GOTO 93000
  END
  OPEN "","DIVISION" TO DIVISION ELSE
    ERRMSG = "NO DIVISION FILE"
    GOTO 93000
  END
*
*---- INITIALIZATION
*
  REAL.TIME = 1
  TEST.MODE = 0
  IF LEN(ACTION) > 1 THEN
    IF ACTION[LEN(ACTION),1] = "T" THEN
      TEST.MODE = 1
    END
  END
  SPX = ""
  EMPNAME = "???????????????"
  MATREAD EMP.REC FROM EMPLOYEE, CONO:EMPID THEN
    EMPNAME = (EMP.FRST.NAME:" ":EMP.LAST.NAME)[1,20]
  END
  IF LEN(EMPNAME) < 20 THEN SPX = SPACE(INT((21-LEN(EMPNAME))/2))
  EMPNAME = SPX:EMPNAME
  MATREAD COMP.REC FROM COMPANY,CONO ELSE MAT COMP.REC = ''
  IF CO.INTR.WHSE = '' THEN CO.INTR.WHSE = 'INTR'          
*
*---- INITIALIZE SCREEN.COM
*
  MAT S$EDIT = ""
  S$TYP = 0
  CALL RF.INPUT
  GOSUB 89990
  S$MASK = "#"
  ERY = 15
*
*---- DISPLAY SCREEN
*
  DIM SCRN(15)
  MAT SCRN = ""
  XXXXXXXX = " 12345678901234567890 "
  XXXXXXXX = "+--------------------+"
  SCRN(01) = "|    TRANSFER IN     |"
  SCRN(02) = "|--------------------|"
  SCRN(03) = "|@@@@@@@@@@@@@@@@@@@@|"
  SCRN(04) = "|--------------------|"
  SCRN(05) = "|                    |"
  SCRN(06) = "|Transit : #######   |"
  SCRN(07) = "|Whse    : ####      |"
  SCRN(08) = "|Loc     : ####      |"
  SCRN(09) = "|                    |"
  SCRN(10) = "|Serial  : ########  |"
  SCRN(11) = "|--------------------|"
  SCRN(12) = "|Prior   : ########  |"
  SCRN(13) = "|                    |"
  SCRN(14) = "|Correct (Y/N)? #    |"
  SCRN(15) = "|                    |"
  XXXXXXXX = "+--------------------+"
  XXXXXXXX = " 12345678901234567890 "
*
  SLINE = @(-1)
  FOR SL = 1 TO 15
    SDATA = SCRN(SL)[2,20]
    CONVERT "#" TO " " IN SDATA
    CONVERT "@" TO " " IN SDATA
    SDATA = TRIMB(SDATA)
    LDATA = LEN(SDATA)
    LDONE = 0
    FOR N = 1 TO LDATA UNTIL LDONE
      IF SDATA[N,1] # " " THEN
        SLINE = SLINE:@((N-1),(SL-1)):SDATA[N,99]
        LDONE = 1
      END
    NEXT N
  NEXT SL
  PRINT SLINE:
  GOSUB 89990
*
*---- MAIN PROCESSING
*
  TRANS.ID = ''
  WHSE = ""; LOC = ""
  LOOP
    RELEASE
    PRINT @(00,02):EMPNAME:
    PRINT @(11,05):@(-4):
    PRINT @(11,06):@(-4):
    PRINT @(11,07):@(-4):
    PRINT @(11,09):@(-4):
    PRINT @(11,12):@(-4):
    GOSUB 89990
    ALL.DONE = 0
    FOR POS = 1 TO 3 UNTIL (ALL.DONE)
      ON POS GOSUB GET.TRANSIT,GET.WHSE,GET.LOC
    NEXT POS
    SERIAL.IDS = ""
  UNTIL ALL.DONE DO
    PRINT @(00,02):EMPNAME:
    PRINT @(12,09):@(-4):
    GOSUB 89990
    GOSUB GET.SERIAL
    IF SERIAL.IDS = "" THEN CONTINUE
    S$TYP=8; S$X=16; S$Y=13; S$EX=0; S$EY=15; S$ERY=15
    CALL RF.INPUT
    GOSUB 89990
    IF S$VALUE = "END" THEN GOTO 1080
    IF S$VALUE = "Y" THEN
      RCNT = DCOUNT(SERIAL.IDS,VM)
      FOR RPTR = 1 TO RCNT
        GOSUB 5000
        IF ERRMSG # "" THEN
          ERRMSG = SERIAL.IDS<1,RPTR>:ERRMSG; GOSUB 91000
        END
      NEXT RPTR
      IDM.STATUS = 3
      MATWRITE IDM.REC ON INTR_DIV_TRANSFER, CONO:TRANS.ID
    END
1080 *
    PRINT @(11,05):@(-4):
    PRINT @(11,06):@(-4):
    PRINT @(11,07):@(-4):
    PRINT @(11,09):@(-4):
    PRINT @(11,11):@(-4):
    GOSUB 89990
  REPEAT
  RETURN
*
*---- PROCESS TRANSFER
*
5000 *
  ERRMSG = ""
  SERIAL.ID = SERIAL.IDS<1,RPTR>
  MATREAD ISTK.REC FROM INV_SERIAL, CONO:SERIAL.ID ELSE
    ERRMSG = "ROLL SKID MISSING"
    RETURN
  END
  LOCATE ISTK.PROD IN IDM.PROD.NO<1>,1 SETTING TOS THEN
    LOCATE SERIAL.ID IN IDM.SERIAL<1,TOS>,1 SETTING RSPTR ELSE
      ERRMSG = 'NOT IN TRANSIT'
      RETURN
    END
  END ELSE
    ERRMSG = 'NOT IN TRANSIT'
    RETURN
  END
  IF IDM.RECV.DATE<1,TOS,RSPTR> # '' THEN
    ERRMSG = "ALREADY RECV'D"
    RETURN
  END
  IDM.TO.WHSE<1,TOS,RSPTR> = WHSE
  IDM.TO.LOC<1,TOS,RSPTR> = LOC
  IDM.RECV.STATUS<1,TOS,RSPTR> = 'I'
  RETURN
*
*---- DRAW BORDER
*
89990 *
  IF TEST.MODE THEN
    FOR SL = 1 TO 15
      PRINT @(20,(SL-1)):"|":
    NEXT SL
    PRINT @(0,15):"--------------------+":
  END
  RETURN
*
GET.TRANSIT: 
*
  LOOP
    LOOP.DONE = 1
    S$TYP=1; S$X=11; S$Y=5; S$MINL=1; S$MAXL=7; S$EX=0; S$EY=15; ERY=15 
    S$O.R="O"; S$DEFAULT=TRANS.ID
    CALL RF.INPUT
    GOSUB 89990
    BEGIN CASE
      CASE S$VALUE = 'END' OR S$VALUE = 'E'
        ALL.DONE = 1
      CASE S$VALUE = ''
        ALL.DONE = 1
      CASE 1
        TMP = LEN(TRIM(S$VALUE))
        IF S$VALUE[TMP,1] # 'T' AND TMP LT 7 THEN
          S$VALUE = S$VALUE:'T' ; TMP += 1
        END
        IF TMP GT 7 THEN TMP = 7
        TMP = 7 - TMP
        S$VALUE = STR('0',TMP):S$VALUE
        PRINT @(11,05):@(-4):S$VALUE
        MATREADU IDM.REC FROM INTR_DIV_TRANSFER, CONO:S$VALUE LOCKED
          ERRMSG = 'TRANSIT # LOCKED'
          GOSUB 91000 ; LOOP.DONE = 0 ; CONTINUE
        END ELSE
          ERRMSG = 'TRANSIT NOT FOUND'
          GOSUB 91000 ; LOOP.DONE = 0 ; CONTINUE
        END
        BEGIN CASE
          CASE IDM.STATUS = 1
            ERRMSG = 'TRANSFER OUT FIRST'
            GOSUB 91000 ; LOOP.DONE = 0 ; CONTINUE
            RELEASE INTR_DIV_TRANSFER, CONO:S$VALUE
          CASE IDM.STATUS = 4
            ERRMSG = 'ALREADY COMPLETED'
            GOSUB 91000 ; LOOP.DONE = 0 ; CONTINUE
            RELEASE INTR_DIV_TRANSFER, CONO:S$VALUE
        END CASE
        TRANS.ID = S$VALUE
    END CASE
  UNTIL LOOP.DONE DO REPEAT
  *
  RETURN
*
GET.WHSE: 
*
  LOOP
    LOOP.DONE = 1
    S$TYP=1; S$X=11; S$Y=6; S$MINL=1; S$MAXL=4; S$EX=0; S$EY=15; ERY=15 
    S$O.R="O"; S$DEFAULT=WHSE
    CALL RF.INPUT
    GOSUB 89990
    BEGIN CASE
      CASE S$VALUE = 'END' OR S$VALUE = ''
        POS -= 2
      CASE S$VALUE = CO.INTR.WHSE
        ERRMSG = 'TRANSIT WHSE USED' ; GOSUB 91000 ; LOOP.DONE = 0
      CASE 1
        MATREAD WHSE.REC FROM WAREHOUSE, CONO:S$VALUE THEN
          IF WHS.DIV # IDM.TO.DIV THEN
            ERRMSG = 'WHSE/DIV MISMATCH' ; GOSUB 91000 ; LOOP.DONE = 0
          END ELSE
            WHSE = S$VALUE
          END
        END ELSE
          ERRMSG = "INVALID WAREHOUSE"; GOSUB 91000 ; LOOP.DONE = 0
        END
    END CASE 
  UNTIL LOOP.DONE DO REPEAT
  *
  RETURN
*
GET.LOC: 
*
  S$TYP=1;S$X=11;S$Y=7;S$MINL=1;S$MAXL=4;S$EX=0;S$EY=15;ERY=15
  S$O.R="O"; S$DEFAULT=LOC
  CALL RF.INPUT
  GOSUB 89990
  IF S$VALUE # 'END' AND S$VALUE # '' THEN
    LOC = S$VALUE
  END ELSE
    POS -= 2
  END
  *
  RETURN
*
GET.SERIAL: 
*
  LOOP.DONE = 0
  LOOP
    S$TYP=1;S$X=7;S$Y=9;S$MINL=8;S$MAXL=8;S$EX=0;S$EY=15;ERY=15
    S$O.R="O"; S$DEFAULT=""
    CALL RF.INPUT
    GOSUB 89990
    BEGIN CASE
      CASE S$VALUE = 'END' OR S$VALUE = ''
        LOOP.DONE = 1
      CASE 1
        READ TEST.REC FROM INTR_SERIAL_XREF, CONO:S$VALUE THEN
          IF TEST.REC<1> # TRANS.ID THEN
            ERRMSG = 'NOT TIED TO TRANSIT'; GOSUB 91000; CONTINUE
          END
        END ELSE
          ERRMSG = "ALREADY RECV'D"; GOSUB 91000; CONTINUE
        END
        MATREAD ISTK.REC FROM INV_SERIAL, CONO:S$VALUE ELSE
          ERRMSG = "CANNOT FIND SERIAL"; GOSUB 91000; CONTINUE
        END
        IF ISTK.POST.DATE = "" THEN
          ERRMSG = "SERIAL NOT RCVD"; GOSUB 91000; CONTINUE
        END
        IF ISTK.WHSE = WHSE THEN
          ERRMSG = "ALREADY RECV'D"; GOSUB 91000; CONTINUE
        END
        MATREAD IWLO.REC FROM INV.WHSE.LOC, CONO:ISTK.PROD:"!":ISTK.WHSE:"!":ISTK.LOC ELSE
          ERRMSG = "CANNOT FIND SERIAL"; GOSUB 91000; CONTINUE
        END
        LOCATE S$VALUE IN IWLO.SERIAL<1>,1 SETTING P ELSE
          ERRMSG = "CANNOT FIND SERIAL"; GOSUB 91000; CONTINUE
        END
        LOCATE S$VALUE IN SERIAL.IDS<1>,1 SETTING ROLLPTR ELSE
          SERIAL.IDS<1,ROLLPTR> = S$VALUE
        END
        PRINT @(7,11):S$VALUE"L#8":
    END CASE
  UNTIL LOOP.DONE DO REPEAT
  *
  RETURN
*
*---- ERROR ROUTINE
*
91000 *
  PRINT @(0,ERY):@(-4):BEL:BEL:ERRMSG[1,19]:
  INPUT REPLY,1:
  PRINT @(0,ERY):@(-4):
  ERY = 15
  RETURN
93000 *
  GOSUB 91000
*
*---- END OF PROGRAM
*
99999 *
  RETURN
END
