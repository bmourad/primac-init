*COPY>CPYLIB>COM1              
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>ICS.CPYLIB>COM.INV.LINK  
*********************************************************************
*
* PROGRAM  - INTR.OUT.MAINFEST.MAINT
*
* AUTHOR   - Alejandro Delgado, Vercom
*
* DATE     - 12/28/2001
*
* DESCRIPTION
*
* This program is used to maintain the Manifest data for the
* Roll/Skid Inter-Divisional Transfer system.
*
*T26219 adelgado 12/28/2001 * Original Code.
*T26497 adelgado 03/20/2002 * Migrate inter-divisional transfer to
*                             Rev12.
*T26556 cmykleb 06/14/2002 * Rev12 changes.
*C40187 ajibaly 06/17/2002 * Allow alpha-numeric input of serials
*********************************************************************
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>FISCAL
*COPY>PMC.CPYLIB>GLTABLE
*COPY>ICS.CPYLIB>CATEGORY
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>ICS.CPYLIB>INV_SERIAL
*COPY>ICS.CPYLIB>INV.CNV
*COPY>ICS.CPYLIB>DAILY_TRANSFER
*COPY>ICS.CPYLIB>TRANSFER
*COPY>RCV.CPYLIB>INTR_DIV_TRANSFER
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>GEN.XREF.SUB
*COPY>CPYLIB>XREF.DATA
*COPY>CPYLIB>SYSCOM
   SYS.TYPE = 1               
   CALL SYSCOM(MAT SYSCOM.REC)
*
*---- OPEN ALL FILES
*
   OPEN "","COMPANY" TO COMPANY ELSE
      ERRMSG = "CANNOT OPEN COMPANY FILE"; GOSUB 91000; STOP
   END
   OPEN "","CONTROL" TO CONTROL ELSE
      ERRMSG = "CANNOT OPEN CONTROL FILE"; GOSUB 91000; STOP
   END
   OPEN "","SECURITY" TO SECURITY ELSE
      ERRMSG = "CANNOT OPEN SECURITY FILE"; GOSUB 91000; STOP
   END
   OPEN "","WAREHOUSE" TO WAREHOUSE ELSE
      ERRMSG = "CANNOT OPEN WAREHOUSE FILE"; GOSUB 91000; STOP
   END
   OPEN "","CATEGORY" TO CATEGORY ELSE
      ERRMSG = "CANNOT OPEN CATEGORY FILE"; GOSUB 91000; STOP
   END
   OPEN "","DIVISION" TO DIVISION ELSE
      ERRMSG = "CANNOT OPEN DIVISION FILE"; GOSUB 91000; STOP
   END
   OPEN "","INVENTORY" TO INVENTORY ELSE
      ERRMSG = "CANNOT OPEN INVENTORY FILE"; GOSUB 91000; STOP
   END
   OPEN "","INVENTORY.XREF" TO INVENTORY.XREF ELSE
      ERRMSG = "CANNOT OPEN INVENTORY.XREF FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV.WHSE" TO INV.WHSE ELSE
      ERRMSG = "CANNOT OPEN INV.WHSE FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE
      ERRMSG = "CANNOT OPEN INV.WHSE.LOC FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV.WHSE.LOC.TEMP" TO INV.WHSE.LOC.TEMP ELSE
      ERRMSG = "CANNOT OPEN INV.WHSE.LOC.TEMP FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV_SERIAL" TO INV_SERIAL ELSE
      ERRMSG = "CANNOT OPEN INV_SERIAL FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV_SERIAL_TEMP" TO INV_SERIAL_TEMP ELSE
      ERRMSG = "CANNOT OPEN INV_SERIAL_TEMP FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV_AUDIT_HIST" TO INV_AUDIT_HIST ELSE
      ERRMSG = "CANNOT OPEN INV_AUDIT_HIST FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV_AUDIT_HIST_TEMP" TO INV_AUDIT_HIST_TEMP ELSE
      ERRMSG = "CANNOT OPEN INV_AUDIT_HIST_TEMP FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV_AUDIT_TAG" TO INV_AUDIT_TAG ELSE
      ERRMSG = "CANNOT OPEN INV_AUDIT_TAG FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV_RECEIPTS" TO INV_RECEIPTS ELSE
      ERRMSG = "CANNOT OPEN INV_RECEIPTS FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV_RECEIPTS_TEMP" TO INV_RECEIPTS_TEMP ELSE
      ERRMSG = "CANNOT OPEN INV_RECEIPTS_TEMP FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV_RECP_WHSE" TO INV_RECP_WHSE ELSE
      ERRMSG = "CANNOT OPEN INV_RECP_WHSE FILE"; GOSUB 91000; STOP
   END
   OPEN "","INV_RECP_WHSE_TEMP" TO INV_RECP_WHSE_TEMP ELSE
      ERRMSG = "CANNOT OPEN INV_RECP_WHSE_TEMP FILE"; GOSUB 91000; STOP
   END
   OPEN "","INTR_DIV_TRANSFER" TO INTR_DIV_TRANSFER ELSE
      ERRMSG = "CANNOT OPEN INTR_DIV_TRANSFER FILE"; GOSUB 91000; STOP
   END
   OPEN "","INTR_SERIAL_XREF" TO INTR_SERIAL_XREF ELSE
      ERRMSG = "CANNOT OPEN INTR_SERIAL_XREF FILE"; GOSUB 91000; STOP
   END
   OPEN "","RCV.SCREENS" TO M.SCREENS ELSE
      ERRMSG = "CANNOT OPEN RCV.SCREENS FILE"; GOSUB 91000; STOP
   END
   OPEN "","XREF.DATA" TO XREF.DATA ELSE
      ERRMSG = "CANNOT OPEN XREF.DATA FILE"; GOSUB 91000; STOP
   END
   OPEN "","PREFIX" TO PREFIX ELSE
      ERRMSG = "CANNOT OPEN PREFIX FILE"; GOSUB 91000; STOP
   END
*
*---- INITIALIZATION
*
   CONO = ""
   CALL GET.CONO1 (CONO, MAT COMP.REC, COMPANY, CONTROL)
   IF CO.INTR.WHSE = '' THEN
      ERRMSG = 'THE INTER-DIVISIONAL WAREHOUSE IS NOT SETUP IN THE COMPANY FILE.'
      GOSUB 91000 ; STOP
   END
   MATREAD WHSE.REC FROM WAREHOUSE, CONO:CO.INTR.WHSE ELSE
      ERRMSG = 'INTER-DIVISIONAL WAREHOUSE IS NOT SETUP IN THE WAREHOUSE FILE'
      GOSUB 91000 ; STOP
   END
   READ DIVISION.REC FROM CONTROL, CONO:"DIVISIONS" ELSE 
      ERRMSG = "DIVISIONS CONTROL FILE RECORD IS MISSING" 
      GOTO 93000
   END 
   READ SECURITY.REC FROM CONTROL, CONO:"DIV.SECURITY" ELSE
      ERRMSG = "DIV.SECURITY CONTROL FILE RECORD IS MISSING"
      GOTO 93000
   END 
   MATREAD FISCAL.REC FROM CONTROL, CONO:"ICFISCAL" ELSE
      ERRMSG = "Cannot locate Inventory Control Fiscal Period !!"
      GOSUB 93000
   END
   MATREAD GLTABLE.REC FROM CONTROL, CONO:'GLTABLE' THEN
      IF GLTB.IC.INT.DIV = '' THEN
         ERRMSG = 'NO G/L ACCT EXIST FOR INTER-DIVISIONAL ACCOUNTING'
         GOSUB 91000 ; STOP
      END
   END ELSE
      ERRMSG = 'Cannot locate General Ledger Table'
      GOSUB 93000
   END
   MAT EDIT.COM.DRIVER = ""
   ECD.SCRN.CNT = 1
   ECD.SCRN.NAME = "INTR.OUT.MANIFEST.MAINT"
   ECD.ACTION=1; CALL SCRN.EDIT
   ECD.SCRN.NO = 1
   ESN = ECD.SCRN.NO
   PORT.NO='TTY'
   CALL SYSVARS.SUB(PORT.NO)
   READV OPER.ID FROM SECURITY, "R.":PORT.NO,2 ELSE OPER.ID = ''
   IF OPER.ID = '' THEN
      OPER.ID = 'T-???'
   END ELSE
      OPER.ID = 'T-':OPER.ID
   END
   MAT SCV.REC = ""
   ECD.ACTION=2; CALL SCRN.EDIT
   BEGIN.PAGE = 10
   PAGE.SIZE = 10
   TODAY = DATE()
   LINE.SPACE = 1
   MAT GEN.XREF.REC = ''
   GXR.CO = CONO
*
*        MAIN LOOP
*
   LOOP
      ALL.DONE = 0
      GOSUB INIT.VAR
      GOSUB GET.TRANSFER
   UNTIL (ALL.DONE) DO
      TEMP = TRIM(IDM.DESC:IDM.SHIP.POST:IDM.SHIP.MON)
      IF TRANS.ID = 'N' OR TEMP = '' THEN
         GOSUB AUTO.PROMPT.FIELD
      END
      IF NOT(ALL.DONE) THEN GOSUB BOTTOM.PROMPT
   REPEAT
   GOTO 99999
*
INIT.VAR: 
*
   TRANS.ID = ''
   PROD.ARRAY = ''
   RS.ARRAY = ''
   DEL.RS.LIST = ''
   PROD.CNT = 0
   PROD.PTR = 1
   ROLL.CNT = 1
   ROLL.PTR = 1
   OLD.START = ""
   ECD.ACTION=6; CALL SCRN.EDIT
   MAT SCV.REC = ""
   INQUIRY.FLG = 0
   BASWGT = '' ; IWIDTH = '' ; U.M = ''
   MAT INV.CNV.REC = ""
  *
   RETURN
*
GET.TRANSFER: 
*
   LOOP
      LOOP.DONE = 1
      ECD.NUM = 1 ; ECD.DEFAULT = 'N'
      ECD.ACTION = 4; CALL SCRN.EDIT
      BEGIN CASE
         CASE ECD.RET.VALUE = 'END' OR ECD.RET.VALUE = 'E'
            ALL.DONE = 1
         CASE ECD.RET.VALUE = 'N'
            TRANS.ID = ECD.RET.VALUE
            MAT IDM.REC = ''
         CASE ECD.RET.VALUE # ''
            TMP = LEN(TRIM(ECD.RET.VALUE))
            IF ECD.RET.VALUE[TMP,1] # 'T' AND TMP LT 7 THEN
               ECD.RET.VALUE = ECD.RET.VALUE:'T' ; TMP += 1
            END
            IF TMP GT 7 THEN TMP = 7
            TMP = 7 - TMP
            ECD.RET.VALUE = STR('0',TMP):ECD.RET.VALUE
            MATREADU IDM.REC FROM INTR_DIV_TRANSFER, CONO:ECD.RET.VALUE LOCKED
               ERRMSG = 'TRANSFER record is locked by user - ':GETUSERNAME(STATUS())
               GOSUB 91000 ; LOOP.DONE = 0 ; CONTINUE
            END ELSE
               ERRMSG = 'TRANSIT #':ECD.RET.VALUE:' IS NOT ON FILE'
               GOSUB 91000 ; LOOP.DONE = 0 ; CONTINUE
            END
            IF IDM.STATUS GT 1 THEN
               ERRMSG = 'TRANSIT #':ECD.RET.VALUE:' HAS ALREADY BEEN SHIPPED'
               GOSUB 91000 ; INQUIRY.FLG = 1
               RELEASE INTR_DIV_TRANSFER, CONO:ECD.RET.VALUE
            END
            TRANS.ID = ECD.RET.VALUE
            SCV.REC(ECD.NUM)<ESN> = TRANS.ID
            GOSUB BUILD.SCV.REC
      END CASE
   UNTIL (LOOP.DONE) DO REPEAT
   IF NOT(ALL.DONE) THEN
      ECD.ACTION = 5 ; CALL SCRN.EDIT
   END
  *
   RETURN
*
BUILD.SCV.REC: 
* 
   IF SECURITY.REC<1> = "Y" AND SECURITY.REC<2> = "Y" THEN
      LOCATE IDM.FROM.DIV IN DIVISION.REC<1>,1 SETTING DIV.POS ELSE
         DIV.POS = 1
      END
   END ELSE
      DIV.POS = 1
   END
   VALID.PRODUCT = 1 ; VALID.ROLL = 1
   PROD.QTY = 0
   PROD.CNT = DCOUNT(IDM.PROD.NO,@VM)
   FOR PROD.PTR = 1 TO PROD.CNT
      PROD.ID = IDM.PROD.NO<1,PROD.PTR>
      GOSUB VALIDATE.INV
      PROD.ARRAY<1,PROD.PTR> = PROD.ID         
      PROD.ARRAY<2,PROD.PTR> = INV.DESC              
      PROD.ARRAY<3,PROD.PTR> = BASWGT:"# ":IWIDTH:'"'
      PROD.ARRAY<4,PROD.PTR> = U.M                   
      ROLL.CNT = DCOUNT(IDM.SERIAL<1,PROD.PTR>,@SVM)
      FOR ROLL.PTR = 1 TO ROLL.CNT
         RS.ARRAY<PROD.PTR,ROLL.PTR,1> = IDM.SERIAL<1,PROD.PTR,ROLL.PTR>
         RS.ARRAY<PROD.PTR,ROLL.PTR,2> = IDM.FROM.LOC<1,PROD.PTR,ROLL.PTR>
         IF INQUIRY.FLG = 1 THEN
            RS.ARRAY<PROD.PTR,ROLL.PTR,3> = INT(((IDM.SERIAL.QTY<1,PROD.PTR,ROLL.PTR>/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
            RS.ARRAY<PROD.PTR,ROLL.PTR,4> = IDM.SERIAL.MILL<1,PROD.PTR,ROLL.PTR>
            CONTINUE
         END
         MATREAD ISTK.REC FROM INV_SERIAL, CONO:IDM.SERIAL<1,PROD.PTR,ROLL.PTR> THEN
            RS.ARRAY<PROD.PTR,ROLL.PTR,3> = INT(((ISTK.CUR.QTY/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
            RS.ARRAY<PROD.PTR,ROLL.PTR,4> = ISTK.MILL.ID<1,PROD.PTR,ROLL.PTR>
         END ELSE
            RS.ARRAY<PROD.PTR,ROLL.PTR,3> = INT(((IDM.SERIAL.QTY<1,PROD.PTR,ROLL.PTR>/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
            RS.ARRAY<PROD.PTR,ROLL.PTR,4> = IDM.SERIAL.MILL<1,PROD.PTR,ROLL.PTR>
         END
      NEXT ROLL.PTR
   NEXT PROD.PTR
   PROD.PTR = 1
   SCV.REC(2) = IDM.FROM.WHSE
   SCV.REC(3) = IDM.TO.DIV
   SCV.REC(4) = IDM.SHIP.POST
   SCV.REC(5) = IDM.DESC
   SCV.REC(48) = IDM.SHIP.MON
   GOSUB DISPLAY.PROD
  *
   RETURN
*
AUTO.PROMPT.FIELD: 
*
   BEGIN CASE
      CASE TRANS.ID = 'N' ; START = 1
      CASE TEMP = '' ; START = 3
      CASE 1 ; START = 1
   END CASE
   FOR X = START TO 5 UNTIL (ALL.DONE)
      ON X GOSUB GET.WHSE, GET.TO.DIV, GET.ENTRY.DATE, GET.DESC, GET.PERIOD
   NEXT X
   IF (ALL.DONE) THEN RETURN
   IF START = 3 THEN RETURN
   GOSUB GET.PRODUCT
  *
   RETURN
*
GET.WHSE: 
*
   LOOP
      LOOP.DONE = 1
      ECD.NUM = 2
      ECD.ACTION = 4 ; CALL SCRN.EDIT
      BEGIN CASE
         CASE ECD.RET.VALUE="END"
            ALL.DONE = 1
         CASE ECD.RET.VALUE = CO.INTR.WHSE
            ERRMSG = 'CANNOT USE INTER-DIVISIONAL WAREHOUSE'
            GOSUB 91000 ; LOOP.DONE = 0
         CASE 1
            MATREAD WHSE.REC FROM WAREHOUSE,CONO:ECD.RET.VALUE THEN
               IF SECURITY.REC<1> = "Y" AND SECURITY.REC<2> = "Y" THEN
                  LOCATE WHS.DIV IN DIVISION.REC<1>,1 SETTING DIV.POS ELSE
                     ERRMSG = "Division ":WHS.DIV:" not found in DIVISIONS Control File record."
                     GOSUB 91000 ; LOOP.DONE = 0 ; CONTINUE
                  END
               END ELSE
                  DIV.POS = 1
               END
               IDM.FROM.WHSE = ECD.RET.VALUE
               IDM.FROM.DIV = WHS.DIV
               SCV.REC(ECD.NUM)<ESN> = IDM.FROM.WHSE
            END ELSE
               ERRMSG = 'CANNOT LOCATE WAREHOUSE.'
               GOSUB 91000 ; LOOP.DONE = 0
            END
      END CASE
   UNTIL (LOOP.DONE) DO REPEAT
   IF NOT(ALL.DONE) THEN
      ECD.ACTION = 5 ; CALL SCRN.EDIT
   END
  *
   RETURN
*
GET.TO.DIV: 
*
   LOOP
      LOOP.DONE = 1
      ECD.NUM = 3
      ECD.ACTION = 4 ; CALL SCRN.EDIT
      BEGIN CASE
         CASE ECD.RET.VALUE="END"
            ALL.DONE = 1
         CASE 1
            READ TEST.REC FROM DIVISION,CONO:ECD.RET.VALUE THEN
               IF ECD.RET.VALUE = WHS.DIV THEN
                  ERRMSG = "THE 'TO' DIVISION MATCHES WITH THE WAREHOUSE DIVISION."
                  GOSUB 91000 ; LOOP.DONE = 0
               END ELSE
                  IDM.TO.DIV = ECD.RET.VALUE
                  SCV.REC(ECD.NUM)<ESN> = IDM.TO.DIV
               END
            END ELSE
               ERRMSG = 'CANNOT LOCATE DIVISION.'
               GOSUB 91000 ; LOOP.DONE = 0
            END
      END CASE
   UNTIL (LOOP.DONE) DO REPEAT
   IF NOT(ALL.DONE) THEN
      ECD.ACTION = 5 ; CALL SCRN.EDIT
   END
  *
   RETURN
*
GET.ENTRY.DATE: 
*
   IF IDM.SHIP.POST = '' THEN ECD.DEFAULT = TODAY
   ECD.NUM = 4 ; ECD.ACTION = 4 ; CALL SCRN.EDIT
   IF ECD.RET.VALUE = 'END' THEN
      ALL.DONE = 1
   END ELSE
      DEF.PERIOD = '' ; ERR.FLG = '' ; ERRMSG = ''
      CALL CHECK.PERIOD.DATE(CONO,ECD.RET.VALUE,DEF.PERIOD,IDM.FROM.DIV,ERR.FLG,ERRMSG,COMPANY,CONTROL)
      BEGIN CASE                            
         CASE ERRMSG = ""                    
            IDM.SHIP.POST = ECD.RET.VALUE
            SCV.REC(ECD.NUM)<ESN> = IDM.SHIP.POST
         CASE ERR.FLG = 0                    
            IDM.SHIP.POST = ECD.RET.VALUE
            SCV.REC(ECD.NUM)<ESN> = IDM.SHIP.POST
            GOSUB 91000                       
         CASE ERR.FLG = 1                    
            GOSUB 91000; GOTO GET.ENTRY.DATE             
         CASE ERR.FLG = 2                    
            GOSUB 91000 ; ALL.DONE = 1
      END CASE                              
   END
  *
   RETURN
*
GET.DESC: 
*
   ECD.NUM = 5 ; ECD.ACTION = 4 ; CALL SCRN.EDIT
   IF ECD.RET.VALUE = 'END' THEN
      ALL.DONE = 1
   END ELSE
      IDM.DESC = ECD.RET.VALUE
      SCV.REC(ECD.NUM)<ESN> = IDM.DESC
   END
  *
   RETURN
*
GET.PERIOD: 
*
   IF CO.ICS.PERIOD.FLG = 'N' THEN ; * T26556
      IF IDM.SHIP.MON = '' THEN ECD.DEFAULT = FR.CURR.PER<1,DIV.POS>
      ECD.NUM = 48 ; ECD.ACTION = 4 ; CALL SCRN.EDIT
      IF ECD.RET.VALUE = 'END' THEN
         ALL.DONE = 1
      END ELSE
         ERR.FLG = '' ; ERRMSG = ''
         CALL CHECK.PERIOD.DATE(CONO,IDM.SHIP.POST,ECD.RET.VALUE,IDM.FROM.DIV,ERR.FLG,ERRMSG,COMPANY,CONTROL)
         BEGIN CASE                            
            CASE ERRMSG = ""                    
               IDM.SHIP.MON = ECD.RET.VALUE         
               SCV.REC(ECD.NUM)<ESN> = IDM.SHIP.MON
            CASE ERR.FLG = 0                    
               IDM.SHIP.MON = ECD.RET.VALUE         
               SCV.REC(ECD.NUM)<ESN> = IDM.SHIP.MON
               GOSUB 91000                       
            CASE ERR.FLG = 1                    
               GOSUB 91000; GOTO GET.PERIOD             
            CASE ERR.FLG = 2                    
               GOSUB 91000 ; ALL.DONE = 1
         END CASE                              
      END
*T26556 v
   END ELSE
      IDM.SHIP.MON = DEF.PERIOD
      ECD.NUM = 48
      SCV.REC(48)<ESN> = IDM.SHIP.MON
      ECD.ACTION = 5 ; CALL SCRN.EDIT
*T26556 ^
   END
  *
   RETURN
*
GET.PRODUCT: 
*
   PRODUCT.DONE = 0
   LOOP
      VALID.PRODUCT = 1 ; PROD.QTY = 0
    * FIRST PRINT LINE COUNTER
      ECD.NUM = 10
      SCV.REC(ECD.NUM)<ESN> = PROD.PTR
      ECD.ACTION = 5 ; CALL SCRN.EDIT
      ECD.NUM = 11
      SCV.REC(ECD.NUM)<ESN> = PROD.CNT
      ECD.ACTION = 5 ; CALL SCRN.EDIT
    *
      ECD.NUM = 6 ; ECD.ACTION = 4
      CALL SCRN.EDIT                          
      BEGIN CASE
         CASE ECD.RET.VALUE = 'END'
            PRODUCT.DONE = 1 ; PROD.PTR -= 1 ; VALID.PRODUCT = 0
            PROD.CNT -= 1
            IF PROD.PTR LE 0 THEN PROD.PTR = 1
            IF PROD.CNT LE 0 THEN PROD.CNT = 1
            GOSUB DISPLAY.PROD
         CASE ECD.RET.VALUE = ''
            ECD.NUM = 8                                              
            ECD.ACTION = 4 ; CALL SCRN.EDIT                               
            IF ECD.RET.VALUE = '' OR ECD.RET.VALUE = 'END' THEN 
               CONTINUE
            END
            GXR.NAME = "INV.PAP"                                      
            GXR.XREF = INVENTORY.XREF                                 
            GXR.FILE = INVENTORY                                      
            GXR.SRCH.ID = ECD.RET.VALUE                               
            CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
            ECD.ACTION=2;CALL SCRN.EDIT
            SCV.REC(ECD.NUM)<ESN> = GXR.ID
            ECD.ACTION = 3 ; CALL SCRN.EDIT
            * PROCESS RESPONSE FROM CROSS REFERENCE
            IF GXR.ID = "" THEN
               VALID.PRODUCT = 0
            END ELSE
               PROD.ID = GXR.ID
               GOSUB VALIDATE.INV
            END
         CASE 1
            PROD.ID = ECD.RET.VALUE
            GOSUB VALIDATE.INV
      END CASE
      IF (VALID.PRODUCT) THEN
         PROD.ARRAY<1,PROD.PTR> = ECD.RET.VALUE
         PROD.ARRAY<2,PROD.PTR> = INV.DESC
         PROD.ARRAY<3,PROD.PTR> = BASWGT:"# ":IWIDTH:'"'
         PROD.ARRAY<4,PROD.PTR> = U.M
         SCV.REC(6)<ESN> = PROD.ARRAY<1,PROD.PTR>
         SCV.REC(7)<ESN> = PROD.ARRAY<4,PROD.PTR>
         SCV.REC(8)<ESN> = PROD.ARRAY<2,PROD.PTR>
         SCV.REC(9)<ESN> = PROD.ARRAY<3,PROD.PTR>
         ECD.NUM = 6 ; ECD.ACTION = 5 ; CALL SCRN.EDIT
         ECD.NUM = 7 ; ECD.ACTION = 5 ; CALL SCRN.EDIT
         ECD.NUM = 8 ; ECD.ACTION = 5 ; CALL SCRN.EDIT
         ECD.NUM = 9 ; ECD.ACTION = 5 ; CALL SCRN.EDIT
         GOSUB GET.SERIAL
         IF RS.ARRAY<PROD.PTR,1> # '' THEN
            PROD.PTR += 1 ; PROD.CNT += 1
            ROLL.PTR = 1 ; ROLL.CNT = 1
            SCV.REC(22)<ESN> = ''
            SCV.REC(23)<ESN> = ''
            SCV.REC(24)<ESN> = ''
            SCV.REC(25)<ESN> = ''
            SCV.REC(6)<ESN> = ''
            SCV.REC(7)<ESN> = ''
            SCV.REC(8)<ESN> = ''
            SCV.REC(10)<ESN> = PROD.PTR
            SCV.REC(11)<ESN> = PROD.CNT
            SCV.REC(12)<ESN> = ''
            ECD.ACTION = 2 ; CALL SCRN.EDIT
            ECD.ACTION = 3 ; CALL SCRN.EDIT
         END ELSE
            PRODUCT.DONE = 1 ; PROD.CNT += 1
            SCV.REC(11)<ESN> = PROD.CNT
            ECD.NUM=11 ; ECD.ACTION=5 ; CALL SCRN.EDIT
         END
      END
   UNTIL (PRODUCT.DONE) DO REPEAT
   RETURN
*
GET.SERIAL: 
*
   ROLL.DONE = 0
   LOOP
      GOSUB DISP.SERIAL
      ;* line number
      ECD.SUB.NUM = ROLL.PTR
      ECD.NUM=21 ; ECD.ACTION=5 ; CALL SCRN.EDIT
      ;* roll id
      VALID.ROLL = 1
      ECD.SUB.NUM = ROLL.PTR
      ECD.NUM=22 ; ECD.ACTION=4 ; CALL SCRN.EDIT
      IF ECD.RET.VALUE = "END" THEN ROLL.DONE = 1
   UNTIL (ROLL.DONE) DO
      ;* C40187
      ;* If input is non-numerical then do not pad it with zeroes
      ;*
      SERIAL.ID = ECD.RET.VALUE
      IF NUM(ECD.RET.VALUE) THEN
         TMP = LEN(TRIM(ECD.RET.VALUE))
         IF TMP GT 8 THEN TMP = 8
         TMP = 8 - TMP
         SERIAL.ID = STR('0',TMP):ECD.RET.VALUE
      END
      GOSUB VALIDATE.SERIAL
      IF (VALID.ROLL) THEN
         RS.ARRAY<PROD.PTR,ROLL.PTR,1> = SERIAL.ID
         RS.ARRAY<PROD.PTR,ROLL.PTR,2> = ISTK.LOC
         RS.ARRAY<PROD.PTR,ROLL.PTR,3> = INT(((ISTK.CUR.QTY/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
         RS.ARRAY<PROD.PTR,ROLL.PTR,4> = ISTK.MILL.ID
         GOSUB DISPLAY.RS.LINE
         ROLL.PTR += 1 ; ROLL.CNT += 1
      END ELSE
         GOSUB DISPLAY.RS.LINE
      END
   REPEAT
  *
   RETURN
*
DISPLAY.RS.LINE: 
*
   SCV.REC(22)<ESN,ROLL.PTR> = RS.ARRAY<PROD.PTR,ROLL.PTR,1>
   SCV.REC(23)<ESN,ROLL.PTR> = RS.ARRAY<PROD.PTR,ROLL.PTR,2>
   SCV.REC(24)<ESN,ROLL.PTR> = OCONV(RS.ARRAY<PROD.PTR,ROLL.PTR,3>,ICR.CNV1)
   SCV.REC(25)<ESN,ROLL.PTR> = RS.ARRAY<PROD.PTR,ROLL.PTR,4>
   PROD.QTY += RS.ARRAY<PROD.PTR,ROLL.PTR,3>
   FOR QQ = 22 TO 25
      ECD.NUM = QQ ; ECD.SUB.NUM = ROLL.PTR
      ECD.ACTION = 5 ; CALL SCRN.EDIT
   NEXT QQ
   ECD.NUM = 12
   SCV.REC(ECD.NUM)<ESN> = OCONV(PROD.QTY,ICR.CNV1)
   ECD.ACTION = 5 ; CALL SCRN.EDIT
  *
   RETURN
*
VALIDATE.INV: 
*
   MATREAD INV.REC FROM INVENTORY, CONO:PROD.ID THEN
      MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE THEN
*COPY>ICSBP>INV.UM.CNV
         BEGIN CASE           
            CASE CATG.TYPE="L" 
               U.M="LBS"        
            CASE CATG.TYPE="S" 
               U.M="SHT"        
            CASE CATG.TYPE="RL"
               U.M="PC "        
            CASE CATG.TYPE="PC"
               U.M="FT "        
            CASE 1             
               IF INQUIRY.FLG = 0 THEN
                  ERRMSG='PRODUCT ':PROD.ID:' IS NOT A PAPER PRODUCT LINE'
                  GOSUB 91000 ; VALID.PRODUCT = 0
               END
         END CASE 
         BASWGT = INT(INV.BAS.WT/100)
         BEGIN CASE
            CASE MOD(INV.PAP.WIDTH,10000) = 0
               IWIDTH = OCONV(INT(INV.PAP.WIDTH/10000),"MD0")
            CASE MOD(INV.PAP.WIDTH,1000) = 0
               IWIDTH = OCONV(INT(INV.PAP.WIDTH/1000),"MD1")
            CASE MOD(INV.PAP.WIDTH,100) = 0
               IWIDTH = OCONV(INT(INV.PAP.WIDTH/100),"MD2")
            CASE MOD(INV.PAP.WIDTH,10) = 0
               IWIDTH = OCONV(INT(INV.PAP.WIDTH/10),"MD3")
            CASE 1
               IWIDTH = OCONV(INV.PAP.WIDTH,"MD4")
         END CASE
         MATREAD IWH.REC FROM INV.WHSE, CONO:PROD.ID:'!':IDM.FROM.WHSE THEN
            IF INQUIRY.FLG = 0 THEN
               LOCATE PROD.ID IN PROD.ARRAY<1> SETTING XPOS THEN
                  IF XPOS # PROD.PTR THEN
                     ERRMSG = 'PRODUCT ':PROD.ID:' ALREADY ENTERED'
                     GOSUB 91000 ; VALID.PRODUCT = 0 ; RETURN
                  END
               END
               IF IWH.ON.HAND-IWH.RESV LE 1 THEN
                  ERRMSG = 'PRODUCT ':PROD.ID:' HAS NO QUANTITY AVAILABLE TO TRANSFER'
                  GOSUB 91000 ; VALID.PRODUCT = 0 ; RETURN
               END
               IF CATG.TRK.LVL # 'S' THEN
                  ERRMSG = 'PRODUCT ':PROD.ID:' IS NOT SERIAL TRACKED'
                  GOSUB 91000 ; VALID.PRODUCT = 0 ; RETURN
               END
               LOCATE IDM.FROM.WHSE IN INV.WHSE.CODE<1>,1 SETTING ZPOS ELSE
                  ERRMSG = 'WAREHOUSE #':IDM.FROM.WHSE:' IS NOT SETUP FOR PRODUCT ':PROD.ID
                  GOSUB 91000 ; VALID.PRODUCT = 0 ; RETURN
               END
            END
         END ELSE
            IF INQUIRY.FLG = 0 THEN
               ERRMSG = 'INV.WHSE #':CONO:PROD.ID:'!':IDM.FROM.WHSE:'IS NOT ON FILE'
               GOSUB 91000 ; VALID.PRODUCT = 0
            END
         END
      END ELSE
         ERRMSG = 'INVALID PRODUCT LINE ASSOCIATED TO THE PRODUCT ':PROD.ID
         GOSUB 91000 ; VALID.PRODUCT = 0
      END
   END ELSE
      ERRMSG = 'INVALID PRODUCT ':PROD.ID
      GOSUB 91000 ; VALID.PRODUCT = 0 ; MAT INV.REC = ''
   END
  *
   RETURN
*
VALIDATE.SERIAL: 
*
   LOCATE SERIAL.ID IN RS.ARRAY<PROD.PTR>,1 SETTING P THEN
      IF P <> ROLL.PTR THEN
         ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') ALREADY ENTERED'
         GOSUB 91000 ; VALID.ROLL = 0 ; RETURN
      END
   END
   MATREAD ISTK.REC FROM INV_SERIAL, CONO:SERIAL.ID THEN
      IF ISTK.POST.DATE = "" THEN
         ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') HAS NOT BEEN RECIEVED INTO INVENTORY'
         GOSUB 91000 ; VALID.ROLL = 0
      END
   END ELSE
      ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') DOES NOT EXIST'
      GOSUB 91000 ; VALID.ROLL = 0
   END
   IF VALID.ROLL = 0 THEN RETURN
   IF ISTK.PROD # PROD.ARRAY<1,PROD.PTR> THEN
      ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') IS NOT TIED TO PRODUCT ':PROD.ARRAY<1,PROD.PTR>
      GOSUB 91000 ; VALID.ROLL = 0 ; RETURN
   END
   IF ISTK.WHSE # IDM.FROM.WHSE THEN
      ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') BELONGS TO ANOTHER WAREHOUSE'
      GOSUB 91000 ; VALID.ROLL = 0 ; RETURN
   END
   IF ISTK.RSVB.QTY LE 1 THEN
      ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') HAS NO QUANTITY AVAILABLE TO TRANSFER'
      GOSUB 91000 ; VALID.ROLL = 0 ; RETURN
   END
   IF ISTK.RSVB.QTY # ISTK.CUR.QTY THEN
      ERRMSG = 'SERIAL (':SERIAL.ID:') HAS QUANTITY RESERVED AND CAN NOT BE TRANSFERRED'
      GOSUB 91000 ; VALID.ROLL = 0 ; RETURN
   END
   IF ISTK.RECP.PERIOD GT IDM.SHIP.MON THEN
      ERRMSG = 'SERIAL (':SERIAL.ID:') WAS RECEIVED IN PERIOD ':ISTK.RECP.PERIOD:' CAN NOT BE TRANSFERRED'
      GOSUB 91000 ; VALID.ROLL = 0 ; RETURN
   END
   IWLO.ID = CONO:PROD.ARRAY<1,PROD.PTR>:'!':ISTK.WHSE:'!':ISTK.LOC
   MATREAD IWLO.REC FROM INV.WHSE.LOC, IWLO.ID THEN
      LOCATE SERIAL.ID IN IWLO.SERIAL<1>,1 SETTING ROS ELSE
         ERRMSG = 'SERIAL (':SERIAL.ID:') DOES NOT EXIST FOR WHSE #':ISTK.WHSE:' AND LOCATION #':ISTK.LOC
         GOSUB 91000 ; VALID.ROLL = 0 ; RETURN
      END
   END ELSE
      ERRMSG = 'SERIAL (':SERIAL.ID:' DOES NOT EXIST FOR WHSE #':ISTK.WHSE:' AND LOCATION #':ISTK.LOC
      GOSUB 91000 ; VALID.ROLL = 0 ; RETURN
   END
   READ TEST.REC FROM INTR_SERIAL_XREF, CONO:SERIAL.ID THEN
      BEGIN CASE
         CASE TRANS.ID = TEST.REC<1>
         CASE TEST.REC<1> = ''
         CASE 1
            ERRMSG = 'SERIAL NUMBER (':SERIAL.ID:') IS BEING USED FOR TRANSIT #':TEST.REC<1>
            GOSUB 91000 ; VALID.ROLL = 0
      END CASE
   END
  *
   RETURN
*
BOTTOM.PROMPT: 
*
   LOOP
      PROD.CNT = DCOUNT(PROD.ARRAY<1>, @VM)
      IF INQUIRY.FLG = 0 THEN
         ECD.NUM = 42
      END ELSE
         ECD.NUM = 46
      END
      ECD.ACTION=4 ; CALL SCRN.EDIT
      OPT = ECD.RET.VALUE
      BEGIN CASE
         CASE OPT = "E" OR OPT = "END"
            ALL.DONE = 1
         CASE NUM(OPT)
            ON OPT GOSUB GET.ENTRY.DATE, GET.DESC, GET.PERIOD
         CASE OPT = "A" AND PROD.CNT < 99
            PROD.PTR = PROD.CNT + 1
            GOSUB DISPLAY.PROD
            GOSUB GET.PRODUCT
         CASE OPT = "D" AND PROD.CNT > 0
            ECD.NUM=41 ; ECD.ACTION=4 ; CALL SCRN.EDIT
            IF ECD.RET.VALUE = 'Y' THEN
               GOSUB DELETE.PROD
            END
         CASE OPT = 'S'
            IF PROD.CNT LE 1 THEN CONTINUE
            PROD.PTR += 1
            IF PROD.PTR > PROD.CNT THEN PROD.PTR = 1
            GOSUB DISPLAY.PROD
         CASE OPT = 'SR'
            IF PROD.CNT LE 1 THEN CONTINUE
            PROD.PTR -= 1
            IF PROD.PTR < 1 THEN PROD.PTR = 1
            GOSUB DISPLAY.PROD
         CASE OPT = 'SB'
            IF PROD.CNT LE 1 THEN CONTINUE
            PROD.PTR = PROD.CNT
            GOSUB DISPLAY.PROD
         CASE OPT = 'ST'
            IF PROD.CNT LE 1 THEN CONTINUE
            PROD.PTR = 1
            GOSUB DISPLAY.PROD
         CASE OPT = 'R'
            GOSUB REVIEW.SERIAL
         CASE OPT = 'P'
            IF TRANS.ID = 'N' THEN
               ERRMSG = 'MUST FILE BEFORE PRINTING'
               GOSUB 91000
            END ELSE
               GOSUB PRINT.TRANSFER
            END
         CASE OPT = 'PU'
            ECD.NUM=44 ; ECD.ACTION=4 ; CALL SCRN.EDIT
            IF ECD.RET.VALUE = 'Y' THEN
               ALL.DONE = 1
               IF TRANS.ID # 'N' THEN
                  PROD.CNT = DCOUNT(PROD.ARRAY<1>, @VM)
                  FOR UU = 1 TO PROD.CNT
                     ROLL.CNT = DCOUNT(RS.ARRAY<UU>, @VM)
                     FOR WW = 1 TO ROLL.CNT
                        DELETE INTR_SERIAL_XREF, CONO:RS.ARRAY<UU,WW,1>
                     NEXT WW
                  NEXT UU
                  ROLL.CNT = DCOUNT(DEL.RS.LIST<1>,@VM)
                  FOR WW = 1 TO ROLL.CNT
                     DELETE INTR_SERIAL_XREF,CONO:DEL.RS.LIST<1,WW>
                  NEXT WW
                  DELETE INTR_DIV_TRANSFER, CONO:TRANS.ID
               END
            END
         CASE OPT = "F"
            IF SUM(SUM(RS.ARRAY)) = 0 THEN
               ERRMSG = 'CANNOT FILE WITHOUT AT LEAST ONE SERIAL TO TRANSFER'
               GOSUB 91000 ; RETURN
            END ELSE
               GOSUB FILE.TRANSFER
               MATWRITE IDM.REC ON INTR_DIV_TRANSFER, CONO:TRANS.ID
               ALL.DONE = 1
            END
         CASE OPT = "POST"
            VALID.PRODUCT = 1 ; VALID.ROLL = 1
            GOSUB POST.TRANSFER
            IF VALID.PRODUCT = 1 AND VALID.ROLL = 1 THEN 
               ALL.DONE = 1
            END ELSE
               IDM.SHIP.OPER = '' ; IDM.SHIP.DATE = '' ; IDM.STATUS = 1
               IDM.FROM.LOC = '' ; IDM.SERIAL.QTY = '' ; IDM.SERIAL.DIAM = ''
               IDM.SERIAL.MILL = ''
            END
         CASE 1
            ERRMSG = 'INVALID RESPONSE.'
            GOSUB 91000
      END CASE
   UNTIL (ALL.DONE) DO REPEAT
   RELEASE
   RETURN
*
DELETE.PROD: 
*
   ROLL.CNT = DCOUNT(RS.ARRAY<PROD.PTR>,@VM)
   FOR ROLL.PTR = 1 TO ROLL.CNT
      DEL.RS.LIST<1,-1> = RS.ARRAY<PROD.PTR,ROLL.PTR,1>
   NEXT ROLL.PTR
   DEL PROD.ARRAY<1,PROD.PTR>
   DEL PROD.ARRAY<2,PROD.PTR>
   DEL PROD.ARRAY<3,PROD.PTR>
   DEL PROD.ARRAY<4,PROD.PTR>
   DEL RS.ARRAY<PROD.PTR>
   LOOP
      LOOP.DONE = 0
      IF PROD.ARRAY<1,PROD.PTR> = '' THEN
         PROD.PTR -= 1
         IF PROD.PTR = 0 THEN PROD.PTR = 1 ; LOOP.DONE = 1
      END ELSE
         LOOP.DONE = 1
      END
   UNTIL (LOOP.DONE) DO REPEAT
   GOSUB DISPLAY.PROD
  *
   RETURN
*
DISPLAY.PROD: 
*
   MATREAD INV.REC FROM INVENTORY, CONO:PROD.ARRAY<1,PROD.PTR> THEN
*COPY>ICSBP>INV.UM.CNV
   END ELSE
      ICR.CNV1 = 'MD2'
   END
   OLD.START = ''
   PROD.QTY = 0
   PROD.CNT = DCOUNT(PROD.ARRAY<1>,@VM)
   ROLL.CNT = DCOUNT(RS.ARRAY<PROD.PTR>,@VM)
   SCV.REC(22)<ESN> = ''
   SCV.REC(23)<ESN> = ''
   SCV.REC(24)<ESN> = ''
   SCV.REC(25)<ESN> = ''
   FOR ROLL.PTR = 1 TO ROLL.CNT                     
      SCV.REC(22)<ESN,ROLL.PTR> = RS.ARRAY<PROD.PTR,ROLL.PTR,1>
      SCV.REC(23)<ESN,ROLL.PTR> = RS.ARRAY<PROD.PTR,ROLL.PTR,2>
      SCV.REC(24)<ESN,ROLL.PTR> = OCONV(RS.ARRAY<PROD.PTR,ROLL.PTR,3>,ICR.CNV1)
      SCV.REC(25)<ESN,ROLL.PTR> = RS.ARRAY<PROD.PTR,ROLL.PTR,4>
      PROD.QTY += RS.ARRAY<PROD.PTR,ROLL.PTR,3>
   NEXT ROLL.PTR
   ROLL.PTR = 1
   SCV.REC(6)<ESN> = PROD.ARRAY<1,PROD.PTR>
   SCV.REC(7)<ESN> = PROD.ARRAY<4,PROD.PTR>
   SCV.REC(8)<ESN> = PROD.ARRAY<2,PROD.PTR>
   SCV.REC(9)<ESN> = PROD.ARRAY<3,PROD.PTR>
   SCV.REC(10)<ESN> = PROD.PTR
   SCV.REC(11)<ESN> = PROD.CNT
   SCV.REC(12)<ESN> = OCONV(PROD.QTY,ICR.CNV1)
   ECD.ACTION = 2 ; CALL SCRN.EDIT
   ECD.ACTION = 3 ; CALL SCRN.EDIT
   GOSUB DISP.SERIAL
  *
   RETURN
*
REVIEW.SERIAL: 
* 
   EXIT.LOOP = 0
   LOOP
      ROLL.CNT = DCOUNT(RS.ARRAY<PROD.PTR>,@VM)
      IF INQUIRY.FLG = 0 THEN
         ECD.NUM = 45
      END ELSE
         ECD.NUM = 47
      END
      ECD.ACTION=4 ; CALL SCRN.EDIT
      RESPONSE = ECD.RET.VALUE
      BEGIN CASE
         CASE RESPONSE = "E" OR RESPONSE = "END"
            EXIT.LOOP = 1
         CASE RESPONSE = "A" AND ROLL.CNT LE 999
            ROLL.PTR = ROLL.CNT + 1 ; OLD.START = ''
            GOSUB GET.SERIAL
         CASE RESPONSE = "D"
            IF ROLL.CNT = 0 THEN CONTINUE
            ECD.MINV = OLD.START                           
            ECD.MAXV = ECD.MINV + PAGE.SIZE - 1            
            IF ECD.MAXV > ROLL.CNT THEN ECD.MAXV = ROLL.CNT
            ECD.NUM = 43 ; ECD.ACTION = 4
            CALL SCRN.EDIT
            IF ECD.RET.VALUE = '' OR ECD.RET.VALUE = 'END' OR ECD.RET.VALUE = 0 THEN CONTINUE
            ROLL.PTR = ECD.RET.VALUE
            DEL.RS.LIST<1,-1> = RS.ARRAY<PROD.PTR,ROLL.PTR,1>
            DEL RS.ARRAY<PROD.PTR,ROLL.PTR>
            GOSUB DISPLAY.PROD
         CASE RESPONSE = "S"
            ROLL.PTR = OLD.START + PAGE.SIZE      
            IF ROLL.PTR > ROLL.CNT THEN ROLL.PTR = 1
            GOSUB DISP.SERIAL
         CASE RESPONSE = "SR"
            ROLL.PTR = OLD.START - PAGE.SIZE
            IF ROLL.PTR < 1 THEN ROLL.PTR = 1 
            GOSUB DISP.SERIAL         
         CASE RESPONSE = "SB"
            ROLL.PTR = ROLL.CNT
            IF ROLL.PTR < 1 THEN ROLL.PTR = 1
            GOSUB DISP.SERIAL
         CASE RESPONSE = "ST"
            ROLL.PTR = 1
            GOSUB DISP.SERIAL
      END CASE
   UNTIL (EXIT.LOOP) DO REPEAT
  *
   RETURN
*
PRINT.TRANSFER: 
* 
   CMD = 'SSELECT INTR_DIV_TRANSFER WITH TRANSIT = "':TRANS.ID:'"'
   PERFORM CMD CAPTURING MSG
   TMP = CONO
   TMP<2> = 'IC442'
   PROCWRITE TMP
   CALL INTR.DIV.JOURNAL
  *
   RETURN
*
FILE.TRANSFER: 
* 
   ROLL.CNT = DCOUNT(DEL.RS.LIST<1>,@VM)
   FOR WW = 1 TO ROLL.CNT
      DELETE INTR_SERIAL_XREF,CONO:DEL.RS.LIST<1,WW>
   NEXT WW
  *
   IF TRANS.ID = 'N' THEN
      FND = 1
      READU TRANS.SEQ FROM CONTROL, CONO:"INTR.DIV.SEQ" ELSE TRANS.SEQ = "1"
      LOOP
      WHILE FND DO
         TRANS.CODE = STR("0",6-LEN(TRANS.SEQ)):TRANS.SEQ
         TRANS.SEQ = TRANS.CODE + 1
         IF TRANS.SEQ > 999999 THEN TRANS.SEQ = 1
         TRANS.ID = TRANS.CODE:"T"
         READ REC FROM INTR_DIV_TRANSFER, CONO:TRANS.ID ELSE FND = 0
      REPEAT
      WRITE TRANS.SEQ ON CONTROL, CONO:"INTR.DIV.SEQ"
      ERRMSG = 'NOTE NEW TRANSIT NUMBER (':TRANS.ID:')'
      GOSUB 91000
   END
   IDM.PROD.NO = '' ; IDM.SERIAL = '' ; IDM.FROM.LOC = ''
   IDM.SERIAL.MILL = ''
   PROD.CNT = DCOUNT(PROD.ARRAY<1>, @VM)
   FOR PROD.PTR = 1 TO PROD.CNT
      ROLL.CNT = DCOUNT(RS.ARRAY<PROD.PTR>, @VM)
      FOR ROLL.PTR = 1 TO ROLL.CNT
         IDM.FROM.LOC<1,PROD.PTR,-1> = RS.ARRAY<PROD.PTR,ROLL.PTR,2>
         IDM.SERIAL<1,PROD.PTR,-1> = RS.ARRAY<PROD.PTR,ROLL.PTR,1>
         IDM.SERIAL.MILL<1,PROD.PTR,-1> = RS.ARRAY<PROD.PTR,ROLL.PTR,4>
         WRITE TRANS.ID ON INTR_SERIAL_XREF, CONO:RS.ARRAY<PROD.PTR,ROLL.PTR,1>
      NEXT ROLL.PTR
   NEXT PROD.PTR
   IDM.PROD.NO = PROD.ARRAY<1>
   IDM.STATUS = 1
  *
   RETURN
*
POST.TRANSFER: 
*
   ;* FIRST VALIDATE PRODUCT AND ROLL/SKID
   ;*
   IF LEN(FR.CURR.PER<1,DIV.POS>) # 6 THEN
      ERRMSG = "ERROR in the Inventory Control Fiscal Period (":FR.CURR.PER<1,DIV.POS>:") !!"
      GOSUB 91000 ; VALID.PRODUCT = 0 ; RETURN
   END
   PROD.CNT = DCOUNT(PROD.ARRAY<1>,@VM) ; ROLL.FOUND = 0
   FOR PROD.PTR = 1 TO PROD.CNT
      PROD.ID = PROD.ARRAY<1,PROD.PTR>
      GOSUB VALIDATE.INV
      IF VALID.PRODUCT = 0 THEN RETURN
      ROLL.CNT = DCOUNT(RS.ARRAY<PROD.PTR>, @VM)
      FOR ROLL.PTR = 1 TO ROLL.CNT
         SERIAL.ID = RS.ARRAY<PROD.PTR,ROLL.PTR,1>
         GOSUB VALIDATE.SERIAL
         IF VALID.ROLL = 0 THEN RETURN
         ROLL.FOUND = 1
      NEXT ROLL.PTR
   NEXT PROD.PTR
   IF ROLL.FOUND = 0 THEN
      ERRMSG = 'CAN NOT POST, NO SERIAL TO TRANSFER'
      GOSUB 91000 ; VALID.PRODUCT = 0
      RETURN
   END
   ;*
   ;* CHECK TO SEE IF INTR WHSE EXIST; IF NOT, WRITE IT OUT
   ;*
   FOR PROD.PTR = 1 TO PROD.CNT
      IWH.ID = CONO:PROD.ARRAY<1,PROD.PTR>:'!':IDM.FROM.WHSE
      IWH.ID2 = CONO:PROD.ARRAY<1,PROD.PTR>:'!':CO.INTR.WHSE
      MATREADU IWH.REC FROM INV.WHSE, IWH.ID2 ELSE
         MATREAD IWH.REC FROM INV.WHSE, IWH.ID THEN
            SIWH.STD.COST = IWH.STD.COST  
            SIWH.LIST.COST = IWH.LIST.COST
            SIWH.AVG.COST = IWH.AVG.COST  
            SIWH.MARKUP = IWH.MARKUP      
            SIWH.FOH.PCT = IWH.FOH.PCT    
            SIWH.MIN.QTY = IWH.MIN.QTY    
            SIWH.MAX.QTY = IWH.MAX.QTY    
            MAT IWH.REC = ""              
            IWH.STD.COST = SIWH.STD.COST  
            IWH.LIST.COST = SIWH.LIST.COST
            IWH.AVG.COST = SIWH.AVG.COST  
            IWH.MARKUP = SIWH.MARKUP      
            IWH.FOH.PCT = SIWH.FOH.PCT    
            IWH.MIN.QTY = SIWH.MIN.QTY    
            IWH.MAX.QTY = SIWH.MAX.QTY    
            MATWRITE IWH.REC ON INV.WHSE, IWH.ID2
         END 
      END
      MATREADU INV.REC FROM INVENTORY, CONO:PROD.ARRAY<1,PROD.PTR> THEN
         LOCATE CO.INTR.WHSE IN INV.WHSE.CODE<1>,1 SETTING TOS ELSE
            INV.WHSE.CODE<1,TOS> = CO.INTR.WHSE
         END
         MATWRITE INV.REC TO INVENTORY, CONO:PROD.ARRAY<1,PROD.PTR>
      END
   NEXT PROD.PTR
   ;* 
   ;* NOW DO THE POSTING.
   ;* 
   GOSUB FILE.TRANSFER
   IDM.SHIP.OPER = OPER.ID
   IDM.SHIP.DATE = TODAY
   IDM.STATUS = 2
   MAT D.TRAN.REC = ""
   D.TRAN.EMP = OPER.ID
   D.TRAN.PRT.DATE = TODAY
   D.TRAN.PERIOD = IDM.SHIP.MON
   D.TRAN.DATE.ENTER = IDM.SHIP.POST
   D.TRAN.FROM.WHSE = IDM.FROM.WHSE
   D.TRAN.REASON.DESC = IDM.DESC
   PROD.CNT = DCOUNT(PROD.ARRAY<1>, @VM)
   FOR PROD.PTR = 1 TO PROD.CNT
      PROD.ID = PROD.ARRAY<1,PROD.PTR>
      ROLL.CNT = DCOUNT(RS.ARRAY<PROD.PTR>, @VM)
      FOR ROLL.PTR = 1 TO ROLL.CNT
         SERIAL.ID = RS.ARRAY<PROD.PTR,ROLL.PTR,1>
         MATREADU ISTK.REC FROM INV_SERIAL, CONO:SERIAL.ID ELSE MAT ISTK.REC = ''
         D.TRAN.PROD.NO<1,-1> = PROD.ID
         D.TRAN.SERIAL<1,-1> = SERIAL.ID
         D.TRAN.RECP<1,-1> = ISTK.RECP
         D.TRAN.FROM.LOC<1,-1> = ISTK.LOC
         D.TRAN.TO.WHSE<1,-1> = CO.INTR.WHSE
         D.TRAN.TO.LOC<1,-1> = IDM.TO.DIV
         D.TRAN.QTY<1,-1> = ISTK.CUR.QTY
         D.TRAN.TOT.QTY<1,-1> = ISTK.CUR.QTY
      *
         IDM.FROM.LOC<1,PROD.PTR,ROLL.PTR> = ISTK.LOC
         IDM.SERIAL.QTY<1,PROD.PTR,ROLL.PTR> = ISTK.CUR.QTY
         IDM.SERIAL.DIAM<1,PROD.PTR,ROLL.PTR> = ISTK.CUR.DIAM
         IDM.SERIAL.RECP<1,PROD.PTR,ROLL.PTR> = ISTK.RECP
      NEXT ROLL.PTR
   NEXT PROD.PTR
   MAT TRAN.REC='' ; ERRMSG=''
   CALL TRAN.UPDATE(CONO,TRANS.ID,MAT TRAN.REC,'TRANOUT',CO.ICS.LOC.TRAN,ERRMSG)
   IF D.TRAN.ERRMSG # '' THEN
      ERRMSG = D.TRAN.ERRMSG
      GOSUB 91000 ; VALID.PRODUCT = 0
   END ELSE
      MATWRITE IDM.REC ON INTR_DIV_TRANSFER, CONO:TRANS.ID
   END
  *
   RETURN
*
DISP.SERIAL: 
*
   START.LINE = 1 + INT((ROLL.PTR-1)/PAGE.SIZE) * PAGE.SIZE
   LAST.LINE = START.LINE + PAGE.SIZE - 1
   IF LAST.LINE > ROLL.CNT THEN LAST.LINE = ROLL.CNT
   IF START.LINE = OLD.START THEN RETURN
   OLD.START = START.LINE
   FOR ECD.NUM = 21 TO 25
      ECD.SUB.NUM = START.LINE
      ECD.ACTION = 7
      CALL SCRN.EDIT
   NEXT ECD.NUM
   P1 = INT((START.LINE-1)/PAGE.SIZE)+1
   P2 = INT((ROLL.CNT)/PAGE.SIZE)+1; IF P2=0 THEN P2=1
   SCV.REC(30)<ESN> = P1
   ECD.NUM=30; ECD.ACTION=5; CALL SCRN.EDIT
   SCV.REC(31)<ESN> = P2
   ECD.NUM=31; ECD.ACTION=5; CALL SCRN.EDIT
   RETURN
*
*---- ERROR ROUTINE
*
91000 ERR.TYPE=1;CALL SYSCOM(MAT SYSCOM.REC);RETURN
92000 ERR.TYPE=2;CALL SYSCOM(MAT SYSCOM.REC);RETURN
93000 ERR.TYPE=3;CALL SYSCOM(MAT SYSCOM.REC)
99999 * 
   ECD.ACTION = 99
   CALL SCRN.EDIT
END
