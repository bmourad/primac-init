SUBROUTINE RFT_WIP_TRACKING(CONO,OPTIONVALUE,EMPLOYEEID,PALLETID,WRITE_SFLAG,LOCATION,UPDATEFLAG,U_JOBID,U_FORM,U_SKID,U_TOCCTR,QTY_FLAG,U_QTY,U_DESC,RANGE_FG,U_CARTTONS,PERMS_ADJ_FLG,U_ADJFLAG,STRXML,ERRMSG)
*
* PROGRAM  - WIPT.RF.TERM
*
* AUTHOR   - PRASHANT KUMAR
*
* DATE     - 02/27/08
*
* DESCRIPTION
*
* This program is used to process transaction from the hand-held 
* R-F units used in the warehouse.
*
*T22322 ct6 01/07/1998 * Install WIP IN-PROCESS with changes for Bawden
*T23359 rik 01/14/1999 * REMOVE ISBN CODING.
*T26030 ajibaly 02/01/2002 * REMOVE PROMPT "CHANGE QTY?" WHEN ADJUSTING
*                            QTY
*T26725 lross 07/02/2002 * Do not allow qty change on ZERO qty
*                          locations.
*T27646 thompson 08/18/2003 * ALL FOR MULTI PLATFORM USE
*********************************************************************
*
*---- INCLUDES COPYLIBS
*
**$INCLUDE CPYLIB COM1
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE WTR.CPYLIB WIP.TRACK.JOB
$INCLUDE WTR.CPYLIB WIP.TRACK.FORM
$INCLUDE WTR.CPYLIB WIP.TRACK.PALLET
$INCLUDE WTR.CPYLIB WIP.TRACK.CONTROL
$INCLUDE WTR.CPYLIB WIP.FILE.VARS
$INCLUDE WTR.CPYLIB WIP.TRACK.TO.JOB
$INCLUDE WTR.CPYLIB WIPT.STORAGE.LOC
$INCLUDE JCS.CPYLIB JOB
$INCLUDE PMC.CPYLIB CUSTOMER
$INCLUDE PMC.CPYLIB EMPLOYEE
$INCLUDE PMC.CPYLIB VEND
$INCLUDE CPYLIB FILE.VARS
$INCLUDE CPYLIB CHAR
*
*---- PRE-INITIALIZATION
*
ERRMSG = ""
*
*---- OPEN ALL FILES
*
   OPEN "","COMPANY" TO COMPANY ELSE
      ERRMSG = "CANNOT OPEN COMPANY FILE"
      GOTO 93000
   END
   OPEN "","CONTROL" TO CONTROL ELSE
      ERRMSG = "CANNOT OPEN CONTROL FILE"
      GOTO 93000
   END
   OPEN "","JOB" TO JOB ELSE
      ERRMSG = "CANNOT OPEN JOB FILE"
      GOTO 93000
   END
   OPEN "","CUSTOMER" TO CUSTOMER ELSE
      ERRMSG = "CANNOT OPEN CUSTOMER FILE"
      GOTO 93000
   END
   OPEN "","EMPLOYEE" TO EMPLOYEE ELSE
      ERRMSG = "CANNOT OPEN EMPLOYEE FILE"
      GOTO 93000
   END
   OPEN "","VEND" TO VEND ELSE
      ERRMSG = "CANNOT OPEN VEND FILE"
      GOTO 93000
   END
   OPEN "","WIP.TRACK.JOB" TO WIP.TRACK.JOB ELSE
      ERRMSG = "CANNOT OPEN WIP.TRACK.JOB FILE"
      GOTO 93000
   END
   OPEN "","WIP.TRACK.FORM" TO WIP.TRACK.FORM ELSE
      ERRMSG = "CANNOT OPEN WIP.TRACK.FORM FILE"
      GOTO 93000
   END
   OPEN "","WIP.TRACK.PALLET" TO WIP.TRACK.PALLET ELSE
      ERRMSG = "CANNOT OPEN WIP.TRACK.PALLET FILE"
      GOTO 93000
   END
   OPEN "","WIP.TRACK.CONTROL" TO WIP.TRACK.CONTROL ELSE
      ERRMSG = "CANNOT OPEN WIP.TRACK.CONTROL FILE"
      GOTO 93000
   END
   OPEN "","WIP.TRACK.LOC" TO WIP.TRACK.LOC ELSE
      ERRMSG = "CANNOT OPEN WIP.TRACK.LOC FILE"
      GOTO 93000
   END
   OPEN "","WIP.TRACK.HIST" TO WIP.TRACK.HIST ELSE
      ERRMSG = "CANNOT OPEN WIP.TRACK.HIST FILE"
      GOTO 93000
   END
   OPEN "","WIP.TRACK.TO.JOB" TO WIP.TRACK.TO.JOB ELSE
      ERRMSG = "CANNOT OPEN WIP.TRACK.TO.JOB FILE"
      GOTO 93000
   END
   OPEN "","WIPT.STORAGE.LOC" TO WIPT.STORAGE.LOC ELSE
      ERRMSG = "CANNOT OPEN WIPT.STORAGE.LOC FILE"
      GOTO 93000
   END
*
*---- INITIALIZATION
*
   STRXML = ""
   ERRMSG = ""
   CONO = ""
   MAT COMP.REC = ""
 CALL RFT_GET_CONO (CONO, MAT COMP.REC,ERRMSG)
   IF ERRMSG # "" THEN GOTO 99999
   IF CONO = "END" THEN GOTO 99999
   READV WTR.CNTL FROM CONTROL, CONO:'WIP.TRACKING',1 ELSE WTR.CNTL = 'N'
   IF WTR.CNTL # 'Y' THEN GOTO 99999
   LOGNAME = 'LOGNAME'; CALL RFT_SYSVARS_SUB(LOGNAME); *T27646
   USER.ID = LOGNAME; *T27646
   EMPID = "XXXX"
   EMPNAME = ""
   MATREAD WIPTE.REC FROM WIP.TRACK.CONTROL, CONO:"EMP" THEN
      LOCATE USER.ID IN WIPTE.USER<1>,1 SETTING EPTR THEN 
         EMPID = WIPTE.EMP<1,EPTR>
         MATREAD EMP.REC FROM EMPLOYEE, CONO:EMPID THEN
            EMPNAME = EMP.FRST.NAME:" ":EMP.LAST.NAME
         END
      END
   END
STRXML :="<EmpName>":EMPNAME:"</EmpName>"
10 *
   MATREADU WIPTR.REC FROM WIP.TRACK.CONTROL, CONO:"REQ" THEN
      POS = 1
      LOOP
         LOCATE USER.ID IN WIPTR.USER<1>,POS SETTING PTR ELSE PTR = 0
      WHILE PTR > 0 DO
         WIPTR.USER<1,PTR> = ""
         WIPTR.PALLET<1,PTR> = ""
         POS = PTR + 1
      REPEAT
      MATWRITE WIPTR.REC ON WIP.TRACK.CONTROL, CONO:"REQ"
   END LOCKED
        ERRMSG="Locked by ":GETUSERNAME(STATUS() )
        GOTO 91000
   END ELSE
      RELEASE WIP.TRACK.CONTROL, CONO:"REQ"
   END
   PREV.DEFINE.JOB = ""
   PREV.DEFINE.FORM = ""
   PREV.DEFINE.SKID = ""
   PREV.DEFINE.TYPE = ""
   PREV.DEFINE.QTY = ""
   PREV.DEFINE.LOC = ""
   PREV.DEFINE.DESC = ""
*
*---- MAIN PROCESSING
*
   OPTION = OPTIONVALUE
120 *
   BEGIN CASE
      CASE OPTION = "END"
         GOTO 99999
      CASE OPTION = "1"           ;* SIGN-ON
         STRXML :="<SignOnSection>"
         GOSUB 1010
         STRXML :="</SignOnSection>"
      CASE OPTION = "2"           ;* PALLET STORAGE
         STRXML :="<PalletStorage>"
         GOSUB 1020
	 STRXML :="</PalletStorage>"
      CASE OPTION = "5"           ;* DEFINE PALLET
*T22322^
         STRXML :="<UpdatePallet>"
         GOSUB 1060
	 STRXML :="</UpdatePallet>"
*T22322vvv
      CASE OPTION = "6"           ;* UPDATE PALLET
         STRXML :="<AdjustQty>"
         GOSUB 1070
	 STRXML :="</AdjustQty>"
      CASE OPTION = "X"
         GOTO 99999
   END CASE
GOTO 100
*
*---- SIGN-ON
*
1010 *
   VALUE = EMPLOYEEID
   IF VALUE = "" OR VALUE = "END" THEN RETURN
   MATREAD EMP.REC FROM EMPLOYEE, CONO:VALUE ELSE
      ERRMSG = "INVALID EMPLOYEE ID"
      GOTO 91000
   END
   EMPID = VALUE
   EMPNAME = EMP.FRST.NAME:" ":EMP.LAST.NAME
*   PRINT @(1,11):"HELLO":
*   PRINT @(1,13):EMPNAME"L#20":
   STRXML := "<Hello>":"HELLO":"</Hello>"
   STRXML := "<EmpName>":EMPNAME:"</EmpName>"
   MATREADU WIPTE.REC FROM WIP.TRACK.CONTROL, CONO:"EMP" ELSE MAT WIPTE.REC = ""
   LOCATE USER.ID IN WIPTE.USER<1>,1 SETTING EPTR ELSE WIPTE.USER<1,EPTR> = USER.ID
   WIPTE.EMP<1,EPTR> = EMPID
   MATWRITE WIPTE.REC ON WIP.TRACK.CONTROL, CONO:"EMP"
   SLEEP 3
   RETURN
*
*---- STORE PALLET
*
1020 *
*T22322vvv
**      IF EMPNAME # "" THEN PRINT @(1,2):EMPNAME "L#20"
        **IF EMPNAME # "" THEN STRXML :="<EmpName>":EMPNAME:"</EmpName>"
      VALUE = PALLETID
      IF VALUE = "" OR VALUE = "END" THEN RETURN
      CALL RFT_WIPT_CHECK_DIGIT("T", VALUE, "10RL", CKDIG, VALID)
      IF NOT(VALID) THEN
         ERRMSG = "INVALID PALLET ID"
         GOTO 91000
      END
      PAL.ID = VALUE
      MATREAD WIPTP.REC FROM WIP.TRACK.PALLET, CONO:PAL.ID ELSE
         ERRMSG = "PALLET NOT ON FILE"
         GOTO 91000
      END
*T22322v
**      PRINT @(11,06):WIPTP.MLOC<1,1>"L#8":
      STRXML :="<PalletLocation>":WIPTP.MLOC<1,1>:"</PalletLocation>"
*T22322^
IF WRITE_SFLAG = "Y" THEN
1028 *
      VALUE = LOCATION
      IF VALUE = "END" THEN RETURN
*T22322v
      SL.LOC = VALUE
      GOSUB 3000 ;* Get the location definition record
      IF ERRMSG # "" THEN
         GOTO 91000
      END
*T22322^
      IF VALUE # "" THEN
         NEWLOC = VALUE
         MATREADU WIPTP.REC FROM WIP.TRACK.PALLET, CONO:PAL.ID LOCKED
            ERRMSG = "** Pallet Locked **"
            GOTO 91000
         END ELSE
            MAT WIPTP.REC = ""
         END
         PLOC = WIPTP.MLOC<1,1>
         PQTY = WIPTP.CQTY
         GOSUB 2000
         CALL RFT_WIPT_LOC_UPD(CONO,PAL.ID,PLOC,MAT WIPTP.REC,WIP.TRACK.LOC,ERRMSG)
         MATWRITE WIPTP.REC ON WIP.TRACK.PALLET, CONO:PAL.ID
**         PRINT @(11,13):PAL.ID"L#8":
**         PRINT @(11,14):NEWLOC"L#8":
**	   PRINT @(00,15):@(-4):
	 STRXML :="<Pal_ID>":PAL.ID:"</Pal_ID>"
	 STRXML :="<NewLoc>":NEWLOC:"</NewLoc>"
         IF WIPTP.SEQ >= 900 THEN
**            PRINT @(00,15):BEL:BEL:" **** USE LAST **** ":
	    STRXML :="<SeqStatus>":"**** USE LAST **** ":"</SeqStatus>"
         END
      END
END
**      PRINT @(11,04):@(-4):
**      PRINT @(11,06):@(-4):
**      PRINT @(11,08):@(-4):
   RETURN
*
*---- DEFINE PALLET
*
1060 *
1061  
      VALUE = PALLETID
      IF VALUE = "END" THEN RETURN
      CALL RFT_WIPT_CHECK_DIGIT("T", VALUE, "10RL", CKDIG, VALID)
      IF NOT(VALID) THEN
         ERRMSG = "INVALID PALLET ID"
         GOTO 91000
      END
      PAL.ID = VALUE
      MATREADU WIPTP.REC FROM WIP.TRACK.PALLET, CONO:PAL.ID THEN
**         PRINT @(10,3):PAL.ID"L#8":
**         PRINT @(07,5):WIPTP.JOB"L#8":
	 STRXML :="<PalletID>":PAL.ID:"</PalletID>"
	 STRXML :="<JobNumber>":WIPTP.JOB:"</JobNumber>"
         BEGIN CASE
            CASE WIPTP.VER = "" AND WIPTP.SIG = ""
               XFORM = WIPTP.FORM
            CASE WIPTP.SIG = ""
               XFORM = WIPTP.FORM:".":WIPTP.VER
            CASE 1
               XFORM = WIPTP.FORM:".":WIPTP.VER:".":WIPTP.SIG
         END CASE
**         PRINT @(07,6):XFORM"L#14":
**         PRINT @(07,7):WIPTP.SKID"L#3":
**         PRINT @(11,8):WIPTP.TO.OPER"L#3":
**         PRINT @(11,10):WIPTP.CQTY"L#6":
**         PRINT @(11,11):WIPTP.MLOC<1,1>"L#8":
	 STRXML :="<XForm>":XFORM:"</XForm>"
	 STRXML :="<SkidNumber>":WIPTP.SKID:"</SkidNumber>"
	 STRXML :="<NextCct>":WIPTP.TO.OPER:"</NextCct>"
	 STRXML :="<CurrentQuantity>":WIPTP.CQTY:"</CurrentQuantity>"
	 STRXML :="<PalletLocation>":WIPTP.MLOC<1,1>:"</PalletLocation>"
*T22322v
**         PRINT @(1,14):WIPTP.DESC"L#20":
	 STRXML :="<InsertDescription>":WIPTP.DESC:"</InsertDescription>"
***** ADDITIONAL CODE ADDED FOR MAKING READ WRITE SEPERATION
**         PMSG = "Continue?"
*T22322v
*            PRINT @(0,14):SPACE(21):
*T22322^
**         IF VALUE # "Y" THEN
**            RELEASE WIP.TRACK.PALLET, CONO:PAL.ID
**            ESN=7; GOSUB 1000
**            GOTO 1061
**         END
         PREV.DEFINE.JOB = WIPTP.JOB
         PREV.DEFINE.FORM = XFORM
         PREV.DEFINE.SKID = WIPTP.SKID
         PREV.DEFINE.TYPE = WIPTP.TYPE
         PREV.DEFINE.QTY = WIPTP.CQTY
         PREV.DEFINE.LOC = WIPTP.MLOC<1,1>
         PREV.DEFINE.DESC = WIPTP.DESC
         PREV.JOB = WIPTP.JOB
         PREV.FORM = XFORM
      END LOCKED
         ERRMSG = "** Pallet Locked **"
         GOTO 91000
      END ELSE
         MAT WIPTP.REC = ""
         PREV.DEFINE.SKID = ""
         PREV.DEFINE.TYPE = ""
         PREV.DEFINE.QTY = ""
         PREV.DEFINE.LOC = ""
         PREV.DEFINE.DESC = ""
         PREV.JOB = ""
         PREV.FORM = ""
      END
      PLOC = WIPTP.MLOC<1,1>
      PQTY = WIPTP.CQTY
    IF UPDATEFLAG = "Y" THEN
1062  
      IF U_JOBID="" THEN U_JOBID=PREV.DEFINE.JOB
      IF U_JOBID = "END" THEN GOTO 1069
      MATREAD JOB.REC FROM JOB, CONO:U_JOBID ELSE
         ERRMSG = "INVALID JOB NUMBER"
         GOTO 91000
      END
      JOB.NO = U_JOBID
1063  
      IF U_FORM="" THEN U_FORM=PREV.DEFINE.FORM
      IF U_FORM = "END" THEN GOTO 1069
      FORMNO = U_FORM; GOSUB 85100
      IF ERRMSG # "" THEN
         GOTO 91000
      END
1064  
      IF U_SKID="" THEN U_SKID=PREV.DEFINE.SKID
      IF U_SKID = "END" THEN GOTO 1069
      SKID = U_SKID
1065  
      IF U_TOCCTR = "END" THEN GOTO 1069
      XTYPE = U_TOCCTR
1066  
      IF U_QTY="" THEN U_QTY=PREV.DEFINE.QTY
      IF U_QTY = "END" THEN GOTO 1069
      QTY = U_QTY
*T22322v
1067  
      IF LOCATION="" THEN LOCATION=PREV.DEFINE.LOC
      IF LOCATION = "END" THEN GOTO 1069
*T22322v
      SL.LOC = LOCATION; GOSUB 3000  ;* Check for Storage Loc Definition
      IF ERRMSG # "" THEN GOTO 91000
*T22322^
      LOC = LOCATION
*T22322v
1068  
      IF U_DESC="" THEN U_DESC=PREV.DEFINE.DESC
      IF U_DESC[1,20]=PREV.DEFINE.DESC[1,20] THEN U_DESC=PREV.DEFINE.DESC
      IF U_DESC = "END" THEN GOTO 1069
      DESC = U_DESC
*
      MAT WIPTP.REC = ""
      CDATE=DATE(); CTIME=TIME(); IF CTIME < 10 THEN CDATE=DATE()
      IF NUM(FNUM) THEN
         WIPTP.PTYPE = ""
      END ELSE
         WIPTP.PTYPE = "I"
      END
      WIPTP.DATE  = CDATE
      WIPTP.TIME  = CTIME
      WIPTP.JOB   = JOB.NO
      WIPTP.FORM  = FNUM
      WIPTP.VER   = VNUM
      WIPTP.SIG   = SNUM
      WIPTP.SKID  = SKID
      WIPTP.SEQ   = 500
      WIPTP.TYPE  = XTYPE
      WIPTP.IQTY  = QTY
      WIPTP.CQTY  = QTY
      WIPTP.DESC  = DESC
      WIPTP.MLOC  = LOC
      WIPTP.MDATE = CDATE
      WIPTP.MTIME = CTIME
      WIPTP.MEMP  = EMPID
      WIPTP.ACODE = "N"
      WIPTP.AQTY  = QTY
      WIPTP.ADATE = CDATE
      WIPTP.ATIME = CTIME
      WIPTP.AEMP  = EMPID
*
      CURR.JOB = WIPTP.JOB
      BEGIN CASE
         CASE WIPTP.VER = "" AND WIPTP.SIG = ""
            CURR.FORM = WIPTP.FORM
         CASE WIPTP.SIG = ""
            CURR.FORM = WIPTP.FORM:".":WIPTP.VER
         CASE 1
            CURR.FORM = WIPTP.FORM:".":WIPTP.VER:".":WIPTP.SIG
      END CASE
      GOSUB 89100
*        IF GEN.SKID > 0 THEN WIPTP.SKID = GEN.SKID
      CALL RFT_WIPT_LOC_UPD(CONO,PAL.ID,PLOC,MAT WIPTP.REC,WIP.TRACK.LOC,ERRMSG)
      MATWRITE WIPTP.REC ON WIP.TRACK.PALLET, CONO:PAL.ID
      PREV.DEFINE.JOB = WIPTP.JOB
      BEGIN CASE
         CASE WIPTP.VER = "" AND WIPTP.SIG = ""
            PREV.DEFINE.FORM = WIPTP.FORM
         CASE WIPTP.SIG = ""
            PREV.DEFINE.FORM = WIPTP.FORM:".":WIPTP.VER
         CASE 1
            PREV.DEFINE.FORM = WIPTP.FORM:".":WIPTP.VER:".":WIPTP.SIG
      END CASE
   END ;** END OF IF CONDITION
1069 *
      RELEASE WIP.TRACK.PALLET, CONO:PAL.ID
   RETURN
*
*T22322vvv
*---- UPDATE PALLET
*
1070 *  
      **IF EMPNAME # "" THEN STRXML :="<EmpName>":EMPNAME:"</EmpName>"
      VALUE = PALLETID
      IF VALUE = "END" THEN RETURN
      CALL RFT_WIPT_CHECK_DIGIT("T", VALUE, "10RL", CKDIG, VALID)
      IF NOT(VALID) THEN
         ERRMSG = "INVALID PALLET ID"
         GOTO 91000
      END
      PAL.ID = VALUE
      MATREADU WIPTP.REC FROM WIP.TRACK.PALLET, CONO:PAL.ID THEN
**         PRINT @(11,4):PAL.ID"L#8":
**         PRINT @(11,5):WIPTP.JOB"L#8":
	 STRXML :="<PalletID>":PAL.ID:"</PalletID>"
	 STRXML :="<JobNumber>":WIPTP.JOB:"</JobNumber>"
         BEGIN CASE
            CASE WIPTP.VER = "" AND WIPTP.SIG = ""
               XFORM = WIPTP.FORM
            CASE WIPTP.SIG = ""
               XFORM = WIPTP.FORM:".":WIPTP.VER
            CASE 1
               XFORM = WIPTP.FORM:".":WIPTP.VER:".":WIPTP.SIG
         END CASE
**         PRINT @(11,6):XFORM"L#8":
**         PRINT @(11,7):WIPTP.SKID"L#3":
**         PRINT @(11,8):WIPTP.TO.OPER"L#3":
**         PRINT @(11,9):WIPTP.TO.JOB"L#8":
**         PRINT @(11,10):WIPTP.MLOC<1,1>"L#8":
**         PRINT @(11,11):WIPTP.CQTY"L#6":
**         PRINT @(11,12):WIPTP.CARTONS"L#3":
         STRXML :="<XForm>":XFORM:"</XForm>"
	 STRXML :="<SkidNumber>":WIPTP.SKID:"</SkidNumber>"
	 STRXML :="<NextCct>":WIPTP.TO.OPER:"</NextCct>"
	 STRXML :="<NextJob>":WIPTP.TO.JOB:"</NextJob>"
	 STRXML :="<PalletLocation>":WIPTP.MLOC<1,1>:"</PalletLocation>"
	 STRXML :="<CurrentQuantity>":WIPTP.CQTY:"</CurrentQuantity>"
	 STRXML :="<FNGDCartonQty>":WIPTP.CARTONS:"</FNGDCartonQty>"
         PREV.DEFINE.QTY = WIPTP.CQTY
         PREV.DEFINE.CARTONS = WIPTP.CARTONS
1072* CHECK TO SEE IF THEY WANT TO CONTINUE
*T26030 ^
      END LOCKED
         ERRMSG = "** Pallet Locked **"
         GOTO 91000
      END ELSE
         ERRMSG = "*INVALID PALLET ID*"
         GOTO 91000
      END
      PLOC = WIPTP.MLOC<1,1>
*T26725 v
      SL.LOC = WIPTP.MLOC<1,1>
      GOSUB 3000
      IF WIPSL.RANGE.ZERO = "Y" THEN
         ERRMSG = "** ZERO Location **"
         GOTO 91000
      END
*T26725 ^
*** CODE EXECUTED AFTER ENTERING QUANTITY (ADDED ADDITIONAL CODE)
 IF QTY_FLAG = "Y" THEN 
1073 * Prompt for New Quantity
      DEFAULT = WIPTP.CQTY
**      PATRN="0N":VM:"'+'0N":VM:"'-'0N"
      VALUE = U_QTY
      IF VALUE = "" THEN VALUE = DEFAULT
      BEGIN CASE
         CASE VALUE = "END"
            RELEASE WIP.TRACK.PALLET,CONO:PAL.ID
	    ERRMSG = "INVALID ENTRY"
            GOTO 91000
         CASE VALUE[1,1] = "+" AND NUM(VALUE[2,99])
            VALUE = VALUE[2,99]
            WIPTP.CQTY = WIPTP.CQTY + VALUE
	    STRXML :="<CurrentQuantity>":WIPTP.CQTY:"</CurrentQuantity>"
**            PRINT @(11,11):WIPTP.CQTY"L#6"
         CASE VALUE[1,1] = "-" AND NUM(VALUE[2,99])
            VALUE = VALUE[2,99]
            WIPTP.CQTY = WIPTP.CQTY - VALUE
            IF WIPTP.CQTY < 0 THEN WIPTP.CQTY = 0
	    STRXML :="<CurrentQuantity>":WIPTP.CQTY:"</CurrentQuantity>"
**            PRINT @(11,11):WIPTP.CQTY"L#6":@(-4):
         CASE NUM(VALUE)
            WIPTP.CQTY = VALUE
         CASE 1
            ERRMSG = "**INVALID RESPONSE**"
            GOTO 91000
      END CASE
  END ; ** END BLOCK OF QTY FLAG
1074 * Check for Finished Goods flag.  Prompt for Cartons if 'Y'
STRXML :="<Finished_Goods_Flag>":WIPSL.RANGE.FG:"</Finished_Goods_Flag>"
IF RANGE_FG = "Y" THEN
      IF WIPSL.RANGE.FG = "Y" THEN
1075 
         DEFAULT=WIPTP.CARTONS
**         PATRN = "0N":VM:"'+'0N":VM:"'-'0N"
         VALUE = U_CARTTONS
         IF VALUE = "" THEN VALUE = DEFAULT
         BEGIN CASE
            CASE VALUE = "END"
               RELEASE WIP.TRACK.PALLET,CONO:PAL.ID
               GOTO 91000
            CASE VALUE[1,1] = "+" AND NUM(VALUE[2,99])
               VALUE = VALUE[2,99]
               WIPTP.CARTONS = WIPTP.CARTONS + VALUE
	       STRXML :="<FNGDCartonQty>":WIPTP.CARTONS:"</FNGDCartonQty>"
**               PRINT @(11,12):WIPTP.CARTONS"L#3"
            CASE VALUE[1,1] = "-" AND NUM(VALUE[2,99])
               VALUE = VALUE[2,99]
               WIPTP.CARTONS = WIPTP.CARTONS - VALUE
               IF WIPTP.CARTONS < 0 THEN WIPTP.CARTONS = 0
	       STRXML :="<FNGDCartonQty>":WIPTP.CARTONS:"</FNGDCartonQty>"
**               PRINT @(11,12):WIPTP.CARTONS"L#3":@(-4):
            CASE NUM(VALUE)
               WIPTP.CARTONS = VALUE
            CASE 1
               ERRMSG = "**INVALID RESPONSE**"
               GOTO 91000
         END CASE
      END
END
      *T26030> GOTO 1072
*
1078 * Prompt for Option to File or Exit
IF PERMS_ADJ_FLG = "Y" THEN
       VALUE = U_ADJFLAG
      BEGIN CASE
         CASE VALUE = "END" OR VALUE = "E"
            RELEASE WIP.TRACK.PALLET, CONO:PAL.ID
         CASE VALUE = "F"
            CDATE = DATE(); CTIME = TIME(); IF CTIME < 10 THEN CDATE = DATE()
            AQTY = WIPTP.CQTY - PREV.DEFINE.QTY
            ACARTONS = WIPTP.CARTONS - PREV.DEFINE.CARTONS
            WIPTP.ACODE = INSERT(WIPTP.ACODE,1,1,0;"C")
            WIPTP.AQTY = INSERT(WIPTP.AQTY,1,1,0;AQTY)
            WIPTP.ADATE = INSERT(WIPTP.ADATE,1,1,0;CDATE)
            WIPTP.ATIME = INSERT(WIPTP.ATIME,1,1,0;CTIME)
            WIPTP.AEMP = INSERT(WIPTP.AEMP,1,1,0;EMPID)
            WIPTP.ACARTONS = INSERT(WIPTP.ACARTONS,1,1,0;ACARTONS)
            MATWRITE WIPTP.REC ON WIP.TRACK.PALLET, CONO:PAL.ID
      END CASE
 END
1079 *
      RELEASE WIP.TRACK.PALLET, CONO:PAL.ID
   RETURN
*T22322^
*
*---- UPDATE PALLET LOCATION
*
2000 *
   PREV.LOC = WIPTP.MLOC<1,1>
   IF NEWLOC # "" AND NEWLOC # WIPTP.MLOC<1,1> THEN
      CDATE=DATE(); CTIME=TIME(); IF CTIME < 10 THEN CDATE=DATE()
      WIPTP.MLOC  = INSERT(WIPTP.MLOC,1,1,0,NEWLOC)
      WIPTP.MDATE = INSERT(WIPTP.MDATE,1,1,0,CDATE)
      WIPTP.MTIME = INSERT(WIPTP.MTIME,1,1,0,CTIME)
      WIPTP.MEMP  = INSERT(WIPTP.MEMP,1,1,0,EMPID)
*T22322v
*         IF NEWLOC = "VENDOR" OR NEWLOC = "SHREDDER" THEN
*            IF NEWLOC = "VENDOR" THEN ACODE = "V" ELSE ACODE = "S"
      IF WIPSL.RANGE.ZERO = "Y" THEN
         ACODE = "S"  ;* 'S' for Storage Loc Defined Zero
*T22322^
         WIPTP.ACODE = INSERT(WIPTP.ACODE,1,1,0,ACODE)
         WIPTP.AQTY  = INSERT(WIPTP.AQTY,1,1,0,(-WIPTP.CQTY))
         WIPTP.ADATE = INSERT(WIPTP.ADATE,1,1,0,CDATE)
         WIPTP.ATIME = INSERT(WIPTP.ATIME,1,1,0,CTIME)
         WIPTP.AEMP = INSERT(WIPTP.AEMP,1,1,0,EMPID)
         WIPTP.CQTY = 0
*T22322v
         WIPTP.ACARTONS = INSERT(WIPTP.ACARTONS,1,1,0,(-WIPTP.CARTONS))
         WIPTP.CARTONS = 0
*T22322^
      END
*T22322v
*         IF PREV.LOC = "VENDOR" OR PREV.LOC = "SHREDDER" THEN
      SL.LOC = PREV.LOC; GOSUB 3000
      IF WIPSL.RANGE.ZERO = "Y" THEN
         WIPTP.CARTONS = -WIPTP.ACARTONS<1,1>
         WIPTP.ACARTONS = INSERT(WIPTP.ACARTONS,1,1,0,WIPTP.CARTONS)
*T22322^
         WIPTP.CQTY = -WIPTP.AQTY<1,1>
         WIPTP.ACODE = INSERT(WIPTP.ACODE,1,1,0,WIPTP.ACODE<1,1>)
         WIPTP.AQTY  = INSERT(WIPTP.AQTY,1,1,0,WIPTP.CQTY)
         WIPTP.ADATE = INSERT(WIPTP.ADATE,1,1,0,CDATE)
         WIPTP.ATIME = INSERT(WIPTP.ATIME,1,1,0,CTIME)
         WIPTP.AEMP = INSERT(WIPTP.AEMP,1,1,0,EMPID)
      END
   END
   RETURN
*
*T22322v
*---- Get the WIPT.STORAGE.LOC definition for a specific location
*
3000 *
   ERRMSG = ""
   STMT = 'SSELECT WIPT.STORAGE.LOC WITH RANGE.START <= "':SL.LOC:'"'
   STMT = STMT:' AND WITH RANGE.END >= "':SL.LOC:'"'
   STMT = STMT:' AND WITH CONO = "':CONO:'"'
   PERFORM STMT CAPTURING GARBAGE
   MAT WIPSL.REC = ""
   READNEXT SL.ID THEN
      MATREAD WIPSL.REC FROM WIPT.STORAGE.LOC, SL.ID ELSE MAT WIPSL.REC = ""
      CLEARSELECT
   END ELSE
      ERRMSG = "*Undefined Location*"
   END
   RETURN
*T22322^
*
*---- FORMAT FORM NUMBER
*
85100 *
   ERRMSG = ""
   FNUM = FIELD(FORMNO,".",1)
   VNUM = FIELD(FORMNO,".",2)
   SNUM = FIELD(FORMNO,".",3)
   BEGIN CASE
      CASE FNUM = ""
         ERRMSG = 1
      CASE FNUM = 0
         ERRMSG = 1
      CASE 1
         BEGIN CASE
            CASE VNUM = ""
               FORMNO = FNUM
            CASE VNUM = 0
               ERRMSG = 2
            CASE LEN(VNUM) > 3
               ERRMSG = 2
            CASE 1
               VNUM = (1000+VNUM)[2,3]
               FORMNO = FNUM:".":VNUM
         END CASE
   END CASE
   BEGIN CASE
      CASE ERRMSG = 1
         ERRMSG = "Invalid form #, Try again! "
      CASE ERRMSG = 2
         ERRMSG = "Invalid run #, Try again! "
      CASE ERRMSG = 3
         ERRMSG = "Invalid sig #, Try again! "
   END CASE
   RETURN
*
*---- UPDATE X-REF DATA
*
89100 *
   CALL RFT_WIPT_XREF_MAINT(CONO,PREV.JOB,PREV.FORM,CURR.JOB,CURR.FORM,PAL.ID,GEN.SKID,ERRMSG)
   RETURN
*
*---- ERROR ROUTINE
*
91000 *
   GOTO 99999
93000 *
   GOTO 99999
100 *
   RELEASE
*
*---- END OF PROGRAM
*
99999 *
   RETURN
END
