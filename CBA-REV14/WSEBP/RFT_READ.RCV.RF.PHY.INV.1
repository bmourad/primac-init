SUBROUTINE RFT_READ.RCV.RF.PHY.INV.1(CONO,EMPID,WHSE,LOC,DATE.ENT1,SEQ.NO1,STRXML,ERRMSG) 
*********************************************************************
*
* PROGRAM  - RCV.RF.PHY.INV
*
* DESCRIPTION
*
* This program is used to process physical inventory transactionss
* from the hand-held R-F units used in the warehouse.
*
*T26674 adelgado 06/21/2002 * Original Code
*T27565 cmykleb 07/25/2003 * Allow phyiscal inventory transactions in
*                            rev11.
*********************************************************************
*
*---- COPY STATEMENTS
*
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE PMC.CPYLIB EMPLOYEE
$INCLUDE ICS.CPYLIB PHY.INV
*
*---- OPEN ALL FILES
*
  OPEN "","PHY.INV" TO PHY.INV ELSE
    ERRMSG = 'PHY.INV FILE MISSING'
    RETURN
  END
  OPEN "","CATEGORY" TO CATEGORY ELSE
    ERRMSG = 'CATEGORY FILE MISSING'
    RETURN
  END
  OPEN "","PO" TO PO ELSE
    ERRMSG = 'PO FILE MISSING'
    RETURN
  END
  OPEN "","INVENTORY" TO INVENTORY ELSE
    ERRMSG = 'INVENTORY FILE MISSING'
    RETURN
  END
  OPEN "","INV.WHSE" TO INV.WHSE ELSE
    ERRMSG = 'INV.WHSE FILE MISSING'
    RETURN
  END
  OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE
    ERRMSG = 'INV.WHSE.LOC FILE MISSING'
    RETURN
  END
  OPEN "","ROLL.SKID.INFO" TO ROLL.SKID.INFO ELSE
    ERRMSG = 'ROLL.SKID.INFO FILE MISSING'
    RETURN
  END
  OPEN "","WAREHOUSE" TO WAREHOUSE ELSE
    ERRMSG = 'WAREHOUSE FILE MISSING'
    RETURN
  END
  OPEN "","DIVISION" TO DIVISION ELSE
    ERRMSG = 'DIVISION FILE MISSING'
    RETURN
  END
  OPEN "","TRANSFER" TO TRANSFER ELSE
    ERRMSG = 'TRANSFER FILE MISSING'
    RETURN
  END
  OPEN "","EMPLOYEE" TO EMPLOYEE ELSE
         ERRMSG = "CANNOT OPEN EMPLOYEE FILE"
         RETURN
  END
  OPEN "","COMPANY" TO COMPANY ELSE
         ERRMSG = "CANNOT OPEN COMPANY FILE"
         RETURN
  END
 OPEN "","CONTROL" TO CONTROL ELSE
         ERRMSG = "CANNOT OPEN CONTROL FILE"
         RETURN
 END
*
*---- INITIALIZATION
*
  MATREAD COMP.REC FROM COMPANY,CONO ELSE MAT COMP.REC = ''
  REAL.TIME = 1
  SPX = ""
  MATREAD EMP.REC FROM EMPLOYEE, CONO:EMPID THEN
    EMPNAME = (EMP.FRST.NAME:" ":EMP.LAST.NAME)[1,20]
  END
  IF LEN(EMPNAME) < 20 THEN SPX = SPACE(INT((21-LEN(EMPNAME))/2))
  EMPNAME = SPX:EMPNAME
*---- MAIN PROCESSING
*
   GOSUB INIT.VARS
   GOSUB GET.SEQ
   IF SEQ.NO # '' THEN
   IF LOC.NO = '' THEN GOSUB GET.LOC
   IF LOC.NO = '' THEN CONTINUE
   IF DATE.ENT = '' THEN GOSUB GET.DATE
   IF DATE.ENT = '' THEN CONTINUE
   END 
   STRXML := "<EmployeeName>":EMPNAME:"</EmployeeName>"
   STRXML := "<Sequence>":SEQ.NO:"</Sequence>"
   STRXML := "<WareHouse>":WHSE.NO:"</WareHouse>"
   STRXML := "<Location>":LOC.NO:"</Location>"
   STRXML := "<Date>":OCONV(DATE.ENT,'D2/'):"</Date>"
   RETURN   
*
INIT.VARS: 
*
  SEQ.NO = '' ; DATE.ENT = ''
  WHSE.NO = '' ; LOC.NO = ''
  STRXML = ''
  RETURN
*
GET.SEQ: 
*
    MATREADU PHYSI.REC FROM PHY.INV, CONO:SEQ.NO1 LOCKED
        ERRMSG = 'SEQUENCE LOCKED' ; RETURN
      END THEN
        WHSE.NO = PHYSI.WHSE
        LOC.NO = PHYSI.LOC
        DATE.ENT = PHYSI.MAINT.DATE
        SEQ.NO = SEQ.NO1       
      END ELSE
        ERRMSG = 'INVALID SEQ' ; RETURN
      END  
  RETURN
*
GET.LOC: 
*
  IF LOC # '' THEN
    LOC.NO = LOC
    PHYSI.LOC = LOC.NO
  END
  *
  RETURN
*
GET.DATE: 
*  
  IF DATE.ENT1 # '' THEN
    DATE.ENT = DATE.ENT1
    PHYSI.MAINT.DATE = DATE.ENT
  END
  RETURN
*
*---- END OF PROGRAM
*
END
