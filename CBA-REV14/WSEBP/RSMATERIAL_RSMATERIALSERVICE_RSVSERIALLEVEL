SUBROUTINE RSMATERIAL_RSMATERIALSERVICE_RSVSERIALLEVEL(CONO,PVALUE,STRXML,ERRMSG,SCHEMA.ONLY) 
*********************************************************************************************
*Created by : Yakub Ali Khan on 02/18/2010
*********************************************************************************************
$INCLUDE ICS.CPYLIB INV_RECEIPTS
$INCLUDE ICS.CPYLIB INV_RECP_WHSE
$INCLUDE ICS.CPYLIB INV_SERIAL
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE JCS.CPYLIB SERIAL.RESV
$INCLUDE JCS.CPYLIB JOB
*$INCLUDE CPYLIB FILE.VARS         
$INCLUDE CPYLIB>CHAR      
   DEFFUN CALC_STK_QTY_PRIDGET(COST.QTY,MAT INV.CNV.REC,ROND,LN)
   DEFFUN CALC_COST_QTY_PRIDGET(STK.QTY,MAT INV.CNV.REC,ROND,LN)
         OPEN '','INV_RECEIPTS' TO INV_RECEIPTS ELSE 
            ERRMSG='INV_RECEIPTS FILE IS MISSING.';GOTO 93000
         END
         OPEN '','INV_RECEIPTS_TEMP' TO INV_RECEIPTS_TEMP ELSE 
            ERRMSG='INV_RECEIPTS_TEMP FILE IS MISSING.';GOTO 93000
         END
         OPEN '','INV_RECP_WHSE' TO INV_RECP_WHSE ELSE
            ERRMSG='INV_RECP_WHSE FILE IS MISSING';GOTO 93000
         END
         OPEN '','INV_RECP_WHSE_TEMP' TO INV_RECP_WHSE_TEMP ELSE
            ERRMSG='INV_RECP_WHSE_TEMP FILE IS MISSING';GOTO 93000
         END
         OPEN '','INV_SERIAL' TO INV_SERIAL ELSE
            ERRMSG='INV_SERIAL FILE IS MISSING';GOTO 93000
         END
         OPEN '','INV_SERIAL_TEMP' TO INV_SERIAL_TEMP ELSE
            ERRMSG='INV_SERIAL_TEMP FILE IS MISSING';GOTO 93000
         END
OPEN '','INVENTORY' TO INVENTORY ELSE ERRMSG = 'INVENTORY FILE IS MISSING'; GOTO 93000
OPEN '','INV.WHSE' TO INV.WHSE ELSE ERRMSG = 'INV.WHSE FILE IS MISSING'; GOTO 93000
OPEN '','JOB' TO JOB ELSE ERRMSG = 'JOB FILE IS MISSING'; GOTO 93000
********
USER.ID = UPCASE(@LOGNAME)
UNKNOWN = "??????????"
SCHEMA.ONLY = 0
JOB.NO = PVALUE<1,1>
PRODUCT = PVALUE<1,2>
WHSE = PVALUE<1,3>
LINE.NBR = PVALUE<1,4>
JOB_RESV_QTY = PVALUE<1,5>
*CONO = "001"
*JOB.NO = "10002"
*PRODUCT = "PC1-SLCPC-MSI"
*WHSE = "01"
*LINE.NBR = 1
 MATREAD JOB.REC FROM JOB, CONO:JOB.NO ELSE
    MAT JOB.REC = ""
    ERRMSG="Job number ":JOB.NO : " does not exist"
    GOTO 93000
 END
 IF JOB.STATUS<1,1> > 3 AND JOB.STATUS<1,1> # "5" THEN
    DISPLAY=1
 END ELSE
    DISPLAY=0
 END
 *
IWH.ID = CONO : PRODUCT : '!' : WHSE
  MATREAD IWH.REC FROM INV.WHSE, IWH.ID ELSE
     ERRMSG = 'WAREHOUSE (':WHSE:') IS MISSING'; GOSUB 93000
  END
         MATREAD INV.REC FROM INVENTORY, CONO:PRODUCT ELSE
            MAT INV.REC = ''
            INV.FULL.DESC = UNKNOWN
         END
GOSUB 8000
********
   TMP.RECP='' ; TMP.SERIAL='' ; TMP.OLD.QTY=''
   TMP.NEW.QTY='' ; TMP.UNIT.COST=''
   TMP.RECP.DATE='' ; TMP.AVAIL=''
   CONO=IWH.ID[1,3]
   PROD=OCONV(IWH.ID,"G!1")[4,99]
   WHSE=OCONV(IWH.ID,"G1!1")
   LN='' ; L=0
   PRWHSE=PROD:"!":WHSE
   *
   IF DISPLAY THEN GOTO GET.DATA.INQ
   LOCATE PRWHSE IN SRESV.PRWHSE<1> SETTING PRWHSE.POS  THEN
      LL=DCOUNT(SRESV.PRWHSE<1>,VM)
      L=0; EOP=0
      FOR PW=PRWHSE.POS TO LL UNTIL EOP
         IF PRWHSE=SRESV.PRWHSE<1,PW> THEN
            SCNT=DCOUNT(SRESV.SERIAL<1,PW>,SVM)
            FOR S=1 TO SCNT
               L+=1
               TMP.RECP<1,L>=SRESV.RECP<1,PW>
               TMP.SERIAL<1,L>=SRESV.SERIAL<1,PW,S>
               TMP.UNIT.COST<1,L>=SRESV.UN.COST<1,PW>
               TMP.RECP.DATE<1,L>=SRESV.RECP.DATE<1,PW>
               TMP.AVAIL<1,L>=SRESV.AVAIL<1,PW,S>
               TMP.OLD.QTY<1,L>=SRESV.OLD.QTY<1,PW,S>
               TMP.NEW.QTY<1,L>=SRESV.QTY<1,PW,S>
            NEXT S
         END ELSE
            EOP=1
         END
      NEXT PW
   END ELSE
      ;* suggest reservation of the serials on fifo basis
      ;* when initialy setting reserves
      *RESV.QTY=JOB.RESV.QTY<1,LINE.NBR>
      JOB_RESV_QTY = CALC_COST_QTY_PRIDGET(JOB_RESV_QTY,MAT INV.CNV.REC,'.5',LINE.NBR)
      RESV.QTY = JOB_RESV_QTY
      GOSUB GET.DATA
      ;* suggest reservation only when
      ;* initially setting the reserves
      IF SUM(TMP.OLD.QTY<1>)=0 THEN
         GOSUB FIFO.RESERVE
      END
   END
   GOSUB BUILD.SCREEN
  RETURN
*
*********
GET.DATA: 
*********
*
   LINE=0
   RCNT=DCOUNT(IWH.RECP.NO,VM)
   FOR R=1 TO RCNT
      INVR.ID=CONO:IWH.RECP.NO<1,R>
      IF RECORDLOCKED(INV_RECEIPTS_TEMP,INVR.ID)=0 THEN
         DELETE INV_RECEIPTS_TEMP,INVR.ID
      END
      MATREADU INVR.REC FROM INV_RECEIPTS_TEMP,INVR.ID LOCKED
            ERRMSG = 'RECORD INV_RECEIPTS_TEMP IS LOCKED BY ': USER.ID
	    GOTO 93000
      END ELSE
         MATREADU INVR.REC FROM INV_RECEIPTS,INVR.ID THEN
            IRW.ID=CONO:IWH.RECP.NO<1,R>:"!":WHSE
            IF RECORDLOCKED(INV_RECP_WHSE_TEMP,IRW.ID)=0 THEN
               DELETE INV_RECP_WHSE_TEMP,IRW.ID
            END
            MATREADU IRW.REC FROM INV_RECP_WHSE_TEMP,IRW.ID LOCKED
			ERRMSG = 'RECORD INV_RECP_WHSE_TEMP IS LOCKED BY ': USER.ID	
			GOTO 93000
	    END ELSE
               MATREADU IRW.REC FROM INV_RECP_WHSE,IRW.ID LOCKED
			ERRMSG = 'RECORD INV_RECP_WHSE IS LOCKED BY ': USER.ID
			GOTO 93000
	       END ELSE
                  MAT IRW.REC=''
               END
            END
	 END LOCKED
		ERRMSG = 'RECORD INV_RECEIPTS IS LOCKED BY ': USER.ID
		GOTO 93000
         END
      END
      SCNT=DCOUNT(IRW.SERIAL.NO,VM)
      FOR S=1 TO SCNT
         SERIAL=IRW.SERIAL.NO<1,S>
         ISTK.ID=CONO:SERIAL
         IF RECORDLOCKED(INV_SERIAL_TEMP,ISTK.ID)=0 THEN
            DELETE INV_SERIAL_TEMP,ISTK.ID
         END
         MATREADU ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID ELSE
            MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID THEN
               LINE +=1
               LN<1,LINE>=LINE
               TMP.RECP<1,LINE>=IWH.RECP.NO<1,R>
               TMP.SERIAL<1,LINE>=SERIAL
               TMP.UNIT.COST<1,LINE>=INVR.UNIT.COST
               TMP.RECP.DATE<1,LINE>=INVR.ENT.DATE
               TMP.AVAIL<1,LINE>=ISTK.RSVB.QTY
               LOCATE JOB.NO IN ISTK.JOB<1> SETTING JPOS THEN
                  TMP.OLD.QTY<1,LINE>=ISTK.JRSVD.QTY<1,JPOS>
                  TMP.NEW.QTY<1,LINE>=ISTK.JRSVD.QTY<1,JPOS>
                  TMP.AVAIL<1,LINE>=ISTK.JRSVD.QTY<1,JPOS>+ISTK.RSVB.QTY
               END
               GOSUB SET.SRESV.ARR
            END
         END
      NEXT S
   NEXT R
   RETURN
**************
BUILD.SCREEN: 
**************
*
  TMP_PROD = "";TMP_PRODDESC = "";TMP_WHSE = ""
 TMP_RECP = "";TMP_SERIAL = "";TMP_UNIT_COST = "";TMP_RECP_DATE = "";TMP_OLD_QTY = "";TMP_AVAIL = "";TMP_NEW_QTY = "";TOTAL_RSVD = "";TOTAL_AVAIL = "";TOTAL_RSV = ""
*   SCV.REC(1)<ESN>=PROD
*   SCV.REC(2)<ESN>=WHSE
*   SCV.REC(3)<ESN>=INV.DESC
TMP_PROD = PROD
TMP_PRODDESC = INV.DESC
TMP_WHSE = WHSE
*
   TMP_RECP = TMP.RECP
   TMP_SERIAL = TMP.SERIAL
*   SCV.REC(11)<ESN>=LN
*   SCV.REC(60)<ESN>=TMP.SERIAL
*   SCV.REC(14)<ESN>=TMP.UNIT.COST
*   SCV.REC(15)<ESN>=TMP.RECP.DATE
   LCNT=DCOUNT(TMP.SERIAL<1>,VM)
   FOR S=1 TO LCNT
      TMP_UNIT_COST<1,S> = OCONV(TMP.UNIT.COST<1,S>,"MD4")
      TMP_RECP_DATE<1,S> = OCONV(TMP.RECP.DATE<1,S>,"D2/")
      TMP=CALC_STK_QTY_PRIDGET(TMP.OLD.QTY<1,S>,MAT INV.CNV.REC,'',LINE.NBR) 
      *SCV.REC(16)<ESN,S>=OCONV(TMP,ICR.CNV<LINE.NBR>)
      TMP_OLD_QTY<1,S> = OCONV(TMP,ICR.CNV<LINE.NBR>)
      TMP=CALC_STK_QTY_PRIDGET(TMP.AVAIL<1,S>,MAT INV.CNV.REC,'',LINE.NBR)
      *SCV.REC(17)<ESN,S>=OCONV(TMP,ICR.CNV<LINE.NBR>)
      TMP_AVAIL<1,S> = OCONV(TMP,ICR.CNV<LINE.NBR>)
      IF TMP.NEW.QTY<1,S>#'' THEN
         TMP=CALC_STK_QTY_PRIDGET(TMP.NEW.QTY<1,S>,MAT INV.CNV.REC,'',LINE.NBR)
         *SCV.REC(18)<ESN,S>=OCONV(TMP,ICR.CNV<LINE.NBR>)
	 TMP_NEW_QTY<1,S> = OCONV(TMP,ICR.CNV<LINE.NBR>)
      END
   NEXT S
   ;* set the totals
   TMP=SUM(TMP.OLD.QTY<1>)
   TMP=CALC_STK_QTY_PRIDGET(TMP,MAT INV.CNV.REC,'',LINE.NBR)
   TMP=OCONV(TMP,ICR.CNV<LINE.NBR>)
   *SCV.REC(21)<ESN>=TMP
   TOTAL_RSVD = TMP
   TMP=SUM(TMP.AVAIL<1>)
   TMP=CALC_STK_QTY_PRIDGET(TMP,MAT INV.CNV.REC,'',LINE.NBR)
   TMP=OCONV(TMP,ICR.CNV<LINE.NBR>)
   *SCV.REC(22)<ESN>=TMP
   TOTAL_AVAIL = TMP 
   TMP=SUM(TMP.NEW.QTY<1>)
   TMP=CALC_STK_QTY_PRIDGET(TMP,MAT INV.CNV.REC,'',LINE.NBR)
   TMP=OCONV(TMP,ICR.CNV<LINE.NBR>)
   *SCV.REC(23)<ESN>=TMP
   TOTAL_RSV = TMP
*STRXML = "<RSSERIALDATA>"
STRXML := "<RProd>":PROD:"</RProd>"
STRXML := "<RProdDesc>":TMP_PRODDESC:"</RProdDesc>"
STRXML := "<RWhse>":TMP_WHSE:"</RWhse>"
STRXML := "<RSerial>":TMP_SERIAL:"</RSerial>"
STRXML := "<RReceipt>":TMP_RECP:"</RReceipt>"
STRXML := "<RUnitcost>":TMP_UNIT_COST:"</RUnitcost>"
STRXML := "<RRecpDate>":TMP_RECP_DATE:"</RRecpDate>"
STRXML := "<RsvdQty>":TMP_OLD_QTY:"</RsvdQty>"
STRXML := "<RAvailQty>":TMP_AVAIL:"</RAvailQty>"
STRXML := "<RsvQty>":TMP_NEW_QTY:"</RsvQty>"
STRXML := "<TotalRsvd>":TOTAL_RSVD:"</TotalRsvd>"
STRXML := "<TotalAvail>":TOTAL_AVAIL:"</TotalAvail>"
STRXML := "<TotalRsv>":TOTAL_RSV:"</TotalRsv>"
*STRXML := "</RSSERIALDATA>"
 RETURN
*
****************
FIFO.RESERVE: 
****************
*
   LCNT=DCOUNT(TMP.SERIAL<1>,VM)
   FOR LINE=1 TO LCNT
      IF RESV.QTY>0 THEN
         IF TMP.AVAIL<1,LINE>-TMP.OLD.QTY<1,LINE> > 0 THEN
            BEGIN CASE
               CASE TMP.AVAIL<1,LINE> >= RESV.QTY
                  TMP.NEW.QTY<1,LINE>=RESV.QTY
                  RESV.QTY=0
               CASE 1
                  TMP.NEW.QTY<1,LINE>=TMP.AVAIL<1,LINE>
                  RESV.QTY-=TMP.AVAIL<1,LINE>
            END CASE
         END ELSE
            TMP.NEW.QTY<1,LINE>=''
         END
      END ELSE
         TMP.NEW.QTY<1,LINE>=''
      END
      GOSUB SET.SRESV.ARR
   NEXT LINE
   RETURN
*
****************
SET.SRESV.ARR: 
*****************
*
   LOCATE PRWHSE IN SRESV.PRWHSE<1> SETTING PRWHSE.POS THEN
      LOCATE TMP.RECP<1,LINE> IN SRESV.RECP<1>,PRWHSE.POS SETTING RPOS THEN
         PRWHSE.POS=RPOS
         IF SRESV.PRWHSE<1,RPOS>=PRWHSE THEN
            LOCATE TMP.SERIAL<1,LINE> IN SRESV.SERIAL<1,RPOS> SETTING SPOS THEN 
               SRESV.QTY<1,RPOS,SPOS>=TMP.NEW.QTY<1,LINE>+0
               SRESV.OLD.QTY<1,RPOS,SPOS>=TMP.OLD.QTY<1,LINE>+0
               SRESV.AVAIL<1,RPOS,SPOS>=TMP.AVAIL<1,LINE>+0
            END ELSE
               SRESV.SERIAL<1,RPOS,SPOS>=TMP.SERIAL<1,LINE>
               SRESV.QTY<1,RPOS,SPOS>=TMP.NEW.QTY<1,LINE>+0
               SRESV.OLD.QTY<1,RPOS,SPOS>=TMP.OLD.QTY<1,LINE>+0
               SRESV.AVAIL<1,RPOS,SPOS>=TMP.AVAIL<1,LINE>+0
            END
         END ELSE
            GOSUB SRESV.INSERT
         END
      END ELSE
         PRWHSE.POS=RPOS
         GOSUB SRESV.INSERT
      END
   END ELSE
      GOSUB SRESV.INSERT
   END
   RETURN
*
*****************
SRESV.INSERT: 
*****************
*
   SRESV.PRWHSE=INSERT(SRESV.PRWHSE,1,PRWHSE.POS,-1,PRWHSE)
   SRESV.RECP=INSERT(SRESV.RECP,1,PRWHSE.POS,-1,TMP.RECP<1,LINE>)
   SRESV.SERIAL=INSERT(SRESV.SERIAL,1,PRWHSE.POS,-1,TMP.SERIAL<1,LINE>)
   SRESV.QTY=INSERT(SRESV.QTY,1,PRWHSE.POS,-1,TMP.NEW.QTY<1,LINE>+0)
   SRESV.OLD.QTY=INSERT(SRESV.OLD.QTY,1,PRWHSE.POS,-1,TMP.OLD.QTY<1,LINE>+0)
   SRESV.AVAIL=INSERT(SRESV.AVAIL,1,PRWHSE.POS,-1,TMP.AVAIL<1,LINE>+0)
   SRESV.RECP.DATE=INSERT(SRESV.RECP.DATE,1,PRWHSE.POS,-1,TMP.RECP.DATE<1,LINE>)
   SRESV.UN.COST=INSERT(SRESV.UN.COST,1,PRWHSE.POS,-1,TMP.UNIT.COST<1,LINE>+0)
   RETURN
********
********
8000 *
********
*
   BEGIN CASE
      CASE INV.UNIT<1,2> = 'SHT' AND INV.UNIT<1,3> = 'LBS'
         ICR.DV1<LINE.NBR> = INV.M.WT
         ICR.MT1<LINE.NBR> = 1
         ICR.DV2<LINE.NBR> = 1
         ICR.CNV<LINE.NBR> = "MD0"
      CASE INV.UNIT<1,2> = 'PC' AND INV.UNIT<1,3> = 'MSI'
         ICR.DV1<LINE.NBR> = INV.PAP.WIDTH/100
         ICR.MT1<LINE.NBR> = 10
         ICR.DV2<LINE.NBR> = 1
         ICR.CNV<LINE.NBR> = "MD0"
      CASE INV.UNIT<1,2> = 'FT' AND INV.UNIT<1,3> = 'MSI'
         ICR.DV1<LINE.NBR> = INV.PAP.WIDTH/100
         ICR.MT1<LINE.NBR> = 100
         ICR.DV2<LINE.NBR> = 12
         ICR.CNV<LINE.NBR> = "MD0"
      CASE 1
         ICR.DV1<LINE.NBR> = 10
         ICR.MT1<LINE.NBR> = 1
         ICR.DV2<LINE.NBR> = 1
         ICR.CNV<LINE.NBR> = "MD2"
   END CASE
   RETURN
*************
GET.DATA.INQ:
*************
   LINE=0
   RCNT=DCOUNT(IWH.RECP.NO,VM)
   FOR R=1 TO RCNT
      INVR.ID=CONO:IWH.RECP.NO<1,R>
      IF RECORDLOCKED(INV_RECEIPTS_TEMP,INVR.ID)=0 THEN
         DELETE INV_RECEIPTS_TEMP,INVR.ID
      END
      MATREADU INVR.REC FROM INV_RECEIPTS_TEMP,INVR.ID LOCKED
      		ERRMSG = 'RECORD INV_RECEIPTS_TEMP IS LOCKED BY ': USER.ID
		GOTO 93000
      END ELSE
         MATREADU INVR.REC FROM INV_RECEIPTS,INVR.ID THEN
            IRW.ID=CONO:IWH.RECP.NO<1,R>:"!":WHSE
            IF RECORDLOCKED(INV_RECP_WHSE_TEMP,IRW.ID)=0 THEN
               DELETE INV_RECP_WHSE_TEMP,IRW.ID
            END
            MATREADU IRW.REC FROM INV_RECP_WHSE_TEMP,IRW.ID LOCKED
		ERRMSG = 'RECORD INV_RECP_WHSE_TEMP IS LOCKED BY ': USER.ID
		GOTO 93000	    
	    END ELSE
               MATREADU IRW.REC FROM INV_RECP_WHSE,IRW.ID LOCKED
		ERRMSG = 'RECORD INV_RECP_WHSE IS LOCKED BY ': USER.ID
		GOTO 93000	       
	       END ELSE
                  MAT IRW.REC=''
               END
            END
         END LOCKED
		ERRMSG = 'RECORD INV_RECEIPTS IS LOCKED BY ': USER.ID
		GOTO 93000
         END
      END
      SCNT=DCOUNT(IRW.SERIAL.NO,VM)
      FOR S=1 TO SCNT
         SERIAL=IRW.SERIAL.NO<1,S>
         ISTK.ID=CONO:SERIAL
         IF RECORDLOCKED(INV_SERIAL_TEMP,ISTK.ID)=0 THEN
            DELETE INV_SERIAL_TEMP,ISTK.ID
         END
         MATREADU ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID ELSE
            MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID THEN
               LOCATE JOB.NO IN ISTK.JOB<1> SETTING JPOS THEN
                  LINE +=1
                  LN<1,LINE>=LINE
                  TMP.RECP<1,LINE>=IWH.RECP.NO<1,R>
                  TMP.SERIAL<1,LINE>=SERIAL
                  TMP.UNIT.COST<1,LINE>=INVR.UNIT.COST
                  TMP.RECP.DATE<1,LINE>=INVR.ENT.DATE
                  TMP.AVAIL<1,LINE>=ISTK.RSVB.QTY
                  TMP.OLD.QTY<1,LINE>=ISTK.JRSVD.QTY<1,JPOS>
                  TMP.NEW.QTY<1,LINE>=ISTK.JRSVD.QTY<1,JPOS>
                  TMP.AVAIL<1,LINE>=ISTK.JRSVD.QTY<1,JPOS>+ISTK.RSVB.QTY
               END
               GOSUB SET.SRESV.ARR
            END
         END
      NEXT S
   NEXT R
  GOSUB BUILD.SCREEN
RETURN
93000*
IF ERRMSG <> "" THEN
SCHEMA.ONLY = 0
*STRXML = "<RSSERIALDATA><ErrMsg>": ERRMSG:"</ErrMsg></RSSERIALDATA>"
STRXML = "<ErrMsg>": ERRMSG:"</ErrMsg>"
CALL WRITELOG(ERRMSG)
END
END
