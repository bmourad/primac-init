SUBROUTINE RFT_WRITE.RCV.RF.PHY.INV(CONO,EMPID,WHSE,LOC,DATE.ENT1,SEQ.NO1,ROLL.IDS,QTYS,DIAMS,PRICES,REPLY1,USER.ID,STRXML,ERRMSG) 
*********************************************************************
*
* PROGRAM  - RCV.RF.PHY.INV
*
*
* DESCRIPTION
*
* This program is used to process physical inventory transactionss
* from the hand-held R-F units used in the warehouse.
*
*T26674 adelgado 06/21/2002 * Original Code
*T27565 cmykleb 07/25/2003 * Allow phyiscal inventory transactions in
*                            rev11.
*********************************************************************
*
*---- COPY STATEMENTS
*
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE PMC.CPYLIB EMPLOYEE
$INCLUDE RCV.CPYLIB RCV.FILE.VARS
$INCLUDE ICS.CPYLIB PHY.INV
$INCLUDE CPYLIB FILE.VARS
$INCLUDE CPYLIB CHAR
*
*---- OPEN ALL FILES
*
   OPEN "","PHY.INV" TO PHY.INV ELSE
     ERRMSG = 'PHY.INV FILE MISSING'
     RETURN
    END 
    OPEN "","COMPANY" TO COMPANY ELSE
        ERRMSG = "CANNOT OPEN COMPANY FILE"
        RETURN
     END
     OPEN "","CONTROL" TO CONTROL ELSE
         ERRMSG = "CANNOT OPEN CONTROL FILE"
          RETURN
      END
      OPEN "","EMPLOYEE" TO EMPLOYEE ELSE
         ERRMSG = "CANNOT OPEN EMPLOYEE FILE"
         RETURN
      END           
*---- INITIALIZATION
*
  MATREAD COMP.REC FROM COMPANY,CONO ELSE MAT COMP.REC = ''
  SPX = ""
  MATREAD EMP.REC FROM EMPLOYEE, CONO:EMPID THEN
      EMPNAME = (EMP.FRST.NAME:" ":EMP.LAST.NAME)[1,20]
   END ELSE
      ERRMSG = "INVALID EMPLOYEE ID" ; RETURN
   END
  IF LEN(EMPNAME) < 20 THEN SPX = SPACE(INT((21-LEN(EMPNAME))/2))
  EMPNAME = SPX:EMPNAME
  ROLL.IDS1=""
  ROLL.IDS1 = ROLL.IDS
*---- MAIN PROCESSING
*
   GOSUB INIT.VARS
   GOSUB GET.SEQ
   IF SEQ.NO # '' THEN
   IF LOC.NO = '' THEN GOSUB GET.LOC
   IF LOC.NO = '' THEN CONTINUE
   IF DATE.ENT = '' THEN GOSUB GET.DATE
   IF DATE.ENT = '' THEN CONTINUE
   END 
   STRXML := "<EmployeeName>":EMPNAME:"</EmployeeName>"
   STRXML := "<Sequence>":SEQ.NO:"</Sequence>"
   STRXML := "<WareHouse>":WHSE.NO:"</WareHouse>"
   STRXML := "<Location>":LOC.NO:"</Location>"
   STRXML := "<Date>":OCONV(DATE.ENT,"D2/"):"</Date>"
   RCNT=DCOUNT(ROLL.IDS1,VM)
   FOR RPTR = 1 TO RCNT
     ROLL.ID=ROLL.IDS1<1,RPTR>
     QTY1=QTYS<1,RPTR>
     DIAM1=DIAMS<1,RPTR>
     PRICE1=PRICES<1,RPTR>
     ERRMSG1=''
     MATREAD PHYSI.REC FROM PHY.INV, CONO:SEQ.NO ELSE
        MAT PHYSI.REC = ''
     END
     CALL RFT_WRITE.RCV.RF.PHY.INV.SUB(CONO, EMPID, MAT RCV.FILE.VARS, MAT PHYSI.REC,SEQ.NO,PHY.XREF,ROLL.ID,QTY1,DIAM1,PRICE1,USER.ID,REPLY1,ERRMSG1)
     IF ERRMSG1 = '' THEN
	  PHYSI.OPER.ID = EMPID
PHYSI.MAINT.DATE = ICONV(DATE.ENT1,"D")
          MATWRITE PHYSI.REC ON PHY.INV, CONO:SEQ.NO   
	  STRXML := "<RollId>":ROLL.ID:"</RollId>"
     END ELSE
       IF ERRMSG = "" THEN
        ERRMSG = ERRMSG1:" - " : ROLL.ID
	END ELSE
        ERRMSG := ", " :ERRMSG1:" - " : ROLL.ID
	END 	 
       RETURN
     END          
    NEXT RPTR      
  RETURN
*
INIT.VARS: 
*
  SEQ.NO = '' ; DATE.ENT = ''
  WHSE.NO = '' ; LOC.NO = ''
  STRXML = ''
  RETURN
*
GET.SEQ: 
*
     MATREADU PHYSI.REC FROM PHY.INV, CONO:SEQ.NO1 LOCKED
        ERRMSG = 'SEQUENCE LOCKED' ; RETURN
      END THEN
        WHSE.NO = PHYSI.WHSE
        LOC.NO = PHYSI.LOC
        DATE.ENT = PHYSI.MAINT.DATE
        SEQ.NO = SEQ.NO1        
      END ELSE
        ERRMSG = 'INVALID SEQ' ; RETURN
      END 
  RETURN
*
GET.LOC: 
*
  IF LOC # '' THEN
    LOC.NO = LOC
    PHYSI.LOC = LOC.NO
  END 
  RETURN
*
GET.DATE: 
*  
  IF DATE.ENT1 # '' THEN
    DATE.ENT = DATE.ENT1
    PHYSI.MAINT.DATE = DATE.ENT
  END 
  RETURN
*
*---- END OF PROGRAM
*
END
