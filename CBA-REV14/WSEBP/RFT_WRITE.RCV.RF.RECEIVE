SUBROUTINE RFT_WRITE.RCV.RF.RECEIVE(CONO, EMPID,PONO,FLAG,LOGNAME,MANNO,MANIFESTWGT,VENDERNO,POLINE,PRODUCTNAME,WARE_HOUSE,U_O_M,PR_ICE,SETVALUE,ROLLID,MILLID,QUANTITY,LOCATION,STRXML,ERRMSG)
*********************************************************************
*
* PROGRAM  - RCV.RF.RECEIVE
*
* AUTHOR   - PRASHANT KUMAR
*
* DATE     - 12/01/08
*
* DESCRIPTION
*
* This program is used to process the Roll Receiving transaction
* from the hand-held R-F units used on the receiving dock.
*
*T25697 edvard 03/20/2001 * Make a RCVMAN.TOT.WGT total weight for the
*                           whole po for the manifest.
*T26132 cm 09/06/2001 * Change screen size from 21x16 to 20x15.
*T26496 lhelms 03/21/2002 * UPGRADE REV12 FIX TO NOT WRITE OUT
*                           RCV.MANIFEST IF END AT SERAIL NUMBER PROMPT
*                           REMOVE RCV.MANIFEST REPLACE WITH DAILY_STOCK
*T26556 adelgado 06/17/2002 * Update PO.MAN.XREF with manifest total.
*T26951 adelgado 10/25/2002 * Remove prompt for Whse.
*T27071 epitka 12/17/2002 * Move location to second screen.
*T27928 lross 02/04/2005 * Allow posting from entry function.
*T28267 cmykleb 11/02/2004 * Allow entry of user defined serial #'s to
*                            receive stock.
*T28441 lross 02/14/2005 * Add Whse to XREF.
*T29241 PRASHANT KUMAR * WRITE SOME CODE IN THE SEPERATE FILES AND WEIGHT CONVERSION.
*********************************************************************
*
*---- INCLUDES COPYLIBS
*
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB DAILY_STOCK
$INCLUDE ICS.CPYLIB INV_SERIAL
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE PMC.CPYLIB PO
$INCLUDE PMC.CPYLIB VEND
$INCLUDE ICS.CPYLIB PO.MAN.XREF
$INCLUDE ICS.CPYLIB PO.RSKI.XREF
$INCLUDE PMC.CPYLIB EMPLOYEE
$INCLUDE CPYLIB FILE.VARS
$INCLUDE CPYLIB CHAR
*
*---- OPEN
*
ERRMSG = ''
   OPEN "","CONTROL" TO CONTROL ELSE
      ERRMSG = "CONTROL FILE MISSING"; GOTO 99999
   END
   OPEN "","PO.MAN.XREF" TO PO.MAN.XREF ELSE
      ERRMSG = "PO.MAN.XREF FILE MISSING"; GOTO 99999
   END
   OPEN "","PO.RSKI.XREF" TO PO.RSKI.XREF ELSE
      ERRMSG = "PO.RSKI.XREF FILE MISSING"; GOTO 99999
   END
   OPEN "","PO" TO PO ELSE
      ERRMSG = "PO FILE MISSING"; GOTO 99999
   END
   OPEN "","DAILY_STOCK" TO DAILY_STOCK ELSE
      ERRMSG = "DAILY_STOCK FILE MISSING"; GOTO 99999
   END
   OPEN "","CATEGORY" TO CATEGORY ELSE
      ERRMSG = "CATEGORY FILE MISSING"; GOTO 99999
   END
   OPEN "","INV_SERIAL" TO INV_SERIAL ELSE
      ERRMSG = "INV_SERIAL FILE MISSING"; GOTO 99999
   END
   OPEN "","INV_SERIAL_DELETED" TO INV_SERIAL_DELETED ELSE
      ERRMSG = "INV_SERIAL_DELETED FILE MISSING"; GOTO 99999
   END
   OPEN "","INVENTORY" TO INVENTORY ELSE
      ERRMSG = "INVENTORY FILE MISSING"; GOTO 99999
   END
   OPEN "","COMPANY" TO COMPANY ELSE
      ERRMSG = "COMPANY FILE MISSING"; GOTO 99999
   END
   OPEN "","VEND" TO VEND ELSE
      ERRMSG = "VEND FILE MISSING"; GOTO 99999
   END
   OPEN "","EMPLOYEE" TO EMPLOYEE ELSE
      ERRMSG = "EMPLOYEE FILE MISSING"; GOTO 99999
   END
   OPEN "","WAREHOUSE" TO WAREHOUSE ELSE
      ERRMSG = "WAREHOUSE FILE MISSING"; GOTO 99999
   END
   MATREAD COMP.REC FROM COMPANY,CONO ELSE
      ERRMSG='COMPANY # MISSING';GOTO 99999
   END
*
*---- INITIALIZATION
*
XYZ = ''
XYZ<1> = "IN THE RFT_WRITE.RCV.RF.RECEIVE";WRITE XYZ ON CONTROL,"120408"
   SPX = ""
   EMPNAME = "???????????????"
   MATREAD EMP.REC FROM EMPLOYEE, CONO:EMPID THEN
      EMPNAME = (EMP.FRST.NAME:" ":EMP.LAST.NAME)[1,20]
   END
   IF LEN(EMPNAME) < 20 THEN SPX = SPACE(INT((21-LEN(EMPNAME))/2))
   EMPNAME = SPX:EMPNAME
*
*---- INITIALIZE VARIABLES
*
      PO.NO   = ""
      MAN.NO  = ""
      PROD.ID = ""
      TOT.WGT = ""
      RCV.WGT = ""
      WHSE    = ""
      ;*T27071   WLOC    = ""
      STRXML = ''
      DELETEFLAG ="N"
*
*---- MAIN PROCESSING
*
*
*---- GET P/O NUMBER
*
            IF PONO = "END" THEN RETURN
            PONO = UPCASE(TRIM(PONO))
            IF PONO = "" THEN
               ERRMSG = "** REQUIRED **"; GOTO 99999
            END
**            PRINT @(S$X,S$Y):@(-4):S$VALUE:
**            STRXML:="<PoNo>":PONO:"</PoNo>"
            MANUAL.ENTRY = 0
* Replace PO with PO.RSKI.XREF v
            MATREADU RSXRF.REC FROM PO.RSKI.XREF, CONO:PONO LOCKED
               ERRMSG = "P/O LOCKED"; GOTO 99999
            END ELSE
*           ERRMSG = "INVALID P/O #"; GOTO 99999
               MAT RSXRF.REC = ''
               MANUAL.ENTRY = 1
            END
            PO.NO = PONO
            PO.PRESENT = 1
            MATREADU PO.REC FROM PO, CONO:PO.NO LOCKED
               ERRMSG = "P/O LOCKED"; GOTO 99999
            END ELSE
               IF DCOUNT(RSXRF.RS.NO,VM) > 0 THEN MANUAL.ENTRY = 1 ;*T27306
               IF NOT(MANUAL.ENTRY) THEN
                  ERRMSG='PO Missing'; GOTO 99999
               END ELSE
**                  CRT @(0,14):'NO PO-OK TO USE?':
                  IF FLAG = 'Y' THEN
                     MAT PO.REC = ''
                     PO.DIV.OWNER='00'
                  END 
               END
               PO.PRESENT=0
            END
            IF PO.PRESENT THEN MANUAL.ENTRY = 0 ;*27306
            DIV.CODE = PO.DIV.OWNER; USER.ID = UPCASE(@LOGNAME); ERRMSG = ''
XYZ<-1> = "BEFORE CALL RFT_SI.CK.DIV.SEC.SUB ";WRITE XYZ ON CONTROL,"120408"
            CALL RFT_SI.CK.DIV.SEC.SUB(CONO,DIV.CODE,USER.ID,ERRMSG)
XYZ<-1> = "AFTER CALL RFT_SI.CK.DIV.SEC.SUB ";WRITE XYZ ON CONTROL,"120408"
            IF ERRMSG # '' THEN
               GOTO 99999
            END
            IF NOT(MANUAL.ENTRY) THEN
               PO.LINE.CNT = DCOUNT(PO.PROD.NUM,VM)
               BCFLAG=0
               FOR PO.LINE.PTR=1 TO PO.LINE.CNT WHILE BCFLAG=0
                  MATREAD INV.REC FROM INVENTORY, CONO:PO.PROD.NUM<1,PO.LINE.PTR> ELSE MAT INV.REC = ""
                  MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE ELSE MAT CATG.REC=''
                  IF CATG.TRK.LVL='S' THEN
                     BCFLAG=1
                  END
               NEXT PO.LINE.PTR
               IF BCFLAG=0 THEN
                  ERRMSG='Not Serial PO'; GOTO 99999; CONTINUE
               END
            END
            NEW.MANIFEST = ''
******** ^
*           CONTINUE
*
*---- GET MANIFEST NUMBER
*
            IF MANNO = "END" THEN
               MAN.NO = ""
               RETURN
            END
            MANNO = UPCASE(TRIM(MANNO))
            IF MANNO = "" THEN
               ERRMSG = "** REQUIRED **"; GOTO 99999
            END
**            PRINT @(S$X,S$Y):@(-4):S$VALUE:
**	    STRXML:="<ManifestNo>":MANNO:"</ManifestNo>"
            MATREADU DSR.REC FROM DAILY_STOCK, CONO:PO.NO:"!":MANNO LOCKED
               ERRMSG = "MANIFEST LOCKED"; GOTO 99999
            END ELSE
               MAT DSR.REC = ""
            END
            MATREADU RSMAN.REC FROM PO.MAN.XREF, CONO:PO.NO:"!":MANNO LOCKED
               ERRMSG = "MANIFEST LOCKED *"; GOTO 99999
            END ELSE
               MAT RSMAN.REC = ""
            END
            MAN.NO = MANNO
            DSR.SHPMNT.NO = MAN.NO
*T27306 v
            RSMAN.MAN.NO = MAN.NO
*T27306 v Load Manual PO values.
            IF MANUAL.ENTRY AND NOT(PO.PRESENT) THEN
               FOR P = 1 TO DCOUNT(RSMAN.RS.NO,VM)
                  MATREAD ISTK.REC FROM INV_SERIAL,CONO:RSMAN.RS.NO<1,P> THEN
                     PTR=1
                     LOOP
                        LOCATE ISTK.PROD IN PO.PROD.NUM<1>,PTR SETTING FND THEN
                           IF ISTK.WHSE = PO.WHSE<1,FND> THEN
                              PTR = 0
                           END ELSE
                              PTR = FND+1
                           END
                        END ELSE
                           INS ISTK.PROD BEFORE PO.PROD.NUM<1,RSMAN.LINE.NO<1,P>>
                           INS ISTK.WHSE BEFORE PO.WHSE<1,RSMAN.LINE.NO<1,P>>
                           INS ISTK.UOM BEFORE PO.UNIT.FLG<1,RSMAN.LINE.NO<1,P>>
                           INS ISTK.UNIT.COST BEFORE PO.GROS.PRICE<1,RSMAN.LINE.NO<1,P>>
                           PTR = 0
                        END
                     WHILE PTR DO
                     REPEAT
                  END
               NEXT P
            END
*T27306 ^
            PCNT = DCOUNT(PO.PROD.NUM,VM)
            FOR PO.LINE = 1 TO PCNT
               PROD.NO = PO.PROD.NUM<1,PO.LINE>
               MATREAD INV.REC FROM INVENTORY,CONO:PROD.NO ELSE
                  MAT INV.REC = ""
               END
               MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE ELSE
                  MAT CATG.REC = ""
               END
               IF CATG.TRK.LVL = "S" THEN
*T27928 v Change below to insert by 'AR' vs <-1>
                  LOCATE PO.LINE IN DSR.PO.LINE<1>,1 BY 'AR' SETTING P ELSE
*                    DSR.PO.LINE<1,P> = PO.LINE
                     INS PO.LINE BEFORE DSR.PO.LINE<1,P>
*                    DSR.PROD<1,P> = PROD.NO
                     INS PROD.NO BEFORE DSR.PROD<1,P>
*                    DSR.WHSE<1,P> = PO.WHSE<1,PO.LINE>
                     INS PO.WHSE<1,PO.LINE> BEFORE DSR.WHSE<1,P>
*                    DSR.UN.PRICE<1,P> = PO.GROS.PRICE<1,PO.LINE>
                     INS PO.GROS.PRICE<1,PO.LINE> BEFORE DSR.UN.PRICE<1,P>
*                    DSR.UOM<1,P> = PO.UNIT.FLG<1,PO.LINE>
                     INS PO.UNIT.FLG<1,PO.LINE> BEFORE DSR.UOM<1,P>
*                    DSR.SERIAL<1,P>=''
                     INS '' BEFORE DSR.SERIAL<1,P>
                     FOR R = 1 TO DCOUNT(RSMAN.RS.NO,VM)
                        IF RSMAN.LINE.NO<1,R> = PO.LINE THEN
                           DSR.SERIAL<1,P,-1> = RSMAN.RS.NO<1,R>
                        END
                     NEXT R
                  END
               END
            NEXT PO.LINE
*
*---- GET MANIFEST WEIGHT
*
*T27928 v Move from below so user can see what is already entered, if any.
         ENTERED = ""
         IF DSR.SERIAL # "" THEN
            NUM.PROD = DCOUNT(DSR.PROD,VM)
            FOR P = 1 TO NUM.PROD
               NUM.SERIAL = DCOUNT(DSR.SERIAL<1,P>,SVM)
               FOR S = 1 TO NUM.SERIAL
                  MATREAD ISTK.REC FROM INV_SERIAL, CONO:DSR.SERIAL<1,P,S> ELSE
                     MAT ISTK.REC = ""
                  END
                  IF DSR.POST.DATE<1,P,S> = "" THEN
                     IF DSR.UOM<1,P> = "LBS" OR DSR.UOM<1,P> = "MSI" THEN
                        ENTERED+=ISTK.QTY.ENTERED
                     END ELSE
                        ENTERED+=ISTK.QTY.ENTERED*100
                     END
                  END
               NEXT S
            NEXT P
         END
         RCV.WGT = ENTERED
**         PRINT @(01,11):@(-4):OCONV(RCV.WGT,"MD2,")"R#13"
**         STRXML:="<ReceivedWeight>": OCONV(RCV.WGT,"MD2"):"</ReceivedWeight>"
*T27928 ^
            IF MANIFESTWGT = "END" THEN
               MAN.NO = ""; TOT.WGT = ""
              RETURN
            END
            TOT.WGT = MANIFESTWGT
	    *T29241 v
**            DSR.SHPMNT.TOT = TOT.WGT ;*38017 
              DSR.SHPMNT.TOT = ICONV(MANIFESTWGT,"MD2")            
            *T29241 ^
**            PRINT @(S$X,S$Y):@(-4):OCONV(TOT.WGT,"MD2,")"R#13" 
**            STRXML:="<TotalWeight>": OCONV(TOT.WGT,"MD2"):"</TotalWeight>"
*T28267 v
            IF MANUAL.ENTRY THEN
               IF VENDERNO = 'END' THEN RETURN
               IF VENDERNO = "" THEN
                  ERRMSG = "** REQUIRED **"; GOTO 99999
               END
               PO.VEND.NO = VENDERNO
               MATREAD VEND.REC FROM VEND,CONO:PO.VEND.NO ELSE
                  ERRMSG='VEND Missing'; GOTO 99999
               END
*
ENT.PO.LINE:   
               IF POLINE = 'END' THEN RETURN
               IF POLINE = "" THEN
                  ERRMSG = "** REQUIRED **"; GOTO 99999
               END
               PO.LINE = POLINE
               LOCATE PO.LINE IN DSR.PO.LINE<1> SETTING SREF ELSE
                  DSR.PO.LINE<1,SREF> = PO.LINE
               END
ENT.PRODUCT:   
               IF PRODUCTNAME = 'END' THEN RETURN
               IF PRODUCTNAME = "" THEN
                  ERRMSG = "** REQUIRED **"; GOTO 99999
               END
               MATREAD INV.REC FROM INVENTORY,CONO:PRODUCTNAME ELSE
                  ERRMSG='Invalid Product ID'
                  GOTO 99999
               END
               MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE ELSE MAT CATG.REC = ""
               IF CATG.TRK.LVL # "S" THEN
                  ERRMSG='Not Serial Product'
                  GOTO 99999
               END
               IF CATG.INV="" OR CATG.ACCRU.LIAB="" OR CATG.AP.ACCT="" THEN
                  ERRMSG='No Accts Setup'
                  GOTO 99999
               END
               IF INV.M.LINE="FNGD" THEN
                  ERRMSG='No FNGD Products'
                  GOTO 99999
               END
               CHG.PROD=0
               IF PO.PROD.NUM<1,PO.LINE> # "" AND PO.PROD.NUM<1,PO.LINE> # PRODUCTNAME THEN
                  ERRMSG='PO Prod Mismatch'
                  GOTO 99999
               END
               DSR.PROD<1,SREF>=PRODUCTNAME
               DSR.UOM<1,SREF>=INV.UNIT<1,1>
               PO.PROD.NUM<1,PO.LINE> = PRODUCTNAME
               PO.UNIT.FLG<1,PO.LINE> = INV.UNIT<1,1>
*********
*---- GET WAREHOUSE
*
ENT.WHSE:      
               BEGIN CASE
                  CASE PO.WHSE<1,PO.LINE> = ""
                     WARE_HOUSE = UPCASE(TRIM(WARE_HOUSE))
                     IF WARE_HOUSE = "" THEN
                        ERRMSG = "** REQUIRED **"; GOTO 99999
                     END
**                     PRINT @(S$X,S$Y):S$VALUE"R#4":
                     MATREAD WHSE.REC FROM WAREHOUSE, CONO:WARE_HOUSE ELSE
                        ERRMSG = "INVALID WHSE"; GOTO 99999
                     END
                     IF PO.LINE = 1 AND NOT(PO.PRESENT) THEN
                        DIV.CODE = WHS.DIV; USER.ID = UPCASE(@LOGNAME); ERRMSG = ''
XYZ<-1> = "BEFORE CALL RFT_SI.CK.DIV.SEC.SUB 2";WRITE XYZ ON CONTROL,"120408"
                        CALL RFT_SI.CK.DIV.SEC.SUB(CONO,DIV.CODE,USER.ID,ERRMSG)
XYZ<-1> = "AFTER CALL RFT_SI.CK.DIV.SEC.SUB 2";WRITE XYZ ON CONTROL,"120408"
                        IF ERRMSG # '' THEN
                           GOTO 99999
                        END
                        PO.DIV.OWNER = WHS.DIV
                     END
                     IF WHS.DIV # PO.DIV.OWNER AND PO.DIV.OWNER # "00" THEN
                        ERRMSG = "DIVISION MISMATCH"; GOTO 99999
                     END
                     WHSE = WARE_HOUSE
                  CASE PO.WHSE<1,PO.LINE> # ""
                     WHSE = PO.WHSE<1,PO.LINE>
                     WARE_HOUSE=WHSE
               END CASE
               LOCATE WARE_HOUSE IN INV.WHSE.CODE<1>,1 SETTING WFND ELSE
                  ERRMSG='WHSE not in PROD'
                  GOTO 99999
               END
**               PRINT @(1,9):WHSE"R#4":
**                STRXML:="<WareHouse>":WARE_HOUSE:"</WareHouse>"
               PO.WHSE<1,PO.LINE> = WARE_HOUSE
               DSR.WHSE<1,SREF> = WARE_HOUSE
********
ENT.UOM:       
********
               IF DSR.UOM<1,SREF> # '' THEN
                  DEFAULT = DSR.UOM<1,SREF>
               END ELSE
                  DEFAULT = INV.UNIT<1,1>
               END
               IF U_O_M = "END" THEN
                  RETURN
               END
               U_O_M = UPCASE(TRIM(U_O_M))
               IF U_O_M = "" THEN
                  ERRMSG = "** REQUIRED **"; GOTO 99999
               END
               LOCATE U_O_M IN INV.UNIT<1>,1 SETTING UFND ELSE
                  ERRMSG='INVALID UOM'; GOTO 99999
               END
               DSR.UOM<1,SREF>=U_O_M
               PO.UNIT.FLG<1,PO.LINE>=U_O_M
*******
ENT.PRICE:     
*******
               LOCATE PO.VEND.NO IN INV.VENDOR<1>,1 SETTING VV ELSE VV=0 
               IF VV THEN PO.GROS.PRICE<1,PO.LINE>=INV.PRICE<1,VV>
               IF PR_ICE = "END" THEN
                  RETURN
               END
               IF PR_ICE = "" THEN
                  ERRMSG = "** REQUIRED **"; GOTO 99999
               END
               PO.GROS.PRICE<1,PO.LINE> = PR_ICE
               DSR.UN.PRICE<1,SREF> = PR_ICE
*
**               CRT @(1,14):CL:'Correct? (Y/N) ':
**               S$TYP=8; S$X=18; S$Y=14; S$MINL=1; S$MAXL=1; S$EX=0; S$EY=14; ERY=14
**               PRINT @(S$X,S$Y):@(-4):
**               GOSUB DRAW.BORDER
**               CALL RF.INPUT
**               CRT @(0,14):CL:
**               IF S$VALUE = 'Y' THEN EXIT
**               S$VALUE='END'
**               MAT PO.REC = ''
**               MAT DSR.REC = ''
**               PO.DIV.OWNER='00'
            END 
*T28267 ^
*T28267 v
*
*---- CALL PO PROD XREF
*
***************
CALL.PROD.XREF: 
***************
         IF NOT(MANUAL.ENTRY) THEN
            MPTR = ''
            IF DCOUNT(DSR.PROD,VM) > 1 THEN
XYZ<-1> = "BEFORE CALL RCV.RF.PROD.XREF 3";WRITE XYZ ON CONTROL,"120408"
**               CALL RCV.RF.PROD.XREF(ACTION,CONO,PO.NO,DSR.PROD,DSR.WHSE,MPTR, MAT RCV.FILE.VARS)
XYZ<-1> = "AFTER CALL RCV.RF.PROD.XREF 3";WRITE XYZ ON CONTROL,"120408"
                 MPTR = SETVALUE
            END ELSE MPTR = 1
            IF MPTR = "" OR MPTR = 'END' THEN GOTO 1080
         END ELSE MPTR = PO.LINE
*T28267 ^
*
*---- PROCESS RECEIVED ROLLS
*
         TODAY = DATE()
         IF DSR.DATE = "" THEN DSR.DATE = TODAY
         ;*T26556 v
         DEF.PERIOD = "";ERR.FLG = "";ERRMSG = ""                              
XYZ<-1> = "BEFORE CALL RFT_CHECK.PERIOD.DATE 4";WRITE XYZ ON CONTROL,"120408"
         CALL RFT_CHECK.PERIOD.DATE(CONO,DSR.DATE,DEF.PERIOD,PO.DIV.OWNER,ERR.FLG,ERRMSG,COMPANY,CONTROL)
XYZ<-1> = "AFTER CALL RFT_CHECK.PERIOD.DATE 4";WRITE XYZ ON CONTROL,"120408"
         BEGIN CASE                           
            CASE ERRMSG = ""                   
               DSR.PERIOD = DEF.PERIOD
            CASE ERR.FLG = 0                   
               DSR.PERIOD = DEF.PERIOD
            CASE 1
         END CASE                             
         ;*T26556 ^
         DSR.VEND = PO.VEND.NO
         DSR.PO   = PO.NO
         MATWRITEU DSR.REC ON DAILY_STOCK, CONO:PO.NO:"!":MAN.NO
         ;*T26556 v
         RSMAN.MAN.NO = MAN.NO
         RSMAN.MAN.TOT.WGT = DSR.SHPMNT.TOT
         RSMAN.ENTRY.DATE = DSR.DATE
         RSMAN.PERIOD = DSR.PERIOD
         MATWRITEU RSMAN.REC ON PO.MAN.XREF, CONO:PO.NO:"!":MAN.NO
         DELETEFLAG = "Y"
         STRXML :="<DeleteFlag>":DELETEFLAG:"</DeleteFlag>"
XYZ<-1> = "STRXML":STRXML;WRITE XYZ ON CONTROL,"120408"
         ;*T26556 ^
200*
         ;*T27071     CALL RCV.RF.RECEIVE.ROLL(ACTION, CONO, EMPID, PO.NO, MAN.NO, WHSE, WLOC, MPTR, MAT DSR.REC, MAT RCV.FILE.VARS, MAT RSMAN.REC)
**         CALL RCV.RF.RECEIVE.ROLL(ACTION, CONO, EMPID, PO.NO, MAN.NO, WHSE, MPTR, MAT DSR.REC, MAT RCV.FILE.VARS, MAT RSMAN.REC, MANUAL.ENTRY)
**         CALL RFT_RCV.RF.RECEIVE.ROLL(CONO, EMPID, PO.NO, MAN.NO, WHSE, MPTR, MAT DSR.REC, MAT RSMAN.REC, MANUAL.ENTRY)
           ERRMSG1 = ''
	   STRXML1 = ''	   
XYZ<-1> = "BEFORE CALL RFT_RCV.RF.RECEIVE.ROLL 5";WRITE XYZ ON CONTROL,"120408"
	   CALL RFT_RCV.RF.RECEIVE.ROLL(CONO, EMPID, PO.NO, MAN.NO, WHSE, MPTR, MAT DSR.REC,MAT RSMAN.REC, MANUAL.ENTRY,ROLLID,MILLID,QUANTITY,LOCATION,STRXML1,ERRMSG1)
XYZ<-1> = "AFTER CALL RFT_RCV.RF.RECEIVE.ROLL 5";WRITE XYZ ON CONTROL,"120408"
	   IF ERRMSG1 # '' THEN
	      ERRMSG = ERRMSG1
           END
	   STRXML:= STRXML1
         RCV.WGT = ""
         ENTERED = ""
RETURN     ;*T29241 Implemented the below part in new subroutine RFT_RECEIVE_DELETE_SERIAL
         NEW.SERIAL=0
         PROD.SER.CNT=0 ;*T27928
         IF DSR.SERIAL # "" THEN
            NUM.PROD = DCOUNT(DSR.PROD,VM)
            FOR P = NUM.PROD TO 1 STEP -1
               NUM.SERIAL = DCOUNT(DSR.SERIAL<1,P>,SVM)
               IF NUM.SERIAL > 0 THEN PROD.SER.CNT += 1 ;*T27928
               FOR S = 1 TO NUM.SERIAL
                  MATREAD ISTK.REC FROM INV_SERIAL, CONO:DSR.SERIAL<1,P,S> ELSE
                     MAT ISTK.REC = ""
                  END
                  IF DSR.POST.DATE<1,P,S> = "" THEN
*                 IF DSR.UOM<1,P> = "LBS" OR DSR.UOM<1,P> = "MSI" THEN
                     IF DSR.UOM<1,P>#'SHT' AND DSR.UOM<1,P>#'FT' AND DSR.UOM<1,P>#'PC' THEN
                        ENTERED+=ISTK.QTY.ENTERED
                     END ELSE
                        ENTERED+=ISTK.QTY.ENTERED*100
                     END
                  END
*T27928 v
                  IF NUM(DSR.SERIAL<1,P,S>) THEN
                     LOCATE DSR.SERIAL<1,P,S> IN RSXRF.RS.NO<1>,1 BY 'AR' SETTING SPTR ELSE
                        INS DSR.SERIAL<1,P,S> BEFORE RSXRF.RS.NO<1,SPTR>
                        INS DSR.PO.LINE<1,P> BEFORE RSXRF.LN.NO<1,SPTR>
                     END
                  END ELSE
                     LOCATE DSR.SERIAL<1,P,S> IN RSXRF.RS.NO<1>,1 BY 'AL' SETTING SPTR ELSE
                        INS DSR.SERIAL<1,P,S> BEFORE RSXRF.RS.NO<1,SPTR>
                        INS DSR.PO.LINE<1,P> BEFORE RSXRF.LN.NO<1,SPTR>
                     END
                  END
                  MATWRITEU RSXRF.REC ON PO.RSKI.XREF,CONO:PO.NO
*T27928 ^
               NEXT S
* IF NUM.SERIAL = 0 THEN DELETE THE DSR DATA FOR PRODUCT (HERE)
               IF NUM.SERIAL = 0 THEN
*                 DEL DSR.PO.LINE<1,P>
*                 DEL DSR.PROD<1,P>
*                 DEL DSR.WHSE<1,P>
*                 DEL DSR.UN.PRICE<1,P>
*                 DEL DSR.UOM<1,P>
                  DEL DSR.SERIAL<1,P>
*                 NUM.PROD -= 1 ;*T27928
               END
            NEXT P
*           IF PROD.SER.CNT < NUM.PROD THEN GOTO CALL.PROD.XREF ;*T27928
         END
1080*
         RCV.WGT = ENTERED
         IF TRIM(DSR.SERIAL) = "" THEN
            DELETE DAILY_STOCK, CONO:PO.NO:"!":MAN.NO
            DELETE PO.MAN.XREF, CONO:PO.NO:"!":MAN.NO
         END ELSE
            IF PO.PRESENT THEN ;*T28267
               LOCATE MAN.NO IN PO.MAN<1>,1 SETTING PINDX ELSE
                  PO.MAN = INSERT(PO.MAN,1,PINDX,0,MAN.NO)
                  MATWRITEU PO.REC ON PO,CONO:PO.NO
               END
            END ELSE RELEASE PO,CONO:PO.NO
         END
*T27928 v         
*T27928 ^
1090 *
   RETURN
*
* END SUBROUTINE
*
99999*
     RETURN
END
