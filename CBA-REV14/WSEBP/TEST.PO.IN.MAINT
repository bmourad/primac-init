SUBROUTINE PO.IN.MAINT(INPUTSTR,OPTION,ERRMSG,STRXML)
STRXML = ""
DEBUG
CONO = 001
OPTION = "WHSE"
PO.CODE = 2144 
INPUTSTR = "02"
*PO.PROD.NUM = "SKID1-SFS-SHT"
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE ICS.CPYLIB INV.STATS
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE PMC.CPYLIB DIVISION
$INCLUDE PMC.CPYLIB PO
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE PMC.CPYLIB TERMS
$INCLUDE PMC.CPYLIB SHIP.VIA
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV.JOB.STATS
$INCLUDE PMC.CPYLIB VEND
$INCLUDE CPYLIB CHAR
OPEN '','COMPANY' TO COMPANY ELSE ERRMSG = 'COMPANY FILE IS MISSING'; GOTO 91000
OPEN '','INVENTORY' TO INVENTORY ELSE ERRMSG = 'INVENTORY FILE IS MISSING'; GOTO 91000
OPEN '','DIVISION' TO DIVISION ELSE ERRMSG = 'DIVISION FILE IS MISSING'; GOTO 91000
OPEN '','TERMS' TO TERMS ELSE ERRMSG = 'TERMS FILE IS MISSING'; GOTO 91000
OPEN '','PO' TO PO ELSE ERRMSG = 'PO FILE IS MISSING'; GOTO 91000
OPEN '','WAREHOUSE' TO WAREHOUSE ELSE ERRMSG = 'WAREHOUSE FILE IS MISSING'; GOTO 91000
OPEN '','INV.WHSE' TO INV.WHSE ELSE ERRMSG = 'INV.WHSE IS MISSING'; GOTO 91000
OPEN '','INV.JOB.STATS' TO INV.JOB.STATS ELSE ERRMSG = 'INV.JOB.STATS FILE IS MISSING'; GOTO 91000
OPEN '','CATEGORY' TO CATEGORY ELSE ERRMSG = 'CATEGORY FILE IS MISSING'; GOTO 91000
OPEN '','VEND' TO VEND ELSE ERRMSG = 'VENDOR FILE IS MISSING'; GOTO 91000
OPEN '','SHIP.VIA' TO SHIP.VIA ELSE ERRMSG = 'SHIP.VIA FILE IS MISSING'; GOTO 91000
  MATREAD COMP.REC FROM COMPANY,CONO ELSE
      ERRMSG=CONO:"- THIS COMPANY NUMBER DOES NOT EXIST"
      GOTO 91000
  END
  MAT INV.CNV.REC = ""
  DIFF.UM= ""
  DESC.INV = ""
  TOT.J.OPEN = 0
 COMMENTS =""; WHSE="";UPRICE="";PREV.PROD="";PREV.WHSE="";ROLLS=""
DELDATE = "";*PROD=""
  LN = 1
  MATREAD PO.REC FROM PO, CONO:PO.CODE ELSE MAT PO.REC = ''
  BEGIN CASE
    CASE OPTION = "PROD"
        GOSUB 100
    CASE OPTION = "WHSE"
        GOSUB 101
    CASE OPTION = "DELDATE"
        GOSUB 102
    CASE OPTION = "UPRICE"
        GOSUB 103
    CASE OPTION = "DISC"
        GOSUB 104
    CASE OPTION = "UNITS"
        GOSUB 105
    CASE OPTION = "QTYORDER"
        GOSUB 106
    CASE OPTION = "QTYCANCEL"
        GOSUB 107
    CASE OPTION = "QTYOPEN"
        GOSUB 108
    CASE OPTION = "ROLLS"
        GOSUB 109
    CASE OPTION = "COMMENTS"
        GOSUB 110
  END CASE 
RETURN
*****ENTER PRODUCT****
100*
  VALUE = INPUTSTR
  MATREAD INV.REC FROM INVENTORY, CONO:VALUE ELSE
    ERRMSG = "INVENTORY (":VALUE:") IS NOT ON FILE."
    GOTO 91000
  END
  IF INV.M.LINE = 'FNGD' THEN
    IF CO.OPS = 'Y' THEN
      ERRMSG = "FINISHED GOODS PRODUCTS ARE INVALID FOR REGULAR PO'S"
      GOTO 91000
    END
  END
  MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
    ERRMSG = "CATEGORY (":INV.LINE:") IS NOT ON FILE."
    GOTO 91000
  END
  IF INV.PAP.TYPE = "REGULAR" OR INV.PAP.TYPE = "REG" OR INV.PAP.TYPE = "" THEN
    PO.PROD.TYPE<1,1> = "REG"
  END ELSE
    PO.PROD.TYPE<1,1> = INV.PAP.TYPE
  END
  IF PO.PROD.NUM<1,1> # "" AND PO.PROD.NUM<1,1> # VALUE THEN
    PO.UNIT.FLG<1,1> = ""
    PO.JB.UNITS<1,1> = ""
  END
  STRXML := '<ProductId>' :VALUE: '</ProductId>'
  STRXML := '<ProductDesc>' :INV.FULL.DESC: '</ProductDesc>'
  PO.PROD.NUM<1,1> = VALUE
  DESC.INV<1,1> = INV.FULL.DESC
*GOTO 108
RETURN
****** INPUT WHSE*****
101*
  WHSENO = INPUTSTR
  PO.WHSE<1,1> = WHSENO
  INV.WHSE.KEY = CONO:PO.PROD.NUM<1,1>:"!":PO.WHSE<1,1>
  IF CO.INTR.WHSE # '' AND PO.WHSE<1,LN> = CO.INTR.WHSE THEN
    ERRMSG = 'CAN NOT APPLY, USING AN INTER-DIVISIONAL WHSE IS RESTRICTED'
    GOTO 91000
  END
  MATREAD IWH.REC FROM INV.WHSE , INV.WHSE.KEY ELSE
    ERRMSG = "INV.WHSE RECORD NOT ON FILE"
    GOTO 91000
  END
  MATREAD WHSE.REC FROM WAREHOUSE, CONO:PO.WHSE<1,1> ELSE
    ERRMSG = "WAREHOUSE RECORD NOT ON FILE"
    GOTO 91000
  END
  IF WHS.DIV # PO.DIV.OWNER AND PO.DIV.OWNER # "00" THEN
    ERRMSG = "Warehouse Division does not match the Owning Division"
    GOTO 91000
  END
  LOCATE PO.VEND.NO IN INV.VENDOR<1>,1 SETTING VV ELSE VV = 0
*  IF VV THEN PO.GROS.PRICE<1,LN> = INV.PRICE<1,VV>
  IF VV AND PO.GROS.PRICE<1,1>+0=0 THEN PO.GROS.PRICE<1,1> = INV.PRICE<1,VV>
  STRXML := '<WhseNo>' :PO.WHSE<1,1>: '</WhseNo>'
RETURN
******DELEVERY DATE ****
102*
  DELDATE = INPUTSTR
  PO.DEL.DATE<1,1> = OCONV(DELDATE ,"D2/")
  STRXML :='<DelDate>' :PO.DEL.DATE<1,1>: '</DelDate>'
RETURN
*******INPUT GROSS PRICE ****
103*
  UPRICE = INPUTSTR
  PO.GROS.PRICE<1,1> = OCONV(UPRICE,"MD4")
  STRXML := '<UnitPrice>' :PO.GROS.PRICE<1,1> : '</UnitPrice>'
RETURN
*******	INPUT DISC ****
104*
  DICS = INPUTSTR
  PO.DISCOUNT<1,1> = OCONV(DICS,"MD2")
  STRXML := '<Discount>' :PO.DISCOUNT<1,1> : '</Discount>'
RETURN
*******	INPUT UNITS ****
105*
  IF PO.UNIT.FLG<1,1> # "" THEN
     IF PO.UNIT.FLG<1,1> # INV.UNIT<1,2> THEN
	UNITS = PO.JB.UNITS<1,1>
     END ELSE 
	UNITS = PO.JB.UNITS<1,1>
     END
  END
  PO.JB.UNITS<1,1> = INV.UNIT<1,2>
  IF INV.UNIT<1,2> = INV.UNIT<1,1> THEN
     PO.UNIT.FLG<1,1> = INV.UNIT<1,1>
     UNITS = PO.UNIT.FLG<1,1>
     GOSUB 4000
  END
  IF PO.PROD.TYPE<1,1> = "REG" THEN
    PO.UNIT.FLG<1,1> = INV.UNIT<1,1>
    GOTO 1065
  END
  PO.UNIT.FLG<1,1> = UNITS
1065*
  GOSUB 4000
  IF DIFF.UM<1> = "Y" THEN
    UNITS = PO.JB.UNITS<1,1>
  END
RETURN
**** INPUT QTY ORDERED
106*
  LINES = DCOUNT(PO.PROD.NUM,@VM)
  FOR LN = 1 TO LINES
*  PREV.TOT.ONORD = PO.TOT.ONORD<1,LN>
  VALUE = INPUTSTR
  IF DIFF.UM<LN> = "Y" THEN
     IF ICR.CNV<LN,2> = "MD0" THEN
	VALUE = ICONV(((VALUE/ICR.MT1<LN,2>)*ICR.DV1<LN,2>)*ICR.DV2<LN,2>,'MD0')
     END
     IF ICR.CNV<LN,1> = "MD0" THEN
       IF ICR.CNV<LN,2> # "MD0" THEN
	 VALUE = VALUE * 10
       END
       VALUE = ICONV(((VALUE/ICR.DV1<LN,1>)*ICR.MT1<LN,1>)/ICR.DV2<LN,1>,'MD0') "R#11"
     END ELSE
       VALUE = VALUE * ICR.MT1<LN,1> * 10
       VALUE = OCONV(INT(VALUE/10) , "MD2") "R#11"
     END
     IF ICR.CNV<LN,2> = "MD0" THEN
       VALUE = ICONV(((VALUE/ICR.DV1<LN,2>)*ICR.MT1<LN,2>)/ICR.DV2<LN,2>,'MD0') "R#11"
     END ELSE
       IF ICR.CNV<LN,1> = "MD0" THEN
	  VALUE = OCONV(INT(VALUE/10), "MD2") "R#11"
       END ELSE
	  VALUE = OCONV(INT((VALUE/10)/ICR.MT1<LN,1>), "MD2") "R#11"
       END
     END
  END ELSE
     IF ICR.CNV<LN,1> = "MD0" THEN
       VALUE = ICONV(((VALUE/ICR.MT1<LN,1>)*ICR.DV1<LN,1>)*ICR.DV2<LN,1>,'MD0')
     END ELSE
       VALUE = VALUE * 10
     END
  END
  IF PO.TOT.RECEVED<1,LN>+0 # 0 THEN
    IF VALUE - (PO.TOT.RECEVED<1,LN> + PO.TOT.CANCEL<1,LN>) # 0 THEN
      IF DIFF.UM<LN> = 'Y' THEN
	IF (INV.UNIT<1,2>='PC' OR INV.UNIT<1,2>='FT') AND INV.UNIT<1,3>='MSI' THEN
	  TEST.OPEN = ABS(VALUE - PO.TOT.RECEVED<1,LN> - PO.TOT.CANCEL<1,LN>)
	  IF TEST.OPEN < 50 THEN PO.TOT.CANCEL<1,LN> = VALUE - PO.TOT.RECEVED<1,LN>
	END
      END
    END
  END
  IF VALUE < PO.TOT.RECEVED<1,LN> + PO.TOT.CANCEL<1,LN> AND PO.TOT.RECEVED<1,LN> > 0 THEN
    ERRMSG = "TOTAL QUANTITY ORDERED CAN'T BE LESS THAN QUANTITY RECEIVED" 
    GOTO 91000
  END
  IF VALUE - TOT.J.OPEN < 0 THEN
    ERRMSG = "QUANTITY OPEN MUST NOT BE LESS THAN OPEN JOBS ALLOCATION" 
    GOTO 91000
  END
  PO.TOT.ONORD<1,LN> = VALUE
  STRXML := '<QtyOrder>' :PO.TOT.ONORD<1,LN>: '</QtyOrder>'
  NEXT LN
RETURN
**** INPUT QTY CANCEL***
107*
  QTYCANCEL = INPUTSTR
  LINES = DCOUNT(PO.PROD.NUM,@VM)
  FOR LN = 1 TO LINES
  IF DIFF.UM<LN> = "Y" THEN
    IF ICR.CNV<LN,2> = "MD0" THEN
      QTYCANCEL = ICONV(((QTYCANCEL/ICR.MT1<LN,2>)*ICR.DV1<LN,2>)*ICR.DV2<LN,2>,'MD0')
    END
    IF ICR.CNV<LN,1> = "MD0" THEN
      IF ICR.CNV<LN,2> # "MD0" THEN
	QTYCANCEL = QTYCANCEL * 10
      END
      IF (INV.UNIT<1,2> = 'PC' OR INV.UNIT<1,2> = 'FT') AND INV.UNIT<1,3> = 'MSI' THEN
	TEST.OPEN = PO.TOT.ONORD<1,LN> - PO.TOT.RECEVED<1,LN>
	IF ABS(TEST.OPEN-QTYCANCEL) < 50 THEN QTYCANCEL = TEST.OPEN
      END
      QTYCANCEL= ICONV(((QTYCANCEL/ICR.DV1<LN,1>)*ICR.MT1<LN,1>)/ICR.DV2<LN,1>,'MD0') "R#11"
    END ELSE
      QTYCANCEL = QTYCANCEL * ICR.MT1<LN,1> * 10
      QTYCANCEL = OCONV(INT(QTYCANCEL/10) , "MD2") "R#11"
    END
    IF ICR.CNV<LN,2> = "MD0" THEN
      QTYCANCEL = ICONV(((QTYCANCEL/ICR.DV1<LN,2>  )*ICR.MT1<LN,2>)/ICR.DV2<LN,2>,'MD0') "R#11"
    END ELSE
      IF ICR.CNV<LN,1> = "MD0" THEN
	QTYCANCEL = OCONV(INT(QTYCANCEL/10), "MD2") "R#11"
      END ELSE
	QTYCANCEL = OCONV(INT((QTYCANCEL/10)/ICR.MT1<LN,1>), "MD2") "R#11"
      END
    END
  END ELSE
    IF ICR.CNV<LN,1> = "MD0" THEN
      QTYCANCEL = ICONV(((QTYCANCEL/ICR.MT1<LN,1>)*ICR.DV1<LN,1>)*ICR.DV2<LN,1>,'MD0')
    END ELSE
      QTYCANCEL = QTYCANCEL * 10
    END
  END
  TEST.OPEN = PO.TOT.ONORD<1,LN> - QTYCANCEL - PO.TOT.RECEVED<1,LN>
  IF ABS(TEST.OPEN) <= 50 THEN
    QTYCANCEL += TEST.OPEN
    TEST.OPEN = 0
  END
  IF QTYCANCEL # PO.TOT.CANCEL<1,LN> AND TEST.OPEN < 0 THEN
    ERRMSG = "QTY CANCELLED SHOULD BE LESS THAN OR EQUAL TO QTY OPEN"
    GOTO 91000
  END
  IF TEST.OPEN - TOT.J.OPEN < 0 THEN
    ERRMSG = "QUANTITY OPEN MUST NOT BE LESS THAN OPEN JOBS ALLOCATION"
    GOTO 91000
  END
  PO.TOT.CANCEL<1,LN> = QTYCANCEL
  STRXML := '<QtyCancel>' :PO.TOT.CANCEL<1,LN>: '</QtyCancel>'
  GOSUB 2000  
  NEXT LN
RETURN
********* PRINT OPEN QTYS **
108*
  VALUE = INPUTSTR
  LINES = DCOUNT(PO.PROD.NUM,@VM)
  FOR LN = 1 TO LINES
  IF PO.TOT.RECEVED<1,LN> = PO.PREV.RECEVED<1,LN> THEN
    IF DIFF.UM<LN> = "Y" THEN
      IF ICR.CNV<LN,2> = "MD0" THEN
	VALUE = ICONV(((VALUE/ICR.MT1<LN,2>)*ICR.DV1<LN,2>)*ICR.DV2<LN,2>,'MD0')
      END
      IF ICR.CNV<LN,1> = "MD0" THEN
	IF ICR.CNV<LN,2> # "MD0" THEN
	  VALUE = VALUE * 10
	END
      END ELSE
	VALUE = VALUE * ICR.MT1<LN,1> * 10 
      END
      IF ICR.CNV<LN,2> = "MD0" THEN
	VALUE = ICONV(((VALUE/ICR.DV1<LN,2>)*ICR.MT1<LN,2>)/ICR.DV2<LN,2>,'MD0') "R#11"
      END ELSE
	IF ICR.CNV<LN,1> = "MD0" THEN
	  VALUE = OCONV(INT(VALUE/10), "MD2") "R#11"
	END ELSE
	  VALUE = OCONV(INT((VALUE/10)/ICR.MT1<LN,1>), "MD2") "R#11" 
	END
      END
    END ELSE
      IF ICR.CNV<LN,1> = "MD0" THEN
	VALUE = ICONV(((VALUE/ICR.MT1<LN,1>)*ICR.DV1<LN,1>)*ICR.DV2<LN,1>,'MD0')
      END ELSE
	VALUE = VALUE * 10
      END
    END
    IF VALUE > (PO.TOT.ONORD<1,LN> - PO.TOT.CANCEL<1,LN>) THEN
      ERRMSG = "QTY OPEN CANNOT BE GREATER THAN QTY ORDERED"
      GOSUB 91000
    END
    IF VALUE - TOT.J.OPEN < 0 THEN
      ERRMSG = "QUANTITY OPEN MUST NOT BE LESS THAN OPEN JOBS ALLOCATION" ; GOSUB 91000 
    END
    PO.PREV.RECEVED<1,LN> = PO.TOT.ONORD<1,LN> - (VALUE + PO.TOT.CANCEL<1,LN>)
    PO.TOT.RECEVED<1,LN> = PO.PREV.RECEVED<1,LN>
    PO.QTY.OPEN<1,LN> = VALUE
  END
  IF PO.PREV.RECEVED<1,LN> * 1 = 0 THEN GOSUB 2000
  IF PREV.WHSE # "" AND PREV.WHSE # PO.WHSE<1,LN> THEN
    PD.PROD<1,-1> = PREV.PROD
    PD.WHSE<1,-1> = PREV.WHSE
  END
  STRXML := '<QtyOpen>' :PO.QTY.OPEN<1,LN> : '</QtyOpen>'
  NEXT LN
RETURN
****** ROLLS
109*
     ROLLS = INPUTSTR
     PO.NO.OF.ROLLS<1,LN> = ROLLS
     STRXML := '<Rolls>' :PO.NO.OF.ROLLS<1,LN>: '</Rolls>'
********COMMENTS *********
110*
    COMMENTS = INPUTSTR
    PO.ITEM.COMM<1,LN> = COMMENTS
    STRXML := '<Comments>' :PO.ITEM.COMM<1,LN>: '</Comments>'
**********CALCULATE  OPEN QTY
2000*
    VALUE = PO.TOT.ONORD<1,LN> - (PO.TOT.RECEVED<1,LN> + PO.TOT.CANCEL<1,LN> )
    PO.QTY.OPEN<1,LN> = VALUE
    IF ICR.CNV<LN,1> = "MD0" THEN
       VALUE = INT(((VALUE/ICR.DV1<LN,1>)*ICR.MT1<LN,1>)/ICR.DV2<LN,1> + .5) "R#11"
    END ELSE
       VALUE = OCONV(INT(VALUE/10), "MD2") "R#11"
    END
    IF DIFF.UM<LN> = "Y" THEN
       IF ICR.CNV<LN,2> = "MD0" THEN
	  VALUE = OCONV(INT(((VALUE/ICR.DV1<LN,2>)*ICR.MT1<LN,2>)/ICR.DV2<LN,2> + .5), ICR.CNV<LN,2>) "R#11" 
       END ELSE
	  IF ICR.CNV<LN,1> = "MD0" THEN
	     VALUE = OCONV(INT(VALUE/10), "MD2") "R#11" 
	  END ELSE
	     VALUE = OCONV(INT((VALUE/10)/ICR.MT1<LN,1>), "MD2") "R#11"
	  END
       END
    END
RETURN
**** GET CONVERSIONS
4000*
  N= 1
  LN = N
  BEGIN CASE
    CASE INV.UNIT<1,2> = "SHT" AND INV.UNIT<1,3> = "LBS"
      ICR.CNV<LN,1> = "MD0"; ICR.DV2<LN,1> = 1
      ICR.DV1<LN,1> = INV.M.WT; ICR.MT1<LN,1> = 1
    CASE INV.UNIT<1,2> = "PC" AND INV.UNIT<1,3> = "MSI"
      ICR.CNV<LN,1> = "MD0"; ICR.DV2<LN,1> = 1
      ICR.DV1<LN,1> = INV.PAP.WIDTH/100; ICR.MT1<LN,1> = 10
    CASE INV.UNIT<1,2> = "FT" AND INV.UNIT<1,3> = "MSI"
      ICR.CNV<LN,1> = "MD0"; ICR.DV2<LN,1> = 12
      ICR.DV1<LN,1> = INV.PAP.WIDTH/100; ICR.MT1<LN,1> = 100
    CASE 1
      ICR.CNV<LN,1> = "MD2"; ICR.DV2<LN,1> = 1      ICR.DV1<LN,1> = 10; ICR.MT1<LN,1> = INV.SBR
  END CASE
  BEGIN CASE
    CASE PO.UNIT.FLG<1,LN> = "SHT" AND INV.UNIT<1,3> = "LBS"
      ICR.CNV<LN,2> = "MD0"; ICR.DV2<LN,2> = 1
      ICR.DV1<LN,2> = INV.M.WT; ICR.MT1<LN,2> = 1
    CASE PO.UNIT.FLG<1,LN> = "PC" AND INV.UNIT<1,3> = "MSI"
      ICR.CNV<LN,2> = "MD0"; ICR.DV2<LN,2> = 1
      ICR.DV1<LN,2> = INV.PAP.WIDTH/100; ICR.MT1<LN,2> = 10
    CASE PO.UNIT.FLG<1,LN> = "FT" AND INV.UNIT<1,3> = "MSI"
      ICR.CNV<LN,2> = "MD0"; ICR.DV2<LN,2> = 12
      ICR.DV1<LN,2> = INV.PAP.WIDTH/100; ICR.MT1<LN,2> = 100
    CASE 1
      ICR.CNV<LN,2> = "MD2"; ICR.DV2<LN,2> = 1
      ICR.DV1<LN,2> = 10; ICR.MT1<LN,2> = 1
  END CASE
  IF PO.UNIT.FLG<1,LN> # INV.UNIT<1,2> THEN DIFF.UM<LN> = "Y" ELSE DIFF.UM<LN> = "N"
RETURN
91000*
RETURN
