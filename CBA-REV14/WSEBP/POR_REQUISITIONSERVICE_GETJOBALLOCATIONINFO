SUBROUTINE POR_REQUISITIONSERVICE_GETJOBALLOCATIONINFO(CONO,INPUT,ERRMSG,STRXML,SCHEMA.ONLY)
SCHEMA.ONLY = 1
$INCLUDE PMC.CPYLIB PO 
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE PMC.CPYLIB DIVISION
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE ICS.CPYLIB PO.RSKI.XREF
$INCLUDE JCS.CPYLIB JOB
$INCLUDE PMC.CPYLIB DEPARTMENT
$INCLUDE PMC.CPYLIB COST.CNTR
$INCLUDE POS.CPYLIB APP.REQ
$INCLUDE PMC.CPYLIB CUSTOMER
$INCLUDE CPYLIB CHAR
*
DEFFUN PRIDGET_UOM_CONVERSION_CALC(QTY,FROM.UOM,TO.UOM,WGT,WIDTH,ROND,LN)
OPEN '','COMPANY' TO COMPANY ELSE ERRMSG = 'COMPANY FILE IS MISSING'; GOTO 93000
OPEN '','CONTROL' TO CONTROL ELSE ERRMSG = 'CONTROL FILE IS MISSING'; GOTO 93000
OPEN '','INVENTORY' TO INVENTORY ELSE ERRMSG = 'INVENTORY FILE IS MISSING'; GOTO 93000
OPEN '','CATEGORY' TO CATEGORY ELSE ERRMSG = 'INVENTORY FILE IS MISSING'; GOTO 93000
OPEN '','INV.WHSE' TO INV.WHSE ELSE ERRMSG = 'INV.WHSE FILE IS MISSING'; GOTO 93000
OPEN '','WAREHOUSE' TO WAREHOUSE ELSE ERRMSG = 'WAREHOUSE FILE IS MISSING'; GOTO 93000
OPEN 'PO.RSKI.XREF' TO PO.RSKI.XREF ELSE ERRMSG = 'PO.RSKI.XREF FILE IS MISSING'; GOTO 93000
OPEN 'JOB' TO JOB ELSE ERRMSG = 'JOB FILE IS MISSING'; GOTO 93000
OPEN '','REG.REQ' TO REG.REQ ELSE ERRMSG = 'REG.REQ FILE IS MISSING'; GOTO 93000
OPEN '','CUSTOMER' TO CUSTOMER ELSE ERRMSG = 'CUSTOMER FILE IS MISSING'; GOTO 93000
OPEN '','DEPARTMENT' TO DEPARTMENT ELSE ERRMSG = 'DEPARTMENT FILE IS MISSING'; GOTO 93000
OPEN '','DEPARTMENT' TO DEPARTMENT ELSE ERRMSG = 'DEPARTMENT FILE IS MISSING'; GOTO 93000
OPEN '','COST.CNTR' TO COST.CNTR ELSE ERRMSG = 'COST.CNTR FILE IS MISSING'; GOTO 93000
OPEN '','APP.REQ' TO APP.REQ ELSE ERRMSG = 'APP.REQ FILE IS MISSING'; GOTO 93000
*
UNKNOWN = "??????????"
MAT APP.REQ.REC = ""
MAT PO.REC = ""
BAL.ORD = 0 ; BAL.REC = 0 ; BAL.OPEN = 0
TOT.ORD = 0 ; TOT.REC = 0 ; TOT.OPEN = 0
STRXML = "<JobAllocation>"
MATREAD COMP.REC FROM COMPANY, CONO ELSE
    ERRMSG = "COMPANY (":CONO:") DOES NOT EXIST"
    GOTO 93000
END
LN = INPUT<2> ;*ITEM ALLOCATION LINE NO.
IF INDEX(INPUT<1>,"!",1) > 0 THEN
 INPUT_UOM = FIELD(INPUT<1>,"!",2)
 INPUT<1> = FIELD(INPUT<1>,"!",1)
END
**** ENTER PRODUCT
MATREAD INV.REC FROM INVENTORY, CONO:INPUT<3> ELSE
    ERRMSG = "INVENTORY (":VALUE<3>:") IS NOT ON FILE."
    GOTO 93000
END
MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
    ERRMSG = "CATEGORY (":INV.LINE:") IS NOT ON FILE."
    GOTO 93000
END
STRXML := "<CATG.TRACK.QOH>":CATG.TRACK.QOH:"</CATG.TRACK.QOH>"
 IF INV.PAP.TYPE = "REGULAR" OR INV.PAP.TYPE = "REG" OR INV.PAP.TYPE = "" THEN
    PO.PROD.TYPE<1,LN> = "REG"
  END ELSE
    PO.PROD.TYPE<1,LN> = INV.PAP.TYPE
  END
  PO.JB.UNITS<1,LN> = INV.UNIT<1,2>
  IF INV.UNIT<1,2> = INV.UNIT<1,1> THEN
    PO.UNIT.FLG<1,LN> = INV.UNIT<1,1>
    GOTO 1070
  END
  IF PO.PROD.TYPE<1,LN> = "REG" THEN
    PO.UNIT.FLG<1,LN> = INV.UNIT<1,1>
  END ELSE
    IF INPUT_UOM # "" THEN
       PO.UNIT.FLG<1,LN> = INPUT_UOM
    END ELSE
       PO.UNIT.FLG<1,LN> = INV.UNIT<1,1>
    END
  END
1070
  BEGIN CASE
     CASE INPUT<1> = 'JOBLINE'
             DIV = INPUT<4>
      IF CO.PO.REQ.FLAG = "Y" THEN
         OPEN '','APP.REQ' TO APP.REQ ELSE ERRMSG = 'APP.REQ FILE IS MISSING'; GOTO 93000
         USER.ID = UPCASE(@LOGNAME)
         MATREAD APP.REQ.REC FROM APP.REQ,CONO:USER.ID:"!":DIV ELSE MAT APP.REQ.REC = ""
         *MATREAD PO.REC FROM REG.REQ, CONO:INPUT<4> ELSE MAT PO.REC = ""
         READV PO.APP.LEVEL FROM REG.REQ,CONO:INPUT<5>,83 ELSE PO.APP.LEVEL = ""
     END
	      PO.JB.ONORD = INPUT<6>
	      PO.JB.RECEVED = INPUT<7>
	      PO.JB.OPEN = INPUT<8>
	      PO.TOT.ONORD = INPUT<9>
	      PO.TOT.CANCEL = INPUT<10>
	      PO.QTY.OPEN = INPUT<11>
		BEGIN CASE 
		CASE PO.APP.LEVEL = ""  
			GO.BACK = 0
		CASE PO.APP.LEVEL < APP.PO.LEVEL 
			GO.BACK = 1
		CASE PO.APP.LEVEL = "C" 
			GO.BACK = 1           
		CASE 1
			GO.BACK = 0
		END CASE
		IF (GO.BACK) THEN 
			ERRMSG = "There are no jobs to be displayed."
			GOTO 93000
		END
		GOSUB 4000
		GOSUB 15000
		GOSUB 16000
		GOSUB 17000
		GOSUB 1111
		GOSUB 1020
		IF BAL.ORD <= 0 THEN 
			ERRMSG = "CANNOT MODIFIED"
			GOTO 93000
		END
      CASE INPUT<1> = 'JOBNO'
      	      PO.WHSE<1,LN> = INPUT<4>
	      PO.DEL.DATE<1,LN> = ICONV(INPUT<5>,'D2/')
	      VALUE = INPUT<6>
	      MATREAD JOB.REC FROM JOB , CONO:VALUE ELSE
		 ERRMSG = "JOB NUMBER (":VALUE:") NOT ON FILE" ;GOTO 93000
	      END
	      MATREAD WHSE.REC FROM WAREHOUSE, CONO:PO.WHSE<1,LN> ELSE MAT WHSE.REC = ''
	      IF JOB.DIV # WHS.DIV AND WHS.DIV # "00" THEN 
		 ERRMSG = "JOB ":VALUE:" HAS A DIFFERENT DIVISION THAN THE PRODUCT"
		 GOTO 93000
	      END
	      IF JOB.TRACK.DATE<1,4> < PO.DEL.DATE<1,LN> THEN
		 ERRMSG = "JOB DUE DATE HAS ALREADY PASSED"
		 GOTO 93000
	      END
	      IF INV.CUST # "" THEN
		 IF "X":JOB.CUST # "X":INV.CUST THEN
		    ERRMSG = "THIS INVENTORY IS OWNED BY CUSTOMER ":INV.CUST
		    GOTO 93000
		 END
	      END
	1002*
	      PO.JOB.NO<1,LN> = VALUE
	      MATREAD CUST.REC FROM CUSTOMER , CONO:JOB.CUST ELSE
		 CUST.NAME = UNKNOWN
	      END
	   LINE.CUST<1,LN> = JOB.CUST
	   DESC.LINE<1,LN> = CUST.NAME
           STRXML := "<PO.JOB.CUST>":JOB.CUST:"</PO.JOB.CUST>"
	   STRXML := "<PO.JOB.CUST.DESC>":CUST.NAME:"</PO.JOB.CUST.DESC>"
	   STRXML := "<CO.PSS>":CO.PSS:"</CO.PSS>"
      CASE INPUT<1> = 'DEPARTMENT'
        PO.JOB.NO = INPUT<4>
	VALUE = INPUT<5>
	MATREAD JOB.REC FROM JOB , CONO:PO.JOB.NO ELSE
	  ERRMSG = "JOB NUMBER (":VALUE:") NOT ON FILE" ;GOTO 93000
	END
        IF VALUE # '' THEN
          MATREAD DEPT.REC FROM DEPARTMENT, CONO:VALUE ELSE
            ERRMSG='DEPARTMENT ':VALUE:' IS INVALID'
            GOTO 93000
          END
          LOCATE JOB.DIV IN DEPT.DIV<1>,1 SETTING FDDV ELSE FDDV = 0
          IF FDDV = 0 THEN
            ERRMSG='DEPARTMENT NOT VALID FOR JOB DIVISION'
            GOTO 93000
          END
        END
        PO.JB.DEPT<1,LN> = VALUE
      CASE INPUT<1> = 'CCTR'
    	 VALUE = INPUT<4>
         PO.JB.DEPT<1,LN> = INPUT<5>
         IF VALUE # '' THEN
            MATREAD CCTR.REC FROM COST.CNTR, CONO:VALUE ELSE
               ERRMSG='COST.CNTR ':VALUE:' IS INVALID'
               GOTO 93000
            END
            IF CCTR.DEPT[1,2] # PO.JB.DEPT<1,LN> THEN
               ERRMSG='INCORRECT DEPARTMENT FOR COST CENTER ':VALUE
               GOTO 93000
            END
         END
      PO.JB.CCTR<1,LN> = VALUE
      STRXML := "<PO.JB.UNITS>":INV.UNIT<1,2>:"</PO.JB.UNITS>"
      CASE INPUT<1> = 'JOBORD'
	      MATREAD JOB.REC FROM JOB , CONO:INPUT<10> ELSE
		 ERRMSG = "JOB NUMBER (":INPUT<10>:") NOT ON FILE" ;GOTO 93000
	      END
	      PO.JB.ONORD = INPUT<4>
	      DEFAULT = PO.JB.ONORD
	      PO.JB.RECEVED = INPUT<5>
	      *PO.JB.OPEN = INPUT<6>
	      PO.TOT.ONORD = INPUT<6>
	      PO.TOT.CANCEL = INPUT<7>
	      PO.QTY.OPEN = INPUT<8>
		GOSUB 4000
		GOSUB 15000
		GOSUB 16000
		GOSUB 17000
		GOSUB 1111
		GOSUB 1020
	      VALUE = INPUT<9>
	   CCNV = "MD0"
	   IF ICR.CNV # "" THEN CCNV = ICR.CNV
	   *DFLT = ICONV(DEFAULT,CCNV)
	   DFLT = DEFAULT
	   IF JOB.STATUS<1,1> > 3 AND JOB.STATUS<1,1> # 5 AND VALUE GT DFLT THEN
	      ERRMSG = "YOU MAY NOT INCREASE ALLOCATED AMT ON COMPLETED JOBS!!"
               GOTO 93000
	   END
	   IF ICR.CNV = "MD0" THEN
	      VALUE = INT(((VALUE/ICR.MT1)*ICR.DV1)*ICR.DV2 + .5)
	   END ELSE
	     * VALUE = VALUE * 10
	   END
	   DIFF.QTY = ABS(VALUE-PO.JB.RECEVED<1,LN>)
	   IF (INV.UNIT<1,3> = 'MSI' AND DIFF.QTY <= 50) OR DIFF.QTY <= 9 THEN
	      VALUE = PO.JB.RECEVED<1,LN>
	   END
	   IF VALUE < PO.JB.RECEVED<1,LN> AND PO.JB.RECEVED<1,LN> > 0 THEN
	      ERRMSG = "TOTAL QUANTITY ALLOCATED CAN'T BE LESS THAN QUANTITY RECEIVED" ; GOTO 93000
	   END
	   IF VALUE - PO.JB.RECEVED<1,LN> > BAL.OPEN + (PO.JB.ONORD<1,LN> - PO.JB.RECEVED<1,LN>) THEN
	      ERRMSG = "QUANTITY ALLOCATED CAN'T BE MORE THAN QUANTITY ORDERED" ; GOTO 93000
	   END
	   PO.JB.ONORD<1,LN> = VALUE
	   PO.JB.OPEN<1,LN> = PO.JB.ONORD<1,LN> - PO.JB.RECEVED<1,LN>
	   IF ICR.CNV = "MD0" THEN
	        PO.JB.RECEVED<1,LN> = INT(((PO.JB.RECEVED<1,LN>/ICR.DV1)*ICR.MT1)/ICR.DV2 + .5)
		PO.JB.OPEN<1,LN> = INT(((PO.JB.OPEN<1,LN>/ICR.DV1)*ICR.MT1)/ICR.DV2 + .5)
	   END ELSE
	        *PO.JB.RECEVED<1,LN> = OCONV(INT(PO.JB.RECEVED<1,LN>/10), "MD2")
        	*PO.JB.OPEN<1,LN> = OCONV(INT(PO.JB.OPEN<1,LN>/10), "MD2")
	        PO.JB.RECEVED<1,LN> = OCONV(INT(PO.JB.RECEVED<1,LN>), "MD2")
        	PO.JB.OPEN<1,LN> = OCONV(INT(PO.JB.OPEN<1,LN>), "MD2")
	   END
      STRXML := "<PO.JB.RECEVED>":PO.JB.RECEVED<1,LN>:"</PO.JB.RECEVED>"
      STRXML := "<PO.JB.OPEN>":PO.JB.OPEN<1,LN>:"</PO.JB.OPEN>"
      END CASE
STRXML := "</JobAllocation>"
SCHEMA.ONLY = 0
RETURN
**** GET CONVERSIONS
4000*
  BEGIN CASE
    CASE INV.UNIT<1,2> = "SHT" AND INV.UNIT<1,3> = "LBS"
      ICR.CNV<LN,1> = "MD0"; ICR.DV2<LN,1> = 1
      ICR.DV1<LN,1> = INV.M.WT; ICR.MT1<LN,1> = 1
    CASE INV.UNIT<1,2> = "PC" AND INV.UNIT<1,3> = "MSI"
      ICR.CNV<LN,1> = "MD0"; ICR.DV2<LN,1> = 1
      ICR.DV1<LN,1> = INV.PAP.WIDTH/100; ICR.MT1<LN,1> = 10
    CASE INV.UNIT<1,2> = "FT" AND INV.UNIT<1,3> = "MSI"
      ICR.CNV<LN,1> = "MD0"; ICR.DV2<LN,1> = 12
      ICR.DV1<LN,1> = INV.PAP.WIDTH/100; ICR.MT1<LN,1> = 100
    CASE 1
      ICR.CNV<LN,1> = "MD2"; ICR.DV2<LN,1> = 1
      ICR.DV1<LN,1> = 10; ICR.MT1<LN,1> = INV.SBR
  END CASE
  BEGIN CASE
    CASE PO.UNIT.FLG<1,LN> = "SHT" AND INV.UNIT<1,3> = "LBS"
      ICR.CNV<LN,2> = "MD0"; ICR.DV2<LN,2> = 1
      ICR.DV1<LN,2> = INV.M.WT; ICR.MT1<LN,2> = 1
    CASE PO.UNIT.FLG<1,LN> = "PC" AND INV.UNIT<1,3> = "MSI"
      ICR.CNV<LN,2> = "MD0"; ICR.DV2<LN,2> = 1
      ICR.DV1<LN,2> = INV.PAP.WIDTH/100; ICR.MT1<LN,2> = 10
    CASE PO.UNIT.FLG<1,LN> = "FT" AND INV.UNIT<1,3> = "MSI"
      ICR.CNV<LN,2> = "MD0"; ICR.DV2<LN,2> = 12
      ICR.DV1<LN,2> = INV.PAP.WIDTH/100; ICR.MT1<LN,2> = 100
    CASE 1
      ICR.CNV<LN,2> = "MD2"; ICR.DV2<LN,2> = 1
      ICR.DV1<LN,2> = 10; ICR.MT1<LN,2> = 1
  END CASE
  IF PO.UNIT.FLG<1,LN> # INV.UNIT<1,2> THEN DIFF.UM<LN> = "Y" ELSE DIFF.UM<LN> = "N"
  RETURN
**** GET JOB CONVERIONS
1111*
   BEGIN CASE
      CASE INV.UNIT<1,2> = "SHT" AND INV.UNIT<1,3> = "LBS"
         ICR.CNV = "MD0"; ICR.DV2 = 1
         ICR.DV1 = INV.M.WT; ICR.MT1 = 1
      CASE INV.UNIT<1,2> = "PC" AND INV.UNIT<1,3> = "MSI"
         ICR.CNV = "MD0"; ICR.DV2 = 1
         ICR.DV1 = INV.PAP.WIDTH/100; ICR.MT1 = 10
      CASE INV.UNIT<1,2> = "FT" AND INV.UNIT<1,3> = "MSI"
         ICR.CNV = "MD0"; ICR.DV2 = 12
         ICR.DV1 = INV.PAP.WIDTH/100; ICR.MT1 = 100
      CASE 1
         ICR.CNV = "MD2"; ICR.DV2 = 1
         ICR.DV1 = 10; ICR.MT1 = 1
   END CASE
  RETURN
 9999*
 **** PRINT TOTALS
1020*
LINESS = DCOUNT(PO.JB.ONORD,VM)
 *  TOT.ORD = 0 ; TOT.REC = 0 ; TOT.OPEN = 0
   TEMP.TOT.ORD = "";TEMP.TOT.REC = "";TEMP.TOT.OPEN = ""
   TEMP.BAL.ORD = "";TEMP.BAL.REC = "";TEMP.BAL.OPEN = ""
   FOR AD = 1 TO LINESS
****
	VALUE = PO.JB.ONORD<1,AD>
	IF ICR.CNV = "MD0" THEN
	   VALUE = INT(((VALUE/ICR.MT1)*ICR.DV1)*ICR.DV2 + .5)
	   PO.JB.RECEVED<1,AD> = INT(((PO.JB.RECEVED<1,AD>/ICR.MT1)*ICR.DV1)*ICR.DV2 + .5)
	END ELSE
	   *VALUE = VALUE * 10
	END
	DIFF.QTY = ABS(VALUE-PO.JB.RECEVED<1,AD>)
	IF (INV.UNIT<1,3> = 'MSI' AND DIFF.QTY <= 50) OR DIFF.QTY <= 9 THEN
	   VALUE = PO.JB.RECEVED<1,AD>
	END
	PO.JB.ONORD<1,AD> = VALUE
	PO.JB.OPEN<1,AD> = PO.JB.ONORD<1,AD> - PO.JB.RECEVED<1,AD>
***
      TOT.ORD = TOT.ORD + PO.JB.ONORD<1,AD>
      TOT.REC = TOT.REC + PO.JB.RECEVED<1,AD>
      TOT.OPEN = TOT.OPEN + PO.JB.OPEN<1,AD>
   NEXT AD
1030*
   BAL.ORD = PO.TOT.ONORD - PO.TOT.CANCEL - TOT.ORD
   BAL.REC = (PO.TOT.RECEVED + PO.PREV.RECEVED) - TOT.REC
   BAL.OPEN = PO.QTY.OPEN - TOT.OPEN
   RETURN
*
*QTY ORDER CONVERSION
*
15000*
  VALUE = PO.TOT.ONORD
	IF DIFF.UM<LN> = "Y" THEN
	    FROM.UOM = PO.UNIT.FLG<1,LN>
	    TO.UOM = INV.UNIT<1,2>
	    STK.QTY = PRIDGET_UOM_CONVERSION_CALC(VALUE,FROM.UOM,TO.UOM,INV.M.WT,INV.PAP.WIDTH,'','')
	    VALUE = PRIDGET_UOM_CONVERSION_CALC(STK.QTY,TO.UOM,FROM.UOM,INV.M.WT,INV.PAP.WIDTH,'','')
	    IF ICR.CNV<LN,2> = "MD0" THEN
	      VALUE = ICONV(((VALUE/ICR.MT1<LN,2>)*ICR.DV1<LN,2>)*ICR.DV2<LN,2>,'MD0')
	    END
	    IF ICR.CNV<LN,1> = "MD0" THEN
	      IF ICR.CNV<LN,2> # "MD0" THEN
		VALUE = VALUE * 10
	      END
	      P_VALUE = ICONV(((VALUE/ICR.DV1<LN,1>)*ICR.MT1<LN,1>)/ICR.DV2<LN,1>,'MD0')
	     * CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
	    END ELSE
	*		      VALUE = VALUE * ICR.MT1<LN,1> * 10
	*		      P_VALUE = OCONV(INT(VALUE/10) , "MD2")
	      VALUE = VALUE * ICR.MT1<LN,1>
	      P_VALUE = OCONV(INT(VALUE) , "MD2")
	    END
	    IF ICR.CNV<LN,2> = "MD0" THEN
		P_VALUE = ICONV(((VALUE/ICR.DV1<LN,2>)*ICR.MT1<LN,2>)/ICR.DV2<LN,2>,'MD0')
	    END ELSE
	      IF ICR.CNV<LN,1> = "MD0" THEN
		P_VALUE = OCONV(INT(VALUE/10), "MD2")
	      END ELSE
		P_VALUE = OCONV(INT((VALUE/10)/ICR.MT1<LN,1>), "MD2")
	      END
	    END
	  END ELSE
	    IF ICR.CNV<LN,1> = "MD0" THEN
	      VALUE = ICONV(((VALUE/ICR.MT1<LN,1>)*ICR.DV1<LN,1>)*ICR.DV2<LN,1>,'MD0')
	    END ELSE
	     * VALUE = VALUE * 10
	    END
	  END
PO.TOT.ONORD = VALUE
RETURN
*
*QTY CANCEL CONVERSION
*
16000*
 VALUE = PO.TOT.CANCEL
  IF DIFF.UM<LN> = "Y" THEN
    IF ICR.CNV<LN,2> = "MD0" THEN
      VALUE = ICONV(((VALUE/ICR.MT1<LN,2>)*ICR.DV1<LN,2>)*ICR.DV2<LN,2>,'MD0')
    END
    IF ICR.CNV<LN,1> = "MD0" THEN
      IF ICR.CNV<LN,2> # "MD0" THEN
        VALUE = VALUE * 10
      END
      IF (INV.UNIT<1,2> = 'PC' OR INV.UNIT<1,2> = 'FT') AND INV.UNIT<1,3> = 'MSI' THEN
        TEST.OPEN = PO.TOT.ONORD<1,LN> - PO.TOT.RECEVED<1,LN>
        IF ABS(TEST.OPEN-VALUE) < 50 THEN VALUE = TEST.OPEN
      END
      P_VALUE = ICONV(((VALUE/ICR.DV1<LN,1>)*ICR.MT1<LN,1>)/ICR.DV2<LN,1>,'MD0')
    END ELSE
*      VALUE = VALUE * ICR.MT1<LN,1> * 10
*      P_VALUE = OCONV(INT(VALUE/10) , "MD2")
      VALUE = VALUE * ICR.MT1<LN,1> 
      P_VALUE = OCONV(INT(VALUE/10) , "MD2")
    END
    IF ICR.CNV<LN,2> = "MD0" THEN
      P_VALUE = ICONV(((VALUE/ICR.DV1<LN,2>)*ICR.MT1<LN,2>)/ICR.DV2<LN,2>,'MD0')
    END ELSE
      IF ICR.CNV<LN,1> = "MD0" THEN
        P_VALUE = OCONV(INT(VALUE/10), "MD2") "R#11" ; P_OPT = ""
      END ELSE
        P_VALUE = OCONV(INT((VALUE/10)/ICR.MT1<LN,1>), "MD2") 
      END
    END
  END ELSE
    IF ICR.CNV<LN,1> = "MD0" THEN
      VALUE = ICONV(((VALUE/ICR.MT1<LN,1>)*ICR.DV1<LN,1>)*ICR.DV2<LN,1>,'MD0')
    END ELSE
      *VALUE = VALUE * 10
    END
  END
 PO.TOT.CANCEL = VALUE
 RETURN
*
*QTY OPEN CONVERSION
*
 17000*
 VALUE = PO.QTY.OPEN
   IF DIFF.UM<LN> = "Y" THEN
      IF ICR.CNV<LN,2> = "MD0" THEN
        VALUE = ICONV(((VALUE/ICR.MT1<LN,2>)*ICR.DV1<LN,2>)*ICR.DV2<LN,2>,'MD0')
      END
      IF ICR.CNV<LN,1> = "MD0" THEN
        IF ICR.CNV<LN,2> # "MD0" THEN
          VALUE = VALUE * 10
        END
         P_VALUE = ICONV(((VALUE/ICR.DV1<LN,1>)*ICR.MT1<LN,1>)/ICR.DV2<LN,1>,'MD0')
      END ELSE
*        VALUE = VALUE * ICR.MT1<LN,1> * 10
*        P_VALUE = OCONV(INT(VALUE/10) , "MD2")
         VALUE = VALUE * ICR.MT1<LN,1> 
         P_VALUE = OCONV(INT(VALUE/10) , "MD2")
      END
      IF ICR.CNV<LN,2> = "MD0" THEN
        P_VALUE = ICONV(((VALUE/ICR.DV1<LN,2>)*ICR.MT1<LN,2>)/ICR.DV2<LN,2>,'MD0')
      END ELSE
        IF ICR.CNV<LN,1> = "MD0" THEN
          P_VALUE = OCONV(INT(VALUE/10), "MD2") 
        END ELSE
          P_VALUE = OCONV(INT((VALUE/10)/ICR.MT1<LN,1>), "MD2")
        END
      END
    END ELSE
      IF ICR.CNV<LN,1> = "MD0" THEN
        VALUE = ICONV(((VALUE/ICR.MT1<LN,1>)*ICR.DV1<LN,1>)*ICR.DV2<LN,1>,'MD0')
      END ELSE
        *VALUE = VALUE * 10
      END
    END
  PO.QTY.OPEN = VALUE 
RETURN
93000*
SCHEMA.ONLY = 0
 STRXML = "<JobAllocation><ErrMsg>": ERRMSG:"</ErrMsg></JobAllocation>"
END
