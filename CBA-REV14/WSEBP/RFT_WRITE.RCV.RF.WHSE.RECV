SUBROUTINE RFT_WRITE.RCV.RF.WHSE.RECV(CONO,EMP_ID,TRANSIT_ID,WARE_HOUSE,LOCATION,SERIAL_IDS,CORRECT,ERRMSG)
*********************************************************************
*
* PROGRAM  - RCV.RF.WHSE.RECV
*
* AUTHOR   - JULIANNE MATHESON, NASTech, Inc.
*
* DATE     - 05/10/00
*
* DESCRIPTION
*
* This program is used to process interdivisional warehouse transfers
* from the hand-held R-F units used in the warehouse.
*
*T26132 cm 09/07/2001 * Change screen size from 21x16 to 20x15.
*T26497 adelgado 04/01/2002 * Modify to incorporate the new
*                             Inter-Divisional transfer.
*T27705 lross 11/14/2003 * Expand Serial to 15 chars.
*********************************************************************
*
*---- COPY STATEMENTS
*
$INCLUDE RCV.CPYLIB RCV.FILE.VARS
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE PMC.CPYLIB EMPLOYEE
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV.WHSE.LOC
$INCLUDE ICS.CPYLIB INV_SERIAL
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE RCV.CPYLIB INTR_DIV_TRANSFER
$INCLUDE CPYLIB FILE.VARS
$INCLUDE CPYLIB CHAR
*
*---- OPEN ALL FILES
*
  OPEN "","COMPANY" TO COMPANY ELSE
    ERRMSG = 'COMPANY FILE MISSING'
    GOTO 93000
  END
  OPEN "","EMPLOYEE" TO EMPLOYEE ELSE
    ERRMSG = 'EMPLOYEE FILE MISSING'
    GOTO 93000
  END
  OPEN "","INTR_DIV_TRANSFER" TO INTR_DIV_TRANSFER ELSE
    ERRMSG = 'INTR_DIV_TRANSFER FILE MISSING'
    GOTO 93000
  END
  OPEN "","CATEGORY" TO CATEGORY ELSE
    ERRMSG = 'CATEGORY FILE MISSING'
    GOTO 93000
  END
  OPEN "","INVENTORY" TO INVENTORY ELSE
    ERRMSG = 'INVENTORY FILE MISSING'
    GOTO 93000
  END
  OPEN "","INV.WHSE" TO INV.WHSE ELSE
    ERRMSG = 'INV.WHSE FILE MISSING'
    GOTO 93000
  END
  OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE
    ERRMSG = 'INV.WHSE.LOC FILE MISSING'
    GOTO 93000
  END
   OPEN "","COMPANY" TO COMPANY ELSE
    ERRMSG = 'COMPANY FILE MISSING'
    RETURN
  END
  OPEN "","INV_SERIAL" TO INV_SERIAL ELSE
    ERRMSG = 'INV_SERIAL FILE MISSING'
    GOTO 93000
  END
  OPEN "","INTR_SERIAL_XREF" TO INTR_SERIAL_XREF ELSE
    ERRMSG = 'INTR_SERIAL_XREF FILE MISSING'
    GOTO 93000
  END
  OPEN "","WAREHOUSE" TO WAREHOUSE ELSE
    ERRMSG = 'WAREHOUSE FILE MISSING'
    GOTO 93000
  END
  OPEN "","DIVISION" TO DIVISION ELSE
    ERRMSG = 'DIVISION FILE MISSING'
    GOTO 93000
  END
 OPEN "","CONTROL" TO CONTROL ELSE
    ERRMSG = 'CONTROL FILE MISSING'
    RETURN
  END
*
*---- INITIALIZATION
*
POS='0'
  SPX = "" 
  MATREAD EMP.REC FROM EMPLOYEE, CONO:EMP_ID THEN
    EMPNAME = (EMP.FRST.NAME:" ":EMP.LAST.NAME)[1,20]
  END
  IF LEN(EMPNAME) < 20 THEN SPX = SPACE(INT((21-LEN(EMPNAME))/2))
  EMPNAME = SPX:EMPNAME
  MATREAD COMP.REC FROM COMPANY,CONO ELSE MAT COMP.REC = ''
  IF CO.INTR.WHSE = '' THEN CO.INTR.WHSE = 'INTR'          
*---- MAIN PROCESSING
*
   TRANS.ID = ''
  WHSE = ""; LOC = ""
  GOSUB GET.TRANSIT
  IF ERRMSG # "" THEN RETURN
  GOSUB GET.WHSE
  IF ERRMSG # "" THEN RETURN
  GOSUB GET.LOC 
  IF ERRMSG # "" THEN RETURN
ERRMSG1=''
  RFCNT=DCOUNT(SERIAL_IDS,VM)
  FOR RFPTR=1 TO RFCNT
 SERIAL.IDS=""
      SERIAL_ID=SERIAL_IDS<1,RFPTR>
      GOSUB GET.SERIAL
      IF ERRMSG # "" THEN
ERRMSG1:= SERIAL_ID: "---" : ERRMSG : " "
      END ELSE
         IF CORRECT = "Y" THEN
              RCNT = DCOUNT(SERIAL.IDS,VM)
              FOR RPTR = 1 TO RCNT
                  GOSUB 5000
                    IF ERRMSG # "" THEN
ERRMSG1:= SERIAL_ID : "---" : ERRMSG : " "
                    END
              NEXT RPTR       
	      IDM.STATUS = 3
              MATWRITE IDM.REC ON INTR_DIV_TRANSFER, CONO:TRANS.ID
         END               
      END
  NEXT RFPTR     
IF ERRMSG1 # "" THEN ERRMSG=ERRMSG1
  RETURN
*
*---- PROCESS TRANSFER
*
5000 *
  SERIAL.ID = SERIAL.IDS<1,RPTR>
  MATREAD ISTK.REC FROM INV_SERIAL, CONO:SERIAL.ID ELSE
    ERRMSG = 'INVALID SERIAL'
    RETURN
  END
  LOCATE ISTK.PROD IN IDM.PROD.NO<1>,1 SETTING TOS THEN
    LOCATE SERIAL.ID IN IDM.SERIAL<1,TOS>,1 SETTING RSPTR ELSE
      ERRMSG = 'NOT IN TRANSIT'
      RETURN
    END
  END ELSE
    ERRMSG = 'NOT IN TRANSIT'
    RETURN
  END
  IF IDM.RECV.DATE<1,TOS,RSPTR> # '' THEN
    ERRMSG = "ALREADY RECV'D"
    RETURN
  END 
  RETURN
*
GET.TRANSIT: 
*
        TMP = LEN(TRIM(TRANSIT_ID))
        IF TRANSIT_ID[TMP,1] # 'T' AND TMP LT 7 THEN
          TRANSIT_ID = TRANSIT_ID:'T' ; TMP += 1
        END
        IF TMP GT 7 THEN TMP = 7
        TMP = 7 - TMP
        TRANSIT_ID = STR('0',TMP):TRANSIT_ID       
        MATREADU IDM.REC FROM INTR_DIV_TRANSFER, CONO:TRANSIT_ID LOCKED
          ERRMSG = 'TRANSIT # LOCKED'
          GOTO 91000 
        END ELSE
          ERRMSG = 'INVALID TRANSIT'
          GOTO 91000
        END
        BEGIN CASE
          CASE IDM.STATUS = 1
            ERRMSG = 'TRANS-OUT FIRST'
            GOTO 91000
            RELEASE INTR_DIV_TRANSFER, CONO:TRANSIT_ID
          CASE IDM.STATUS = 4
            ERRMSG = 'ALREADY COMPLETE'
            GOTO 91000 
            RELEASE INTR_DIV_TRANSFER, CONO:TRANSIT_ID
        END CASE
        TRANS.ID = TRANSIT_ID  	
  RETURN
*
GET.WHSE: 
*
     BEGIN CASE
      CASE WARE_HOUSE = 'END' OR WARE_HOUSE = ''
        POS -= 2
      CASE WARE_HOUSE = CO.INTR.WHSE
        ERRMSG = 'NO TRANSIT WHSE' ; GOTO 91000 
      CASE 1
        MATREAD WHSE.REC FROM WAREHOUSE, CONO:WARE_HOUSE THEN
          IF WHS.DIV # IDM.TO.DIV THEN
            ERRMSG = 'DIV MISMATCH' ; GOTO 91000
          END ELSE
            WHSE = WARE_HOUSE
          END
        END ELSE
          ERRMSG = "INVALID WHSE"; GOTO 91000 
        END
    END CASE    
  RETURN
*
GET.LOC: 
*
  IF LOCATION # 'END' AND LOCATION # '' THEN
    LOC = LOCATION
  END 
  RETURN 
*
GET.SERIAL: 
*
       READ TEST.REC FROM INTR_SERIAL_XREF, CONO:SERIAL_ID THEN
          IF TEST.REC<1> # TRANS.ID THEN
            ERRMSG = 'ALREADY IN-TRAN'; GOTO 91000
          END
        END ELSE
*         ERRMSG = "ALREADY RECV'D"; GOTO 91000
        END
        MATREAD ISTK.REC FROM INV_SERIAL, CONO:SERIAL_ID ELSE
          ERRMSG = "INVALID SERIAL"; GOTO 91000
        END
        IF ISTK.POST.DATE = "" THEN
          ERRMSG = "SERIAL NOT RCVD"; GOTO 91000
        END
        IF ISTK.WHSE = WHSE THEN
*         ERRMSG = "ALREADY RECV'D"; GOTO 91000
        END
        MATREAD IWLO.REC FROM INV.WHSE.LOC, CONO:ISTK.PROD:"!":ISTK.WHSE:"!":ISTK.LOC ELSE
          ERRMSG = "NO INV.WHSE.LOC"; GOTO 91000
        END
        LOCATE SERIAL_ID IN IWLO.SERIAL<1>,1 SETTING P ELSE
          ERRMSG = "NO SER # IN LOC"; GOTO 91000
        END
        LOCATE SERIAL_ID IN SERIAL.IDS<1>,1 SETTING ROLLPTR ELSE
          SERIAL.IDS<1,ROLLPTR> = SERIAL_ID
        END 	
  RETURN
*
*---- ERROR ROUTINE
*
91000 *  
  RETURN
93000 *
 RETURN
*
*---- END OF PROGRAM
*
99999 *
  RETURN
END
