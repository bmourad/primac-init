SUBROUTINE RFT_WRITE.RCV.RF.PHY.INV.SUB(CONO, EMPID, MAT RCV.FILE.VARS, MAT PHYSI.REC,SEQ.NO,PHY.XREF,PROD_SERIAL_RECEIPT,QTY1,DIAM1,PRICE1,USER.ID,TRANSFERFLAG,ERRMSG)             
*********************************************************************
*
* PROGRAM  - RCV.RF.PHY.INV
*
* AUTHOR   - Alejandro Delgado
*
* DATE     - 06/21/2002
*
* DESCRIPTION
*
* This program is used to process physical inventory transactionss
* from the hand-held R-F units used in the warehouse.
*
*T26674 adelgado 06/21/2002 * Original Code
*********************************************************************
*
*---- COPY STATEMENTS
*
$INCLUDE RCV.CPYLIB RCV.FILE.VARS
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE PMC.CPYLIB EMPLOYEE
$INCLUDE PMC.CPYLIB DIVISION
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV.WHSE.LOC
$INCLUDE ICS.CPYLIB INV_SERIAL
$INCLUDE ICS.CPYLIB INV_RECEIPTS
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE ICS.CPYLIB PHY.INV
$INCLUDE ICS.CPYLIB DAILY_TRANSFER
$INCLUDE ICS.CPYLIB TRANSFER
$INCLUDE ICS.CPYLIB INV_RECP_WHSE
$INCLUDE CPYLIB FILE.VARS
$INCLUDE CPYLIB CHAR
*************
*OPEN FILES
*************
  OPEN "","CONTROL" TO CONTROL ELSE 
    ERRMSG = 'CONTROL FILE MISSING'
    RETURN                                            
  END   
  OPEN "","EMPLOYEE" TO EMPLOYEE ELSE
    ERRMSG = 'EMPLOYEE FILE MISSING'
    RETURN
  END
  OPEN "","PHY.INV" TO PHY.INV ELSE
    ERRMSG = 'PHY.INV FILE MISSING'
    RETURN
  END
  OPEN "","PHY.XREF" TO PHY.XREF ELSE
    ERRMSG = 'PHY.XREF FILE MISSING'
    RETURN
  END
  OPEN "","CATEGORY" TO CATEGORY ELSE
    ERRMSG = 'CATEGORY FILE MISSING'
    RETURN
  END
  OPEN "","PO" TO PO ELSE
    ERRMSG = 'PO FILE MISSING'
    RETURN
  END
  OPEN "","INVENTORY" TO INVENTORY ELSE
    ERRMSG = 'INVENTORY FILE MISSING'
    RETURN
  END
  OPEN "","INV.WHSE" TO INV.WHSE ELSE
    ERRMSG = 'INV.WHSE FILE MISSING'
    RETURN
  END
  OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE
    ERRMSG = 'INV.WHSE.LOC FILE MISSING'
    RETURN
  END
  OPEN "","INV_SERIAL" TO INV_SERIAL ELSE
    ERRMSG = 'INV_SERIAL FILE MISSING'
    RETURN
  END
  OPEN "","INV_RECEIPTS" TO INV_RECEIPTS ELSE
    ERRMSG = 'INV_RECEIPTS FILE MISSING'
    RETURN
  END
  OPEN "","WAREHOUSE" TO WAREHOUSE ELSE
    ERRMSG = 'WAREHOUSE FILE MISSING'
    RETURN
  END
  OPEN "","DIVISION" TO DIVISION ELSE
    ERRMSG = 'DIVISION FILE MISSING'
    RETURN
  END
  OPEN '','DAILY_TRANSFER' TO DAILY_TRANSFER ELSE
    ERRMSG = 'DAILY_TARNSFER FILE MISSING'
    RETURN
  END
  OPEN '','TRANSFER' TO TRANSFER ELSE
    ERRMSG = 'TRANSFER FILE MISSING'
    RETURN
  END
  OPEN '','INV_SERIAL_TEMP' TO INV_SERIAL_TEMP ELSE
    ERRMSG = 'INV_SERIAL_TEMP FILE MISSING'
    RETURN                                     
  END                                              
  OPEN '','INV_AUDIT_HIST' TO INV_AUDIT_HIST ELSE 
    ERRMSG = 'INV_AUDIT_HIST FILE MISSING'
    RETURN                                              
  END                                                       
  OPEN '','INV_AUDIT_HIST_TEMP' TO INV_AUDIT_HIST_TEMP ELSE 
    ERRMSG = 'INV_AUDIT_HIST_TEMP FILE MISSING'
    RETURN                                              
  END                                                       
  OPEN '','INV_AUDIT_TAG' TO INV_AUDIT_TAG ELSE 
    ERRMSG = 'INV_AUDIT_TAG FILE MISSING'
    RETURN                                              
  END                                                       
  OPEN '','INV.WHSE.LOC.TEMP' TO INV.WHSE.LOC.TEMP ELSE 
    ERRMSG = 'INV.WHSE.LOC.TEMP FILE MISSING'
    RETURN                                          
  END                                                   
  OPEN '','INV_RECEIPTS_TEMP' TO INV_RECEIPTS_TEMP ELSE
    ERRMSG = 'INV_RECEIPTS_TEMP FILE MISSING'
    RETURN                                         
  END                                                  
  OPEN '','INV_RECP_WHSE' TO INV_RECP_WHSE ELSE 
    ERRMSG = 'INV_RECP_WHSE FILE MISSING'
    RETURN                                            
  END                                                     
  OPEN '','INV_RECP_WHSE_TEMP' TO INV_RECP_WHSE_TEMP ELSE 
    ERRMSG = 'INV_RECP_WHSE_TEMP FILE MISSING'
    RETURN                                            
  END                             
*
  DEFFUN RFT_CALC.STK.QTY(COST.QTY,MAT INV.CNV.REC,ROND,POS)
  DEFFUN RFT_CALC.COST.QTY(STK.QTY,MAT INV.CNV.REC,ROND,POS)
  DEFFUN RFT_CALC.DIAM(COST.QTY,STK.QTY,MAT INV.REC)
*
  DIM SAVE.PHYSI.REC(PHYSI.REC.SIZE)
  SPX = "" 
  MATREAD EMP.REC FROM EMPLOYEE, CONO:EMPID THEN
    EMPNAME = (EMP.FRST.NAME:" ":EMP.LAST.NAME)[1,20]
  END
  IF LEN(EMPNAME) < 20 THEN SPX = SPACE(INT((21-LEN(EMPNAME))/2))
  EMPNAME = SPX:EMPNAME
*
  OLD.KEY = '' ; OLD.QTY = ''
  GEN.DIV = '00'
*
*---- MAIN PROCESSING
*
    GOSUB INIT.VARS
    GOSUB GET.PROD.SERIAL.RECEIPT
       BEGIN CASE
          CASE RECEIPT.ID # ''
            LOCATE RECEIPT.ID IN PHYSI.RECP.NO<1>,1 SETTING POS ELSE POS = 0
          CASE PROD.ID # ''
            LOCATE PROD.ID IN PHYSI.PRODUCT<1>,1 SETTING POS ELSE POS = 0
          CASE SERIAL.ID # ''
            LOCATE SERIAL.ID IN PHYSI.SERIAL<1>,1 SETTING POS ELSE POS = 0
          CASE 1
            POS = 0
        END CASE
        IF POS = 0 THEN
          POS = DCOUNT(PHYSI.PRODUCT,@VM)+1
          MODE = 'A'
        END ELSE
          MODE = 'C'
        END
        GOSUB GET.MULTI.INPUT    
  RETURN
*
INIT.VARS: 
*
  SERIAL.ID = '' ; PROD.ID = ''
  RECEIPT.ID = ''
  QTY = '' ; PRICE = '' ; DIAM = ''
  TEMP.PROD = '' ; TEMP.SERIAL = '' ; TEMP.RECP.NO = ''
  *
  RETURN
*
GET.PROD.SERIAL.RECEIPT: 
*
        FOUND = 0
        ;*   FIRST CHECK RECEIPT
        MATREAD INVR.REC FROM INV_RECEIPTS, CONO:PROD_SERIAL_RECEIPT THEN
          MATREAD INV.REC FROM INVENTORY, CONO:INVR.PROD THEN
            MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE THEN
              BEGIN CASE
                CASE CATG.TRK.LVL = 'R'
                  RECEIPT.ID = PROD_SERIAL_RECEIPT
                  TEMP.PROD = INVR.PROD
                  FOUND = 1
                CASE CATG.TRK.LVL = 'G'
                  PROD.ID = INVR.PROD
                  TEMP.PROD = INVR.PROD
                  FOUND = 1                 
                CASE CATG.TRK.LVL = 'S'
                  ERRMSG = 'SERIAL LEVEL ONLY'
                  RETURN  
              END CASE
            END
          END
        END
        ;*   CHECK PRODUCT
        IF FOUND = 0 THEN
          MATREAD INV.REC FROM INVENTORY, CONO:PROD_SERIAL_RECEIPT THEN
            MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE THEN
              BEGIN CASE
                CASE CATG.TRK.LVL = 'R'
                  ERRMSG = 'RECEIPT LVL ONLY'
                  RETURN  
                CASE CATG.TRK.LVL = 'S'
                  ERRMSG = 'SERIAL LEVEL ONLY'
                  RETURN  
                CASE CATG.TRK.LVL = 'G'
                  PROD.ID = PROD_SERIAL_RECEIPT
                  FOUND = 1
                  TEMP.PROD = PROD.ID
              END CASE
            END ELSE
              ERRMSG = 'INVALID PRODUCT'
              RETURN  
            END
          END
        END
        ;*   NEXT CHECK SERIAL
        IF FOUND = 0 THEN
          MATREAD ISTK.REC FROM INV_SERIAL, CONO:PROD_SERIAL_RECEIPT THEN
            IF ISTK.POST.DATE = "" THEN
              ERRMSG = "SERIAL NOT RCVD"; RETURN  
            END ELSE
              MATREAD INV.REC FROM INVENTORY, CONO:ISTK.PROD THEN
                MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE THEN
                  BEGIN CASE
                    CASE CATG.TRK.LVL = 'R'
                      ERRMSG = 'RECEIPT LVL ONLY'
                      RETURN  
                    CASE CATG.TRK.LVL = 'G'
                      PROD.ID = ISTK.PROD
                      TEMP.PROD = ISTK.PROD
                      FOUND = 1                     
                    CASE CATG.TRK.LVL = 'S'
                      SERIAL.ID = PROD_SERIAL_RECEIPT
                      FOUND = 1
                      TEMP.PROD =  ISTK.PROD
                  END CASE
                END
              END
            END
          END
        END
        IF FOUND = 0 THEN
          ERRMSG = 'INVALID KEY'
          RETURN        
        END   
  *
  RETURN
*
GET.MULTI.INPUT: 
*
$INCLUDE ICSBP INV.UM.CNV
  TMP.QTY = 0
  BEGIN CASE
    CASE CATG.TRK.LVL = 'S'
      IF PHYSI.WHSE # ISTK.WHSE OR PHYSI.LOC # ISTK.LOC THEN
        IF PHYSI.TRAN.TO # '' THEN
          ERRMSG = 'SERIAL NOT FOUND' ; RETURN
        END
        MATREAD WHSE.REC FROM WAREHOUSE,CONO:PHYSI.WHSE THEN
          IF WHS.DIV='' THEN
            FROM.DIV=GEN.DIV
          END ELSE
            FROM.DIV=WHS.DIV
          END
        END
        MATREAD WHSE.REC FROM WAREHOUSE,CONO:ISTK.WHSE THEN
          IF WHS.DIV='' THEN
            TO.DIV=GEN.DIV
          END ELSE
            TO.DIV=WHS.DIV
          END
        END
        IF TRANSFERFLAG = "Y" THEN
          IF FROM.DIV # TO.DIV THEN
            ERRMSG = 'DIV MISMATCH'
            RETURN 
          END ELSE
            ERRMSG = ''
            GOSUB PROCESS.TRANSFER
            IF ERRMSG # '' THEN RETURN
          END
        END ELSE
          RETURN
        END
      END
      TMP.QTY = ISTK.CUR.QTY+0
      TEMP.SERIAL = SERIAL.ID
      TEMP.RECP.NO = ISTK.RECP
    CASE CATG.TRK.LVL = 'R'
      TMP.QTY = PHYSI.PREV.QTY<1,POS> + 0
      TEMP.RECP.NO = RECEIPT.ID
    CASE 1
      TMP.QTY = PHYSI.PREV.QTY<1,POS> + 0
  END CASE
  ROND = 0.5
  IF TMP.QTY < 0 THEN ROND = -(0.5)
  TMP.QTY = RFT_CALC.STK.QTY(TMP.QTY,MAT INV.CNV.REC,ROND,'')
  GET.OUT=0
  FOR FL=1 TO 3 UNTIL GET.OUT
    ON FL GOSUB GET.QTY, GET.DIAM, GET.UNIT.COST
  NEXT FL
  IF (GET.OUT) THEN RETURN
  *
  PHYSI.STATUS<1,POS> = 'MAINT'
  IF QTY < 0 THEN ROND="-.5" ELSE ROND=".5"
  PHYSI.CURRQTY<1,POS>=RFT_CALC.COST.QTY(QTY,MAT INV.CNV.REC,ROND,'')
  PHYSI.CURR.SQTY<1,POS> = QTY
  PHYSI.CURR.DIA<1,POS> = DIAM
  PHYSI.UNIT.COST<1,POS> = PRICE
  IF PHYSI.PREV.SQTY<1,POS> = "" THEN PHYSI.PREV.SQTY<1,POS> = 0
  IF MODE = 'A' THEN
    PHYSI.PRODUCT<1,POS> = TEMP.PROD
    PHYSI.SERIAL<1,POS>=TEMP.SERIAL
    PHYSI.RECP.NO<1,POS> = TEMP.RECP.NO
    PHYSI.UNIT<1,POS> = INV.UNIT<1,2>
    PHYSI.DESC<1,POS> = INV.DESC
    IF CATG.TRK.LVL = 'S' THEN
      PHYSI.PREV.QTY<1,POS> = ISTK.CUR.QTY     
      PHYSI.PREV.DIA<1,POS> = ISTK.CUR.DIAM    
      PHYSI.PREV.SQTY<1,POS> = ISTK.CUR.STK.QTY
    END ELSE
      PHYSI.PREV.QTY<1,POS> = 0
    END
  END
  OLD.KEY = SERIAL.ID:RECEIPT.ID:PROD.ID
  OLD.QTY = OCONV(QTY,ICR.CNV)
  *
  RETURN
*
GET.QTY: 
*  
    RESP = QTY1
    BEGIN CASE
      CASE RESP = ''
         GET.OUT = 1
      CASE NUM(RESP) 
        IF ICR.SCAL = 2 THEN
          RESP = ICONV(RESP,'MD2')
        END ELSE
          IF ICR.CNV = 'MD2' THEN RESP = RESP * 100
        END
        IF SERIAL.ID # '' THEN
          MATREAD ISTK.REC FROM INV_SERIAL,CONO:SERIAL.ID ELSE MAT ISTK.REC=''
          TMP=RFT_CALC.COST.QTY(RESP,MAT INV.CNV.REC,'.5','')
          IF TMP<ISTK.CUR.QTY-ISTK.RSVB.QTY THEN
            ERRMSG = 'CANNOT ADJUST'
            RETURN  
          END
        END
        QTY = RESP
      CASE 1
        ERRMSG = 'INVALID RESPONSE'
        RETURN
    END CASE 
  RETURN
*
GET.DIAM: 
*
  IF INV.PAP.TYPE="ROLL" OR INV.PAP.TYPE="LROLL" OR INV.PAP.TYPE="PCOAT" THEN
    BEGIN CASE
      CASE QTY # '' AND QTY # 0
        TMP.WGT=RFT_CALC.COST.QTY(QTY,MAT INV.CNV.REC,'.5','')
        COST.QTY=TMP.WGT ; STK.QTY=QTY
        DIAM=RFT_CALC.DIAM(COST.QTY,STK.QTY,MAT INV.REC)       
      CASE 1       
          RESP = DIAM1
          BEGIN CASE
            CASE RESP = ''
               GET.OUT = 1
            CASE NUM(RESP) 
              BEGIN CASE
                CASE INV.PAP.TYPE = "ROLL"
                  QTY = (((RESP/100*RESP/100)-(INV.CORE.DIA/100*INV.CORE.DIA/100))*100)
                  QTY = INT((QTY/100)*(INV.PAP.WIDTH/10000)*(INV.FACTOR/10000)/10*100+0.5)
                CASE INV.PAP.TYPE = "LROLL" OR INV.PAP.TYPE = "PCOAT"
                  QTY = (((RESP/100*RESP/100)-(INV.CORE.DIA/100*INV.CORE.DIA/100))*100)
                  BEGIN CASE
                    CASE INV.UNIT<1,2> = "FT"
                      QTY = INT((QTY/100)*3.1416/4*(100000/INV.FACTOR)/12+0.5)
                    CASE INV.UNIT<1,2> = "PC"
                      QTY = INT((QTY/100)*3.1416/4*(100000/INV.FACTOR)/10+0.5)
                  END CASE
              END CASE
              IF QTY < 0 THEN QTY = 0
              *PRINT @(8,8):OCONV(QTY,ICR.CNV)
              DIAM = RESP            
            CASE 1
              ERRMSG = 'INVALID RESPONSE'
              RETURN
          END CASE       
    END CASE
  END
  *
  RETURN
*
GET.UNIT.COST: 
*
  IF QTY > TMP.QTY THEN
    BEGIN CASE
      CASE INV.M.LINE = 'FNGD'
        PRICE = PHYSI.UNIT.COST<1,POS>
      CASE PHYSI.UNIT.COST<1,POS> = "" AND CATG.PHY.INV.METH # ""
        IF QTY < 0 THEN ROND="-.5" ELSE ROND=".5"
        TEMP.CURR=RFT_CALC.COST.QTY(QTY,MAT INV.CNV.REC,ROND,'')
        GOSUB CALC.UNIT.COST
        IF CATG.PHY.INV.ALLOW = "Y" THEN
           IF PRICE1 = '' THEN
             GET.OUT = 1
           END ELSE
            PRICE = PRICE1
           END
        END
      CASE 1
        IF CATG.PHY.INV.ALLOW = "Y" THEN
          IF PRICE1 # '' THEN
            PRICE = PRICE1
          END ELSE
            GET.OUT = 1
          END
        END ELSE
          PRICE = PHYSI.UNIT.COST<1,POS>
        END
    END CASE
  END ELSE
    PRICE = PHYSI.UNIT.COST<1,POS>
  END
  *
  RETURN
*
CALC.UNIT.COST: 
*
  MATREAD IWH.REC FROM INV.WHSE, CONO:TEMP.PROD:'!':PHYSI.WHSE ELSE MAT IWH.REC = ''
  BEGIN CASE
    CASE CATG.PHY.INV.METH = 'LC'
      CHECK.COST = 0
      RECP.CNT=DCOUNT(IWH.RECP.NO,VM)
      IF RECP.CNT>0 THEN
        GOT.LAST=0 ; LAST.COST=0
        ;* inventory received in a future period should not
        ;* be considered for a last cost
        FOR R=RECP.CNT TO 1 STEP -1 UNTIL  (GOT.LAST)
          IF IWH.RECP.PERIOD<1,R> <= PHYSI.PERIOD THEN
            RECP.NO=IWH.RECP.NO<1,R>
            IRW.ID = CONO:RECP.NO:'!':PHYSI.WHSE
            MATREAD IRW.REC FROM INV_RECP_WHSE,IRW.ID THEN
              INVR.ID=CONO:RECP.NO
              MATREAD INVR.REC FROM INV_RECEIPTS,INVR.ID THEN
                LAST.COST = INVR.UNIT.COST
                GOT.LAST = 1
              END
            END
          END
        NEXT R
        CHECK.COST = LAST.COST
      END
    CASE CATG.PHY.INV.METH = 'SD'
      CHECK.COST = IWH.STD.COST
    CASE CATG.PHY.INV.METH = 'AV'
      CHECK.COST = IWH.AVG.COST
    CASE CATG.PHY.INV.METH = 'LT'
      CHECK.COST = IWH.LIST.COST
    CASE 1
      CHECK.COST = 0
  END CASE
  RETURN
*
PROCESS.TRANSFER: 
*
  MAT TRAN.REC=''
  MAT D.TRAN.REC=''
  D.TRAN.PRT.DATE=DATE()
  D.TRAN.EMP=USER.ID
  D.TRAN.SERIAL = SERIAL.ID
  D.TRAN.RECP = ISTK.RECP
  D.TRAN.PROD.NO= ISTK.PROD
  D.TRAN.FROM.WHSE = ISTK.WHSE
  D.TRAN.FROM.LOC = ISTK.LOC
  D.TRAN.TO.WHSE = PHYSI.WHSE
  D.TRAN.TO.LOC = PHYSI.LOC
  D.TRAN.QTY = ISTK.CUR.QTY
  D.TRAN.DATE.ENTER=DATE()
  D.TRAN.PERIOD=PHYSI.PERIOD
  D.TRAN.TOT.QTY = ISTK.CUR.QTY
  D.TRAN.REASON.DESC = "PHYSICAL"
  D.TRAN.DATE.ENTER = DATE()
  D.TRAN.CODE='N'
*
  PROCESS.FLAG='Y' ; MAT TRAN.REC='' ; NEW.ERRMSG='' ; ERRMSG1 = ''
  CALL RFT_TRAN.UPDATE.PHY.INV(CONO,D.TRAN.CODE,MAT D.TRAN.REC,PROCESS.FLAG,CO.ICS.LOC.TRAN,NEW.ERRMSG,ERRMSG1)
  IF ERRMSG1 # '' THEN
      ERRMSG = ERRMSG1
      RETURN
  END
  IF NEW.ERRMSG='' THEN
    ERRMSG = 'TRANSFER ERROR'
    RETURN
  END ELSE
  *  ERRMSG=NEW.ERRMSG
  *  RETURN
  *  ERRMSG=''
    MAT SAVE.PHYSI.REC = MAT PHYSI.REC
    READU PHY.SEQ FROM PHY.XREF,CONO:D.TRAN.FROM.WHSE:"!":D.TRAN.FROM.LOC THEN
      MATREADU PHYSI.REC FROM PHY.INV,CONO:PHY.SEQ THEN
        SFND = 0
        REC.CNT = DCOUNT(PHYSI.PRODUCT,VM)
        FOR DD = 1 TO REC.CNT UNTIL (SFND)
          IF PHYSI.PRODUCT<1,DD> = TEMP.PROD THEN
            IF PHYSI.SERIAL<1,DD> = SERIAL.ID THEN
              IF PHYSI.RECP.NO<1,DD> = ISTK.RECP THEN
                SFND = DD
              END
            END
          END
        NEXT DD
        IF SFND # 0 THEN
          PHYSI.TRAN.FROM<1,SFND> = D.TRAN.FROM.WHSE:'!':D.TRAN.FROM.LOC
          PHYSI.TRAN.TO<1,SFND> = D.TRAN.TO.WHSE:'!':D.TRAN.TO.LOC
          MATWRITE PHYSI.REC ON PHY.INV,CONO:PHY.SEQ
        END ELSE
          RELEASE PHY.INV,CONO:PHY.SEQ
        END
      END ELSE
        RELEASE PHY.INV,CONO:PHY.SEQ
      END
    END ELSE
      RELEASE PHY.XREF,CONO:D.TRAN.FROM.WHSE:"!":D.TRAN.FROM.LOC
    END
    MAT PHYSI.REC = MAT SAVE.PHYSI.REC
    PHYSI.PREV.QTY<1,POS> = ISTK.CUR.QTY
    PHYSI.PREV.DIA<1,POS> = ISTK.CUR.DIAM
    PHYSI.PREV.SQTY<1,POS> = ISTK.CUR.STK.QTY
    PHYSI.PRODUCT<1,POS> = ISTK.PROD
    PHYSI.SERIAL<1,POS> = SERIAL.ID
    PHYSI.RECP.NO<1,POS> = ISTK.RECP
    PHYSI.UNIT<1,POS> = INV.UNIT<1,2>
    PHYSI.DESC<1,POS> = INV.DESC
  END
  RETURN
*
*---- END OF PROGRAM
*
END
