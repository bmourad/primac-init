SUBROUTINE POR_REQUISITIONSERVICE_GETITEMALLOCATIONINFO(CONO,VALUE,ERRMSG,STRXML,SCHEMA.ONLY) 
SCHEMA.ONLY = 1
$INCLUDE PMC.CPYLIB PO 
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE PMC.CPYLIB DIVISION
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE CPYLIB CHAR
*
OPEN '','COMPANY' TO COMPANY ELSE ERRMSG = 'COMPANY FILE IS MISSING'; GOTO 93000
OPEN '','CONTROL' TO CONTROL ELSE ERRMSG = 'CONTROL FILE IS MISSING'; GOTO 93000
OPEN '','INVENTORY' TO INVENTORY ELSE ERRMSG = 'INVENTORY FILE IS MISSING'; GOTO 93000
OPEN '','CATEGORY' TO CATEGORY ELSE ERRMSG = 'INVENTORY FILE IS MISSING'; GOTO 93000
OPEN '','INV.WHSE' TO INV.WHSE ELSE ERRMSG = 'INV.WHSE FILE IS MISSING'; GOTO 93000
OPEN '','WAREHOUSE' TO WAREHOUSE ELSE ERRMSG = 'WAREHOUSE FILE IS MISSING'; GOTO 93000
XYZ = ""
XYZ<1> ="IM IN POR_REQUISITIONSERVICE_GETITEMALLOCATIONINFO ";WRITE XYZ ON CONTROL,'01PORITEM'
DEFFUN UOM.CONVERSION.CALC(QTY,FROM.UOM,TO.UOM,WGT,WIDTH,ROND,LN)
STRXML = "<AllocationItem>"
MATREAD COMP.REC FROM COMPANY, CONO ELSE
    ERRMSG = "COMPANY (":CONO:") DOES NOT EXIST"
    GOTO 93000
END
LN = VALUE<1,2> ;*ITEM ALLOCATION LINE NO.
**** ENTER PRODUCT
  MATREAD INV.REC FROM INVENTORY, CONO:VALUE<1,3> ELSE
    ERRMSG = "INVENTORY (":VALUE<1,3>:") IS NOT ON FILE."
    GOTO 93000
  END
  IF INV.M.LINE = 'FNGD' THEN
    IF CO.OPS = 'Y' THEN
      ERRMSG = "FINISHED GOODS PRODUCTS ARE INVALID FOR REGULAR PO'S"
      GOTO 93000
    END
  END
*
  MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
    ERRMSG = "CATEGORY (":INV.LINE:") IS NOT ON FILE."
    GOTO 93000
  END
  IF INV.PAP.TYPE = "REGULAR" OR INV.PAP.TYPE = "REG" OR INV.PAP.TYPE = "" THEN
    PO.PROD.TYPE<1,LN> = "REG"
  END ELSE
    PO.PROD.TYPE<1,LN> = INV.PAP.TYPE
  END
  IF PO.PROD.NUM # "" AND PO.PROD.NUM # VALUE<1,3> THEN
    PO.UNIT.FLG<1,LN> = ""
    PO.JB.UNITS<1,LN> = ""
  END
  IF INV.UNIT<1,2> = INV.UNIT<1,1> THEN
    PO.UNIT.FLG<1,LN> = INV.UNIT<1,1>
  END
IF PO.PROD.TYPE<1,LN> = "REG" THEN PO.UNIT.FLG<1,LN> = INV.UNIT<1,1>
**********
  GOSUB 4000
**********
  CONVFORMAT = ""
  IF DIFF.UM<LN> = "Y" THEN
    IF ICR.CNV<LN,1> = "MD0" THEN
        CONVFORMAT = "MDO"
    END ELSE
        CONVFORMAT = "MD2"
    END
    IF ICR.CNV<LN,2> = "MD0" THEN
       CONVFORMAT = "MDO"
    END ELSE
      IF ICR.CNV<LN,1> = "MD0" THEN
          CONVFORMAT = "MDO"
      END ELSE
          CONVFORMAT = "MD2"
      END
    END
  END ELSE
    IF ICR.CNV<LN,1> = "MD0" THEN
         CONVFORMAT = "MDO"
    END ELSE
         CONVFORMAT = "MD2"
    END
  END
  STRXML := "<PO.PROD.NUM>":VALUE<1,3>:"</PO.PROD.NUM>"
  STRXML := "<PO.PROD.DESC>":INV.FULL.DESC:"</PO.PROD.DESC>"
  STRXML := "<PO.UNIT.FLG>":PO.UNIT.FLG<1,LN>:"</PO.UNIT.FLG>"
  STRXML := "<PO.CONVERSION>":CONVFORMAT:"</PO.CONVERSION>"
  BEGIN CASE
      CASE VALUE<1,1> = 'WHSE'
	**** INPUT WHSE
	  PO.WHSE<1,LN> = VALUE<1,4>
	  PO.DIV.OWNER = VALUE<1,5>
	  *INV.WHSE.KEY = CONO:PO.PROD.NUM<1,LN>:"!":PO.WHSE
	  INV.WHSE.KEY = CONO:VALUE<1,3>:"!":PO.WHSE<1,LN>
	  IF CO.INTR.WHSE # '' AND PO.WHSE<1,LN> = CO.INTR.WHSE THEN
	    ERRMSG = 'CAN NOT APPLY, USING AN INTER-DIVISIONAL WHSE IS RESTRICTED'
	    GOTO 93000
	  END
	  * T26497 ^
	  MATREAD IWH.REC FROM INV.WHSE , INV.WHSE.KEY ELSE
	    ERRMSG = "INV.WHSE RECORD NOT ON FILE" ; GOTO 93000
	  END
	  MATREAD WHSE.REC FROM WAREHOUSE, CONO:PO.WHSE<1,LN> ELSE
	    ERRMSG = "WAREHOUSE RECORD NOT ON FILE"; GOTO 93000
	  END
	  IF WHS.DIV # PO.DIV.OWNER AND PO.DIV.OWNER # "00" THEN
	    ERRMSG = "Warehouse Division does not match the Owning Division"
	    GOTO 93000
	  END
	 * LOCATE PO.VEND.NO IN INV.VENDOR<1>,1 SETTING VV ELSE VV = 0
	  *IF VV AND PO.GROS.PRICE<1,LN>+0=0 THEN PO.GROS.PRICE<1,LN> = INV.PRICE<1,VV>
       CASE VALUE<1,1> = 'QTYORD'
XYZ<-1> ="VALUE ":VALUE;WRITE XYZ ON CONTROL,'01PORITEM'
       TOT.J.OPEN = 0
	       PO.TOT.ONORD<1,LN>= VALUE<1,4>
	       PO.TOT.CANCEL<1,LN>= VALUE<1,5>
	       PO.QTY.OPEN<1,LN>= VALUE<1,6>
	       TOT.J.OPEN = VALUE<1,7>
	       PO.TOT.RECEVED<1,LN> = VALUE<1,8>
	       VALUE = VALUE<1,4>
***********
		IF DIFF.UM<LN> = "Y" THEN
		    FROM.UOM = PO.UNIT.FLG<1,LN>
		    TO.UOM = INV.UNIT<1,2>
		    STK.QTY = UOM.CONVERSION.CALC(VALUE,FROM.UOM,TO.UOM,INV.M.WT,INV.PAP.WIDTH,'','')
		    VALUE = UOM.CONVERSION.CALC(STK.QTY,TO.UOM,FROM.UOM,INV.M.WT,INV.PAP.WIDTH,'','')
		    IF ICR.CNV<LN,2> = "MD0" THEN
		      VALUE = ICONV(((VALUE/ICR.MT1<LN,2>)*ICR.DV1<LN,2>)*ICR.DV2<LN,2>,'MD0')
		    END
		    IF ICR.CNV<LN,1> = "MD0" THEN
		      IF ICR.CNV<LN,2> # "MD0" THEN
			VALUE = VALUE * 10
		      END
		      P_VALUE = ICONV(((VALUE/ICR.DV1<LN,1>)*ICR.MT1<LN,1>)/ICR.DV2<LN,1>,'MD0')
		     * CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
		    END ELSE
*		      VALUE = VALUE * ICR.MT1<LN,1> * 10
*		      P_VALUE = OCONV(INT(VALUE/10) , "MD2")
		      VALUE = VALUE * ICR.MT1<LN,1>
		      P_VALUE = OCONV(INT(VALUE) , "MD2")
		    END
		    IF ICR.CNV<LN,2> = "MD0" THEN
		        P_VALUE = ICONV(((VALUE/ICR.DV1<LN,2>)*ICR.MT1<LN,2>)/ICR.DV2<LN,2>,'MD0')
		    END ELSE
		      IF ICR.CNV<LN,1> = "MD0" THEN
			P_VALUE = OCONV(INT(VALUE/10), "MD2")
		      END ELSE
			P_VALUE = OCONV(INT((VALUE/10)/ICR.MT1<LN,1>), "MD2")
		      END
		    END
		  END ELSE
		    IF ICR.CNV<LN,1> = "MD0" THEN
		      VALUE = ICONV(((VALUE/ICR.MT1<LN,1>)*ICR.DV1<LN,1>)*ICR.DV2<LN,1>,'MD0')
		    END ELSE
		     * VALUE = VALUE * 10
		    END
		  END
***********
	  IF VALUE < PO.TOT.RECEVED<1,LN> + PO.TOT.CANCEL<1,LN> AND PO.TOT.RECEVED<1,LN> > 0 THEN
	    ERRMSG = "TOTAL QUANTITY ORDERED CAN'T BE LESS THAN QUANTITY RECEIVED"
	    GOTO 93000
	  END
XYZ<-1> ="VALUE ":VALUE:"  TOT.J.OPEN  ":TOT.J.OPEN;WRITE XYZ ON CONTROL,'01PORITEM'
	  IF VALUE - TOT.J.OPEN < 0 THEN
	    ERRMSG = "QUANTITY OPEN MUST NOT BE LESS THAN OPEN JOBS ALLOCATION"
	    GOTO 93000
	  END
		  IF PO.TOT.RECEVED<1,LN>+0 # 0 THEN
		    IF VALUE - (PO.TOT.RECEVED<1,LN> + PO.TOT.CANCEL<1,LN>) # 0 THEN
		      IF DIFF.UM<LN> = 'Y' THEN
			IF (INV.UNIT<1,2>='PC' OR INV.UNIT<1,2>='FT') AND INV.UNIT<1,3>='MSI' THEN
			  TEST.OPEN = ABS(VALUE - PO.TOT.RECEVED<1,LN> - PO.TOT.CANCEL<1,LN>)
			  IF TEST.OPEN < 50 THEN PO.TOT.CANCEL<1,LN> = VALUE - PO.TOT.RECEVED<1,LN>
			END
		      END
		    END
		  END
		IF CONVFORMAT = "MD2" THEN
                     STRXML := "<DEFAULT.CANCEL.QTY>":OCONV(PO.TOT.CANCEL<1,LN>,'MD2'):"</DEFAULT.CANCEL.QTY>"
		END ELSE
                     STRXML := "<DEFAULT.CANCEL.QTY>":PO.TOT.CANCEL<1,LN>:"</DEFAULT.CANCEL.QTY>"
		END
	  PO.TOT.ONORD<1,LN> = VALUE
       CASE VALUE<1,1> = 'QTYCANCEL'
	XYZ<-1> ="VALUE ":VALUE;WRITE XYZ ON CONTROL,'01PORITEM'
               TOT.J.OPEN = 0
	       PO.TOT.ONORD<1,LN>= VALUE<1,4>
	       PO.TOT.CANCEL<1,LN>= VALUE<1,5>
	       PO.QTY.OPEN<1,LN>= VALUE<1,6>
	       TOT.J.OPEN = VALUE<1,7>
	       PO.TOT.RECEVED<1,LN> = VALUE<1,8>
	       VALUE = VALUE<1,5>
	XYZ<-1> ="VALUE ":VALUE:"  TOT.J.OPEN  ":TOT.J.OPEN;WRITE XYZ ON CONTROL,'01PORITEM'
		TEST.OPEN = PO.TOT.ONORD<1,LN> - VALUE - PO.TOT.RECEVED<1,LN>
	XYZ<-1> ="TEST.OPEN ":TEST.OPEN:"  PO.TOT.RECEVED<1,LN>  ":PO.TOT.RECEVED<1,LN>;WRITE XYZ ON CONTROL,'01PORITEM'
		IF ABS(TEST.OPEN) <= 50 THEN
		  VALUE += TEST.OPEN 
		  TEST.OPEN = 0
		END
*		IF VALUE # PO.TOT.CANCEL<1,LN> AND TEST.OPEN < 0 THEN
           IF VALUE # "" AND TEST.OPEN < 0 THEN
		  ERRMSG = "QTY CANCELLED SHOULD BE LESS THAN OR EQUAL TO QTY OPEN"
		  GOTO 93000
		END
		IF TEST.OPEN - TOT.J.OPEN < 0 THEN
		   ERRMSG = "QUANTITY OPEN MUST NOT BE LESS THAN OPEN JOBS ALLOCATION"
		   GOTO 93000
		END
		PO.TOT.CANCEL<1,LN> = VALUE
		IF CONVFORMAT = "MD2" THEN
                     STRXML := "<DEFAULT.OPEN.QTY>":OCONV(TEST.OPEN,'MD2'):"</DEFAULT.OPEN.QTY>"
		END ELSE
                     STRXML := "<DEFAULT.OPEN.QTY>":TEST.OPEN:"</DEFAULT.OPEN.QTY>"
		END
       CASE VALUE<1,1> = 'QTYOPEN'
	XYZ<-1> ="VALUE ":VALUE;WRITE XYZ ON CONTROL,'01PORITEM'
               TOT.J.OPEN = 0
	       PO.TOT.ONORD<1,LN>= VALUE<1,4>
	       PO.TOT.CANCEL<1,LN>= VALUE<1,5>
	       PO.QTY.OPEN<1,LN>= VALUE<1,6>
	       TOT.J.OPEN = VALUE<1,7>
	       PO.TOT.RECEVED<1,LN> = VALUE<1,8>
	       VALUE = VALUE<1,6>
	XYZ<-1> ="VALUE ":VALUE:"  TOT.J.OPEN  ":TOT.J.OPEN;WRITE XYZ ON CONTROL,'01PORITEM'
		IF VALUE > (PO.TOT.ONORD<1,LN> - PO.TOT.CANCEL<1,LN>) THEN
		   ERRMSG = "QTY OPEN CANNOT BE GREATER THAN QTY ORDERED"
		   GOTO 93000
		END
		IF VALUE - TOT.J.OPEN < 0 THEN
		   ERRMSG = "QUANTITY OPEN MUST NOT BE LESS THAN OPEN JOBS ALLOCATION" 
		   GOTO 93000
		END
		PO.PREV.RECEVED<1,LN> = PO.TOT.ONORD<1,LN> - (VALUE + PO.TOT.CANCEL<1,LN>)
		PO.TOT.RECEVED<1,LN> = PO.PREV.RECEVED<1,LN>
		PO.QTY.OPEN<1,LN> = VALUE
		IF CONVFORMAT = "MD2" THEN
		     STRXML := "<PO.TOT.RECEIVED>":OCONV(PO.TOT.RECEVED<1,LN>,'MD2'):"</PO.TOT.RECEIVED>"
		END ELSE
                     STRXML := "<PO.TOT.RECEIVED>":PO.TOT.RECEVED<1,LN>:"</PO.TOT.RECEIVED>"
		END
  END CASE  
  STRXML := "</AllocationItem>"
SCHEMA.ONLY = 0
RETURN
**** GET CONVERSIONS
4000*
  BEGIN CASE
    CASE INV.UNIT<1,2> = "SHT" AND INV.UNIT<1,3> = "LBS"
      ICR.CNV<LN,1> = "MD0"; ICR.DV2<LN,1> = 1
      ICR.DV1<LN,1> = INV.M.WT; ICR.MT1<LN,1> = 1
    CASE INV.UNIT<1,2> = "PC" AND INV.UNIT<1,3> = "MSI"
      ICR.CNV<LN,1> = "MD0"; ICR.DV2<LN,1> = 1
      ICR.DV1<LN,1> = INV.PAP.WIDTH/100; ICR.MT1<LN,1> = 10
    CASE INV.UNIT<1,2> = "FT" AND INV.UNIT<1,3> = "MSI"
      ICR.CNV<LN,1> = "MD0"; ICR.DV2<LN,1> = 12
      ICR.DV1<LN,1> = INV.PAP.WIDTH/100; ICR.MT1<LN,1> = 100
    CASE 1
      ICR.CNV<LN,1> = "MD2"; ICR.DV2<LN,1> = 1
      ICR.DV1<LN,1> = 10; ICR.MT1<LN,1> = INV.SBR
  END CASE
  BEGIN CASE
    CASE PO.UNIT.FLG<1,LN> = "SHT" AND INV.UNIT<1,3> = "LBS"
      ICR.CNV<LN,2> = "MD0"; ICR.DV2<LN,2> = 1
      ICR.DV1<LN,2> = INV.M.WT; ICR.MT1<LN,2> = 1
    CASE PO.UNIT.FLG<1,LN> = "PC" AND INV.UNIT<1,3> = "MSI"
      ICR.CNV<LN,2> = "MD0"; ICR.DV2<LN,2> = 1
      ICR.DV1<LN,2> = INV.PAP.WIDTH/100; ICR.MT1<LN,2> = 10
    CASE PO.UNIT.FLG<1,LN> = "FT" AND INV.UNIT<1,3> = "MSI"
      ICR.CNV<LN,2> = "MD0"; ICR.DV2<LN,2> = 12
      ICR.DV1<LN,2> = INV.PAP.WIDTH/100; ICR.MT1<LN,2> = 100
    CASE 1
      ICR.CNV<LN,2> = "MD2"; ICR.DV2<LN,2> = 1
      ICR.DV1<LN,2> = 10; ICR.MT1<LN,2> = 1
  END CASE
  IF PO.UNIT.FLG<1,LN> # INV.UNIT<1,2> THEN DIFF.UM<LN> = "Y" ELSE DIFF.UM<LN> = "N"
  RETURN
93000*
SCHEMA.ONLY = 0
 STRXML = "<AllocationItem><ErrMsg>": ERRMSG:"</ErrMsg></AllocationItem>"
END
