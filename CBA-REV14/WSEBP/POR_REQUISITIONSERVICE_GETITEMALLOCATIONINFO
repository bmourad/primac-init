SUBROUTINE POR_REQUISITIONSERVICE_GETITEMALLOCATIONINFO(CONO,VALUE,ERRMSG,STRXML,SCHEMA.ONLY) 
*T121409 
SCHEMA.ONLY = 1
$INCLUDE PMC.CPYLIB PO 
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE PMC.CPYLIB DIVISION
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE ICS.CPYLIB PO.RSKI.XREF
$INCLUDE CPYLIB CHAR
*
OPEN '','COMPANY' TO COMPANY ELSE ERRMSG = 'COMPANY FILE IS MISSING'; GOTO 93000
OPEN '','CONTROL' TO CONTROL ELSE ERRMSG = 'CONTROL FILE IS MISSING'; GOTO 93000
OPEN '','INVENTORY' TO INVENTORY ELSE ERRMSG = 'INVENTORY FILE IS MISSING'; GOTO 93000
OPEN '','CATEGORY' TO CATEGORY ELSE ERRMSG = 'INVENTORY FILE IS MISSING'; GOTO 93000
OPEN '','INV.WHSE' TO INV.WHSE ELSE ERRMSG = 'INV.WHSE FILE IS MISSING'; GOTO 93000
OPEN '','WAREHOUSE' TO WAREHOUSE ELSE ERRMSG = 'WAREHOUSE FILE IS MISSING'; GOTO 93000
OPEN 'PO.RSKI.XREF' TO PO.RSKI.XREF ELSE ERRMSG = 'PO.RSKI.XREF FILE IS MISSING'; GOTO 93000
*T121409 v
OPEN '','REG.REQ' TO REG.REQ ELSE ERRMSG = 'REG.REQ FILE IS MISSING'; GOTO 93000
OPEN '','PO' TO PO ELSE ERRMSG = 'PO FILE IS MISSING'; GOTO 93000
*T121409 ^
MAT PO.REC = ""
*CONO = "001"
*VALUE  = "UOM!LBS":@AM:"2":@AM:"EPSFS2"
*DEBUG
DEFFUN PRIDGET_UOM_CONVERSION_CALC(QTY,FROM.UOM,TO.UOM,WGT,WIDTH,ROND,LN)
UOM_FLAG = "N"
STRXML = "<AllocationItem>"
MATREAD COMP.REC FROM COMPANY, CONO ELSE
  ERRMSG = "COMPANY (":CONO:") DOES NOT EXIST"
  GOTO 93000
END
LN = VALUE<2> ;*ITEM ALLOCATION LINE NO.
IF INDEX(VALUE<1>,"!",1) > 0 THEN
 INPUT_UOM = FIELD(VALUE<1>,"!",2)
 VALUE<1> = FIELD(VALUE<1>,"!",1)
END
IF VALUE<1> = "Terms" THEN GOTO 333
**** ENTER PRODUCT
MATREAD INV.REC FROM INVENTORY, CONO:VALUE<3> ELSE
  ERRMSG = "INVENTORY (":VALUE<3>:") IS NOT ON FILE."
  GOTO 93000
END
IF INV.M.LINE = 'FNGD' THEN
  IF CO.OPS = 'Y' THEN
    ERRMSG = "FINISHED GOODS PRODUCTS ARE INVALID FOR REGULAR PO'S"
    GOTO 93000
  END
END
*
MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
  ERRMSG = "CATEGORY (":INV.LINE:") IS NOT ON FILE."
  GOTO 93000
END
 IF INV.PAP.TYPE = "REGULAR" OR INV.PAP.TYPE = "REG" OR INV.PAP.TYPE = "" THEN
    PO.PROD.TYPE<1,LN> = "REG"
  END ELSE
    PO.PROD.TYPE<1,LN> = INV.PAP.TYPE
  END
  PO.JB.UNITS<1,LN> = INV.UNIT<1,2>
  IF INV.UNIT<1,2> = INV.UNIT<1,1> THEN
    PO.UNIT.FLG<1,LN> = INV.UNIT<1,1>
    GOTO 1070
  END
  IF PO.PROD.TYPE<1,LN> = "REG" THEN
    PO.UNIT.FLG<1,LN> = INV.UNIT<1,1>
  END ELSE
    IF INPUT_UOM # "" THEN
       PO.UNIT.FLG<1,LN> = INPUT_UOM
    END ELSE
       PO.UNIT.FLG<1,LN> = INV.UNIT<1,1>
    END
    UOM_FLAG = "Y"
  END
1070
  ROLL_FLAG = "0"
  BEGIN CASE
    CASE INV.PAP.TYPE = "ROLL"
    CASE INV.PAP.TYPE = "LROLL"
    CASE INV.PAP.TYPE = "PCOAT"
    CASE INV.PAP.TYPE = "SHEET"
    CASE 1
     ROLL_FLAG = 1
      *GOTO 1290
  END CASE
  IF CATG.TRK.LVL#'S' OR CATG.BARCODE#'Y' THEN 
    ROLL_FLAG = 1
   * GOTO 1290
  END
  STRXML := "<ROLL.FLAG>":ROLL_FLAG:"</ROLL.FLAG>"
**********
GOSUB 4000
**********
STRXML := "<PO.PROD.NUM>":VALUE<3>:"</PO.PROD.NUM>"
STRXML := "<PO.PROD.DESC>":INV.FULL.DESC:"</PO.PROD.DESC>"
STRXML := "<UOM.FLAG>":UOM_FLAG:"</UOM.FLAG>"
IF DIFF.UM<LN> = "Y" THEN
  STRXML := "<PO.JB.UNITS>":PO.JB.UNITS<1,LN>:"</PO.JB.UNITS>"
  STRXML := "<PO.UNIT.FLG>":PO.UNIT.FLG<1,LN>:"</PO.UNIT.FLG>"
END ELSE
  STRXML := "<PO.UNIT.FLG>":PO.UNIT.FLG<1,LN>:"</PO.UNIT.FLG>"
END
333*
BEGIN CASE
  CASE VALUE<1> = 'UOM'
    VALUE = INPUT_UOM
    VALDAT = INV.UNIT<1,1>
    HMSG = INV.UNIT<1,1>
    IF INV.UNIT<1,1> # INV.UNIT<1,2> THEN
      VALDAT = VALDAT : VM : INV.UNIT<1,2>
      HMSG = HMSG :" , ":INV.UNIT<1,2>
     END
    IF INV.UNIT<1,3> # INV.UNIT<1,1> THEN
      VALDAT = VALDAT : VM : INV.UNIT<1,3>
      HMSG = HMSG :" , ":INV.UNIT<1,3>
    END
    LOCATE VALUE IN VALDAT<1>,1 SETTING YY ELSE YY = 0
    IF NOT(YY) THEN
      ERRMSG = "INVALID UOM FOR PRODUCT ":VALUE<3>; GOTO 93000
    END
    PO.UNIT.FLG<1,LN> = VALUE
 1065*
    GOSUB 4000
    IF DIFF.UM<LN> = "Y" THEN
      P_VALUE<1,1> = PO.JB.UNITS<1,LN>
      P_VALUE<1,2> = PO.UNIT.FLG<1,LN>
      STRXML := "<PO.JB.UNITS.UOM>":P_VALUE<1,1>:"</PO.JB.UNITS.UOM>"
      STRXML := "<PO.UNIT.FLG.UOM>":P_VALUE<1,2>:"</PO.UNIT.FLG.UOM>"
   END ELSE
      STRXML := "<PO.UNIT.FLG.UOM>":PO.UNIT.FLG<1,LN>:"</PO.UNIT.FLG.UOM>"
   END
  CASE VALUE<1> = 'WHSE'
  **** INPUT WHSE
    PO.WHSE<1,LN> = VALUE<4>
    PO.DIV.OWNER = VALUE<5>
	  PO.VEND.NO = VALUE<6>
	  PO.DATE = ICONV(VALUE<7>,'D2/')
    *INV.WHSE.KEY = CONO:PO.PROD.NUM<1,LN>:"!":PO.WHSE
    INV.WHSE.KEY = CONO:VALUE<3>:"!":PO.WHSE<1,LN>
    IF CO.INTR.WHSE # '' AND PO.WHSE<1,LN> = CO.INTR.WHSE THEN
      ERRMSG = 'CAN NOT APPLY, USING AN INTER-DIVISIONAL WHSE IS RESTRICTED'
      GOTO 93000
    END
    * T26497 ^
    MATREAD IWH.REC FROM INV.WHSE , INV.WHSE.KEY ELSE
      ERRMSG = "INV.WHSE RECORD NOT ON FILE" ; GOTO 93000
    END
    MATREAD WHSE.REC FROM WAREHOUSE, CONO:PO.WHSE<1,LN> ELSE
      ERRMSG = "WAREHOUSE RECORD NOT ON FILE"; GOTO 93000
    END
    IF WHS.DIV # PO.DIV.OWNER AND PO.DIV.OWNER # "00" THEN
      ERRMSG = "Warehouse Division does not match the Owning Division"
      GOTO 93000
    END
	  LOCATE PO.VEND.NO IN INV.VENDOR<1>,1 SETTING VV ELSE VV = 0
	 *IF VV AND PO.GROS.PRICE<1,LN>+0=0 THEN PO.GROS.PRICE<1,LN> = INV.PRICE<1,VV>
	  IF VV THEN
	      DEFAULT = OCONV((PO.DATE + INV.LEAD.TIME<1,VV>) , "D2/")
	      PO.GROS.PRICE<1,LN> = INV.PRICE<1,VV>
	      STRXML := "<PO.DEL.DATE>":DEFAULT:"</PO.DEL.DATE>"
	      STRXML := "<PO.GROS.PRICE>":OCONV(PO.GROS.PRICE<1,LN>,'MD4'):"</PO.GROS.PRICE>"
	  END
  CASE VALUE<1> = 'QTYORD'
    PO.TOT.ONORD<1,LN>= VALUE<4>
    PO.TOT.CANCEL<1,LN>= VALUE<5>
    PO.QTY.OPEN<1,LN>= VALUE<6>
         *TOT.J.OPEN = VALUE<7>
    PO.JB.ONORD = FIELD(VALUE<7>,"!",1)
    PO.JB.RECEVED = FIELD(VALUE<7>,"!",2)
    PO.JB.OPEN = FIELD(VALUE<7>,"!",3)
    *T121409 v
     PO_REQ_ID = VALUE<9>
     PRIDGET = VALUE<10>
     PO.PREV.RECEVED = VALUE<11>
     GOSUB 1009
    *T121409^
    GOSUB 8888
*
*
    PO.TOT.RECEVED<1,LN> = VALUE<8>
    IF PO.TOT.RECEVED<1,LN> = "" THEN PO.TOT.RECEVED<1,LN> = 0
    VALUE = PO.TOT.ONORD<1,LN>  
    GOSUB 15000
    PO.TOT.ONORD<1,LN> = VALUE
********
    VALUE = PO.TOT.CANCEL<1,LN>
    GOSUB 16000
    PO.TOT.CANCEL<1,LN> = VALUE
    *
    VALUE = PO.QTY.OPEN<1,LN>
    GOSUB 17000
    PO.QTY.OPEN<1,LN> = VALUE
 * IF PO.TOT.RECEVED<1,LN> > 0 THEN
 *  PO.TOT.RECEVED<1,LN> =  PO.TOT.ONORD<1,LN> - (VALUE + PO.TOT.CANCEL)
 * END
*******
*         VALUE = VALUE<4>
VALUE = PO.TOT.ONORD<1,LN>
    IF VALUE < PO.TOT.RECEVED<1,LN> + PO.TOT.CANCEL<1,LN> AND PO.TOT.RECEVED<1,LN> > 0 THEN
      ERRMSG = "TOTAL QUANTITY ORDERED CAN'T BE LESS THAN QUANTITY RECEIVED"
      GOTO 93000
    END
    IF VALUE - TOT.J.OPEN < 0 THEN
      ERRMSG = "QUANTITY OPEN MUST NOT BE LESS THAN OPEN JOBS ALLOCATION"
      GOTO 93000
    END
    IF PO.TOT.RECEVED<1,LN>+0 # 0 THEN
      IF VALUE - (PO.TOT.RECEVED<1,LN> + PO.TOT.CANCEL<1,LN>) # 0 THEN
        IF DIFF.UM<LN> = 'Y' THEN
          IF (INV.UNIT<1,2>='PC' OR INV.UNIT<1,2>='FT') AND INV.UNIT<1,3>='MSI' THEN
            TEST.OPEN = ABS(VALUE - PO.TOT.RECEVED<1,LN> - PO.TOT.CANCEL<1,LN>)
            IF TEST.OPEN < 50 THEN PO.TOT.CANCEL<1,LN> = VALUE - PO.TOT.RECEVED<1,LN>
          END
        END
      END
    END
    PO.TOT.ONORD<1,LN> = VALUE
*    VALUE = PO.TOT.CANCEL<1,LN>
*    GOSUB 16000
*    PO.TOT.CANCEL<1,LN> = VALUE
  IF DIFF.UM<LN> = "Y" THEN
   * Y = SLN + 1
    IF ICR.CNV<LN,2> = "MD0" THEN
      DEFAULT = ICONV(((PO.TOT.CANCEL<1,LN>/ICR.DV1<LN,2>)*ICR.MT1<LN,2>)/ICR.DV2<LN,2>,'MD0')
    END ELSE
      IF ICR.CNV<LN,1> = "MD0" THEN
        DEFAULT = OCONV(INT(PO.TOT.CANCEL<1,LN>/10), "MD2")
      END ELSE
        DEFAULT = OCONV(INT((PO.TOT.CANCEL<1,LN>/10)/ICR.MT1<LN,1>), "MD2")
	*DEFAULT = OCONV(INT((PO.TOT.CANCEL<1,LN>)/ICR.MT1<LN,1>), "MD2")
      END
    END
  END ELSE
    *Y = SLN
    IF ICR.CNV<LN,1> = "MD0" THEN
      DEFAULT = ICONV(((PO.TOT.CANCEL<1,LN>/ICR.DV1<LN,1>)*ICR.MT1<LN,1>)/ICR.DV2<LN,1>,'MD0')
    END ELSE
       DEFAULT = OCONV(INT(PO.TOT.CANCEL<1,LN>/10), "MD2")
       *DEFAULT = OCONV(INT(PO.TOT.CANCEL<1,LN>), "MD2")
    END
  END
   STRXML := "<DEFAULT.CANCEL.QTY>":DEFAULT:"</DEFAULT.CANCEL.QTY>"
  CASE VALUE<1> = 'QTYCANCEL'
    PO.TOT.ONORD<1,LN>= VALUE<4>
    PO.TOT.CANCEL<1,LN>= VALUE<5>
    PO.QTY.OPEN<1,LN>= VALUE<6>
         *TOT.J.OPEN = VALUE<7>
    PO.JB.ONORD = FIELD(VALUE<7>,"!",1)
    PO.JB.RECEVED = FIELD(VALUE<7>,"!",2)
    PO.JB.OPEN = FIELD(VALUE<7>,"!",3)
    *T121409 v
     PO_REQ_ID = VALUE<10>
     PRIDGET = VALUE<11>
     PO.PREV.RECEVED = VALUE<12>
     GOSUB 1009
    *T121409^
    GOSUB 8888
    PO.TOT.RECEVED<1,LN> = VALUE<8>
    PREV.PO.TOT.CANCEL = VALUE<9>
    VALUE = PO.TOT.ONORD<1,LN>  
    GOSUB 15000
    PO.TOT.ONORD<1,LN> = VALUE
    VALUE = PO.TOT.CANCEL<1,LN>
    GOSUB 16000
    PO.TOT.CANCEL<1,LN> = VALUE
*
    VALUE = PREV.PO.TOT.CANCEL
    GOSUB 16000
    PREV.PO.TOT.CANCEL = VALUE
********
    VALUE = PO.QTY.OPEN<1,LN>
    GOSUB 17000
    PO.QTY.OPEN<1,LN> = VALUE
 * IF PO.TOT.RECEVED<1,LN> > 0 THEN
 *  PO.TOT.RECEVED<1,LN> =  PO.TOT.ONORD<1,LN> - (VALUE + PREV.PO.TOT.CANCEL)
 * END
*******
    VALUE = PO.TOT.CANCEL<1,LN>
    TEST.OPEN = PO.TOT.ONORD<1,LN> - VALUE - PO.TOT.RECEVED<1,LN>
    IF ABS(TEST.OPEN) <= 50 THEN
      VALUE += TEST.OPEN 
      TEST.OPEN = 0
    END
    IF VALUE # PREV.PO.TOT.CANCEL AND TEST.OPEN < 0 THEN
*    IF VALUE # "" AND TEST.OPEN < 0 THEN
      ERRMSG = "QTY CANCELLED SHOULD BE LESS THAN OR EQUAL TO QTY OPEN"
      GOTO 93000
    END
    IF TEST.OPEN - TOT.J.OPEN < 0 THEN
      ERRMSG = "QUANTITY OPEN MUST NOT BE LESS THAN OPEN JOBS ALLOCATION"
      GOTO 93000
    END
    PO.TOT.CANCEL<1,LN> = VALUE
    GOSUB 2000
  CASE VALUE<1> = 'QTYOPEN'
    PO.TOT.ONORD<1,LN>= VALUE<4>
    PO.TOT.CANCEL<1,LN>= VALUE<5>
    PO.QTY.OPEN<1,LN>= VALUE<6>
         *TOT.J.OPEN = VALUE<7>
    PO.JB.ONORD = FIELD(VALUE<7>,"!",1)
    PO.JB.RECEVED = FIELD(VALUE<7>,"!",2)
    PO.JB.OPEN = FIELD(VALUE<7>,"!",3)
    *T121409 v
     PO_REQ_ID = VALUE<11>
     PRIDGET = VALUE<12>
     PO.PREV.RECEVED = VALUE<13>
     GOSUB 1009
    *T121409^
    GOSUB 8888
    PO.TOT.RECEVED<1,LN> = VALUE<8>
    PREV.TOT.ONORD = VALUE<9>
    PREV.NO.OF.ROLLS = VALUE<10>
****
    VALUE = PREV.TOT.ONORD
    GOSUB 15000
    PREV.TOT.ONORD = VALUE
***
    VALUE = PO.TOT.ONORD<1,LN>  
    GOSUB 15000
    PO.TOT.ONORD<1,LN> = VALUE
    VALUE = PO.TOT.CANCEL<1,LN>
    GOSUB 16000
    PO.TOT.CANCEL<1,LN> = VALUE
    VALUE = PO.QTY.OPEN<1,LN>
    GOSUB 17000
    PO.QTY.OPEN<1,LN> = VALUE
*         VALUE = VALUE<6>
    IF VALUE > (PO.TOT.ONORD<1,LN> - PO.TOT.CANCEL<1,LN>) THEN
      ERRMSG = "QTY OPEN CANNOT BE GREATER THAN QTY ORDERED"
      GOTO 93000
    END
    IF VALUE - TOT.J.OPEN < 0 THEN
      ERRMSG = "QUANTITY OPEN MUST NOT BE LESS THAN OPEN JOBS ALLOCATION" 
      GOTO 93000
    END
    PO.PREV.RECEVED<1,LN> = PO.TOT.ONORD<1,LN> - (VALUE + PO.TOT.CANCEL<1,LN>)
    PO.TOT.RECEVED<1,LN> = PO.PREV.RECEVED<1,LN>
    PO.QTY.OPEN<1,LN> = VALUE
*T121409 v
*    IF CONVFORMAT = "MD2" THEN
*      STRXML := "<PO.TOT.RECEIVED>":OCONV(PO.TOT.RECEVED<1,LN>,'MD2'):"</PO.TOT.RECEIVED>"
*    END ELSE
*      STRXML := "<PO.TOT.RECEIVED>":PO.TOT.RECEVED<1,LN>:"</PO.TOT.RECEIVED>"
*    END
     STRXML := "<PO.TOT.RECEIVED>":PO.TOT.RECEVED<1,LN>:"</PO.TOT.RECEIVED>"
     STRXML := "<PO.PREV.RECEVED>": PO.PREV.RECEVED :"</PO.PREV.RECEVED>"
*T121409 ^
    GOSUB 18000;*TO GET THE DEFAULT VALUE FOR ROLLs
  CASE VALUE<1> = 'ROLSHTORLAB'
    IF CATG.TRK.LVL#'S' OR CATG.BARCODE#'Y' THEN GOTO 1290
    PO.CODE = VALUE<4>
    VALUE= VALUE<5>
    MATREAD RSXRF.REC FROM PO.RSKI.XREF, CONO:PO.CODE ELSE
      MAT RSXRF.REC = ""
    END
    RSCNT = DCOUNT(RSXRF.LN.NO<1>,VM)
    RLCNT = 0
    FOR R = 1 TO RSCNT
      IF RSXRF.LN.NO<1,R> = LN THEN RLCNT = RLCNT + 1
    NEXT R
    IF VALUE LT RLCNT THEN
      ERRMSG = 'Cannot enter # smaller than the # of rolls already created for this line.'
      GOTO 93000
    END
    PO.NO.OF.ROLLS<1,LN> = VALUE
CASE VALUE<1> = "Terms"
   ECD.RET.VALUE=VALUE<3>
   IF NOT(ECD.RET.VALUE MATCH "3N") AND NOT(ECD.RET.VALUE MATCH "1X2N") THEN
      ERRMSG = 'Invalid pattern match for terms'
      GOTO 93000
   END
   OPO.TERMS.DESC = ECD.RET.VALUE
1290*
END CASE  
STRXML := "</AllocationItem>"
SCHEMA.ONLY = 0
RETURN
**** GET CONVERSIONS
4000*
BEGIN CASE
  CASE INV.UNIT<1,2> = "SHT" AND INV.UNIT<1,3> = "LBS"
    ICR.CNV<LN,1> = "MD0"; ICR.DV2<LN,1> = 1
    ICR.DV1<LN,1> = INV.M.WT; ICR.MT1<LN,1> = 1
  CASE INV.UNIT<1,2> = "PC" AND INV.UNIT<1,3> = "MSI"
    ICR.CNV<LN,1> = "MD0"; ICR.DV2<LN,1> = 1
    ICR.DV1<LN,1> = INV.PAP.WIDTH/100; ICR.MT1<LN,1> = 10
  CASE INV.UNIT<1,2> = "FT" AND INV.UNIT<1,3> = "MSI"
    ICR.CNV<LN,1> = "MD0"; ICR.DV2<LN,1> = 12
    ICR.DV1<LN,1> = INV.PAP.WIDTH/100; ICR.MT1<LN,1> = 100
  CASE 1
    ICR.CNV<LN,1> = "MD2"; ICR.DV2<LN,1> = 1
    ICR.DV1<LN,1> = 10; ICR.MT1<LN,1> = INV.SBR
END CASE
BEGIN CASE
  CASE PO.UNIT.FLG<1,LN> = "SHT" AND INV.UNIT<1,3> = "LBS"
    ICR.CNV<LN,2> = "MD0"; ICR.DV2<LN,2> = 1
    ICR.DV1<LN,2> = INV.M.WT; ICR.MT1<LN,2> = 1
  CASE PO.UNIT.FLG<1,LN> = "PC" AND INV.UNIT<1,3> = "MSI"
    ICR.CNV<LN,2> = "MD0"; ICR.DV2<LN,2> = 1
    ICR.DV1<LN,2> = INV.PAP.WIDTH/100; ICR.MT1<LN,2> = 10
  CASE PO.UNIT.FLG<1,LN> = "FT" AND INV.UNIT<1,3> = "MSI"
    ICR.CNV<LN,2> = "MD0"; ICR.DV2<LN,2> = 12
    ICR.DV1<LN,2> = INV.PAP.WIDTH/100; ICR.MT1<LN,2> = 100
  CASE 1
    ICR.CNV<LN,2> = "MD2"; ICR.DV2<LN,2> = 1
    ICR.DV1<LN,2> = 10; ICR.MT1<LN,2> = 1
END CASE
IF PO.UNIT.FLG<1,LN> # INV.UNIT<1,2> THEN DIFF.UM<LN> = "Y" ELSE DIFF.UM<LN> = "N"
*******
CONVFORMAT = ""
  IF DIFF.UM<LN> = "Y" THEN
    IF ICR.CNV<LN,2> = "MD0" THEN
        CONVFORMAT<1,2> = "MD0"
    END ELSE
        IF ICR.CNV<LN,1> = "MD0" THEN
	  IF ICR.CNV<LN,2> # "MD0" THEN
           CONVFORMAT<1,2> = "MD2"
	  END ELSE
           CONVFORMAT<1,1> = "MD0"
	  END
        END ELSE
           CONVFORMAT<1,1> = "MD2"
        END
    END
  END ELSE
    IF ICR.CNV<LN,1> = "MD0" THEN
            CONVFORMAT<1,1> = "MD0"
    END ELSE
            CONVFORMAT<1,1> = "MD2"
    END
  END
 STRXML := "<PO.CONVERSION>":CONVFORMAT:"</PO.CONVERSION>"
RETURN
*
*QTY ORDER CONVERSION
*
15000*
IF DIFF.UM<LN> = "Y" THEN
  FROM.UOM = PO.UNIT.FLG<1,LN>
  TO.UOM = INV.UNIT<1,2>
  STK.QTY = PRIDGET_UOM_CONVERSION_CALC(VALUE,FROM.UOM,TO.UOM,INV.M.WT,INV.PAP.WIDTH,'','')
  VALUE = PRIDGET_UOM_CONVERSION_CALC(STK.QTY,TO.UOM,FROM.UOM,INV.M.WT,INV.PAP.WIDTH,'','')
  IF ICR.CNV<LN,2> = "MD0" THEN
    VALUE = ICONV(((VALUE/ICR.MT1<LN,2>)*ICR.DV1<LN,2>)*ICR.DV2<LN,2>,'MD0')
  END
  IF ICR.CNV<LN,1> = "MD0" THEN
   TEMPVALUE = VALUE
    IF ICR.CNV<LN,2> # "MD0" THEN
     VALUE = VALUE * 10
     *TEMPVALUE = VALUE 
    END
    P_VALUE = ICONV(((VALUE/ICR.DV1<LN,1>)*ICR.MT1<LN,1>)/ICR.DV2<LN,1>,'MD0')
    *P_VALUE = ICONV(((TEMPVALUE/ICR.DV1<LN,1>)*ICR.MT1<LN,1>)/ICR.DV2<LN,1>,'MD0')
       * CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  END ELSE
       VALUE = VALUE * ICR.MT1<LN,1> * 10
       P_VALUE = OCONV(INT(VALUE/10) , "MD2")
      * VALUE = VALUE * ICR.MT1<LN,1>
      * P_VALUE = OCONV(INT(VALUE) , "MD2")
  END
STRXML := "<EX.PO.QTY.ORD>":P_VALUE:"</EX.PO.QTY.ORD>"
  IF ICR.CNV<LN,2> = "MD0" THEN
    P_VALUE = ICONV(((VALUE/ICR.DV1<LN,2>)*ICR.MT1<LN,2>)/ICR.DV2<LN,2>,'MD0')
  END ELSE
    IF ICR.CNV<LN,1> = "MD0" THEN
      P_VALUE = OCONV(INT(VALUE/10), "MD2")
    END ELSE
      P_VALUE = OCONV(INT((VALUE/10)/ICR.MT1<LN,1>), "MD2")
    END
  END
END ELSE
  IF ICR.CNV<LN,1> = "MD0" THEN
    VALUE = ICONV(((VALUE/ICR.MT1<LN,1>)*ICR.DV1<LN,1>)*ICR.DV2<LN,1>,'MD0')
  END ELSE
        VALUE = VALUE * 10
  END
END
RETURN
*
*QTY CANCEL CONVERSION
*
16000*
IF DIFF.UM<LN> = "Y" THEN
  IF ICR.CNV<LN,2> = "MD0" THEN
    VALUE = ICONV(((VALUE/ICR.MT1<LN,2>)*ICR.DV1<LN,2>)*ICR.DV2<LN,2>,'MD0')
  END
  IF ICR.CNV<LN,1> = "MD0" THEN
    TEMPVALUE = VALUE
    IF ICR.CNV<LN,2> # "MD0" THEN
        VALUE = VALUE * 10
       *TEMPVALUE = VALUE
    END
    IF (INV.UNIT<1,2> = 'PC' OR INV.UNIT<1,2> = 'FT') AND INV.UNIT<1,3> = 'MSI' THEN
      TEST.OPEN = PO.TOT.ONORD<1,LN> - PO.TOT.RECEVED<1,LN>
      IF ABS(TEST.OPEN-VALUE) < 50 THEN VALUE = TEST.OPEN
      *IF ABS(TEST.OPEN-VALUE) < 50 THEN TEMPVALUE = TEST.OPEN
    END
    P_VALUE = ICONV(((VALUE/ICR.DV1<LN,1>)*ICR.MT1<LN,1>)/ICR.DV2<LN,1>,'MD0')
    *P_VALUE = ICONV(((TEMPVALUE/ICR.DV1<LN,1>)*ICR.MT1<LN,1>)/ICR.DV2<LN,1>,'MD0')
  END ELSE
      VALUE = VALUE * ICR.MT1<LN,1> * 10
      P_VALUE = OCONV(INT(VALUE/10) , "MD2")
     * VALUE = VALUE * ICR.MT1<LN,1>
     * P_VALUE = OCONV(INT(VALUE) , "MD2")
  END
  STRXML := "<EX.PO.QTY.CANCEL>":P_VALUE:"</EX.PO.QTY.CANCEL>"
  IF ICR.CNV<LN,2> = "MD0" THEN
    P_VALUE = ICONV(((VALUE/ICR.DV1<LN,2>)*ICR.MT1<LN,2>)/ICR.DV2<LN,2>,'MD0')
  END ELSE
    IF ICR.CNV<LN,1> = "MD0" THEN
      P_VALUE = OCONV(INT(VALUE/10), "MD2")
    END ELSE
      P_VALUE = OCONV(INT((VALUE/10)/ICR.MT1<LN,1>), "MD2") 
    END
  END
END ELSE
  IF ICR.CNV<LN,1> = "MD0" THEN
    VALUE = ICONV(((VALUE/ICR.MT1<LN,1>)*ICR.DV1<LN,1>)*ICR.DV2<LN,1>,'MD0')
  END ELSE
      VALUE = VALUE * 10
  END
END
RETURN
*
*QTY OPEN CONVERSION
*
 17000*
IF DIFF.UM<LN> = "Y" THEN
  IF ICR.CNV<LN,2> = "MD0" THEN
    VALUE = ICONV(((VALUE/ICR.MT1<LN,2>)*ICR.DV1<LN,2>)*ICR.DV2<LN,2>,'MD0')
  END
  IF ICR.CNV<LN,1> = "MD0" THEN
     TEMPVALUE = VALUE
    IF ICR.CNV<LN,2> # "MD0" THEN
          VALUE = VALUE * 10
	  *TEMPVALUE = VALUE 
    END
    P_VALUE = ICONV(((VALUE/ICR.DV1<LN,1>)*ICR.MT1<LN,1>)/ICR.DV2<LN,1>,'MD0')
   * P_VALUE = ICONV(((TEMPVALUE/ICR.DV1<LN,1>)*ICR.MT1<LN,1>)/ICR.DV2<LN,1>,'MD0')
  END ELSE
        VALUE = VALUE * ICR.MT1<LN,1> * 10
        P_VALUE = OCONV(INT(VALUE/10) , "MD2")
       * VALUE = VALUE * ICR.MT1<LN,1>
       * P_VALUE = OCONV(INT(VALUE) , "MD2")
  END
   STRXML := "<EX.PO.QTY.OPEN>":P_VALUE:"</EX.PO.QTY.OPEN>"
  IF ICR.CNV<LN,2> = "MD0" THEN
    P_VALUE = ICONV(((VALUE/ICR.DV1<LN,2>)*ICR.MT1<LN,2>)/ICR.DV2<LN,2>,'MD0')
  END ELSE
    IF ICR.CNV<LN,1> = "MD0" THEN
      P_VALUE = OCONV(INT(VALUE/10), "MD2") 
    END ELSE
      P_VALUE = OCONV(INT((VALUE/10)/ICR.MT1<LN,1>), "MD2")
    END
  END
END ELSE
  IF ICR.CNV<LN,1> = "MD0" THEN
    VALUE = ICONV(((VALUE/ICR.MT1<LN,1>)*ICR.DV1<LN,1>)*ICR.DV2<LN,1>,'MD0')
  END ELSE
        VALUE = VALUE * 10
  END
END
RETURN
**** CALCULATE OPEN QTY
2000*
P_VALUE = ""
EX_P_VALUE = ""
VALUE = PO.TOT.ONORD<1,LN> - (PO.TOT.RECEVED<1,LN> + PO.TOT.CANCEL<1,LN> )
PO.QTY.OPEN<1,LN> = VALUE
IF ICR.CNV<LN,1> = "MD0" THEN
  P_VALUE = INT(((VALUE/ICR.DV1<LN,1>)*ICR.MT1<LN,1>)/ICR.DV2<LN,1> + .5)
END ELSE
    P_VALUE = OCONV(INT(VALUE/10), "MD2")
  *P_VALUE = OCONV(INT(VALUE), "MD2")
END
STRXML := "<DEFAULT.OPEN.QTY>": P_VALUE :"</DEFAULT.OPEN.QTY>"
IF DIFF.UM<LN> = "Y" THEN
  IF ICR.CNV<LN,2> = "MD0" THEN
    EX_P_VALUE = OCONV(INT(((VALUE/ICR.DV1<LN,2>)*ICR.MT1<LN,2>)/ICR.DV2<LN,2> + .5), ICR.CNV<LN,2>)
  END ELSE
    IF ICR.CNV<LN,1> = "MD0" THEN
       EX_P_VALUE = OCONV(INT(VALUE/10), "MD2")
 *     EX_P_VALUE = OCONV(INT(VALUE), "MD2")
    END ELSE
       EX_P_VALUE = OCONV(INT((VALUE/10)/ICR.MT1<LN,1>), "MD2")
       * EX_P_VALUE = OCONV(INT((VALUE)/ICR.MT1<LN,1>), "MD2")
    END
  END
  STRXML := "<EX.DEFAULT.OPEN.QTY>": EX_P_VALUE :"</EX.DEFAULT.OPEN.QTY>"
END
RETURN
*
18000*
  BEGIN CASE
    CASE INV.PAP.TYPE = "ROLL"
    CASE INV.PAP.TYPE = "LROLL"
    CASE INV.PAP.TYPE = "PCOAT"
    CASE INV.PAP.TYPE = "SHEET"
    CASE 1
      *GOTO 1290
      RETURN
  END CASE
IF CATG.TRK.LVL # 'S' OR CATG.BARCODE # 'Y' THEN RETURN
DEFAULT = ""
BEGIN CASE
  CASE INV.PAP.TYPE = "ROLL"
    P_VALUE = "# Rolls"
    IF INV.AVG.DIA = "" OR INV.CORE.DIA = "" OR INV.PAP.WIDTH = "" OR INV.FACTOR = "" THEN
      ERRMSG ="Roll/skids calculations information missing"
      GOTO 93000
    END ELSE
      IF (PO.TOT.ONORD<1,LN> = PREV.TOT.ONORD) AND PREV.NO.OF.ROLLS # "" THEN
        DEFAULT = PREV.NO.OF.ROLLS
      END ELSE
        READ ROLL.VARIANCE FROM CONTROL, CONO: 'ROLL.VARIANCE' ELSE ROLL.VARIANCE = 5
        MIN.DIA = INV.AVG.DIA * ((100 - ROLL.VARIANCE)/100)
        MIN.ROLL.SZ=(((MIN.DIA/100)*(MIN.DIA/100))-((INV.CORE.DIA/100)*(INV.CORE.DIA/100)))*(INV.PAP.WIDTH/10000)*(INV.FACTOR/10000)/10
        O.R = "O"
        IF MIN.ROLL.SZ > 0 THEN
          DEFAULT = INT((PO.TOT.ONORD<1,LN>/1000/MIN.ROLL.SZ)+1)
	  *DEFAULT = INT((PO.TOT.ONORD<1,LN>/100/MIN.ROLL.SZ)+1)
        END ELSE
          DEFAULT = 0
        END
      END
    END
  CASE INV.PAP.TYPE = "LROLL" OR INV.PAP.TYPE = "PCOAT"
    P_VALUE = "# Rolls"
    IF INV.AVG.DIA = "" OR INV.CORE.DIA = "" OR INV.PAP.WIDTH = "" OR INV.FACTOR = "" THEN
      ERRMSG ="Roll/skids calculations information missing"
      GOTO 93000
    END ELSE
     IF (PO.TOT.ONORD<1,LN> = PREV.TOT.ONORD) AND PREV.NO.OF.ROLLS # "" THEN
        DEFAULT = PREV.NO.OF.ROLLS
      END ELSE
        READ ROLL.VARIANCE FROM CONTROL, CONO: 'ROLL.VARIANCE' ELSE ROLL.VARIANCE = 5
        MIN.DIA = INV.AVG.DIA * ((100 - ROLL.VARIANCE)/100)
        BEGIN CASE
          CASE INV.UNIT<1,3> = "FT"
            X = (MIN.DIA * MIN.DIA) - (INV.CORE.DIA * INV.CORE.DIA)
            MIN.ROLL.SZ = INT((X/10000)*3.1416/4*(100000/INV.FACTOR)/12+0.5)
            IF MIN.ROLL.SZ > 0 THEN
              DEFAULT = INT((PO.TOT.ONORD<1,LN>/MIN.ROLL.SZ)+1)
            END ELSE
              DEFAULT = 0
            END
          CASE INV.UNIT<1,3> = "PC"
            X = (MIN.DIA * MIN.DIA) - (INV.CORE.DIA * INV.CORE.DIA)
            MIN.ROLL.SZ = INT((X/10000)*3.1416/4*(100000/INV.FACTOR)/10+0.5)
            IF MIN.ROLL.SZ > 0 THEN
              DEFAULT = INT((PO.TOT.ONORD<1,LN>/MIN.ROLL.SZ)+1)
            END ELSE
              DEFAULT = 0
            END
          CASE INV.UNIT<1,3> = "MSI"
            X = (MIN.DIA * MIN.DIA) - (INV.CORE.DIA * INV.CORE.DIA)
            MIN.ROLL.SZ = INT((X/10000)*3.1416/4*(100000/INV.FACTOR)*(INV.PAP.WIDTH/10000)/1000+0.5)
            IF MIN.ROLL.SZ > 0 THEN
              DEFAULT = INT((PO.TOT.ONORD<1,LN>/1000/MIN.ROLL.SZ)+1)
	      *DEFAULT = INT((PO.TOT.ONORD<1,LN>/100/MIN.ROLL.SZ)+1)
            END ELSE
              DEFAULT = 0
            END
        END CASE
      END
    END
  CASE 1
    IF INV.PAP.TYPE = 'SHEET' THEN
      P_VALUE = "# Skids" 
    END ELSE
      P_VALUE = "# Labels"
    END
END CASE
STRXML := "<DEFAULT.ROLLS>":DEFAULT:"</DEFAULT.ROLLS>"
RETURN
**** GET OPEN JOB QTY
8888*
******
BEGIN CASE
  CASE INV.UNIT<1,2> = "SHT" AND INV.UNIT<1,3> = "LBS"
    JB.ICR.CNV = "MD0"; JB.ICR.DV2 = 1
    JB.ICR.DV1 = INV.M.WT; JB.ICR.MT1 = 1
  CASE INV.UNIT<1,2> = "PC" AND INV.UNIT<1,3> = "MSI"
    JB.ICR.CNV = "MD0"; JB.ICR.DV2 = 1
    JB.ICR.DV1 = INV.PAP.WIDTH/100; JB.ICR.MT1 = 10
  CASE INV.UNIT<1,2> = "FT" AND INV.UNIT<1,3> = "MSI"
    JB.ICR.CNV = "MD0"; JB.ICR.DV2 = 12
    JB.ICR.DV1 = INV.PAP.WIDTH/100; JB.ICR.MT1 = 100
  CASE 1
    JB.ICR.CNV = "MD2"; JB.ICR.DV2 = 1
    JB.ICR.DV1 = 10; JB.ICR.MT1 = 1
END CASE
*****
JOB.CNT = DCOUNT(PO.JB.ONORD, VM)
TOT.J.ORD = 0 ; TOT.J.REC = 0 ; TOT.J.OPEN = 0
FOR AJQ = 1 TO JOB.CNT
  ********
  JB.VALUE = PO.JB.ONORD<1,AJQ>
  IF JB.ICR.CNV = "MD0" THEN
    JB.VALUE = INT(((JB.VALUE/JB.ICR.MT1)*JB.ICR.DV1)*JB.ICR.DV2 + .5)
  END ELSE
      JB.VALUE = JB.VALUE * 10
  END
  DIFF.QTY = ABS(JB.VALUE-PO.JB.RECEVED<1,AJQ>)
  IF (INV.UNIT<1,3> = 'MSI' AND DIFF.QTY <= 50) OR DIFF.QTY <= 9 THEN
    JB.VALUE = PO.JB.RECEVED<1,AJQ>
  END
  PO.JB.ONORD<1,AJQ> = JB.VALUE
  PO.JB.OPEN<1,AJQ> = PO.JB.ONORD<1,AJQ> - PO.JB.RECEVED<1,AJQ>
  ********
  TOT.J.ORD = TOT.J.ORD + PO.JB.ONORD<1,AJQ>
  TOT.J.REC = TOT.J.REC + PO.JB.RECEVED<1,AJQ>
  TOT.J.OPEN = TOT.J.OPEN + PO.JB.OPEN<1,AJQ>
NEXT AJQ
RETURN
*T121409 v
1009*
	IF PRIDGET = "RPOR" THEN
	   READV PO.JB.RECEVED FROM REG.REQ,PO_REQ_ID,44 ELSE PO.JB.RECEVED = 0
	END ELSE
	   READV PO.JB.RECEVED FROM PO,PO_REQ_ID,44 ELSE PO.JB.RECEVED = 0
	END      
RETURN
*T121409^
93000*
SCHEMA.ONLY = 0
STRXML = "<AllocationItem><ErrMsg>": ERRMSG:"</ErrMsg></AllocationItem>"
END
