  SUBROUTINE RFT_WRITE.RCV.RF.TRANSFER.1(CONO, EMPID,SERIALID,LOCATION,STRXML,ERRMSG)
*********************************************************************
*
* PROGRAM  - RCV.RF.TRANSFER
*
* AUTHOR   - PRASHANT KUMAR
*
* DATE     - 11/21/2008
*
* DESCRIPTION
*
* This program is used to process the Roll Transfer transaction
* from the hand-held R-F units used in the warehouse.
*
*T26132 cm 09/06/2001 * Change screen size from 21x16 to 20x15.
*T26436 cm 02/13/2002 * The location entry field should be required.
*T26496 lhelms 03/21/2002 * UPGRADE TO REV12 REMOVE ROLL.SKID.INFO FOR
*                           REPLACE WITH INV_SERIAL
*C40541 adelgado 08/09/2002 * Don't check reservations if it's within whse
*                             & JOB.STATS file.
*T26831 adelgado 09/03/2002 * Force to transfer Real Time.
*T27750 lross 10/13/2003 * Error in WHS.DIV.
*T27705 lross 11/14/2003 * Expand Serial to 15 chars.
*********************************************************************
*
*---- COPY STATEMENTS
*
**$INCLUDE ICS.CPYLIB COM.INV.MAIN
**$INCLUDE ICS.CPYLIB COM.INV.SERIAL
**$INCLUDE ICS.CPYLIB COM.INV.LINK
*$INCLUDE RCV.CPYLIB RCV.FILE.VARS
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE ICS.CPYLIB DAILY_TRANSFER
$INCLUDE PMC.CPYLIB EMPLOYEE
$INCLUDE PMC.CPYLIB PO
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV.WHSE.LOC
$INCLUDE ICS.CPYLIB INV.HIST
$INCLUDE ICS.CPYLIB INV_SERIAL
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE ICS.CPYLIB TRANSFER
$INCLUDE ICS.CPYLIB INV.CNV
$INCLUDE JCS.CPYLIB JOB
$INCLUDE JCS.CPYLIB JOB.STATS
$INCLUDE CPYLIB FILE.VARS
$INCLUDE CPYLIB CHAR
ERRMSG = ''
*
*---- OPEN ALL FILES
*
  OPEN "","COMPANY" TO COMPANY ELSE
    ERRMSG = 'COMPANY FILE MISSING'
    GOTO 93000
  END
  OPEN "","CONTROL" TO CONTROL ELSE
    ERRMSG = 'CONTROL FILE MISSING'
    GOTO 93000
  END
  OPEN "","DAILY_TRANSFER" TO DAILY_TRANSFER ELSE
    ERRMSG = 'DAILY_TRANSFER FILE MISSING'
    GOTO 93000
  END
  OPEN "","EMPLOYEE" TO EMPLOYEE ELSE
    ERRMSG = 'EMPLOYEE FILE MISSING'
    GOTO 93000
  END
  OPEN "","PO" TO PO ELSE
    ERRMSG = 'PO FILE MISSING'
    GOTO 93000
  END
  OPEN "","INV_SERIAL" TO INV_SERIAL ELSE
    ERRMSG = 'INV_SERIAL FILE MISSING'
    GOTO 93000
  END
  OPEN "","CATEGORY" TO CATEGORY ELSE
    ERRMSG = 'CATEGORY FILE MISSING'
    GOTO 93000
  END
  OPEN "","INVENTORY" TO INVENTORY ELSE
    ERRMSG = 'INVENTORY FILE MISSING'
    GOTO 93000
  END
  OPEN "","INV.WHSE" TO INV.WHSE ELSE
    ERRMSG = 'INV.WHSE FILE MISSING'
    GOTO 93000
  END
  OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE
    ERRMSG = 'INV.WHSE.LOC FILE MISSING'
    GOTO 93000
  END
  OPEN "","INV.HIST" TO INV.HIST ELSE
    ERRMSG = 'INV.HIST FILE MISSING'
    GOTO 93000
  END
  OPEN "","INV.TRAN.HIST" TO INV.TRAN.HIST ELSE
    ERRMSG = 'INV.TRAN.HIST FILE MISSING'
    GOTO 93000
  END
  OPEN "","RS.XFER" TO RS.XFER ELSE
    ERRMSG = 'RS.XFER FILE MISSING'
    GOTO 93000
  END
  OPEN "","TRANSFER" TO TRANSFER ELSE
    ERRMSG = 'TRANSFER FILE MISSING'
    GOTO 93000
  END
  OPEN "","JOB" TO JOB ELSE
    ERRMSG = 'JOB FILE MISSING'
    GOTO 93000
  END
  OPEN "","JOB.STATS" TO JOB.STATS ELSE
    ERRMSG = 'JOB.STATS FILE MISSING'
    GOTO 93000
  END
  OPEN '','INV.WHSE.LOC.TEMP' TO INV.WHSE.LOC.TEMP ELSE
    ERRMSG = 'INV.WHSE.LOC.TEMP FILE MISSING'
    GOTO 93000
  END
  OPEN '','INV_SERIAL_TEMP' TO INV_SERIAL_TEMP ELSE
    ERRMSG = 'INV_SERIAL_TEMP FILE MISSING'
    GOTO 93000
  END
  OPEN '','INV_AUDIT_HIST' TO INV_AUDIT_HIST ELSE
    ERRMSG = 'INV_AUDIT_HIST FILE MISSING'
    GOTO 93000
  END
  OPEN '','INV_AUDIT_HIST_TEMP' TO INV_AUDIT_HIST_TEMP ELSE
    ERRMSG = 'INV_AUDIT_HIST_TEMP FILE MISSING'
    GOTO 93000
  END
  OPEN '','INV_AUDIT_TAG' TO INV_AUDIT_TAG ELSE
    ERRMSG = 'INV_AUDIT_TAG FILE MISSING'
    GOTO 93000
  END
  OPEN '','INV_RECEIPTS' TO INV_RECEIPTS ELSE
    ERRMSG = 'INV_RECEIPTS FILE MISSING'
    GOTO 93000
  END
  OPEN '','INV_RECEIPTS_TEMP' TO INV_RECEIPTS_TEMP ELSE
    ERRMSG = 'INV_RECEIPTS_TEMP FILE MISSING'
    GOTO 93000
  END
  OPEN '','INV_RECP_WHSE' TO INV_RECP_WHSE ELSE
    ERRMSG = 'INV_RECP_WHSE FILE MISSING'
    GOTO 93000
  END
  OPEN '','INV_RECP_WHSE_TEMP' TO INV_RECP_WHSE_TEMP ELSE
    ERRMSG = 'INV_RECP_WHSE_TEMP FILE MISSING'
    GOTO 93000
  END
  OPEN '','WAREHOUSE' TO WAREHOUSE ELSE
   ERRMSG = 'WAREHOUSE FILE MISSING'
   GOTO 93000
  END
*
*---- INITIALIZATION
*
*VT101107
*^
  REAL.TIME = 1
*
  MATREAD COMP.REC FROM COMPANY,CONO ELSE
    MAT COMP.REC = ""
  END
  SPX = ""
  EMPNAME = "???????????????"
  MATREAD EMP.REC FROM EMPLOYEE, CONO:EMPID THEN
    EMPNAME = (EMP.FRST.NAME:" ":EMP.LAST.NAME)[1,20]
  END
  IF LEN(EMPNAME) < 20 THEN SPX = SPACE(INT((21-LEN(EMPNAME))/2))
  EMPNAME = SPX:EMPNAME
  NEW.DEF = ""
  FROM.WHS.DIV = ""
*
  TODAY = DATE()
  OTODAY = OCONV(TODAY,"D4/")
*  OTODAY = "01/31/2002"
*  TODAY = ICONV(OTODAY,"D4-")
  MAN.NO = ""
  PO.NO = ""
  PROD.ID = ""
  JOB.NO = ""
  TOT.WGT = ""
  WHSE = ""
  WLOC = ""
  PRINTVAL = ''
  STRXML = ''
*
*---- MAIN PROCESSING
*
    S$VALUE = SERIALID
    IF S$VALUE = "END" THEN GOTO 99999
    IF S$VALUE = "" THEN GOTO 99999
*T27705 v Should really look at CATG.BARCODE for below check.
    VALID=1
    IF LEN(S$VALUE) = 8 THEN
      CALL RFT_CHECK.DIGIT("T", S$VALUE, "10RL", CKDIG, VALID)
    END
*T27705 ^
    IF NOT(VALID) THEN
      ERRMSG = "INVALID SERIAL"; GOSUB 91000
    END
    MATREADU ISTK.REC FROM INV_SERIAL, CONO:S$VALUE LOCKED
      ERRMSG = "SERIAL LOCKED"; GOSUB 91000
    END ELSE
      RELEASE INV_SERIAL, CONO:S$VALUE
      ERRMSG = "INVALID SERIAL"; GOSUB 91000
    END
*
*
    IF CO.INTR.WHSE # "" THEN
      IF CO.INTR.WHSE = ISTK.WHSE THEN
        RELEASE INV_SERIAL, CONO:S$VALUE
        ERRMSG = "NO INTER-DIV"; GOSUB 91000
      END
*T27750 v Move read below out of above 'IF'
*     MATREAD WHSE.REC FROM WAREHOUSE, CONO:ISTK.WHSE ELSE
*       RELEASE INV_SERIAL, CONO:S$VALUE
*       ERRMSG = "NO WHSE DIV"; GOTO 93000; GOTO  1090
*     END
    END
    MATREAD WHSE.REC FROM WAREHOUSE, CONO:ISTK.WHSE ELSE
      RELEASE INV_SERIAL, CONO:S$VALUE
      ERRMSG = "NO WHSE DIV"; GOTO 93000
    END
*T27750 ^
    FROM.WHSE.DIV = WHS.DIV
*
    DEF.PERIOD = "";ERR.FLG = "";ERRMSG = ""
    CALL RFT_CHECK.PERIOD.DATE.1(CONO,TODAY,DEF.PERIOD,FROM.WHSE.DIV,ERR.FLG,ERRMSG,COMPANY,CONTROL)
    BEGIN CASE
      CASE ERRMSG = ""
      CASE ERR.FLG = 0
**        ERRMSG = "DATE WARNING"; GOSUB 91000
          PRINTVAL = "DATE WARNING"
      CASE ERR.FLG = 1
        RELEASE INV_SERIAL, CONO:S$VALUE
        ERRMSG = "DTE-PER MISMATCH" ;GOSUB 91000
      CASE ERR.FLG = 2
        RELEASE INV_SERIAL, CONO:S$VALUE
        ERRMSG = "FISCAL MISSING" ;GOSUB 91000
    END CASE
    ERRMSG = ""
    ERR.FLG = ""
*
    IF ISTK.RECP.PERIOD > DEF.PERIOD THEN
      RELEASE INV_SERIAL, CONO:S$VALUE
      ERRMSG = "RECPT PERIOD IS GREATER THAN CURR PERIOD" ; GOSUB 91000
    END
    IF ISTK.POST.DATE = "" THEN
      RELEASE INV_SERIAL, CONO:S$VALUE
      ERRMSG = "SERIAL NOT RCVD"; GOSUB 91000
    END
    IF (ISTK.CUR.QTY + 0) = 0 THEN
      RELEASE INV_SERIAL, CONO:S$VALUE
      ERRMSG = "NO QTY"; GOSUB 91000
    END
    * C40541 v
    * IF ISTK.CUR.QTY # ISTK.RSVB.QTY THEN
    *   RELEASE INV_SERIAL, CONO:S$VALUE
    *   ERRMSG = "QTY RESERVED"; GOSUB 91000; GOTO 1090
    * END
    * C40541 ^
*
    MATREAD INV.REC FROM INVENTORY, CONO:ISTK.PROD ELSE
      RELEASE INV_SERIAL, CONO:S$VALUE
      ERRMSG = "INVALID PRODUCT"; GOSUB 91000
    END
*
$INCLUDE ICSBP INV.UM.CNV
*
**    PRINT @(05,05):ISTK.MILL.ID[1,15]:
**      STRXML := "<MillId>": ISTK.MILL.ID[1,15] :"</MillId>"
*
    MATREAD IWLO.REC FROM INV.WHSE.LOC, CONO:ISTK.PROD:"!":ISTK.WHSE:"!":ISTK.LOC ELSE
      RELEASE INV_SERIAL, CONO:S$VALUE
      ERRMSG = "CANT FIND SERIAL"; GOSUB 91000
    END
    LOCATE S$VALUE IN IWLO.SERIAL<1>,1 SETTING P ELSE
      RELEASE INV_SERIAL, CONO:S$VALUE
      ERRMSG = "CANT FIND SERIAL"; GOSUB 91000
    END
    TEMP.DISPLAY=INT(((ISTK.CUR.QTY/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
**    PRINT @(05,06):OCONV(TEMP.DISPLAY,ICR.CNV):
      STRXML := "<Quantity>": OCONV(TEMP.DISPLAY,ICR.CNV) : "</Quantity>"
*
    IF ISTK.LOC = "" THEN
**      PRINT @(10,07):ISTK.WHSE"L#4":
    END ELSE
**      PRINT @(10,07):(ISTK.WHSE:"-":ISTK.LOC)"L#9":
    END
    ROLL.ID = S$VALUE
1050 *
    ROLL.WHSE = ISTK.WHSE
**    PRINT @(10,09):ISTK.WHSE:"-":
*T28466 ^
*T26436 ^
    IF LOCATION = "END" THEN GOTO 99999
    IF LOCATION = "" THEN 
       ERRNSG = "LOCATION REQUIRED"; GOTO 99999
    END
**    NEW.DEF = S$VALUE
    ROLL.LOC = OCONV(LOCATION,"MCU")
    BEGIN CASE
      CASE ISTK.WHSE = ROLL.WHSE AND ISTK.LOC = ROLL.LOC
      CASE REAL.TIME
        GOSUB 5000
        IF ERRMSG # "" THEN
          RELEASE INV_SERIAL, CONO:S$VALUE
          GOSUB 91000
        END
*        CASE 1
*           READU TRANSEQ FROM CONTROL, CONO:"RS.XFER.NO" ELSE TRANSEQ = 0
*           FOUND = 1
*           LOOP
*              TRANSEQ = MOD(TRANSEQ,999999) + 1
*              MATREADU RS.XFER.REC FROM RS.XFER, CONO:TRANSEQ ELSE
*                 MAT RS.XFER.REC = ""
*                 RS.XFER.DESC = "Barcode data - ":OCONV(TODAY,"D2/")
*                 RS.XFER.ENTRY.DATE = TODAY
*                 FOUND = 0
*              END
*           WHILE FOUND DO
*              RELEASE RS.XFER, CONO:TRANSEQ
*           REPEAT
*           WRITE TRANSEQ ON CONTROL, CONO:"RS.XFER.NO"
*           XPTR = DCOUNT(RS.XFER.ID,VM) + 1
*           RS.XFER.ID<1,XPTR>      = ROLL.ID
*           RS.XFER.TO.WHSE<1,XPTR> = ROLL.WHSE
*           RS.XFER.TO.LOC<1,XPTR>  = ROLL.LOC
*           MATWRITE RS.XFER.REC ON RS.XFER, CONO:TRANSEQ
    END CASE
*T27705 PRINT @(05,12):ROLL.ID"L#8":
**    PRINT @(05,12):ROLL.ID"L#15":
      STRXML := "<RollId>": ROLL.ID :"</RollId>"
*T26132 v
**    PRINT @(05,13):ISTK.MILL.ID"L#15":
      STRXML := "<MillId>": ISTK.MILL.ID :"</MillId>"
*T26132 ^
**    PRINT @(05,14):(ROLL.WHSE:"-":ROLL.LOC)"L#9":
      STRXML := "<Location>": ROLL.WHSE:"-":ROLL.LOC : "</Location>"
  RETURN
*
*---- PROCESS TRANSFER
*
5000 *
  ERRMSG = ""
  IF ISTK.JOB = "" THEN
    MAT JOB.REC = ""
  END ELSE
* C40541 v
*   MATREAD JOB.REC FROM JOB, CONO:ISTK.JOB ELSE
*     ERRMSG = "ERROR 5001"      ;* "Job does not exist on Job Stats file"
*     RETURN
*   END
*   IF JOB.STATUS = "9" THEN
*     ERRMSG = "ERROR 5002"      ;* "Job has been cancelled"
*     RETURN
*   END
*   MATREAD JSTAT.REC FROM JOB.STATS, CONO:ISTK.JOB ELSE
*     ERRMSG = "ERROR 5003"      ;* "Job Stats does not exist"
*     RETURN
*   END
*   IF JSTAT.SHP.PROD = "" THEN
*     ERRMSG = "ERROR 5004"      ;* "No prod on Job Stats file"
*     RETURN
*   END
*   LOCATE ROLL.ID IN JSTAT.SHP.R.S.ID<1>,1 SETTING FNGD ELSE
*     ERRMSG = "ERROR 5005"      ;* "Serial not on JSTATS file"
*     RETURN
*   END
* C40541 ^
  END
  MATREAD IWH.REC FROM INV.WHSE, CONO:ISTK.PROD:"!":ISTK.WHSE ELSE
    ERRMSG = "NO INV.WHSE"         ;* "From Whse does not exist"
    RETURN
  END
  MATREAD IWLO.REC FROM INV.WHSE.LOC, CONO:ISTK.PROD:"!":ISTK.WHSE:"!":ISTK.LOC ELSE
    ERRMSG = "NO INV.WHSE.LOC"         ;* "From Loc does not exist"
    RETURN
  END
  LOCATE ROLL.ID IN IWLO.SERIAL<1>,1 SETTING RSPTR ELSE
    ERRMSG = "NO SER # IN LOC"         ;* "Serial not in location"
    RETURN
  END
* C40541 v
* MATREAD IWH.REC FROM INV.WHSE, CONO:ISTK.PROD:"!":ISTK.WHSE ELSE
*   ERRMSG = "ERROR 5106"         ;* "To Whse does not exist"
*   RETURN
* END
* C40541 ^
*
*---- LOAD TRANSFER RECORD
  MAT D.TRAN.REC = ""
  D.TRAN.CODE = "N"
  D.TRAN.PROD.NO         = ISTK.PROD
  D.TRAN.SERIAL          = ROLL.ID
  D.TRAN.RECP            = ISTK.RECP
  D.TRAN.TOT.WHT         = ISTK.CUR.QTY
  D.TRAN.FROM.WHSE       = ISTK.WHSE        
  D.TRAN.FROM.LOC        = ISTK.LOC         
  D.TRAN.TO.WHSE         = ISTK.WHSE      
  D.TRAN.TO.LOC          = ROLL.LOC        
  D.TRAN.QTY             = ISTK.CUR.QTY        
  D.TRAN.TOT.QTY         = ISTK.CUR.QTY        
  D.TRAN.REASON.DESC     = "RF GUN TRANSFER"
  D.TRAN.DATE.ENTER      = TODAY
  D.TRAN.PRT.DATE        = TODAY
  D.TRAN.PERIOD          = DEF.PERIOD
  D.TRAN.JOB             = ISTK.JOB
  D.TRAN.EMP             = EMPID
  MAT TRAN.REC = ""
  NEW.ERRMSG = ""
  PROCESS.FLAG = CO.ICS.REAL.TRAN
  PROCESS.FLAG = 'Y'               ;* T26831
  CALL RFT_TRAN.UPDATE.2(CONO,D.TRAN.CODE, MAT D.TRAN.REC,PROCESS.FLAG,CO.ICS.LOC.TRAN,NEW.ERRMSG)
*  IF ERRMSG = "" THEN
*     MATWRITE D.TRAN.REC ON TRANSFER, CONO:TRAN.NO
*     ISTK.WHSE = ISTK.WHSE
*     ISTK.LOC = ROLL.LOC
*     MATWRITE ISTK.REC ON INV_SERIAL, CONO:ROLL.ID
*  END ELSE
*     RELEASE INV_SERIAL, CONO:ROLL.ID
*     GOSUB 91000
*     ERRMSG = "ERROR 5201"         ;* "Update Error"
*     RETURN
*  END
  RETURN
*
*---- ERROR ROUTINE
*
91000 *
      GOTO 99999
93000 *
  GOSUB 91000
*
*---- END OF PROGRAM
*
99999 *
  RETURN
END
