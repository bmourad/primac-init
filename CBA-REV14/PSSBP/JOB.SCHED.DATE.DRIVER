*COPY>CPYLIB>SCOMMON1
*COPY>PSS.CPYLIB>COM.PSS.FILE.VARS
*COPY>PSS.CPYLIB>COM.CCTR.SCHED
*COPY>PSS.CPYLIB>COM.JOB.SCHED
*COPY>JCS.CPYLIB>COM.JOB
*********************************************************************
* REVISION    - [08.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* PROGRAM  - JOB.SCHED.DATE.DRIVER
* AUTHOR   - WALID YAMOUT, COMPUTER BUSINESS ASSOCIATES
* DATE     - 11/22/88
* MODIFIED - 11/01/95 BY TERRY NORTHCUTT TASK 19407 DIVISIONALIZATION
* MODIFIED - 02/07/96, NA, TASK 19937, JOB DESC BASED ON COMPANY FLAG.
* DESCRIPTION
* This program allows the user to maintain/inquire the critical dates
* on the JOB.SCHED record.
*T26126 adelgado 02/26/2002 * Implement the LOCKED clause for READU.
*********************************************************************
*
*---- FILE COPY STATEMENTS
*
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>DIVISION
*COPY>PSS.CPYLIB>JOB.SCHED
*COPY>PSS.CPYLIB>PSS.HIERARCHY
*COPY>PSS.CPYLIB>PSS.FILE.VARS
*COPY>JCS.CPYLIB>JOB.TRANS
*COPY>JCS.CPYLIB>JOB.TRACKING
*COPY>JCS.CPYLIB>JOB
*COPY>CPYLIB>SCREEN.COM
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
  MAT SYSCOM.REC =  ""; SYS.TYPE = 2
*
*----PROCREAD
*
  PROCREAD PARAM ELSE
    PARAM = "ID"
  END
  PROC.TYPE = PARAM<1>
  IF PROC.TYPE # "ID" THEN
    PROC.CALL = ""
    PROC.JOB = ""
    DIV.OWNER = PARAM<3> ; *---- TASK 19407
  END ELSE
    PROC.CALL = PARAM<2>
    PROC.JOB = PARAM<3>
    DIV.OWNER = "ALL"
  END
*
*---- INITIALIZATION
*
  ERRMSG = ""
  MAT CCTR.SCHED.REC = ""
*
*---- OPEN ALL FILES
*
  OPEN "","COMPANY" TO COMPANY ELSE
    P_X  = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN COMPANY FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
  OPEN "","CONTROL" TO CONTROL ELSE
    P_X  = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN CONTROL FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
  OPEN "","DIVISION" TO DIVISION ELSE
    P_X  = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN DIVISION FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
  OPEN "","DEPARTMENT" TO DEPARTMENT ELSE
    P_X  = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN DEPARTMENT FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
  OPEN "","COST.CNTR" TO COST.CNTR ELSE
    P_X  = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN COST.CNTR FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
  OPEN "","OPERATION" TO OPERATION ELSE
    P_X  = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN OPERATION FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
  OPEN "","PSS.SCREENS" TO M.SCREENS ELSE
    P_X  = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN PSS.SCREENS FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
*---- TASK 19407
  OPEN "","JOB" TO JOB ELSE
    P_X  = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN JOB FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
*---- TASK 19407
  OPEN "","JOB.SCHED" TO JOB.SCHED ELSE
    P_X  = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN JOB.SCHED FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
  OPEN "","PEND.JOB.SCHED" TO PEND.JOB.SCHED ELSE
    P_X  = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN PEND.JOB.SCHED FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
  OPEN "","JOB.CRTL.DATE.EXC" TO JOB.CRTL.DATE.EXC ELSE
    P_X  = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN JOB.CRTL.DATE.EXC FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
  OPEN "","JOB.TRACKING" TO JOB.TRACKING ELSE
    P_X  = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN JOB.TRACKING FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
  OPEN "","JOB.TRANS" TO JOB.TRANS ELSE
    P_X  = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN JOB.TRANS FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
  OPEN "","PSS.CONTROL" TO PSS.CONTROL ELSE
    P_X  = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN PSS.CONTROL FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
  OPEN "","PSS.HIERARCHY" TO PSS.HIERARCHY ELSE
    P_X  = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN PSS.HIERARCHY FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
  OPEN "","PSS.JOURNAL" TO PSS.JOURNAL ELSE
    P_X  = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN PSS.JOURNAL FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
  OPEN "","PSS.LOCK" TO PSS.LOCK ELSE
    P_X  = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN PSS.LOCK FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
*
*--- CHECK HIERARCHY
*
  MATREAD PSHR.REC FROM PSS.CONTROL, "HIERARCHY" ELSE
    ERRMSG = "SYSTEM HIERARCHY RECORD IS MISSING"
    GOSUB 90000
    GOTO 999999
  END
  MAT PSHR.REC = ""
*
*---- GET CONO
*
  CONO = ""
  CALL GET.CONO1 (CONO, MAT COMP.REC, COMPANY, CONTROL)
  IF CONO = "END" THEN GOTO 999999
*
*---- GET CURRENT DATE
*
  READ DEMODATE FROM CONTROL,"DEMODATE" THEN TODAY=ICONV(DEMODATE,"D") ELSE TODAY=DATE()
*
*--- GET LOADING FLAG
*
  READ LOADING.FLG FROM PSS.CONTROL, CONO : "LOADING.FLG" ELSE
    READ LOADING.FLG FROM PSS.CONTROL, "LOADING.FLG" ELSE LOADING.FLG = "N"
  END
*
*--- INIT SCREEN
*
  SCREEN INIT;#
  S$SCR = 1
  SCREEN DEFINE;JOB.SCHED.DET.DATE
  SCREEN FORMAT
  TP.ERRMSG = ""
  GOTO 110
*
*---- MAIN PROCESSING
*
100*
  RELEASE
  SCREEN CLEAR
110*
  GOSUB 89900;* CHECK FOR ACTIVE TRANSACTION
  S$DATA(1)<S$SCR> = TODAY
  SCREEN DISPLAY;;1
  IF PROC.TYPE = "ID" OR TP.DIV = "X" THEN
    S$DATA(29)<S$SCR> = "(INQ)"
    SCREEN DISPLAY;;29
    IF S$GUIFORM THEN
      P_TITLE = "JOB CRITICAL DATES (INQ)"
      CALL VSI_SI_PTITLE(P_TITLE,ERROR)
    END
  END
  IF PROC.CALL = "AUTO" THEN
    JOB.NUM = PROC.JOB
    S$DATA(2)<S$SCR> = JOB.NUM
    SCREEN DISPLAY;;2
  END ELSE
    SCREEN FIELD;;2
    SCREEN INPUT;;2;GOTO 99990
    JOB.NUM = S$VALUE
  END
  MAT JTRN.REC = ""
  MAT JTRK.REC = ""
  BEGIN CASE
    CASE PROC.TYPE = "ID" OR TP.DIV = "X"
      MATREAD JBS.REC FROM JOB.SCHED, CONO:JOB.NUM ELSE
        ERRMSG = "Job (":JOB.NUM:") is not found in JOB.SCHED file"
        GOSUB 90000
        IF PROC.CALL = "AUTO" THEN
          GOTO 99990
        END ELSE
          GOTO 100
        END
      END
      MATREAD PJBS.REC FROM PEND.JOB.SCHED, CONO:JOB.NUM ELSE
        MAT PJBS.REC = ""
      END
      MATREAD JTRN.REC FROM JOB.TRANS, CONO:JOB.NUM ELSE
        MAT JTRN.REC = ""
      END
      MATREAD JTRK.REC FROM JOB.TRACKING, CONO:JOB.NUM ELSE
        MAT JTRK.REC = ""
      END
      CALL JOB.SCHED.TRANS.UPD(CONO,JOB.NUM,MAT JTRN.REC,MAT JTRK.REC)
    CASE 1
      * T26126 v
      MATREADU JBS.REC FROM JOB.SCHED, CONO:JOB.NUM LOCKED
        ERRMSG = 'JOB SCHEDULE record is locked by user - ':GETUSERNAME(STATUS())
        GOSUB 90000;GOTO 100 
      END ELSE
      * T26126 ^
        ERRMSG = "Job (":JOB.NUM:") is not found in JOB.SCHED file"
        GOSUB 90000
        GOTO 100
      END
*---- TASK 19407
      MATREAD JOB.REC FROM JOB, CONO:JOB.NUM THEN
        IF JOB.DIV # DIV.OWNER THEN
          ERRMSG = "Job not owned by selected division ":DIV.OWNER
          GOSUB 90000
          GOTO 100
        END
      END ELSE
        ERRMSG = "JOB NUMBER ":JOB.NUM:"NOT ON FILE"
        GOSUB 90000
        GOTO 100
      END
*---- TASK 19407
      MATREAD PJBS.REC FROM PEND.JOB.SCHED, CONO:JOB.NUM ELSE
        MAT PJBS.REC = ""
      END
  END CASE
  IF JBS.DIV = "" THEN
    MAT DIV.REC = ""
  END ELSE
    MATREAD DIV.REC FROM DIVISION, CONO:JBS.DIV ELSE
      MAT DIV.REC = ""
    END
  END
*---- TASK # 19937 ----
  JDESC = JBS.CUST.NAME
  IF CO.PSS.JDESC.FLAG = "J" OR CO.PSS.JDESC.FLAG = "X" THEN
    MATREAD JOB.REC FROM JOB, CONO:JOB.NUM THEN
      IF TRIM(JOB.DESC<1,1>) # "" THEN
        IF CO.PSS.JDESC.FLAG = "J" THEN
          JDESC = JOB.DESC<1,1>
        END ELSE
          JDESC = JDESC[1,10]:":":JOB.DESC<1,1>
        END
      END
    END
  END
*     S$DATA(27)<S$SCR> = JBS.CUST.NAME
  S$DATA(27)<S$SCR> = JDESC
*----------------------
  SCREEN DISPLAY;;27
  CALL JOB.SCHED.DET.DATE(CONO,JOB.NUM,TODAY,LOADING.FLG,PROC.TYPE)
*      IF PROC.CALL = "AUTO" THEN GOTO 999999 ELSE GOTO 100
  IF PROC.CALL = "AUTO" THEN
    GOTO 99990
  END ELSE
    GOTO 100
  END
*-------------------*
*--- SUBROUTINES ---*
*-------------------*
***(TPCHECKBEG)***************************************************
*
*---- CHECK FOR ACTIVE TRANSACTION
*
89900 *
  BEGIN CASE
    CASE PROC.TYPE = "M" OR PROC.TYPE = "D"
      READU LREC FROM PSS.LOCK, CONO:"TP" ELSE NULL
      REQDIV = DIV.OWNER
      CALL TRANSACTION.LOCK(CONO, REQDIV, TP.DIV, ERRMSG)
      BEGIN CASE
        CASE TP.DIV = "X"
          RELEASE PSS.LOCK, CONO:"TP"
          IF ERRMSG # TP.ERRMSG THEN GOSUB 90000
        CASE TP.DIV = ""
          DCNT = DCOUNT(REQDIV,VM)
          FOR DPTR = 1 TO DCNT
            CDIV = REQDIV<1,DPTR>
            LOCK.ID = "[":CONO:",":CDIV:",":@LOGNAME:" @ ":@TTY:"]"
            READU LREC FROM PSS.LOCK, LOCK.ID ELSE NULL
          NEXT DPTR
      END CASE
      RELEASE PSS.LOCK, CONO:"TP"
      TP.ERRMSG = ERRMSG
    CASE 1
      TP.DIV = ""
      DELETE PSS.LOCK, @TTY
      TP.ERRMSG = ""
  END CASE
  RETURN
***(TPCHECKEND)***************************************************
*
*---- ERROR ROUTINE
*
90000 ERR.TYPE=1;CALL SI_SYSCOM(MAT SYSCOM.REC);RETURN
* 90000*
*       PRINT @(0,23):CL:ERRMSG:
*       INPUT REPLY:
*       PRINT @(0,23):CL:
*       RETURN
*
*---- END OF PROGRAM
*
99990 *
  SCREEN CLOSE
*
999999*
*       PRINT @(-1):
  STOP
END
