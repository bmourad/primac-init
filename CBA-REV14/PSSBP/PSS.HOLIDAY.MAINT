*COPY>CPYLIB>SCOMMON1
*********************************************************************
*
* REVISION    - [08.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
*
* PROGRAM  - PSS.HOLIDAY.MAINT
*
* AUTHOR   - NICK AMENDOLA, COMPUTER BUSINESS ASSOCIATES
*
* DATE     - 05/10/85
*
* DESCRIPTION
*
* Maintain holiday schedules.
*
*T26126 adelgado 02/26/2002 * Implement the LOCKED clause for READU.
*********************************************************************
*
*---- FILE COPY STATEMENTS
*
*COPY>PMC.CPYLIB>COMPANY
*COPY>CPYLIB>SCREEN.COM
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
  MAT SYSCOM.REC =  ""; SYS.TYPE = 2
*COPY>PSS.CPYLIB>HOLIDAY.SCHED
*
*---- PRE-INITIALIZATION
*
  PROC.TYPE = "M"
*
*---- OPEN ALL FILES
*
  OPEN "","COMPANY" TO COMPANY ELSE
    P_X = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN COMPANY FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
  OPEN "","CONTROL" TO CONTROL ELSE
    P_X = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN CONTROL FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
  OPEN "","PSS.SCREENS" TO M.SCREENS ELSE
    P_X = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN PSS.SCREENS FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
  OPEN "","HOLIDAY.SCHED" TO HOLIDAY.SCHED ELSE
    P_X = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN HOLIDAY.SCHED FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
  OPEN "","PSS.JOURNAL" TO PSS.JOURNAL ELSE
    P_X = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN PSS.JOURNAL FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
  OPEN "","PSS.LOCK" TO PSS.LOCK ELSE
    P_X = 3 ; P_Y = 23 ; P_VALUE = "CANNOT OPEN PSS.LOCK FILE" ; P_OPT = ""
    CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    STOP
  END
*
*---- INITIALIZATION
*
  CONO = ""
  CALL GET.CONO1 (CONO, MAT COMP.REC, COMPANY, CONTROL)
  IF CONO = "END" THEN GOTO 99999
  READ DEMODATE FROM CONTROL,"DEMODATE" THEN TODAY=ICONV(DEMODATE,"D") ELSE TODAY=DATE()
  SCREEN INIT;#
  S$SCR = 1
  SCREEN DEFINE;PSS.HOLIDAY.MAINT
  SCREEN FORMAT
  SCREEN COUNT;;3
  LINE.COUNT = S$LCNT
  LINE.SPACE = S$LSPC
  TP.ERRMSG = ""
  GOTO 110
*
*---- MAIN PROCESSING
*
100*
  RELEASE
  SCREEN CLEAR
110*
  GOSUB 89900;* CHECK FOR ACTIVE TRANSACTION
  S$DATA(1)<S$SCR> = TODAY
  SCREEN DISPLAY;;1
  SCREEN FIELD;;2
  SCREEN INPUT;;2;GOTO 99999
  ITEM.KEY = S$VALUE
  NEW.REC = 0
  * T26126 v
  MATREADU HOL.SCHED.REC FROM HOLIDAY.SCHED, CONO:ITEM.KEY LOCKED
    ERRMSG = 'HOLIDAY SCHEDULE record is locked by user - ':GETUSERNAME(STATUS())
    GOSUB 90000;GOTO 110 
  END ELSE
  * T26126 ^
    MAT HOL.SCHED.REC = ""
    NEW.REC = 1
  END
  IF NEW.REC THEN
    LINE.CNT = 0
    CURR.REF.NO = 1
    OPTION = "A"
    GOTO 510
  END ELSE
    LINE.CNT = COUNT(HOL.DATE,VM) + (HOL.DATE # "")
    GOSUB 40000
    REF.NO = 1
    CURR.REF.NO = ""
    GOSUB 50000
  END
*
*---- GET OPERATOR REQUEST
*
500*
  BEGIN CASE
    CASE PROC.TYPE = "M" AND TP.DIV # "X"
      SCREEN FIELD;;7
      SCREEN INPUT;;7
    CASE 1
      SCREEN FIELD;;23
      SCREEN INPUT;;23
  END CASE
  OPTION = S$VALUE
510*
  BEGIN CASE
    CASE OPTION = "A" AND LINE.CNT < 99
      DONE = 0
      FOR REF.NO = LINE.CNT+1 TO 99 UNTIL DONE
        GOSUB 50000
        GOSUB 10000
        IF S$VALUE = "END" THEN
          DONE = 1
          GOSUB 700
        END ELSE
          LINE.CNT = LINE.CNT + 1
        END
      NEXT REF.NO
      REF.NO = LINE.CNT
      CURR.REF.NO = ""
      GOSUB 50000
    CASE OPTION = "C" AND LINE.CNT > 0
      GOSUB 600
      IF S$VALUE # "" AND S$VALUE # "END" THEN
        REF.NO = S$VALUE
        GOSUB 10000
        IF S$VALUE = "END" THEN
          CURR.REF.NO = ""
          GOSUB 50000
        END
      END
    CASE OPTION = "D" AND LINE.CNT > 0
      GOSUB 600
      IF S$VALUE # "" AND S$VALUE # "END" THEN
        REF.NO = S$VALUE
        GOSUB 700
        LINE.CNT = LINE.CNT - 1
        IF REF.NO > LINE.CNT THEN REF.NO = REF.NO - 1
        CURR.REF.NO = ""
        GOSUB 50000
      END
    CASE OPTION = "I" AND LINE.CNT > 0
      GOSUB 600
      IF S$VALUE # "" AND S$VALUE # "END" THEN
        REF.NO = S$VALUE
        GOSUB 800
        LINE.CNT = LINE.CNT + 1
        CURR.REF.NO = ""
        GOSUB 50000
        GOSUB 10000
        IF S$VALUE = "END" THEN
          GOSUB 700
          LINE.CNT = LINE.CNT - 1
        END
        CURR.REF.NO = ""
        GOSUB 50000
      END
    CASE OPTION = "S"
      REF.NO = CURR.REF.NO + LINE.COUNT
      IF REF.NO > LINE.CNT THEN REF.NO = 1
      GOSUB 50000
    CASE OPTION = "ST"
      REF.NO = 1
      GOSUB 50000
    CASE OPTION = "SB"
      REF.NO = COUNT(HOL.DATE,VM) + 1
      GOSUB 50000
    CASE OPTION = "SR"
      REF.NO = CURR.REF.NO - LINE.COUNT
      IF REF.NO < 1 THEN REF.NO = 1
      GOSUB 50000
    CASE OPTION = "E" OR OPTION = "END"
      GOTO 100
    CASE OPTION = "F"
      IF LINE.CNT = 0 THEN
        HOL.LAST = ""
      END ELSE
        HOL.LAST = HOL.DATE<1,LINE.CNT>
      END
***         MATWRITE HOL.SCHED.REC ON HOLIDAY.SCHED, CONO:ITEM.KEY
      TPFID = CONO:ITEM.KEY
      MATBUILD TPREC FROM HOL.SCHED.REC
      CALL TRANSACTION.WRITE("WRITE",CONO,TP.DIV,"HOLIDAY.SCHED",TPFID,TPREC,HOLIDAY.SCHED,PSS.JOURNAL,ERRMSG)
**********************************************************************
      GOTO 100
    CASE 1
      ERRMSG = "Invalid Selection"
      GOSUB 90000
  END CASE
  GOTO 500
*
*---- GET LINE REFERENCE NUMBER
*
600*
  SCREEN FIELD;;8
  S$MINV = CURR.REF.NO
  S$MAXV = S$MINV + LINE.COUNT - 1
  IF S$MAXV > LINE.CNT THEN S$MAXV = LINE.CNT
  SCREEN INPUT;;8
  RETURN
*
*---- DELETE MULTI-LINE DATA
*
700*
  HOL.DATE = DELETE(HOL.DATE,1,REF.NO,0)
  HOL.HRS = DELETE(HOL.HRS,1,REF.NO,0)
  HOL.DESC = DELETE(HOL.DESC,1,REF.NO,0)
  S$DATA(4) = DELETE(S$DATA(4),S$SCR,REF.NO,0)
  S$DATA(5) = DELETE(S$DATA(5),S$SCR,REF.NO,0)
  S$DATA(6) = DELETE(S$DATA(6),S$SCR,REF.NO,0)
  RETURN
*
*---- INSERT MULTI-LINE DATA
*
800*
  HOL.DATE = INSERT(HOL.DATE,S$SCR,REF.NO,0,"")
  HOL.HRS = INSERT(HOL.HRS,S$SCR,REF.NO,0,"")
  HOL.DESC = INSERT(HOL.DESC,S$SCR,REF.NO,0,"")
  S$DATA(4) = INSERT(S$DATA(4),S$SCR,REF.NO,0,"")
  S$DATA(5) = INSERT(S$DATA(5),S$SCR,REF.NO,0,"")
  S$DATA(6) = INSERT(S$DATA(6),S$SCR,REF.NO,0,"")
  RETURN
*
*---- GET MULTI-LINE DATA
*
10000*
  S$VAL = REF.NO
  SCREEN DISPLAY;;3
10100*
  S$VAL = REF.NO
  SCREEN FIELD;;4
  SCREEN INPUT;;4;GOTO 16000
  IF (REF.NO > 1 AND S$VALUE <= HOL.DATE<1,REF.NO-1>) OR (REF.NO < LINE.CNT AND S$VALUE >= HOL.DATE<1,REF.NO+1>) THEN
    ERRMSG = "Dates must be entered in ascending sequence"
    GOSUB 90000
    GOTO 10100
  END
10200*
  S$VAL = REF.NO
  SCREEN FIELD;;5
  SCREEN INPUT;;5;GOTO 16000
10300*
  S$VAL = REF.NO
  SCREEN FIELD;;6
  SCREEN INPUT;;6;GOTO 16000
*
  HOL.DATE<1,REF.NO> = S$DATA(4)<S$SCR,REF.NO>
  HOL.HRS<1,REF.NO> = S$DATA(5)<S$SCR,REF.NO>
  HOL.DESC<1,REF.NO> = S$DATA(6)<S$SCR,REF.NO>
  RETURN
16000*
  S$DATA(4)<S$SCR,REF.NO> = HOL.DATE<1,REF.NO>
  S$DATA(5)<S$SCR,REF.NO> = HOL.HRS<1,REF.NO>
  S$DATA(6)<S$SCR,REF.NO> = HOL.DESC<1,REF.NO>
  RETURN
*
*---- LOAD S$DATA MATRIX
*
40000*
  S$DATA(4)<S$SCR> = HOL.DATE
  S$DATA(5)<S$SCR> = HOL.HRS
  S$DATA(6)<S$SCR> = HOL.DESC
  RETURN
*
*---- DISPLAY MULTI-VALUE DATA
*
50000*
  START.REF.NO = 1 + INT((REF.NO-1)/LINE.COUNT)*LINE.COUNT
  IF START.REF.NO = CURR.REF.NO THEN RETURN
  CURR.REF.NO = START.REF.NO
  S$VAL = START.REF.NO
  S$CNT = LINE.CNT
  SCREEN MULTI;;C;3;4;5;6
  RETURN
***(TPCHECKBEG)***************************************************
*
*---- CHECK FOR ACTIVE TRANSACTION
*
89900 *
  BEGIN CASE
    CASE PROC.TYPE = "M"
      READU LREC FROM PSS.LOCK, CONO:"TP" ELSE NULL
      REQDIV = "ALL"
      CALL TRANSACTION.LOCK(CONO, REQDIV, TP.DIV, ERRMSG)
      BEGIN CASE
        CASE TP.DIV = "X"
          RELEASE PSS.LOCK, CONO:"TP"
          IF ERRMSG # TP.ERRMSG THEN GOSUB 90000
        CASE TP.DIV = ""
          DCNT = DCOUNT(REQDIV,VM)
          FOR DPTR = 1 TO DCNT
            CDIV = REQDIV<1,DPTR>
            LOCK.ID = "[":CONO:",":CDIV:",":@LOGNAME:" @ ":@TTY:"]"
            READU LREC FROM PSS.LOCK, LOCK.ID ELSE NULL
          NEXT DPTR
      END CASE
      RELEASE PSS.LOCK, CONO:"TP"
      TP.ERRMSG = ERRMSG
    CASE 1
      TP.DIV = ""
      DELETE PSS.LOCK, @TTY
      TP.ERRMSG = ""
  END CASE
  RETURN
***(TPCHECKEND)***************************************************
*
*---- ERROR ROUTINE
*
90000 ERR.TYPE=1;CALL SI_SYSCOM(MAT SYSCOM.REC);RETURN
* 90000*
*       PRINT @(0,23):CL:ERRMSG:
*       INPUT REPLY:
*       PRINT @(0,23):CL:
*       RETURN
*
*---- END OF PROGRAM
*
99999*
*       PRINT @(-1):
  STOP
END
