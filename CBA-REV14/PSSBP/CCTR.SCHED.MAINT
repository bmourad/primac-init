   SUBROUTINE CCTR.SCHED.MAINT(CONO,ACTION,DEPT,CCTR,SDT)
*COPY>CPYLIB>SCOMMON1
*COPY>PSS.CPYLIB>COM.PSS.FILE.VARS
*COPY>PSS.CPYLIB>COM.CCTR.SCHED
*********************************************************************
* REVISION - [08.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM   - PRIMAC
* SOURCE   - PSSBP
* PROGRAM  - CCTR.SCHED.MAINT
* AUTHOR   - WALID YAMOUT, COMPUTER BUSINESS ASSOCIATES
* DATE     - 07/14/87
* MODIFIED - 07/15/88 BY KERRY WILSON
* DESCRIPTION
* Provide inquiry and maintenance of cost center schedule by day.
*********************************************************************
*
*---- FILE COPY STATEMENTS
*
*COPY>PSS.CPYLIB>CCTR.SCHED
*COPY>PSS.CPYLIB>CCTR.SCHED.MATRIX
*COPY>PSS.CPYLIB>PSS.FILE.VARS
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>DEPARTMENT
*COPY>PMC.CPYLIB>COST.CNTR
*COPY>CPYLIB>SCREEN.COM
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>GEN.XREF
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
   MAT SYSCOM.REC =  ""; SYS.TYPE = 2
*
*---- INITIALIZATION
*
   READ DEMODATE FROM CONTROL,"DEMODATE" THEN TODAY=ICONV(DEMODATE,"D") ELSE TODAY=DATE()
   MAT GEN.XREF.REC = ""
   SCREEN DEFINE;CCTR.SCHED.MAINT
   SCREEN FORMAT
   SCREEN COUNT;;11
   LINE.COUNT = S$LCNT
   LINE.SPACE = S$LSPC
   GOTO 110
*
*---- MAIN PROCESSING
*
100 *
   RELEASE
   SCREEN CLEAR
110 *
   S$DATA(1)<S$SCR> = TODAY
   SCREEN DISPLAY;;1
   IF ACTION = 'DEP.INQ' THEN
      S$DATA(2)<S$SCR> = DEPT
      SCREEN DISPLAY;;2
      MATREAD DEPT.REC FROM DEPARTMENT, CONO:DEPT ELSE
         MAT DEPT.REC = ""
         DEPT.DESC = "Invalid Department"
      END
      S$DATA(3)<S$SCR> = DEPT.DESC
      SCREEN DISPLAY;;3
      S$DATA(5)<S$SCR> = CCTR
      SCREEN DISPLAY;;5
      MATREAD CCTR.REC FROM COST.CNTR, CONO:CCTR ELSE
         MAT CCTR.REC = ""
         CCTR.DESC = "Invalid Cost Center"
      END
      S$DATA(6)<S$SCR> = CCTR.DESC
      SCREEN DISPLAY;;6
      SDATE = SDT
      S$DATA(4)<S$SCR> = SDATE
      SCREEN DISPLAY;;4
      GOTO 150
   END
120 *
   SCREEN FIELD;;2
   SCREEN INPUT;;2;GOTO 99999
   DEPT = S$VALUE
   IF DEPT = "" THEN
      MAT DEPT.REC = ""
   END ELSE
      MATREAD DEPT.REC FROM DEPARTMENT, CONO:DEPT ELSE
         ERRMSG = "Invalid Department"
         GOSUB 90000
         GOTO 120
      END
      S$DATA(3)<S$SCR> = DEPT.DESC
      SCREEN DISPLAY;;3
   END
130 *
   SCREEN FIELD;;5
   SCREEN INPUT;;5;GOTO 100
   CCTR = S$VALUE
   BEGIN CASE
      CASE CCTR = "???" AND DEPT # ""
         GXR.CO = CONO
         GXR.XREF = DEPARTMENT
         GXR.SRCH.ID = DEPT
         GXR.FILE = COST.CNTR
         GXR.LOC = 5
         GXR.TOP.LINE = "COST CENTER XREF SEARCH"
         GXR.HEADING<1,1> = "CCTR"
         GXR.ATT<1,1> = 0
         GXR.LEN<1,1> = 4
         GXR.HEADING<1,2> = "DESCRIPTION"
         GXR.ATT<1,2> = 1
         GXR.LEN<1,2> = 30
         GXR.ID = ""
*         CALL GEN.XREF1 (MAT GEN.XREF.REC, PREFIX)
         CALL GEN.XREF (MAT GEN.XREF.REC, PREFIX)
         CCTR = GXR.ID
         IF GXR.ACTION # "X" THEN
            SCREEN FORMAT
            S$DATA(5)<S$SCR> = CCTR
            GOSUB 60000
            IF NOT(NUM(CCTR)) THEN GOTO 130
         END
         IF GXR.ID = "" THEN GOTO 130
      CASE CCTR # "" AND NUM(CCTR) AND DEPT = ""
         NULL
      CASE CCTR # "" AND NUM(CCTR) AND DEPT # ""
         LOCATE CCTR IN DEPT.CCTRS<1>,1 SETTING C ELSE
            ERRMSG = "Invalid cost center for specified department"
            GOSUB 90000
            GOTO 130
         END
      CASE 1
         ERRMSG = "Invalid Entry"
         GOSUB 90000
         GOTO 130
   END CASE
   IF CCTR = "" THEN
      MAT CCTR.REC = ""
   END ELSE
      MATREAD CCTR.REC FROM COST.CNTR, CONO:CCTR ELSE
         ERRMSG = "Invalid Cost Center"
         GOSUB 90000
         GOTO 130
      END
      IF CCTR.MASTER # "" AND CCTR.MASTER # CCTR THEN
         ERRMSG = "This is not a master Cost Center"
         GOSUB 90000
         GOTO 130
      END
      IF DEPT = "" OR DEPT # CCTR.DEPT THEN
         DEPT = CCTR.DEPT
         MATREAD DEPT.REC FROM DEPARTMENT, CONO:DEPT ELSE
            MAT DEPT.REC = ""
            DEPT.DESC = "???????????????"
         END
         S$DATA(2)<S$SCR> = DEPT
         S$DATA(3)<S$SCR> = DEPT.DESC
         SCREEN DISPLAY;;2
         SCREEN DISPLAY;;3
      END
      S$DATA(6)<S$SCR> = CCTR.DESC
      SCREEN DISPLAY;;6
   END
140 *
   SCREEN FIELD;;4
   SCREEN INPUT;;4;GOTO 100
   IF ACTION = 'M' THEN
      IF S$VALUE < TODAY THEN
         ERRMSG = "Invalid date. The date can not be less than today's date."
         GOSUB 90000
         GOTO 140
      END
   END
   SDATE = S$VALUE
150 *
   EDATE = SDATE + 27
   MAT CCTR.SCHED.MATRIX = ""
   MAT PEND.CCTR.SCHED.MATRIX = ""
   UPDATE.FLAG = ""
   LINE.CNT = 0
   DONE = 1
   FOR CDATE = SDATE TO EDATE
      LINE.CNT = LINE.CNT + 1
      MATREAD CCTR.SCHED.REC FROM CCTR.SCHED, CONO:CCTR:"*":CDATE ELSE
         IF ACTION = 'M' THEN
            MAT CCTR.SCHED.REC = ""
         END ELSE
            MATREAD CCTR.SCHED.REC FROM CCTR.SCHED.HIST, CONO:CCTR:"*":CDATE ELSE MAT CCTR.SCHED.REC = ""
         END
      END
      MATREAD PEND.CCTR.SCHED.REC FROM PEND.CCTR.SCHED, CONO:CCTR:"*":CDATE ELSE MAT PEND.CCTR.SCHED.REC = ""
      FOR DD = 1 TO CCTR.SCHED.REC.SIZE
         CCTR.SCHED.MATRIX(DD)<LINE.CNT> = CCTR.SCHED.REC(DD)
         PEND.CCTR.SCHED.MATRIX(DD)<LINE.CNT> = PEND.CCTR.SCHED.REC(DD)
      NEXT DD
   NEXT CDATE
   S$DATA(7)<S$SCR> = EDATE
   SCREEN DISPLAY;;7
   FOR REF.NO = 1 TO LINE.CNT
      GOSUB 40000
   NEXT REF.NO
   REF.NO = 1
   CURR.REF.NO = ""
   GOSUB 50000
   TP.ERRMSG = ""
   GOSUB 89900;* CHECK FOR ACTIVE TRANSACTION
*
*---- GET OPERATOR REQUEST
*
500 *
   IF ACTION = "M"  AND TP.DIV # "X" THEN
      SCREEN FIELD;;25
      SCREEN INPUT;;25
   END ELSE
      SCREEN FIELD;;37
      SCREEN INPUT;;37
   END
   OPTION = S$VALUE
510 *
   BEGIN CASE
      CASE OPTION = "C" AND LINE.CNT > 0
         GOSUB 600
         IF S$VALUE # "" AND S$VALUE # "END" THEN
            REF.NO = S$VALUE
            GOSUB 10000
            IF S$VALUE = "END" THEN
               CURR.REF.NO = ""
               GOSUB 50000
            END
         END
      CASE OPTION = "I"
         GOSUB 600
         IF S$VALUE # "" AND S$VALUE # 'END' THEN
            REF.NO = S$VALUE
            IF S$DATA(18)<S$SCR,REF.NO> > 0 OR S$DATA(41)<S$SCR,REF.NO> > 0 THEN
               S$SCR = S$SCR + 1
               CDATE = SDATE + REF.NO - 1
               MAT CCTR.SCHED.REC = ""
               MAT PEND.CCTR.SCHED.REC = ""
               FOR JJ = 1 TO CCTR.SCHED.REC.SIZE
                  CCTR.SCHED.REC(JJ) = CCTR.SCHED.MATRIX(JJ)<REF.NO>
                  PEND.CCTR.SCHED.REC(JJ) = PEND.CCTR.SCHED.MATRIX(JJ)<REF.NO>
               NEXT JJ
               CALL CCTR.SCHED.JOB (CONO, DEPT, DEPT.DESC, CCTR, CCTR.DESC, CDATE)
               SCREEN CLOSE
               S$SCR = S$SCR - 1
               SCREEN FORMAT
               GOSUB 60000
               CURR.REF.NO = ""
               GOSUB 50000
            END
         END
      CASE OPTION = "S" OR OPTION = "SF"
         REF.NO = CURR.REF.NO + LINE.COUNT
         IF REF.NO > LINE.CNT THEN REF.NO = 1
         GOSUB 50000
      CASE OPTION = "ST"
         REF.NO = 1
         GOSUB 50000
      CASE OPTION = "SB"
         REF.NO = LINE.CNT
         GOSUB 50000
      CASE OPTION = "SR"
         REF.NO = CURR.REF.NO - LINE.COUNT
         IF REF.NO < 1 THEN REF.NO = 1
         GOSUB 50000
      CASE OPTION = "E" OR OPTION = "END"
         IF ACTION = 'DEP.INQ' THEN
            SCREEN CLOSE
            GOTO 99999
         END ELSE
            GOTO 100
         END
      CASE OPTION = "F"
         FOR REF = 1 TO LINE.CNT
            IF UPDATE.FLAG<REF> # "" THEN
               CDATE = SDATE + REF - 1
               MAT CCTR.SCHED.REC = ""
               FOR DD = 1 TO CCTR.SCHED.REC.SIZE
                  CCTR.SCHED.REC(DD) = CCTR.SCHED.MATRIX(DD)<REF>
               NEXT DD
***            MATWRITE CCTR.SCHED.REC ON CCTR.SCHED, CONO:CCTR:"*":CDATE
               TPFID = CONO:CCTR:"*":CDATE
               MATBUILD TPREC FROM CCTR.SCHED.REC
               CALL TRANSACTION.WRITE("WRITE",CONO,TP.DIV,"CCTR.SCHED",TPFID,TPREC,CCTR.SCHED,PSS.JOURNAL,ERRMSG)
**********************************************************************
            END
         NEXT REF
         GOTO 100
      CASE 1
         ERRMSG = "Invalid Selection"
         GOSUB 90000
   END CASE
   GOTO 500
*
*---- GET LINE REFERENCE NUMBER
*
600 *
   SCREEN FIELD;;26
   S$MINV = CURR.REF.NO
   S$MAXV = S$MINV + LINE.COUNT - 1
   IF S$MAXV > LINE.CNT THEN S$MAXV = LINE.CNT
   SCREEN INPUT;;26
   RETURN
*
*---- GET MULTI-LINE DATA
*
10000 *
   IF UPDATE.FLAG<REF.NO> # "Y" THEN
      CDATE = SDATE + REF.NO - 1
      MATREADU CCTR.SCHED.REC FROM CCTR.SCHED, CONO : CCTR :"*": CDATE ELSE
         MAT CCTR.SCHED.REC = ""
         CCS.DEPT = DEPT
         ERRMSG = ""
         CALL GEN.CCTR.SCHED.SUB (CONO, CCTR, CDATE, ERRMSG)
         IF ERRMSG # "" THEN
            RELEASE CCTR.SCHED, CONO : CCTR :"*": CDATE
            GOSUB 90000
            RETURN
         END
      END
*
* Update Pending Cost Center Record
*
      MATREADU PEND.CCTR.SCHED.REC FROM PEND.CCTR.SCHED, CONO : CCTR :"*": CDATE ELSE
         MAT PEND.CCTR.SCHED.REC = ""
         PCCS.DEPT = DEPT
         ERRMSG = ""
         CALL PEN.CCTR.SCHED.SUB (CONO, CCTR, CDATE, ERRMSG)
         IF ERRMSG # "" THEN
            RELEASE PEND.CCTR.SCHED, CONO : CCTR :"*": CDATE
            GOSUB 90000
            RETURN
         END
      END
      FOR DD = 1 TO CCTR.SCHED.REC.SIZE
         CCTR.SCHED.MATRIX(DD)<REF.NO> = CCTR.SCHED.REC(DD)
      NEXT DD
      GOSUB 40000
      S$VAL = REF.NO
      SCREEN DISPLAY;;17
      S$VAL = REF.NO
      SCREEN DISPLAY;;18
      S$VAL = REF.NO
      SCREEN DISPLAY;;19
      S$VAL = REF.NO
      SCREEN DISPLAY;;20
*        S$VAL = REF.NO
*        SCREEN DISPLAY;;21
      UPDATE.FLAG<REF.NO> = "Y"
   END
*
   CCSM.AVL.HRS<REF.NO> = 0
   FOR SFT = 1 TO 3
      CCSM.AVL.HRS<REF.NO> = CCSM.AVL.HRS<REF.NO> + (CCSM.AVL.SHR<REF.NO,SFT> * CCSM.MULT<REF.NO,SFT>)
   NEXT SFT
   IF CCSM.AVL.HRS<REF.NO> = 0 THEN CCSM.AVL.HRS<REF.NO> = ""
   S$DATA(17)<S$SCR,REF.NO> = CCSM.AVL.HRS<REF.NO>
   CCSM.REM.HRS<REF.NO> = CCSM.AVL.HRS<REF.NO> - CCSM.SCH.HRS<REF.NO>
   IF CCSM.REM.HRS<REF.NO> = 0 THEN CCSM.REM.HRS<REF.NO> = ""
   BEGIN CASE
      CASE CCSM.REM.HRS<REF.NO> = ""
         S$DATA(19)<S$SCR,REF.NO> = ""
         S$DATA(20)<S$SCR,REF.NO> = ""
      CASE CCSM.REM.HRS<REF.NO> > 0
         S$DATA(19)<S$SCR,REF.NO> = CCSM.REM.HRS<REF.NO>
         S$DATA(20)<S$SCR> = ""
      CASE 1
         S$DATA(19)<S$SCR> = ""
         S$DATA(20)<S$SCR,REF.NO> = CCSM.REM.HRS<REF.NO> * (-1)
   END CASE
   S$VAL = REF.NO
   SCREEN DISPLAY;;17
   S$VAL = REF.NO
   SCREEN DISPLAY;;19
   S$VAL = REF.NO
   SCREEN DISPLAY;;20
   RETURN
*
*---- CHECK FOR OVER LOADING OF A SHIFT
*
30000 *
   MCNT = DCOUNT(CCSM.SCH.SM.HRS<REF.NO,SFT>,SVM)
   MLT = CCSM.MULT<REF.NO,SFT>
   IF MLT > MCNT THEN MCNT = MLT
   CCSM.REM.SM.HRS<REF.NO,SFT> = ""
   BLK = 0
   FOR M = 1 TO MCNT
      BEGIN CASE
         CASE M > MLT AND CCSM.SCH.SM.HRS<REF.NO,SFT,M> + 0 # 0
            CCSM.REM.SM.HRS<REF.NO,SFT,M> = 0 - CCSM.SCH.SM.HRS<REF.NO,SFT,M>
         CASE M > MLT
         CASE 1
            CCSM.REM.SM.HRS<REF.NO,SFT,M> = CCSM.AVL.SHR<REF.NO,SFT> - CCSM.SCH.SM.HRS<REF.NO,SFT,M>
      END CASE
      IF CCSM.REM.SM.HRS<REF.NO,SFT,M> = 0 THEN CCSM.REM.SM.HRS<REF.NO,SFT,M> = ""
      IF CCSM.REM.SM.HRS<REF.NO,SFT,M> + 0 < 0 THEN BLK = 1
   NEXT M
   IF BLK THEN
      ERRMSG = "This shift is overloaded"
      GOSUB 90000
      ERRMSG = ""
   END
   RETURN
*
*---- LOAD S$DATA MATRIX
*
40000 *
   S$DATA(12)<S$SCR,REF.NO> = SDATE + REF.NO - 1
   S$DATA(13)<S$SCR,REF.NO> = OCONV(SDATE+REF.NO-1,"DWA")[1,3]
   XCNT = DCOUNT(CCSM.REM.SM.HRS<REF.NO,3>,SVM)
   XDONE = 0
   IF CCSM.AVL.HRS<REF.NO> = 0 THEN CCSM.AVL.HRS<REF.NO> = ""
   S$DATA(17)<S$SCR,REF.NO> = CCSM.AVL.HRS<REF.NO>
   IF CCSM.SCH.HRS<REF.NO> = 0 THEN CCSM.SCH.HRS<REF.NO> = ""
   S$DATA(18)<S$SCR,REF.NO> = CCSM.SCH.HRS<REF.NO>
   IF CCSM.REM.HRS<REF.NO> = 0 THEN CCSM.REM.HRS<REF.NO> = ""
   BEGIN CASE
      CASE CCSM.REM.HRS<REF.NO> = ""
         S$DATA(19)<S$SCR,REF.NO> = ""
         S$DATA(20)<S$SCR,REF.NO> = ""
      CASE CCSM.REM.HRS<REF.NO> > 0
         S$DATA(19)<S$SCR,REF.NO> = CCSM.REM.HRS<REF.NO>
         S$DATA(20)<S$SCR,REF.NO> = ""
      CASE 1
         S$DATA(19)<S$SCR,REF.NO> = ""
         S$DATA(20)<S$SCR,REF.NO> = CCSM.REM.HRS<REF.NO> * (-1)
   END CASE
*     S$DATA(21)<S$SCR,REF.NO> = 0
*     JOB.CNT = DCOUNT(CCSM.JOB<REF.NO>,VM)
*     FOR JJ = 1 TO JOB.CNT
*        LOCATE CCSM.JOB<REF.NO,JJ> IN CCSM.JOB<REF.NO>,1 SETTING JFND ELSE JFND = JJ
*        IF JFND = JJ THEN
*           S$DATA(21)<S$SCR,REF.NO> = S$DATA(21)<S$SCR,REF.NO> + 1
*        END
*     NEXT JJ
*     IF S$DATA(21)<S$SCR,REF.NO> = 0 THEN S$DATA(21)<S$SCR,REF.NO> = ""
*     IF PCCSM.SCH.HRS<REF.NO> = 0 THEN PCCSM.SCH.HRS<REF.NO> = ""
   S$DATA(41)<S$SCR,REF.NO> = PCCSM.SCH.HRS<REF.NO>
   PEND.OVER = CCSM.AVL.HRS<REF.NO> - (CCSM.SCH.HRS<REF.NO> + PCCSM.SCH.HRS<REF.NO>)
   IF PEND.OVER < 0 THEN
      S$DATA(42)<S$SCR,REF.NO> = PEND.OVER * (-1)
   END ELSE
      S$DATA(42)<S$SCR,REF.NO> = ""
   END
*     S$DATA(43)<S$SCR,REF.NO> = 0
*     PEND.JOB.CNT = DCOUNT(PCCSM.JOB<REF.NO>,VM)
*     FOR PJJ = 1 TO PEND.JOB.CNT
*        LOCATE PCCSM.JOB<REF.NO,JJ> IN PCCSM.JOB<REF.NO>,1 SETTING PJFND ELSE PJFND = PJJ
*        IF PJFND = PJJ THEN
*           S$DATA(43)<S$SCR,REF.NO> = S$DATA(43)<S$SCR,REF.NO> + 1
*        END
*     NEXT JJ
*     IF S$DATA(43)<S$SCR,REF.NO> = 0 THEN S$DATA(43)<S$SCR,REF.NO> = ""
   RETURN
*
*---- DISPLAY MULTI-VALUE DATA
*
50000 *
   START.REF.NO = 1 + INT((REF.NO-1)/LINE.COUNT)*LINE.COUNT
   IF START.REF.NO = CURR.REF.NO THEN RETURN
   CURR.REF.NO = START.REF.NO
   S$VAL = START.REF.NO
   S$CNT = LINE.CNT
   SCREEN MULTI;;C;11;12;13;17;18;19;20;41;42
   RETURN
*
*---- DISPLAY ALL DATA
*
60000 *
   SCREEN DISPLAY;;ALL
   RETURN
***(TPCHECKBEG)***************************************************
*
*---- CHECK FOR ACTIVE TRANSACTION
*
89900 *
   BEGIN CASE
      CASE ACTION = "M"
         READU LREC FROM PSS.LOCK, CONO:"TP" ELSE NULL
         REQDIV = DEPT.DIV
         CALL TRANSACTION.LOCK(CONO, REQDIV, TP.DIV, ERRMSG)
         BEGIN CASE
            CASE TP.DIV = "X"
               RELEASE PSS.LOCK, CONO:"TP"
               IF ERRMSG # TP.ERRMSG THEN GOSUB 90000
            CASE TP.DIV = ""
               DCNT = DCOUNT(REQDIV,VM)
               FOR DPTR = 1 TO DCNT
                  CDIV = REQDIV<1,DPTR>
                  LOCK.ID = "[":CONO:",":CDIV:",":@LOGNAME:" @ ":@TTY:"]"
                  READU LREC FROM PSS.LOCK, LOCK.ID ELSE NULL
               NEXT DPTR
         END CASE
         RELEASE PSS.LOCK, CONO:"TP"
         TP.ERRMSG = ""
      CASE 1
         TP.DIV = ""
         DELETE PSS.LOCK, @TTY
         TP.ERRMSG = ""
   END CASE
   RETURN
***(TPCHECKEND)***************************************************
*
*---- ERROR ROUTINE
*
90000 ERR.TYPE=1;CALL SI_SYSCOM(MAT SYSCOM.REC);RETURN
*
*---- END OF PROGRAM
*
99999 *
   SCREEN CLEAR;;D
   RETURN
END 
