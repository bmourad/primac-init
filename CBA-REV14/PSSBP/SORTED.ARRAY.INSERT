SUBROUTINE SORTED.ARRAY.INSERT(ID, ID.ARRAY, VAL, VAL.ARRAY, SORT.ORDER.ARRAY)
***************************************************************************
* REVISION    - [XX.X]
* Copyright 1995 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - PSSBP
* PROGRAM     - SORTED.ARRAY.INSERT
* BY          - larryt; CBA
* DATE        - 04/29/1997
* 
* Inputs:
*
* ID          - ID of the item to be inserted into the array
* ID.ARRAY    - List of IDs sorted.  When first calling this subroutine,
*               pass this variable in null, and as you add IDs, this list
*               will grow.
* VAL         - Multivalued list of values to sort on for the ID passed in.
* VAL.ARRAY   - This is an internal-use-only array.  When first calling
*               this subroutine, pass this variable in null, and as you
*               add values, this list will grow.
* SORT.ORDER.ARRAY - Multivalued list of sort orders, corresponding to the
*                    multivalues in the variable VAR.  Valid values are
*                    "A" for ascending sort and "D" for descending sort.
*
* Example:
*
* You are sorting persons by descending age, then by ascending name.
* Set ID.ARRAY and VAL.ARRAY to null.  Set SORT.ORDER.ARRAY to "D":VM:"A".
* Then, loop through your list of persons to be sorted, setting ID to the
* each person's ID, and setting VAL to AGE:VM:NAME and call this subroutine.
* When the loop is done, the variable ID.ARRAY will contain the list of sorted
* IDs.
*
*T22102 renee 07/25/1997 * New program created for CPI. I am making
*                          those same CPI changes in the Rev10b base
*                          system package. This screen is called from
*                          SORT.OPTIONS.MAINT. 
*T21741 renee 06/25/1997 * CHECK IN
*T21740 larryt 04/29/1997 * ROUTINE TO MANAGE INTERNAL SORTING ARRAY
*T22291 renee 10/14/1997 * Sort option not working correctly if mort than
*                          one type of sort.
* 
* 
***************************************************************************
EQU TRUE  TO 1
EQU FALSE TO 0
*
IF VAL.ARRAY = "" THEN
  VAL.ARRAY<1> = VAL
  ID.ARRAY<1> = ID
END ELSE
  GOSUB INSERT.ARRAY
END
*
RETURN
*
*************
INSERT.ARRAY:
*************
ID.POS = 1
DONE = FALSE
*
FOR POS1 = 1 TO DCOUNT(VAL, @VM) UNTIL DONE = TRUE
  ONE.VAL = VAL<1,POS1>
  *
  SORT.ORDER = SORT.ORDER.ARRAY<1,POS1>
* T22291 v   If sort order = "" go back to main sort method
  IF SORT.ORDER = "" THEN SORT.ORDER = SORT.ORDER.ARRAY<1,1>
* T22291 ^
  IF SORT.ORDER # "D" THEN SORT.ORDER = "A"
  *
  VAL.FOUND = FALSE
  *
  START.LOOP = ID.POS
  FOR POS2 = START.LOOP TO DCOUNT(VAL.ARRAY, @AM) UNTIL DONE OR VAL.FOUND
    TWO.VAL = VAL.ARRAY<POS2, POS1>
    *
    * Check to see if the previous (one level higher up) sort value changed
    IF POS1 > 1 THEN
      TVAL1 = VAL<1,POS1-1>
      TVAL2 = VAL.ARRAY<POS2,POS1-1>
      *
      * The previous sort level value changed before we found an insert
      *   position for our value to be inserted, so its position must
      *   be the last position for that sort level.
      IF (TVAL2 > TVAL1 AND SORT.ORDER = "A") OR (TVAL2 < TVAL1 AND SORT.ORDER = "D") THEN
        VAL.FOUND = TRUE
        DONE = TRUE
        INS.POS = ID.POS
      END ELSE
        GOSUB FIND.POS
      END
    END ELSE
      GOSUB FIND.POS
    END
    *
  NEXT POS2
NEXT POS1
*
* If we did not find an insert position within the sorted array, that
*   means our new value must come at the end.
IF DONE = 0 THEN
  VAL.ARRAY<-1> = VAL
  ID.ARRAY<-1> = ID
END ELSE
  VAL.ARRAY = INSERT(VAL.ARRAY,INS.POS;VAL)
  ID.ARRAY  = INSERT(ID.ARRAY,INS.POS;ID)
END
*
RETURN   
*
*********
FIND.POS:
*********
* ALGORITHM:
*
*   If the value we are looking to insert is less than the current position's
*   value in the sorted array, we have found the position to insert.  If
*   they are equal, we need to move to the next sort level, if possible.
*   If it is the value we are looking to insert is greater than the
*   current position's value in the sorted array, we need to increment our
*   position in the sorted array.
*
*********
BEGIN CASE
  CASE (ONE.VAL < TWO.VAL AND SORT.ORDER = "A") OR (ONE.VAL > TWO.VAL AND SORT.ORDER = "D")
    INS.POS = ID.POS
    DONE = TRUE
  CASE TWO.VAL = ONE.VAL
    IF POS1 = DCOUNT(VAL, @VM) THEN
      INS.POS = ID.POS
      DONE = TRUE
    END ELSE
      VAL.FOUND = TRUE
    END
  CASE TRUE
    ID.POS = ID.POS + 1
END CASE
*
RETURN
*
END

