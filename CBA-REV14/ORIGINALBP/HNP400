*********************************************************************
*
* PROGRAM  - HNP400
*
* AUTHOR   - NICK AMENDOLA, NASTech
*
* DATE     - 11/13/93
*
* MODIFIED - 07/05/94
*
* DESCRIPTION
*
* This program runs in conjunction with the NASTech Data Collection
* system.
*
*C23732 gat 08/29/1995 MATERIAL CONVERSION FACTORS LEFT OUT OF PROCESS
*T21294 lanny 12/03/1996 * Use logic from PRODUCTION.JOB.SETUP for 'X'
*                          job ID.
*T21963 LLH 06/09/1997 * Change logic of finding Xjobs from production.rec
*T23359 rik 01/05/1999 * ADD the WIP tracking system to Base with
*                        modifications. PRINTING: the print queue will
*                        be determined by the network and station id of
*                        the Shop Floor Terminal requesting the Barcode
*                        label. CREATE PALLET TRANS: The pallet number
*                        will now be assigned, sequentially, by the
*                        system. The Pallet's barcode label will then
*                        print. UPDATE PALLET TRANS: Will maintain a
*                        cross-ref of TO-JOB, and will update the
*                        TO-OPER (cctr) field.
*T24118 lanny 09/14/1999 * Fix "X" Job ID due to 52 period acctng.
*T24507 lanny 10/26/1999 * Incorporate DIV SECURITY mods.
*T24887 gat 02/29/2000 * Change date on material roll/skid trans going
*                        directly to DAILY.MATL to carry the correct
*                        date.
*T26132 gat 09/06/2001 * Upgrade to use three digit code from station
*T25740 epitka 04/02/2002 * Rev12
*T26556 ajibaly 05/06/2002 * Update to REV12 files
*T25756 epitka 07/18/2002 * This program is putting serial #'s even
*                           for generally tracked products in DMT.SERIAL
*                           attribute.
*T28477 thompson 03/11/2005 * Change to read PNP.CNTL record by network
*                             id.
*********************************************************************
*
*---- COPY STATEMENTS
*
*COPY>JCS.CPYLIB>COM.PNP
*COPY>JCS.CPYLIB>PNP.LOG
*COPY>JCS.CPYLIB>PNP.TRAN
*COPY>PMC.CPYLIB>EMPLOYEE
*COPY>PMC.CPYLIB>COMPANY
*COPY>JCS.CPYLIB>OPERATION
*COPY>JCS.CPYLIB>JOB
*COPY>JCS.CPYLIB>JOB.CUTOFF.NO
*COPY>NDC.CPYLIB>PERTS.TRACK
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>INV_SERIAL ;* T26556
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>JCS.CPYLIB>DAILY.TIME.MATL
*COPY>JCS.CPYLIB>DAILY.MATL
*COPY>NDC.CPYLIB>DOWNLOAD
*T23359 v
*COPY>WTR.CPYLIB>WIP.TRACK.PALLET
*COPY>WTR.CPYLIB>WIP.TRACK.CONTROL
*COPY>WTR.CPYLIB>WIPT.PRINT.QUEUE
*COPY>PMC.CPYLIB>CUSTOMER
*COPY>PMC.CPYLIB>VEND
*T23359 ^
*COPY>JCS.CPYLIB>DEPT.SPOOL.TABLE
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>PMC.CPYLIB>FISCAL   ;* T24118
*COPY>ICS.CPYLIB>CATEGORY ;*T26756
*
*---- GET PARAMETER
*
   PROCREAD PARAM ELSE PARAM = ""
   BEGIN CASE
      CASE PARAM<1> = "T"
         RMODE = "T"               ;* TEST MODE
      CASE PARAM<1> = "B"
         RMODE = "B"               ;* BATCH MODE
      CASE 1
         RMODE = "P"               ;* PHANTOM MODE
   END CASE
*
*---- OPEN ALL FILES
*
   OPEN "","NDC.TRAN" TO PNP.TRAN ELSE
      ERRMSG = "CANNOT LOCATE NDC.TRAN FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","INP.QUEUE" TO INP.QUEUE ELSE
      ERRMSG = "CANNOT LOCATE INP.QUEUE FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","CONTROL" TO CONTROL ELSE
      ERRMSG = "CANNOT LOCATE CONTROL FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","COMPANY" TO COMPANY ELSE
      ERRMSG = "CANNOT LOCATE COMPANY FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","OPERATION" TO OPERATION ELSE
      ERRMSG = "CANNOT LOCATE OPERATION FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","JOB" TO JOB ELSE
      ERRMSG = "CANNOT LOCATE JOB FILE"
      GOSUB 90000
      STOP
   END
   OPEN '','DEPT.SPOOL.TABLE' TO DEPT.SPOOL.TABLE ELSE
      ERRMSG = 'CANNOT OPEN DEPT.SPOOL.TABLE FILE'
      GOSUB 90000
      STOP
   END
   OPEN '','EMPLOYEE' TO EMPLOYEE ELSE
      ERRMSG = 'CANNOT OPEN EMPLOYEE FILE'
      GOSUB 90000
      STOP
   END
   OPEN "","INVENTORY" TO INVENTORY ELSE
      ERRMSG = "CANNOT LOCATE INVENTORY FILE"
      GOSUB 90000
      STOP
   END
*T26756 v
   OPEN "","CATEGORY" TO CATEGORY ELSE
      ERRMSG = "CANNOT LOCATE CATEGORY FILE"
      GOSUB 90000
      STOP
   END
*T26756 ^
   OPEN "","INV.WHSE" TO INV.WHSE ELSE
      ERRMSG = "CANNOT LOCATE INV.WHSE FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE
      ERRMSG = "CANNOT LOCATE INV.WHSE.LOC FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","DAILY.TIME.MATL" TO DAILY.TIME.MATL ELSE
      ERRMSG = "CANNOT LOCATE DAILY.TIME.MATL FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","DAILY.MATL" TO DAILY.MATL ELSE
      ERRMSG = "CANNOT LOCATE DAILY.MATL FILE"
      GOSUB 90000
      STOP
   END
*T26556 v
*  OPEN "","ROLL.SKID.INFO" TO ROLL.SKID.INFO ELSE
*     ERRMSG = "CANNOT LOCATE ROLL.SKID.INFO FILE"
*     GOSUB 90000
*     STOP
*  END
   OPEN "","INV_SERIAL" TO INV_SERIAL ELSE
      ERRMSG = "CANNOT LOCATE INV_SERIAL FILE"
      GOSUB 90000
      STOP
   END
*T26556 ^
   JTR.FLAG=1
   OPEN "","JOB.TRANS" TO JOB.TRANS ELSE JTR.FLAG=0
   OPEN "","PNP.LOG" TO PNP.LOG ELSE
      ERRMSG = "CANNOT LOCATE PNP.LOG FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","DOWNLOAD" TO DOWNLOAD ELSE
      ERRMSG = "CANNOT LOCATE DOWNLOAD FILE"
      GOSUB 90000
      STOP
   END
*T23359 v
   OPEN "","WIP.TRACK.PALLET" TO WIP.TRACK.PALLET ELSE
      ERRMSG = "CANNOT LOCATE WIP.TRACK.PALLET FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","WIP.TRACK.CONTROL" TO WIP.TRACK.CONTROL ELSE
      ERRMSG = "CANNOT LOCATE WIP.TRACK.CONTROL FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","WIP.TRACK.LOC" TO WIP.TRACK.LOC ELSE
      ERRMSG = "CANNOT LOCATE WIP.TRACK.LOC FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","WIP.TRACK.HIST" TO WIP.TRACK.HIST ELSE
      ERRMSG = "CANNOT LOCATE WIP.TRACK.HIST FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","CUSTOMER" TO CUSTOMER ELSE
      ERRMSG = "CANNOT LOCATE CUSTOMER FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","VEND" TO VEND ELSE
      ERRMSG = "CANNOT LOCATE VEND FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","WIPT.PRINT.QUEUE" TO WIPT.PRINT.QUEUE ELSE
      ERRMSG = "CANNOT LOCATE WIPT.PRINT.QUEUE FILE"
      GOSUB 90000
      STOP
   END
*T23359 ^
   PERTS.FLAG=1
   OPEN "","PERTS.TRACK" TO PERTS.TRACK ELSE PERTS.FLAG=0
*
*---- INITIALIZATION
*
   READU TREC FROM CONTROL, "HNP400.LOCK" LOCKED STOP ELSE NULL
   SHEET.OK=1
   PROMPT ""
   PREV.KEY=""
   PSSCONO=""
   PSSFLAG=""
   BARCONO=""
   BARFLAG=""
   MAXID = 0
   PNPCO = ""
*T23359v
   ESC = CHAR(27)
*T23359^
   FOR NETID = 1 TO 250
      MATREAD DLOAD.REC FROM DOWNLOAD, NETID THEN
         MATREAD COMP.REC FROM COMPANY, DLOAD.CONO THEN
            PNPCO<NETID> = DLOAD.CONO
            MAXID = NETID
         END
      END
   NEXT NETID
   IF PNPCO = "" THEN
      ERRMSG = "NO NETWORK CONTROLLERS DEFINED"
      GOSUB 90000
      STOP
   END
*T28477 READ PNP.CTL FROM CONTROL,"PNP.CTL" ELSE
*T28477   PNP.CTL=""
*T28477   PNP.CTL<1>=21600
*T28477   PNP.CTL<2>=2100
*T28477   PNP.CTL<3>="+"
*T28477 END
   CDATE = DATE()
   CTIME = TIME()
   IF CTIME < 10 THEN CDATE = DATE()
   READU TREC FROM CONTROL, "HNP400.CNTL" ELSE TREC = ""
   TREC = ""
   TREC<2> = "STARTED ON ":OCONV(CDATE,"D2/"):" AT ":OCONV(CTIME,"MTS")
   TREC<3> = RMODE
   WRITE TREC ON CONTROL, "HNP400.CNTL"
   DTM.LOCKED = ""
   PNPL.LOCKED = ""
   IF TRN.REC.SIZE < 40 THEN TRN.REC.SIZE = 40
*
*---- MAIN PROCESSING
*
   NETID = 1
   ACTIVE = 1
   IDLECNT = 0
   LOOP
      GOSUB 98000
      REC.LOCK=0
      READ TREC FROM CONTROL, "HNP400.CNTL" ELSE TREC = ""
      IF TREC<1> = "STOP" THEN ACTIVE = 0
   WHILE ACTIVE DO
      BEGIN CASE
         CASE RMODE="T"
            MSG = "X"
            READNEXT PNP.KEY ELSE
               MSG = ""
               ACTIVE = 0
            END
            IF ACTIVE THEN
               MATREAD TRN.REC FROM PNP.TRAN,PNP.KEY ELSE MAT TRN.REC = ""
            END
         CASE 1
            CALL HNP.GETQUEUE(NETID,MSG,INP.QUEUE,QPTR,STATUS)
            IF MSG = "" THEN
               IF RMODE = "P" THEN SLEEP 5
               LOOP
                  IF NETID < MAXID THEN
                     NETID = NETID + 1
                  END ELSE
                     NETID = 1
                     IF RMODE = "B" THEN
                        IDLECNT = IDLECNT + 1
                        IF IDLECNT = 3 THEN ACTIVE = 0
                     END
                  END
               WHILE PNPCO<NETID> = "" DO
               REPEAT
            END ELSE
               IDLECNT = 0
               MAT TRN.REC=""
               CNT=DCOUNT(MSG,"\")
               IF CNT > TRN.REC.SIZE THEN CNT = TRN.REC.SIZE
               FOR A=1 TO CNT
                  TRN.REC(A)=TRIM(FIELD(MSG,"\",A))
               NEXT A
               PNP.KEY=TRN.PNP.ID:"!":TRN.TRAN.ID
               MATWRITE TRN.REC ON PNP.TRAN,PNP.KEY
            END
      END CASE
      BEGIN CASE
         CASE MSG = ""
         CASE TRN.TTYPE = "99"
            IF NUM(TRN.PNP.ID) THEN
               PID = TRN.PNP.ID
            END ELSE
               PID = TRN.PNP.ID[1,LEN(TRN.PNP.ID)-1]
            END
            PERTS.CONO = PNPCO<PID>
            GOSUB 200
            IF REC.LOCK THEN
               GOSUB 98000
               IF RMODE = "P" THEN
                  SLEEP 1
               END ELSE
                  PRINT @(0,23):@(-4):"RECORD LOCKED":
                  SLEEP 1
                  PRINT @(0,23):@(-4):
               END
            END ELSE
* CALL HNP.DELQUEUE(NETID,INP.QUEUE)
               CALL HNP.UPDQUEUE(NETID,"",INP.QUEUE,STATUS)
               PREV.KEY=PNP.KEY
            END
*        CASE TRN.ETIME=""
*           CALL HNP.DELQUEUE(NETID,INP.QUEUE)
         CASE PNP.KEY=PREV.KEY
            CALL HNP.DELQUEUE(NETID,INP.QUEUE)
         CASE 1
            IF NUM(TRN.PNP.ID) THEN
               PID = TRN.PNP.ID
            END ELSE
               PID = TRN.PNP.ID[1,LEN(TRN.PNP.ID)-1]
            END
            TRN.CONO = PNPCO<PID>
            IF TRN.SDATE="" THEN TRN.SDATE=TRN.TDATE
            ETIME=OCONV(TRN.ETIME,"MTS")
            ETIME=ETIME[1,2]:ETIME[4,2]
            IF TRN.SHIFT="3" THEN
*T28477
               READ PNP.CTL FROM CONTROL,TRN.PNP.ID[1,1]:"PNP.CTL" ELSE
                  PNP.CTL=""
                  PNP.CTL<1>=21600
                  PNP.CTL<2>=2100
                  PNP.CTL<3>="+"
               END
*T28477
               BEGIN CASE
                  CASE PNP.CTL<3>="-" AND ETIME <= PNP.CTL<2>
                     TRN.SDATE=TRN.SDATE-1
                  CASE PNP.CTL<3>="+" AND ETIME >= PNP.CTL<2>
                     TRN.SDATE=TRN.SDATE+1
               END CASE
            END
            GOSUB 200
            IF REC.LOCK THEN
               GOSUB 98000
               IF RMODE = "P" THEN
                  SLEEP 1
               END ELSE
                  PRINT @(0,23):@(-4):"RECORD LOCKED":
                  SLEEP 1
                  PRINT @(0,23):@(-4):
               END
            END ELSE
* CALL HNP.DELQUEUE(NETID,INP.QUEUE)
               CALL HNP.UPDQUEUE(NETID,"",INP.QUEUE,STATUS)
               PREV.KEY=PNP.KEY
            END
      END CASE
   REPEAT
   CDATE = DATE()
   CTIME = TIME()
   IF CTIME < 10 THEN CDATE = DATE()
   READU TREC FROM CONTROL, "HNP400.CNTL" ELSE TREC = ""
   TREC = ""
   TREC<2> = "STOPPED ON ":OCONV(CDATE,"D2/"):" AT ":OCONV(CTIME,"MTS")
   WRITE TREC ON CONTROL, "HNP400.CNTL"
   GOTO 99999
*
*---- PROCESS INPUT TRANSACTION
*
200 *
   JP=1
   MP=1
   IF SHEET.OK THEN
      READ DEPT.WHSE FROM CONTROL, TRN.CONO:"DEPT.WHSE" ELSE DEPT.WHSE=""
   END ELSE
      DEPT.WHSE=""
   END
   BEGIN CASE
      CASE TRN.TTYPE="1"
         GOSUB 400
         IF REC.LOCK THEN RETURN
         IF NOT(NEW.REC) AND PNPL.LOGOFF.FLAG="" THEN
            IF ((TRN.TDATE-LDATE)*86400+TRN.TTIME-LTIME) > PNP.CTL<1> THEN
               PNPL.LOGOFF.FLAG="A"
               PNPL.LOGOFF.DATE=TRN.TDATE
               PNPL.LOGOFF.TIME=TRN.TTIME
               FOR N=PNPL.L1 TO PNPL.L2
                  PNPL.REC(N)=""
               NEXT N
            END
         END
         IF NEW.REC OR PNPL.LOGOFF.FLAG # "" OR NOT(SEQ.OK) THEN
            PNPL.DIV=TRN.DIV
            PNPL.DEPT=TRN.DEPT
            PNPL.SHIFT=TRN.SHIFT
            PNPL.LOGON.PNP=TRN.PNP.ID
            PNPL.LOGON.DATE=TRN.SDATE
            PNPL.LOGON.TIME=TRN.ETIME
            PNPL.LOGOFF.FLAG=""
            IF SEQ.OK THEN
               GOSUB 700
            END ELSE
               MATREADU DTM.REC FROM DAILY.TIME.MATL,TRN.CONO:TRN.EMP:"*":PNPL.LOGON.DATE:"*":PNPL.SHIFT LOCKED REC.LOCK=1 ELSE
                  GOSUB 700
                  RETURN
               END
               IF REC.LOCK THEN RETURN
               DTM.LOCKED = TRN.CONO:TRN.EMP:"*":PNPL.LOGON.DATE:"*":PNPL.SHIFT
               GOSUB 700
               GOSUB 40000
               MATWRITE DTM.REC ON DAILY.TIME.MATL,TRN.CONO:TRN.EMP:"*":PNPL.LOGON.DATE:"*":PNPL.SHIFT
               DTM.LOCKED = ""
            END
         END
      CASE TRN.TTYPE="2"
         GOSUB 400
         IF REC.LOCK THEN RETURN
         NCFLAG = 0
         IF TRN.JOB="" THEN
*T21294 v
*T24118 v
            MATREAD FISCAL.REC FROM CONTROL,PNPCO<PID>:"JCFISCAL" ELSE NULL
*T24507 v
            READ DIVISIONS FROM CONTROL,PNPCO<PID>:"DIVISIONS" ELSE DIVISIONS = ''
            READ DIV.SEC.REC FROM CONTROL,PNPCO<PID>:"DIV.SECURITY" ELSE
               DIV.SEC.REC='N'
               DIV.SEC.REC<2>='N'
            END
            IF TRN.DIV = "" THEN DDV="01" ELSE DDV=TRN.DIV
            IF DIV.SEC.REC<2> = 'Y' THEN
               LOCATE DDV IN DIVISIONS<1>,1 SETTING POS ELSE POS = 1
            END ELSE POS = 1
*T24507 ^
*T24118     READ PRODUCTION.REC FROM CONTROL, PNPCO<PID>:"PRODUCTION.WEEKS" ELSE
            READ PRODUCTION.REC FROM CONTROL, PNPCO<PID>:FR.CURR.PER<1,POS>[1,4]:"PRODUCTION.WEEKS" ELSE
               PRODUCTION.REC = ""
            END
            WDATE = OCONV(PNPL.LOGON.DATE,"D2-")
            DSQ=INT((WDATE[4,2]-1)/7)+1
*           TRN.JOB="X":WDATE[7,2]:WDATE[1,2]:DDV:DSQ ;* Default old if below doesn't work
            TRN.JOB="X":FR.CURR.PER<1,POS>[3,2]:FR.CURR.PER<1,POS>[5,2]:DDV:DSQ ;* Default old if below doesn't work
*T21963
            IF PRODUCTION.REC # "" THEN
               LOCATE PNPL.LOGON.DATE IN PRODUCTION.REC<1>,1 BY 'AR' SETTING PW ELSE NULL
               IF PW <= DCOUNT(PRODUCTION.REC<1>,VM) THEN
                  LOCATE PRODUCTION.REC<2,PW> IN PRODUCTION.REC<2>,1 BY "AR" SETTING STRT THEN
                     WEEK.SEQ = PW - STRT + 1
*T24118             TRN.JOB = "X":WDATE[7,2]:PRODUCTION.REC<2,PW>"R%2":DDV:WEEK.SEQ
                     TRN.JOB = "X":FR.CURR.PER<1,POS>[3,2]:PRODUCTION.REC<2,PW>"R%2":DDV:WEEK.SEQ
                  END
               END ELSE
                  READ PRODUCTION.REC FROM CONTROL, PNPCO<PID>:FR.CURR.PER<1,POS>[1,4]+1:"PRODUCTION.WEEKS" ELSE PRODUCTION.REC = ''
                  IF PRODUCTION.REC # "" THEN
                     LOCATE PNPL.LOGON.DATE IN PRODUCTION.REC<1>,1 BY 'AR' SETTING PW ELSE NULL
                     IF PW <= DCOUNT(PRODUCTION.REC<1>,VM) THEN
                        LOCATE PRODUCTION.REC<2,PW> IN PRODUCTION.REC<2>,1 BY "AR" SETTING STRT THEN
                           WEEK.SEQ = PW - STRT + 1
*                        TRN.JOB = "X":(FR.CURR.PER[1,4]+1)[3,2]:PRODUCTION.REC<2,PW>"R%2":DDV:WEEK.SEQ
                           XYEAR=FR.CURR.PER<1,POS>[1,4]+1
                           XYEAR = XYEAR[LEN(XYEAR)-1,2]
                           XYEAR = STR('0',2-LEN(XYEAR)):XYEAR
                           TRN.JOB = "X":XYEAR:PRODUCTION.REC<2,PW>"R%2":DDV:WEEK.SEQ
                        END
                     END
                  END
               END
            END
*T24118 ^
*T21294 ^
            NCFLAG = 1
         END
         JCNT=COUNT(TRN.JOB,"*")+1
         MCNT=COUNT(TRN.PROD,"*")+1
         RCNT=COUNT(TRN.R.S.ID,"*")+1
         IF RCNT > MCNT THEN MCNT=RCNT
         FOR JP=1 TO JCNT
            FOR MP=1 TO MCNT
               M.PROD=FIELD(TRN.PROD,"*",MP)
               M.WHSE=FIELD(TRN.WHSE,"*",MP)
               IF M.WHSE="" THEN M.WHSE=FIELD(TRN.WHSE,"*",1)
               M.LOC=FIELD(TRN.LOC,"*",MP)
               IF M.LOC="" THEN M.LOC=FIELD(TRN.LOC,"*",1)
               M.R.S.ID=FIELD(TRN.R.S.ID,"*",MP)
               M.QTY=FIELD(TRN.QTY,"*",MP)
               QTYPE=FIELD(TRN.QTYPE,"*",MP)
               GOSUB 500
               IF REC.LOCK THEN RETURN
               DTM.DEPT<1,DP>=TRN.DEPT
               IF TRN.DIV="" THEN
                  DTM.DIV<1,DP>=JOB.DIV
               END ELSE
                  DTM.DIV<1,DP>=TRN.DIV
               END
               DTM.SEQ<1,DP>=SEQ
               BEGIN CASE
                  CASE JP=1 AND MP=1
                     DTM.TYPE<1,DP>="T"
                  CASE JP > 1
                     DTM.TYPE<1,DP>="C"
                  CASE MP > 1
                     DTM.TYPE<1,DP>="M"
                     TRN.TIME.CODE=TRN.TIME.CODE[1,1]:"0"
               END CASE
               DTM.JOB<1,DP>=JOB.NO
               DTM.CUST<1,DP>=JOB.CUST
               DTM.SPEC.CODE<1,DP>=TRN.SHIFT:TRN.TIME.CODE
               DTM.CCTR<1,DP>=TRN.CCTR
               IF JP=1 AND MP=1 THEN
                  MATREAD OPER.REC FROM OPERATION,TRN.CONO:TRN.OPER ELSE
                     MAT OPER.REC=""
                  END
               END
               IF MP=1 THEN
                  DTM.OPER<1,DP>=TRN.OPER
                  DTM.CLASS.CD<1,DP>=TRN.CLASS.CD
                  DTM.OPER.COMPLETE<1,DP>=TRN.COMPLETE
                  PCNT=DCOUNT(TRN.PRMPT.CODE,"*")
                  FOR PPTR=1 TO PCNT
                     DTM.ADD.PRMPT.CD<1,DP,PPTR>=FIELD(TRN.PRMPT.CODE,"*",PPTR)
                     DTM.ADD.RESP<1,DP,PPTR>=FIELD(TRN.PRMPT.RESP,"*",PPTR)
                  NEXT PPTR
               END
               DTM.SHIFT<1,DP>=TRN.SHIFT
               BEGIN CASE
                  CASE TRN.TIME.CODE[1,1]=0
                     DTM.JOB.TYPE<1,DP>="R"
                  CASE TRN.TIME.CODE[1,1]=7
                     DTM.JOB.TYPE<1,DP>="N"
                  CASE TRN.TIME.CODE[1,1]=8
                     DTM.JOB.TYPE<1,DP>="C"
                  CASE TRN.TIME.CODE[1,1]=9
                     DTM.JOB.TYPE<1,DP>="S"
                  CASE 1
                     DTM.JOB.TYPE<1,DP>="R"
               END CASE
               BEGIN CASE
                  CASE TRN.TIME.CODE[2,1]=0
                     DTM.TIME.CODE<1,DP>="01"
                  CASE TRN.TIME.CODE[2,1]=1
                     DTM.TIME.CODE<1,DP>="02"
                  CASE TRN.TIME.CODE[2,1]=2
                     DTM.TIME.CODE<1,DP>="03"
                  CASE 1
                     DTM.TIME.CODE<1,DP>="01"
               END CASE
               IF MP=1 THEN
                  DTM.TIME.ST<1,DP>=STIME
                  DTM.TIME<1,DP>=ETIME
               END
               P1=DP
               GOSUB 600
               IF MP=1 AND TRN.IMP # "" THEN
                  DTM.IMP<1,DP>=TRN.IMP*100
               END
               IF JP=1 AND (M.PROD # "" OR M.R.S.ID # "") THEN
                  GOSUB 800
               END
               IF OPER.MATL.REQ="Y" AND M.PROD="" THEN
                  DTM.ED.LS.FLG<1,DP>="Y"
                  DTM.STATUS<1,DP>="MATERIAL REQUIRED"
               END
               DTM.SPOIL.CODE<1,DP>=TRN.SPOIL.CODE
               DTM.COMMENTS<1,DP>=TRN.COMMENTS
               DTM.TIME.STAMP<1,DP>=TIME.STAMP
               IF JTR.FLAG AND MP=1 AND NOT(NCFLAG) THEN
                  LOCATE TRN.CONO IN PSSCONO<1>,1 SETTING PSSP ELSE
                     MATREAD COMP.REC FROM COMPANY,TRN.CONO ELSE MAT COMP.REC = ""
                     PSSP=DCOUNT(PSSCONO,VM)+1
                     PSSCONO<1,PSSP>=TRN.CONO
                     PSSFLAG<1,PSSP>=CO.PSS
                  END
                  IF PSSFLAG<1,PSSP>="Y" OR PSSFLAG<1,PSSP>="T" THEN
                     CALL HNP202 (JOB.NO,PNPL.SHIFT,SEQ,ELAP.HRS,JOB.TRANS)
                  END
               END
            NEXT MP
         NEXT JP
         DTM.PRT.DATE=""
         GOSUB 700
         IF NOT(SEQ.OK) THEN GOSUB 40000
         MATWRITE DTM.REC ON DAILY.TIME.MATL,TRN.CONO:TRN.EMP:"*":PNPL.LOGON.DATE:"*":PNPL.SHIFT
         DTM.LOCKED = ""
      CASE TRN.TTYPE="3"
         LOCATE TRN.CONO IN BARCONO<1>,1 SETTING BARP ELSE
            READ RL.SK.CONTROL FROM CONTROL,TRN.CONO:"RL.SK.CONTROL" ELSE RL.SK.CONTROL=""
            BARP=DCOUNT(BARCONO,VM)+1
            BARCONO<1,BARP>=TRN.CONO
            BARFLAG<1,BARP>=RL.SK.CONTROL<1>
         END
         GOSUB 400
         IF REC.LOCK THEN RETURN
         MCNT=COUNT(TRN.PROD,"*")+1
         RCNT=COUNT(TRN.R.S.ID,"*")+1
         IF RCNT > MCNT THEN MCNT=RCNT
         FOR MP=1 TO MCNT
            M.PROD=FIELD(TRN.PROD,"*",MP)
            M.WHSE=FIELD(TRN.WHSE,"*",MP)
            IF M.WHSE="" THEN M.WHSE=FIELD(TRN.WHSE,"*",1)
            M.LOC=FIELD(TRN.LOC,"*",MP)
            IF M.LOC="" THEN M.LOC=FIELD(TRN.LOC,"*",1)
            M.R.S.ID=FIELD(TRN.R.S.ID,"*",MP)
            M.QTY=FIELD(TRN.QTY,"*",MP)
            QTYPE=FIELD(TRN.QTYPE,"*",MP)
            GOSUB 500
            IF REC.LOCK THEN RETURN
            DTM.DEPT<1,DP>=TRN.DEPT
            IF TRN.DIV="" THEN
               DTM.DIV<1,DP>=JOB.DIV
            END ELSE
               DTM.DIV<1,DP>=TRN.DIV
            END
            DTM.SEQ<1,DP>=SEQ
            DTM.TYPE<1,DP>="M"
            DTM.JOB<1,DP>=TRN.JOB
            DTM.CUST<1,DP>=JOB.CUST
            DTM.SPEC.CODE<1,DP>=TRN.SHIFT:TRN.TIME.CODE:"0"
            DTM.CCTR<1,DP>=TRN.CCTR
            DTM.OPER<1,DP>=TRN.OPER
            DTM.SHIFT<1,DP>=TRN.SHIFT
            BEGIN CASE
               CASE TRN.TIME.CODE[1,1]=0
                  DTM.JOB.TYPE<1,DP>="R"
               CASE TRN.TIME.CODE[1,1]=7
                  DTM.JOB.TYPE<1,DP>="N"
               CASE TRN.TIME.CODE[1,1]=8
                  DTM.JOB.TYPE<1,DP>="C"
               CASE TRN.TIME.CODE[1,1]=9
                  DTM.JOB.TYPE<1,DP>="S"
               CASE 1
                  DTM.JOB.TYPE<1,DP>="R"
            END CASE
            DTM.TIME.CODE<1,DP>="01"
            IF M.PROD # "" OR M.R.S.ID # "" THEN
               GOSUB 800
            END
            IF M.PROD="" THEN
               DTM.ED.LS.FLG<1,DP>="Y"
               DTM.STATUS<1,DP>="MATERIAL REQUIRED"
            END
            DTM.SPOIL.CODE<1,DP>=TRN.SPOIL.CODE
            DTM.TIME.STAMP<1,DP>=TIME.STAMP
            IF BARFLAG<1,BARP>="Y" THEN GOSUB 50000
         NEXT MP
         DTM.PRT.DATE=""
         IF BARFLAG<1,BARP> # "Y" THEN
            MATWRITE DTM.REC ON DAILY.TIME.MATL,TRN.CONO:TRN.EMP:"*":PNPL.LOGON.DATE:"*":PNPL.SHIFT
            DTM.LOCKED = ""
         END
         RELEASE PNP.LOG,TRN.CONO:TRN.EMP
         PNPL.LOCKED = ""
      CASE TRN.TTYPE="4" OR TRN.TTYPE="5"
         GOSUB 400
         IF REC.LOCK THEN RETURN
         GOSUB 550
         IF REC.LOCK THEN RETURN
         IF TRN.TTYPE="4" THEN DTM.TYPE<1,DP>="L"
         IF TRN.TTYPE="5" THEN DTM.TYPE<1,DP>="I"
         DTM.SHIFT<1,DP>=TRN.SHIFT
         DTM.TIME.ST<1,DP>=STIME
         DTM.TIME<1,DP>=ETIME
         P1=DP
         GOSUB 600
         DTM.TIME.STAMP<1,DP>=TIME.STAMP
         DTM.PRT.DATE=""
         SCNT=DCOUNT(PNPL.CCTR,VM)
         FOR SP1=1 TO SCNT
            BEGIN CASE
               CASE PNPL.CCTR.DATE<1,SP1>="" OR TRN.TDATE > PNPL.CCTR.DATE<1,SP1>
                  PNPL.CCTR.DATE<1,SP1>=TRN.TDATE
                  PNPL.CCTR.TIME<1,SP1>=TRN.TTIME
               CASE TRN.TDATE=PNPL.CCTR.DATE<1,SP1> AND TRN.TTIME > PNPL.CCTR.TIME<1,SP1>
                  PNPL.CCTR.TIME<1,SP1>=TRN.TTIME
            END CASE
            LOCATE TIME.STAMP IN PNPL.CCTR.TIME.STAMP<1,SP1>,1 BY "AR" SETTING SP2 ELSE NULL
            IF PNPL.CCTR.TIME.STAMP<1,SP1,SP2> # TIME.STAMP THEN
               PNPL.CCTR.TIME.STAMP=INSERT(PNPL.CCTR.TIME.STAMP,1,SP1,SP2,TIME.STAMP)
            END
         NEXT SP1
         GOSUB 700
         IF NOT(SEQ.OK) THEN GOSUB 40000
         MATWRITE DTM.REC ON DAILY.TIME.MATL,TRN.CONO:TRN.EMP:"*":PNPL.LOGON.DATE:"*":PNPL.SHIFT
         DTM.LOCKED = ""
      CASE TRN.TTYPE="6"
         GOSUB 400
         IF REC.LOCK THEN RETURN
         IF SEQ.OK THEN
            GOSUB 700
         END ELSE
            MATREADU DTM.REC FROM DAILY.TIME.MATL,TRN.CONO:TRN.EMP:"*":PNPL.LOGON.DATE:"*":PNPL.SHIFT LOCKED REC.LOCK=1 ELSE
               RETURN
            END
            IF REC.LOCK THEN RETURN
            DTM.LOCKED = TRN.CONO:TRN.EMP:"*":PNPL.LOGON.DATE:"*":PNPL.SHIFT
            GOSUB 700
            GOSUB 40000
            MATWRITE DTM.REC ON DAILY.TIME.MATL,TRN.CONO:TRN.EMP:"*":PNPL.LOGON.DATE:"*":PNPL.SHIFT
            DTM.LOCKED = ""
         END
      CASE TRN.TTYPE="7"
         NEW.REC=0
         MATREADU PNPL.REC FROM PNP.LOG,TRN.CONO:TRN.EMP LOCKED REC.LOCK=1 ELSE
            NEW.REC=1
         END
         READV SHIFT.SUM.REC FROM CONTROL,TRN.CONO:'SHIFT.SUM.RPT',1 ELSE
            SHIFT.SUM.REC = 'N'
         END
         MATREAD EMP.REC FROM EMPLOYEE,TRN.CONO:TRN.EMP THEN
            READV DPT.SPL FROM DEPT.SPOOL.TABLE,TRN.CONO:EMP.DEPT,1 ELSE
               SHIFT.SUM.REC = 'N'
            END
            IF SHIFT.SUM.REC = 'Y' THEN
               SENTENCE = "SETPTR ,,,,,,DEST ":DPT.SPL:" ,BRIEF"
               UDTEXECUTE SENTENCE CAPTURING SPMSG
               CALL SHIFT.SUM.RPT(TRN.CONO,TRN.EMP,PNPL.LOGON.DATE,PNPL.SHIFT,"JC400")
            END ;* endif
         END ;* endmatread
         IF REC.LOCK THEN RETURN
         PNPL.LOCKED = TRN.CONO:TRN.EMP
         IF NEW.REC THEN RETURN
         PNPL.LOGOFF.FLAG="U"
         PNPL.LOGOFF.DATE=TRN.SDATE
         PNPL.LOGOFF.TIME=TRN.ETIME
         FOR N=PNPL.L1 TO PNPL.L2
            PNPL.REC(N)=""
         NEXT N
         MATWRITE PNPL.REC ON PNP.LOG,TRN.CONO:TRN.EMP
         PNPL.LOCKED = ""
      CASE TRN.TTYPE="8"
         IF JTR.FLAG THEN
            LOCATE TRN.CONO IN PSSCONO<1>,1 SETTING PSSP ELSE
               MATREAD COMP.REC FROM COMPANY,TRN.CONO ELSE MAT COMP.REC = ""
               PSSP=DCOUNT(PSSCONO,VM)+1
               PSSCONO<1,PSSP>=TRN.CONO
               PSSFLAG<1,PSSP>=CO.PSS
            END
            IF PSSFLAG<1,PSSP>="Y" OR PSSFLAG<1,PSSP>="T" THEN
               CALL HNP202 (TRN.JOB,TRN.SHIFT,0,0,JOB.TRANS)
            END
         END
      CASE TRN.TTYPE="9"
*T23359 v
      CASE TRN.TTYPE = '51'
         READ WIP.TRACKING FROM CONTROL,TRN.CONO:'WIP.TRACKING' ELSE WIP.TRACKING = ''
         IF WIP.TRACKING = 'Y' THEN
251 * Get the next available Pallet ID Number
            READVU PALID FROM CONTROL, TRN.CONO:"LAST.INS.PAL.ID",1 ELSE PALID = "N000000X"
            LOOP
               NPFX = PALID[1,1]
               NSEQ = PALID[2,6]
               NSEQ = NSEQ + 1
               IF NSEQ > 999999 THEN
                  NPFX = CHAR(SEQ(NPFX)+1)
                  NSEQ = 1
               END
               PALID = NPFX:(1000000+NSEQ)[2,6]
               CALL WIPT.CHECK.DIGIT("C", PALID, "10RL", CKDIG, VALID)
               PALID = PALID:CKDIG
               READ TREC FROM WIP.TRACK.PALLET, TRN.CONO:PALID ELSE TREC = "!@#$%"
            UNTIL TREC = "!@#$%" DO
            REPEAT
            WRITEV PALID ON CONTROL, TRN.CONO:"LAST.INS.PAL.ID",1
            TRN.PALLET = PALID
            MATREADU WIPTP.REC FROM WIP.TRACK.PALLET, TRN.CONO:TRN.PALLET ELSE
               MAT WIPTP.REC = ""
            END
            PJOB = WIPTP.JOB
            BEGIN CASE
               CASE WIPTP.VER = "" AND WIPTP.SIG = ""
                  PFORM = WIPTP.FORM
               CASE WIPTP.SIG = ""
                  PFORM = WIPTP.FORM:".":WIPTP.VER
               CASE 1
                  PFORM = WIPTP.FORM:".":WIPTP.VER:".":WIPTP.SIG
            END CASE
            PLOC = WIPTP.MLOC<1,1>
            PQTY = WIPTP.CQTY
            PTOJOB = WIPTP.TO.JOB
            WIPTP.DATE = TRN.TDATE
            WIPTP.TIME = TRN.TTIME
*         WIPTP.JOB  = TRN.JOB
            WIPTP.JOB  = TRN.WT.JOB
            FNUM = TRN.FORM
            FNUM = FIELD(TRN.FORM,".",1)
            VNUM = FIELD(TRN.FORM,".",2)
*         SNUM = FIELD(TRN.FORM,".",3)
*         IF NUM(FNUM) THEN FNUM = (10000+FNUM)[2,4]
            IF NUM(FNUM) THEN FNUM = (1000+FNUM)[2,3]
            IF NUM(VNUM) THEN
               IF (VNUM+0) = 0 THEN VNUM = ""
            END
            IF VNUM # "" THEN VNUM = (1000+VNUM)[2,3]
*         IF NUM(SNUM) THEN
*            IF (SNUM+0) = 0 THEN SNUM = ""
*         END
*         IF SNUM # "" THEN SNUM = (100000+SNUM)[2,5]
            WIPTP.FORM = FNUM
            WIPTP.VER  = VNUM
            WIPTP.SKID = TRN.SKID
*         WIPTP.TYPE = TRN.PTYPE
            WIPTP.TO.JOB = TRN.TO.JOB
            WIPTP.TO.OPER = TRN.TO.OPER
            WIPTP.SEQ = 500
            LOCATE "N" IN WIPTP.ACODE<1>,1 SETTING APTR ELSE NULL
            BEGIN CASE
               CASE WIPTP.MLOC = ""
                  WIPTP.IQTY = TRN.QTY
*            WIPTP.MLOC = "P1-":TRN.CCTR
                  WIPTP.MLOC = "P1-":TRN.WT.CCTR
                  WIPTP.MDATE = TRN.TDATE
                  WIPTP.MTIME = TRN.TTIME
                  WIPTP.MEMP = TRN.EMP
                  WIPTP.ACODE = "N"
                  WIPTP.AQTY = TRN.QTY
                  WIPTP.ADATE = TRN.TDATE
                  WIPTP.ATIME = TRN.TTIME
                  WIPTP.AEMP = TRN.EMP
               CASE WIPTP.ACODE<1,APTR> = "N"
                  BEGIN CASE
                     CASE WIPTP.IQTY = TRN.QTY
                     CASE WIPTP.CQTY = 0
                     CASE 1
*               INS ("P1-":TRN.CCTR) BEFORE WIPTP.MLOC<1,1>
                        INS ("P1-":TRN.WT.CCTR) BEFORE WIPTP.MLOC<1,1>
                        INS TRN.TDATE BEFORE WIPTP.MDATE<1,1>
                        INS TRN.TTIME BEFORE WIPTP.MTIME<1,1>
                        INS TRN.EMP BEFORE WIPTP.MEMP<1,1>
                        INS "A" BEFORE WIPTP.ACODE<1,1>
                        INS (TRN.QTY-WIPTP.IQTY) BEFORE WIPTP.AQTY<1,1>
                        INS TRN.TDATE BEFORE WIPTP.ADATE<1,1>
                        INS TRN.TTIME BEFORE WIPTP.ATIME<1,1>
                        INS TRN.EMP BEFORE WIPTP.AEMP<1,1>
                        WIPTP.IQTY = TRN.QTY
                  END CASE
               CASE 1
                  WIPTP.IQTY = TRN.QTY
                  MPTR = DCOUNT(WIPTP.MLOC,VM)+1
*            WIPTP.MLOC<1,MPTR> = "P1-":TRN.CCTR
                  WIPTP.MLOC<1,MPTR> = "P1-":TRN.WT.CCTR
                  WIPTP.MDATE<1,MPTR> = TRN.TDATE
                  WIPTP.MTIME<1,MPTR> = TRN.TTIME
                  WIPTP.MEMP<1,MPTR> = TRN.EMP
                  WIPTP.ACODE<1,APTR> = "N"
                  WIPTP.AQTY<1,APTR> = TRN.QTY
                  WIPTP.ADATE<1,APTR> = TRN.TDATE
                  WIPTP.ATIME<1,APTR> = TRN.TTIME
                  WIPTP.AEMP<1,APTR> = TRN.EMP
            END CASE
            WIPTP.CQTY = SUM(WIPTP.AQTY)
            CJOB = WIPTP.JOB
            BEGIN CASE
               CASE WIPTP.VER = "" AND WIPTP.SIG = ""
                  CFORM = WIPTP.FORM
               CASE WIPTP.SIG = ""
                  CFORM = WIPTP.FORM:".":WIPTP.VER
               CASE 1
                  CFORM = WIPTP.FORM:".":WIPTP.VER:".":WIPTP.SIG
            END CASE
            PALID = TRN.PALLET
*        GEN.SKID = WIPTP.SKID
            CALL WIPT.XREF.MAINT(TRN.CONO,PJOB,PFORM,CJOB,CFORM,PALID,GEN.SKID,ERRMSG)
            CALL WIPT.LOC.UPD(TRN.CONO,TRN.PALLET,PLOC,MAT WIPTP.REC,WIP.TRACK.LOC,ERRMSG)
*NA      CALL WIPT.HIST.UPD(TRN.CONO,PLOC,PQTY,MAT WIPTP.REC,WIP.TRACK.HIST,ERRMSG)
            CALL WIPT.UPDATE.TOJOB.XREF(TRN.CONO,PTOJOB,WIPTP.TO.JOB,PJOB,WIPTP.JOB,ERRMSG)
            MATWRITE WIPTP.REC ON WIP.TRACK.PALLET, TRN.CONO:TRN.PALLET
* LOAD DATA INTO THE BARCODE VARIABLES
            IF WIPTP.JOB = "" THEN
               MAT JOB.REC = ""
               MAT CUST.REC = ""
            END ELSE
               MATREAD JOB.REC FROM JOB, TRN.CONO:WIPTP.JOB THEN
                  MATREAD CUST.REC FROM CUSTOMER, TRN.CONO:JOB.CUST ELSE
                     MAT CUST.REC = ""
                  END
               END ELSE
                  MAT JOB.REC = ""
                  MAT CUST.REC = ""
                  CUST.NAME = "????????????????"
               END
            END
            IF WIPTP.VEND = "" THEN
               MAT VEND.REC = ""
            END ELSE
               MATREAD VEND.REC FROM VEND, TRN.CONO:WIPTP.VEND ELSE
                  MAT VEND.REC = ""
                  VEND.DESC = "????????????????"
               END
            END
* SET THE APPROPRIATE PRINT QUEUE FOR THE CURRENT STATION
            MATREAD WIPPQ.REC FROM WIPT.PRINT.QUEUE, TRN.CONO:TRN.PNP.ID[1,1] THEN
               LOCATE TRN.TERM.ID "R%3" IN WIPPQ.STATION.ID<1>,1 SETTING PQPTR THEN; * T26132
                  PQ = WIPPQ.PRINT.QUEUE<1,PQPTR>
               END ELSE
                  PQ = WIPPQ.PRINT.QUEUE.DEFAULT
               END
            END ELSE
               PQ = ""
            END
            IF PQ THEN
               SENTENCE = "SETPTR ,,,,,,DEST ":PQ:" ,BRIEF"
               UDTEXECUTE SENTENCE CAPTURING PQMSG
            END
* CALL THE SUBROUTINE TO PRINT THE BARCODE LABEL
            PALLET.ID=TRN.PALLET; GOSUB 5000
         END
      CASE TRN.TTYPE="52"                       ;* Pallet Delivery Req
         READ WIP.TRACKING FROM CONTROL,TRN.CONO:'WIP.TRACKING' ELSE WIP.TRACKING = ''
         IF WIP.TRACKING = 'Y' THEN
            FNUM = FIELD(TRN.FORM,".",1)
            VNUM = FIELD(TRN.FORM,".",2)
            IF NUM(FNUM) THEN FNUM = (1000+FNUM)[2,3]
            IF NUM(VNUM) THEN
               IF (VNUM+0) = 0 THEN VNUM = ""
            END
            IF VNUM = "" THEN
               FORM.NO = FNUM
            END ELSE
               FORM.NO = FNUM:".":(1000+VNUM)[2,3]
            END
            MATREADU WIPTR.REC FROM WIP.TRACK.CONTROL, TRN.CONO:"REQ" ELSE
               MAT WIPTR.REC = ""
            END
            DMATCH = 0
            RCNT = DCOUNT(WIPTR.DATE,VM)
            FOR RPTR = 1 TO RCNT UNTIL DMATCH
               IF WIPTR.TYPE<1,RPTR> = "D" THEN
*               IF WIPTR.CCTR<1,RPTR> = "B1-":TRN.CCTR THEN
*                  IF WIPTR.JOB<1,RPTR> = TRN.JOB THEN
                  IF WIPTR.CCTR<1,RPTR> = "B1-":TRN.WT.CCTR THEN
                     IF WIPTR.JOB<1,RPTR> = TRN.WT.JOB THEN
                        IF WIPTR.FORM<1,RPTR> = FORM.NO THEN
                           IF WIPTR.PTYPE<1,RPTR> = TRN.PTYPE THEN
                              DMATCH = 1
                           END
                        END
                     END
                  END
               END
            NEXT RPTR
            IF DMATCH THEN
               RELEASE WIP.TRACK.CONTROL, TRN.CONO:"REQ"
            END ELSE
               RPTR = RCNT + 1
               WIPTR.DATE<1,RPTR> = TRN.TDATE
               WIPTR.TIME<1,RPTR> = TRN.TTIME
               WIPTR.TYPE<1,RPTR> = "D"
*            WIPTR.CCTR<1,RPTR> = "B1-":TRN.CCTR
*            WIPTR.JOB<1,RPTR> = TRN.JOB
               WIPTR.CCTR<1,RPTR> = "B1-":TRN.WT.CCTR
               WIPTR.JOB<1,RPTR> = TRN.WT.JOB
               WIPTR.FORM<1,RPTR> = FORM.NO
               WIPTR.PTYPE<1,RPTR> = TRN.PTYPE
               MATWRITE WIPTR.REC ON WIP.TRACK.CONTROL, TRN.CONO:"REQ"
            END
         END
      CASE TRN.TTYPE="53"                       ;* Pallet Pickup Req
         READ WIP.TRACKING FROM CONTROL,TRN.CONO:'WIP.TRACKING' ELSE WIP.TRACKING = ''
         IF WIP.TRACKING = 'Y' THEN
            MATREADU WIPTP.REC FROM WIP.TRACK.PALLET, TRN.CONO:TRN.PALLET THEN
               PLOC = WIPTP.MLOC<1,1>
               PQTY = WIPTP.CQTY<1,1>
               WIPTP.ACODE = INSERT(WIPTP.ACODE,1,1,0,"C")
               WIPTP.AQTY = INSERT(WIPTP.AQTY,1,1,0,(TRN.QTY-WIPTP.CQTY))
               WIPTP.ADATE = INSERT(WIPTP.ADATE,1,1,0,TRN.TDATE)
               WIPTP.ATIME = INSERT(WIPTP.ATIME,1,1,0,TRN.TTIME)
               WIPTP.CQTY = SUM(WIPTP.AQTY)
               BEGIN CASE
*            CASE WIPTP.MLOC<1,1> = ("B1":TRN.CCTR)
                  CASE WIPTP.MLOC<1,1> = ("B1":TRN.WT.CCTR)
                  CASE TRN.TDATE < WIPTP.MDATE<1,1>
                  CASE TRN.TDATE = WIPTP.MDATE<1,1> AND TRN.TTIME < WIPTP.MTIME<1,1>
                  CASE 1
*               WIPTP.MLOC = INSERT(WIPTP.MLOC,1,1,0,("B1":TRN.CCTR))
                     WIPTP.MLOC = INSERT(WIPTP.MLOC,1,1,0,("B1":TRN.WT.CCTR))
                     WIPTP.MDATE = INSERT(WIPTP.MDATE,1,1,0,TRN.TDATE)
                     WIPTP.MTIME = INSERT(WIPTP.MTIME,1,1,0,TRN.TTIME)
*               WIPTP.MEMP = INSERT(WIPTP.MEMP,1,1,0,TRN.EMP)
                     WIPTP.MEMP = INSERT(WIPTP.MEMP,1,1,0,TRN.WT.EMP)
               END CASE
               CALL WIPT.LOC.UPD(TRN.CONO,TRN.PALLET,PLOC,MAT WIPTP.REC,WIP.TRACK.LOC,ERRMSG)
*NA         CALL WIPT.HIST.UPD(TRN.CONO,PLOC,PQTY,MAT WIPTP.REC,WIP.TRACK.HIST,ERRMSG)
               MATWRITE WIPTP.REC ON WIP.TRACK.PALLET, TRN.CONO:TRN.PALLET
               IF (TRN.QTY+0) > 0 THEN
                  MATREADU WIPTR.REC FROM WIP.TRACK.CONTROL, TRN.CONO:"REQ" ELSE
                     MAT WIPTR.REC = ""
                  END
                  PMATCH = 0
                  RCNT = DCOUNT(WIPTR.DATE,VM)
                  FOR RPTR = 1 TO RCNT UNTIL PMATCH
                     IF WIPTR.TYPE<1,RPTR> = "P" THEN
*                     IF WIPTR.CCTR<1,RPTR> = "B1-":TRN.CCTR THEN
                        IF WIPTR.CCTR<1,RPTR> = "B1-":TRN.WT.CCTR THEN
                           IF WIPTR.PALLET<1,RPTR> = TRN.PALLET THEN
                              PMATCH = 1
                           END
                        END
                     END
                  NEXT RPTR
                  IF PMATCH THEN
                     RELEASE WIP.TRACK.CONTROL, TRN.CONO:"REQ"
                  END ELSE
                     RPTR = RCNT + 1
                     WIPTR.DATE<1,RPTR> = TRN.TDATE
                     WIPTR.TIME<1,RPTR> = TRN.TTIME
                     WIPTR.TYPE<1,RPTR> = "P"
*                  WIPTR.CCTR<1,RPTR> = "B1-":TRN.CCTR
                     WIPTR.CCTR<1,RPTR> = "B1-":TRN.WT.CCTR
                     WIPTR.PALLET<1,RPTR> = TRN.PALLET
                     MATWRITE WIPTR.REC ON WIP.TRACK.CONTROL, TRN.CONO:"REQ"
                  END
               END
            END ELSE
               RELEASE WIP.TRACK.PALLET, TRN.CONO:TRN.PALLET
            END
         END
      CASE TRN.TTYPE="54"                 ;* UPDATE PALLET TRANS
         READ WIP.TRACKING FROM CONTROL,TRN.CONO:'WIP.TRACKING' ELSE WIP.TRACKING = ''
         IF WIP.TRACKING = 'Y' THEN
            MATREADU WIPTP.REC FROM WIP.TRACK.PALLET, TRN.CONO:TRN.PALLET ELSE
               MAT WIPTP.REC = ""
            END
            PJOB = WIPTP.JOB
            BEGIN CASE
               CASE WIPTP.VER = ""
                  PFORM = WIPTP.FORM
               CASE 1
                  PFORM = WIPTP.FORM:".":WIPTP.VER
            END CASE
            PLOC = WIPTP.MLOC<1,1>
            PQTY = WIPTP.CQTY
            PTOJOB = WIPTP.TO.JOB
            WIPTP.DATE = TRN.TDATE
            WIPTP.TIME = TRN.TTIME
            WIPTP.TO.JOB = TRN.TO.JOB
            WIPTP.TO.OPER = TRN.TO.OPER
            IF WIPTP.TO.JOB = "NONE" THEN WIPTP.TO.JOB = ""
            IF WIPTP.TO.OPER = "NONE" THEN WIPTP.TO.OPER = ""
* UPDATE THE CROSS REFERENCE FOR TO-JOBS :: PALLETS
            ERRMSG = ""
            CALL WIPT.UPDATE.TOJOB.XREF(TRN.CONO,PTOJOB,WIPTP.TO.JOB,PJOB,WIPTP.JOB,ERRMSG)
            MATWRITE WIPTP.REC ON WIP.TRACK.PALLET, TRN.CONO:TRN.PALLET
* LOAD DATA INTO THE BARCODE VARIABLES
            IF WIPTP.JOB = "" THEN
               MAT JOB.REC = ""
               MAT CUST.REC = ""
            END ELSE
               MATREAD JOB.REC FROM JOB, TRN.CONO:WIPTP.JOB THEN
                  MATREAD CUST.REC FROM CUSTOMER, TRN.CONO:JOB.CUST ELSE
                     MAT CUST.REC = ""
                  END
               END ELSE
                  MAT JOB.REC = ""
                  MAT CUST.REC = ""
                  CUST.NAME = "????????????????"
               END
            END
            IF WIPTP.VEND = "" THEN
               MAT VEND.REC = ""
            END ELSE
               MATREAD VEND.REC FROM VEND, TRN.CONO:WIPTP.VEND ELSE
                  MAT VEND.REC = ""
                  VEND.DESC = "????????????????"
               END
            END
* SET THE APPROPRIATE PRINT QUEUE FOR THE CURRENT STATION
            MATREAD WIPPQ.REC FROM WIPT.PRINT.QUEUE, TRN.CONO:TRN.PNP.ID[1,1] THEN
               LOCATE TRN.TERM.ID "R%3" IN WIPPQ.STATION.ID<1>,1 SETTING PQPTR THEN; * T26132
                  PQ = WIPPQ.PRINT.QUEUE<1,PQPTR>
               END ELSE
                  PQ = WIPPQ.PRINT.QUEUE.DEFAULT
               END
            END ELSE
               PQ = ""
            END
            IF PQ THEN
               SENTENCE = "SETPTR ,,,,,,DEST ":PQ:" ,BRIEF"
               UDTEXECUTE SENTENCE CAPTURING PQMSG
            END
* CALL THE SUBROUTINE TO PRINT THE BARCODE LABEL
            PALLET.ID=TRN.PALLET; GOSUB 5000
         END
*T23359 ^
      CASE TRN.TTYPE="99"
         IF PERTS.FLAG THEN
            PTRK.ID = TRN.PERTS.CCTR:"!":TRN.PERTS.RDATE
            MATREADU PTRK.REC FROM PERTS.TRACK,PERTS.CONO:PTRK.ID LOCKED REC.LOCK=1 ELSE MAT PTRK.REC=""
            IF REC.LOCK THEN RETURN
            LOCATE TRN.PERTS.RTIME IN PTRK.TIME<1>,1 BY "AR" SETTING P THEN
               PTRK.TIME<1,P>=TRN.PERTS.RTIME
               PTRK.SPEED<1,P>=TRN.PERTS.SPEED
            END ELSE
               PTRK.TIME=INSERT(PTRK.TIME,1,P,0,TRN.PERTS.RTIME)
               PTRK.SPEED=INSERT(PTRK.SPEED,1,P,0,TRN.PERTS.SPEED)
            END
            MATWRITE PTRK.REC ON PERTS.TRACK,PERTS.CONO:PTRK.ID
         END
      CASE 1
   END CASE
   RETURN
*
*---- DERIVE START TIME
*
400 *
   NEW.REC=0
   MATREADU PNPL.REC FROM PNP.LOG,TRN.CONO:TRN.EMP LOCKED REC.LOCK=1 ELSE
      MAT PNPL.REC=""
      NEW.REC=1
   END
   IF REC.LOCK THEN RETURN
   PNPL.LOCKED = TRN.CONO:TRN.EMP
   GOSUB 35000
   BEGIN CASE
      CASE NEW.REC
         SEQ.OK=1
      CASE ((TRN.TDATE-LDATE)*86400+TRN.TTIME-LTIME) < 0
         SEQ.OK=0
      CASE 1
         SEQ.OK=1
   END CASE
   IF TRN.CCTR="" THEN
      SP1=0
   END ELSE
      LOCATE TRN.CCTR IN PNPL.CCTR<1>,1 SETTING SP1 ELSE SP1=0
   END
   BEGIN CASE
      CASE SEQ.OK AND SP1=0
         TRN.STIME=PNPL.LAST.TIME
         STIME=OCONV(TRN.STIME,"MTS")
         STIME=STIME[1,2]:STIME[4,2]
      CASE SEQ.OK
         TRN.STIME=PNPL.CCTR.TIME<1,SP1>
         STIME=OCONV(TRN.STIME,"MTS")
         STIME=STIME[1,2]:STIME[4,2]
      CASE 1
         TRN.STIME=""
         STIME=""
   END CASE
   TIME.STAMP=TRN.TDATE*100000+TRN.TTIME
   RETURN
*
*---- UPDATE INITIALIZATION
*
500 *
   JOB.NO=FIELD(TRN.JOB,"*",JP)
   MATREAD JOB.REC FROM JOB,TRN.CONO:JOB.NO ELSE
      MAT JOB.REC=""
      MATREAD JOB.CUTOFF.REC FROM CONTROL,TRN.CONO:"JOB.CUTOFF.NO" ELSE
         MAT JOB.CUTOFF.REC = ""
         J.CUTOFF.NUM = 0
      END
      IF JOB.NO < J.CUTOFF.NUM THEN
         FND = 1
      END ELSE
         JCCNT = DCOUNT(J.CUTOFF.PREFIX,VM)
         FND = 0
         FOR JCPTR = 1 TO JCCNT WHILE FND = 0
            PLEN = LEN(J.CUTOFF.PREFIX<1,JCPTR>)
            IF J.CUTOFF.PREFIX<1,JCPTR> = JOB.NO[1,PLEN] THEN
               JSFX = JOB.NO[PLEN+1,LEN(JOB.NO)-PLEN]
               IF NUM(JSFX) THEN
                  IF JSFX < J.CUTOFF.PRE.NO<1,JCPTR> THEN FND = 1
               END
            END
         NEXT JCPTR
      END
      IF FND THEN
         JOB.DESC = "Non PRIMAC Job"
         JOB.TYPE = "R"
         JOB.DIV = "10"
      END
   END
* IF TRN.DIV="" THEN TRN.DIV=JOB.DIV
   READU SEQ FROM CONTROL,TRN.CONO:"DAILY.TIME" LOCKED REC.LOCK=1 ELSE
      SEQ=10001
   END
   IF REC.LOCK THEN RETURN
   NEXT.SEQ=SEQ+1
*CSF 25253 v
   IF NEXT.SEQ>999999 THEN NEXT.SEQ=10001
*CSF 25253 ^
   WRITE NEXT.SEQ ON CONTROL,TRN.CONO:"DAILY.TIME"
550 *
   IF JP=1 AND MP=1 THEN
      MATREADU DTM.REC FROM DAILY.TIME.MATL,TRN.CONO:TRN.EMP:"*":PNPL.LOGON.DATE:"*":PNPL.SHIFT LOCKED REC.LOCK=1 ELSE
         MAT DTM.REC=""
      END
      IF REC.LOCK THEN RETURN
      DTM.LOCKED = TRN.CONO:TRN.EMP:"*":PNPL.LOGON.DATE:"*":PNPL.SHIFT
   END
   DPC=DCOUNT(DTM.TIME.STAMP,VM)
   TSS=TIME.STAMP+1
   LOCATE TSS IN DTM.TIME.STAMP<1>,1 BY "AR" SETTING DP ELSE NULL
* DP=DP+JP-1+MP-1
   IF DP <= DPC THEN
      ACNT=DCOUNT(DTM.A1A,",")
      FOR A=1 TO ACNT
         AA=FIELD(DTM.A1A,",",A)
         AA1=FIELD(AA,"-",1)
         AA2=FIELD(AA,"-",2)
         IF AA2="" THEN AA2=AA1
         FOR N=AA1 TO AA2
            DTM.REC(N)=INSERT(DTM.REC(N),1,DP,0,"")
         NEXT N
      NEXT A
   END
   RETURN
*
*---- CALCULATE TIME DATA
*
600 *
   FOR PP=P1 TO P1
      ST=DTM.TIME.ST<1,PP>
      ET=DTM.TIME<1,PP>
      IF ET < ST THEN ET=ET+2400
      ELAP.MIN=(INT(ET/100)*60+MOD(ET,100))-(INT(ST/100)*60+MOD(ST,100))
      ELAP.HRS=INT(ELAP.MIN*100/60+0.5)
      TC=DTM.TIME.CODE<1,PP>
      BEGIN CASE
         CASE TC="01"
            DTM.REG.TIME<1,PP>=ELAP.HRS
         CASE TC="02"
            DTM.OVR.TIME<1,PP>=ELAP.HRS
         CASE TC="03"
            DTM.DUB.TIME<1,PP>=ELAP.HRS
      END CASE
      DTM.LAPS.TIME<1,PP>=ELAP.HRS
   NEXT PP
   RETURN
*
*---- UPDATE LOG FILE
*
700 *
   BEGIN CASE
      CASE TRN.TTYPE="6"
         LOCATE TRN.CCTR IN PNPL.CCTR<1>,1 SETTING SP1 ELSE
            PNPL.CCTR<1,SP1>=TRN.CCTR
         END
         BEGIN CASE
            CASE PNPL.CCTR.DATE<1,SP1>="" OR TRN.TDATE > PNPL.CCTR.DATE<1,SP1>
               PNPL.CCTR.DATE<1,SP1>=TRN.TDATE
               PNPL.CCTR.TIME<1,SP1>=TRN.TTIME
            CASE TRN.TDATE=PNPL.CCTR.DATE<1,SP1> AND TRN.TTIME > PNPL.CCTR.TIME<1,SP1>
               PNPL.CCTR.TIME<1,SP1>=TRN.TTIME
         END CASE
         LOCATE TIME.STAMP IN PNPL.CCTR.TIME.STAMP<1,SP1>,1 BY "AR" SETTING SP2 ELSE NULL
         IF PNPL.CCTR.TIME.STAMP<1,SP1,SP2> # TIME.STAMP THEN
            PNPL.CCTR.TIME.STAMP=INSERT(PNPL.CCTR.TIME.STAMP,1,SP1,SP2,TIME.STAMP)
         END
      CASE 1
         IF TRN.CCTR="" THEN
            SP1=0
         END ELSE
            LOCATE TRN.CCTR IN PNPL.CCTR<1>,1 SETTING SP1 ELSE SP1=0
         END
         IF SP1 > 0 THEN
            BEGIN CASE
               CASE TRN.TDATE > PNPL.CCTR.DATE<1,SP1>
                  PNPL.CCTR.DATE<1,SP1>=TRN.TDATE
                  PNPL.CCTR.TIME<1,SP1>=TRN.TTIME
               CASE TRN.TDATE=PNPL.CCTR.DATE<1,SP1> AND TRN.TTIME > PNPL.CCTR.TIME<1,SP1>
                  PNPL.CCTR.TIME<1,SP1>=TRN.TTIME
            END CASE
         END ELSE
            BEGIN CASE
               CASE PNPL.LAST.DATE="" OR TRN.TDATE > PNPL.LAST.DATE
                  PNPL.LAST.PNP=TRN.PNP.ID
                  PNPL.LAST.DATE=TRN.TDATE
                  PNPL.LAST.TIME=TRN.TTIME
               CASE TRN.TDATE=PNPL.LAST.DATE AND TRN.TTIME > PNPL.LAST.TIME
                  PNPL.LAST.PNP=TRN.PNP.ID
                  PNPL.LAST.TIME=TRN.TTIME
            END CASE
         END
   END CASE
   MATWRITE PNPL.REC ON PNP.LOG,TRN.CONO:TRN.EMP
   PNPL.LOCKED = ""
   RETURN
*
*---- PROCESS MATERIALS
*
800 *
   IF M.PROD="" AND M.R.S.ID # "" THEN
*T26556 v
*     MATREAD RSKI.REC FROM ROLL.SKID.INFO,TRN.CONO:M.R.S.ID ELSE
*        MAT RSKI.REC=""
*        RSKI.INV.NO="X"
*     END
*     M.PROD=RSKI.INV.NO
*     M.WHSE=RSKI.WHSE
*     M.LOC=RSKI.LOC
*
      MATREAD ISTK.REC FROM INV_SERIAL,TRN.CONO:M.R.S.ID ELSE
         MAT ISTK.REC=""
         ISTK.PROD="X"
      END
      M.PROD=ISTK.PROD
      M.WHSE=ISTK.WHSE
      M.LOC=ISTK.LOC
*T26556 ^
   END
   MATREAD INV.REC FROM INVENTORY,TRN.CONO:M.PROD ELSE
      MAT INV.REC=""
   END
*T26756 v
   CATG.ID=TRN.CONO:INV.LINE
   MATREAD CATG.REC FROM CATEGORY,CATG.ID ELSE MAT CATG.REC=''
*T26756 ^
   DTM.PROD<1,DP>=M.PROD
   IF M.WHSE="" OR M.WHSE="SKIP" THEN
      WCNT=DCOUNT(INV.WHSE.CODE,VM)
      IF WCNT=1 THEN
         DTM.WHSE<1,DP>=INV.WHSE.CODE
      END ELSE
         LOCATE TRN.DEPT IN DEPT.WHSE<1>,1 SETTING W ELSE W=99
         DTM.WHSE<1,DP>=DEPT.WHSE<2,W>
      END
   END ELSE
      DTM.WHSE<1,DP>=M.WHSE
   END
   IF M.LOC="" THEN
      MATREAD IWH.REC FROM INV.WHSE,TRN.CONO:M.PROD:"!":DTM.WHSE<1,DP> ELSE
         MAT IWH.REC=""
      END
      LCNT=DCOUNT(IWH.LOC,VM)
      IF LCNT=1 THEN DTM.LOC<1,DP>=IWH.LOC
   END ELSE
      DTM.LOC<1,DP>=M.LOC
   END
   IF M.R.S.ID="" AND CATG.TRK.LVL='S' THEN
      MATREAD IWLO.REC FROM INV.WHSE.LOC,TRN.CONO:M.PROD:"!":DTM.WHSE<1,DP>:"!":DTM.LOC<1,DP> ELSE
         MAT IWLO.REC=""
      END
*T26556 v
*     SCNT=DCOUNT(IWLO.R.S.ID,VM)
*     IF SCNT=1 THEN DTM.R.S.ID<1,DP>=IWLO.R.S.ID
*
      SCNT=DCOUNT(IWLO.SERIAL,VM)
      IF SCNT=1 THEN DTM.R.S.ID<1,DP>=IWLO.SERIAL
*T26556 ^
   END ELSE
      DTM.R.S.ID<1,DP>=M.R.S.ID
   END
*C23732
*      IF INV.UNIT<1,2>="SHT" AND INV.UNIT<1,3>="LBS" THEN
*         ICR.INV="MD0";ICR.DV1=1;ICR.MT1=INV.M.WT;ICR.DV2=1
*         QTY=INT(((INT(M.QTY)/ICR.DV1)*ICR.MT1)/ICR.DV2+0.5)
*         DTM.SHEET<1,DP>=INT(M.QTY)
*      END ELSE
*         QTY=M.QTY*1000
*      END
   BEGIN CASE
      CASE QTYPE="DR"
         QTY=M.QTY*1000
      CASE INV.UNIT<1,2>="SHT" AND INV.UNIT<1,3>="LBS"
         ICR.DV1=INV.M.WT;ICR.MT1=1;ICR.DV2=1
         QTY=INT(((INT(M.QTY)/ICR.MT1)*ICR.DV1)*ICR.DV2+0.5)
         DTM.SHEET<1,DP>=INT(M.QTY)
      CASE INV.UNIT<1,2>="PC" AND INV.UNIT<1,3>="MSI"
         ICR.DV1=INV.PAP.WIDTH/100;ICR.MT1=10;ICR.DV2=1
         QTY=INT(((INT(M.QTY)/ICR.MT1)*ICR.DV1)*ICR.DV2+0.5)
         DTM.SHEET<1,DP>=INT(M.QTY)
      CASE INV.UNIT<1,2>="FT" AND INV.UNIT<1,3>="MSI"
         ICR.DV1=INV.PAP.WIDTH/100;ICR.MT1=100;ICR.DV2=12
         QTY=INT(((INT(M.QTY)/ICR.MT1)*ICR.DV1)*ICR.DV2+0.5)
         DTM.SHEET<1,DP>=INT(M.QTY)
      CASE 1
         QTY=M.QTY*1000
   END CASE
*
   DTM.RS.QTYPE<1,DP>=QTYPE
   DTM.QTY<1,DP>=QTY
   RETURN
*T23359 v
*
*---- Print the Pallet Barcode Label
*
5000 *
   PRINTER ON
   PRINTER.INIT = ESC:"E"
   PRINTER.INIT = PRINTER.INIT:ESC:"&l0O"
   PRINTER.INIT = PRINTER.INIT:ESC:"(8U"
*T22322v
   PRINTER.INIT = PRINTER.INIT:ESC:"&l0L"   ;* Disable Perf Skipping
*T22322^
   PRINT PRINTER.INIT
   HPI = 2.0
   VPI = 0.05
   BPT = 2.5
   VSI = 1.0
   BDATA = "*":PALLET.ID:"*"
   VDATA = PALLET.ID
   VPT = 10
   CALL HP.PRINT.BARCODE.39(HPI,VPI,BPT,VSI,BDATA,VDATA,VPT)
*
   PLINE=CUST.NAME; PITCH=2.50; VPOS=2.25; WGT=3; GOSUB 5010
   PLINE="Job Number"; PITCH=10.00; VPOS=2.75; WGT=0; GOSUB 5020
   PLINE=WIPTP.JOB; PITCH=3.0; VPOS=3.375; WGT=3; GOSUB 5010
   PLINE="    Signature    "; PITCH=10.00; VPOS=3.875; WGT=0; GOSUB 5020
   BEGIN CASE
      CASE WIPTP.VER = ""
         PLINE = WIPTP.FORM
      CASE 1
         PLINE = WIPTP.FORM:".":WIPTP.VER
   END CASE
   PITCH=3.0; VPOS=4.5; WGT=3; GOSUB 5010
   PLINE="Quantity"; PITCH=10.00; VPOS=5.0; WGT=0; GOSUB 5020
   PLINE=OCONV(WIPTP.CQTY,"MD0,"); PITCH=4.0; VPOS=5.5; WGT=3; GOSUB 5010
   PLINE="To-Job":SPACE(54):"To-Cctr"; PITCH=10.00; VPOS=6.0; WGT=0; GOSUB 5020
   PLINE=WIPTP.TO.JOB:SPACE(29):WIPTP.TO.OPER:SPACE(2); PITCH=5.5; VPOS=6.375; WGT=3; GOSUB 5010
   PLINE="Vendor"; PITCH=10.00; VPOS=6.75; WGT=0; GOSUB 5020
   PLINE=VEND.DESC; PITCH=7.0; VPOS=7.125; WGT=3; GOSUB 5010
   PLINE="Description"; PITCH=10.00; VPOS=7.625; WGT=0; GOSUB 5020
   PLINE=WIPTP.DESC; PITCH=7.0; VPOS=8.0; WGT=3; GOSUB 5010
   PLINE="Pallet ID"; PITCH=10.00; VPOS=8.625; WGT=0; GOSUB 5020
*
   HPI = 2.0
   VPI = 8.75
   BPT = 2.5
   VSI = 1.0
   BDATA = "*":PALLET.ID:"*"
   VDATA = PALLET.ID
   VPT = 10
   CALL HP.PRINT.BARCODE.39(HPI,VPI,BPT,VSI,BDATA,VDATA,VPT)
*
*
   PRINT CHAR(12):
   PRINTER OFF
   PRINTER CLOSE
   RETURN
*
*---- PRINT CENTERED TEXT
*
5010 *
   PAGE.WIDTH = 8                     ;* PAGE WIDTH IN INCHES
   MAXPITCH = INT((LEN(PLINE)+2) / PAGE.WIDTH * 100 + 0.99)
   MAXPITCH = OCONV(MAXPITCH,"MD2")
   IF MAXPITCH > PITCH THEN PITCH = MAXPITCH
5020 *
   PAGE.CHARS = INT(PAGE.WIDTH * PITCH)-2
   IF LEN(PLINE) >= PAGE.CHARS THEN
      PLINE = SPACE(1):PLINE[1,PAGE.CHARS]
   END ELSE
      PLINE = SPACE(1):SPACE(INT((PAGE.CHARS-LEN(PLINE))/2)):PLINE
   END
   FMT = ESC:"(s"
   FMT = FMT:"0p"                     ;* pitch (0 = fixed, 1 = variable)               ;* pitch (char / inch)
   FMT = FMT:PITCH:"h"                ;* pitch (char / inch)
   FMT = FMT:"0s"                     ;* italic (0 = no, 1 = yes)
   FMT = FMT:WGT:"b"                  ;* weight (0 = normal, 3 = bold)
   FMT = FMT:"4102T"                  ;* font = Letter Gothic
   VPOS = INT(VPOS * 720 + 0.5)
   FMT = FMT:ESC:"&a":VPOS:"V"
   PRINT FMT:PLINE
   RETURN
*T23359 ^
*
*---- DETERMINE LAST TRANSACTION TIME
*
35000 *
   LDATE=PNPL.LAST.DATE
   LTIME=PNPL.LAST.TIME
   CCNT=DCOUNT(PNPL.CCTR,VM)
   FOR CPTR=1 TO CCNT
      IF PNPL.CCTR.DATE<1,CPTR> >= LDATE AND PNPL.CCTR.TIME<1,CPTR> > LTIME THEN
         LDATE=PNPL.CCTR.DATE<1,CPTR>
         LTIME=PNPL.CCTR.TIME<1,CPTR>
      END
   NEXT CPTR
   RETURN
*
*---- ADJUST START TIMES
*
40000 *
   TS1=PNPL.LOGON.DATE*100000+PNPL.LOGON.TIME
   CCTR=""
   CCTR.TS=""
   DPC=DCOUNT(DTM.TYPE,VM)
   FOR DPX=1 TO DPC
      TP=DTM.TYPE<1,DPX>
      CC=DTM.CCTR<1,DPX>
      TS=DTM.TIME.STAMP<1,DPX>
      PT=DTM.TIME.ST<1,DPX>
      BEGIN CASE
         CASE TP="M"
            STIME=""
         CASE TP="C" AND DPX > 1
            STIME=DTM.TIME.ST<1,DPX-1>
         CASE (TP="L" OR TP="I") AND DPX > 1
            STIME=DTM.TIME<1,DPX-1>
            TS1=TS
         CASE 1
            IF CC="" THEN
               SP1=0
            END ELSE
               LOCATE CC IN PNPL.CCTR<1>,1 SETTING SP1 ELSE SP1=0
            END
            IF SP1=0 THEN
               TSX=TS1
               TS1=TS
            END ELSE
               LOCATE TS IN PNPL.CCTR.TIME.STAMP<1,SP1>,1 BY "AR" SETTING SP2 ELSE NULL
               IF SP2=1 THEN
                  TS2=0
               END ELSE
                  TS2=PNPL.CCTR.TIME.STAMP<1,SP1,SP2-1>
               END
               LOCATE CC IN CCTR<1>,1 SETTING SP3 ELSE
                  SP3=DCOUNT(CCTR,VM)+1
                  CCTR<1,SP3>=CC
               END
               TS3=CCTR.TS<1,SP3>+0
               CCTR.TS<1,SP3>=TS
               IF TS2=0 AND TS3=0 THEN
                  TSX=TS1
                  TS1=TS
               END ELSE
                  IF TS2 > TS3 THEN TSX=TS2 ELSE TSX=TS3
               END
            END
            STIME=MOD(TSX,100000)
            STIME=OCONV(STIME,"MTS")
            STIME=STIME[1,2]:STIME[4,2]
      END CASE
      DTM.TIME.ST<1,DPX>=STIME
      IF STIME # PT THEN
         P1=DPX
         GOSUB 600
      END
   NEXT DPX
   RETURN
*
*---- BYPASS DAILY.TIME.MATL 
*
50000 *
   MAT DMT.REC=""
   DMT.JOB=DTM.JOB<1,DP>
   DMT.TYPE=DTM.JOB.TYPE<1,DP>
   DMT.DIV=DTM.DIV<1,DP>        
   DMT.DEPT=DTM.DEPT<1,DP>       
   DMT.CCTR=DTM.CCTR<1,DP>       
   DMT.PROD=DTM.PROD<1,DP>        
   IF DMT.PROD="" THEN DMT.PROD="X"
   DMT.WHSE=DTM.WHSE<1,DP>   
   DMT.LOC=DTM.LOC<1,DP>      
   DMT.QTY=DTM.QTY<1,DP>      
*CSF 24551 v
*T24887
   DMT.DATE=INT(DTM.TIME.STAMP<1,DP>/100000)
*   DMT.DATE=PNPL.LOGON.DATE
* T35744
   DMT.USAGE.SEQ=DTM.TIME.STAMP<1,DP>
*CSF 24551 ^
   DMT.SHEET=DTM.SHEET<1,DP>  
   DMT.R.S.ID=DTM.R.S.ID<1,DP>      
   DMT.COST=DTM.COST<1,DP>    
   DMT.STATUS=DTM.STATUS<1,DP>
   DMT.INIT=DTM.INIT<1,DP>    
   DMT.SPOIL.CODE=DTM.SPOIL.CODE<1,DP>
* DMT.DIV.FLAG=DTM.DIV.FLAG<1,DP>
   DMT.RS.QTYPE=DTM.RS.QTYPE<1,DP>
   IF DTM.TIME.STAMP<1,DP> # "" THEN
      DMT.TIME = MOD(DTM.TIME.STAMP<1,DP>,100000)
   END
   READU DMT.ID FROM CONTROL,TRN.CONO:"DAILY.MATL" ELSE DMT.ID=10000
   SOK = 0
   LOOP
      DMT.ID = DMT.ID + 1
      IF DMT.ID > 999999 THEN DMT.ID=10001
      READV CHKREC FROM DAILY.MATL,TRN.CONO:DMT.ID,1 ELSE SOK=1
   UNTIL SOK DO
   REPEAT
   WRITE DMT.ID ON CONTROL,TRN.CONO:"DAILY.MATL"
   MATWRITE DMT.REC ON DAILY.MATL,TRN.CONO:DMT.ID
   RETURN
*
*---- ERROR ROUTINE
*
90000 *
   IF RMODE = "T" OR RMODE = "B" THEN
      PRINT @(0,23):@(-4):ERRMSG:
      INPUT REPLY,1:
      PRINT @(0,23):@(-4):
   END
   RETURN
*
*---- RELEASE RECORD LOCKS
*
98000 *
   IF DTM.LOCKED # "" THEN
      RELEASE DAILY.TIME.MATL, DTM.LOCKED
      DTM.LOCKED = ""
   END
   IF PNPL.LOCKED # "" THEN
      RELEASE PNP.LOG, PNPL.LOCKED
      PNPL.LOCKED = ""
   END
   RETURN
*
*---- END OF PROGRAM
*
99999 *
   STOP
END
