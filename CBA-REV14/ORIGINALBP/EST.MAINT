*********************************************************************
*
* REVISION - [08.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
*
* PROGRAM  - EST.MAINT
*
* AUTHOR   - RHONDA PERRIN, COMPUTER BUSINESS ASSOCIATES
*
* DATE     - 12/12/85
*
* DESCRIPTION
*
* This program updates and maintains the ESTIMATE file.
*
* MOD TASK 18262 INCREASE ESTIMATE QUANTITIES TO 99 DMT 7/24/94
* MOD TASK 17918 DMT 8/15/94 ADD BACKMARGIN CALCULATION
* MOD TASK/JAPS 19855 LLH 02/15/96 ADD INSTANT PRINT OPTION
*T20965 lanny 09/10/1996 * When SUB-ESTIMATE Filed and report requested,
*                          the report screen should have 'Y' under SUB
*                          column.
*T21177 diane 11/06/1996 * REV11 UPG
*T21618 rick 02/27/1997 * Modify min qty allowed and min separation from
*                         10 to 1
*T21965 diane 05/27/1997 * Clear EST.OM.ENTERED when duplicating or
*                          revising
*T23278 markt 10/22/1998 * Add check for divisional security
*T22896  llh 05/14/1998 * Reschedule if estimate has a job and has
*                       * been MODIFIED.
*T24314 cm 08/30/1999 * When qty's are deleleted or inserted the paper 
*                       paper pricing is not adjusted correctly on the
*                       product definition screen.
*T24023 diane 12/10/99 * Added equipment cpylib
*T25515 cm 11/13/2000 * Change how selection process works when printing
*                       an estimate.
*T25721 cm 03/27/2001 * When the (R)evise option is used when creating an
*                       estimate and the estimate being revised has a
*                       master estimate # and after filing the record the
*                       user uses the (I)mmediate print option then the
*                       estimate reports 1 and 2 are wrong.
*C38176 edwin 04/16/2001 * Add Message to display when qty is
*                          inserted above line 1.
*T25825 edwin 05/09/2001 * Add warning message 'F'ile is selected and
*                          component has a null price.
*T26138 cmykleb 11/02/2001 * Expand qty fields from 8 to 9 digits.
*T26306 cmykleb 11/29/2001 * When qty's are deleted or inserted the
*                            casein information is not working properly.
*T25978 adelgado 02/19/2002 * Add the use of prompts (S,SR,SB,ST).
*T26090 cmykleb 04/05/2002 * Change estimate rpts to use GET.PROG.HEAD
*                            for heading.
*T26554 cmykleb 04/19/2002 * When entering qtys using the (R)ange
*                            function the process is allowing the
*                            beginning range # to be zero and the
*                            ending range # to be smaller than the
*                            beginning range # which messes up the
*                            process.
*T26699 cmykleb 06/24/2002 * When using the division x-ref (???) the
*                            col headings are wrong and the data is
*                            being truncated.
*T27716 cmykleb 10/08/2003 * Add pre-press inclusive functionality.
*T28061 cmykleb 04/08/2004 * Remove "Master" estimate # logic that
*                            loads the information from the master
*                            estimate # into the current estimate.
*********************************************************************
*
*---- FILE COPY STATEMENTS
*
*COPY>JES.CPYLIB>SCOMMON.ESTIMATE
*COPY>JES.CPYLIB>JES.FILE.VARS
*COPY>CPYLIB>FILE.VARS
*COPY>JES.CPYLIB>ESTIMATOR
*COPY>JES.CPYLIB>ESTIMATE
*COPY>JES.CPYLIB>ESTIMATE.DIV
*COPY>JES.CPYLIB>ESTIMATE.RL
*COPY>JES.CPYLIB>ESTIMATE.RPT
*COPY>JES.CPYLIB>EST.DESC.CODE
*COPY>JES.CPYLIB>ESTIMATE.PAPER.GROUP
*COPY>JES.CPYLIB>EQUIPMENT
*COPY>PMC.CPYLIB>CUSTOMER
*COPY>PMC.CPYLIB>DIVISION
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>SALES.CODE
*COPY>PMC.CPYLIB>SALESMAN
*COPY>JCS.CPYLIB>JOB.CATEGORY
*COPY>JCS.CPYLIB>JOB
*COPY>CPYLIB>SCREEN.COM
*COPY>CPYLIB>GEN.XREF.SUB
*COPY>CPYLIB>TCC
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
   MAT SYSCOM.REC =  ""; SYS.TYPE = 2
*
*---- GET PARAMETERS
*
   PROCREAD X ELSE
      X="I"
   END
   ACTION=X<1>
   PDTYPE=X<2>
   RPT.NUM = X<3> ; * T26090
*
*---- OPEN ALL FILES
*
   CALL EST.MAINT.OPEN
   OPEN "ESTIMATE.DEPT" TO ESTIMATE.DEPT.BU ELSE ERRMSG="CANNOT OPEN ESTIMATE.DEPT FILE";GOSUB 90000;STOP
   OPEN "ESTIMATE.WORK" TO ESTIMATE.WORK ELSE ERRMSG="CANNOT OPEN ESTIMATE.WORK FILE";GOSUB 90000;STOP
   OPEN "ESTIMATE.RL" TO ESTIMATE.RL ELSE ERRMSG="CANNOT OPEN ESTIMATE.RL FILE";GOSUB 90000;STOP
   OPEN "ESTIMATE.RPT" TO ESTIMATE.RPT ELSE ERRMSG="CANNOT OPEN ESTIMATE.RPT FILE";GOSUB 90000;STOP
   OPEN "CUST.EST.XREF" TO CUST.EST.XREF ELSE ERRMSG="CANNOT OPEN CUST.EST.XREF FILE";GOSUB 90000;STOP
   OPEN "PROSPECT.EST.XREF" TO PROSPECT.EST.XREF ELSE ERRMSG="CANNOT OPEN PROSPECT.EST.XREF FILE";GOSUB 90000;STOP
   OPEN "XREF.DATA" TO XREF.DATA ELSE ERRMSG = "CANNOT OPEN XREF.DATA FILE"; GOSUB 90000; STOP
*T26090 v
   OPEN "PMC_REPORTS" TO PMC_REPORTS ELSE ERRMSG = "CANNOT OPEN PMC_REPORTS FILE"; GOSUB 90000; STOP
*T26090 ^
*
*---- INITIALIZATION
*
   CONO=""
   CALL GET.CONO1 (CONO,MAT COMP.REC,COMPANY,CONTROL)
   SCREEN INIT;#
   S$SCR=1
   SCREEN DEFINE;EST.MAINT
   SCREEN FORMAT
   SCREEN COUNT;;28
   LINE.COUNT=S$LCNT
   LINE.SPACE=S$LSPC
   SCREEN COUNT;;31
   QTY.LINE.COUNT=S$LCNT
   QTY.LINE.SPACE=S$LSPC
   MAT GEN.XREF.REC=""
   GXR.CO=CONO
   ERRMSG=""
   UNKNOWN=STR("?",30)
   MAT EDC.REC=""
   TRUE=1 ; FALSE=0
   XCODE=""
   GO 110
*
*---- MAIN PROCESSING
*
100*
   SCREEN CLEAR
110*
   CURR.REF.NO=""
   QTY.CURR.REF.NO=""
   OLD.CUST=""
   OLD.CUST.NAME=""
   EST.FLAG=""
   EST.KEY=""
   EST.DUP.KEY=""
   EST.PDEF.TYPE=""
   STD.FLAG=0
   DUP.FLAG=0
   NEW.REC=0
   QTY.CNT = 0
   PRT.QTY = ''
   CALL EST.MAINT.INIT (CONO,ACTION,EST.FLAG,EST.KEY,EST.DUP.KEY,NEW.REC,STD.FLAG,DUP.FLAG,CUST.EST.XREF,PROSPECT.EST.XREF)
   IF EST.FLAG="END" THEN GO 99999
*  EST.PDEF.TYPE=PDTYPE
   IF NEW.REC THEN
      EST.PDEF.TYPE=PDTYPE
   END ELSE
      IF EST.PDEF.TYPE = "RL" THEN
         ERRMSG = "Cannot maintain a roll label estimate with commercial estimating"
         GOSUB 90000
         GOTO 100
      END
      IF EST.PDEF.TYPE = "QP" THEN
         ERRMSG = "Cannot maintain a QUIK-PLAN estimate with commercial estimating"
         GOSUB 90000
         GOTO 100
      END
      IF EST.PDEF.TYPE = 'BOOK' THEN
         ERRMSG = "Cannot maintain a BOOK estimate with commercial estimating"
         GOSUB 90000
         GOTO 100
      END
      IF NOT(STD.FLAG) AND NOT(DUP.FLAG) THEN
         OLD.CUST=EST.CUST
         OLD.CUST.NAME=EST.CUST.NAME
      END
   END
   OLD.CATG=EST.CATG
   CALL EST.UPDATE (CONO,"C",EST.DUP.KEY,EST.KEY,ESTIMATE.DEPT.BU,ESTIMATE.DEPT)
   SAVE.MASTER=EST.MASTER
   IF NEW.REC OR STD.FLAG OR DUP.FLAG THEN
      EST.STATUS=""
      EST.STAT.DATE=""
      EST.JOB=""
      EST.ORDER=""
      EST.MASTER=""
      EST.SUBS=""
      EST.DATE.ENTERED=DATE()
      EST.CUST.PO=""
      EST.DATE.REQUIRED=""
      EST.BOOK.JOB=""
      EST.BOOK.QTY=""
      EST.FINAL.PRICE="";* CSF 25224
      EST.OM.ENTERED = ""     ;* T21965
      IF NOT(DUP.FLAG) THEN
         FOR M=1 TO 6
            EST.MARKUP<1,M>=CO.JES.PARAM<1,M>
         NEXT M
      END
   END
   IF NOT(NEW.REC) THEN
      CNT=COUNT(EST.COMMENTS,VM)+(EST.COMMENTS#"")
      QTY.CNT = DCOUNT(EST.QTY,VM)
      GOSUB 80000
      REF.NO=1
      CURR.REF.NO=""
      QTY.REF.NO=1
      QTY.CURR.REF.NO=""
      GOSUB 50000
      GOSUB 51000
   END
   IF NEW.REC OR STD.FLAG OR DUP.FLAG THEN
      BEGIN CASE
         CASE STD.FLAG AND DUP.FLAG         ;* DUP STANDARD
*T27716 v
*           FOR FD=1 TO 8 UNTIL S$VALUE="END"
*              ON FD GOSUB 10100,10200,10500,10600,10700,11000,11400,11600
            FOR FD=1 TO 9 UNTIL S$VALUE="END"
               ON FD GOSUB 10100,10200,10500,10600,10700,11000,11400,11600,11800
*T27716 ^
            NEXT FD
         CASE STD.FLAG                      ;* NEW STANDARD
*T27716 v
*           FOR FD=1 TO 8 UNTIL S$VALUE="END"
*              ON FD GOSUB 10100,10200,10500,10600,10700,11000,11400,11600
            FOR FD=1 TO 9 UNTIL S$VALUE="END"
               ON FD GOSUB 10100,10200,10500,10600,10700,11000,11400,11600,11800
*T27716 ^
            NEXT FD
         CASE NEW.REC OR DUP.FLAG           ;* NEW, DUP, or REVISE
            GOSUB 10100;IF S$VALUE='END' THEN GO 120
            GOSUB 10200;IF S$VALUE='END' THEN GO 120
            IF S$DATA(6)<1>='' THEN GOSUB 10300;IF S$VALUE='END' THEN GO 120
            IF S$DATA(14)<1>='' THEN GOSUB 10400;IF S$VALUE='END' THEN GO 120
            IF S$DATA(17)<1>='' THEN GOSUB 10500;IF S$VALUE='END' THEN GO 120
            IF S$DATA(20)<1>='' THEN GOSUB 10600;IF S$VALUE='END' THEN GO 120
            IF S$DATA(23)<1>='' THEN GOSUB 10700;IF S$VALUE='END' THEN GO 120
            IF S$DATA(26)<1>='' THEN GOSUB 11000;IF S$VALUE='END' THEN GO 120
            GOSUB 11100;IF S$VALUE='END' THEN GO 120
            IF S$DATA(22)<1>='' THEN GOSUB 11200;IF S$VALUE='END' THEN GO 120
            IF S$DATA(27)<1>='' THEN GOSUB 11400;IF S$VALUE='END' THEN GO 120
            GOSUB 11600
            GOSUB 11800 ; * T27716
      END CASE
120   IF S$VALUE="END" THEN
         CALL EST.UPDATE (CONO,"E",EST.DUP.KEY,EST.KEY,ESTIMATE.DEPT.BU,ESTIMATE.DEPT)
         RELEASE
         GO 100
      END
      IF NEW.REC THEN
         CNT=COUNT(EST.COMMENTS,VM)+(EST.COMMENTS#"")
         DONE=0
         FOR REF.NO=CNT+1 TO 999 UNTIL DONE
            GOSUB 50000
            GOSUB 12100
            IF S$VALUE="END" THEN
               DONE=1
               DEL S$DATA(29)<S$SCR,REF.NO>
               DEL S$DATA(30)<S$SCR,REF.NO>
               DEL EST.COMMENT.TYPE<1,REF.NO>
               DEL EST.COMMENTS<1,REF.NO>
            END ELSE
               CNT=CNT+1
            END
         NEXT REF.NO
         REF.NO=CNT
         CURR.REF.NO=""
         GOSUB 50000
      END
   END
*
*---- GET OPERATOR REPLY
*
500*
   BEGIN CASE
      CASE ACTION="M" AND EST.DEPT=""
         SCREEN FIELD;;33
         SCREEN INPUT;;33
      CASE ACTION="M"
         SCREEN FIELD;;38
         SCREEN INPUT;;38
      CASE 1
         SCREEN FIELD;;46
         SCREEN INPUT;;46
   END CASE
   OPTION=S$VALUE
   BEGIN CASE
      CASE OPTION="E" OR OPTION="END"
         IF ACTION#"I" THEN
            SCREEN FIELD;;43
            SCREEN INPUT;;43
            IF S$VALUE#"Y" THEN GO 500
         END
         CALL EST.UPDATE (CONO,"E",EST.DUP.KEY,EST.KEY,ESTIMATE.DEPT.BU,ESTIMATE.DEPT)
         RELEASE
         GO 100
      CASE OPTION="21"
         GOSUB 20000
      CASE OPTION#"" AND NUM(OPTION)
         FD=OPTION
         BEGIN CASE
            CASE FD <= 10
               ON FD GOSUB 10100,10200,10300,10400,10500,10600,10700,19990,19990,11000
            CASE FD <= 20
*T27716 v
*              ON FD-10 GOSUB 11100,11200,11400,11600,19990,19990,19990,19990,19990,19990
               ON FD-10 GOSUB 11100,11200,11400,11600,11800,19990,19990,19990,19990,19990
*T27716 ^
         END CASE
      CASE OPTION="C"
         STATUS=""
         S$SCR=2
         CALL EST.DESC.MAINT (CONO,ACTION,EST.KEY,STATUS)
         SCREEN CLOSE
         STATUS=""
         IF EST.PDEF.TYPE="" THEN EST.PDEF.TYPE=1
         PDEF="EST.PROD.MAINT.":EST.PDEF.TYPE
         CALL @PDEF (CONO,ACTION,EST.KEY,STATUS)
         SCREEN CLOSE
         STATUS=""
         CALL EST.DEPT.SELECT (CONO,ACTION,EST.KEY,STATUS)
         SCREEN CLOSE
         S$SCR=1
         GOSUB 550
         GOSUB 560
      CASE OPTION="J"
         S$SCR=2
         CALL EST.DESC.MAINT (CONO,ACTION,EST.KEY,STATUS)
         SCREEN CLOSE
         S$SCR=1
         GOSUB 550
         GOSUB 560
      CASE OPTION[1,1]="M"
         BEGIN CASE
            CASE OPTION[2,1]="O"
               IF EST.FINAL.PRICE<1,1> = '' THEN
                  GOSUB 25500
               END
               S$SCR=2
               CALL EST.SUMMARY.MARKUP.MAINT (CONO,ACTION,EST.KEY,STATUS,NEW.REC)
               SCREEN CLOSE
               S$SCR=1
               GOSUB 550
               GOSUB 560
            CASE OPTION="M"
               S$SCR=2
               CALL EST.MARKUP.MAINT (CONO,ACTION,EST.KEY,STATUS)
               SCREEN CLOSE
               S$SCR=1
               GOSUB 550
               GOSUB 560
         END CASE
      CASE OPTION="P"
         S$SCR=2
         IF EST.PDEF.TYPE="" THEN EST.PDEF.TYPE=1
         PDEF="EST.PROD.MAINT.":EST.PDEF.TYPE
         CALL @PDEF (CONO,ACTION,EST.KEY,STATUS)
         SCREEN CLOSE
         S$SCR=1
         GOSUB 550
         GOSUB 560
         IF NOT(NEW.REC) THEN EST.RECALC.FLAG=1
      CASE OPTION="V"
         S$SCR=2
         CALL EST.OSP.MAINT (CONO,ACTION,EST.KEY,STATUS)
         SCREEN CLOSE
         S$SCR=1
         GOSUB 550
         GOSUB 560
      CASE OPTION="B"
         S$SCR=2
         CALL EST.BIND.MAINT (CONO,ACTION,EST.KEY,STATUS)
         SCREEN CLOSE
         S$SCR=1
         GOSUB 550
         GOSUB 560
      CASE OPTION="D"
         S$SCR=2
         CALL EST.DEPT.SELECT (CONO,ACTION,EST.KEY,STATUS)
         SCREEN CLOSE
         S$SCR=1
         GOSUB 550
         GOSUB 560
      CASE OPTION="R" OR OPTION="RA"
         SCREEN FIELD;;42
         SCREEN INPUT;;42
         IF S$VALUE="" OR S$VALUE="END" THEN GO 500
         CALL EST.CALC.STK(CONO,"")
         OPT2=S$VALUE
         BEGIN CASE
            CASE OPTION="R"
               DCCNT=COUNT(EST.DEPT.COMP,VM)+(EST.DEPT.COMP#"")
               FOR DCPTR=1 TO DCCNT
                  ESTD.ID=EST.DEPT.COMP<1,DCPTR>
                  DPTR=FIELD(ESTD.ID,"!",1)
                  CPTR=FIELD(ESTD.ID,"!",2)
                  EQTY=FIELD(ESTD.ID,"!",3)
                  CALL EST.QTY.CALC (CONO,OPT2,EST.KEY,DPTR,CPTR,EQTY)
               NEXT DCPTR
            CASE OPTION = "RA"
               CALL EST.RECALC.ALL (CONO,OPT2,EST.KEY)
         END CASE
         IF EST.FINAL.PRICE<1,1> # '' THEN
            GOSUB 26000
         END
         EST.RECALC.FLAG=""
      CASE OPTION="S"
         SCREEN FIELD;;39
         SCREEN INPUT;;39
         IF S$VALUE="" OR S$VALUE="END" THEN GO 500
         OPT2=S$VALUE
         BEGIN CASE
            CASE OPT2="1"
               DSEL="ALL"
               GOSUB 650
               IF S$VALUE="" OR S$VALUE="END" THEN GO 500
               CSEL=S$VALUE
               GOSUB 700
               IF S$VALUE="" OR S$VALUE="END" THEN GO 500
               QSEL=S$VALUE
               CALL EST.QTY.GEN (CONO,"A",EST.KEY,"ALL")
               S$SCR=2
               CALL EST.DEPT.CCTR.SUM (CONO,EST.KEY,DSEL,CSEL,QSEL)
            CASE OPT2="2"
               DSEL="ALL"
               CSEL="ALL"
               GOSUB 700
               IF S$VALUE="" OR S$VALUE="END" THEN GO 500
               QSEL=S$VALUE
               CALL EST.QTY.GEN (CONO,"A",EST.KEY,"ALL")
               S$SCR=2
               CALL EST.DEPT.COMP.SUM (CONO,EST.KEY,DSEL,CSEL,QSEL)
            CASE OPT2="3"
               DSEL="ALL"
               CSEL="ALL"
               GOSUB 700
               IF S$VALUE="" OR S$VALUE="END" THEN GO 500
               QSEL=S$VALUE
               CALL EST.QTY.GEN (CONO,"A",EST.KEY,"ALL")
               S$SCR=2
               CALL EST.COMP.DEPT.SUM (CONO,EST.KEY,DSEL,CSEL,QSEL)
            CASE OPT2="4"
               DSEL="ALL"
               GOSUB 650
               IF S$VALUE="" OR S$VALUE="END" THEN GO 500
               CSEL=S$VALUE
               GOSUB 700
               IF S$VALUE="" OR S$VALUE="END" THEN GO 500
               QSEL=S$VALUE
               CALL EST.QTY.GEN (CONO,"A",EST.KEY,"ALL")
               S$SCR=2
               CALL EST.COST.TYPE.SUM (CONO,EST.KEY,DSEL,CSEL,QSEL)
            CASE OPT2="5"
               DSEL="ALL"
               GOSUB 650
               IF S$VALUE="" OR S$VALUE="END" THEN GO 500
               CSEL=S$VALUE
               GOSUB 700
               IF S$VALUE="" OR S$VALUE="END" THEN GO 500
               QSEL=S$VALUE
               CALL EST.QTY.GEN (CONO,"A",EST.KEY,"ALL")
               IF EST.FINAL.PRICE<1,1> = '' THEN
                  GOSUB 25500
               END
               S$SCR=2
               CALL EST.COST.SALE.SUM (CONO,EST.KEY,DSEL,CSEL,QSEL)
         END CASE
         SCREEN CLOSE
         S$SCR=1
         GOSUB 550
         GOSUB 560
      CASE OPTION="F"
* C38176 v
         COMPONENT.CNT = DCOUNT(EST.PROD.PCST<1>,@VM)
         FOR CP.NDX = 1 TO COMPONENT.CNT
            EPP = EST.PROD.PCST<1,CP.NDX>
            CONVERT '!' TO @VM IN EPP
            LN.CNT = DCOUNT(EPP<1>,@VM)
            FOR LN.NDX = 1 TO LN.CNT
               IF EPP<1,LN.NDX> = '' THEN 
                  ERRMSG = 'Must Update Component ':CP.NDX:' Ln# ':LN.NDX:' Price'
                  ERR.TYPE=1;CALL SI_SYSCOM(MAT SYSCOM.REC)
                  GOTO 500
               END
            NEXT LN.NDX
         NEXT CP.NDX
  * C38176 ^
         IF EST.RECALC.FLAG=1 THEN
            SCREEN FIELD;;50
            SCREEN INPUT;;50
            IF S$VALUE#"Y" THEN GO 500
         END
         GOSUB 25000
         IF EST.FINAL.PRICE<1,1> = '' THEN
            GOSUB 25500
         END
         IF EST.BOOK.JOB#"" THEN
            CALL EST.BOOK.SUB(CONO,"",EST.KEY)
         END
         CALL EST.UPDATE (CONO,"F",EST.DUP.KEY,EST.KEY,ESTIMATE.DEPT.BU,ESTIMATE.DEPT)
         IF CO.JIS = 'Y' THEN
            CALL JKT_NOTIFY_SUB ("1",CONO,"ESTIMATE",EST.KEY,"",EST.REC.SIZE,MAT EST.REC,ESTIMATE,ESTATUS)
         END
         MATWRITE EST.REC ON ESTIMATE,CONO:EST.KEY
*T25721 v
*** MOVE THESE 3 LINES TO THE BOTTOM OF THE (F)ILE ROUTINE ***
*        IF EST.MASTER#SAVE.MASTER THEN
*           CALL EST.MASTER.UPDATE (CONO,EST.KEY,SAVE.MASTER,EST.MASTER)
*        END
*T25721 ^
         BEGIN CASE
            CASE OLD.CUST#"P" AND EST.CUST#"P"
               CALL GEN.XREF.MAINT(CONO,EST.KEY,OLD.CUST,EST.CUST,CUST.EST.XREF,PREFIX)
            CASE OLD.CUST="P" AND EST.CUST="P"
               CALL GEN.XREF.MAINT(CONO,EST.KEY,OLD.CUST.NAME,EST.CUST.NAME,PROSPECT.EST.XREF,PREFIX)
            CASE OLD.CUST="P" AND EST.CUST#"P"
               CALL GEN.XREF.MAINT(CONO,EST.KEY,OLD.CUST.NAME,"",PROSPECT.EST.XREF,PREFIX)
               CALL GEN.XREF.MAINT(CONO,EST.KEY,"",EST.CUST,CUST.EST.XREF,PREFIX)
            CASE OLD.CUST#"P" AND EST.CUST="P"
               CALL GEN.XREF.MAINT(CONO,EST.KEY,OLD.CUST,"",CUST.EST.XREF,PREFIX)
               CALL GEN.XREF.MAINT(CONO,EST.KEY,"",EST.CUST.NAME,PROSPECT.EST.XREF,PREFIX)
         END CASE
         IF EST.KEY MATCHES "0N" THEN
            CALL GEN.XREF.MAINT(CONO,EST.KEY,OLD.CATG,EST.CATG,ESTIMATE.XREF,PREFIX)
         END
* T22896 v
         IF CO.PSS = "Y" AND EST.BOOK.JOB # "" THEN
            SCREEN FIELD;;54
            SCREEN INPUT;;54
            IF S$VALUE = "Y" THEN
               FOR J = 1 TO DCOUNT(EST.BOOK.JOB,VM)
                  PARAM = ""
                  PARAM<1,1> = CONO
                  PARAM<1,2> = EST.BOOK.JOB<1,J>
                  PARAM<1,3> = "N"
                  PARAM<1,4> = "R"
                  CALL PERFORM.PROG("JOB.SCHED.EXTRACT",PARAM)
               NEXT J
            END
         END
* T22896 ^
         SCREEN FIELD;;49
         SCREEN INPUT;;49
         OLD.VALUE = S$VALUE
         IF S$VALUE="Y" OR S$VALUE = "I" THEN
            EC=COUNT(EST.QTY,VM)+(EST.QTY # "")
            SAVE.EST.QTY = EST.QTY<1>
            BEGIN CASE
               CASE EC < 4 
                  PRT.QTY<1,1>=CHANGE(EST.QTY,VM,SVM)
*T25515 v
*              CASE EC < 6
               CASE EC GT 999999
*T25515 ^
                  S$VALUE = 1
                  FOR IPTR = 1 TO 3 UNTIL S$VALUE = '' OR S$VALUE = 'END'
                     S$VALUE = ''
                     SCREEN FIELD;;35
                     S$MINV=1;S$MAXV=EC
                     S$PMSG="Enter Quantity"
                     IF IPTR = 1 THEN
                        FOR EP=1 TO EC
                           S$PMSG=S$PMSG:"  (":EP:") ":EST.QTY<1,EP>
                           IF EP = 1 THEN
                              S$VALDAT = EP
                           END ELSE
                              S$VALDAT = S$VALDAT:",":EP
                           END
                        NEXT EP
                        SAVE.VALDAT = S$VALDAT
                        SAVE.PMSG = S$PMSG
                     END ELSE
                        S$DEFAULT = ''
                     END
                     S$PMSG = SAVE.PMSG
                     S$VALDAT = SAVE.VALDAT
                     SCREEN INPUT;;35
                     IF S$VALUE # '' AND S$VALUE # 'END' THEN
                        S$VALDAT = SAVE.VALDAT
                        S$VALDAT = CHANGE(S$VALDAT,",",VM)
                        LOCATE S$VALUE IN S$VALDAT<1>,1 SETTING VPTR THEN
                           DEL S$VALDAT<1,VPTR>
                        END
                        S$VALDAT = CHANGE(S$VALDAT,VM,",")
                        PRT.QTY<1,1,IPTR>=EST.QTY<1,S$VALUE>
                        SAVE.VALDAT = S$VALDAT
                        SEL.QTY = EST.QTY<1,S$VALUE>
                        SEL.PTR = "(":S$VALUE:") ":SEL.QTY
                        NEW.PTR = "(":S$VALUE:") SELECTED"
                        SAVE.PMSG = CHANGE(SAVE.PMSG,SEL.PTR,NEW.PTR)
                     END
                  NEXT IPTR
               CASE 1
                  SAVE.EST.QTY = EST.QTY<1>
                  GXR.ID = 1
*T25515 v
*                 FOR IPTR = 1 TO 99 UNTIL GXR.ID = '' OR DCOUNT(PRT.QTY<1,1>,SVM) = 3
                  FOR IPTR = 1 TO 99 UNTIL GXR.ID = '' OR DCOUNT(PRT.QTY<1,1>,SVM) = 4
*T25515 ^
                     GXR.ID = ''
                     GXR.NAME = 'EST.QTY.SEL'
                     GXR.XREF = ESTIMATE.WORK
                     GXR.SRCH.ID = EST.KEY
                     IF IPTR = 1 THEN
                        MATWRITE EST.REC ON ESTIMATE.WORK, CONO:EST.KEY
                     END
                     CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
*T25515              GOSUB 550
*T25515              GOSUB 560
                     IF GXR.ID # "" THEN 
                        MATREADU EST.REC FROM ESTIMATE.WORK, CONO:EST.KEY ELSE NULL
                        SEL.QTY = EST.QTY<1,GXR.ID>
*T25515                 PRT.QTY<1,1,IPTR> = SEL.QTY
                        LOCATE SEL.QTY IN EST.QTY<1>,1 SETTING EPTR THEN
*T25515 v
*                          DEL EST.QTY<1,EPTR>
                           IF EST.QTY.SELECT<1,EPTR> = '' THEN
                              IF DCOUNT(PRT.QTY<1,1>,SVM) = 3 THEN
                                 ERRMSG = "The Max # of quantities to print is 3"
                                 GOSUB 90000
                                 GOTO 600
                              END
                              PRT.QTY<1,1,-1> = SEL.QTY
                              EST.QTY.SELECT<1,EPTR>='*'
                           END ELSE
                              EST.QTY.SELECT<1,EPTR>=''
                              LOCATE SEL.QTY IN PRT.QTY<1,1>,1 SETTING SVAR THEN
                                 DEL PRT.QTY<1,1,SVAR>
                              END
                           END
*T25515 ^
                           MATWRITE EST.REC ON ESTIMATE.WORK, CONO:EST.KEY
                        END
                     END
600 *
                  NEXT IPTR
                  GOSUB 550 ; * T25515
                  DELETE ESTIMATE.WORK, CONO:EST.KEY
            END CASE
            IF OLD.VALUE = "Y" THEN
               MATREADU ESTR.REC FROM ESTIMATE.RPT, CONO:FIELD(EST.DIV,"-",1) ELSE
                  MAT ESTR.REC = ""
               END
            END ELSE
               MAT ESTR.REC = ""
            END
            QCNT=COUNT(ESTR.EST.ID,VM)+(ESTR.EST.ID#"")+1
            ESTR.EST.ID<1,QCNT>=EST.KEY
            ESTR.CUST.NAME<1,QCNT>=EST.CUST.NAME
*T20965 v
            IF EST.MASTER # "" THEN
               ESTR.SUB.FLAG<1,QCNT>="Y"
            END ELSE
               ESTR.SUB.FLAG<1,QCNT>=""
            END
*T20965 ^
            ESTR.RPT.TYPE<1,QCNT>=CO.JES.PARAM<1,7>
            ESTR.QTY.SEL<1,QCNT> = PRT.QTY<1,1>
*T25515 v
*           IF ESTR.QTY.SEL<1,REF.NO> = '' THEN
*              QC = DCOUNT(EST.QTY,VM)
*              IF QC > 3 THEN QC = 3
*              FOR Q = 1 TO QC
*                 ESTR.QTY.SEL<1,REF.NO,Q> = EST.QTY<1,Q>
*              NEXT Q
*           END
*           IF OLD.VALUE = "Y" THEN
            IF OLD.VALUE = 'Y' AND ESTR.QTY.SEL<1,REF.NO,1> # '' THEN
*T25515 ^
               MATWRITE ESTR.REC ON ESTIMATE.RPT,CONO:FIELD(EST.DIV,"-",1)
            END
         END
*
* TASK 19855
*
*T25515 v
*        IF OLD.VALUE = "I" THEN
         IF OLD.VALUE = 'I' AND ESTR.QTY.SEL<1,REF.NO,1> # '' THEN
*T25515 ^
            EST.QTY<1> = SAVE.EST.QTY
            OPEN '','ESTIMATE.DEPT' TO ESTIMATE.DEPT ELSE STOP
            RPT.TYPE = ESTR.RPT.TYPE<1,1>
            PRT.QTY = ESTR.QTY.SEL<1,1>
            SAVE.PRT.QTY = ''
            QCNT = DCOUNT(PRT.QTY,SVM)
            FOR Q = 1 TO QCNT
               LOCATE PRT.QTY<1,1,Q> IN EST.QTY<1>,1 SETTING Q1 THEN
                  SAVE.PRT.QTY<1,1,Q> = PRT.QTY<1,1,Q>
               END
            NEXT Q
            PRT.QTY = SAVE.PRT.QTY
            ESTR.QTY.SEL<1,1> = SAVE.PRT.QTY
*
            DESC = EST.COMMENTS<1,1>
            MATREAD EST.RL.REC FROM ESTIMATE.RL, CONO:EST.KEY ELSE MAT EST.RL.REC=""
            PAGE.NO = 0
            FOR TP = 1 TO LEN(RPT.TYPE)
               TYPE = RPT.TYPE[TP,1]
*T26090 v
               BEGIN CASE
                  CASE TYPE = 1
                     RPT.NUM = "JE420"
                  CASE TYPE = 2
                     RPT.NUM = "JE421"
                  CASE TYPE = 3
                     RPT.NUM = "JE422"
                  CASE TYPE = 4
                     RPT.NUM = "JE423"
                  CASE TYPE = 5
                     RPT.NUM = "JE424"
                  CASE TYPE = 6
                     RPT.NUM = "JE425"
                  CASE 1
                     RPT.NUM = "JE420"
               END CASE
               CONO.NAME = ""
               RPT.NAME = ""
               HD1 = "" ; HD2 = ""
               CALL GET.PROG.HEAD(CONO,CONO.NAME,RPT.NAME,RPT.NUM,"",HD1,HD2)
*T26090 ^
               BEGIN CASE
                  CASE TYPE = "1"
                     P_X  = 3 ; P_Y = 23 ; P_VALUE = "(":EST.KEY:") Processing Demographics" ; P_OPT = "CL"
                     CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*T26090 v
*                       CALL EST.REPORT.1 (CONO, CO.NAME, EST.KEY, PAGE.NO,PRT.QTY)
                     CALL EST.REPORT.1 (CONO, CO.NAME, EST.KEY, PAGE.NO,PRT.QTY,HD1,HD2)
*T26090 ^
                  CASE TYPE = "2"
                     P_X  = 3 ; P_Y = 23 ; P_VALUE = "(":EST.KEY:") Processing Recap Report" ; P_OPT = "CL"
                     CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*T26090 v
*                       CALL EST.RECAP.RPT (CONO, CO.NAME, EST.KEY, PAGE.NO,PRT.QTY)
                     CALL EST.RECAP.RPT (CONO, CO.NAME, EST.KEY, PAGE.NO,PRT.QTY,HD1,HD2)
*T26090 ^
                  CASE TYPE = "3"
                     P_X  = 3 ; P_Y = 23 ; P_VALUE = "(":EST.KEY:") Processing Component/Department Summary Report" ; P_OPT = "CL"
                     CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*T26090 v
*                    CALL EST.COMP.DEPT.SUM.RPT (CONO, CO.NAME, EST.KEY, DESC, PAGE.NO,PRT.QTY)
                     CALL EST.COMP.DEPT.SUM.RPT (CONO, CO.NAME, EST.KEY, DESC, PAGE.NO,PRT.QTY,HD1,HD2)
*T26090 ^
                  CASE TYPE = "4"
                     P_X  = 3 ; P_Y = 23 ; P_VALUE = "(":EST.KEY:") Processing Department/Component Summary Report" ; P_OPT = "CL"
                     CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*T26090 v
*                       CALL EST.DEPT.COMP.SUM.RPT (CONO, CO.NAME, EST.KEY, DESC, PAGE.NO,PRT.QTY)
                     CALL EST.DEPT.COMP.SUM.RPT (CONO, CO.NAME, EST.KEY, DESC, PAGE.NO,PRT.QTY,HD1,HD2)
*T26090 ^
                  CASE TYPE = "5"
                     P_X  = 3 ; P_Y = 23 ; P_VALUE = "(":EST.KEY:") Processing Detail Recap Report" ; P_OPT = "CL"
                     CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*T26090 v
*                    CALL EST.DETAIL.RECAP (CONO, CO.NAME, EST.KEY, DESC, PAGE.NO,PRT.QTY)
                     CALL EST.DETAIL.RECAP (CONO, CO.NAME, EST.KEY, DESC, PAGE.NO,PRT.QTY,HD1,HD2)
*T26090 ^
                  CASE TYPE = "6"
                     P_X  = 3 ; P_Y = 23 ; P_VALUE = "(":EST.KEY:") Processing Detail Report" ; P_OPT = "CL"
                     CALL VSI_SI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*T26090 v
*                    CALL EST.DETAIL.RPT.1 (CONO, CO.NAME, EST.KEY, PAGE.NO,PRT.QTY)
                     CALL EST.DETAIL.RPT.1 (CONO, CO.NAME, EST.KEY, PAGE.NO,PRT.QTY,HD1,HD2)
*T26090 ^
               END CASE
            NEXT TP
            PRINTER CLOSE
            OPEN '','ESTIMATE.DEPT.BU' TO ESTIMATE.DEPT ELSE STOP
            RQM 6
            SCREEN FORMAT
         END
         IF EST.ORDER # "" THEN
            ERRMSG = "Updates may need to be made to the associated Order/Job"
            GOSUB 90000
         END
*T25721 v
         IF EST.MASTER#SAVE.MASTER THEN
            CALL EST.MASTER.UPDATE (CONO,EST.KEY,SAVE.MASTER,EST.MASTER)
         END
*T25721 ^
         GO 100
   END CASE
   GO 500
*
*---- CODE SELECTION
*
540*
   GXR.CO = CONO
   GXR.ID = ""
   GXR.NAME = "GEN.CODE"
   GXR.FILE = XFILE
   GXR.SORT.FILE = XTYPE
   CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
   XCODE = GXR.ID
   S$VALUE=GXR.ID
   S$DATA(FLD)<S$SCR,FREF>=GXR.ID
*
*---- REFORMAT SCREEN
*
550*
   SCREEN FORMAT
   RETURN
560*
   GOSUB 80100
   CURR.REF.NO=""
   REF.NO=1
   QTY.CURR.REF.NO=""
   QTY.REF.NO=1
   GOSUB 50000
   GOSUB 51000
   RETURN
*
*---- GET COMPONENT SELECTION
*
650*
   IF EST.COMPONENT.CNT <= 1 THEN
      S$VALUE="ALL"
   END ELSE
      SCREEN FIELD;;40
      SCREEN INPUT;;40;RETURN
      IF S$VALUE#"ALL" AND (S$VALUE < 1 OR S$VALUE > EST.COMPONENT.CNT) THEN
         ERRMSG="** OUT OF RANGE **"
         GOSUB 90000
         GO 650
      END
   END
   RETURN
*
*---- GET ORDER QUANTITY
*
700*
   EC=COUNT(EST.QTY,VM)+(EST.QTY#"")
   BEGIN CASE
      CASE EC < 2 
         S$VALUE=EST.QTY<1,1>
*T26138 v
*     CASE EC < 6
*        SCREEN FIELD;;35
*        S$MINV=1;S$MAXV=EC
*        S$PMSG="Enter Quantity"
*        FOR EP=1 TO EC
*           S$PMSG=S$PMSG:"  (":EP:") ":EST.QTY<1,EP>
*        NEXT EP
*        SCREEN INPUT;;35;RETURN
*        S$VALUE=EST.QTY<1,S$VALUE>
*T26138 ^
      CASE 1
         GXR.NAME = 'EST.QTY.SEL'
         GXR.XREF = ESTIMATE.WORK
         GXR.SRCH.ID = EST.KEY
         MATWRITE EST.REC TO ESTIMATE.WORK, CONO:EST.KEY
         CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
         DELETE ESTIMATE.WORK, CONO:EST.KEY
         IF GXR.ID = "" THEN 
            GOSUB 550
            GOSUB 560
            S$VALUE = 'END'
            RETURN
         END
         S$VALUE = EST.QTY<1,GXR.ID>
   END CASE
   RETURN
*
*----- MASTER ASSIGNMENT
*
10100*
   IF EST.SUBS#"" THEN RETURN
   S$DATA(9)<1>=EST.MASTER
   SCREEN FIELD;;9
   SCREEN INPUT;;9;RETURN
   IF S$VALUE#"" THEN
      IF S$VALUE=EST.KEY THEN
         ERRMSG="Estimate cannot be master to itself"
         GOSUB 90000
         GO 10100
      END
      READ DUMMY FROM ESTIMATE,CONO:S$VALUE ELSE
         ERRMSG="Estimate not on file. Try again! "
         GOSUB 90000
         GO 10100
      END
      IF DUMMY<EST.MASTER.ATT>#"" THEN
         ERRMSG="Selected master cannot be a sub-estimate"
         GOSUB 90000
         GO 10100
      END
*T28061 v
   END
*     EST.CUST=DUMMY<7>;S$DATA(6)<1>=EST.CUST
*     EST.CUST.NAME=DUMMY<8>;S$DATA(7)<1>=EST.CUST.NAME
*     EST.CUST.ADDR1=DUMMY<9>;S$DATA(8)<1>=EST.CUST.ADDR1
*     EST.CUST.ADDR2=DUMMY<10>;S$DATA(10)<1>=EST.CUST.ADDR2
*     EST.CUST.ADDR3=DUMMY<11>;S$DATA(12)<1>=EST.CUST.ADDR3
*     EST.CUST.ATTN=DUMMY<13>;S$DATA(11)<1>=EST.CUST.ATTN
*     EST.SALESMAN=DUMMY<14>;S$DATA(14)<1>=EST.SALESMAN
*     MATREAD SALESMAN.REC FROM SALESMAN,CONO:EST.SALESMAN ELSE
*        MAT SALESMAN.REC=""
*     END
*     S$DATA(15)<1>=SALS.NAME
*     EST.DIV=DUMMY<15>;S$DATA(17)<1>=EST.DIV
*     MATREAD DIV.REC FROM DIVISION,CONO:FIELD(EST.DIV,"-",1) ELSE DIV.DESC=UNKNOWN
*     S$DATA(18)<1>=DIV.DESC
*     EST.TYPE=DUMMY<16>;S$DATA(20)<1>=EST.TYPE
*     GOSUB 60000
*     S$DATA(21)<1>=TYPE.DESC
*     EST.DATE.REQUIRED=DUMMY<20>;S$DATA(22)<1>=EST.DATE.REQUIRED
*     EST.CATG=DUMMY<17>;S$DATA(23)<1>=EST.CATG
*     IF EST.CATG="" THEN
*        MAT JCATG.REC=""
*     END ELSE
*        MATREAD JCATG.REC FROM JOB.CATEGORY,CONO:EST.CATG ELSE JCATG.DESC=UNKNOWN
*     END
*     S$DATA(24)<1>=JCATG.DESC
*     EST.SALES.CODE=DUMMY<18>;S$DATA(26)<1>=EST.SALES.CODE
*     EST.PURGE.TYPE=DUMMY<22>;S$DATA(27)<1>=EST.PURGE.TYPE
*     EST.CUST.ADDR4=DUMMY<12>;S$DATA(45)<1>=EST.CUST.ADDR4
*     SCREEN DISPLAY;;ALL
*  END
   EST.MASTER=S$VALUE
   RETURN
*
*---- ESTIMATOR ID
*
10200*
   S$DATA(3)<1>=EST.ESTIMATOR
   SCREEN FIELD;;3
   SCREEN INPUT;;3;RETURN
   IF S$VALUE="???" THEN
      FLD=3;FREF=1;XTYPE="ESTIMATOR";XFILE=ESTIMATOR;XFLD=1;GOSUB 540; GOSUB 560
      IF XCODE="" THEN GO 10200
   END
   IF S$VALUE="" THEN
      DESC=""
   END ELSE
      READ DESC FROM ESTIMATOR,CONO:S$VALUE ELSE
         ERRMSG="Invalid Estimator. Try again! "
         GOSUB 90000
         GO 10200
      END
   END
   EST.ESTIMATOR=S$VALUE
   S$DATA(4)<1>=DESC
   SCREEN DISPLAY;;4
10299*
   RETURN
*
*---- CUSTOMER NUMBER,NAME & ADDRESS
*
10300*
   SCREEN FIELD;;6
   SCREEN INPUT;;6;RETURN
   BEGIN CASE
      CASE S$VALUE="END"
         GO 10399
      CASE S$VALUE=""
         SCREEN FIELD;;7
         SCREEN INPUT;;7
         BEGIN CASE
            CASE S$VALUE="END" OR S$VALUE=""
               GO 10300
            CASE S$VALUE#""
               GXR.XREF=CUSTOMER.XREF
               GXR.SRCH.ID=S$VALUE
               GXR.FILE=CUSTOMER
               GXR.ID=""
               GXR.NAME = 'CUSTOMER'
               CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
               IF GXR.ID="" THEN GXR.ID="P"
               IF GXR.ACTION#"X" THEN
                  S$DATA(6)<1>=GXR.ID
                  GOSUB 550
                  GOSUB 560
               END ELSE
                  S$DATA(6)<1>=GXR.ID
                  SCREEN DISPLAY;;6
               END
               BEGIN CASE
                  CASE GXR.ID="END"
                     GO 10300
                  CASE GXR.ID="P"
                     EST.CUST=GXR.ID
                     GO 10340
                  CASE GXR.ID#""
                     MATREAD CUST.REC FROM CUSTOMER,CONO:GXR.ID ELSE
                        ERRMSG="Invalid customer. Try again! "
                        GOSUB 90000
                        GO 10300
                     END
                     EST.CUST=GXR.ID
                     GO 10350
               END CASE
         END CASE
      CASE S$VALUE="P"
         EST.CUST=S$VALUE
         GO 10340
      CASE S$VALUE#""
         MATREAD CUST.REC FROM CUSTOMER,CONO:S$VALUE ELSE
            ERRMSG="Invalid customer. Try again! "
            GOSUB 90000
            S$DATA(6)<1> = EST.CUST
            GO 10300
         END
         EST.CUST=S$VALUE
         GO 10350
   END CASE
10340*
   SCREEN FIELD;;7
   SCREEN INPUT;;7
   IF S$VALUE#"END" THEN EST.CUST.NAME=S$VALUE ELSE GO 10399
   IF EST.FLAG="" THEN GO 10399
   SCREEN FIELD;;8
   SCREEN INPUT;;8
   IF S$VALUE#"END" THEN EST.CUST.ADDR1=S$VALUE ELSE GO 10399
   SCREEN FIELD;;10
   SCREEN INPUT;;10
   IF S$VALUE#"END" THEN EST.CUST.ADDR2=S$VALUE ELSE GO 10399
   SCREEN FIELD;;12
   SCREEN INPUT;;12
   IF S$VALUE#"END" THEN EST.CUST.ADDR3=S$VALUE ELSE GO 10399
   SCREEN FIELD;;45
   SCREEN INPUT;;45
   IF S$VALUE#"END" THEN EST.CUST.ADDR4=S$VALUE ELSE GO 10399
   GO 10399
10350*
   S$DATA(7)<1>=CUST.NAME
   S$DATA(8)<1>=CUST.ADDR1
   S$DATA(10)<1>=CUST.ADDR2
   S$DATA(12)<1>=CUST.ADDR3
   S$DATA(45)<1>=CUST.ADDR4:"  ":CUST.ZIP
   SCREEN DISPLAY;;7
   SCREEN DISPLAY;;8
   SCREEN DISPLAY;;10
   SCREEN DISPLAY;;12
   SCREEN DISPLAY;;45
   EST.CUST.NAME=CUST.NAME
   EST.CUST.ADDR1=CUST.ADDR1
   EST.CUST.ADDR2=CUST.ADDR2
   EST.CUST.ADDR3=CUST.ADDR3
   EST.CUST.ADDR4=CUST.ADDR4:"  ":CUST.ZIP
10399*
   SCREEN FIELD;;11
   SCREEN INPUT;;11
   IF S$VALUE#"END" THEN EST.CUST.ATTN=S$VALUE
   RETURN
*
*---- SALESMAN NUMBER & NAME
*
10400*
   S$DATA(14)<1>=EST.SALESMAN
   SCREEN FIELD;;14
   IF EST.CUST#"P" THEN
      IF CUST.SALESMAN#"" THEN
         S$O.R="O";S$DEFAULT=CUST.SALESMAN
      END
   END
   SCREEN INPUT;;14;RETURN
   IF S$VALUE="???" THEN
      FLD=14;FREF=1;XTYPE="SALESMAN";XFILE=SALESMAN;XFLD=1;GOSUB 540; GOSUB 560
      IF XCODE="" THEN GO 10400
   END
   MATREAD SALESMAN.REC FROM SALESMAN,CONO:S$VALUE ELSE
      ERRMSG="Invalid salesman number. Try again! "
      GOSUB 90000
      GO 10400
   END
   EST.SALESMAN=S$VALUE
   S$DATA(15)<1>=SALS.NAME
   SCREEN DISPLAY;;15
10499*
   RETURN
*
*---- DIVISION NUMBER & DESCRIPTION
*
10500*
   IF EST.DEPT#"" THEN RETURN
   S$DATA(17)<1>=EST.DIV
   SCREEN FIELD;;17
   SCREEN INPUT;;17;RETURN
   IF S$VALUE = "???" THEN
*T26699 v
*     GXR.NAME = "ESTIMATE.DIV"
*     GXR.FILE = ESTIMATE.DIV
      CALL GET.CRTMODE(CRTMODE)
      IF CRTMODE = 'termulator' THEN
         GXR.NAME = "ESTIMATE.DIV.GUI"
         GXR.FILE = ESTIMATE.DIV
      END ELSE
         GXR.NAME = "ESTIMATE.DIV"
         GXR.FILE = ESTIMATE.DIV
      END
*T26699 ^
      CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
      S$DATA(17)<1>=GXR.ID
      GOSUB 550
      GOSUB 560
      IF GXR.ID = "" THEN GOTO 10500
      S$VALUE = GXR.ID
   END
   MATREAD ESTV.REC FROM ESTIMATE.DIV,CONO:S$VALUE ELSE
      ERRMSG="Departments not defined for specifed entry. Try again! "
      GOSUB 90000
      GO 10500
   END
   MATREAD DIV.REC FROM DIVISION,CONO:FIELD(S$VALUE,"-",1) ELSE
      ERRMSG="Invalid division number. Try again! "
      GOSUB 90000
      GO 10500
   END
*T23278 v
   DIV.CODE = FIELD(S$VALUE,"-",1); USER.ID = UPCASE(@LOGNAME); ERRMSG = ''
   CALL SI.CK.DIV.SEC.SUB(CONO,DIV.CODE,USER.ID,ERRMSG)
   IF ERRMSG # '' THEN
      GOSUB 90000; GOTO 10500
   END
*T23278 ^
   EST.DIV=S$VALUE
   S$DATA(18)<1>=DIV.DESC
   SCREEN DISPLAY;;18
   RETURN
*
*---- ESTIMATE TYPE & DESCRIPTION
*
10600*
   SCREEN FIELD;;20
   SCREEN INPUT;;20;RETURN
   IF S$VALUE#"END" THEN EST.TYPE=S$VALUE
   GOSUB 60000
   S$DATA(21)<1>=TYPE.DESC
   SCREEN DISPLAY;;21
   RETURN
*
*---- CATEGORY & DESCRIPTION
*
10700*
   S$DATA(23)<1>=EST.CATG
   SCREEN FIELD;;23
   SCREEN INPUT;;23;RETURN
   IF S$VALUE="???" THEN
      FLD=23;FREF=1;XTYPE="JOB.CATEGORY";XFILE=JOB.CATEGORY;XFLD=1;GOSUB 540; GOSUB 560
      IF XCODE="" THEN GO 10700
   END
   IF S$VALUE="" THEN
      MAT JCATG.REC=""
   END ELSE
      MATREAD JCATG.REC FROM JOB.CATEGORY,CONO:S$VALUE ELSE
         ERRMSG="Invalid job category. Try again! "
         GOSUB 90000
         GO 10700
      END
   END
   EST.CATG=S$VALUE
   S$DATA(24)<1>=JCATG.DESC
   SCREEN DISPLAY;;24
   RETURN
*
*---- SALES CODE
*
11000*
   S$DATA(26)<1>=EST.SALES.CODE
   SCREEN FIELD;;26
   SCREEN INPUT;;26;RETURN
   IF S$VALUE="" THEN
      MAT SLC.REC=""
   END ELSE
      MATREAD SLC.REC FROM SALES.CODE,CONO:S$VALUE ELSE
         ERRMSG="Invalid sales code. Try again! "
         GOSUB 90000
         GO 11000
      END
   END
   EST.SALES.CODE=S$VALUE
   RETURN
*
*---- DATE ENTERED
*
11100*
   SCREEN FIELD;;19
   SCREEN INPUT;;19;RETURN
   EST.DATE.ENTERED=S$VALUE
   RETURN
*
*---- DATE REQUIRED
*
11200*
   SCREEN FIELD;;22
   SCREEN INPUT;;22;RETURN
   EST.DATE.REQUIRED=S$VALUE
   RETURN
*
*---- DUMMY
*
11300*
   RETURN
*
*---- PURGE TYPE
*
11400*
   IF STD.FLAG THEN
      EST.PURGE.TYPE="M"
      S$DATA(27)<1>="M"
      SCREEN DISPLAY;;27
   END ELSE
      SCREEN FIELD;;27
      SCREEN INPUT;;27;RETURN
      EST.PURGE.TYPE=S$VALUE
   END
   RETURN
*
*---- GET QUANTITIES
*
11600*
   MORE = 1
   LOOP
      IF NEW.REC AND QTY.CNT = 0 THEN
         OPTQ = 'A'
         GOTO 11605
      END
      IF ACTION = 'M' THEN
         SCREEN FIELD;;51
         SCREEN INPUT;;51
      END ELSE
         SCREEN FIELD;;52
         SCREEN INPUT;;52
      END
      IF S$VALUE="" OR S$VALUE="END" THEN RETURN
      OPTQ=S$VALUE
11605 *
      BEGIN CASE
         CASE OPTQ="A" AND QTY.CNT < 99
            QDONE=0
            FOR QTY.REF.NO=QTY.CNT+1 TO 99 UNTIL QDONE
               GOSUB 51000
               GOSUB 11610
               IF S$VALUE="END" OR S$VALUE = '' THEN
                  QDONE=1
                  DEL S$DATA(41)<S$SCR,QTY.REF.NO>
                  DEL EST.QTY<1,QTY.REF.NO>
               END ELSE
                  QTY.CNT=QTY.CNT+1
               END
            NEXT QTY.REF.NO
            QTY.REF.NO=QTY.CNT
            QTY.CURR.REF.NO=""
            GOSUB 51000
         CASE OPTQ="C" AND QTY.CNT > 0
            GOSUB 31000
            IF S$VALUE#"" AND S$VALUE#"END" THEN
               QTY.REF.NO=S$VALUE
               GOSUB 11610
            END
         CASE OPTQ="I" AND QTY.CNT > 0
            GOSUB 31000
            IF S$VALUE#"" AND S$VALUE#"END" THEN
               QTY.REF.NO=S$VALUE
               INS "" BEFORE S$DATA(41)<S$SCR,QTY.REF.NO>
               INS "" BEFORE EST.QTY<1,QTY.REF.NO>
               INS "" BEFORE EST.FINAL.PRICE<1,QTY.REF.NO>
*T24314 v
               PCNT=DCOUNT(EST.PROD.PQTY<1>,VM)
               FOR I=1 TO PCNT
                  MACRO INSVAL;EST.PROD.PQTY<1,I>;'!';QTY.REF.NO;""
                  MACRO INSVAL;EST.PROD.PCST<1,I>;'!';QTY.REF.NO;""
               NEXT I
*T24314 ^
*T26306 v
               IF EST.CASE.ENDLF.QTY<1,1> # '' THEN
                  INS "" BEFORE EST.CASE.ENDLF.QTY<1,1,QTY.REF.NO>
                  INS "" BEFORE EST.CASE.ENDLF.PRICE<1,1,QTY.REF.NO>
                  EST.CASE.ENDLF.PRICE<1,1,QTY.REF.NO> = EST.CASE.ENDLF.PRICE<1,1,QTY.REF.NO+1>
               END
               IF EST.CASE.BOARD.PRICE<1,1> # '' THEN
                  INS "" BEFORE EST.CASE.SIDE.BD.QTY<1,1,QTY.REF.NO>
                  INS "" BEFORE EST.CASE.BOARD.PRICE<1,1,QTY.REF.NO>
                  EST.CASE.BOARD.PRICE<1,1,QTY.REF.NO> = EST.CASE.BOARD.PRICE<1,1,QTY.REF.NO+1>
               END
               IF EST.CASE.SIDE.CL.QTY<1,1> # '' THEN
                  INS "" BEFORE EST.CASE.SIDE.CL.QTY<1,1,QTY.REF.NO>
                  INS "" BEFORE EST.CASE.SIDE.CL.PRICE<1,1,QTY.REF.NO>
                  EST.CASE.SIDE.CL.PRICE<1,1,QTY.REF.NO> = EST.CASE.SIDE.CL.PRICE<1,1,QTY.REF.NO+1>
               END
               IF EST.CASE.SPINE.CL.QTY<1,1> # '' THEN
                  INS "" BEFORE EST.CASE.SPINE.CL.QTY<1,1,QTY.REF.NO>
                  INS "" BEFORE EST.CASE.SPINE.CL.PRICE<1,1,QTY.REF.NO>
                  EST.CASE.SPINE.CL.PRICE<1,1,QTY.REF.NO> = EST.CASE.SPINE.CL.PRICE<1,1,QTY.REF.NO+1>
               END
*T26306 ^
               QTY.CNT=QTY.CNT+1
               QTY.CURR.REF.NO=""
               GOSUB 51000
               GOSUB 11610
               IF S$VALUE="END" OR S$VALUE = '' THEN
                  DEL S$DATA(41)<S$SCR,QTY.REF.NO>
                  DEL EST.QTY<1,QTY.REF.NO>
                  DEL EST.FINAL.PRICE<1,QTY.REF.NO>
                  QTY.CNT=QTY.CNT-1
               END
               QTY.CURR.REF.NO=""
               GOSUB 51000
            END
         CASE OPTQ="D" AND QTY.CNT > 1
            PREV.QTY = EST.QTY
            GOSUB 31000
            IF S$VALUE#"" AND S$VALUE#"END" THEN
               QTY.REF.NO=S$VALUE
               DEL S$DATA(41)<S$SCR,QTY.REF.NO>
               DEL EST.QTY<1,QTY.REF.NO>
               DEL EST.FINAL.PRICE<1,QTY.REF.NO>
*T24314 v
               PCNT=DCOUNT(EST.PROD.PQTY<1>,VM)
               FOR I=1 TO PCNT
                  MACRO DELVAL;EST.PROD.PQTY<1,I>;'!';QTY.REF.NO
                  MACRO DELVAL;EST.PROD.PCST<1,I>;'!';QTY.REF.NO
               NEXT I
*T24314 ^
*T26306 v
               IF EST.CASE.ENDLF.QTY<1,1> # '' THEN
                  DEL EST.CASE.ENDLF.QTY<1,1,QTY.REF.NO>
                  DEL EST.CASE.ENDLF.PRICE<1,1,QTY.REF.NO>
               END
               IF EST.CASE.BOARD.PRICE<1,1> # '' THEN
                  DEL EST.CASE.SIDE.BD.QTY<1,1,QTY.REF.NO>
                  DEL EST.CASE.BOARD.PRICE<1,1,QTY.REF.NO>
               END
               IF EST.CASE.SIDE.CL.QTY<1,1> # '' THEN
                  DEL EST.CASE.SIDE.CL.QTY<1,1,QTY.REF.NO>
                  DEL EST.CASE.SIDE.CL.PRICE<1,1,QTY.REF.NO>
               END
               IF EST.CASE.SPINE.CL.QTY<1,1> # '' THEN
                  DEL EST.CASE.SPINE.CL.QTY<1,1,QTY.REF.NO>
                  DEL EST.CASE.SPINE.CL.PRICE<1,1,QTY.REF.NO>
               END
*T26306 ^
               QTY.CNT=QTY.CNT-1
               IF QTY.REF.NO > QTY.CNT THEN QTY.REF.NO=QTY.REF.NO-1
               QTY.CURR.REF.NO=""
               GOSUB 51000
               GOSUB 11630
            END
         CASE OPTQ="R"
            PREV.QTY=EST.QTY
11650*
            SCREEN FIELD;;13
            SCREEN INPUT;;13;GOTO 11659
            IF S$VALUE = '' THEN
               QTY.START.RANGE = 10
            END ELSE
               QTY.START.RANGE = S$VALUE
            END
*T26554 v
            IF QTY.START.RANGE + 0 = 0 THEN
               ERRMSG = "** BEGIN QTY MUST BE LARGER THAN ZERO **"
               GOSUB 90000
               GOTO 11650
            END
*T26554 ^
            SCREEN FIELD;;25
            SCREEN INPUT;;25;GOTO 11659
            IF S$VALUE = '' THEN
               QTY.BREAK = 10
            END ELSE
               QTY.BREAK = S$VALUE
            END
11651*
            SCREEN FIELD;;16
            S$O.R="O"
            S$DEFAULT = (QTY.BREAK * 98) + QTY.START.RANGE
            SCREEN INPUT;;16;GOTO 11659
            IF S$VALUE = '' THEN
               QTY.END.RANGE = 100
            END ELSE
               QTY.END.RANGE = S$VALUE
            END
*T26554 v
            IF QTY.END.RANGE LE QTY.START.RANGE THEN
               ERRMSG = "** END QTY MUST BE LARGER THAN START QTY **"
               GOSUB 90000
               GOTO 11651
            END
*T26554 ^
            RDONE = 0
            TEMP.EST.QTY = ''
            TEMP.EST.QTY<1,1> = QTY.START.RANGE
            FOR QP = 2 TO 101 UNTIL RDONE
               IF QP > 100 THEN
                  ERRMSG = 'TOTAL QUANTITIES EXCEEDS 99, PLEASE RE-ENTER'
                  GOSUB 90000
                  RDONE = 1
                  GOTO 11650
               END
               IF (TEMP.EST.QTY<1,QP-1> + QTY.BREAK) > QTY.END.RANGE THEN
                  RDONE = 1
               END ELSE
                  TEMP.EST.QTY<1,QP> = TEMP.EST.QTY<1,QP-1> + QTY.BREAK
               END
            NEXT QP
            EST.QTY = TEMP.EST.QTY
            S$DATA(41)<1> = EST.QTY
            QTY.CNT = DCOUNT(EST.QTY,VM)
            QTY.CURR.REF.NO = ''
            QTY.REF.NO = 1
            GOSUB 51000
            GOSUB 11630
         CASE OPTQ="S"
            QTY.REF.NO=QTY.CURR.REF.NO+QTY.LINE.COUNT
            IF QTY.REF.NO > QTY.CNT THEN QTY.REF.NO=1
            GOSUB 51000
      * T25978 v
         CASE OPTQ = 'SR'
            QTY.REF.NO = QTY.CURR.REF.NO - QTY.LINE.COUNT
            IF QTY.REF.NO < 1 THEN QTY.REF.NO = 1
            GOSUB 51000
         CASE OPTQ = 'ST'
            QTY.REF.NO = 1
            GOSUB 51000
         CASE OPTQ = 'SB'
            QTY.REF.NO = QTY.CNT
            GOSUB 51000
      * T25978 ^
         CASE OPTQ="" OR OPTQ="END" OR OPTQ="E"
            MORE=0
      END CASE
11659 *
   WHILE MORE DO REPEAT
   RETURN
*
***
11610*
   PREV.QTY=EST.QTY
   QDONE=0
   S$VAL=QTY.REF.NO
   SCREEN DISPLAY;;31
11620*
   S$VAL=QTY.REF.NO
   SCREEN FIELD;;41
   IF QTY.REF.NO=1 THEN
      S$MINV=1  ;* T21618
   END ELSE
      IF QTY.REF.NO > 1 THEN S$O.R="O"
      S$MINV=EST.QTY<1,QTY.REF.NO-1>+1  ;* T21618
   END
   IF OPTQ # 'A' THEN
      IF QTY.REF.NO # QTY.CNT THEN
         S$MAXV = EST.QTY<1,QTY.REF.NO+1>-1  ;*T21618
      END
   END
   SCREEN INPUT;;41
   IF S$VALUE="END" THEN GO 11630
   IF S$VALUE="" THEN
      IF EST.QTY<1,QTY.REF.NO>="" THEN
         QDONE=1
      END ELSE
         DEL EST.QTY<1,QTY.REF.NO>
         DEL EST.FINAL.PRICE<1,QTY.REF.NO>
         GOSUB 51000
         OCNT=COUNT(EST.DEPT.OSP,VM)+(EST.DEPT.OSP#"")
         FOR OPTR=1 TO OCNT
            SPTR = DCOUNT(EST.DEPT.OSP.ID<1,OPTR>,SM)
            FOR CPTR = 1 TO SPTR
               MACRO DELVAL;EST.DEPT.OSP.QTY<1,OPTR,CPTR>;"!";QTY.REF.NO
               MACRO DELVAL;EST.DEPT.OSP.PRICE<1,OPTR,CPTR>;"!";QTY.REF.NO
            NEXT CPTR
         NEXT OPTR
         IF EST.QTY<1,QTY.REF.NO>="" THEN
            QDONE=1
         END ELSE
            GO 11610
         END
      END
   END ELSE
      EST.QTY<1,QTY.REF.NO>=S$VALUE
   END
11630*
   IF EST.QTY#PREV.QTY THEN
      CALL EST.CALC.STK(CONO,"")
      IF NOT(NEW.REC) THEN EST.RECALC.FLAG=1
   END
   IF EST.BASE.QTY#"" AND EST.QTY<1,1>#EST.BASE.QTY THEN
      GOSUB 24000
   END
   RETURN
*T27716 v
11800 *
   SCREEN FIELD;;57
   SCREEN INPUT;;57;RETURN
   EST.PP.INCLUDE = S$VALUE
   EST.INT.EXT = 'E'
   RETURN
*T27716 ^
*
*---- INTERNAL COMMENTS
*
12100*
   S$VAL=REF.NO
   SCREEN DISPLAY;;28
12110*
   S$VAL=REF.NO
   SCREEN FIELD;;30
   SCREEN INPUT;;30;GO 12195
   BEGIN CASE
      CASE S$VALUE=""
         TEMP.COMMENT.TYPE=S$VALUE
      CASE NUM(S$VALUE) AND S$VALUE >= "1" AND S$VALUE <= "16"
         TEMP.COMMENT.TYPE=S$VALUE
      CASE S$VALUE="I"
         TEMP.COMMENT.TYPE=S$VALUE
      CASE 1
         ERRMSG="Invalid comment type. Try again! "
         GOSUB 90000
         GO 12110
   END CASE
12120*
   S$VAL=REF.NO
   SCREEN FIELD;;29
   SCREEN INPUT;;29;RETURN
   BEGIN CASE
      CASE S$VALUE="" AND REF.NO > COUNT(EST.COMMENTS,VM)+(EST.COMMENTS#"")
         S$VALUE="END";GO 12195
      CASE 1
         TEMP.COMMENT=S$VALUE
   END CASE
12190*
   EST.COMMENT.TYPE<1,REF.NO>=TEMP.COMMENT.TYPE
   EST.COMMENTS<1,REF.NO>=TEMP.COMMENT
   RETURN
*
*---- BACK-OUT ENTRY
*
12195*
   S$DATA(30)<S$SCR,REF.NO>=EST.COMMENT.TYPE<1,REF.NO>
   S$DATA(29)<S$SCR,REF.NO>=EST.COMMENTS<1,REF.NO>
   CURR.REF.NO=""
   GOSUB 50000
   RETURN
*
*---- DUMMY
*
19990*
   RETURN
*
*---- OPTIONS FOR COMMENTS
*
20000*
   MORE=1
   LOOP
      S$DATA(32)<1>=""
      IF ACTION="M" THEN
         SCREEN FIELD;;32
         SCREEN INPUT;;32
      END ELSE
         SCREEN FIELD;;47
         SCREEN INPUT;;47
      END
      OPT=S$VALUE
      BEGIN CASE
         CASE OPT="A" AND CNT < 999
            DONE=0
            FOR REF.NO=CNT+1 TO 999 UNTIL DONE
               GOSUB 50000
               GOSUB 12100
               IF S$VALUE="END" THEN
                  DONE=1
                  DEL S$DATA(29)<S$SCR,REF.NO>
                  DEL S$DATA(30)<S$SCR,REF.NO>
                  DEL EST.COMMENT.TYPE<1,REF.NO>
                  DEL EST.COMMENTS<1,REF.NO>
               END ELSE
                  CNT=CNT+1
               END
            NEXT REF.NO
            REF.NO=CNT
            CURR.REF.NO=""
            GOSUB 50000
         CASE OPT="C" AND CNT > 0
            GOSUB 30000
            IF S$VALUE#"" AND S$VALUE#"END" THEN
               REF.NO=S$VALUE
               GOSUB 12100
            END
         CASE OPT="I" AND CNT > 0
            GOSUB 30000
            IF S$VALUE#"" AND S$VALUE#"END" THEN
               REF.NO=S$VALUE
               INS "" BEFORE S$DATA(30)<S$SCR,REF.NO>
               INS "" BEFORE S$DATA(29)<S$SCR,REF.NO>
               INS "" BEFORE EST.COMMENT.TYPE<1,REF.NO>
               INS "" BEFORE EST.COMMENTS<1,REF.NO>
               CNT=CNT+1
               CURR.REF.NO=""
               GOSUB 50000
               GOSUB 12100
               IF S$VALUE="END" THEN
                  DEL S$DATA(30)<S$SCR,REF.NO>
                  DEL S$DATA(29)<S$SCR,REF.NO>
                  DEL EST.COMMENT.TYPE<1,REF.NO>
                  DEL EST.COMMENTS<1,REF.NO>
                  CNT=CNT-1
               END
               CURR.REF.NO=""
               GOSUB 50000
            END
         CASE OPT="D" AND CNT > 0
            GOSUB 30000
            IF S$VALUE#"" AND S$VALUE#"END" THEN
               REF.NO=S$VALUE
               DEL S$DATA(29)<S$SCR,REF.NO>
               DEL S$DATA(30)<S$SCR,REF.NO>
               DEL EST.COMMENT.TYPE<1,REF.NO>
               DEL EST.COMMENTS<1,REF.NO>
               CNT=CNT-1
               IF REF.NO > CNT THEN REF.NO=REF.NO-1
               CURR.REF.NO=""
               GOSUB 50000
            END
         CASE OPT="S"
            REF.NO=CURR.REF.NO+LINE.COUNT
            IF REF.NO > CNT THEN REF.NO=1
            GOSUB 50000
      * T25978 v
         CASE OPT = 'SR'
            REF.NO = CURR.REF.NO - LINE.COUNT
            IF REF.NO < 1 THEN REF.NO = 1
            GOSUB 50000
         CASE OPT = 'ST'
            REF.NO = 1
            GOSUB 50000
         CASE OPT = 'SB'
            REF.NO = CNT
            GOSUB 50000
      * T25978 ^
         CASE OPT="" OR OPT="END" OR OPT="E"
            MORE=0
      END CASE
   WHILE MORE DO REPEAT
   RETURN
*
*---- RE-CALCULATE ESTIMATE QUANTITIES
*
24000*
   EST.RECALC.FLAG=""
   NEW.BASE.QTY=EST.QTY<1,1>
   SAVE.DEPT.COMP=EST.DEPT.COMP
   EST.DEPT.COMP=""
   EST.DEPT.COMP.HRS=""
   EST.DEPT.COMP.DCOST=""
   EST.DEPT.COMP.COST=""
   EST.DEPT.COMP.SALE=""
   EST.DEPT.COMP.TSALE=""
   DC=COUNT(SAVE.DEPT.COMP,VM)+(SAVE.DEPT.COMP#"")
   FOR DP=1 TO DC
      ESTD.ID=SAVE.DEPT.COMP<1,DP>
      EQTY=FIELD(ESTD.ID,"!",3)
      IF EQTY=EST.BASE.QTY THEN
         DPTR=FIELD(ESTD.ID,"!",1)
         CPTR=FIELD(ESTD.ID,"!",2)
         CALL EST.QTY.CALC (CONO,"E",EST.KEY,DPTR,CPTR,NEW.BASE.QTY)
      END
   NEXT DP
   EST.BASE.QTY=NEW.BASE.QTY
   FOR DP=1 TO DC
      ESTD.ID=SAVE.DEPT.COMP<1,DP>
      EQTY=FIELD(ESTD.ID,"!",3)
      LOCATE EQTY IN EST.QTY<1>,1 SETTING FOUND ELSE FOUND=0
      BEGIN CASE
         CASE EQTY=EST.BASE.QTY
            NULL
         CASE FOUND  > 0
            DPTR=FIELD(ESTD.ID,"!",1)
            CPTR=FIELD(ESTD.ID,"!",2)
            CALL EST.QTY.CALC (CONO,"E",EST.KEY,DPTR,CPTR,EQTY)
         CASE FOUND=0
            DELETE ESTIMATE.DEPT,CONO:EST.KEY:"!":ESTD.ID
      END CASE
   NEXT DP
   RETURN
*
*---- DELETE UNUSED QUANTITIES
*
25000*
   DC=COUNT(EST.DEPT.COMP,VM)+(EST.DEPT.COMP#"")
   FOR DP=DC TO 1 STEP -1
      ESTD.ID=EST.DEPT.COMP<1,DP>
      QTY=FIELD(ESTD.ID,"!",3)
      LOCATE QTY IN EST.QTY<1>,1 SETTING P ELSE
         DELETE ESTIMATE.DEPT,CONO:EST.KEY:"!":ESTD.ID
         DEL EST.DEPT.COMP<1,DP>
         DEL EST.DEPT.COMP.HRS<1,DP>
         DEL EST.DEPT.COMP.DCOST<1,DP>
         DEL EST.DEPT.COMP.COST<1,DP>
         DEL EST.DEPT.COMP.SALE<1,DP>
         DEL EST.DEPT.COMP.TSALE<1,DP>
      END
   NEXT DP
*
*---- GENERATE ADDITIONAL QUANTITY DATA
*
   CALL EST.QTY.GEN (CONO,"A",EST.KEY,"ALL")
*
*---- CALCULATE COST PER ADDITIONAL THOUSAND
*
   RETURN
*
25500 *
*
   CALL EST.QTY.GEN (CONO,"A",EST.KEY,"ALL")
   EST.OM.PCT = '000000'
   EST.FINAL.PRICE = ''
   EST.PRICE.THOU = ''
   EST.COST.THOU = ''
   EST.PRT.PRICE.THOU = ''
   EST.OM.PRICE.M = ''
   EST.PRT.PRICE.UOM = ''
   EST.PRICE.UOM = ''
   TOTAL.TCOST = ''
   TOTAL.VCOST = ''
   TOTAL.FCOST = ''
   TOTAL.TSALE = ''
   TOTAL.VSALE = ''
   TOTAL.FSALE = ''
   QC = DCOUNT(EST.QTY,VM)
   DC=COUNT(EST.DEPT.COMP,VM)+(EST.DEPT.COMP#"")
   FOR DP = 1 TO DC
      ESTD.ID=EST.DEPT.COMP<1,DP>
      EQTY=FIELD(ESTD.ID,"!",3)
      LOCATE EQTY IN EST.QTY<1>,1 SETTING EP THEN
         TOTAL.TCOST<1,EP>=TOTAL.TCOST<1,EP>+EST.DEPT.COMP.COST<1,DP>
         TOTAL.VCOST<1,EP>=TOTAL.VCOST<1,EP>+EST.DEPT.COMP.VCOST<1,DP>
         TOTAL.FCOST<1,EP>=TOTAL.TCOST<1,EP>-TOTAL.VCOST<1,EP>
         TOTAL.TSALE<1,EP>=TOTAL.TSALE<1,EP>+EST.DEPT.COMP.TSALE<1,DP>
         TOTAL.VSALE<1,EP>=TOTAL.VSALE<1,EP>+EST.DEPT.COMP.VSALE<1,DP>
         TOTAL.FSALE<1,EP>=TOTAL.TSALE<1,EP>-TOTAL.VSALE<1,EP>
      END
   NEXT DP
   EST.PRT.PRICE.THOU = 'Y'
   EST.PRT.PRICE.UOM = 'M'
   ECNT=COUNT(EST.QTY,VM)+1
   FOR EP = 1 TO ECNT
      EST.OM.PCT<1,EP> = '000000'
      EST.FINAL.PRICE<1,EP> = TOTAL.TSALE<1,EP>
      EST.PRICE.THOU<1,EP>=INT(TOTAL.VSALE<1,EP>/(EST.QTY<1,EP>/1000)+0.5)
      EST.COST.THOU<1,EP>=INT(TOTAL.VCOST<1,EP>/(EST.QTY<1,EP>/1000)+0.5)
      EST.OM.PRICE.M<1,EP> = INT(EST.FINAL.PRICE<1,EP> / EST.QTY<1,EP> * 1000 + .5)
      EST.PRICE.UOM<1,EP> = EST.OM.PRICE.M<1,EP>
   NEXT EP
   RETURN
*
*---- CALCULATE OTHER MARKUP PERCENT BASED ON FINAL PRICE
*
26000 *
   CALL EST.QTY.GEN (CONO,"A",EST.KEY,"ALL")
   EST.OM.PCT = ''
   EST.PRICE.THOU = ''
   EST.COST.THOU = ''
   EST.OM.PRICE.M = ''
   TOTAL.TCOST = ''
   TOTAL.VCOST = ''
   TOTAL.FCOST = ''
   TOTAL.TSALE = ''
   TOTAL.VSALE = ''
   TOTAL.FSALE = ''
   QC = DCOUNT(EST.QTY,VM)
   DC=COUNT(EST.DEPT.COMP,VM)+(EST.DEPT.COMP#"")
   FOR DP = 1 TO DC
      ESTD.ID=EST.DEPT.COMP<1,DP>
      EQTY=FIELD(ESTD.ID,"!",3)
      LOCATE EQTY IN EST.QTY<1>,1 SETTING EP THEN
         TOTAL.TCOST<1,EP>=TOTAL.TCOST<1,EP>+EST.DEPT.COMP.COST<1,DP>
         TOTAL.VCOST<1,EP>=TOTAL.VCOST<1,EP>+EST.DEPT.COMP.VCOST<1,DP>
         TOTAL.FCOST<1,EP>=TOTAL.TCOST<1,EP>-TOTAL.VCOST<1,EP>
         TOTAL.TSALE<1,EP>=TOTAL.TSALE<1,EP>+EST.DEPT.COMP.TSALE<1,DP>
         TOTAL.VSALE<1,EP>=TOTAL.VSALE<1,EP>+EST.DEPT.COMP.VSALE<1,DP>
         TOTAL.FSALE<1,EP>=TOTAL.TSALE<1,EP>-TOTAL.VSALE<1,EP>
      END
   NEXT DP
   ECNT=COUNT(EST.QTY,VM)+1
   FOR EP = 1 TO ECNT
* Need to setup final price if new qty added.
      IF (EST.FINAL.PRICE<1,EP> + 0 = 0) OR (EST.OM.ENTERED # 'Y') THEN
         EST.OM.PCT<1,EP> = '000000'
         EST.FINAL.PRICE<1,EP> = TOTAL.TSALE<1,EP>
         EST.PRICE.THOU<1,EP>=INT(TOTAL.VSALE<1,EP>/(EST.QTY<1,EP>/1000)+0.5)
         EST.COST.THOU<1,EP>=INT(TOTAL.VCOST<1,EP>/(EST.QTY<1,EP>/1000)+0.5)
         EST.OM.PRICE.M<1,EP> = INT(EST.FINAL.PRICE<1,EP> / EST.QTY<1,EP> * 1000 + .5)
         EST.PRICE.UOM<1,EP> = ''
         GOSUB 26500
      END ELSE
         IF TOTAL.TSALE<1,EP> = "" OR TOTAL.TSALE<1,EP> = 0 THEN
            TOTTSALE = 1   ;* FIX DIVDE BY 0 ERRORS
         END ELSE
            TOTTSALE = TOTAL.TSALE<1,EP>
         END
         EST.OM.PCT<1,EP> = INT(((EST.FINAL.PRICE<1,EP> - TOTAL.TSALE<1,EP>) / TOTTSALE) * 1000000 + .5)
         PRICE.THOU.MKUP = TOTAL.VSALE<1,EP> + (INT(OCONV(TOTAL.VSALE<1,EP>,'MD2') * OCONV(EST.OM.PCT<1,EP>,'MD4') + .005 / 100))
         EST.PRICE.THOU<1,EP>=INT(PRICE.THOU.MKUP/(EST.QTY<1,EP>/1000)+0.5)
         EST.COST.THOU<1,EP>=INT(TOTAL.VCOST<1,EP>/(EST.QTY<1,EP>/1000)+0.5)
         EST.OM.PRICE.M<1,EP> = INT(EST.FINAL.PRICE<1,EP> / EST.QTY<1,EP> * 1000 + .5)
         EST.PRICE.UOM<1,EP> = ''
         GOSUB 26500
      END
   NEXT EP
   RETURN
*
*---- Calculate Price per UOM
*
26500 *
   BEGIN CASE
      CASE EST.PRT.PRICE.UOM = 'EA'
         EST.PRICE.UOM<1,EP> = INT(EST.FINAL.PRICE<1,EP> / EST.QTY<1,EP> * 100 + .5)
      CASE EST.PRT.PRICE.UOM = 'MSF'
         WIDTH = EST.PROD.TS.WIDTH<1,1,1>
         XXLENGTH = EST.PROD.TS.LENGTH<1,1,1>
         PGS=EST.PROD.PG.CNT<1,1,1>
         SQ.FT=OCONV(WIDTH,'MD4') * OCONV(XXLENGTH,'MD4') / 144 * PGS
         EST.PRICE.UOM<1,EP> = INT(OCONV(EST.FINAL.PRICE<1,EP>,'MD2') / (EST.QTY<1,EP> * SQ.FT / 1000) * 100 + .5)
      CASE EST.PRT.PRICE.UOM = 'CWT'
         PROD.QTY = EST.QTY<1,EP>
         TOT.WGT = 0
         FOR C = 1 TO EST.COMPONENT.CNT
            IF EST.PROD.OS.TYPE<1,C> = "" THEN GOTO 26590
            IF EST.PROD.OS.TYPE<1,C> # "S" THEN
               MATREAD EQUIPMENT.REC FROM EQUIPMENT, CONO:EST.PROD.PRESS.ID<1,C> ELSE
                  ERRMSG = "Invalid press ID - ":EST.PROD.PRESS.ID<1,C>
                  GOSUB 90000
                  GOTO 26590
               END
            END
            WEB.CNT = EST.PROD.WEB.CNT<1,C>+0
            IF WEB.CNT = 0 THEN WEB.CNT = 1
            FOR MPTR = 1 TO WEB.CNT
               MATREAD ESTPG.REC FROM ESTIMATE.PAPER.GROUP, CONO:EST.PROD.OS.USAGE<1,C,MPTR> ELSE
                  ERRMSG = "Invalid paper group"
                  GOSUB 90000
                  GOTO 26580
               END
               BW = EST.PROD.BASIS.WT<1,C,MPTR>
               BSW = ESTPG.WIDTH/10000
               BSL = ESTPG.LENGTH/10000
               PSW = EST.PROD.PS.WIDTH<1,C,MPTR>/10000
               IF EST.PROD.OS.TYPE<1,C> = "S" THEN
                  MAT EQUIPMENT.REC = ""
                  PSL = EST.PROD.PS.LENGTH<1,C,MPTR>/10000
               END ELSE
                  PSL = EQP.PRESS.CUTOFF.LEN/10000
               END
               M.WEIGHT = 2 * BW * (PSW * PSL) / (BSW * BSL)
               M.WEIGHT = INT(M.WEIGHT * 100 + 0.5) / 100
               NUMBER.UP = EST.PROD.NO.UP<1,C,1>+0
               IF NUMBER.UP = 0 THEN NUMBER.UP = 1
               FORMS = EST.PROD.FORMS<1,C,1>+0
               IF FORMS = 0 THEN FORMS = 1
               TOT.SHT = INT(PROD.QTY / NUMBER.UP * FORMS + 0.99)
               TOT.WGT = TOT.WGT + (TOT.SHT / 1000 * M.WEIGHT)
26580       NEXT MPTR
26590    NEXT C
         EST.PRICE.UOM<1,EP> = INT(EST.FINAL.PRICE<1,EP> / (TOT.WGT / 100))
      CASE EST.PRT.PRICE.UOM = 'M'
         EST.PRICE.UOM<1,EP> = EST.OM.PRICE.M<1,EP>
   END CASE
   RETURN
*
*---- GET LINE REFERENCE NUMBER
*
30000*
   S$DATA(37)<1>=""
   SCREEN FIELD;;37
   S$MINV=CURR.REF.NO
   S$MAXV=S$MINV+LINE.COUNT-1
   IF S$MAXV > CNT THEN S$MAXV=CNT
   SCREEN INPUT;;37
   RETURN
*
*---- GET LINE REFERENCE NUMBER QUANTITY
*
31000*
   S$DATA(37)<1>=""
   SCREEN FIELD;;37
   S$MINV=QTY.CURR.REF.NO
   S$MAXV=S$MINV+QTY.LINE.COUNT-1
   IF S$MAXV > QTY.CNT THEN S$MAXV=QTY.CNT
   SCREEN INPUT;;37
   RETURN
*
*---- DISPLAY MULTI-QUANTITIES
*
40000*
   S$DATA(41)<1>=EST.QTY
   S$VAL=1
   S$CNT=4
   SCREEN MULTI;;C;41
   RETURN
*
*---- SCROLL INTERNAL COMMENTS
*
50000*
   START.REF.NO=1+INT((REF.NO-1)/LINE.COUNT)*LINE.COUNT
   IF START.REF.NO=CURR.REF.NO THEN RETURN
   CURR.REF.NO=START.REF.NO
   S$VAL=START.REF.NO
   S$CNT=COUNT(S$DATA(29)<1>,VM)+(S$DATA(29)<1>#"")
   SCREEN MULTI;;C;28;30;29
   RETURN
*
*---- SCROLL QUANTITIES
*
51000*
   QTY.START.REF.NO=1+INT((QTY.REF.NO-1)/QTY.LINE.COUNT)*QTY.LINE.COUNT
   IF QTY.START.REF.NO=QTY.CURR.REF.NO THEN RETURN
   QTY.CURR.REF.NO=QTY.START.REF.NO
   S$VAL=QTY.START.REF.NO
   S$CNT=COUNT(S$DATA(41)<1>,VM)+(S$DATA(41)<1>#"")
   SCREEN MULTI;;C;31;41
   RETURN
*  
*---- GET EST.TYPE DESCRIPTION
*
60000*
   BEGIN CASE
      CASE EST.TYPE="R"
         TYPE.DESC="REGULAR"
      CASE EST.TYPE="C"
         TYPE.DESC="CUSTOMER CHANGE ORDER"
      CASE EST.TYPE="S"
         TYPE.DESC="SPOILAGE"
      CASE EST.TYPE="N"
         TYPE.DESC="NON-CHARGEABLE"
   END CASE
   RETURN
*
*---- LOAD SCREEN VALUES
*
80000*
   GOSUB 60000
   READ DESC FROM ESTIMATOR,CONO:EST.ESTIMATOR ELSE DESC=UNKNOWN
   IF EST.CUST="P" THEN
      MAT CUST.REC=""
   END ELSE
      MATREAD CUST.REC FROM CUSTOMER, CONO:EST.CUST ELSE
         MAT CUST.REC=""
      END
   END
   MATREAD SALESMAN.REC FROM SALESMAN,CONO:EST.SALESMAN ELSE
      MAT SALESMAN.REC=""
   END
   MATREAD DIV.REC FROM DIVISION,CONO:FIELD(EST.DIV,"-",1) ELSE DIV.DESC=UNKNOWN
   IF EST.CATG="" THEN
      MAT JCATG.REC=""
   END ELSE
      MATREAD JCATG.REC FROM JOB.CATEGORY,CONO:EST.CATG ELSE JCATG.DESC=UNKNOWN
   END
   S$DATA(1)<1>=EST.KEY
   S$DATA(2)<1>=EST.STATUS<1,1>
   S$DATA(3)<1>=EST.ESTIMATOR
   S$DATA(4)<1>=DESC
   S$DATA(5)<1>=EST.JOB
   S$DATA(53)<1>=EST.ORDER
   S$DATA(6)<1>=EST.CUST
   S$DATA(7)<1>=EST.CUST.NAME
   S$DATA(8)<1>=EST.CUST.ADDR1
   S$DATA(9)<1>=EST.MASTER
   S$DATA(10)<1>=EST.CUST.ADDR2
   S$DATA(12)<1>=EST.CUST.ADDR3
   S$DATA(11)<1>=EST.CUST.ATTN
   S$DATA(14)<1>=EST.SALESMAN
   S$DATA(15)<1>=SALS.NAME
   S$DATA(17)<1>=EST.DIV
   S$DATA(18)<1>=DIV.DESC
   S$DATA(19)<1>=EST.DATE.ENTERED
   S$DATA(20)<1>=EST.TYPE
   S$DATA(21)<1>=TYPE.DESC
   S$DATA(22)<1>=EST.DATE.REQUIRED
   S$DATA(23)<1>=EST.CATG
   S$DATA(24)<1>=JCATG.DESC
   S$DATA(26)<1>=EST.SALES.CODE
   S$DATA(27)<1>=EST.PURGE.TYPE
   S$DATA(57)<1>=EST.PP.INCLUDE ; * T27716
   S$DATA(29)<1>=EST.COMMENTS
   S$DATA(30)<1>=EST.COMMENT.TYPE
   S$DATA(41)<1>=EST.QTY
   S$DATA(45)<1>=EST.CUST.ADDR4
80100*
   SCREEN DISPLAY;;ALL
   RETURN
*
*---- ERROR ROUTINE
*
90000 ERR.TYPE=1;CALL SI_SYSCOM(MAT SYSCOM.REC);RETURN
*
*---- END OF PROGRAM
*
99999*
   SCREEN CLOSE
END
