*COPY>CPYLIB>COM1
*COPY>JCS.CPYLIB>TMCOM
*******************************************************************
* REVISION    - [08.0]
* COPYRIGHT   - 1982 by C.B.A    (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - JCSBP
* PROGRAM     - TIME.MATL.MAINT
* AUTHOR      - NICK AMENDOLA, COMPUTER BUSINESS ASSOCIATES
* DATE        - 01/04/87
* DESCRIPTION - This program maintains employee time-material usage 
* MODS        - SFC, FEB 1990, EXPANDED LINE ENTRY FOR EPS COMPATIBILITY.
* DATE MOD    - 1/24/94 SFC TO ACCOMMODATE BARCODED INVENTORY REQUIRED 
*               FIELDS
*             - 2/17/94 DEG ROUNDING OF IN, LUNCH, AND OUT TIMES
*T21523 julie 01/29/1997 * ADD ERROR MESSAGE FOR ROLL/SKID NOT RECEIVED
*T22074 lanny 07/14/1997 * Oper Matl Reqd may be null, Y or N.
*T22485 stefanie 02/10/1998 * Allow entry of time & mat'l for dates out
*                             of company file.
*T22689 renee 03/27/1998 * Make factor codes other than 01, 02, and 03
*                          do what 01 does.
*T23274 gat 09/18/1998 * FIX PLACE OF QTY PROMPT
*T23278 markt 09/30/98 * Check for divisional security
*T25688 alex 03/22/2001 * Allow calculation of elapse time for lunch
*                         entry. HNP400 calculates lunches.
*T26097 lanny 08/17/2001 * If Operation is chg'd and has Add'l Prompts,
*                          the orig prompt data is not cleared and
*                          defaults for new prompts may be of diff data
*                          types.
*T26207 lanny 10/03/2001 * Do not allow more than 24 hours in one day.
*T26334 epitka 12/18/2001 * REV12
*T26415 lross 01/31/2002 * Do not include lunch in DTM.REG.TIME.
*T25978 adelgado 02/14/2002 * Add the use of prompts (S,SR,SB,ST).
*T26126 adelgado 02/28/2002 * Implement the LOCKED clause for READU.
*T26661 cmykleb 06/12/2002 * If date field (#1) is changed in GUI an
*                            error occurs.
*******************************************************************
*-- FILE COPY STATEMENTS
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>DIVISION
*COPY>PMC.CPYLIB>DEPARTMENT
*COPY>PMC.CPYLIB>COST.CNTR
*COPY>PMC.CPYLIB>CUSTOMER
*COPY>PMC.CPYLIB>EMPLOYEE
*COPY>JCS.CPYLIB>OPERATION
*COPY>JCS.CPYLIB>FACTOR
*COPY>JCS.CPYLIB>JOB
*COPY>JCS.CPYLIB>DAILY.TIME.MATL
*COPY>JCS.CPYLIB>JOB.CUTOFF.NO
*COPY>JCS.CPYLIB>JOB.STAT.CODE
*COPY>JCS.CPYLIB>JOB.TRANS
*COPY>JCS.CPYLIB>SF.PROMPT
*COPY>PRS.CPYLIB>WORK.SHIFT
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>GEN.XREF
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
*-- SYSTEM ERROR MSG
SYS.TYPE=1
CALL SYSCOM(MAT SYSCOM.REC)
*-- DEFINE DIMENSIONED VARIABLES
DIM TEMP.REC(35)
EQU TYPE        TO TEMP.REC(1)
EQU JOB.NO      TO TEMP.REC(2)
EQU OSJ.FLAG    TO TEMP.REC(3)
EQU JINIT       TO TEMP.REC(4)
EQU CCTR        TO TEMP.REC(5)
EQU OPER        TO TEMP.REC(6)
EQU TCODE       TO TEMP.REC(7)
EQU JTYPE       TO TEMP.REC(8)
EQU SPOIL.CODE  TO TEMP.REC(9)
EQU STRT        TO TEMP.REC(10)
EQU STPT        TO TEMP.REC(11)
EQU IMP         TO TEMP.REC(12)
EQU PROD        TO TEMP.REC(13)
EQU WHSE        TO TEMP.REC(14)
EQU LOCAT       TO TEMP.REC(15)
EQU SERIAL      TO TEMP.REC(16)
EQU ED.LS.FLG   TO TEMP.REC(17)
EQU TMP.STATUS      TO TEMP.REC(18)
EQU QTY         TO TEMP.REC(19)
EQU SHEET       TO TEMP.REC(20)
EQU PMT.FLG     TO TEMP.REC(21)
EQU QTYPE       TO TEMP.REC(22)
EQU DATE.USED   TO TEMP.REC(23)
EQU TIME.USED   TO TEMP.REC(24)
EQU JOBCL       TO TEMP.REC(25)
EQU JOBRATE     TO TEMP.REC(26)
************
*-- OPEN ALL FILES
OPEN "","JCS.SCREENS" TO M.SCREENS ELSE ERRMSG="CANNOT OPEN JCS.SCREENS FILE";GOSUB 91000;STOP
OPEN "","COMPANY" TO COMPANY ELSE ERRMSG="CANNOT OPEN COMPANY FILE";GOSUB 91000;STOP
OPEN "","CONTROL" TO CONTROL ELSE ERRMSG="CANNOT OPEN CONTROL FILE";GOSUB 91000;STOP
OPEN "","PREFIX" TO PREFIX ELSE ERRMSG="CANNOT OPEN PREFIX FILE";GOSUB 91000;STOP
OPEN "","DIVISION" TO DIVISION ELSE ERRMSG="CANNOT OPEN DIVISION FILE";GOSUB 91000;STOP
OPEN "","DEPARTMENT" TO DEPARTMENT ELSE ERRMSG="CANNOT OPEN DEPARTMENT FILE";GOSUB 91000;STOP
OPEN "","COST.CNTR" TO COST.CNTR ELSE ERRMSG="CANNOT OPEN COST.CNTR FILE";GOSUB 91000;STOP
OPEN "","CUSTOMER" TO CUSTOMER ELSE ERRMSG="CANNOT OPEN CUSTOMER FILE";GOSUB 91000;STOP
OPEN "","EMPLOYEE" TO EMPLOYEE ELSE ERRMSG="CANNOT OPEN EMPLOYEE FILE";GOSUB 91000;STOP
OPEN "","EMPLOYEE.XREF" TO EMPLOYEE.XREF ELSE ERRMSG="CANNOT OPEN EMPLOYEE.XREF FILE";GOSUB 91000;STOP
OPEN "","WORK.SHIFT" TO WORK.SHIFT ELSE ERRMSG="CANNOT OPEN WORK.SHIFT FILE";GOSUB 91000;STOP
OPEN "","OPERATION" TO OPERATION ELSE ERRMSG="CANNOT OPEN OPERATION FILE";GOSUB 91000;STOP
OPEN "","JOB" TO JOB ELSE ERRMSG="CANNOT OPEN JOB FILE";GOSUB 91000;STOP
OPEN "","JOB.TIME" TO JOB.TIME ELSE ERRMSG="CANNOT OPEN JOB.TIME FILE";GOSUB 91000;STOP
OPEN "","DAILY.TIME.MATL" TO DAILY.TIME.MATL ELSE ERRMSG="CANNOT OPEN DAILY.TIME.MATL FILE";GOSUB 91000;STOP
OPEN "","FACTOR" TO FACTOR ELSE ERRMSG="CANNOT OPEN FACTOR FILE";GOSUB 91000;STOP
OPEN "","JOB.STAT.CODE" TO JOB.STAT.CODE ELSE ERRMSG="CANNOT OPEN JOB.STAT.CODE FILE";GOSUB 91000;STOP
OPEN "","SPOILAGE.CODES" TO SPOILAGE.CODES ELSE ERRMSG="CANNOT OPEN SPOILAGE.CODES FILE";GOSUB 91000;STOP
OPEN "","INVENTORY" TO INVENTORY ELSE ERRMSG="CANNOT OPEN INVENTORY FILE";GOSUB 91000;STOP
OPEN "","INV.WHSE" TO INV.WHSE ELSE ERRMSG="CANNOT OPEN INV.WHSE FILE";GOSUB 91000;STOP
OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE ERRMSG="CANNOT OPEN INV.WHSE.LOC FILE";GOSUB 91000;STOP
OPEN "","CATEGORY" TO CATEGORY ELSE ERRMSG="CANNOT OPEN CATEGORY FILE";GOSUB 91000;STOP
OPEN "","JOB.TRANS" TO JOB.TRANS ELSE ERRMSG="CANNOT OPEN JOB.TRANS FILE";GOSUB 91000;STOP
OPEN '','INV_SERIAL' TO INV_SERIAL ELSE ERRMSG='CANNOT OPEN INV_SERIAL';GOSUB 93000
OPEN '','SF.PROMPT' TO SF.PROMPT ELSE ERRMSG='CANNOT OPEN SF.PROMPT FILE';GOSUB 93000
*-- GET COMPANY
MAT COMP.REC=""
CONO=""
CALL GET.CONO(CONO,MAT COMP.REC)
IF CONO='END' THEN GOTO 99999
*-- INITIALIZATION
SHEET.OK=1       ;*** 1=ALLOW SHEET PAPER ENTRY ***
MAT EDIT.COM.DRIVER=''
ECD.SCRN.CNT=2
ECD.SCRN.NAME<1>='EPS.TIME.MATL.MAINT'
ECD.SCRN.NAME<2>='TIME.MATL.DET'
ECD.SCRN.NO=1
ECD.ACTION=1;CALL SCRN.EDIT
PAGE.SIZE=5;BEGIN.PAGE=8;LINE.SPACE=2
MAT JOB.REC="";MAT DIV.REC="";MAT DEPT.REC="";MAT CCTR.REC="";MAT OPER.REC=""
DATE.WORKED="";TEST.REC=""
MAT GEN.XREF.REC=""
GXR.CO=CONO
GXR.HEADING<1,2>="DESCRIPTION"
GXR.ATT<1,1>=0; GXR.ATT<1,2>=2; GXR.LEN<1,1>=5; GXR.LEN<1,2>=30
MATREAD JOB.CUTOFF.REC FROM CONTROL,CONO:"JOB.CUTOFF.NO" ELSE
  MAT JOB.CUTOFF.REC=""
  J.CUTOFF.NUM=0
END
IF SHEET.OK THEN
  READ DEPT.WHSE FROM CONTROL,CONO:"DEPT.WHSE" ELSE
    DEPT.WHSE=""
  END
END ELSE
  DEPT.WHSE=""
END
*-- MAIN PROCESSING
100 *
RELEASE
MAT DTM.REC="";OPT=""
MAT SCV.REC="";ECD.ACTION=6;CALL SCRN.EDIT
110 *
DEL.JOB = "" ; DEL.SEQ = ""
EMP="";SHIFT=""
SCV.REC(1)<1>=DATE()
ECD.NUM=1;ECD.ACTION=5;CALL SCRN.EDIT
FOR REQUEST=1 TO 3
  ON REQUEST GOSUB 1100,1200,1300
  IF ECD.RET.VALUE="END" THEN
    IF REQUEST=1 THEN GOTO 99999
    GOTO 100
  END
NEXT REQUEST
NEW.REC=0
DTM.KEY=EMP:"*":DATE.WORKED:"*":SHIFT
OLD.KEY = DTM.KEY
NEW.KEY = DTM.KEY
  * T26126 v
MATREADU DTM.REC FROM DAILY.TIME.MATL,CONO:DTM.KEY LOCKED
  ERRMSG = 'TIME & MATL Record is locked by user - ':GETUSERNAME(STATUS())
  GOSUB 91000;GOTO 100 
END ELSE
  * T26126 ^
  MAT DTM.REC=""
  NEW.REC=1
END
IF NEW.REC THEN
  CNT=0
  REF=0
  CURR.REF.NO=""
  OPT="A"
  GOTO 510
END ELSE
  CNT=COUNT(DTM.TYPE,VM)+(DTM.TYPE # "")
  FOR REF = 1 TO CNT
    GOSUB 650
  NEXT REF
  REF=1
  CURR.REF.NO=""
  GOSUB 70000
  GOSUB 50000
END
*-- GET OPERATOR REPLY
500 *
ECD.NUM=31
ECD.ACTION=4;CALL SCRN.EDIT
OPT=ECD.RET.VALUE
510 *
BEGIN CASE
  CASE OPT="E" OR OPT="END"
    GOTO 100
  CASE OPT="A" AND CNT < 99
    MODE="A"
    DONE=0
    FOR REF=CNT+1 TO 99 UNTIL DONE
      GOSUB 50000
      GOSUB 10000
      CNT=CNT+1
      IF VALUE="END" THEN
        DONE=1
        GOSUB 600
      END
      GOSUB 70000
    NEXT REF
    REF=CNT
    CURR.REF.NO=""
    GOSUB 50000
  CASE OPT="C" AND CNT > 0
    MODE="C"
    GOSUB 30000
    IF VALUE # "" AND VALUE # "END" THEN
      REF=VALUE
      IF DTM.PMT.FLG<1,REF> # "" AND DTM.TYPE<1,REF> = "M" THEN
        ERRMSG="Material posted. Cannot change "
        GOSUB 91000
        GOTO 500
      END
      GOSUB 10000
      IF VALUE="END" THEN
        CURR.REF.NO=""
        GOSUB 50000
      END
      GOSUB 70000
    END
  CASE OPT="I" AND CNT > 0
    MODE="I"
    GOSUB 30000
    IF VALUE # "" AND VALUE # "END" THEN
      REF=VALUE
      GOSUB 700
      CURR.REF.NO=""
      GOSUB 50000
      GOSUB 10000
      IF VALUE="END" THEN
        GOSUB 600
      END
      CURR.REF.NO=""
      GOSUB 50000
      GOSUB 70000
    END
  CASE OPT="D" AND CNT > 0
    MODE="D"
    GOSUB 30000
    IF VALUE # "" AND VALUE # "END" THEN
      REF=VALUE
      IF DTM.PMT.FLG<1,REF> # "" THEN
        ERRMSG="Material posted. Cannot delete "
        GOSUB 91000
        GOTO 500
      END
      GOSUB 600
      IF REF > CNT THEN REF=REF-1
      CURR.REF.NO=""
      GOSUB 50000
      GOSUB 70000
    END
  CASE NUM(OPT)
*T26661 v
    IF OPT = 1 THEN
511 *
      X=17;Y=2;TYP=6;O.R='O';FILL='#'
      DEFAULT = OCONV(DATE.WORKED, "D2/")
      PVALUE = DEFAULT
      MAXL = 8
      ODATE = DATE.WORKED
      CALL EDIT.SUB
      IF VALUE # "END" THEN
        DATE.WORKED = VALUE
        ECD.RET.VALUE = VALUE
        GOSUB 1101
        IF TEST.REC # "" THEN DATE.WORKED = ODATE
      END
      ECD.NUM = 2
      SCV.REC(2)<ECD.SCRN.NO> = DATE.WORKED
      ECD.ACTION=5;CALL SCRN.EDIT
      IF TEST.REC # "" THEN TEST.REC="";GOTO 511
    END ELSE
*T26661 ^
      IF OPT > 0 AND OPT < 4 THEN
        ON OPT GOSUB 1100,1200,1300
      END
    END ; * T26661
  CASE OPT="R" AND CNT > 0
    MODE="R"
    GOSUB 30000
    IF VALUE # "" AND VALUE # "END" THEN
      REF=VALUE
      MATREAD CCTR.REC FROM COST.CNTR,CONO:DTM.CCTR<1,REF> ELSE MAT CCTR.REC=""
      MATREAD OPER.REC FROM OPERATION,CONO:DTM.OPER<1,REF> ELSE MAT OPER.REC=""
      ECD.SCRN.NO=2
      ECD.ACTION=2;CALL SCRN.EDIT
      TYPE=DTM.TYPE<1,REF>
      CALL EPS.TIME.MATL.DET (MODE,CONO,REF,MAT TEMP.REC,SHEET.OK,DEPT.WHSE,ESTAT,JOB.CUST)
      ECD.SCRN.NO=1
      ECD.ACTION=2;CALL SCRN.EDIT
      DTM.PROD<1,REF>=PROD
      DTM.WHSE<1,REF>=WHSE
      DTM.LOC<1,REF>=LOCAT
      DTM.SERIAL<1,REF>=SERIAL
      DTM.ED.LS.FLG<1,REF>=ED.LS.FLG
      DTM.STATUS<1,REF>=TMP.STATUS
      DTM.QTY<1,REF>=QTY
      DTM.SHEET<1,REF>=SHEET
      DTM.RS.QTYPE<1,REF>=QTYPE
      IF DATE.USED # "" THEN
        DTM.TIME.STAMP<1,REF>=DATE.USED*100000+TIME.USED
      END
      SCV.REC(29)<1>=""
      SCV.REC(30)<1>=""
      ECD.ACTION=3;CALL SCRN.EDIT
      CURR.REF.NO=""
      GOSUB 50000
    END
  CASE OPT="P"
    IF DTM.PMT.FLG="" OR DTM.PMT.FLG=STR(VM,LEN(DTM.PMT.FLG)) THEN
      ECD.NUM=35
      ECD.ACTION=4;CALL SCRN.EDIT
      IF ECD.RET.VALUE="Y" THEN
        CNT=COUNT(DTM.TYPE,VM)+(DTM.TYPE # "")
        DELETE DAILY.TIME.MATL,CONO:DTM.KEY
        MAT DTM.REC = ""
        GOSUB 800
        GOTO 100
      END
    END ELSE
      ERRMSG="Material posted. Cannot purge "
      GOSUB 91000
    END
  CASE OPT="S"
    REF=CURR.REF.NO+PAGE.SIZE
    IF REF > CNT THEN REF=1
    GOSUB 50000
    * T25978 v
  CASE OPT = 'SR'
    REF = CURR.REF.NO - PAGE.SIZE
    IF REF < 1 THEN REF = 1
    GOSUB 50000
  CASE OPT = 'ST'
    REF = 1
    GOSUB 50000
  CASE OPT = 'SB'
    REF = CNT
    GOSUB 50000
    * T25978 ^
  CASE OPT="F" AND CNT > 0
    EFLAG=0
    JN=""
    PP=CNT+1
    FOR LP=1 TO CNT
      TYPE=DTM.TYPE<1,LP>
      BEGIN CASE
        CASE TYPE="T"
          PP=LP
          JN=DTM.JOB<1,LP>
        CASE TYPE="C"
          CEFLAG=1
          BEGIN CASE
            CASE LP=1
            CASE DTM.TYPE<1,LP-1> # "T" AND DTM.TYPE<1,LP-1> # "C"
            CASE DTM.CCTR<1,LP> # DTM.CCTR<1,LP-1>
            CASE DTM.OPER<1,LP> # DTM.OPER<1,LP-1>
            CASE DTM.TIME.CODE<1,LP> # DTM.TIME.CODE<1,LP-1>
            CASE DTM.TIME.ST<1,LP> # DTM.TIME.ST<1,LP-1>
            CASE DTM.TIME<1,LP> # DTM.TIME<1,LP-1>
            CASE DTM.SPOIL.CODE<1,LP> # DTM.SPOIL.CODE<1,LP-1>
            CASE 1
              CEFLAG=0
          END CASE
          IF CEFLAG THEN
            ERRMSG="Concurrency error on line ":LP:",  Correct and try again! "
            GOSUB 91000
            EFLAG=1
          END
          LOCATE DTM.JOB<1,LP> IN JN<1>,1 SETTING FND ELSE FND=0
          IF FND THEN
            ERRMSG="Duplicate concurrent job on line ":LP:", Correct and try again! "
            GOSUB 91000
            EFLAG=1
          END
          JN=INSERT(JN,1,-1,0,DTM.JOB<1,LP>)
      END CASE
    NEXT LP
    IF EFLAG THEN GOTO 500
*T26207 v
    IF TTIME > 2400 THEN
      ERRMSG="Total hours must not exceed 24.00 !"
      GOSUB 91000
      GOTO 500
    END
*T26207 ^
    DTM.SHIFT=SHIFT
    CN.FLG=0
    FOR LP=1 TO CNT
      BEGIN CASE
        CASE DTM.TYPE<1,LP>="L"
        CASE DTM.TYPE<1,LP>="I"
        CASE DTM.SEQ<1,LP> # ""
        CASE 1
          IF CN.FLG=0 THEN
            READU TIME.ENT.SEQ FROM CONTROL,CONO:"DAILY.TIME" ELSE TIME.ENT.SEQ=10001
            CN.FLG=1
          END
          LOOP
            READ CK.FLG FROM JOB.TIME,CONO:TIME.ENT.SEQ ELSE CK.FLG=""
          WHILE CK.FLG # "" DO
            TIME.ENT.SEQ=TIME.ENT.SEQ+1
          REPEAT
          DTM.SEQ<1,LP>=TIME.ENT.SEQ
          TIME.ENT.SEQ=TIME.ENT.SEQ+1
      END CASE
    NEXT LP
    IF CN.FLG=1 THEN
      WRITE TIME.ENT.SEQ ON CONTROL,CONO:"DAILY.TIME"
    END
    DTM.PRT.DATE = ""
    IF OLD.KEY # NEW.KEY THEN
      DELETE DAILY.TIME.MATL,CONO:OLD.KEY
      MATWRITE DTM.REC ON DAILY.TIME.MATL,CONO:NEW.KEY
    END ELSE
      MATWRITE DTM.REC ON DAILY.TIME.MATL,CONO:OLD.KEY
    END
    GOSUB 800
    GOTO 100
  CASE 1
    ERRMSG="Invalid request. Try again! "
    GOSUB 91000
END CASE
GOTO 500
*-- DELETE MULTI-LINE DATA
600 *
AC=COUNT(DTM.A1A,",")+(DTM.A1A # "")
FOR AP=1 TO AC
  AA=FIELD(DTM.A1A,",",AP)
  AA1=FIELD(AA,"-",1)
  AA2=FIELD(AA,"-",2)
  IF AA2="" THEN AA2=AA1
  FOR AAP=AA1 TO AA2
    DTM.REC(AAP)=DELETE(DTM.REC(AAP),1,REF,0)
  NEXT AAP
NEXT AP
CNT=CNT-1
RETURN
*-- BUILD DEL.JOB
650 *
IF DTM.SEQ<1,REF> # "" AND DTM.JOB<1,REF> # "" THEN
  LOCATE DTM.JOB<1,REF> IN DEL.JOB,1 SETTING XFND ELSE
    DEL.JOB<XFND> = DTM.JOB<1,REF>
    DEL.SEQ<XFND> = ""
  END
  LOCATE DTM.SEQ<1,REF> IN DEL.SEQ<XFND>,1 SETTING YFND ELSE
    DEL.SEQ<XFND,YFND> = DTM.SEQ<1,REF>
  END
END
RETURN
*-- INSERT MULTI-LINE DATA
700 *
AC=COUNT(DTM.A1A,",")+(DTM.A1A # "")
FOR AP=1 TO AC
  AA=FIELD(DTM.A1A,",",AP)
  AA1=FIELD(AA,"-",1)
  AA2=FIELD(AA,"-",2)
  IF AA2="" THEN AA2=AA1
  FOR AAP=AA1 TO AA2
    DTM.REC(AAP)=INSERT(DTM.REC(AAP),1,REF,0,"")
  NEXT AAP
NEXT AP
CNT=CNT+1
RETURN
*--- UPDATE JOB.TRANS
800 *
CNT = DCOUNT(DEL.JOB,AM)
FOR REF = 1 TO CNT
  MATREADU JTRN.REC FROM JOB.TRANS, CONO:DEL.JOB<REF> ELSE MAT JTRN.REC = ""
  SCNT = DCOUNT(DEL.SEQ<REF>,VM)
  FOR II = 1 TO SCNT
    PTR = 1
    LOOP
      LOCATE DEL.JOB<REF> IN DTM.JOB<1>,PTR SETTING XFND ELSE
        XFND = 0
        PTR = 0
      END
      BEGIN CASE
        CASE PTR = 0
        CASE DEL.SEQ<REF,II> = DTM.SEQ<1,XFND>
          PTR = 0
        CASE 1
          PTR = XFND + 1
      END CASE
    WHILE PTR DO
    REPEAT
    IF XFND THEN GOTO 809
    LOCATE DEL.SEQ<REF,II> IN JTRN.TRANS<1>,1 SETTING XFND ELSE XFND=0
    IF XFND THEN
      DEL JTRN.TIME.STAMP<1,XFND>
      DEL JTRN.TRANS<1,XFND>
      DEL JTRN.DEPT<1,XFND>
      DEL JTRN.CCTR<1,XFND>
      DEL JTRN.OPER<1,XFND>
      DEL JTRN.EMP <1,XFND>
      DEL JTRN.HRS<1,XFND>
      DEL JTRN.IMP<1,XFND>
      DEL JTRN.SHIFT<1,XFND>
      DEL JTRN.CMP.FLG<1,XFND>
      DEL JTRN.OPER.TYPE<1,XFND>
      DEL JTRN.POST.FLAG<1,XFND>
    END
809 *
  NEXT II
  IF JTRN.TRANS = "" THEN
    DELETE JOB.TRANS, CONO:DEL.JOB<REF>
  END ELSE
    MATWRITE JTRN.REC ON JOB.TRANS, CONO:DEL.JOB<REF>
  END
NEXT REF
RETURN
*-- GET DATE WORKED
1100 *
ECD.NUM=2
*T22485 >   ECD.MINV = DATE() - 7
ECD.MINV = DATE() - CO.TIME.MATL.DAYS
ECD.MAXV = DATE()
IF DATE.WORKED # "" THEN
  ECD.O.R="O"; ECD.DEFAULT=DATE.WORKED
END ELSE
  ECD.O.R = "R"
END
ECD.ACTION=4;CALL SCRN.EDIT
1101 *
IF ECD.RET.VALUE # "END" THEN
  IF OPT = 1 THEN
    IF ECD.RET.VALUE > EMP.TERM.DATE AND EMP.REHR.DATE - EMP.TERM.DATE < 0 THEN
      ERRMSG="WARNING : Employee ":EMP:" has been terminated on ":OCONV(EMP.TERM.DATE,"D2/"):"."
      GOSUB 91000
    END
    GOSUB 1400
*T26661 v
*        IF TEST.REC # "" THEN
*           SCV.REC(2)<ECD.SCRN.NO>=DATE.WORKED;TEST.REC="" ; GOTO 1100
*        END
    RETURN
*T26661 ^
  END
  DATE.WORKED = ECD.RET.VALUE
END
1199 RETURN
*-- GET EMPLOYEE ID
1200 *
SCV.REC(3)<1>=EMP
ECD.NUM=3
ECD.ACTION=4;CALL SCRN.EDIT
BEGIN CASE
  CASE ECD.RET.VALUE = "END"
    GOTO 1299
  CASE ECD.RET.VALUE=""
    ECD.NUM=4
    ECD.ACTION=4;CALL SCRN.EDIT
    IF ECD.RET.VALUE="" OR ECD.RET.VALUE="END" THEN GOTO 1200
    GXR.XREF=EMPLOYEE.XREF;GXR.FILE=EMPLOYEE;GXR.LOC=1;GXR.TOP.LINE="EMPLOYEE XREF SEARCH";GXR.HEADING<1,1>="EMP #"
    GXR.ATT<1,2>=4;GXR.ATT<1,3>=5;GXR.HEADING<1,2>="LAST NAME";GXR.HEADING<1,3>="FIRST NAME";GXR.LEN<1,3>=30
    GXR.SRCH.ID=ECD.RET.VALUE;GXR.ID=""
    CALL GEN.XREF(MAT GEN.XREF.REC,PREFIX)
    IF GXR.ID # "X" THEN
      ECD.ACTION=2;CALL SCRN.EDIT
      ECD.ACTION=3;CALL SCRN.EDIT
    END
    IF GXR.ID="" THEN GOTO 1200
    ECD.RET.VALUE=GXR.ID
    ECD.NUM=3
    SCV.REC(ECD.NUM)<ECD.SCRN.NO>=ECD.RET.VALUE
    ECD.ACTION=5
    CALL SCRN.EDIT
END CASE
MATREAD EMP.REC FROM EMPLOYEE,CONO:ECD.RET.VALUE ELSE
  ERRMSG="Invalid employee ID. Try again! "
  GOSUB 91000
  GOTO 1200
END
*T23278 v
DIV.CODE = EMP.DIV; USER.ID = UPCASE(@LOGNAME); ERRMSG = ''
CALL CK.DIV.SEC.SUB(CONO,DIV.CODE,USER.ID,ERRMSG)
IF ERRMSG # '' THEN
  GOSUB 91000; GOTO 1200
END
*T23278 ^
IF DATE.WORKED > EMP.TERM.DATE AND EMP.REHR.DATE - EMP.TERM.DATE < 0 THEN
  ERRMSG="WARNING : Employee ":ECD.RET.VALUE:" has been terminated on ":OCONV(EMP.TERM.DATE,"D2/"):"."
  GOSUB 91000
END
SCV.REC(4)<1>=EMP.LAST.NAME:", ":EMP.FRST.NAME
ECD.NUM=4;ECD.ACTION=5;CALL SCRN.EDIT
IF EMP # "" THEN
  GOSUB 1400
  IF TEST.REC # "" THEN
    SCV.REC(3)<ECD.SCRN.NO> = EMP;TEST.REC = "" ; GOTO 1200
  END
END
EMP = ECD.RET.VALUE
IF EMP.STATUS = 'H' THEN RPIC = 'MD4' ELSE RPIC = 'MD2'
1299 *
RETURN
*-- GET SHIFT WORKED
1300 *
ECD.NUM=5
ECD.ACTION=4;CALL SCRN.EDIT
IF ECD.RET.VALUE # "END" THEN
  IF SHIFT # "" THEN
    GOSUB 1400
    IF TEST.REC # "" THEN
      SCV.REC(5)<ECD.SCRN.NO> = SHIFT;TEST.REC = "" ; GOTO 1300
    END
  END
*CSF 26082  SHIFT = ECD.RET.VALUE Moved down 10 lines.
* MOD 2/18/94 (LMR) FOR EPS EMPLOYEE ONLY
  IF EMP.STATUS # "" THEN
    IF EMP.WRK.SCHD<1,ECD.RET.VALUE> = '' THEN
      ERRMSG='Employee not authorized for this shift';GOSUB 91000;GOTO 1300
    END
    MATREAD WSS.REC FROM WORK.SHIFT,CONO:"!":EMP.WRK.SCHD<1,ECD.RET.VALUE> ELSE
      ERRMSG='Invalid work shift schedule code for this employee and shift';GOSUB 91000;GO 1300
    END
  END
  SHIFT = ECD.RET.VALUE
*
END
1399 RETURN
*-- CHECK IF FIELD 1,2,3 CHANGED
1400 *
BEGIN CASE
  CASE OPT = 1
    TEST.KEY = EMP:"*":ECD.RET.VALUE:"*":SHIFT
  CASE OPT = 2
    TEST.KEY = ECD.RET.VALUE:"*":DATE.WORKED:"*":SHIFT
  CASE OPT = 3
    TEST.KEY = EMP:"*":DATE.WORKED:"*":ECD.RET.VALUE
  CASE 1
    ERRMSG = "Bad option try again" ; GOSUB 91000 ; GOTO 1499
END CASE
IF TEST.KEY # NEW.KEY THEN
  READU TEST.REC FROM DAILY.TIME.MATL,CONO:TEST.KEY ELSE TEST.REC = ""
  IF TEST.REC # "" THEN 
    ERRMSG = "This record is already on file for the employee above"
    RELEASE DAILY.TIME.MATL,CONO:TEST.KEY
    GOSUB 91000
  END ELSE
    IF NEW.KEY # OLD.KEY THEN
      RELEASE DAILY.TIME.MATL,NEW.KEY
    END
    NEW.KEY = TEST.KEY
  END
END
1499 RETURN
*-- GET MULTI-LINE DATA
10000 *
GOSUB 50000
MAT TEMP.REC=""
SLN=BEGIN.PAGE + LINE.SPACE * MOD(REF-1,PAGE.SIZE)
IF MODE # "C" THEN
  P_X  = 0 ; P_Y = SLN ; P_VALUE = REF "R#2" ; P_OPT = "CL"
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
END
IF DTM.STATUS<1,REF> # "" THEN
  SCV.REC(29)<1>="Status:"
  SCV.REC(30)<1>=DTM.STATUS<1,REF>
  ECD.NUM=29;ECD.ACTION=5;CALL SCRN.EDIT
  ECD.NUM=30;ECD.ACTION=5;CALL SCRN.EDIT
END
IF MODE = "C" AND DTM.PMT.FLG<1,REF> # "" THEN PMT.FLG = 1 ELSE PMT.FLG = 0
*-- GET TRANSACTION TYPE
10010 *
X=3;Y=SLN;TYP=1;MAXL=1;O.R='O'
IF PMT.FLG THEN VALDAT = DTM.TYPE<1,REF> ELSE VALDAT="T":VM:"M":VM:"C":VM:"L":VM:"I"
HMSG="Enter (T)ime,(M)aterial,(C)oncurrent jobs,(L)unch & (I)dle"
IF DTM.TYPE<1,REF> # "" THEN
  DEFAULT=DTM.TYPE<1,REF>
END ELSE
  DEFAULT="T"
END
CALL EDIT.SUB
IF VALUE='END' THEN GOTO 10990
IF VALUE = "C" THEN
  IF DTM.TYPE<1,REF -1> # "T" AND DTM.TYPE<1,REF -1> # "C" THEN
    ERRMSG = "Concurrent entry must be entered after time entry or after concurrent entry" ; GOSUB 91000 ; GOTO 10010
  END
END
TYPE=VALUE
*-- GET JOB NUMBER
10020 *
BEGIN CASE
  CASE TYPE="L" OR TYPE="I"
    JOB.NO=""
    MAT JOB.REC=""
    MAT CUST.REC=""
    OSJ.FLG=""
    JINIT=""
    IF MODE="C" THEN
      P_X  = 5 ; P_Y = SLN ; P_VALUE = JOB.NO "L#8" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    END
  CASE 1
    X=5;Y=SLN;TYP=1;MAXL=8;O.R='R';HMSG="Enter Job number"
    IF PMT.FLG THEN VALDAT = DTM.JOB<1,REF>
    IF DTM.JOB<1,REF> # "" THEN
      O.R='O';DEFAULT=DTM.JOB<1,REF>
    END
    CALL EDIT.SUB
    IF VALUE='END' THEN GOTO 10990
    IF TYPE = "C" AND VALUE = DTM.JOB<1,REF-1> THEN
      ERRMSG = "Concurrent must be entered for two different jobs" ; GOSUB 91000 ; GOTO 10020
    END
    JOB.NO=VALUE
    OSJ.FLG=""
    JINIT=""
    MATREAD JOB.REC FROM JOB,CONO:JOB.NO ELSE
      MAT JOB.REC=""
      MAT CUST.REC=""
      IF NUM(JOB.NO) THEN
        IF JOB.NO < J.CUTOFF.NUM THEN OSJ.FLG="Y"
      END ELSE
        JC.CNT=COUNT(J.CUTOFF.PREFIX,VM)+(J.CUTOFF.PREFIX # "")
        FOR L=1 TO JC.CNT WHILE OSJ.FLG=""
          PRFX.LEN=LEN(J.CUTOFF.PREFIX<1,L>)
          IF J.CUTOFF.PREFIX<1,L>=JOB.NO[1,PRFX.LEN] THEN
            CHK.VALUE=JOB.NO[PRFX.LEN+1,LEN(JOB.NO)-PRFX.LEN]
            IF NUM(CHK.VALUE) THEN
              IF CHK.VALUE < J.CUTOFF.PRE.NO<1,L> THEN OSJ.FLG="Y"
            END
          END
        NEXT L
      END
      IF OSJ.FLG="" THEN
        ERRMSG="Invalid job number. Try again! "
        GOSUB 91000
        GOTO 10020
      END
    END
    BEGIN CASE
      CASE JOB.STATUS<1,1>=9
        ERRMSG="Job is cancelled. Try again! ";GOSUB 91000;GOTO 10020
      CASE JOB.STATUS<1,1>=7
        ERRMSG="Job is ready to purge. Try again! ";GOSUB 91000;GOTO 10020
      CASE JOB.STATUS<1,1>=8
        ERRMSG="Job is purged. Try again! ";GOSUB 91000;GOTO 10020
    END CASE
    GOSUB 85000
    IF ECD.RET.VALUE = "END" THEN GOTO 10020
    IF OSJ.FLG="" THEN
      MATREAD CUST.REC FROM CUSTOMER,CONO:JOB.CUST ELSE
        MAT CUST.REC=""
        CUST.NAME="???????????????"
      END
      SCV.REC(29)<1>="Customer:"
      SCV.REC(30)<1>=CUST.NAME
      ECD.NUM=29;ECD.ACTION=5;CALL SCRN.EDIT
      ECD.NUM=30;ECD.ACTION=5;CALL SCRN.EDIT
    END
END CASE
*-- GET COST CENTER
10030 *
BEGIN CASE
  CASE TYPE="L" OR TYPE="I"
    CCTR=""
    MAT CCTR.REC=""
    MAT DEPT.REC=""
    MAT DIV.REC=""
    IF MODE="C" THEN
      P_X  = 14 ; P_Y = SLN ; P_VALUE = CCTR "L#3" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    END
  CASE 1
    BEGIN CASE
      CASE TYPE="C" AND REF > 1
        CCTR=DTM.CCTR<1,REF-1>
        P_X  = 14 ; P_Y = SLN ; P_VALUE = CCTR "L#3" ; P_OPT = ""
        CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      CASE 1
        X=14;Y=SLN;TYP=1;MAXL=3;O.R='R';HMSG="Enter Cost Center worked"
        IF PMT.FLG THEN VALDAT = DTM.CCTR<1,REF>
        IF DTM.CCTR<1,REF> # "" THEN
          O.R='O';DEFAULT=DTM.CCTR<1,REF>
        END
        CALL EDIT.SUB
        IF VALUE='END' THEN GOTO 10990
        CCTR=VALUE
    END CASE
    MATREAD CCTR.REC FROM COST.CNTR,CONO:CCTR ELSE
      ERRMSG="Invalid cost center. Try again! "
      GOSUB 91000
      GOTO 10030
    END
    IF CCTR.TYPE="F" THEN
      ERRMSG="Cost center is frozen"
      GOSUB 91000
      GOTO 10030
    END
    IF JOB.DEPT # CCTR.DEPT[1,LEN(JOB.DEPT)] THEN
      ERRMSG="Job / Cost Center - Department mismatch"
      GOSUB 91000
      GOTO 10030
    END
    MATREAD DEPT.REC FROM DEPARTMENT,CONO:CCTR.DEPT ELSE
      ERRMSG="Invalid department for specified cost center. Try again! "
      GOSUB 91000
      GOTO 10030
    END
    IF OSJ.FLG="Y" THEN
      DCNT=COUNT(DEPT.DIV,VM)+(DEPT.DIV # "")
      BEGIN CASE
        CASE DCNT < 1
          ERRMSG="No divisions present for cost center department - ":CCTR.DEPT
          GOSUB 91000
          GOTO 10030
        CASE DCNT=1
          JOB.DIV=DEPT.DIV<1,1>
        CASE 1
          DVS=1
          ECD.NUM=36
          ECD.VALDAT=DEPT.DIV<1,1>
          ECD.HMSG="Valid divisions - ":DEPT.DIV<1,1>
          FOR DV=2 TO DCNT
            ECD.VALDAT=ECD.VALDAT:",":DEPT.DIV<1,DV>
            IF LEN(ECD.HMSG<1,1,DVS>) > 70 THEN DVS=DVS+1
            ECD.HMSG<1,1,DVS>=ECD.HMSG<1,1,DVS>:", ":DEPT.DIV<1,DV>
          NEXT DV
          ECD.ACTION=4;CALL SCRN.EDIT
          IF ECD.RET.VALUE="END" THEN GOTO 10030
          JOB.DIV=ECD.RET.VALUE
      END CASE
    END
    LOCATE JOB.DIV IN DEPT.DIV<1>,1 SETTING FND ELSE
      ERRMSG="Job / Department - Division mismatch. Try again! "
      GOSUB 91000
      GOTO 10030
    END
    MATREAD DIV.REC FROM DIVISION,CONO:JOB.DIV ELSE
      ERRMSG="Invalid division for department. Try again! "
      GOSUB 91000
      GOTO 10030
    END
    SCV.REC(29)<1>="Cost Center:"
    SCV.REC(30)<1>=CCTR.DESC
    ECD.NUM=29;ECD.ACTION=5;CALL SCRN.EDIT
    ECD.NUM=30;ECD.ACTION=5;CALL SCRN.EDIT
END CASE
*-- GET OPERATION
10040 *
ORIG.OPER = DTM.OPER<1,REF> ;*T26097
BEGIN CASE
  CASE TYPE="M" OR TYPE="L" OR TYPE="I"
    OPER=""
    MAT OPER.REC=""
    IF MODE="C" THEN
      P_X  = 18 ; P_Y = SLN ; P_VALUE = OPER "L#4" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    END
  CASE 1
    BEGIN CASE
      CASE TYPE="C" AND REF > 1
        OPER=DTM.OPER<1,REF-1>
        P_X  = 18 ; P_Y = SLN ; P_VALUE = OPER "L#4" ; P_OPT = ""
        CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      CASE 1
        X=18;Y=SLN;TYP=1;MAXL=4;O.R='R';HMSG="Enter Operation worked."
        IF PMT.FLG THEN VALDAT = DTM.OPER<1,REF>
        IF DTM.OPER<1,REF> # "" THEN
          O.R='O';DEFAULT=DTM.OPER<1,REF>
        END
        CALL EDIT.SUB
        IF VALUE='END' THEN GOTO 10990
        OPER=VALUE
    END CASE
* BEGIN CASE
* CASE JOB.TYPE="N"
* CASE JOB.TYPE="R"
* CASE 1
* ERRMSG="Invalid operation for specified job. Try again! "
* GOSUB 91000
* GOTO 10040
* END CASE
    LOCATE OPER IN CCTR.OPER<1>,1 SETTING OP ELSE
      ERRMSG="Invalid operation for specified cost center. Try again! "
      GOSUB 91000
      GOTO 10040
    END
    MATREAD OPER.REC FROM OPERATION,CONO:OPER ELSE
      ERRMSG="Invalid operation code. Try again! "
      GOSUB 91000
      GOTO 10040
    END
    SCV.REC(29)<1>="Operation:"
    SCV.REC(30)<1>=OPER.DESC
    ECD.NUM=29;ECD.ACTION=5;CALL SCRN.EDIT
    ECD.NUM=30;ECD.ACTION=5;CALL SCRN.EDIT
END CASE
AP.FLG=""
IF OPER.SF.PROMPT<1,1>='N' OR OPER.SF.PROMPT<1>='' THEN AP.FLG<1,REF>='N' ELSE AP.FLG<1,REF>='Y'
SCV.REC(24)<1,REF>=AP.FLG<1,REF>
ECD.NUM=24;ECD.SUB.NUM=REF;ECD.ACTION=5;CALL SCRN.EDIT
*T26097 v
IF ORIG.OPER # '' AND OPER # ORIG.OPER THEN
  DTM.ADD.PRMPT.CD<1,REF> = ''
  DTM.ADD.RESP<1,REF> = ''
END
*T26097 ^
*-- GET JOB CLASS
10045 *
JOBCL=""
JOBRATE=""
BEGIN CASE
  CASE TYPE="M"
    GOTO 10050
  CASE TYPE="L" OR TYPE="I"
    JOBCL=EMP.JOB.CLASS
*  CASE TYPE="T" OR TYPE="C"
  CASE TYPE="T" OR TYPE="C" AND EMP.STATUS # ""
    X=23;Y=SLN;TYP=3;MAXL=3;MINL=1;FILL.CHR=0;O.R='O';HMSG="Enter Job Class Code Worked";JUSTIFY='R';DEFAULT=EMP.JOB.CLASS
    IF DTM.CLASS.CD<1,REF> # '' THEN O.R='O';DEFAULT=DTM.CLASS.CD<1,REF>
    CALL EDIT.SUB
    IF VALUE='END' THEN GOTO 10990
    JOBCL=VALUE
END CASE
P_X  = 23 ; P_Y = SLN ; P_VALUE = JOBCL'L#3' ; P_OPT = ""
CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
BEGIN CASE
  CASE JOBCL = EMP.JOB.CLASS
    JOBRATE=EMP.JOB.CL.RATE
*   PRINT @(27,SLN):OCONV(JOBRATE,'MD4')'R#7'
    IF RPIC = 'MD4' THEN
      P_VALUE = OCONV(JOBRATE,'MD4')'R#7'
    END ELSE
      P_VALUE = OCONV(JOBRATE/100,RPIC)'R#7'
    END
    P_X  = 27 ; P_Y = SLN; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*   IF EMP.STATUS='S' THEN P_VALUE = OCONV(JOBRATE/100,'MD2')'R#7'
    GOTO 10050
  CASE 1
    LOCATE JOBCL IN EMP.VALID.CLASS<1>,1 SETTING SFC ELSE
      ERRMSG="Unauthorized job classification code"
      GOSUB 91000
      GOTO 10045
    END
    JOBRATE=EMP.VAL.CL.RATE<1,SFC>
*   PRINT @(27,SLN):OCONV(JOBRATE,'MD4')'R#7'
    IF RPIC = 'MD4' THEN
      P_VALUE = OCONV(JOBRATE,'MD4')'R#7'
    END ELSE
      P_VALUE = OCONV(JOBRATE/100,RPIC)'R#7'
    END
    P_X  = 27 ; P_Y = SLN; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*   IF EMP.STATUS='S' THEN P_VALUE = OCONV(JOBRATE/100,'MD2')'R#7'
    BEGIN CASE
      CASE WSS.TRN.LOW="N" AND JOBRATE < EMP.JOB.CL.RATE
        ERRMSG="Employee can not work at lower job class";GOSUB 91000
        GOTO 10045
      CASE WSS.TRN.LPAY="N" AND JOBRATE < EMP.JOB.CL.RATE
        ERRMSG="Employee can work at lower job class but be paid to home rate";GOSUB 91000
        JOBRATE=EMP.JOB.CL.RATE
      CASE WSS.TRN.HGH="N" AND JOBRATE > EMP.JOB.CL.RATE
        ERRMSG="Employee can not work at higher job class";GOSUB 91000;GOTO 10045
      CASE WSS.TRN.HPAY="N" AND JOBRATE > EMP.JOB.CL.RATE
        ERRMSG="Employee may work at higher job class but be paid at home rate";GOSUB 91000
        JOBRATE=EMP.JOB.CL.RATE
    END CASE
*   PRINT @(27,SLN):OCONV(JOBRATE,'MD4')'R#7'
    IF RPIC = 'MD4' THEN
      P_VALUE = OCONV(JOBRATE,'MD4')'R#7'
    END ELSE
      P_VALUE = OCONV(JOBRATE/100,RPIC)'R#7'
    END
    P_X  = 27 ; P_Y = SLN; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*   IF EMP.STATUS='S' THEN P_VALUE = OCONV(JOBRATE/100,'MD2')'R#7'
END CASE
*-- GET TIME CODE
10050 *
BEGIN CASE
  CASE TYPE="M" OR TYPE="L" OR TYPE="I"
    TCODE=""
    P_X  = 35 ; P_Y = SLN ; P_VALUE = TCODE "L#2" ; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  CASE 1
    BEGIN CASE
      CASE TYPE="C" AND REF > 1
        TCODE=DTM.TIME.CODE<1,REF-1>
        P_X  = 35 ; P_Y = SLN ; P_VALUE = TCODE "L#2" ; P_OPT = ""
        CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      CASE 1
        X=35;Y=SLN;TYP=1;MAXL=2;O.R='O';HMSG="Enter Time Code: 01 = Reg, 02 = O/T, 03 = D/T "
        IF DTM.TIME.CODE<1,REF> # "" THEN
          DEFAULT=DTM.TIME.CODE<1,REF>
        END ELSE
          DEFAULT="01"
        END
        CALL EDIT.SUB
        IF VALUE='END' THEN GOTO 10990
        TCODE=VALUE
    END CASE
    MATREAD FCTR.REC FROM FACTOR,CONO:TCODE ELSE
      ERRMSG="Invalid time code. Try again! "
      GOSUB 91000
      GOTO 10050
    END
END CASE
*-- GET JOB TYPE
10060 *
BEGIN CASE
  CASE TYPE="L" OR TYPE="I"
    JTYPE=""
    SPOIL.CODE=""
    IF MODE="C" THEN
      P_X  = 38 ; P_Y = SLN ; P_VALUE = JTYPE "L#1" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    END
  CASE 1
    SPOIL.CODE=""
    BEGIN CASE
      CASE TYPE="C" AND REF > 1
        JTYPE=DTM.JOB.TYPE<1,REF-1>
        P_X  = 38 ; P_Y = SLN ; P_VALUE = JTYPE "L#1" ; P_OPT = ""
        CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*CASE OPER[1,1]="9"
* JTYPE="N"
* PRINT @(38,SLN):JTYPE "L#1"
      CASE 1
        X=38;Y=SLN;TYP=1;MAXL=1;O.R='O';HMSG="Enter Job Type: (R)eg, (N)on-chg, (C)hg-order, (S)poilage"
        IF PMT.FLG THEN VALDAT = DTM.JOB.TYPE<1,REF> ELSE VALDAT = "R" :VM: "N" :VM: "C" :VM: "S"
        IF DTM.JOB.TYPE<1,REF> # "" THEN
          DEFAULT = DTM.JOB.TYPE<1,REF>
        END ELSE
          IF JOB.TYPE # "" THEN
            DEFAULT=JOB.TYPE
          END ELSE
            DEFAULT="R"
          END
        END
        CALL EDIT.SUB
        IF VALUE='END' THEN GOTO 10990
        JTYPE=VALUE
    END CASE
    IF JOB.TYPE # "" AND JOB.TYPE # "R" AND JOB.TYPE # JTYPE THEN
      ERRMSG="Invalid type for specified job. Try again! "
      GOSUB 91000
      IF TYPE = "C" THEN
        GOTO 10020
      END ELSE
        GOTO 10060
      END
    END
*-- GET SPOILAGE CODE
10065 *
    IF JTYPE="S" AND CO.SPOIL.FLG="Y" THEN
      ECD.NUM=34
      IF DTM.SPOIL.CODE<1,REF> # "" THEN
        ECD.O.R="O"; ECD.DEFAULT=DTM.SPOIL.CODE<1,REF>
      END
      ECD.ACTION=4;CALL SCRN.EDIT
      IF ECD.RET.VALUE="END" THEN GOTO 10060
      SPOIL.CODE=ECD.RET.VALUE
      READ SPOIL.CODE.DESC FROM SPOILAGE.CODES,CONO:SPOIL.CODE ELSE
        ERRMSG="Invalid spoilage code. Try again! "
        GOSUB 91000
        GOTO 10065
      END
      SCV.REC(29)<1>="Spoilage Cd:"
      SCV.REC(30)<1>=SPOIL.CODE:" - ":SPOIL.CODE.DESC
      ECD.NUM=29;ECD.ACTION=5;CALL SCRN.EDIT
      ECD.NUM=30;ECD.ACTION=5;CALL SCRN.EDIT
      P_X  = 0 ; P_Y = 21 ; P_VALUE = "" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    END
END CASE
*-- GET START TIME
10070 *
BEGIN CASE
  CASE TYPE="M"
    STRT=""
    IF MODE="C" THEN
      P_X  = 40 ; P_Y = SLN ; P_VALUE = STRT "R#4" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    END
  CASE TYPE="C" AND REF > 1
    STRT=DTM.TIME.ST<1,REF-1>
    P_X  = 40 ; P_Y = SLN ; P_VALUE = STRT "R#4" ; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  CASE 1
    X=40;Y=SLN;TYP=3;MINL=3;MAXL=4;O.R='R';MINV="0000";MAXV="2359"
    HMSG="Enter operation start time HHMM."
    IF DTM.TIME.ST<1,REF>='' AND DTM.TIME<1,REF-1> # '' THEN
      DEFAULT=DTM.TIME<1,REF-1>; O.R = 'O'
    END ELSE
      DEFAULT='' ; O.R = 'R'
    END
    IF DTM.TIME.ST<1,REF> # "" THEN
      O.R='O';DEFAULT=DTM.TIME.ST<1,REF>
    END
    CALL EDIT.SUB
    IF VALUE='END' THEN GOTO 10990
    STRT=VALUE
    IF MOD(STRT,100) > 59 THEN
      ERRMSG="Invalid format. Try again! "
      GOSUB 91000
      GOTO 10070
    END
END CASE
*-- GET STOP TIME
10080 *
OPCMP=''
BEGIN CASE
  CASE TYPE="M"
    STPT=""
    IF MODE="C" THEN
      P_X  = 45 ; P_Y = SLN ; P_VALUE = STPT "R#4" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    END
  CASE TYPE="C" AND REF > 1
    STPT=DTM.TIME<1,REF-1>
    P_X  = 45 ; P_Y = SLN ; P_VALUE = STPT "R#4" ; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  CASE 1
    X=45;Y=SLN;TYP=3;MINL=3;MAXL=4;MINV="0000";MAXV="2359";O.R='R'
    HMSG="Enter operation stop time HHMM."
    IF DTM.TIME<1,REF> # "" THEN
      O.R='O';DEFAULT=DTM.TIME<1,REF>
    END
    CALL EDIT.SUB
    IF VALUE='END' THEN GOTO 10990
    STPT=VALUE
    IF MOD(STPT,100) > 59 THEN
      ERRMSG="Invalid format. Try again! "
      GOSUB 91000
      GOTO 10080
    END
    IF CO.PSS="Y" OR CO.PSS="T" THEN
      X=50;Y=SLN;TYP=8
      HMSG="Operation complete (Y/N)."
      DEFAULT=DTM.OPER.COMPLETE<1,REF>
      IF DEFAULT="Y" OR DEFAULT="N" THEN O.R='O'
      CALL EDIT.SUB
      IF VALUE='END' THEN GOTO 10990
      OPCMP=VALUE
    END
END CASE
*
*---- GET ADDITIONAL PROMPT FOR OPERATION
*
10085 *
START.CNT='';STOP.CNT='';WIDTH=''
AP.RESP='';AP.CODES=''
LVL='';PART=1;FND=0
IF AP.FLG<1,REF>='Y' THEN
  AP.RESP='';AP.CODES=''
  LVL='';PART=1;FND=0
  AP.CNT=DCOUNT(OPER.SF.PROMPT<1>,VM)
  FOR AP=1 TO AP.CNT
    MATREAD SFP.REC FROM SF.PROMPT,CONO:OPER.SF.PROMPT<1,AP> ELSE
      MAT SFP.REC=''
      ERRMSG = 'ADDITIONAL PROMPT ':OPER.SF.PROMPT<1,AP>:' DOESNOT EXIST'
      GOSUB 91000
      GOTO 10087
    END
    P_X  = 0 ; P_Y = 19 ; P_VALUE = "" ; P_OPT = "CL"
    P_X  := AM:0 ; P_Y := AM:19 ; P_VALUE := AM:SFP.PROMPT
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*
    TYP=SFP.RESP.TYPE
    MAXL=SFP.RESP.LEN
    SCALER=SFP.RESP.SCALER
    VALDAT=''
    IF SFP.VALDAT NE "" THEN
      VALDAT=CHANGE(SFP.VALDAT<1>,",",VM)
    END
    IF DTM.ADD.RESP<1,REF,AP>#'' THEN
      O.R='O'
      DEFAULT=DTM.ADD.RESP<1,REF,AP>
      IF TYP=4 THEN
        DEFAULT=OCONV(DEFAULT,"MD":SCALER)
      END
      IF TYP=6 THEN
        DEFAULT=OCONV(DEFAULT,"D2/")
      END
    END ELSE
      O.R='R'
      DEFAULT=''
    END
    X=23;Y=19
    CALL EDIT.SUB
    IF TYP > 0 AND TYP < 4 THEN
      IF VALUE NE "END" THEN
        IF LEN(VALUE) > SFP.RESP.LEN THEN
          ERRMSG = "RESPONSE LONGER THAN MAXIMUM VALUE"
          GOSUB 91000
          AP=AP-1
          GOTO 10087
        END
      END
    END
    IF VALUE NE "END" THEN AP.RESP<1,REF,AP>=VALUE ELSE GOTO 10990
    AP.CODES<1,REF,AP>=OPER.SF.PROMPT<1,AP>
*
10087 *
*
  NEXT AP
  P_X  = 0 ; P_Y = 19 ; P_VALUE = "" ; P_OPT = "CL"
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
END
*-- GET PRODUCTION QUANTITY
10090 *
BEGIN CASE
  CASE TYPE="M" OR TYPE="L" OR TYPE="I"
    IMP=""
    IF MODE="C" THEN
      P_X  = 52 ; P_Y = SLN ; P_VALUE = IMP "R#8" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    END
  CASE CCTR.OPER.TYPE<1,OP>="V"
    X=52;Y=SLN;TYP=3;MAXL=8;JUSTIFY='R';MINV=0;MAXV=99999999
    HMSG="Enter quantity produced."
    IF TYPE = "C" THEN O.R="O"
    IF DTM.IMP<1,REF> # "" THEN
      O.R='O';DEFAULT=DTM.IMP<1,REF>/100
    END
    CALL EDIT.SUB
    IF VALUE='END' THEN GOTO 10990
    IMP=VALUE
  CASE CCTR.OPER.TYPE<1,OP>="U"
    X=54;Y=SLN;TYP=4;MAXL=8;SCALER=2;JUSTIFY='R';MINV=0;MAXV=999999.99
    HMSG="Enter quantity produced."
    IF TYPE = "C" THEN O.R="O"
    IF DTM.IMP<1,REF> # "" THEN
      O.R='O';DEFAULT=OCONV(DTM.IMP<1,REF>,"MD2")
    END
    CALL EDIT.SUB
    IF VALUE='END' THEN GOTO 10990
    IMP=VALUE
  CASE 1
    IMP=""
    IF MODE="C" THEN
      P_X  = 52 ; P_Y = SLN ; P_VALUE = IMP "R#8" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    END
END CASE
*-- GET MATERIAL ID
10100 *
BEGIN CASE
  CASE PMT.FLG
    PROD=DTM.PROD<1,REF>
    WHSE=DTM.WHSE<1,REF>
    LOCAT=DTM.LOC<1,REF>
    SERIAL=DTM.SERIAL<1,REF>
    QTY=DTM.QTY<1,REF>
    SHEET=DTM.SHEET<1,REF>
    QTYPE=DTM.RS.QTYPE<1,REF>
    TS=DTM.TIME.STAMP<1,REF>
    IF TS="" THEN
      DATE.USED="";TIME.USED=""
    END ELSE
      DATE.USED=INT(TS/100000);TIME.USED=MOD(TS,10000)
    END
    ED.LS.FLG=DTM.ED.LS.FLG<1,REF>
    TMP.STATUS=""
*T22074 v
  CASE (TYPE="L") OR (TYPE="I") OR (TYPE="T" AND OPER.MATL.REQ="N") OR (TYPE = "C" AND OPER.MATL.REQ="N")
*      CASE (TYPE="L") OR (TYPE="I") OR (TYPE="T" AND OPER.MATL.REQ#"Y") OR (TYPE = "C" AND OPER.MATL.REQ#"Y")
*T22074 ^
    PROD=""
    WHSE=""
    LOCAT=""
    SERIAL=""
    QTY=""
    SHEET=""
    ED.LS.FLG=""
    TMP.STATUS=""
    IF MODE="C" THEN
      P_X  = 63 ; P_Y = SLN ; P_VALUE = PROD "L#15" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      P_X  = 63 ; P_Y = SLN+1 ; P_VALUE = QTY "R#8" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    END
  CASE 1
    ESTAT=""
    IF DATE.USED = "" THEN DATE.USED = DATE.WORKED ; * T26661
    CALL EPS.TIME.MATL.SUB (CONO, REF, SLN, MAT TEMP.REC, SHEET.OK, DEPT.WHSE, ESTAT,JOB.CUST)
    IF ESTAT="END" THEN GOTO 10990
END CASE
*-- CHECK ERROR STATUS
10120 *
IF TMP.STATUS="" THEN
  P_X  = 79 ; P_Y = SLN ; P_VALUE = " " ; P_OPT = ""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
END ELSE
  P_X  = 79 ; P_Y = SLN ; P_VALUE = "*" ; P_OPT = ""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
END
*-- LOAD DATA ITEM WITH MULTI-LINE VALUES
10900 *
DTM.TYPE<1,REF>=TYPE
DTM.JOB<1,REF>=JOB.NO
DTM.CUST<1,REF>=JOB.CUST
DTM.INIT<1,REF>=JINIT
DTM.DIV<1,REF>=JOB.DIV
DTM.DEPT<1,REF>=CCTR.DEPT
DTM.CCTR<1,REF>=CCTR
DTM.OPER<1,REF>=OPER
DTM.CLASS.CD<1,REF>=JOBCL
DTM.RATE<1,REF>=JOBRATE
DTM.TIME.CODE<1,REF>=TCODE
DTM.JOB.TYPE<1,REF>=JTYPE
DTM.SPOIL.CODE<1,REF>=SPOIL.CODE
DTM.TIME.ST<1,REF>=STRT
DTM.TIME<1,REF>=STPT
DTM.OPER.COMPLETE<1,REF>=OPCMP
BEGIN CASE
  CASE IMP=""
    DTM.IMP<1,REF>=IMP
  CASE CCTR.OPER.TYPE<1,OP>="V"
    DTM.IMP<1,REF>=IMP*100
  CASE 1
    DTM.IMP<1,REF>=IMP
END CASE
DTM.PROD<1,REF>=PROD
DTM.WHSE<1,REF>=WHSE
DTM.LOC<1,REF>=LOCAT
DTM.SERIAL<1,REF>=SERIAL
DTM.ED.LS.FLG<1,REF>=ED.LS.FLG
DTM.STATUS<1,REF>=TMP.STATUS
DTM.QTY<1,REF>=QTY
DTM.SHEET<1,REF>=SHEET
DTM.RS.QTYPE<1,REF> = QTYPE
IF DATE.USED # "" THEN
  DTM.TIME.STAMP<1,REF> = DATE.USED * 100000 + TIME.USED
END
DTM.ADD.PRMPT.CD<1,REF>=AP.CODES<1,REF>
DTM.ADD.RESP<1,REF>=AP.RESP<1,REF>
GOTO 10999
*-- BACKOUT ENTERED DATA
10990 *
MAT TEMP.REC=""
10999 *
SCV.REC(29)<1>=""
SCV.REC(30)<1>=""
ECD.NUM=29;ECD.ACTION=5;CALL SCRN.EDIT
ECD.NUM=30;ECD.ACTION=5;CALL SCRN.EDIT
RETURN
*-- GET LINE REFERENCE NUMBER
30000 *
ECD.NUM=32
ECD.MINV=CURR.REF.NO
ECD.MAXV=ECD.MINV+PAGE.SIZE-1
IF ECD.MAXV > CNT THEN ECD.MAXV=CNT
ECD.ACTION=4;CALL SCRN.EDIT
VALUE = ECD.RET.VALUE
RETURN
*-- DISPLAY MULTI-LINE DATA
50000 *
START.REF.NO=1+INT((REF-1)/PAGE.SIZE)*PAGE.SIZE
LAST.LINE=START.REF.NO + PAGE.SIZE - 1
IF LAST.LINE > CNT THEN LAST.LINE = CNT
IF START.REF.NO=CURR.REF.NO THEN GOTO 59999
CURR.REF.NO=START.REF.NO
LCNT=1
FOR N = START.REF.NO TO LAST.LINE
  SLN=BEGIN.PAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
  MATREAD CCTR.REC FROM COST.CNTR,CONO:DTM.CCTR<1,N> ELSE MAT CCTR.REC=""
  LOCATE DTM.OPER<1,N> IN CCTR.OPER<1>,1 SETTING FND.OP ELSE FND.OP=0
  IMPRESS=DTM.IMP<1,N>
  BEGIN CASE
    CASE IMPRESS=""
      TM.IMP=""
    CASE CCTR.OPER.TYPE<1,FND.OP>="V"
      TM.IMP=INT(IMPRESS/100)
    CASE 1
      TM.IMP=OCONV(IMPRESS,"MD2")
  END CASE
  BEGIN CASE
    CASE DTM.QTY<1,N>=''
      TM.QTY=''
    CASE DTM.SHEET<1,N> # ''
      TM.QTY=DTM.SHEET<1,N>
    CASE 1
      TM.QTY=OCONV(INT(DTM.QTY<1,N>/10),"MD2")
  END CASE
  IF DTM.STATUS<1,N> # "" THEN TM.STATUS="*" ELSE TM.STATUS=" "
  IF EMP.STATUS='S' THEN PRATE = OCONV(DTM.RATE<1,N>/100,'MD2') ELSE PRATE = OCONV(DTM.RATE<1,N>,'MD4')
  P_X  = 0 ; P_Y = SLN ; P_VALUE = N "R#2" ; P_OPT = ""
  P_X  := AM:3 ; P_Y := AM:SLN ; P_VALUE := AM:DTM.TYPE<1,N> "L#1"
  P_X  := AM:5 ; P_Y := AM:SLN ; P_VALUE := AM:DTM.JOB<1,N> "L#8"
  P_X  := AM:14 ; P_Y := AM:SLN ; P_VALUE := AM:DTM.CCTR<1,N> "L#3"
  P_X  := AM:18 ; P_Y := AM:SLN ; P_VALUE := AM:DTM.OPER<1,N> "L#4"
  P_X  := AM:23 ; P_Y := AM:SLN ; P_VALUE := AM:DTM.CLASS.CD<1,N> 'L#3'
*P_X  := AM:27 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(DTM.RATE<1,N>,'MD4')'L#7'
  P_X  := AM:27 ; P_Y := AM:SLN ; P_VALUE := AM:PRATE'L#7'
  P_X  := AM:35 ; P_Y := AM:SLN ; P_VALUE := AM:DTM.TIME.CODE<1,N> "L#2"
  P_X  := AM:38 ; P_Y := AM:SLN ; P_VALUE := AM:DTM.JOB.TYPE<1,N> "L#1"
  P_X  := AM:40 ; P_Y := AM:SLN ; P_VALUE := AM:DTM.TIME.ST<1,N> "R#4"
  P_X  := AM:45 ; P_Y := AM:SLN ; P_VALUE := AM:DTM.TIME<1,N> "R#4"
  P_X  := AM:50 ; P_Y := AM:SLN ; P_VALUE := AM:DTM.OPER.COMPLETE<1,N> "L#1"
  P_X  := AM:52 ; P_Y := AM:SLN ; P_VALUE := AM:TM.IMP "R#8"
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  FLAG=''
  IF OPER.SF.PROMPT<1,1>='N' OR OPER.SF.PROMPT<1,1>='' THEN FLAG='N' ELSE FLAG='Y'
  P_X  = 61 ; P_Y = SLN ; P_VALUE = FLAG "L#1" ; P_OPT = ""
  P_X  := AM:63 ; P_Y := AM:SLN ; P_VALUE := AM:DTM.PROD<1,N> "L#15"
  P_X  := AM:79 ; P_Y := AM:SLN ; P_VALUE := AM:TM.STATUS "L#1"
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  P_X  = 63 ; P_Y = SLN+1 ; P_VALUE = TM.QTY "R#8" ; P_OPT = ""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  LCNT = LCNT + 1
NEXT N
FOR M = LCNT TO PAGE.SIZE
  SLN=BEGIN.PAGE + LINE.SPACE * MOD(M-1,PAGE.SIZE)
  P_X  = 0 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  P_X  = 0 ; P_Y = SLN+1 ; P_VALUE = "" ; P_OPT = "CL"
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
NEXT M
59999 *
RETURN
*-- CALCULATE TIME DATA
70000 *
DTM.REG.TIME=""
DTM.OVR.TIME=""
DTM.DUB.TIME=""
DTM.LAPS.TIME=""
FOR LP=1 TO CNT
  TYPE=DTM.TYPE<1,LP>
  BEGIN CASE
*         CASE TYPE="L"  ;*T25688
    CASE TYPE="M"
    CASE 1
      STIME=DTM.TIME.ST<1,LP>
      ETIME=DTM.TIME<1,LP>
      IF ETIME < STIME THEN ETIME=ETIME+2400
      ELAP.MIN=(INT(ETIME/100)*60+MOD(ETIME,100))-(INT(STIME/100)*60+MOD(STIME,100))
      ELAP.HRS=INT(ELAP.MIN*100/60+0.5)
      TC=DTM.TIME.CODE<1,LP>
      BEGIN CASE
        CASE TC="01"
          DTM.REG.TIME<1,LP>=ELAP.HRS
        CASE TC="02"
          DTM.OVR.TIME<1,LP>=ELAP.HRS
        CASE TC="03"
          DTM.DUB.TIME<1,LP>=ELAP.HRS
        CASE 1                              ; * T22689 Added this line
*T26415 v             DTM.REG.TIME<1,LP>=ELAP.HRS       ; * T22689 Added this line
          IF TYPE # 'L' THEN DTM.REG.TIME<1,LP>=ELAP.HRS       ; * T22689 Added this line
      END CASE
      DTM.LAPS.TIME<1,LP>=ELAP.HRS
  END CASE
NEXT LP
*-- CALCULATE ACTIVE, IDLE AND TOTAL TIME
TTYPE=DTM.TYPE
STIME=DTM.TIME.ST
ETIME=DTM.TIME
ATIME=0
ITIME=0
TTIME=0
OVERLAP=0
CALL CALC.EMP.TIME (TTYPE, STIME, ETIME, ATIME, ITIME, TTIME, OVERLAP)
SCV.REC(41)<1>=OCONV(ATIME,"MD0Z")
SCV.REC(42)<1>=OCONV(ITIME,"MD0Z")
SCV.REC(43)<1>=OCONV(TTIME,"MD0Z")
ECD.NUM=41;ECD.ACTION=5;CALL SCRN.EDIT
ECD.NUM=42;ECD.ACTION=5;CALL SCRN.EDIT
ECD.NUM=43;ECD.ACTION=5;CALL SCRN.EDIT
IF NOT(OVERLAP) THEN
  DTM.CONC.TIME=""
  RETURN
END
*-- CALCULATE CONCURRENT TIME
TTYPE=DTM.TYPE
STIME=DTM.TIME.ST
ETIME=DTM.TIME
CTIME=""
ESTAT=""
CALL CALC.CONC.TIME (TTYPE,STIME,ETIME,CTIME,ESTAT)
DTM.CONC.TIME=CTIME
DFLG=0
FOR TP=1 TO CNT
  IF DTM.TYPE<1,TP>="L" OR DTM.TYPE<1,TP>="I" THEN
    BEGIN CASE
      CASE ESTAT<1,TP>="" AND DTM.STATUS<1,TP> # ""
        DTM.STATUS<1,TP>=""
        DFLG=1
      CASE ESTAT<1,TP> # "" AND DTM.STATUS<1,TP>=""
        DTM.STATUS<1,TP>="CONC ERROR"
        DFLG=1
    END CASE
  END
NEXT TP
IF DFLG THEN
  CURR.REF.NO=""
  GOSUB 50000
END
RETURN
*-- LOAD MULTI LINE DATA
80000 *
SCV.REC(12)<1>=DTM.TYPE
SCV.REC(54)<1>=DTM.JOB
SCV.REC(13)<1>=DTM.CCTR
SCV.REC(14)<1>=DTM.OPER
SCV.REC(16)<1>=DTM.TIME.CODE
SCV.REC(17)<1>=DTM.JOB.TYPE
SCV.REC(18)<1>=DTM.TIME.ST
SCV.REC(19)<1>=DTM.TIME
SCV.REC(20)<1>=""
SCV.REC(21)<1>=DTM.PROD
SCV.REC(22)<1>=""
SCV.REC(23)<1>=""
FOR REF=1 TO CNT
  IMP=DTM.IMP<1,REF>
  BEGIN CASE
    CASE IMP=""
    CASE IMP/100=INT(IMP/100)
      SCV.REC(20)<1,REF>=INT(IMP/100)
    CASE 1
      SCV.REC(20)<1,REF>=OCONV(IMP,"MD2")
  END CASE
  BEGIN CASE
    CASE DTM.QTY<1,REF>=""
    CASE DTM.SHEET<1,REF> # ""
      SCV.REC(22)<1,REF>=DTM.SHEET<1,REF>
    CASE 1
      SCV.REC(22)<1,REF>=OCONV(INT(DTM.QTY<1,REF>/10),"MD2")
  END CASE
  IF DTM.STATUS<1,REF> # "" THEN
    SCV.REC(23)<1,REF>="*"
  END
NEXT REF
RETURN
*-- GET AUTHORIZATION INITIALS
85000 *
ECD.RET.VALUE = ""
IF (JOB.STATUS<1,1> > 1 AND JOB.STATUS<1,1> # 5) OR JOB.TRACK.DATE<1,7> # "" OR JOB.TRACK.DATE<1,8> # "" THEN
85010 *
  ECD.NUM=33
  IF DTM.INIT<1,REF> # "" THEN
    ECD.O.R="O"; ECD.DEFAULT=DTM.INIT<1,REF>
  END
  ECD.ACTION=4;CALL SCRN.EDIT
  IF ECD.RET.VALUE="END" THEN GOTO 85999
  MATREAD JSI.REC FROM JOB.STAT.CODE,CONO:ECD.RET.VALUE ELSE
    ERRMSG="Invalid authorization. Try again."
    GOSUB 91000
    GOTO 85010
  END
  JINIT = ECD.RET.VALUE
END
85999 *
P_X=0 ; P_Y=21 ; P_VALUE='' ; P_OPT='CL'
CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)   
RETURN
*-- ERROR ROUTINE
91000 *
ERR.TYPE=1;CALL SYSCOM(MAT SYSCOM.REC);RETURN
93000 *
ERR.TYPE=3;CALL SYSCOM(MAT SYSCOM.REC)
*-- END OF PROGRAM
99999 *
* PRINT @(-1)
END
