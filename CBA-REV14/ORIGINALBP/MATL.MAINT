*COPY>CPYLIB>COM1
*********************************************************************
* REVISION    - [08.0B]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - JCSBP
* PROGRAM     - MATL.MAINT
* BY          - JIHAD YAMOUT, C.B.A
* DATE        - 12/20/85
* MODIFIED    - NLB
* DATE MOD    - 10/20/88
* COMMENTS    - ADDED CUSTOMER INVENTORY CHECK
* COMMENTS    - MODIFIED (1/26/89) TASK #12907 - IF JOB.STATUS = 5
* - (REOPENED) NO NEED TO REQUIRE AUTHORIZATION (RRG)
* DESCRIPTION -
*T19543 lanny 08/23/1995 * Infinte loop if roll skid stock has less than
*                          < 1 quantity
* T20629 gat 06/05/96 * RESET WHSE AND LOC ON NEW PRODUCT
* T20721 JR ASK FOR TIME STAMP WHEN USING "N" FOR NEXT QUANTITY
*C26626 LR IF ALL FIFO COSTS 0 & COST TYPE = FI DONOT PROMPT FOR COST
*T21177 diane 11/06/1996 * REV11 UPG
*T21634 lanny 02/25/1997 * Allow cost input only if COST TYPE = 'SD' or
*                          'LT'.
*T21673 lanny 03/04/1997 * Dead loop on roll skid entry if qty avail is
*                          zero.
*T21734 rick 03/20/1997 * Unit cost field will not allow use of 0 cost
*T22154 stefanie 08/19/1997 * Fix Rev10B to Rev11 match problems.
*T23278 markt 09/28/1998 * Check for division security
*T25468 lanny 10/16/2000 * DMT.USAGE.SEQ may get reset when pulling up
*                          record in maint - it should be set once and
*                          only once.
*T26334 edvard 12/12/2001 * REV12
*T26126 adelgado 03/08/2002 * Implement the LOCKED clause for READU.
*T26497 adelgado 04/02/2002 * Add validation rule for Inter-Divisional
*                             Whse.
*T25740 epitka 07/02/2002 * IF QTY ENTERED THEN DEFAULT THAT QTY INSTEAD
*                           OF SERIAL QTY.
*C40373 adelgado 08/12/2002 * Don't prompt for unit cost if no qty or
*                             cost exist in the current period; occurs
*                             only for new products.
*T27551 thompson 07/10/2003 * CHECK DAILY MATL SEQ NUMBER TO MAKE SURE OF 
*                           * SIX DIGITS ONLY
*T27622 lross 08/08/2003 * Issue warning message if entering cost for
*                          item not available until PERIOD + 1 or 2.
*T27897 thompson 01/22/2004 * Fix problem with error loop
*T28659 lross 08/31/2005 * Incorrect FIFO cost bucket pointer created on
*                          Task 27622.
*T28740 lross 12/05/2005 * If LOC changed QTY DEFAULT disappears if no
*                          DMT.STK.QTY available. Default in original
*                          qty or INV.WHSE.LOC qty for non-serially
*                          tracked items.
*T28956 thompson 07/21/2006 * Product amount not being calculated from
*                             Stock on SU and SR.
*********************************************************************
*
*---- COPY STATEMENTS
*
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>CUSTOMER
*COPY>PMC.CPYLIB>DIVISION
*COPY>PMC.CPYLIB>DEPARTMENT
*COPY>PMC.CPYLIB>COST.CNTR
*COPY>JCS.CPYLIB>JOB.CUTOFF.NO
*COPY>JCS.CPYLIB>JOB
*COPY>JCS.CPYLIB>DAILY.MATL
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>CATEGORY
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>ICS.CPYLIB>INV.CNV
*COPY>CPYLIB>GEN.XREF
*COPY>CPYLIB>SYSCOM
*COPY>CPYLIB>FILE.VARS
*COPY>JCS.CPYLIB>JOB.STAT.CODE
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>ICS.CPYLIB>INV_SERIAL
*COPY>CPYLIB>CHAR
*
DEFFUN CALC.STK.QTY(COST.QTY,MAT INV.CNV.REC,ROND,LN)
  * C40373 v
DEFFUN DIVISION.POSITION (CONO,CONTROL.FILE,DIV.CODE)
DEFFUN CURRENT.PERIOD(CONO,CONTROL.FILE,DIV.POS,FISCAL.FLAG)
CUR.PERIOD = ''
  * C40373 ^
DEFFUN CALC.COST.QTY(STK.QTY,MAT INV.CNV.REC,ROND,LN)
OPEN.FLAG=1
*
*---- INITIALIZE ERROR ROUTINE
*
SYS.TYPE=1;CALL SYSCOM(MAT SYSCOM.REC)
*
*---- OPEN ALL FILES
*
MAT FILE.VARS=""
OPEN "","JOB" TO JOB ELSE ERRMSG="JOB FILE IS MISSING";GOTO 93000
OPEN "","JOB.MATL" TO JOB.MATL ELSE
  ERRMSG="JOB.MATL FILE IS MISSING";GOTO 93000
END
OPEN "","JCS.SCREENS" TO M.SCREENS ELSE
  ERRMSG="FILE M.SCREENS IS MISSING";GOTO 93000
END
OPEN "","COMPANY" TO COMPANY ELSE
  ERRMSG="FILE COMPANY IS MISSING";GOTO 93000
END
OPEN "","CUSTOMER" TO CUSTOMER ELSE
  ERRMSG="FILE CUSTOMER IS MISSING";GOTO 93000
END
OPEN "","DIVISION" TO DIVISION ELSE
  ERRMSG="FILE DIVISION IS MISSING";GOTO 93000
END
OPEN "","DAILY.MATL" TO DAILY.MATL ELSE
  ERRMSG="FILE DAILY.MATLX IS MISSING";GOTO 93000
END
OPEN "","CATEGORY" TO CATEGORY ELSE
  ERRMSG="CATEGORY FILE IS MISSING";GOTO 93000
END
OPEN "","INVENTORY" TO INVENTORY ELSE
  ERRMSG="INVENTORY FILE IS MISSING";GOTO 93000
END
OPEN "","INVENTORY.XREF" TO INVENTORY.XREF ELSE
  ERRMSG="INVENTORY.XREF FILE IS MISSING";GOTO 93000
END
OPEN "","INV.WHSE" TO INV.WHSE ELSE
  ERRMSG="INV.WHSE FILE IS MISSING";GOTO 93000
END
OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE
  ERRMSG="INV.WHSE.LOC FILE IS MISSING";GOTO 93000
END
OPEN "","DEPARTMENT" TO DEPARTMENT ELSE
  ERRMSG="FILE DEPARTMENT IS MISSING";GOTO 93000
END
OPEN "","COST.CNTR" TO COST.CNTR ELSE
  ERRMSG="FILE COST.CNTR IS MISSING";GOTO 93000
END
OPEN "","PREFIX" TO PREFIX ELSE
  ERRMSG="FILE PREFIX IS MISSING";GOTO 93000
END
OPEN "","CONTROL" TO CONTROL ELSE
  ERRMSG="FILE CONTROL IS MISSING";GOTO 93000
END
OPEN "","SPOILAGE.CODES" TO SPOILAGE.CODES ELSE
  ERRMSG="FILE SPOILAGE.CODES IS MISSING";GOTO 93000
END
OPEN "","JOB.STAT.CODE" TO JOB.STAT.CODE ELSE
  ERRMSG="FILE JOB.STAT.CODE IS MISSING";GOTO 93000
END
OPEN "","WAREHOUSE" TO WAREHOUSE ELSE
  ERRMSG="FILE WAREHOUSE IS MISSING";GOTO 93000
END
OPEN "","INV_SERIAL" TO INV_SERIAL ELSE
  ERRMSG="FILE INV_SERIAL IS MISSING";GOTO 93000
END
*
*---- INITIALIZATION
*
MAT COMP.REC=""
CONO=""
CALL GET.CONO(CONO,MAT COMP.REC)
IF CONO="END" THEN GOTO 99999
SERIAL=""
MATREAD JOB.CUTOFF.REC FROM CONTROL,CONO:"JOB.CUTOFF.NO" ELSE
  MAT JOB.CUTOFF.REC=""
  J.CUTOFF.NUM=0
END
MAT EDIT.COM="";MAT EDIT.COM.DRIVER="";MAT GEN.XREF.REC=""
UNKNOWN="UNKNOWN"
GXR.CO=CONO
GXR.HEADING<1,2>="DESCRIPTION"
GXR.ATT<1,1>=0;GXR.ATT<1,2>=2;GXR.LEN<1,1>=5;GXR.LEN<1,2>=30
ECD.SCRN.CNT=1
ECD.SCRN.NAME<1>="MATL.MAINT"
ECD.ACTION=1;CALL SCRN.EDIT
ECD.SCRN.NO=1
*
*---- MAIN PROCESSING
*
100*
RELEASE      ;* T26126
MAT DMT.REC="";MAT SCV.REC=""
CHECK.COST=0;NEXT.ENTRY=""
RSI.HMSG=""
ECD.ACTION=6;CALL SCRN.EDIT
ECD.NUM=1;ECD.VALDAT.CODE=5;ECD.VALDAT.FILE=DAILY.MATL     ;* T26126
ECD.PREFIX.ID=CONO
ECD.ACTION=4;CALL SCRN.EDIT
BEGIN CASE
  CASE ECD.RET.VALUE="END"
    GOTO 99999
  CASE ECD.RET.VALUE="N"
    DMT.SEQ.NO=ECD.RET.VALUE
    SCV.REC(1)<1>=DMT.SEQ.NO
    ECD.NUM=1;ECD.ACTION=5;CALL SCRN.EDIT
200*
    SCV.REC(2)<1>=DMT.JOB;* T23278
    ECD.NUM=2;ECD.ACTION=4;CALL SCRN.EDIT
    IF ECD.RET.VALUE="END" THEN GOTO 100
    POST.OSJ=0
    JOB.ID=CONO:ECD.RET.VALUE
    JOB.NO=ECD.RET.VALUE
    MATREAD JOB.REC FROM JOB,JOB.ID ELSE
      MAT JOB.REC=""
      FND=0
      IF NUM(ECD.RET.VALUE) THEN
        IF ECD.RET.VALUE < J.CUTOFF.NUM THEN FND=1
      END ELSE
        JC.CNT=DCOUNT(J.CUTOFF.PREFIX,VM)
        FOR L=1 TO JC.CNT WHILE FND=0
          PREFX.LEN=LEN(J.CUTOFF.PREFIX<1,L>)
          IF J.CUTOFF.PREFIX<1,L>=ECD.RET.VALUE[1,PREFX.LEN] THEN
            CHK.VALUE=ECD.RET.VALUE[PREFX.LEN+1,LEN(ECD.RET.VALUE)-PREFX.LEN]
            IF NUM(CHK.VALUE) THEN
              IF CHK.VALUE < J.CUTOFF.PRE.NO<1,L> THEN FND=1
            END
          END
        NEXT L
      END
      IF FND=1 THEN
        JOB.DESC<1,1>="* * OUTSIDE JOB * *"
        POST.OSJ=1
      END ELSE
        ERRMSG="JOB IS NOT ON FILE. TRY AGAIN !!"
        GOSUB 91000;GOTO 200
      END
    END
    DIV.CODE = JOB.DIV; USER.ID = UPCASE(@LOGNAME); ERRMSG = ''
    CALL CK.DIV.SEC.SUB(CONO,DIV.CODE,USER.ID,ERRMSG)
    IF ERRMSG # '' THEN
      GOSUB 91000; GOTO 200
    END
    BEGIN CASE
      CASE JOB.STATUS<1,1>=9
        ERRMSG="THIS JOB HAS BEEN CANCELLED";GOSUB 91000;GOTO 200
      CASE JOB.STATUS<1,1>=7
        ERRMSG="THIS JOB IS READY TO BE PURGED";GOSUB 91000;GOTO 200
      CASE JOB.STATUS<1,1>=8
        ERRMSG="THIS JOB HAS BEEN PURGED";GOSUB 91000;GOTO 200
    END CASE
    GOSUB 7000
    IF VALUE="END" THEN GOTO 200
    IF CO.JOB.CUST.FLG="C" AND POST.OSJ=0 THEN
      CUST.ID=CONO:JOB.CUST
      MATREAD CUST.REC FROM CUSTOMER,CUST.ID ELSE
        CUST.NAME=UNKNOWN
      END
      JOB.DESC<1,1>=CUST.NAME
    END
    DMT.JOB=ECD.RET.VALUE
    ECD.NUM=3;SCV.REC(3)<1>=JOB.DESC<1,1>;ECD.ACTION=5;CALL SCRN.EDIT
    IF POST.OSJ=0 THEN
      DMT.DIV=JOB.DIV
      ECD.NUM=4;SCV.REC(4)<1>=DMT.DIV;ECD.ACTION=5;CALL SCRN.EDIT
      DIV.ID=CONO:DMT.DIV
      MATREAD DIV.REC FROM DIVISION,DIV.ID ELSE DIV.DESC=UNKNOWN
      ECD.NUM=5;SCV.REC(5)<1>=DIV.DESC;ECD.ACTION=5;CALL SCRN.EDIT
    END
    SPTR=1
    FOR REQUEST=1 TO 7 WHILE ECD.RET.VALUE # "END"
      ON REQUEST GOSUB GET.COST.CENTER,EDIT.USAGE.TYPE,ENT.DATE.USED,ENT.PROD.INFO,ENT.QTY.TYPE,ENT.TIME.USED,ENT.MATERIAL.COST
    NEXT REQUEST
    IF ECD.RET.VALUE="END" THEN GOTO 100
  CASE ECD.VALDAT.ITEM # ""
    FOR I=1 TO DMT.REC.SIZE;DMT.REC(I)=ECD.VALDAT.ITEM<I>;NEXT I
    DIV.CODE = DMT.DIV; USER.ID = UPCASE(@LOGNAME); ERRMSG = ''
    CALL CK.DIV.SEC.SUB(CONO,DIV.CODE,USER.ID,ERRMSG)
    IF ERRMSG # '' THEN
      GOSUB 91000; GOTO 100
    END
    DMT.SEQ.NO=ECD.RET.VALUE
    POST.OSJ=0
    JOB.ID=CONO:DMT.JOB
    JOB.NO=DMT.JOB
    MATREAD JOB.REC FROM JOB,JOB.ID ELSE
      MAT JOB.REC=""
      FND=0
      IF NUM(DMT.JOB) THEN
        IF DMT.JOB < J.CUTOFF.NUM THEN FND=1
      END ELSE
        JC.CNT=DCOUNT(J.CUTOFF.PREFIX,VM)
        FOR L=1 TO JC.CNT WHILE FND=0
          PREFX.LEN=LEN(J.CUTOFF.PREFIX<1,L>)
          IF J.CUTOFF.PREFIX<1,L>=DMT.JOB[1,PREFX.LEN] THEN
            CHK.VALUE=DMT.JOB[PREFX.LEN+1,LEN(DMT.JOB)-PREFX.LEN]
            IF NUM(CHK.VALUE) THEN
              IF CHK.VALUE < J.CUTOFF.PRE.NO<1,L> THEN FND=1
            END
          END
        NEXT L
      END
      IF FND=1 THEN
        JOB.DESC<1,1>="* * OUTSIDE JOB * *"
        POST.OSJ=1
      END ELSE
        JOB.DESC<1,1>=UNKNOWN
      END
    END
    IF CO.JOB.CUST.FLG="C" AND POST.OSJ=0 THEN
      CUST.ID =CONO:JOB.CUST
      MATREAD CUST.REC FROM CUSTOMER,CUST.ID ELSE
        CUST.NAME=UNKNOWN
      END
      JOB.DESC<1,1>=CUST.NAME
    END
    DIV.ID=CONO:DMT.DIV                      
    MATREAD DIV.REC FROM DIVISION,DIV.ID ELSE
      MAT DIV.REC="";DIV.DESC=UNKNOWN
    END
    DEPT.ID=CONO:DMT.DEPT
    MATREAD DEPT.REC FROM DEPARTMENT,DEPT.ID ELSE
      MAT DEPT.REC="";DEPT.DESC=UNKNOWN
    END
    CCTR.ID=CONO:DMT.CCTR
    MATREAD CCTR.REC FROM COST.CNTR,CCTR.ID ELSE
      MAT CCTR.REC="";CCTR.DESC=UNKNOWN
    END
    IF CCTR.TYPE="F" THEN CCTR.DESC="COST CENTER IS FROZEN"
    INV.ID=CONO:DMT.PROD
    MATREAD INV.REC FROM INVENTORY,INV.ID ELSE
      MAT INV.REC="";INV.FULL.DESC=UNKNOWN
    END
    LOCATE DMT.WHSE IN INV.WHSE.CODE<1>,1 SETTING WFND ELSE WFND=0
    CATG.ID=CONO:INV.LINE
    MATREAD CATG.REC FROM CATEGORY,CATG.ID ELSE MAT CATG.REC=''
    GOSUB GET.INV.CNV
    IWH.ID=CONO:DMT.PROD:"!":DMT.WHSE
    MATREAD IWH.REC FROM INV.WHSE,IWH.ID ELSE MAT IWH.REC=''
    ISTK.ID=CONO:DMT.SERIAL
    MATREAD ISTK.REC FROM INV_SERIAL,ISTK.ID ELSE MAT ISTK.REC=''
    GOSUB CHECK.MATL.RESV
    SCV.REC(2)<1>=DMT.JOB
    SCV.REC(3)<1>=JOB.DESC<1,1>
    SCV.REC(4)<1>=DMT.DIV
    SCV.REC(5)<1>=DIV.DESC
    SCV.REC(6)<1>=DMT.DEPT
    SCV.REC(7)<1>=DEPT.DESC
    SCV.REC(8)<1>=DMT.CCTR
    SCV.REC(9)<1>=CCTR.DESC
    SCV.REC(10)<1>=DMT.TYPE
    SCV.REC(24)<1>=DMT.SPOIL.CODE
    GOSUB GET.ENTRY.TYPE
    SCV.REC(12)<1>=DMT.DATE
    SCV.REC(13)<1>=DMT.PROD
    SCV.REC(14)<1>=INV.FULL.DESC
    SCV.REC(15)<1>=DMT.WHSE
    SCV.REC(16)<1>=DMT.LOC
    IF CATG.TRK.LVL='S' THEN
      SCV.REC(17)<1>=DMT.SERIAL
    END
    SCV.REC(26)<1>=DMT.RS.QTYPE
    IF DMT.RS.QTYPE="DR" THEN
      SCV.REC(19)<1>=OCONV(INT(DMT.QTY/10),"MD2")
    END ELSE
      SCV.REC(19)<1>=OCONV(CALC.STK.QTY(DMT.QTY,MAT INV.CNV.REC,'.5',''),ICR.CNV)
    END
    BEGIN CASE
      CASE DMT.RS.QTYPE="WU"
        QDESC="Weight used"
      CASE DMT.RS.QTYPE="WR"
        QDESC="Weight remaining"
      CASE DMT.RS.QTYPE="DR"
        QDESC="Diameter remaining"
      CASE DMT.RS.QTYPE[2,1]="U" AND INV.UNIT<1,2>="FT"
        QDESC="Feet used"
      CASE DMT.RS.QTYPE[2,1]="U" AND INV.UNIT<1,2>="PC"
        QDESC="Press counts used"
      CASE DMT.RS.QTYPE="SU"
        QDESC="Stock used"
      CASE DMT.RS.QTYPE="SR"
        QDESC="Stock remaining"
      CASE 1
        QDESC= INV.UNIT<1,2>
    END CASE
    SCV.REC(18)<1>=QDESC
    SCV.REC(27)<1>=OCONV(DMT.TIME,"MTS")
    SCV.REC(22)<1>=DMT.COST
    ECD.ACTION=3;CALL SCRN.EDIT
    LOCATE DMT.LOC IN IWH.LOC<1>,1 SETTING LFND ELSE LFND=0
    IWLO.ID=CONO:DMT.PROD:"!":DMT.WHSE:"!":DMT.LOC
    MATREAD IWLO.REC FROM INV.WHSE.LOC,IWLO.ID ELSE MAT IWLO.REC=''
    IF DMT.SERIAL # "" THEN
      LOCATE DMT.SERIAL IN IWLO.SERIAL<1>,1 SETTING RFND ELSE RFND=0
    END ELSE
      RFND=0
    END
    IF DMT.INIT="" THEN
      GOSUB 7000
      IF VALUE="END" THEN GOTO 100
    END
  CASE 1
    ERRMSG="* * INVALID SEQUENCE # * *"
    GOSUB 91000;GOTO 100
END CASE
*
*---- GET OPERATOR REQUEST
*
MORE=1
LOOP
  ECD.MAXV="";ECD.MINV="";ECD.VALDAT=""
  ECD.NUM=23;SCV.REC(23)<1>="";ECD.ACTION=4;CALL SCRN.EDIT
  REQUEST=ECD.RET.VALUE
  BEGIN CASE
    CASE REQUEST="END" OR REQUEST="E"
      MORE=0
    CASE NUM(REQUEST)
      BEGIN CASE
        CASE REQUEST >= 1 AND REQUEST <= 3
          ON REQUEST GOSUB GET.COST.CENTER,EDIT.USAGE.TYPE,ENT.DATE.USED
        CASE REQUEST=4
          SPTR=1
          GOSUB ENT.PROD.INFO
          GOSUB ENT.QTY.TYPE
          GOSUB ENT.MATERIAL.COST
        CASE REQUEST=5
          GOSUB ENT.QTY.TYPE
        CASE REQUEST=6
          GOSUB ENT.TIME.USED
        CASE REQUEST=7
          GOSUB ENT.MATERIAL.COST
          IF CHECK.COST <> 0 THEN
            ERRMSG="Cost may not be modified when defined on Inventory file"
            GOSUB 91000
          END
      END CASE
    CASE REQUEST="N"
      IF DMT.SEQ.NO="N" THEN
        GOSUB GET.SEQ.NO
      END
      MATWRITE DMT.REC ON DAILY.MATL,CONO:DMT.SEQ.NO
      DMT.SEQ.NO="N"
      SCV.REC(1)<1>=DMT.SEQ.NO
      ECD.NUM=1;ECD.ACTION=5;CALL SCRN.EDIT
      DMT.QTY='';DMT.STK.QTY=''
      DMT.SERIAL="";DMT.DESC="";DMT.PRT.DATE=""
      DMT.STATUS=""
      SCV.REC(17)<1>="";ECD.NUM=17;ECD.ACTION=5;CALL SCRN.EDIT
      SCV.REC(26)<1>="";ECD.NUM=26;ECD.ACTION=5;CALL SCRN.EDIT
      SCV.REC(19)<1>="";ECD.NUM=19;ECD.ACTION=5;CALL SCRN.EDIT
      SCV.REC(18)<1>="";ECD.NUM=18;ECD.ACTION=5;CALL SCRN.EDIT
      SCV.REC(27)<1>="";ECD.NUM=27;ECD.ACTION=5;CALL SCRN.EDIT
      SCV.REC(22)<1>="";ECD.NUM=22;ECD.ACTION=5;CALL SCRN.EDIT
      SPTR=1
      XXX = 4; ECD.RET.VALUE = ""
      FOR XXXPTR = 1 TO XXX UNTIL ECD.RET.VALUE = "END"
        ON XXXPTR GOSUB ENT.PROD.INFO,ENT.QTY.TYPE,ENT.TIME.USED,ENT.MATERIAL.COST
      NEXT XXXPTR
      IF ECD.RET.VALUE = "END" THEN MORE = 0
    CASE REQUEST="F"
      IF DMT.SEQ.NO="N" THEN
        GOSUB GET.SEQ.NO
      END
      DMT.PRT.DATE=""
      MATWRITE DMT.REC ON DAILY.MATL,CONO:DMT.SEQ.NO
      MORE=0
    CASE REQUEST="D"
      DELETE DAILY.MATL,CONO:DMT.SEQ.NO
      MORE=0
  END CASE
WHILE MORE DO
REPEAT
GOTO 100
*
*****************
GET.SEQ.NO: 
*****************
*
READU MATL.ENT.SEQ FROM CONTROL,CONO:"DAILY.MATL" ELSE MATL.ENT.SEQ=10001
LOOP
  READ CK.FLG FROM DAILY.MATL,CONO:MATL.ENT.SEQ ELSE CK.FLG=""
WHILE CK.FLG # "" DO
  MATL.ENT.SEQ=MATL.ENT.SEQ+1
REPEAT
DMT.SEQ.NO=MATL.ENT.SEQ
MATL.ENT.SEQ=MATL.ENT.SEQ+1
IF MATL.ENT.SEQ > 999999 THEN MATL.ENT.SEQ = 10001; * T27551
WRITE MATL.ENT.SEQ ON CONTROL,CONO:"DAILY.MATL"
SCV.REC(1)<1>=DMT.SEQ.NO
ECD.NUM=1;ECD.ACTION=5;CALL SCRN.EDIT
ERRMSG="Please Note New Sequence Number";GOSUB 91000
RETURN
*
***************
GET.INV.CNV: 
***************
*
*COPY>ICSBP>INV.UM.CNV
RETURN
*
****************
GET.ENTRY.TYPE: 
****************
*
BEGIN CASE
  CASE DMT.TYPE="N"
    SCV.REC(11)<1>="NON CHARGABLE"
  CASE DMT.TYPE="C"
    SCV.REC(11)<1>="CHANGE ORDER"
  CASE DMT.TYPE="S"
    SCV.REC(11)<1>="SPOILAGE"
  CASE 1
    SCV.REC(11)<1>="REGULAR"
END CASE
IF DMT.TYPE="S" THEN
  READ SPOIL.CODE.DESC FROM SPOILAGE.CODES,CONO:DMT.SPOIL.CODE ELSE SPOIL.CODE.DESC="SPOILAGE CODE UNKNOWN"
  SCV.REC(25)<1>=SPOIL.CODE.DESC
END ELSE
  SCV.REC(25)<1>=""
END
RETURN
*
****************
GET.COST.CENTER: 
****************
*
ECD.NUM=8;ECD.VALDAT.CODE=2;ECD.VALDAT.FILE=COST.CNTR;ECD.PREFIX.ID=CONO
ECD.ACTION=4;CALL SCRN.EDIT
BEGIN CASE
  CASE ECD.RET.VALUE="END"
    GOTO 1999
  CASE ECD.VALDAT.ITEM # ""
    FOR K=1 TO CCTR.REC.SIZE;CCTR.REC(K)=ECD.VALDAT.ITEM<K>;NEXT K
    IF CCTR.TYPE="F" THEN
      ERRMSG="COST CENTER IS FROZEN";GOSUB 91000;GOTO GET.COST.CENTER
    END
    DMT.CCTR=ECD.RET.VALUE
    DMT.DEPT=CCTR.DEPT
    DEPT.ID=CONO:DMT.DEPT
    MATREAD DEPT.REC FROM DEPARTMENT,DEPT.ID ELSE
      MAT DEPT.REC="";DEPT.DESC=UNKNOWN
    END
    ECD.NUM=6;SCV.REC(6)<1>=DMT.DEPT;ECD.ACTION=5;CALL SCRN.EDIT
    ECD.NUM=7;SCV.REC(7)<1>=DEPT.DESC;ECD.ACTION=5;CALL SCRN.EDIT
    ECD.NUM=9;SCV.REC(9)<1>=CCTR.DESC;ECD.ACTION=5;CALL SCRN.EDIT
  CASE ECD.RET.VALUE="???"
    GXR.XREF=DIVISION
    GXR.FILE=DEPARTMENT
    GXR.TOP.LINE="DEPARTMENT XREF SEARCH"
    GXR.HEADING<1,1>="DEPT"
    GXR.ATT<1,2>=2
    GXR.LOC=2
    GXR.ID=""
    GXR.SRCH.ID=DMT.DIV
    CALL GEN.XREF(MAT GEN.XREF.REC,PREFIX)
    IF GXR.ID="" THEN ECD.ACTION=2;CALL SCRN.EDIT;ECD.ACTION=3;CALL SCRN.EDIT;GOTO GET.COST.CENTER
    DEPT.ID=CONO:GXR.ID
    MATREAD DEPT.REC FROM DEPARTMENT,DEPT.ID ELSE
      ERRMSG="DEPARTMENT ":GXR.ID:" IS MISSING"
      GOSUB 91000;ECD.ACTION=2;CALL SCRN.EDIT;ECD.ACTION=3;CALL SCRN.EDIT;GOTO GET.COST.CENTER
    END
    DMT.DEPT=GXR.ID
    SCV.REC(6)<1>=DMT.DEPT
    SCV.REC(7)<1>=DEPT.DESC
    GXR.XREF=DEPARTMENT;GXR.FILE=COST.CNTR
    GXR.TOP.LINE="COST CENTER XREF SEARCH"
    GXR.HEADING<1,1>="CCTR"
    GXR.ATT<1,2>=1
    GXR.LOC=5
    GXR.ID=""
    GXR.SRCH.ID=DMT.DEPT
    CALL GEN.XREF(MAT GEN.XREF.REC,PREFIX)
    ECD.ACTION=2;CALL SCRN.EDIT
    IF GXR.ID="" THEN
      ECD.ACTION=3;CALL SCRN.EDIT;GOTO GET.COST.CENTER
    END ELSE
      CCTR.ID=CONO:GXR.ID
      MATREAD CCTR.REC FROM COST.CNTR,CCTR.ID ELSE
        ERRMSG="COST.CNTR ":GXR.ID:" IS MISSING"
        GOSUB 91000;ECD.ACTION=3;CALL SCRN.EDIT;GOTO GET.COST.CENTER
      END
      IF CCTR.DEPT # DMT.DEPT THEN
        ERRMSG="INCORRECT DEPARTMENT FOR COST CENTER ":GXR.ID
        GOSUB 91000;ECD.ACTION=3;CALL SCRN.EDIT;GOTO GET.COST.CENTER
      END
      IF CCTR.TYPE="F" THEN
        ERRMSG="COST CENTER ":GXR.ID:" IS FROZEN";GOSUB 91000
        ECD.ACTION=3;CALL SCRN.EDIT;GOTO GET.COST.CENTER
      END
      DMT.CCTR=GXR.ID
      SCV.REC(8)<1>=DMT.CCTR
      SCV.REC(9)<1>=CCTR.DESC
      ECD.ACTION=3;CALL SCRN.EDIT
    END
  CASE 1
    GOTO GET.COST.CENTER
END CASE
IF POST.OSJ THEN
  DCNT=DCOUNT(DEPT.DIV,VM)
  BEGIN CASE
    CASE DCNT < 1
      ERRMSG="NO DIVISIONS FOR COST CENTER DEPARTMENT"
      GOSUB 91000;GOTO GET.COST.CENTER
    CASE DCNT=1
      ECD.NUM=4;SCV.REC(4)<1>=DEPT.DIV<1,1>;ECD.ACTION=5;CALL SCRN.EDIT
      DIV.ID=CONO:DEPT.DIV<1,1>
      MATREAD DIV.REC FROM DIVISION,DIV.ID ELSE
        ERRMSG="DEPARTMENT DIVISION IS MISSING"
        GOSUB 91000;GOTO GET.COST.CENTER
      END
      DMT.DIV=DEPT.DIV<1,1>
    CASE 1
1050*
      ECD.VALDAT=DEPT.DIV<1,1>
      DV=1
      ECD.HMSG<1,1,DV>="VALID DIVISIONS - ":DEPT.DIV<1,1>
      FOR K=2 TO DCNT
        ECD.VALDAT=ECD.VALDAT :",":DEPT.DIV<1,K>
        IF LEN(ECD.HMSG<1,1,DV>) > 70 THEN DV=DV+1
        ECD.HMSG<1,1,DV>=ECD.HMSG<1,1,DV>:", ":DEPT.DIV<1,K>
      NEXT K
      ECD.NUM=4;ECD.ACTION=4;CALL SCRN.EDIT
      BEGIN CASE
        CASE ECD.RET.VALUE="END"
          GOTO GET.COST.CENTER
        CASE ECD.RET.VALUE # ""
          DIV.ID=CONO:ECD.RET.VALUE
          MATREAD DIV.REC FROM DIVISION,DIV.ID ELSE
            ERRMSG=ECD.RET.VALUE:" IS NOT ON FILE"
            GOSUB 91000;GOTO 1050
          END
          DMT.DIV=ECD.RET.VALUE
        CASE 1
          GOTO 1050
      END CASE
  END CASE
  ECD.NUM=5;SCV.REC(5)<1>=DIV.DESC;ECD.ACTION=5;CALL SCRN.EDIT
END ELSE
  LOCATE JOB.DIV IN DEPT.DIV<1>,1 SETTING DVFND ELSE
    ERRMSG="Division/Department Mismatch"
    GOSUB 91000
    GOTO GET.COST.CENTER
  END
END
*
1999*
RETURN
*
*****************
EDIT.USAGE.TYPE: 
*****************
*
ECD.NUM=10
BEGIN CASE
  CASE JOB.TYPE="N"
    SCV.REC(10)<1>=JOB.TYPE;ECD.ACTION=5;CALL SCRN.EDIT
    DMT.TYPE=JOB.TYPE
  CASE JOB.TYPE="S"
    SCV.REC(10)<1>=JOB.TYPE;ECD.ACTION=5;CALL SCRN.EDIT
    DMT.TYPE=JOB.TYPE
  CASE JOB.TYPE="C"
    SCV.REC(10)<1>=JOB.TYPE;ECD.ACTION=5;CALL SCRN.EDIT
    DMT.TYPE=JOB.TYPE
  CASE 1
    ECD.ACTION=4;CALL SCRN.EDIT
    IF ECD.RET.VALUE # "END" THEN DMT.TYPE=ECD.RET.VALUE
END CASE
GOSUB GET.ENTRY.TYPE
ECD.NUM=11;ECD.ACTION=5;CALL SCRN.EDIT
2001*
IF CO.SPOIL.FLG="Y" AND DMT.TYPE="S" THEN
  ECD.NUM=24;ECD.ACTION=4;CALL SCRN.EDIT
  IF ECD.RET.VALUE="END" THEN GOTO EDIT.USAGE.TYPE
  READ SPOIL.CODE.DESC FROM SPOILAGE.CODES,CONO:ECD.RET.VALUE ELSE
    ERRMSG="SPOILAGE CODE (":ECD.RET.VALUE:") NOT ON FILE"
    GOSUB 91000;GOTO 2001
  END
  DMT.SPOIL.CODE=ECD.RET.VALUE
END ELSE
  DMT.SPOIL.CODE=""
  SPOIL.CODE.DESC=""
  SCV.REC(24)<1>=""
  ECD.NUM=24;ECD.ACTION=5;CALL SCRN.EDIT
END
SCV.REC(25)<1>=SPOIL.CODE.DESC
ECD.NUM=25;ECD.ACTION=5;CALL SCRN.EDIT
RETURN
*
**************
ENT.DATE.USED: 
**************
*
ECD.NUM=12;ECD.ACTION=4;CALL SCRN.EDIT
*CSF 24551 v
*     IF ECD.RET.VALUE # "END" THEN DMT.DATE=ECD.RET.VALUE
IF ECD.RET.VALUE # "END" THEN
  DMT.DATE=ECD.RET.VALUE
  IF DMT.SEQ.NO = 'N' THEN
    DMT.USAGE.SEQ=ECD.RET.VALUE*100000 + TIME()
  END
END
RETURN
*
***************
ENT.PROD.INFO: 
***************
*
SCV.REC(17)<1>=DMT.SERIAL
ECD.NUM=17
ECD.O.R="O"
ECD.ACTION=4;CALL SCRN.EDIT
IF ECD.RET.VALUE="END" THEN RETURN
IF ECD.RET.VALUE="" THEN
  SERIAL=""
  MAT ISTK.REC=""
END ELSE
  ISTK.ID=CONO:ECD.RET.VALUE
  MATREAD ISTK.REC FROM INV_SERIAL,ISTK.ID ELSE
    ERRMSG="INVALID SERIAL - ":ECD.RET.VALUE
    GOSUB 91000
    PMSG="DO YOU WISH TO ENTER NEW PRODUCT INFO <Y/RET>"
    X=0;Y=21;MAXL=3;TYP=1; O.R = "O"
    CALL EDIT.SUB
    P_X = 0 ; P_Y = 21 ; P_VALUE = "" ; P_OPT = "CL"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    IF VALUE="Y" THEN
      MAT ISTK.REC=""
      GOTO 4050
    END ELSE
      GOTO ENT.PROD.INFO
    END
  END
    * T26497 v
  IF CO.INTR.WHSE # '' AND ISTK.WHSE = CO.INTR.WHSE THEN
    ERRMSG = 'CAN NOT USE SERIAL FROM INTER-DIVISIONAL WAREHOUSE'
    GOSUB 91000 ; GOTO ENT.PROD.INFO
  END
    * T26497 ^
  IF ISTK.POST.DATE = '' THEN
    ERRMSG = 'SERIAL NOT RECEIVED' ; GOSUB 91000 ; GOTO ENT.PROD.INFO
  END
  LOCATE DMT.JOB IN ISTK.JOB<1> SETTING JPOS THEN
    RSVBLE=ISTK.RSVB.QTY+ISTK.JRSVD.QTY<1,JPOS>
  END ELSE
    RSVBLE=ISTK.RSVB.QTY
  END
  IF RSVBLE=0 THEN
    ERRMSG='NO QUANTITY AVAILABLE ON THE SERIAL';GOSUB 91000;GOTO ENT.PROD.INFO
  END
  SERIAL=ECD.RET.VALUE
END
4050*
LOOP
  ON SPTR GOSUB ENT.PROD.ID,ENT.WHSE,ENT.LOC,ENT.SERIAL
  IF ECD.RET.VALUE="END" THEN
    SPTR=SPTR-1
  END ELSE
    SPTR=SPTR+1
  END
WHILE SPTR >= 1 AND SPTR <= 4 DO REPEAT
RETURN
*
**************
ENT.PROD.ID: 
**************
*
IF ISTK.PROD # "" THEN
  ECD.RET.VALUE=ISTK.PROD
  SCV.REC(13)<1>=ISTK.PROD
  ECD.NUM=13;ECD.ACTION=5;CALL SCRN.EDIT
  ISTK.PROD=""
END ELSE
  MAT ISTK.REC=""
  ECD.NUM=13;ECD.ACTION=4;CALL SCRN.EDIT
END
BEGIN CASE
  CASE ECD.RET.VALUE="END"
    GOTO 4199
  CASE ECD.RET.VALUE=""
    ECD.NUM=14;ECD.ACTION=4;CALL SCRN.EDIT
    IF ECD.RET.VALUE="" OR ECD.RET.VALUE="END" THEN GOTO ENT.PROD.ID
    GXR.XREF=INVENTORY.XREF
    GXR.FILE=INVENTORY
    GXR.LOC=1
    GXR.TOP.LINE="INVENTORY XREF SEARCH"
    GXR.HEADING<1,1>="INVENTORY"
    GXR.HEADING<1,2>="FULL DESCRIPTION"
    GXR.ATT<1,2>=2
    GXR.LEN<1,1>=15
    GXR.LEN<1,2>=45
    GXR.ID=""
    GXR.SRCH.ID=ECD.RET.VALUE
    GXR.CO=CONO
    CALL GEN.XREF(MAT GEN.XREF.REC,PREFIX)
    GXR.HEADING<1,2>="DESCRIPTION"
    GXR.LEN<1,2>=30
    GXR.CO=CONO
    ECD.ACTION=2;CALL SCRN.EDIT
    IF GXR.ID="" THEN
      SCV.REC(14)<1>=""
      ECD.ACTION=3;CALL SCRN.EDIT;GOTO ENT.PROD.ID
    END ELSE
      MATREAD INV.REC FROM INVENTORY,CONO:GXR.ID ELSE
        ERRMSG="INVENTORY ":GXR.ID:" IS MISSING"
        SCV.REC(14)<1>=""
        GOSUB 91000;ECD.ACTION=3;CALL SCRN.EDIT;GOTO ENT.PROD.ID
      END
      MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE ELSE
        ERRMSG="CANNOT LOCATE PRODUCT LINE ":INV.LINE
        SCV.REC(14)<1> ="";GOSUB 91000
        ECD.ACTION=3;CALL SCRN.EDIT;GOTO ENT.PROD.ID
      END
      IF CO.OPS = "Y" AND CATG.MAJ.LINE = "FNGD" THEN
        ERRMSG = "Cannot utilize a Finished Goods product"
        SCV.REC(14)<1> =''; GOSUB 91000
        ECD.ACTION = 3; CALL SCRN.EDIT; GOTO ENT.PROD.ID
      END
      IF DMT.PROD # "" AND GXR.ID # DMT.PROD THEN
        DMT.SERIAL="";DMT.COST=""
        DMT.WHSE=""; DMT.LOC=""
        SCV.REC(15)<1>="";ECD.NUM=15;ECD.ACTION=5;CALL SCRN.EDIT
        SCV.REC(16)<1>="";ECD.NUM=16;ECD.ACTION=5;CALL SCRN.EDIT
        SCV.REC(17)<1>="";ECD.NUM=17;ECD.ACTION=5;CALL SCRN.EDIT
        SCV.REC(26)<1>="";ECD.NUM=26;ECD.ACTION=5;CALL SCRN.EDIT
        SCV.REC(19)<1>="";ECD.NUM=19;ECD.ACTION=5;CALL SCRN.EDIT
        SCV.REC(18)<1>="";ECD.NUM=18;ECD.ACTION=5;CALL SCRN.EDIT
        SCV.REC(27)<1>="";ECD.NUM=27;ECD.ACTION=5;CALL SCRN.EDIT
        SCV.REC(22)<1>="";ECD.NUM=22;ECD.ACTION=5;CALL SCRN.EDIT
      END
      DMT.PROD=GXR.ID
      GOSUB GET.INV.CNV
      SCV.REC(13)<1>=DMT.PROD
      SCV.REC(14)<1>=INV.FULL.DESC
      ECD.ACTION=3;CALL SCRN.EDIT
    END
  CASE 1
    MATREAD INV.REC FROM INVENTORY,CONO:ECD.RET.VALUE ELSE
      ERRMSG="CANNOT LOCATE INVENTORY ITEM - ":ECD.RET.VALUE
      GOSUB 91000
      GOTO ENT.PROD.ID
    END
    IF DMT.PROD # "" AND ECD.RET.VALUE # DMT.PROD THEN
      DMT.SERIAL="";DMT.COST=""
      SCV.REC(17)<1>=SERIAL;ECD.NUM=17;ECD.ACTION=5;CALL SCRN.EDIT
      SCV.REC(26)<1>="";ECD.NUM=26;ECD.ACTION=5;CALL SCRN.EDIT
      SCV.REC(19)<1>="";ECD.NUM=19;ECD.ACTION=5;CALL SCRN.EDIT
      SCV.REC(18)<1>="";ECD.NUM=18;ECD.ACTION=5;CALL SCRN.EDIT
      SCV.REC(27)<1>="";ECD.NUM=27;ECD.ACTION=5;CALL SCRN.EDIT
      SCV.REC(22)<1>="";ECD.NUM=22;ECD.ACTION=5;CALL SCRN.EDIT
    END
    DMT.PROD=ECD.RET.VALUE
    MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE ELSE
      ERRMSG="CANNOT LOCATE PRODUCT LINE ":INV.LINE
      GOSUB 91000;GOTO ENT.PROD.ID
    END
    IF CO.OPS = "Y" AND CATG.MAJ.LINE = "FNGD" THEN
      ERRMSG = "Cannot utilize a Finished Goods product"
      GOSUB 91000; GOTO ENT.PROD.ID
    END
    GOSUB GET.INV.CNV
    ECD.NUM=14;SCV.REC(14)<1>=INV.FULL.DESC;ECD.ACTION=5;CALL SCRN.EDIT
END CASE
*---CHECK CUSTOMER INV# AGAINST JOB INV#
IF INV.CUST # "" AND ECD.RET.VALUE # "END" THEN
  IF "X":INV.CUST # "X":JOB.CUST THEN
    ERRMSG="CUSTOMER ":INV.CUST:" OWNS THIS INVENTORY"
    GOSUB 91000
    SCV.REC(13)<1>="";ECD.NUM=13;ECD.ACTION=5;CALL SCRN.EDIT
    SCV.REC(14)<1>="";ECD.NUM=14;ECD.ACTION=5;CALL SCRN.EDIT
    GOTO ENT.PROD.ID
  END
END
4199*
RETURN
*
****************
ENT.WHSE: 
****************
*
SCV.REC(15)<1>=DMT.WHSE
WCNT=COUNT(INV.WHSE.CODE,VM)+1
ECD.NUM=15
BEGIN CASE
  CASE INV.WHSE.CODE=""
    ERRMSG="Cannot Locate Warehouse For Product - ":DMT.PROD
    GOSUB 91000;WFND=0
    ECD.RET.VALUE="END";GOTO 4299
  CASE WCNT=1
    IF ECD.RET.VALUE="END" THEN RETURN
    SCV.REC(15)<1>=INV.WHSE.CODE;ECD.ACTION=5;CALL SCRN.EDIT
    ECD.RET.VALUE=INV.WHSE.CODE
    WFND=1
  CASE 1
    IF ISTK.WHSE # "" THEN
      ECD.RET.VALUE=ISTK.WHSE
      SCV.REC(15)<1>=ISTK.WHSE
      ECD.ACTION=5;CALL SCRN.EDIT
      ISTK.WHSE = '';*T21673 *C43909
    END ELSE
      MAT ISTK.REC=""
      KK=1
      ECD.HMSG<1,1,KK>="Warehouse - ":INV.WHSE.CODE<1,1>
      FOR K=2 TO WCNT
        IF LEN(ECD.HMSG<1,1,KK>) > 65 THEN
          KK=KK+1
          ECD.HMSG<1,1,KK>="Warehouse - ":INV.WHSE.CODE<1,K>
        END ELSE
          ECD.HMSG<1,1,KK>=ECD.HMSG<1,1,KK>:", ":INV.WHSE.CODE<1,K>
        END
      NEXT K
      ECD.ACTION=4;CALL SCRN.EDIT
      IF ECD.RET.VALUE="END" THEN WFND=0;GOTO 4299
    END
    LOCATE ECD.RET.VALUE IN INV.WHSE.CODE<1>,1 SETTING WFND ELSE
      ERRMSG="Cannot Locate Warehouse (":ECD.RET.VALUE:") For Product - ":DMT.PROD
      GOSUB 91000;GOTO ENT.WHSE
    END
END CASE
*
  * T26497 v
IF CO.INTR.WHSE # '' AND ECD.RET.VALUE = CO.INTR.WHSE THEN
  ERRMSG = 'Cannot use an Inter-Divisional Warehouse'
  GOSUB 91000
  IF WCNT=1 THEN
    WFND=0;ECD.RET.VALUE="END";GOTO 4299
  END ELSE
    GOTO ENT.WHSE
  END
END
  * T26497 ^
IWH.ID=CONO:DMT.PROD:"!":ECD.RET.VALUE
MATREAD IWH.REC FROM INV.WHSE,IWH.ID ELSE
  ERRMSG="Cannot Locate Warehouse (":ECD.RET.VALUE:") For Product - ":DMT.PROD
  GOSUB 91000
  IF WCNT=1 THEN
    WFND=0;ECD.RET.VALUE="END";GOTO 4299
  END ELSE
    GOTO ENT.WHSE
  END
END
SCV.REC(16)<1>=ISTK.LOC
ECD.NUM=16; ECD.ACTION=5; CALL SCRN.EDIT
GOSUB CHECK.MATL.RESV
IF CATG.TRACK.QOH="Y" THEN
  IF IWH.ON.HAND+RESV.QTY-IWH.RESV < 1 THEN
    ERRMSG="No Quantity Available For Warehouse - ":ECD.RET.VALUE
    GOSUB 91000
    IF WCNT=1 THEN
      WFND=0;ECD.RET.VALUE="END"
      GOTO 4299
    END ELSE
*T27897      GOTO ENT.WHSE
      GOTO ENT.SERIAL ;*T27897
    END
  END
END ELSE
  IF IWH.LOC="" THEN
    WHSE.ID=CONO:ECD.RET.VALUE
    MATREAD WHSE.REC FROM WAREHOUSE,WHSE.ID ELSE WHS.LOC=''
    IWH.LOC=WHS.LOC<1,1>
  END
END
DMT.WHSE=ECD.RET.VALUE
WHSE.ID=CONO:ECD.RET.VALUE
MATREAD WHSE.REC FROM WAREHOUSE,WHSE.ID ELSE MAT WHSE.REC=''
IF JOB.DIV # WHS.DIV AND WHS.DIV # "00" THEN
  ERRMSG="INVENTORY WAREHOUSE DIVISION DOES NOT MATCH JOB DIVISION"
  GOSUB 91000
  SCV.REC(13)='';ECD.NUM=13;ECD.ACTION=5;CALL SCRN.EDIT
  SCV.REC(14)='';ECD.NUM=14;ECD.ACTION=5;CALL SCRN.EDIT
  SCV.REC(15)='';ECD.NUM=15;ECD.ACTION=5;CALL SCRN.EDIT
  DMT.WHSE='';DMT.LOC='';DMT.PROD=''
  ECD.RET.VALUE = "END"
  GOTO 4299
END
* C40373 v
ERRMSG = ''
DIV.POS=DIVISION.POSITION(CONO,CONTROL,WHS.DIV)
BEGIN CASE                                              
  CASE DIV.POS<1,1>=''                                  
    DIV.POS=DIV.POS<1,2>                                
    CUR.PERIOD=CURRENT.PERIOD(CONO,CONTROL,DIV.POS,"JC")
    IF CUR.PERIOD<1,1>='' THEN                          
      CUR.PERIOD=CUR.PERIOD<1,2>                        
    END ELSE                                            
      IF CUR.PERIOD<1,2>='-2' THEN                      
        ERRMSG=CUR.PERIOD<1,2>                          
        GOSUB 93000                                     
      END                                               
    END                                                 
  CASE DIV.POS<1,1>='-1'                                
    ERRMSG=DIV.POS<1,2>                                 
    GOSUB 91000                                         
  CASE DIV.POS<1,1>='-2'                                
    ERRMSG=DIV.POS<1,2>                                 
    GOSUB 93000                                         
END CASE                                                
IF ERRMSG # '' THEN
  SCV.REC(13)='';ECD.NUM=13;ECD.ACTION=5;CALL SCRN.EDIT
  SCV.REC(14)='';ECD.NUM=14;ECD.ACTION=5;CALL SCRN.EDIT
  SCV.REC(15)='';ECD.NUM=15;ECD.ACTION=5;CALL SCRN.EDIT
  DMT.WHSE='';DMT.LOC='';DMT.PROD=''
  ECD.RET.VALUE = "END"
  GOTO 4299
END
* C40373 ^
ISTK.WHSE = DMT.WHSE ;*T21673
4299*
RETURN
*
**************
ENT.LOC: 
***************
*
SCV.REC(16)<1>=DMT.LOC
ECD.NUM=16
LCNT=COUNT(IWH.LOC,VM)+1
BEGIN CASE
  CASE IWH.LOC=""
    ERRMSG="Cannot locate location for warehouse - ":DMT.WHSE
    GOSUB 91000;LFND=0
    ECD.RET.VALUE="END";GOTO 4399
  CASE LCNT=1
    IF ECD.RET.VALUE="END" THEN RETURN
    SCV.REC(16)<1>=IWH.LOC;ECD.ACTION=5;CALL SCRN.EDIT
    ECD.RET.VALUE=IWH.LOC
    LFND=1
  CASE 1
    IF ISTK.LOC # "" THEN
      ECD.RET.VALUE=ISTK.LOC
      SCV.REC(16)<1>=ISTK.LOC
      ECD.ACTION=5;CALL SCRN.EDIT
      ISTK.LOC='' ;*T21673
    END ELSE
      MAT ISTK.REC=""
      KK=1
      ECD.HMSG<1,1,KK>="Location - ":IWH.LOC<1,1>
      FOR K=2 TO LCNT
        IF LEN(ECD.HMSG<1,1,KK>) > 65 THEN
          KK=KK+1
          ECD.HMSG<1,1,KK>="Location - ":IWH.LOC<1,K>
        END ELSE
          ECD.HMSG<1,1,KK>=ECD.HMSG<1,1,KK>:", ":IWH.LOC<1,K>
        END
      NEXT K
      ECD.ACTION=4;CALL SCRN.EDIT
      IF ECD.RET.VALUE="END" THEN LFND=0;GOTO 4399
    END
    LOCATE ECD.RET.VALUE IN IWH.LOC<1>,1 SETTING LFND ELSE
      ERRMSG="Cannot locate location (":ECD.RET.VALUE:") for warehouse - ":DMT.WHSE
      GOSUB 91000; ISTK.LOC='';GOTO ENT.LOC
    END
END CASE
*
IWLO.ID=CONO:DMT.PROD:"!":DMT.WHSE:"!":ECD.RET.VALUE  
MATREAD IWLO.REC FROM INV.WHSE.LOC,IWLO.ID ELSE 
  IF CATG.TRACK.QOH="Y" THEN
    ERRMSG="Cannot locate INV.WHSE.LOC record (":DMT.PROD:"!":DMT.WHSE:"!":ECD.RET.VALUE:")"
    GOSUB 91000; ISTK.LOC='';GOTO ENT.LOC
  END
  MAT IWLO.REC=""
  IF INV.PAP.TYPE # "REGULAR" AND IWLO.SERIAL ="" THEN
    IWLO.SERIAL<1,1>=IWH.LOC<1,1>
  END
END
IF CATG.TRACK.QOH="Y" AND IWLO.LOC.ON.HAND < 1 THEN
  ERRMSG="No Quantity Available For Location - ":IWH.LOC<1,LFND>
  GOSUB 91000
  IF LCNT=1 THEN
    LFND=0;ECD.RET.VALUE="END";GOTO 4399
  END ELSE
    ISTK.LOC=''
    GOTO ENT.LOC
  END
END
DMT.LOC=ECD.RET.VALUE
ISTK.LOC = DMT.LOC ;* T21673
4399*
RETURN
*
*************
ENT.SERIAL: 
*************
*
IF CATG.TRK.LVL='S' THEN
  ECD.NUM=17
  RCNT=COUNT(IWLO.SERIAL,VM)+1
  BEGIN CASE
    CASE IWLO.SERIAL=""
      RFND=0;GOTO 4499
    CASE RCNT=1
      RFND=1; ISTK.ID=CONO:IWLO.SERIAL<1,1>
      GOTO 4450
    CASE 1
      KK=1
      RSI.HMSG<1,1,KK>="Serial - ":IWLO.SERIAL<1,1>
      FOR K=2 TO RCNT
        IF LEN(RSI.HMSG<1,1,KK>) > 65 THEN
          KK=KK+1
          RSI.HMSG<1,1,KK>="Serial - ":IWLO.SERIAL<1,K>
        END ELSE
          RSI.HMSG<1,1,KK>=RSI.HMSG<1,1,KK>:", ":IWLO.SERIAL<1,K>
        END
      NEXT K
  END CASE
  IF SERIAL # "" THEN
    ECD.RET.VALUE=SERIAL
    SCV.REC(15)<1>=ISTK.WHSE
    DMT.WHSE = ISTK.WHSE
    ECD.NUM=15;ECD.ACTION=5;CALL SCRN.EDIT
    SERIAL=""
  END ELSE
    MAT ISTK.REC=""
    ECD.HMSG=RSI.HMSG
    ECD.ACTION=4;CALL SCRN.EDIT
  END
  IF ECD.RET.VALUE="END" THEN RFND=0;GOTO 4499
  LOCATE ECD.RET.VALUE IN IWLO.SERIAL<1>,1 SETTING RFND THEN
    ISTK.ID=CONO:ECD.RET.VALUE
  END ELSE
    ERRMSG="Cannot Locate Serial (":ECD.RET.VALUE:") For Location - ":DMT.LOC
    GOSUB 91000;GOTO ENT.SERIAL
  END
4450*
  MATREAD ISTK.REC FROM INV_SERIAL,ISTK.ID ELSE MAT ISTK.REC=''
  IF CATG.RSV.SERIAL='Y' THEN
    LOCATE DMT.JOB IN ISTK.JOB<1> SETTING JUNK ELSE
      ERRMSG='WARNING, This serial has not been reserved for this job.'
      GOSUB 91000
    END
  END
  IF CATG.TRACK.QOH='Y' AND ISTK.CUR.QTY<1 THEN
    ERRMSG="No Quantity Available For Serial - ":IWLO.SERIAL<1,RFND>
    GOSUB 91000
    IF RCNT=1 THEN
      RFND=0;ECD.RET.VALUE="END";GOTO 4499
    END ELSE
      GOTO ENT.SERIAL
    END
  END
  DMT.SERIAL=IWLO.SERIAL<1,RFND>
4499*
  SCV.REC(17)<1>=DMT.SERIAL
  ECD.NUM=17;ECD.ACTION=5;CALL SCRN.EDIT
END ELSE
  RFND=0
END
RETURN
*
*************
ENT.QTY.TYPE: 
*************
*
BEGIN CASE
  CASE INV.PAP.TYPE="ROLL"
    ECD.HMSG="WU,WR,DR"
    ECD.VALDAT="WU,WR,DR"
    ECD.O.R="O";ECD.DEFAULT="WU"
  CASE INV.PAP.TYPE="LROLL" OR INV.PAP.TYPE="PCOAT"
    ECD.HMSG="SU,DR,SR"
    ECD.VALDAT="SU,DR,SR"
    ECD.O.R="O";ECD.DEFAULT="SU"
  CASE INV.PAP.TYPE="SHEET"
    ECD.HMSG="SU,SR"
    ECD.VALDAT="SU,SR"
    ECD.O.R="O";ECD.DEFAULT="SU"
  CASE 1
    DMT.RS.QTYPE=""
    ECD.NUM=26;ECD.ACTION=5;CALL SCRN.EDIT
    GOTO 5010
END CASE
ECD.NUM=26;ECD.ACTION=4;CALL SCRN.EDIT
IF ECD.RET.VALUE="END" THEN RETURN
DMT.RS.QTYPE=ECD.RET.VALUE
5010*
BEGIN CASE
  CASE DMT.RS.QTYPE="WU"
    QDESC="Weight used"
  CASE DMT.RS.QTYPE="WR"
    QDESC="Weight remaining"
  CASE DMT.RS.QTYPE="DR"
    QDESC="Diameter remaining"
  CASE DMT.RS.QTYPE[2,1]="U" AND INV.UNIT<1,2>="FT"
    QDESC="Feet used"
  CASE DMT.RS.QTYPE[2,1]="U" AND INV.UNIT<1,2>="PC"
    QDESC="Press counts used"
  CASE DMT.RS.QTYPE="SU"
    QDESC="Stock used"
  CASE DMT.RS.QTYPE="SR"
    QDESC="Stock remaining"
  CASE 1
    QDESC= INV.UNIT<1,2>
END CASE
SCV.REC(18)<1>=QDESC
ECD.NUM=18;ECD.ACTION=5;CALL SCRN.EDIT
******************
IF DMT.QTY#'' THEN
*T28740 v
* ECD.DEFAULT=DMT.STK.QTY
  IF CATG.TRACK.QOH = 'Y' THEN
    IF CATG.TRK.LVL # 'S' THEN
      IF DMT.QTY > IWLO.LOC.ON.HAND THEN DMT.QTY = IWLO.LOC.ON.HAND
    END
  END
  ECD.DEFAULT = CALC.STK.QTY(DMT.QTY,MAT INV.CNV.REC,".5","1")
*T28740 ^
  ECD.DEFAULT=OCONV(ECD.DEFAULT,ICR.CNV)
  SCV.REC(19)<1>=ECD.DEFAULT
END ELSE
  IF IWLO.SERIAL#"" AND CATG.TRK.LVL='S' THEN
    BEGIN CASE
*T28956
      CASE DMT.RS.QTYPE="WU" OR DMT.RS.QTYPE = "SU"
*T28956
        LOCATE JOB.NO IN ISTK.JOB<1> SETTING JPOS THEN
          ECD.DEFAULT=CALC.STK.QTY(ISTK.JRSVD.QTY<1,JPOS>,MAT INV.CNV.REC,'','')
        END ELSE
          ECD.DEFAULT=CALC.STK.QTY(ISTK.CUR.QTY,MAT INV.CNV.REC,'','')
        END
*T28956
      CASE DMT.RS.QTYPE='WR' OR DMT.RS.QTYPE = 'SR'
*T28956
        ECD.DEFAULT=0
      CASE 1
        ECD.DEFAULT=0
    END CASE
    ECD.DEFAULT=OCONV(ECD.DEFAULT,ICR.CNV)
    SCV.REC(19)<1>=ECD.DEFAULT
  END
END
BEGIN CASE
  CASE DMT.RS.QTYPE[1,1]="W" OR DMT.RS.QTYPE[1,1]="D" OR ICR.SCAL = 2
    ECD.PATRN="0N,0N.1N,0N.2N"
    ECD.NUM=19;ECD.ACTION=4;CALL SCRN.EDIT
    IF ECD.RET.VALUE="END" THEN GOTO 5099
    ECD.RET.VALUE = ICONV(ECD.RET.VALUE,'MD2')
  CASE 1
    ECD.PATRN="0N"
    ECD.NUM=19;ECD.ACTION=4;CALL SCRN.EDIT
    IF ECD.RET.VALUE="END" THEN GOTO 5099
    ECD.PATRN="0N"
    IF ICR.CNV = "MD2" THEN ECD.RET.VALUE = ECD.RET.VALUE * 100
END CASE
IF ECD.RET.VALUE > 9999999999 THEN ERRMSG = "*** OUT OF RANGE ***";GOSUB 91000;GOTO ENT.QTY.TYPE
IF CATG.TRACK.QOH # "Y" THEN GOTO 5050
IF ECD.RET.VALUE = 0 AND DMT.RS.QTYPE[2,1] # "R" THEN
  ERRMSG="Invalid quantity for specified quantity type! "
  GOSUB 91000;GOTO ENT.QTY.TYPE
END
WHS.AVAIL=(IWH.ON.HAND+RESV.QTY-IWH.RESV)
WHS.AVAIL=CALC.STK.QTY(WHS.AVAIL,MAT INV.CNV.REC,'.5','')
IF (DMT.RS.QTYPE="" OR DMT.RS.QTYPE[2,1]="U") AND ECD.RET.VALUE > WHS.AVAIL THEN
  ERRMSG="Maximum Quantity Available For Warehouse - ":OCONV(WHS.AVAIL,ICR.CNV)
  GOSUB 91000;GOTO ENT.QTY.TYPE
END
LOC.AVAIL=CALC.STK.QTY(IWLO.LOC.ON.HAND,MAT INV.CNV.REC,'.5','')
IF (DMT.RS.QTYPE="" OR DMT.RS.QTYPE[2,1]="U") AND ECD.RET.VALUE > LOC.AVAIL THEN
  ERRMSG="Maximum Quantity Available For Location - ":OCONV(LOC.AVAIL,ICR.CNV)
  GOSUB 91000;GOTO ENT.QTY.TYPE
END
IF RFND THEN
*         R.S.AVAIL=CALC.STK.QTY(ISTK.CUR.QTY,MAT INV.CNV.REC,'.5')
  IF CATG.RSV.SERIAL='Y' THEN
    JOB.NO=JOB.ID[4,99]                                   
    LOCATE JOB.NO IN ISTK.JOB<1> SETTING JPOS THEN         
      R.S.AVAIL=ISTK.RSVB.QTY + ISTK.JRSVD.QTY<1,JPOS>     
    END ELSE                                              
      R.S.AVAIL=ISTK.RSVB.QTY                             
    END                                                   
  END ELSE
    R.S.AVAIL=ISTK.RSVB.QTY
  END
  R.S.AVAIL=CALC.STK.QTY(R.S.AVAIL,MAT INV.CNV.REC,'.5','')
END ELSE
  R.S.AVAIL=ECD.RET.VALUE
END
IF (DMT.RS.QTYPE="" OR DMT.RS.QTYPE[2,1]="U") AND ECD.RET.VALUE > R.S.AVAIL THEN
  ERRMSG="Maximum Quantity Available For Serial - ":OCONV(R.S.AVAIL,ICR.CNV)
  GOSUB 91000;GOTO ENT.QTY.TYPE
END
5050*
BEGIN CASE
  CASE DMT.RS.QTYPE="DR"
    DMT.QTY=ECD.RET.VALUE*10
    DMT.STK.QTY=""
    SCV.REC(19)<1>= OCONV(ECD.RET.VALUE,"MD2")
  CASE DMT.RS.QTYPE[2,1]="R"
*    DMT.QTY=INT(((ECD.RET.VALUE/ICR.MT1)*ICR.DV1)*ICR.DV2+0.99)
    DMT.QTY=CALC.COST.QTY(ECD.RET.VALUE,MAT INV.CNV.REC,'.99','')
*    DMT.STK.QTY=INT(((DMT.QTY/ICR.DV1)*ICR.MT1)/ICR.DV2+0.99)
    DMT.STK.QTY=CALC.STK.QTY(DMT.QTY,MAT INV.CNV.REC,'.99','')
    SCV.REC(19)<1>= OCONV(DMT.STK.QTY,ICR.CNV)
  CASE 1
    DMT.QTY=CALC.COST.QTY(ECD.RET.VALUE,MAT INV.CNV.REC,'.5','')
    DMT.STK.QTY=CALC.STK.QTY(DMT.QTY,MAT INV.CNV.REC,'.5','')
    SCV.REC(19)<1>= OCONV(DMT.STK.QTY,ICR.CNV)
END CASE
ECD.NUM=19;ECD.ACTION =5;CALL SCRN.EDIT
5099*
RETURN
*
**************
ENT.TIME.USED: 
**************
*
ECD.MINV=0000;ECD.MAXV=2359;ECD.NUM=27
ECD.ACTION=4;CALL SCRN.EDIT
IF ECD.RET.VALUE # "END" THEN
  IF NUM(ECD.RET.VALUE) THEN
    HH = INT(ECD.RET.VALUE/100)
    MM = MOD(ECD.RET.VALUE,100)
    TM = HH: ":": MM
    TM = ICONV(TM,"MT")
    DMT.TIME=TM
    SCV.REC(27)<1>=OCONV(DMT.TIME,"MT")
    ECD.NUM=27;ECD.ACTION=5;CALL SCRN.EDIT
  END ELSE
    IF ECD.RET.VALUE[3,1] = ':' THEN
      TM = ECD.RET.VALUE[1,2]: ECD.RET.VALUE[4,2]
      IF TM > 2359 OR TM < 0 THEN
        ERRMSG="Invalid Time. Try again! "
        GOSUB 91000
        GOTO ENT.TIME.USED
      END
      DMT.TIME = ICONV(ECD.RET.VALUE,"MT")
    END ELSE
      ERRMSG="Invalid Time. Try again! "
      GOSUB 91000
      GOTO ENT.TIME.USED
    END
  END
END
RETURN
*
******************
ENT.MATERIAL.COST: 
******************
*
DMT.COST=0;GOSUB CHECK.MATL.COST
*T27622 v
IF CHECK.COST # 0 THEN
  IF CATG.COST.TYPE = 'FI' OR CATG.COST.TYPE = 'LC' THEN
*T28659 v
*   IF CATG.COST.TYPE = 'FI' THEN CPTR = Q ELSE CPTR = QCNT
    IF CATG.COST.TYPE = 'FI' THEN
      IF Q > 1 THEN CPTR = Q-1 ELSE CPTR = Q
    END ELSE CPTR = QCNT
*T28659 ^
    IF IWH.RECP.PERIOD<1,CPTR> > CUR.PERIOD THEN
      ERRMSG='Receipt Quantity not available until ':IWH.RECP.PERIOD<1,CPTR>
      GOSUB 91000
    END
  END
END
IF CHECK.COST <> 0 OR ECD.RET.VALUE="END" THEN GOTO 6999
*IF IWH.RECP.PERIOD<1,1> = '' OR IWH.RECP.PERIOD<1,1> GT CUR.PERIOD THEN GOTO 6999      ;* C40373
*T27622 ^
IF CATG.COST.TYPE = 'SD' OR CATG.COST.TYPE = 'LT' THEN
  ECD.MINV=0;ECD.VALDAT=""
  ECD.MAXV=999.9999 ;*T21734
  ECD.NUM=22;ECD.ACTION=4;CALL SCRN.EDIT
END ELSE
  SCV.REC(22)<1>=0;ECD.NUM=22;ECD.ACTION=5;CALL SCRN.EDIT
  ECD.RET.VALUE = 0
END
IF ECD.RET.VALUE # "END" THEN DMT.COST=ECD.RET.VALUE
6999*
RETURN
*
*---- CHECK AUTHORIZATION
*
7000*
VALUE=""
IF (JOB.STATUS<1,1> > 1 AND JOB.STATUS<1,1> # 5) OR JOB.TRACK.DATE<1,7> # "" OR JOB.TRACK.DATE<1,8> # "" THEN
7010*
  X=0;Y=21;MAXL=3;TYP=1
  PMSG="This job is not in process. Enter authorization : "
  CALL EDIT.SUB
  P_X = 0 ; P_Y = 21 ; P_VALUE = "" ; P_OPT = "CL"
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  IF VALUE="END" THEN GOTO 7999
  MATREAD JSI.REC FROM JOB.STAT.CODE,CONO:VALUE ELSE
    MAT JSI.REC =""
    ERRMSG="INVALID INITIALS. TRY AGAIN"
    GOSUB 91000;GOTO 7010
  END
  DMT.INIT=VALUE
END
7999*
RETURN
*
*****************
CHECK.MATL.RESV: 
*****************
*
PTR=1
LOOP
  LOCATE DMT.PROD IN JOB.RESV.MATL<1>,PTR SETTING MLOC ELSE
    MLOC=0;PTR=0
    RESV.QTY=0;RESV.AMT=0
  END
  IF MLOC AND WFND THEN
    IF INV.WHSE.CODE<1,WFND>=JOB.RESV.WHSE<1,MLOC> THEN
      PTR=0
      RESV.QTY=JOB.RESV.QTY<1,MLOC>;RESV.AMT=JOB.RESV.AMT<1,MLOC>
    END ELSE
      PTR=MLOC+1
    END
  END ELSE
    PTR = 0
  END
WHILE PTR DO
REPEAT
RETURN
*
*
*****************
CHECK.MATL.COST: 
*****************
*
CHECK.COST=0;ECD.RET.VALUE=""
*T27622 v Merged logic from below.
ERR.FLG='';ERRMSG=''
PERIOD=''
CALL BUILD.IWH.FI(IWH.ID,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
FIFO.COST=0
QCNT=DCOUNT(IWH.QTY.FI,VM)
FOR Q=1 TO QCNT WHILE FIFO.COST=0
  IF IWH.QTY.FI<1,Q> > 0 AND IWH.COST.FI<1,Q> > 0 THEN
    FIFO.COST=IWH.COST.FI<1,Q>
  END
NEXT Q
LAST.COST=IWH.COST.FI<1,QCNT>
*T27622 ^
BEGIN CASE
  CASE RESV.AMT > 0
    CHECK.COST=RESV.AMT
  CASE CATG.COST.TYPE="SD"
    CHECK.COST=IWH.STD.COST
  CASE CATG.COST.TYPE="AV"
    CHECK.COST=IWH.AVG.COST
  CASE CATG.COST.TYPE="LT"
    CHECK.COST=IWH.LIST.COST
  CASE CATG.TRACK.QOH # "Y"
    CHECK.COST=0
  CASE CATG.COST.TYPE="FI"
*T27622 v move up to beginning of routine.
*   ERR.FLG='';ERRMSG=''
*   PERIOD=''
*   CALL BUILD.IWH.FI(IWH.ID,MAT IWH.REC,PERIOD,ERR.FLG,ERRMSG,OPEN.FLAG)
*   QCNT=DCOUNT(IWH.QTY.FI,VM)
*   FOR Q=1 TO QCNT WHILE CHECK.COST=0
*     IF IWH.QTY.FI<1,Q> > 0 AND IWH.COST.FI<1,Q> > 0 THEN
*       CHECK.COST=IWH.COST.FI<1,Q>
*     END
*   NEXT Q
    CHECK.COST=FIFO.COST
  CASE CATG.COST.TYPE="LC"
*   QCNT=DCOUNT(IWH.QTY.FI,VM)
*   CHECK.COST=IWH.COST.FI<1,QCNT>
    CHECK.COST=LAST.COST
*T27622 ^
  CASE CATG.COST.TYPE='AC'
    CHECK.COST=ISTK.UNIT.COST
  CASE 1
    ERRMSG="INVALID COSTING METHOD SPECIFIED FOR PRODUCT LINE"
    GOSUB 91000;ECD.RET.VALUE="END"
END CASE
RETURN
*
*---- ERROR ROUTINES
*
91000*
ERR.TYPE=1;CALL SYSCOM(MAT SYSCOM.REC)
RETURN
92000*
ERR.TYPE=2;CALL SYSCOM(MAT SYSCOM.REC)
RETURN
93000*
ERR.TYPE=3;CALL SYSCOM(MAT SYSCOM.REC)
*
*---- END OF PROGRAM
*
99999*
END
