SUBROUTINE EDIT_TIME_MATL_WS(CONO, INPUTPARAM, ERRMSG, OUT_PARAM_SALES,SCHEMA.ONLY)
*********************************************************************
* REVISION - [08.1]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM   - PRIMAC
* SOURCE   - JCSBP
* PROGRAM  - EDIT.TIME.MATL
* AUTHOR   - NICK AMENDOLA, COMPUTER BUSINESS ASSOCIATES
* DESCRIPTION
* This program edits the time and material entries and flags errors
* accordingly by placing the appropriate message in DTM.STATUS
* MODIFIED - CK 7.11.89. CSF 9277 CHECK FOR VALID PROD LINE
* - CK 8.22.89. MERGE CHANGE ABOVE WITH NA MOD FOR ROLL SKID
* - MODIFICATIONS FOR EPS PAYROLL - BY SFC - FEB 1990
* - ADDITIONAL MOD FOR EPS - BY SFC - APR 1990 MORE EDITING FOR WORK.SHIFT
*T21523 julie 01/29/1997 * ADD ERROR MESSAGE FOR SERIAL NOT RECEIVED
*T21847 lanny 04/24/1997 * Make DTM.STATUS accumulate errors found.
*T22837 rik 05/07/1998 * ASSIGN INVENTORY, CATEGORY & WAREHOUSE RECORDS
*                        TO NULL IF NOT FOUND.
*T23174 markt 08/12/1998 * Initialize DIV, DEPT and CCTR recs to null if
*                          not found.
*T25837 lanny 05/15/2001 * JOBNO needs test for NULL.
*T26093 lanny 08/16/2001 * SIS_LOG File should be opened only if user
*                          has SIS.
*T26207 lanny 10/03/2001 * Do not allow more than 24 hours in one day.
*T26334 epitka 12/17/2001 * REV12
*T26497 adelgado 04/02/2002 * Add validation rule for Inter-Divisional
*                             Whse.
*********************************************************************
*
*---- COPY STATEMENTS
*
$INCLUDE JCS.CPYLIB PNP.LOG
$INCLUDE SIS.CPYLIB SIS_LOG
$INCLUDE JCS.CPYLIB DAILY.TIME.MATL
$INCLUDE JCS.CPYLIB JOB
$INCLUDE JCS.CPYLIB OPERATION
$INCLUDE JCS.CPYLIB FACTOR
$INCLUDE JCS.CPYLIB JOB.CUTOFF.NO
$INCLUDE JCS.CPYLIB JOB.STAT.CODE
$INCLUDE JCS.CPYLIB SF.PROMPT
$INCLUDE PMC.CPYLIB COMPANY
$INCLUDE PMC.CPYLIB EMPLOYEE
$INCLUDE PMC.CPYLIB DIVISION
$INCLUDE PMC.CPYLIB DEPARTMENT
$INCLUDE PMC.CPYLIB COST.CNTR
$INCLUDE ICS.CPYLIB INVENTORY
$INCLUDE ICS.CPYLIB INV.WHSE
$INCLUDE ICS.CPYLIB INV.WHSE.LOC
$INCLUDE ICS.CPYLIB CATEGORY
$INCLUDE CPYLIB FILE.VARS
*$INCLUDE CPYLIB SYSCOM
$INCLUDE CPYLIB CHAR
$INCLUDE PRS.CPYLIB WORK.SHIFT
$INCLUDE ICS.CPYLIB WAREHOUSE
$INCLUDE ICS.CPYLIB INV_SERIAL
*
*---- DEFINE DIMENSIONED VARIABLES
*
  DIM SAVE.REC(10)
  EQU S.DCOST   TO SAVE.REC(1)
  EQU S.COST    TO SAVE.REC(2)
  EQU S.SALE    TO SAVE.REC(3)
  EQU S.HRS     TO SAVE.REC(4)
  EQU S.STD.HRS TO SAVE.REC(5)
  EQU S.STD.IMP TO SAVE.REC(6)
  EQU S.OSJ     TO SAVE.REC(7)
  EQU S.FCTR    TO SAVE.REC(8)
  EQU S.DPTR    TO SAVE.REC(9)
*
*---- INTITIALIZATION
*
 * MAT FILE.VARS=""
 * SYS.TYPE=1
 * CALL SYSCOM(MAT SYSCOM.REC)
*
*---- OPEN FILES
*
  OPEN '','COMPANY' TO COMPANY ELSE ERRMSG='COMPANY FILE MISSING';GOTO 93000
  OPEN '','INVENTORY' TO INVENTORY ELSE ERRMSG='INVENTORY FILE IS MISSING';GOTO 93000
  OPEN '','CATEGORY' TO CATEGORY ELSE ERRMSG='CATEGORY FILE IS MISSING';GOTO 93000
  OPEN '','INV.WHSE' TO INV.WHSE ELSE ERRMSG='INV.WHSE FILE IS MISSING';GOTO 93000
  OPEN '','INV.WHSE.LOC' TO INV.WHSE.LOC ELSE ERRMSG='INV.WHSE.LOC FILE IS MISSING'; GOTO 93000
  OPEN '','JOB' TO JOB ELSE ERRMSG='JOB FILE IS MISSING';GOTO 93000
  OPEN '','DAILY.TIME.MATL' TO DAILY.TIME.MATL ELSE ERRMSG='DAILY.TIME.MATL FILE IS MISSING';GOTO 93000
  OPEN '','PMC.SCREENS' TO M.SCREENS ELSE ERRMSG='PMC.SCREENS FILE IS MISSING';GOTO 93000
  OPEN '','EMPLOYEE' TO EMPLOYEE ELSE ERRMSG='EMPLOYEE FILE IS MISSING';GOTO 93000
  OPEN '','DIVISION' TO DIVISION ELSE ERRMSG='DIVISION FILE IS MISSING';GOTO 93000
  OPEN '','DEPARTMENT' TO DEPARTMENT ELSE ERRMSG='DEPARTMENT FILE IS MISSING';GOTO 93000
  OPEN '','COST.CNTR' TO COST.CNTR ELSE ERRMSG='COST.CNTR FILE IS MISSING';GOTO 93000
  OPEN '','OPERATION' TO OPERATION ELSE ERRMSG='OPERATION FILE IS MISSING';GOTO 93000
  OPEN '','FACTOR' TO FACTOR ELSE ERRMSG='FACTOR FILE IS MISSING';GOTO 93000
  OPEN '','CONTROL' TO CONTROL ELSE ERRMSG='CONTROL FILE IS MISSING';GOTO 93000
  OPEN '','JOB.STAT.CODE' TO JOB.STAT.CODE ELSE ERRMSG='JOB.STAT.CODE FILE IS MISSING';GOTO 93000
  OPEN '','SPOILAGE.CODES' TO SPOILAGE.CODES ELSE ERRMSG='SPOILAGE.CODES FILE IS MISSING';GOTO 93000
  OPEN '','PNP.LOG' TO PNP.LOG ELSE ERRMSG='PNP.LOG FILE IS MISSING';GOTO 93000
  OPEN '','SF.PROMPT' TO SF.PROMPT ELSE ERRMSG='SF.PROMPT FILE IS MISSING';GOTO 93000
  OPEN "WAREHOUSE" TO WAREHOUSE ELSE ERRMSG="WAREHOUSE FILE IS MISSING" ; GOTO 93000
  OPEN "INV_SERIAL" TO INV_SERIAL ELSE ERRMSG="INV_SERIAL FILE IS MISSING" ; GOTO 93000
*
*---- MAIN PROCESSING          
*
  READNEXT DTM.ID ELSE GOTO 99999
  CONO=DTM.ID[1,3]
  TODAY=DATE()
  MATREAD COMP.REC FROM COMPANY, CONO ELSE GOTO 99999
*
  IF CO.PRS = "E" THEN
    OPEN '','WORK.SHIFT' TO WORK.SHIFT ELSE ERRMSG='WORK.SHIFT.SCHEDULE FILE IS MISSING';GOTO 93000
  END
  SISLIVE = 1
  READ DUMMY FROM CONTROL, CONO:"SISLIVE" ELSE SISLIVE = 0
  DUMMY = ""
  IF SISLIVE THEN
    OPEN '','SIS_LOG' TO SIS_LOG ELSE ERRMSG='SIS_LOG FILE IS MISSING';GOTO 93000
  END
*
*---- GET OUTSIDE JOB RANGE
*
  MATREAD JOB.CUTOFF.REC FROM CONTROL, CONO:"JOB.CUTOFF.NO" ELSE
    MAT JOB.CUTOFF.REC=''
    J.CUTOFF.NUM=0
  END
  GOSUB 1000
  DATA=1
  LOOP
    READNEXT DTM.ID ELSE DATA=0
  WHILE DATA DO
    IF CONO=DTM.ID[1,3] THEN GOSUB 1000
  REPEAT
  GOTO 99999
*
*---- EDIT TIME DATA
*
1000 MATREADU DTM.REC FROM DAILY.TIME.MATL, DTM.ID ELSE
    RELEASE DAILY.TIME.MATL, DTM.ID
    GOTO 1999
  END
  DTM.EMP=FIELD(DTM.ID,"*",1)
  DTM.EMP=DTM.EMP[4,LEN(DTM.EMP)]
  DTM.DATE=FIELD(DTM.ID,"*",2)
  SHIFT=FIELD(DTM.ID,"*",3)
  DTM.STATUS=""
  DTM.ERR="" ; DTM.ERR.STATUS=""
  SC = 1
  MATREAD EMP.REC FROM EMPLOYEE, CONO : DTM.EMP ELSE
    DTM.ERR = "INVALID EMPLOYEE"
    GOSUB 3000
  END
  IF SISLIVE THEN
    MATREAD SISLOG_REC FROM SIS_LOG, CONO:DTM.EMP THEN
      IF SISLOG_OFF.FLAG = "" AND DTM.DATE = SISLOG_DATE AND SHIFT = SISLOG_SHIFT THEN
        DTM.ERR="LOGGED ON (SFIS)"
        GOSUB 3000
      END
    END ELSE
      MAT SISLOG_REC = ""
    END
  END ELSE
    LOGGED.ON = 1
    MATREAD PNPL.REC FROM PNP.LOG, CONO:DTM.EMP ELSE LOGGED.ON = 0
    IF LOGGED.ON THEN
      IF PNPL.LOGOFF.FLAG = "" AND DTM.DATE = PNPL.LOGON.DATE AND SHIFT = PNPL.SHIFT THEN
        DTM.ERR = "LOGGED ON"
        GOSUB 3000
      END
    END
  END
  MAT SAVE.REC=""
*---- CALCULATE CONCURRENT TIME
  TTYPE=DTM.TYPE
  STIME=DTM.TIME.ST
  ETIME=DTM.TIME
  CTIME=""
  ESTAT=""
  *CALL CALC.CONC.TIME (TTYPE, STIME, ETIME, CTIME, ESTAT)
  CALL CALC_CONC_TIME_WS(TTYPE, STIME, ETIME, CTIME, ESTAT)
  DTM.CONC.TIME=CTIME
  TYPE.CNT=COUNT(DTM.TYPE, VM) + (DTM.TYPE # '')
  FOR SC = 1 TO TYPE.CNT
    IF DTM.TYPE<1,SC> = "M" AND DTM.PMT.FLG<1,SC> # "" THEN GOTO 1099
    IF DTM.TYPE<1,SC>="L" OR DTM.TYPE<1,SC>="I" THEN
      IF DTM.CONC.TIME<1,SC>+0 > 0 THEN
        DTM.ERR="CONCURRENT ERROR";GOSUB 3000
      END
      GOTO 1099
    END
    S.OSJ<1,SC>=0
    MATREAD JOB.REC FROM JOB, CONO: DTM.JOB<1,SC> ELSE
      MAT JOB.REC=''
      FND=0
      IF NUM(DTM.JOB<1,SC>) AND DTM.JOB<1,SC> # "" THEN
        IF DTM.JOB<1,SC> < J.CUTOFF.NUM THEN FND=1
      END ELSE
        JC.CNT=COUNT(J.CUTOFF.PREFIX,VM) + (J.CUTOFF.PREFIX # "")
        FOR L=1 TO JC.CNT WHILE FND=0
          PREFX.LEN=LEN(J.CUTOFF.PREFIX<1,L>)
          IF J.CUTOFF.PREFIX<1,L>=DTM.JOB<1,SC>[1,PREFX.LEN] THEN
            CHK.VALUE=DTM.JOB<1,SC>[PREFX.LEN+1,LEN(DTM.JOB<1,SC>)-PREFX.LEN]
            IF NUM(CHK.VALUE) THEN
              IF CHK.VALUE < J.CUTOFF.PRE.NO<1,L> THEN FND=1
            END
          END
        NEXT L
      END
      IF FND=1 THEN
        IF DTM.DIV<1,SC> = "" THEN
          DTM.ERR="INVALID DIVISION";GOSUB 3000
        END
        S.OSJ<1,SC>=1
        JOB.DIV=DTM.DIV<1,SC>
        JOB.TYPE=DTM.JOB.TYPE<1,SC>
      END ELSE
        DTM.ERR="INVALID JOB #";GOSUB 3000
      END
    END
    IF DTM.DIV<1,SC> = "" THEN DTM.DIV<1,SC> = JOB.DIV
    MATREAD DIV.REC FROM DIVISION, CONO : DTM.DIV<1,SC> ELSE
      MAT DIV.REC=""; *T23174
      DTM.ERR="INVALID DIVISION";GOSUB 3000
    END
    MATREAD DEPT.REC FROM DEPARTMENT, CONO : DTM.DEPT<1,SC> ELSE
      MAT DEPT.REC=""; *T23174
      DTM.ERR="INVALID DEPARTMENT";GOSUB 3000
    END
    LOCATE DTM.DEPT<1,SC> IN DIV.DEPT<1>,1 SETTING DLOC ELSE
      DTM.ERR="DIV/DEPT MISMATCH"
      GOSUB 3000
    END
    MATREAD CCTR.REC FROM COST.CNTR, CONO : DTM.CCTR<1,SC> ELSE
      MAT CCTR.REC=""; *T23174
      DTM.ERR="INVALID COST CENTER";GOSUB 3000
    END
*
    IF CCTR.DEPT # DTM.DEPT<1,SC> THEN
      DTM.ERR="DEPT/CCTR MISMATCH"
      GOSUB 3000
    END
    IF CCTR.TYPE='F' THEN
      DTM.ERR="INACTIVE COST CENTER";GOSUB 3000
    END
    LOCATE DTM.CCTR<1,SC> IN DEPT.CCTRS<1>,1 SETTING CLOC ELSE
      DTM.ERR="DEPT/CCTR MISMATCH"
      GOSUB 3000
    END
    IF DTM.TYPE<1,SC> = "M" THEN
      MAT OPER.REC = ""
      MAT FCTR.REC = ""
      IF DTM.PROD<1,SC>="" AND DTM.PMT.FLG<1,SC>="" THEN
        DTM.ERR ="MATERIAL REQUIRED";GOSUB 3000
      END
      WORK.WHSE=''
      IF DTM.PROD<1,SC> # "" THEN
              * this is a prod chk whse / div against job div
        WORK.WHSE=DTM.WHSE<1,SC>
      END ELSE
        IF DTM.SERIAL<1,SC> # "" THEN
          MATREAD ISTK.REC FROM INV_SERIAL,CONO:DTM.SERIAL<1,SC> THEN
            IF ISTK.POST.DATE = "" THEN
              DTM.ERR = "SERIAL NOT RECEIVED"
              GOSUB 3000
            END ELSE
              IF ISTK.WHSE # DTM.WHSE OR ISTK.LOC#DTM.LOC THEN 
                DTM.STATUS ='Serial is in different whse/loc.' 
                GOSUB 3000
              END
            END
            WORK.WHSE=ISTK.WHSE
          END
        END
      END
      * T26497 v
      IF WORK.WHSE # '' THEN
        IF CO.INTR.WHSE # '' AND CO.INTR.WHSE = WORK.WHSE THEN
          DTM.ERR = 'CANNOT USE MATERIAL FROM AN INTER-DIVISIONAL WHSE'
          GOSUB 3000
        END
      END
      * T26497 ^
      IF WORK.WHSE # "" AND JOB.DIV # "" THEN
        MATREAD WHSE.REC FROM WAREHOUSE,CONO:WORK.WHSE THEN
          IF JOB.DIV # WHS.DIV AND WHS.DIV # "00" THEN
            DTM.ERR="PRODUCT WHSE/DIV DOES NOT MATCH JOB DIV"
            GOSUB 3000
          END
        END
      END
    END ELSE
      LOCATE DTM.OPER<1,SC> IN CCTR.OPER<1>,1 SETTING OLOC ELSE
        DTM.ERR="CCTR/OPER MISMATCH"
        GOSUB 3000
      END
      MATREAD OPER.REC FROM OPERATION, CONO : DTM.OPER<1,SC> ELSE
        DTM.ERR="INVALID OPERATION";GOSUB 3000
      END
      DTM.TIME.CODE<1,SC> = STR("0",2-LEN(DTM.TIME.CODE<1,SC>)):DTM.TIME.CODE<1,SC>
      MATREAD FCTR.REC FROM FACTOR, CONO : DTM.TIME.CODE<1,SC> ELSE
        DTM.ERR="INVALID FACTOR";GOSUB 3000
      END
      IF CO.PRS.INTERFACE="Y" THEN S.FCTR<SC>=FCTR.EMP.PRCNT
      IF OPER.MATL.REQ='Y' AND DTM.PROD<1,SC>="" AND DTM.PMT.FLG<1,SC>="" AND DTM.TYPE<1,SC> # "C" THEN
        DTM.ERR="MATERIAL REQUIRED";GOSUB 3000
      END
    END
    IF JOB.STATUS<1,1>=9 THEN
      DTM.ERR="JOB IS CANCELLED";GOSUB 3000
    END
    IF (JOB.STATUS<1,1> > 1 AND JOB.STATUS<1,1> # 5 ) OR JOB.TRACK.DATE<1,7> # "" OR JOB.TRACK.DATE<1,8> # "" THEN
      IF DTM.INIT<1,SC>="" THEN
        DTM.ERR="AUTHORIZATION REQUIRED";GOSUB 3000
      END ELSE
        MATREAD JSI.REC FROM JOB.STAT.CODE, CONO:DTM.INIT<1,SC> ELSE
          DTM.ERR="INVALID AUTHORIZATION";GOSUB 3000
        END
      END
    END
    IF JOB.TYPE # "R" AND JOB.TYPE # DTM.JOB.TYPE<1,SC> THEN
      DTM.ERR="INVALID JOB TYPE";GOSUB 3000
    END
    IF JOB.DIV # DTM.DIV<1,SC> THEN
      DTM.ERR="JOB/DIVISION MISMATCH";GOSUB 3000
    END
    IF JOB.DEPT # DTM.DEPT<1,SC>[1,LEN(JOB.DEPT)] THEN
      DTM.ERR="JOB/DEPARTMENT MISMATCH";GOSUB 3000
    END
    IF CO.SPOIL.FLG="Y" AND JOB.TYPE="R" AND DTM.JOB.TYPE<1,SC>="S" THEN
      IF DTM.SPOIL.CODE<1,SC>="" THEN
        DTM.ERR="SPOILAGE CODE IS MISSING";GOSUB 3000
      END
      READ SPOIL.CODE.DESC FROM SPOILAGE.CODES, CONO:DTM.SPOIL.CODE<1,SC> ELSE
        DTM.ERR="INVALID SPOILAGE CODE";GOSUB 3000
      END
    END
    IF DTM.TYPE<1,SC>="M" THEN GOTO 1080
    IF DTM.TIME.ST<1,SC>="" THEN
      DTM.ERR="START TIME";GOSUB 3000
    END
    STIME=DTM.TIME.ST<1,SC>
    ETIME=DTM.TIME<1,SC>
    IF ETIME = STIME THEN
      DTM.ERR = "START TIME CANNOT EQUAL END TIME"; GOSUB 3000
    END
    IF ETIME < STIME THEN ETIME=ETIME+2400
    ELAP.MIN=(INT(ETIME/100)*60+MOD(ETIME,100))-(INT(STIME/100)*60+MOD(STIME,100))
    S.HRS=INT(ELAP.MIN/60*100+0.5)
    BEGIN CASE
      CASE CCTR.OPER.TYPE<1,OLOC>='V' AND DTM.IMP<1,SC> = '' AND DTM.TYPE<1,SC> # "C"
        DTM.ERR="PRODUCTION QUANTITY REQUIRED";GOSUB 3000
      CASE CCTR.OPER.TYPE<1,OLOC>='U' AND DTM.IMP<1,SC> = '' AND DTM.TYPE<1,SC> # "C"
        DTM.ERR="PRODUCTION QUANTITY REQUIRED";GOSUB 3000
      CASE CCTR.OPER.TYPE<1,OLOC> # 'V' AND CCTR.OPER.TYPE<1,OLOC> # "U" AND DTM.IMP<1,SC> + 0 # 0 AND DTM.TYPE<1,SC> # "C"
        DTM.ERR="INVALID PRODUCTION QUANTITY";GOSUB 3000
      CASE CCTR.OPER.HR.RATE<1,OLOC> > 0
      CASE DTM.JOB.TYPE<1,SC>="N"
      CASE 1
        DTM.ERR="INVALID COST";GOSUB 3000
    END CASE
1080 BEGIN CASE
      CASE DTM.TYPE<1,SC>='M' AND DTM.PMT.FLG<1,SC>=""
        GOSUB 2000
      CASE (DTM.TYPE<1,SC>="T" OR DTM.TYPE<1,SC>="C") AND DTM.PROD<1,SC> # "" AND DTM.PMT.FLG<1,SC>=""
        IF DTM.PROD<1,SC> # "0" THEN
          GOSUB 2000
        END
    END CASE
    IF CO.PRS = "E" THEN
      BEGIN CASE
        CASE EMP.WRK.SCHD<1,SHIFT> = '' AND EMP.SOC.SEC # ''
          DTM.ERR="NO WORK.SHIFT.SCHD FOR THIS SHIFT"
          GOSUB 3000
        CASE DTM.TYPE<1,SC>#"M"
          BEGIN CASE
            CASE DTM.CLASS.CD<1,SC>='' AND DTM.RATE<1,SC>=''
              DTM.CLASS.CD<1,SC>=EMP.JOB.CLASS
              DTM.RATE<1,SC>=EMP.JOB.CL.RATE
            CASE DTM.CLASS.CD<1,SC>=EMP.JOB.CLASS
              IF DTM.RATE<1,SC>='' THEN DTM.RATE<1,SC>=EMP.JOB.CL.RATE
            CASE DTM.CLASS.CD<1,SC> # EMP.JOB.CLASS AND EMP.SOC.SEC # ''
              LOCATE DTM.CLASS.CD<1,SC> IN EMP.VALID.CLASS<1> SETTING VC ELSE
                DTM.ERR="UNAUTHORIZED JOB CLASS"
                GOSUB 3000
              END
              IF DTM.RATE<1,SC>='' THEN DTM.RATE<1,SC>=EMP.VAL.CL.RATE<1,VC>
          END CASE
      END CASE
      IF EMP.WRK.SCHD<1,SHIFT> # '' AND DTM.TYPE<1,SC> # 'M' THEN
        MATREAD WSS.REC FROM WORK.SHIFT,CONO:"!":EMP.WRK.SCHD<1,SHIFT> ELSE
          DTM.ERR="INVALID WORK.SHIFT FOR THIS EMP"
          GOSUB 3000
        END
        BEGIN CASE
          CASE WSS.TRN.LOW="N" AND DTM.RATE<1,SC> < EMP.JOB.CL.RATE
            DTM.ERR="CANNOT WORK AT LOWER CLASS"
          CASE WSS.TRN.LPAY="N" AND DTM.RATE<1,SC> < EMP.JOB.CL.RATE
            DTM.ERR="CANNOT BE PAID LOWER THAN HOME CLASS RATE"
          CASE WSS.TRN.HGH="N" AND DTM.RATE<1,SC> > EMP.JOB.CL.RATE
            DTM.ERR="CANNOT WORK AT HIGHER CLASS"
          CASE WSS.TRN.HPAY="N" AND DTM.RATE<1,SC> > EMP.JOB.CL.RATE
            DTM.ERR="CANNOT BE PAID HIGHER THAT HOME CLASS RATE"
        END CASE
        IF DTM.ERR # "" THEN GOSUB 3000
      END
    END
    NUM.ADD.PROMPT = COUNT(DTM.ADD.PRMPT.CD<1,SC>,SVM) + (DTM.ADD.PRMPT.CD<1,SC> # "")
    FOR I = 1 TO NUM.ADD.PROMPT
      SF.KEY = CONO:DTM.ADD.PRMPT.CD<1,SC,I>
      MATREAD SFP.REC FROM SF.PROMPT,SF.KEY ELSE MAT SFP.REC = ""
      IF SFP.RESP.TYPE = 1 THEN
        IF DTM.ADD.RESP<1,SC,I> = "" THEN 
          DTM.ERR = "ADD/PRMPT-1"
          GOSUB 3000
        END
        IF LEN(DTM.ADD.RESP<1,SC,I>) > SFP.RESP.LEN THEN
          DTM.ERR = "ADD/PRMPT-1"
          GOSUB 3000
        END
      END
      IF SFP.RESP.TYPE = 2 THEN
        IF ALPHA(DTM.ADD.RESP<1,SC,I>) # 1 THEN
          DTM.ERR = "ADD/PRMPT-2"
          GOSUB 3000
        END
        IF LEN(DTM.ADD.RESP<1,SC,I>) > SFP.RESP.LEN THEN
          DTM.ERR = "ADD/PRMPT-2"
          GOSUB 3000
        END
      END
      IF SFP.RESP.TYPE = 3 THEN
        IF DTM.ADD.RESP<1,SC,I> MATCHES "0N" THEN
          NULL
        END ELSE
          DTM.ERR = "ADD/PRMPT-3"
          GOSUB 3000
        END
        IF LEN(DTM.ADD.RESP<1,SC,I>) > SFP.RESP.LEN THEN
          DTM.ERR = "ADD/PRMPT-3"
          GOSUB 3000
        END
      END 
      IF SFP.RESP.TYPE = 6 THEN
        IF DTM.ADD.RESP<1,SC,I> = "" THEN
          DTM.ERR = "ADD/PRMPT-6"
          GOSUB 3000
        END
      END
      IF SFP.RESP.TYPE = 8 THEN
        IF DTM.ADD.RESP<1,SC,I> # "Y" AND DTM.ADD.RESP<1,SC,I> # "N" THEN
          DTM.ERR = "ADD/PRMPT-8"
          GOSUB 3000
        END
      END
      IF SFP.VALDAT NE "" THEN
        VALDAT=CHANGE(SFP.VALDAT<1>,",",VM)
        LOCATE DTM.ADD.RESP<1,SC,I> IN VALDAT<1>,1 SETTING INDX ELSE
          DTM.ERR = "ADD/PROMPT"
          GOSUB 3000
        END
      END
    NEXT I
1099 NEXT SC
  IF SUM(DTM.LAPS.TIME) > 2400 THEN
    DTM.ERR="Total hours exceeds 24.00"
    SC = TYPE.CNT
    GOSUB 3000
  END
  MATWRITE DTM.REC ON DAILY.TIME.MATL, DTM.ID
1999 RETURN
*
*---- EDIT MATERIAL
*
2000 MATREAD INV.REC FROM INVENTORY, CONO:DTM.PROD<1,SC> ELSE
    DTM.ERR="INVALID PRODUCT";GOSUB 3000
    MAT INV.REC = ''   ;*T22837
  END
  MATREAD CATG.REC FROM CATEGORY, CONO : INV.LINE ELSE
    DTM.ERR="CANNOT LOCATE PRODUCT.LINE ":INV.LINE;GOSUB 3000
    MAT CATG.REC = ''     ;*T22837
  END
  IF DTM.OPER<1,SC>#'' AND OPER.PLINE#'' THEN
    LOCATE(INV.LINE,OPER.PLINE,1;POS) ELSE POS = 0
    IF POS < 1 THEN
      DTM.ERR='INVALID PRODUCT LINE FOR OPERATION'
      GOSUB 3000
    END
  END
  IF INV.CUST # "" THEN
    IF "X":INV.CUST # "X":JOB.CUST THEN
      DTM.ERR="CUSTOMER ":INV.CUST:" OWNS STOCK"
      GOSUB 3000
    END
  END
  MATREAD IWH.REC FROM INV.WHSE, CONO:DTM.PROD<1,SC>:'!':DTM.WHSE<1,SC> ELSE
    DTM.ERR='WAREHOUSE IS MISSING';GOSUB 3000
    MAT IWH.REC = ''   ;*T22837
  END
  MATREAD IWLO.REC FROM INV.WHSE.LOC, CONO:DTM.PROD<1,SC>:"!":DTM.WHSE<1,SC>:"!":DTM.LOC<1,SC> ELSE
    IF CATG.TRACK.QOH="Y" THEN
      DTM.ERR="LOCATION RECORD IS MISSING";GOSUB 3000
    END
    MAT IWLO.REC=""
  END
  SERIAL=DTM.SERIAL<1,SC>
  BEGIN CASE
    CASE SERIAL# ""
      MATREAD ISTK.REC FROM INV_SERIAL, CONO:SERIAL THEN
        IF ISTK.POST.DATE = "" THEN
          DTM.ERR = "SERIAL NOT RECEIVED"; GOSUB 3000
        END
      END
    CASE SERIAL="" AND IWLO.SERIAL # ""
      IF CATG.TRK.LVL='S' THEN
        DTM.ERR="SERIAL # MISSING";GOSUB 3000
      END
    CASE SERIAL # ""
      LOCATE SERIAL IN IWLO.SERIAL<1>,1 SETTING P ELSE
        DTM.ERR="INVALID SERIAL";GOSUB 3000
      END
  END CASE
  BEGIN CASE
    CASE DTM.RS.QTYPE<1,SC>=""
    CASE INV.PAP.TYPE="ROLL" AND DTM.RS.QTYPE<1,SC>[1,1]="W"
    CASE INV.PAP.TYPE="ROLL" AND DTM.RS.QTYPE<1,SC>[1,1]="D"
    CASE INV.PAP.TYPE="LROLL" AND DTM.RS.QTYPE<1,SC>[1,1]="S"
    CASE INV.PAP.TYPE="LROLL" AND DTM.RS.QTYPE<1,SC>[1,1]="D"
    CASE INV.PAP.TYPE="PCOAT" AND DTM.RS.QTYPE<1,SC>[1,1]="S"
    CASE INV.PAP.TYPE="PCOAT" AND DTM.RS.QTYPE<1,SC>[1,1]="D"
    CASE INV.PAP.TYPE="SHEET" AND DTM.RS.QTYPE<1,SC>[1,1]="S"
    CASE INV.PAP.TYPE="SHEET" AND DTM.RS.QTYPE<1,SC>[1,1]="D"
    CASE 1
      DTM.ERR="INVALID QUANTITY TYPE";GOSUB 3000
  END CASE
  BARCODE.FLAG=1
  MATREAD INV.REC FROM INVENTORY, CONO:DTM.PROD<1,SC> ELSE MAT INV.REC = ""
  IF CATG.BARCODE = "Y" THEN BARCODE.FLAG = 1 ELSE BARCODE.FLAG = 0
  IF NOT(BARCODE.FLAG) THEN
    BEGIN CASE
      CASE DTM.QTY<1,SC> <= 0 AND DTM.RS.QTYPE<1,SC>[2,1] # "R"
        DTM.ERR = 'MUST HAVE A POSITIVE QUANTITY';GOSUB 3000
      CASE DTM.QTY<1,SC> > IWLO.LOC.ON.HAND AND CATG.TRACK.QOH="Y"
        DTM.ERR='QUANTITY USED IS MORE THAN ON HAND';GOSUB 3000
      CASE S.OSJ<1,SC>=0
        IF DTM.QTY<1,SC> < 0 THEN
          DTM.ERR='QUANTITY REVERSED IS MORE THAN USED';GOSUB 3000
        END
    END CASE
  END
2099 RETURN
3000* Load error status
  IF INDEX(DTM.STATUS<1,SC>,DTM.ERR,1) < 1 THEN
    DTM.STATUS<1,SC,-1> = DTM.ERR
  END
  DTM.ERR = ''
  RETURN
*
*---- ERROR ROUTINE
*
*91000 ERR.TYPE=1
*  CALL SYSCOM(MAT SYSCOM.REC)
*  RETURN
93000
*ERR.TYPE=3
*  CALL SYSCOM(MAT SYSCOM.REC)
*
*---- END OF JOB
*
99999 *
END
