*********************************************************************
*
* REVISION    - [08.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
*
* PROGRAM - SAS.REPORT.TYPE
*
* BY      - NICK AMENDOLA, COMPUTER BUSINESS ASSOCIATES
*
* DATE    - 08/29/84
*
* DESCRIPTION
*
* This program prints Sales Analysis by Job Type.
*
*T26493 cmykleb 03/26/2002 * Change calling proc to use REPORT.SCRN and
*                            change pgm to use GET.PROG.HEAD for heading.
*********************************************************************
*
*********************************************************************
*
******************  INSERT COPY STATEMENTS HERE  ********************
*
*********************************************************************
*
*COPY>PMC.CPYLIB>INVOICE.SALES.STATS
*COPY>PMC.CPYLIB>CUSTOMER
*COPY>PMC.CPYLIB>SALESMAN
*
*********************************************************************
*
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*
*---- DIMENSIONED VARIABLES
*
   DIM HEAD(5); DIM BHEAD(5); DIM SHEAD(5); DIM THEAD(6)
   DIM SUB(20); DIM DEF(20); DIM SPC(20); DIM CDATA(20); DIM PDATA(20)
   DIM CJ(20); DIM CW(20); DIM CV(20); DIM TF(20); DIM FFMT(20); DIM BRK(5); DIM SKP(5)
   DIM TOT1(20); DIM TOT2(20); DIM TOT3(20); DIM TOT4(20); DIM TOT5(20); DIM TOT6(20); DIM TOTX(20)
   MAT HEAD=""; MAT BHEAD=""; MAT SHEAD=""; MAT THEAD=""
   MAT SUB=""; MAT DEF=""; MAT SPC=""; MAT CDATA=""; MAT PDATA=""
   MAT CJ=""; MAT CW=""; MAT CV=""; MAT TF=""; MAT FFMT=""; MAT BRK=""; MAT SKP=""
   MAT TOT1=""; MAT TOT2=""; MAT TOT3=""; MAT TOT4=""; MAT TOT5=""; MAT TOT6=""; MAT TOTX=""
*
*---- PRE-INITIALIZATION
*
   PROCREAD PARAM ELSE
      PRINT "MUST RUN FROM PROC"
      STOP
   END
   CONO = PARAM<1>
*T26493 v
*  CONAME = PARAM<2>
*  START.DATE = PARAM<3>
*  END.DATE = PARAM<4>
*  OPTION = PARAM<5>
*  RUN.DATE = DATE()
*  RUN.TIME = TIME()
*  HEAD(1) = "RUN DATE: ":OCONV(RUN.DATE,"D2/"):"    TIME: ":OCONV(RUN.TIME,"MTS")[1,5]
*  HEAD(1) = HEAD(1) "L#40"
*  SP = INT((40-LEN(CONAME))/2)
*  CNAME = SPACE(SP):CONAME
*  CNAME = CNAME "L#40"
*  HEAD(1) = HEAD(1):CNAME
*  HEAD(1) = HEAD(1):SPACE(40):"PAGE: "
   START.DATE = PARAM<4>
   END.DATE = PARAM<5>
   IF START.DATE = "ALL" THEN
      START.DATE = PARAM<6>
      END.DATE = PARAM<7>
   END
   CONAME = ""
   REPORT.NAME = ""
   REPORT.NUMBER = PARAM<2>
   CALL GET.PROG.HEAD(CONO,CONAME,REPORT.NAME,REPORT.NUMBER,"",HEAD(1),HEAD(2))
*T26493 ^
   GHEAD = "*** GRAND TOTALS ***"
*
*********************************************************************
*
********************  DEFINE PAGE HEADINGS HERE  ********************
*
*********************************************************************
*
*T26493 v
*  HEAD(3) = SPACE(52):"BY JOB CATEGORY "
*  HEAD(4) = SPACE(47):"FROM ":START.DATE:" TO ":END.DATE
   IF START.DATE MATCHES '6N' THEN
      HEAD(3) = SPACE(65):"FROM ":START.DATE:" TO ":END.DATE
   END ELSE
      HEAD(3) = SPACE(63):"FROM ":START.DATE:" TO ":END.DATE
   END
*T26493 ^
*
*********************************************************************
*
********************  DEFINE BREAK HEADINGS HERE  *******************
*
*********************************************************************
*
*
*********************************************************************
*
********************  DEFINE TOTAL HEADINGS HERE  *******************
*
*********************************************************************
*
   THEAD(1) = "TOTALS FOR JOB CATEGORY "
*
*********************************************************************
*
********************  DEFINE COLUMN HEADINGS HERE  ******************
*
*********************************************************************
*
   SUB(1) = "CATEG":VM:"CODE"
   SUB(2) = "JOB CATEGORY"
   SUB(3) = "CUSTOMER NAME"
   SUB(4) = "SALESREP NAME"
   SUB(5) = "JOB NO"
   SUB(6) = "INVOICE":VM:"DATE"
   SUB(7) = "NET":VM:"SALES"
   SUB(8) = "TOTAL":VM:"JOB COST"
   SUB(9) = "PROFIT":VM:"MARGIN$"
   SUB(10) = "PROFIT":VM:"MARGIN%"
*
*********************************************************************
*
********************  DEFINE DATA ATTRIBUTES HERE  ******************
*
*********************************************************************
*
   DEF(1) = "L6;;B1;2"
   DEF(2) = "L15"
   DEF(3) = "L30"
   DEF(4) = "L20"
   DEF(5) = "L8"
   DEF(6) = "L8;D2/"
   DEF(7) = "R9;MD0-;T"
   DEF(8) = "R9;MD0-;T"
   DEF(9) = "R8;MD0-;T"
   DEF(10) = "R8;MD1-;T"
*
*********************************************************************
*
********************  DEFINE ADDITIONAL SPACES TO INSERT  ***********
********************  PRIOR TO EACH COLUMN                ***********
*
*********************************************************************
*
   SPC(2) = 1
*
*********************************************************************
*
********************  OPEN REQUIRED FILES HERE  *********************
*
*********************************************************************
*
   OPEN "","INVOICE.SALES.STATS" TO INVOICE.SALES.STATS ELSE
      ERRMSG = "CANNOT OPEN INVOICE.SALES.STATS FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","JOB.CATEGORY" TO JOB.CATEGORY ELSE
      ERRMSG = "CANNOT OPEN JOB.CATEGORY FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","JOB" TO JOB ELSE
      ERRMSG = "CANNOT OPEN JOB FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","CUSTOMER" TO CUSTOMER ELSE
      ERRMSG = "CANNOT OPEN CUSTOMER FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","SALESMAN" TO SALESMAN ELSE
      ERRMSG = "CANNOT OPEN SALESMAN FILE"
      GOSUB 90000
      STOP
   END
*
*********************************************************************
*
   GOSUB 20000
*
*-------------------------*
*---- MAIN PROCESSING ----*
*-------------------------*
*
100*
   READNEXT ID ELSE
      XXBREAK = BRK.CNT + 1
      THEAD(1) = "TOTALS FOR JOB CATEGORY ":PDATA(1)
      GOSUB 1000
      PRINTER OFF
      PRINTER CLOSE
      STOP
   END
*
*********************************************************************
*
********************  READ FILE(S) AND LOAD ARRAY HERE  *************
*
*********************************************************************
*
   MATREAD ISS.REC FROM INVOICE.SALES.STATS, ID ELSE GOTO 100
   MATREAD CUST.REC FROM CUSTOMER, CONO:ISS.CUST.ID ELSE
      MAT CUST.REC = ""
   END
   MATREAD SALESMAN.REC FROM SALESMAN, CONO:ISS.SLSM.ID ELSE
      MAT SALESMAN.REC = ""
   END
   READ CATEGORY FROM JOB.CATEGORY, CONO:ISS.JOB.CAT ELSE
      CATEGORY = ""
   END
*     INVOICE.TAX = 0; INVOICE.SHIP = 0
*     C2 = COUNT(ISS.INVOICE.NO,VM) + (ISS.INVOICE.NO # "")
*     FOR C = 1 TO C2
*        INVOICE.TAX = INVOICE.TAX + ISS.INVOICE.TAX<1,C>
*        INVOICE.SHIP = INVOICE.SHIP + ISS.INVOICE.SHIP<1,C>
*     NEXT C
   CDATA(1) = ISS.JOB.CAT
   CDATA(2) = CATEGORY
   CDATA(3) = CUST.NAME
   CDATA(4) = SALS.NAME
   CDATA(5) = FIELD(ID,"_",3)
   CDATA(6) = ISS.INVOICE.DATE
   CDATA(7) = ISS.INVOICE.TOTAL-ISS.COMMISSION<1,1>
   IF CDATA(7) < 0 THEN
      CDATA(7) = INT(CDATA(7)/100-0.5)
   END ELSE
      CDATA(7) = INT(CDATA(7)/100+0.5)
   END
   CDATA(8) = ISS.COST.TOTAL-ISS.SHIP.COST
   IF CDATA(8) < 0 THEN
      CDATA(8) = INT(CDATA(8)/100-0.5)
   END ELSE
      CDATA(8) = INT(CDATA(8)/100+0.5)
   END
   CDATA(9) = CDATA(7) - CDATA(8)
   IF CDATA(7)+0 > 0 THEN
      CDATA(10) = CDATA(9) / CDATA(7) * 1000
      IF CDATA(10) < 0 THEN
         CDATA(10) = INT(CDATA(10) - 0.5)
      END ELSE
         CDATA(10) = INT(CDATA(10) + 0.5)
      END
   END ELSE
      CDATA(10) = 0
   END
   IF CDATA(7) + CDATA(8) = 0 THEN GOTO 100
   THEAD(1) = "TOTALS FOR JOB CATEGORY ":PDATA(1)
*
*********************************************************************
*
*---- CHECK BREAKS
*
200*
   DONE = 0
   FOR B = 1 TO BRK.CNT UNTIL DONE
      IF CDATA(BRK(B)) <> PDATA(BRK(B)) THEN
         BRK.LVL = B
         XXBREAK = BRK.CNT - B + 1
         GOSUB 1000
         DONE = 1
      END
   NEXT B
   GOSUB 500
   MAT PDATA = MAT CDATA
   GOTO 100
*
*---------------------------*
*---- PRINT DETAIL LINE ----*
*---------------------------*
*
500*
   IF LINE.COUNT >= PAGE.LENGTH THEN GOSUB 10000
   IF CV(1) = "" THEN
      PLINE = CDATA(1) FFMT(1)
   END ELSE
      PLINE = OCONV(CDATA(1),CV(1)) FFMT(1)
   END
   FOR C = 2 TO COL.CNT
      IF CV(C) = "" THEN
         PLINE = PLINE : SPC(C) : CDATA(C) FFMT(C)
      END ELSE
         PLINE = PLINE : SPC(C) : OCONV(CDATA(C),CV(C)) FFMT(C)
      END
   NEXT C
   PRINT PLINE
   LINE.COUNT = LINE.COUNT + 1
*
   FOR C = 1 TO COL.CNT
      IF TF(C)[1,1] = "T" THEN
         TOT1(C) = TOT1(C) + CDATA(C)
      END
   NEXT C
   RETURN
*
*------------------------*
*---- PROCESS BREAKS ----*
*------------------------*
*
*---- PROCESS BREAKS (LOWEST LEVEL TO HIGHEST)
*
1000*
   IF FIRST.TIME THEN
      FIRST.TIME = 0
      RETURN
   END
   IF TOT.CNT = 0 THEN GOTO 8000
   MAT TOTX = MAT TOT1
   BRK.NO = BRK.CNT
   GOSUB 9000
   FOR C = 1 TO COL.CNT
      IF TF(C)[1,1] = "T" THEN
         TOT2(C) = TOT2(C) + TOT1(C)
      END
   NEXT C
   MAT TOT1 = ""
   IF XXBREAK = 1 THEN GOTO 8000
*
*---- PROCESS LEVEL 2 BREAK
*
2000*
   MAT TOTX = MAT TOT2
   BRK.NO = BRK.CNT - 1
   GOSUB 9000
   FOR C = 1 TO COL.CNT
      IF TF(C)[1,1] = "T" THEN
         TOT3(C) = TOT3(C) + TOT2(C)
      END
   NEXT C
   MAT TOT2 = ""
   IF XXBREAK = 2 THEN GOTO 8000
*
*---- PROCESS LEVEL 3 BREAK
*
3000*
   MAT TOTX = MAT TOT3
   BRK.NO = BRK.CNT - 2
   GOSUB 9000
   FOR C = 1 TO COL.CNT
      IF TF(C)[1,1] = "T" THEN
         TOT4(C) = TOT4(C) + TOT3(C)
      END
   NEXT C
   MAT TOT3 = ""
   IF XXBREAK = 3 THEN GOTO 8000
*
*---- PROCESS LEVEL 4 BREAK
*
4000*
   MAT TOTX = MAT TOT4
   BRK.NO = BRK.CNT - 3
   GOSUB 9000
   FOR C = 1 TO COL.CNT
      IF TF(C)[1,1] = "T" THEN
         TOT5(C) = TOT5(C) + TOT4(C)
      END
   NEXT C
   MAT TOT4 = ""
   IF XXBREAK = 4 THEN GOTO 8000
*
*---- PROCESS LEVEL 5 BREAK
*
5000*
   MAT TOTX = MAT TOT5
   BRK.NO = BRK.CNT - 4
   GOSUB 9000
   FOR C = 1 TO COL.CNT
      IF TF(C)[1,1] = "T" THEN
         TOT6(C) = TOT6(C) + TOT5(C)
      END
   NEXT C
   MAT TOT5 = ""
   IF XXBREAK = 5 THEN GOTO 8000
*
*---- PROCESS LEVEL 6 BREAK
*
6000*
   MAT TOTX = MAT TOT6
   BRK.NO = BRK.CNT - 5
   GOSUB 9000
   MAT TOT6 = ""
   GOTO 8000
*
*---- BREAK COMPLETED
*
8000*
   LINE.COUNT = LINE.COUNT + SKP(BRK.LVL)
   IF LINE.COUNT < PAGE.LENGTH THEN
      FOR LC = 1 TO SKP(BRK.LVL)
         PRINT
      NEXT LC
   END
   RETURN
*
*--------------------------*
*---- PRINT TOTAL LINE ----*
*--------------------------*
*
9000*
   TOTX(9) = TOTX(7) - TOTX(8)
   IF TOTX(7)+0 > 0 THEN
      TOTX(10) = TOTX(9) / TOTX(7) * 1000
      IF TOTX(10) < 0 THEN
         TOTX(10) = INT(TOTX(10) - 0.5)
      END ELSE
         TOTX(10) = INT(TOTX(10) + 0.5)
      END
   END ELSE
      TOTX(10) = 0
   END
   IF TF(1) = "" THEN
      TLINE = SPACE(CW(1))
   END ELSE
      TLINE = OCONV(TOTX(1),CV(1)) FFMT(1)
   END
   FOR C = 2 TO COL.CNT
      IF TF(C) = "" THEN
         TLINE = TLINE : SPC(C) : SPACE(CW(C))
      END ELSE
         TLINE = TLINE : SPC(C) : OCONV(TOTX(C),CV(C)) FFMT(C)
      END
   NEXT C
   TFMT = "R#":TOT.PTR
   IF BRK.NO = 0 THEN
      TLINE = GHEAD TFMT : TLINE[TOT.PTR+1,999]
      PRINT; PRINT
      LINE.COUNT = LINE.COUNT + 2
      PRINT TLINE
      LINE.COUNT = LINE.COUNT + 1
      PRINT ULINE2
      LINE.COUNT = LINE.COUNT + 1
   END ELSE
      TLINE = THEAD(BRK.NO) TFMT : TLINE[TOT.PTR+1,999]
      PRINT ULINE1
      LINE.COUNT = LINE.COUNT + 1
      PRINT TLINE
      LINE.COUNT = LINE.COUNT + 1
   END
   RETURN
*
*-----------------------------*
*---- PRINT PAGE HEADINGS ----*
*-----------------------------*
*
10000*
   PRINT CHAR(12):
   LINE.COUNT = 0
   PAGE.NO = PAGE.NO + 1
   PRINT HEAD(1):PAGE.NO
   FOR HD = 2 TO HEAD.CNT
      PRINT HEAD(HD)
   NEXT HD
   LINE.COUNT = LINE.COUNT + HEAD.CNT
   FOR BH = 1 TO BRK.CNT
      IF BHEAD(BH) # "" THEN
         PRINT BHEAD(BH)
         LINE.COUNT = LINE.COUNT + 1
      END
   NEXT BH
   PRINT
   LINE.COUNT = LINE.COUNT + 1
   FOR SH = 1 TO SH.CNT
      PRINT SHEAD(SH)
   NEXT SH
   LINE.COUNT = LINE.COUNT + 1
   RETURN
*
*------------------------*
*---- INITIALIZATION ----*
*------------------------*
*
20000*
*---- GENERAL PARAMETERS
   LINE.COUNT = 99
   PAGE.NO = 0
   FIRST.TIME = 1
*---- COMPUTE PAGE HEADING COUNT
   HEAD.CNT = ""
   FOR HD = 1 TO 5 WHILE HEAD.CNT = ""
      IF HEAD(HD) = "" THEN HEAD.CNT = HD - 1
   NEXT HD
*---- COMPUTE COLUMN HEADING COUNT
   COL.CNT = ""
   FOR C = 20 TO 1 STEP -1 WHILE COL.CNT = ""
      IF DEF(C) # "" THEN COL.CNT = C
   NEXT C
*---- SEGREGATE COLUMN DEFINITION ATTRIBUTES
   CW.TOT = 0
   BHEAD.CNT = 0
   TOT.CNT = 0
   FOR C = 1 TO COL.CNT
      DEF1 = FIELD(DEF(C),";",1)
      DEF2 = FIELD(DEF(C),";",2)
      DEF3 = FIELD(DEF(C),";",3)
      DEF4 = FIELD(DEF(C),";",4)
      CJ(C) = DEF1[1,1]
      CW(C) = DEF1[2,3]
      CV(C) = DEF2
      FFMT(C) = CJ(C):"#":CW(C)
      BEGIN CASE
         CASE DEF3[1,1] = "T"
            IF CV(C) = "" THEN CV(C) = "MD0"
            TF(C) = DEF3
            TOT.CNT = TOT.CNT + 1
         CASE DEF3[1,1] = "B"
            B = DEF3[2,1]
            BRK(B) = C
            BEGIN CASE
               CASE DEF4 = "N"
                  SKP(B) = 99
                  BHEAD.CNT = BHEAD.CNT + 1
               CASE NUM(DEF4) AND DEF4 # ""
                  SKP(B) = DEF4
               CASE 1
                  SKP(B) = 1
            END CASE
      END CASE
      CW.TOT = CW.TOT + CW(C) + SPC(C)
   NEXT C
*---- DETERMINE COLUMN SPACING
   SEP = INT((132-CW.TOT)/(COL.CNT-1))
   IF SEP > 3 THEN SEP = 3
   FOR C = 2 TO COL.CNT
      SP = SPC(C) + SEP
      SPC(C) = SPACE(SP)
   NEXT C
*---- COMPUTE BREAK COUNT
   BRK.CNT = ""
   FOR B = 1 TO 5 WHILE BRK.CNT = ""
      IF BRK(B) = "" THEN BRK.CNT = B - 1
   NEXT B
*---- COMPUTE COLUMN HEADING LINE COUNT
   SH.CNT = 0
   FOR C = 1 TO COL.CNT
      N = COUNT(SUB(C),VM) + (SUB(C) # "")
      IF N > SH.CNT THEN SH.CNT = N
   NEXT C
*---- SHIFT COLUMN HEADINGS TO PROPER LINE
   IF SH.CNT > 1 THEN
      FOR C = 1 TO COL.CNT
         N = COUNT(SUB(C),VM) + (SUB(C) # "")
         FOR SH = N+1 TO SH.CNT
            SUB(C) = VM:SUB(C)
         NEXT SH
      NEXT C
   END
*---- CENTER COLUMN HEADINGS AND UNDERLINE
   FOR C = 1 TO COL.CNT
      FOR SH = 1 TO SH.CNT
         X = SUB(C)<1,SH>
         X = TRIM(X)
         XL = LEN(X)
         SP = INT((CW(C)-XL)/2)
         IF CJ(C) = "R" THEN
            X = X:SPACE(SP)
         END ELSE
            X = SPACE(SP):X
         END
         SUB(C)<1,SH> = X FFMT(C)
      NEXT SH
      SUB(C) = SUB(C):VM:STR("-",CW(C))
   NEXT C
*---- BUILD COLUMN HEADING PRINT LINES
   SH.CNT = SH.CNT + 1
   FOR SH = 1 TO SH.CNT
      SHEAD(SH) = SUB(1)<1,SH>
   NEXT SH
   FOR SH = 1 TO SH.CNT
      FOR C = 2 TO COL.CNT
         SHEAD(SH) = SHEAD(SH) : SPC(C) : SUB(C)<1,SH>
      NEXT C
   NEXT SH
*---- BUILD TOTAL COLUMN UNDERLINE
   IF TF(1) = "" THEN
      ULINE1 = SPACE(CW(1))
      ULINE2 = SPACE(CW(1))
   END ELSE
      ULINE1 = STR("-",CW(1))
      ULINE2 = STR("=",CW(1))
   END
   FOR C = 2 TO COL.CNT
      IF TF(C) = "" THEN
         ULINE1 = ULINE1 : SPC(C) : SPACE(CW(C))
         ULINE2 = ULINE2 : SPC(C) : SPACE(CW(C))
      END ELSE
         ULINE1 = ULINE1 : SPC(C) : STR("-",CW(C))
         ULINE2 = ULINE2 : SPC(C) : STR("=",CW(C))
      END
   NEXT C
*---- COMPUTE SPACE FOR TOTAL HEADINGS
   TOT.PTR = 0
   ULEN = LEN(ULINE1)
   FOR TP = 1 TO ULEN WHILE TOT.PTR = 0
      IF ULINE1[TP,1] # " " THEN
         TOT.PTR = TP - 3
      END
   NEXT TP
   IF TOT.PTR < 0 THEN TOT.PTR = 0
*---- COMPUTE PAGE LENGTH
   PAGE.LENGTH = 66 - HEAD.CNT - BHEAD.CNT - 1 - SH.CNT - ((BRK.CNT+1)*2)- 6
*
   PRINTER ON
   RETURN
*
*-----------------------*
*---- ERROR ROUTINE ----*
*-----------------------*
*
90000*
   PRINT ERRMSG:
   INPUT REPLY:
   RETURN
END
