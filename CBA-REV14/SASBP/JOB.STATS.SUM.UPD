*********************************************************************
*
* REVISION    - [08.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
*
* PROGRAM  - JOB.STATS.SUM.UPD
*
* AUTHOR   - NICK AMENDOLA, COMPUTER BUSINESS ASSOCIATES
*
* DATE     - 11/21/85
*
* DESCRIPTION
*
* This program will summarize the items selected from the JOB.SALES.STATS
* file into the JOB.STATS.SUM file for summary reporting.
*
*********************************************************************
*
*---- COPY STATEMENTS
*
*COPY>PMC.CPYLIB>JOB.SALES.STATS
*COPY>PMC.CPYLIB>JOB.STATS.SUM
*COPY>CPYLIB>CHAR
*
*---- GET PARAMETERS
*
      PROCREAD PARAM ELSE
         ERRMSG = "MUST EXECUTE FROM A PROC"
         GOSUB 90000
         STOP
      END
      TYPE = PARAM<5>
      BEGIN CASE
         CASE TYPE = "CUST"
         CASE TYPE = "SLSM"
         CASE TYPE = "CAT"
         CASE TYPE = "SCD"
            MASK = PARAM<6>
            MASK.LEN = LEN(MASK)
            ERR = 0
            FOR M = 1 TO MASK.LEN UNTIL ERR
               IF MASK[M,1] # "X" AND MASK[M,1] # "." THEN ERR = 1
            NEXT M
            IF ERR THEN
               ERRMSG = 'INVALID MASK - VALID ENTRIES MUST CONTAIN ONLY "X" AND "."'
               GOSUB 90000
               STOP
            END
         CASE TYPE = "PRESS"
         CASE TYPE = "COLOR"
         CASE 1
            ERRMSG = "INVALID TYPE - ":TYPE
            GOSUB 90000
            STOP
      END CASE
*
*---- OPEN ALL FILES
*
      OPEN "","JOB.SALES.STATS" TO JOB.SALES.STATS ELSE
         ERRMSG = "CANNOT OPEN JOB.SALES.STATS FILE"
         GOSUB 90000
         STOP
      END
      OPEN "","JOB.STATS.SUM" TO JOB.STATS.SUM ELSE
         ERRMSG = "CANNOT OPEN JOB.STATS.SUM FILE"
         GOSUB 90000
         STOP
      END
*
*---- INITIALIZATION
*
      MAT JSX.REC = ""
      PRIOR.ID = ""
*
*---- MAIN PROCESSING
*
100*
      READNEXT JSS.KEY ELSE
         IF PRIOR.ID # "" THEN
             MATWRITE JSX.REC ON JOB.STATS.SUM, CONO:"*":TYPE:"*":PRIOR.ID
         END
         STOP
      END
      CONO = JSS.KEY[1,3]
      MATREAD JSS.REC FROM JOB.SALES.STATS, JSS.KEY ELSE GOTO 100
      BEGIN CASE
         CASE TYPE = "CUST"
            IF JSS.CUST.ID = "" THEN JSS.CUST.ID = "??????"
            IF JSS.CUST.ID # PRIOR.ID THEN
               GOSUB 3000
               PRIOR.ID = JSS.CUST.ID
               MATREADU JSX.REC FROM JOB.STATS.SUM, CONO:"*":TYPE:"*":PRIOR.ID ELSE MAT JSX.REC = ""
            END
         CASE TYPE = "SLSM"
            IF JSS.SLSM.ID = "" THEN JSS.SLSM.ID = "???"
            IF JSS.SLSM.ID # PRIOR.ID THEN
               GOSUB 3000
               PRIOR.ID = JSS.SLSM.ID
               MATREADU JSX.REC FROM JOB.STATS.SUM, CONO:"*":TYPE:"*":PRIOR.ID ELSE MAT JSX.REC = ""
            END
         CASE TYPE = "CAT"
            IF JSS.JOB.CAT = "" THEN JSS.JOB.CAT = "???"
            IF JSS.JOB.CAT # PRIOR.ID THEN
               GOSUB 3000
               PRIOR.ID = JSS.JOB.CAT
               MATREADU JSX.REC FROM JOB.STATS.SUM, CONO:"*":TYPE:"*":PRIOR.ID ELSE MAT JSX.REC = ""
            END
         CASE TYPE = "SCD"
            IF JSS.SALES.CODE = "" THEN
               IF MASK.LEN = 0 THEN
                  JSS.SALES.CODE = "???"
               END ELSE
                  JSS.SALES.CODE = STR("?",MASK.LEN)
               END
            END
            SCODE = JSS.SALES.CODE
            FOR M = 1 TO MASK.LEN
               IF MASK[M,1] = "." THEN
                  SCODE = SCODE[1,M-1]:".":SCODE[M+1,99]
               END
            NEXT M
            IF SCODE # PRIOR.ID THEN
               GOSUB 3000
               PRIOR.ID = SCODE
               MATREADU JSX.REC FROM JOB.STATS.SUM, CONO:"*":TYPE:"*":PRIOR.ID ELSE MAT JSX.REC = ""
            END
         CASE TYPE = "PRESS"
            IF JSS.MULTI.PRESS = "Y" THEN
               PRESS.ID = "MULTI"
            END ELSE
               PRESS.ID = JSS.PRESS
            END
            IF PRESS.ID = "" THEN PRESS.ID = "???"
            IF PRESS.ID # PRIOR.ID THEN
               GOSUB 3000
               PRIOR.ID = PRESS.ID
               MATREADU JSX.REC FROM JOB.STATS.SUM, CONO:"*":TYPE:"*":PRIOR.ID ELSE MAT JSX.REC = ""
            END
         CASE TYPE = "COLOR"
            IF JSS.NO.COLORS = "" THEN JSS.NO.COLORS = "?"
            IF JSS.NO.COLORS # PRIOR.ID THEN
               GOSUB 3000
               PRIOR.ID = JSS.NO.COLORS
               MATREADU JSX.REC FROM JOB.STATS.SUM, CONO:"*":TYPE:"*":PRIOR.ID ELSE MAT JSX.REC = ""
            END
      END CASE
*
      INVOICE.TAX = 0; INVOICE.SHIP = 0
      C2 = COUNT(JSS.INVOICE.NO,VM) + (JSS.INVOICE.NO # "")
      FOR C = 1 TO C2
         INVOICE.TAX = INVOICE.TAX + JSS.INVOICE.TAX<1,C>
         INVOICE.SHIP = INVOICE.SHIP + JSS.INVOICE.SHIP<1,C>
      NEXT C
      JSX.TOT.SALES = JSX.TOT.SALES + JSS.INVOICE.TOTAL + INVOICE.TAX 
      JSX.NET.SALES = JSX.NET.SALES + JSS.INVOICE.TOTAL - JSS.COMMISSION<1,1>
      JSX.VAL.ADDED = JSX.VAL.ADDED + JSS.VALUE.ADDED
      JSX.TOT.COST = JSX.TOT.COST + JSS.COST.TOTAL - JSS.SHIP.COST
      JSX.ADJ.COST = JSX.ADJ.COST + JSS.ADJUST.COST<1,1> - JSS.SHIP.COST
      JSX.MKT.COST = JSX.MKT.COST + JSS.ADJUST.COST<1,2>
      JSX.SPOILAGE = JSX.SPOILAGE + JSS.SPOILAGE
*
      IF JSX.NET.SALES+0 > 0 THEN
         JSX.VAL.ADDED.PCT = INT(JSX.VAL.ADDED / JSX.NET.SALES * 10000 + 0.5)
         JSX.TOT.COST.PCT = INT((JSX.NET.SALES - JSX.TOT.COST) / JSX.NET.SALES * 10000 + 0.5)
         JSX.ADJ.COST.PCT = INT((JSX.NET.SALES - JSX.ADJ.COST) / JSX.NET.SALES * 10000 + 0.5)
         JSX.MKT.COST.PCT = INT((JSX.NET.SALES - JSX.MKT.COST) / JSX.NET.SALES * 10000 + 0.5)
         JSX.SPOILAGE.PCT = INT(JSX.SPOILAGE / JSX.NET.SALES * 10000 + 0.5)
      END ELSE
         JSX.VAL.ADDED.PCT = 0
         JSX.TOT.COST.PCT = 0
         JSX.ADJ.COST.PCT = 0
         JSX.MKT.COST.PCT = 0
         JSX.SPOILAGE.PCT = 0
      END
      GOTO 100
*
*---- WRITE JOB.STATS.SUM RECORD
*
3000*
      IF PRIOR.ID # "" THEN
         MATWRITE JSX.REC ON JOB.STATS.SUM, CONO:"*":TYPE:"*":PRIOR.ID
      END
      RETURN
*
*---- ERROR ROUTINE
*
90000*
      PRINT @(0,23):CL:ERRMSG:
      INPUT REPLY,3:
      PRINT @(0,23):CL:
      RETURN
   END
