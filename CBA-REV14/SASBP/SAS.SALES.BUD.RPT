*********************************************************************
*
* PROGRAM - SAS.DAILY.SALES.RPT
*
* BY      - TODD SMITH, HAGEN & ASSOCIATES
*
* DATE    - 13 JAN 94
*
* DESCRIPTION
*
*
* This program prints budget information in units or dollars for a
* user-defined twelve month period breaking on product, customer
* and salesperson
*
* TASK 18573 LLH 1-52 ACCOUNTING PERIODS
*
*T26493 cmykleb 03/27/2002 * Change rpt to get rpt # from the proc and
*                            use GET.PROG.HEAD to get the heading.
*********************************************************************
*
*********************************************************************
*
******************  INSERT COPY STATEMENTS HERE  ********************
*
*********************************************************************
*
*COPY>PMC.CPYLIB>CUSTOMER
*COPY>PMC.CPYLIB>SALESMAN
*COPY>PMC.CPYLIB>SALESDATES
*COPY>PMC.CPYLIB>COMPANY
*COPY>ICS.CPYLIB>CATEGORY
*COPY>ICS.CPYLIB>INVENTORY
*COPY>SAS.CPYLIB>BUDGET.SALES
*
*********************************************************************
*
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*
*---- DIMENSIONED VARIABLES
*
   DIM HEAD(5); DIM BHEAD(5); DIM SHEAD(5); DIM THEAD(6)
   DIM SUB(20); DIM DEF(20); DIM SPC(20); DIM CDATA(20); DIM PDATA(20)
   DIM CJ(20); DIM CW(20); DIM CV(20); DIM TF(20); DIM FFMT(20); DIM BRK(5); DIM SKP(5)
   DIM TOT1(20); DIM TOT2(20); DIM TOT3(20); DIM TOT4(20); DIM TOT5(20); DIM TOT6(20); DIM TOTX(20)
   DIM STAGSET(20); DIM STAGCHK(20); DIM CENTRE(20)
   MAT HEAD=""; MAT BHEAD=""; MAT SHEAD=""; MAT THEAD=""
   MAT SUB=""; MAT DEF=""; MAT SPC=""; MAT CDATA=""; MAT PDATA=""
   MAT CJ=""; MAT CW=""; MAT CV=""; MAT TF=""; MAT FFMT=""; MAT BRK=""; MAT SKP=""
   MAT TOT1=""; MAT TOT2=""; MAT TOT3=""; MAT TOT4=""; MAT TOT5=""; MAT TOT6=""; MAT TOTX=""
   MAT STAGCHK="0"; MAT STAGSET="0";MAT CENTRE=''
*
*
   OPEN "","COMPANY" TO COMPANY ELSE
      ERRMSG = "CANNOT OPEN COMPANY FILE"
      GOSUB 90000
      STOP
   END
   OPEN "","CONTROL" TO CONTROL ELSE
      ERRMSG = "CANNOT OPEN CONTROL FILE"
      GOSUB 90000
      STOP
   END
*
*---- PRE-INITIALIZATION
*
   PROCREAD PARAM ELSE
      PRINT "MUST RUN FROM PROC"
      STOP
   END
   CONO = PARAM<1>
*T26493 v
*  SLSM.CODE = PARAM<2> ;* SALESMAN
*  CUST.CODE = PARAM<3> ;* CUSTOMER NUMBER
*  RPT.STYLE = PARAM<4> ;* IS IT DETAILED OR SUMMARY
*  RPT.TYPE  = PARAM<5> ;* IS IT IN (D)OLLARS OR (U)NITS
*  CUST.OR.SALESMAN  = PARAM<11> ;* C=CUSTOMER, S=SALESAMAN
*  YEAR = PARAM<6>  ;* YEAR IN YYYY FORMAT
*  BEG.PERIOD = PARAM<7>
*  END.PERIOD = PARAM<8>
   SLSM.CODE = PARAM<5> ;* SALESMAN
   CUST.CODE = PARAM<4> ;* CUSTOMER NUMBER
   RPT.STYLE = PARAM<11> ;* IS IT DETAILED OR SUMMARY
   RPT.TYPE  = PARAM<6> ;* IS IT IN (D)OLLARS OR (U)NITS
   CUST.OR.SALESMAN  = PARAM<3> ;* C=CUSTOMER, S=SALESAMAN
   YEAR = PARAM<7>  ;* YEAR IN YYYY FORMAT
   BEG.PERIOD = PARAM<8>
   END.PERIOD = PARAM<9>
*T26493 ^
   NUM.PERIODS = (END.PERIOD[5,2] - BEG.PERIOD[5,2]) + 1
   IF NUM.PERIODS > 13 THEN 
      END.PER = BEG.PERIOD[5,2] + 12
      END.PERIOD = BEG.PERIOD[1,4]:END.PER"R%2"
   END
   MATREAD COMP.REC FROM COMPANY,CONO ELSE MAT COMP.REC = ""
   CONO.NAME = CO.NAME
*T26493 v
*  RUN.DATE = DATE()
*  RUN.TIME = TIME()
*  HEAD(1) = "RUN DATE: ":OCONV(RUN.DATE,"D2/"):"    TIME: ":OCONV(RUN.TIME,"MTS")[1,5]
*  HEAD(1) = HEAD(1) "L#40"
*  CNAME = SPACE(SP):CO.NAME
*  CNAME = CNAME "L#40"
*  HEAD(1) = HEAD(1):CNAME
*  HEAD(1) = HEAD(1):SPACE(40):"PAGE: "
   CONO.NAME = ""
   REPORT.NAME = ""
   REPORT.NUMBER = PARAM<2>
   CALL GET.PROG.HEAD(CONO,CONO.NAME,REPORT.NAME,REPORT.NUMBER,"",HEAD(1),HEAD(2))
*T26493 ^
   SP = INT((40-LEN(CO.NAME))/2)
   GHEAD = "GRAND TOTALS **"
   PREV.CATG.NO = ""
   MATREAD SALESDATES.REC FROM CONTROL, CONO : "SALESDATES" ELSE
      ERRMSG = "CANNOT FIND SALESDATES RECORD"
      GOSUB 90000
      STOP
   END
*
*********************************************************************
*
********************  DEFINE PAGE HEADINGS HERE  ********************
*
*********************************************************************
*
*T26493 v
*  IF (RPT.STYLE EQ "D") THEN
*     HEAD.SUM ="D E T A I L "
*  END ELSE
*     HEAD.SUM = "S U M M A R Y  "
*  END
*  HEAD(2) = SPACE(25+SP):HEAD.SUM:" S A L E S   A N A L Y S I S - B U D G E T  "
*  IF (RPT.TYPE EQ "D")
*  THEN HEAD(2) :="D O L L A R S":"(":"IN THOUSANDS":")"
*  ELSE HEAD(2) :="U N I T S"
*T26493 ^
   TITLE.ALIGN = SPACE(56+SP)
   HEAD(3) = SPACE(73):YEAR
*
*********************************************************************
*
********************  DEFINE BREAK HEADINGS HERE  *******************
*
*********************************************************************
*
   IF CUST.OR.SALESMAN = 'S' THEN
      BHEAD(1) = "SALESREP:"
   END ELSE
      BHEAD(1) = "CUSTOMER:"
   END
*
*********************************************************************
*
********************  DEFINE TOTAL HEADINGS HERE  *******************
*
*********************************************************************
*
   IF CUST.OR.SALESMAN = 'S' THEN
      THEAD(1) = "SALESREP TOTAL"
   END ELSE
      THEAD(1) = "CUSTOMER TOTAL"
   END
   THEAD(2) = "TOTAL"
*
*********************************************************************
*
********************  DEFINE COLUMN HEADINGS HERE  ******************
*
*********************************************************************
*
   SUB(1) = "SALESREP"
   SUB(2) = "PRODUCT LINE DESCRIPTION"
   CENTRE(2) = "L"
   SUB(3) = "WAREHOUSE"
   SUB.PTR = 3
   FOR I = (1 + BEG.PERIOD[5,2]) TO (1 + END.PERIOD[5,2])
      SUB.PTR = SUB.PTR + 1
      SUB(SUB.PTR) = SALESDATES.REC(I)<1,2>
   NEXT I
   SUB(17) = "TOTAL"
*
*********************************************************************
*
********************  DEFINE DATA ATTRIBUTES HERE  ******************
*
*********************************************************************
*
   OFFSET = 4
   DEF(1) = "L0;;B1;N"
   DEF(2) = "L35;;B2;1"
   IF (RPT.STYLE EQ "D")
   THEN DEF(3) = "L12" ; SUMMARY = 0; STAGCHK(2) = 1
   ELSE DEF(3) = "L1" ; SUMMARY = 1
      DEF(4) = "R7;;T"
      DEF(5) = "R7;;T"
      DEF(6) = "R7;;T"
      DEF(7) = "R7;;T"
      DEF(8) = "R7;;T"
      DEF(9) = "R7;;T"
      DEF(10) = "R7;;T"
      DEF(11) = "R7;;T"
      DEF(12) = "R7;;T"
      DEF(13) = "R7;;T"
      DEF(14) = "R7;;T"
      DEF(15) = "R7;;T"
      DEF(16) = "R7;;T"
      DEF(17) = "R8;;T"

      FOR I=1 TO 17
         IF STAGCHK(I) THEN STAGSET(I) = 1
      NEXT I
*
*********************************************************************
*
********************  DEFINE ADDITIONAL SPACES TO INSERT  ***********
********************  PRIOR TO EACH COLUMN                ***********
*
*********************************************************************
*
*
      FOR I = 4 TO 17
         SPC(I) = 1
      NEXT I
*
*
*********************************************************************
*
********************  OPEN REQUIRED FILES HERE  *********************
*
*********************************************************************
*
      OPEN "","CUSTOMER" TO CUSTOMER ELSE
         ERRMSG = "CANNOT OPEN CUSTOMER FILE"
         GOSUB 90000
         STOP
      END
      OPEN "","SALESMAN" TO SALESMAN ELSE
         ERRMSG = "CANNOT OPEN SALESMAN FILE"
         GOSUB 90000
         STOP
      END
      OPEN "","BUDGET.SALES" TO BUDGET.SALES ELSE
         ERRMSG = "CANNOT OPEN BUDGET.SALES FILE"
         GOSUB 90000
         STOP
      END
      OPEN "","CATEGORY" TO CATEGORY ELSE
         ERRMSG = "CANNOT OPEN CATEGORY"
         GOSUB 90000
         STOP
      END
*
*********************************************************************
*
      GOSUB 20000
*
*-------------------------*
*---- MAIN PROCESSING ----*
*-------------------------*
*
100*
      READNEXT ID ELSE
         XXBREAK = BRK.CNT + 1
         GOSUB 1000
         PRINTER OFF
         PRINTER CLOSE
         STOP
      END
*
*********************************************************************
*
********************  READ FILE(S) AND LOAD ARRAY HERE  *************
*
*********************************************************************
*
      CONO = FIELD(ID,'_',1)
      CUST.ID = FIELD(ID,'_',2)
      SLSM.ID = FIELD(ID,'_',3)
      CATG.ID = FIELD(ID,'_',4)
      WHOUSE  = FIELD(ID,'_',5)
      YEAR = FIELD(ID,'_',6)
      MATREAD CATG.REC FROM CATEGORY, CONO:CATG.ID ELSE
         MAT CATG.REC = ""
      END
      MATREAD SALESMAN.REC FROM SALESMAN, CONO:SLSM.ID ELSE
         MAT SALESMAN.REC = ""
      END
      MATREAD CUST.REC FROM CUSTOMER, CONO:CUST.ID ELSE
         MAT CUST.REC = ""
      END
      MATREAD BUDGET.SALES.REC FROM BUDGET.SALES, ID ELSE
         MAT BUDGET.SALES.REC = ""
      END


      IF CUST.OR.SALESMAN = 'S' THEN
         CDATA(1) = SLSM.ID:" ":SALS.NAME
      END ELSE
         CDATA(1) = CUST.ID:" ":CUST.NAME
      END

      CDATA(2) = CATG.DESC
      CDATA(3) = WHOUSE
      IF (RPT.TYPE EQ "U") THEN
         CDATA.PTR = 3
         FOR I = BEG.PERIOD[5,2] TO END.PERIOD[5,2]
            CDATA.PTR = CDATA.PTR + 1
            CDATA(CDATA.PTR) = BUDGET.UNITS<1,I>
         NEXT I
*         CDATA(4) = BUDGET.UNITS<1,1>
*         CDATA(5) = BUDGET.UNITS<1,2>
*         CDATA(6) = BUDGET.UNITS<1,3>
*         CDATA(7) = BUDGET.UNITS<1,4>
*         CDATA(8) = BUDGET.UNITS<1,5>
*         CDATA(9) = BUDGET.UNITS<1,6>
*         CDATA(10) = BUDGET.UNITS<1,7>
*         CDATA(11) = BUDGET.UNITS<1,8>
*         CDATA(12) = BUDGET.UNITS<1,9>
*         CDATA(13) = BUDGET.UNITS<1,10>
*         CDATA(14) = BUDGET.UNITS<1,11>
*         CDATA(15) = BUDGET.UNITS<1,12>
*         CDATA(16) = BUDGET.UNITS<1,13>
      END ELSE
         CDATA.PTR = 3
         FOR I = BEG.PERIOD[5,2] TO END.PERIOD[5,2]
            CDATA.PTR = CDATA.PTR + 1
            CDATA(CDATA.PTR) = (BUDGET.AMT<1,I> / 1000)
         NEXT I
*         CDATA(4) = (BUDGET.AMT<1,1> / 1000)
*         CDATA(5) = (BUDGET.AMT<1,2> / 1000)
*         CDATA(6) = (BUDGET.AMT<1,3> / 1000)
*         CDATA(7) = (BUDGET.AMT<1,4> / 1000)
*         CDATA(8) = (BUDGET.AMT<1,5> / 1000)
*         CDATA(9) = (BUDGET.AMT<1,6> / 1000)
*         CDATA(10) = (BUDGET.AMT<1,7> / 1000)
*         CDATA(11) = (BUDGET.AMT<1,8> / 1000)
*         CDATA(12) = (BUDGET.AMT<1,9> / 1000)
*         CDATA(13) = (BUDGET.AMT<1,10> / 1000)
*         CDATA(14) = (BUDGET.AMT<1,11> / 1000)
*         CDATA(15) = (BUDGET.AMT<1,12> / 1000)
*         CDATA(16) = (BUDGET.AMT<1,12> / 1000)
      END
      CDATA(17) = 0
      FOR I=4 TO 16
         CDATA(17) += CDATA(I)
      NEXT I
*
*********************************************************************
*
*---- CHECK BREAKS
*
200*
      DONE = 0
      FOR B = 1 TO BRK.CNT UNTIL DONE
         IF CDATA(BRK(B)) <> PDATA(BRK(B)) THEN
            BRK.LVL = B
            XXBREAK = BRK.CNT - B + 1
            GOSUB 1000
            DONE = 1
         END
      NEXT B
      GOSUB 500
      MAT PDATA = MAT CDATA
      GOTO 100
*
*---------------------------*
*---- PRINT DETAIL LINE ----*
*---------------------------*
*
500*
      IF LINE.COUNT >= PAGE.LENGTH THEN GOSUB 10000
      IF CV(1) = "" THEN
         PLINE = CDATA(1) FFMT(1)
      END ELSE
         PLINE = OCONV(CDATA(1),CV(1)) FFMT(1)
      END
      IF STAGCHK(1) THEN
         IF STAGSET(1) THEN
            PRINT PLINE
            PLINE = SPACE(OFFSET)
            LINE.COUNT += 1
            STAGSET(1) = 0
         END ELSE
            PLINE = SPACE(OFFSET)
         END
      END
      FOR C = 2 TO COL.CNT
         IF NOT(STAGSET(C) AND NOT(STAGCHK(C))) THEN
            IF CV(C) = "" THEN
               PLINE = PLINE : SPC(C) : CDATA(C) FFMT(C)
            END ELSE
               PLINE = PLINE : SPC(C) : OCONV(CDATA(C),CV(C)) FFMT(C)
            END
         END
         IF STAGCHK(C) THEN
            IF STAGSET(C) THEN
               PRINT PLINE
               PLINE = SPACE(OFFSET)
               LINE.COUNT += 1
               STAGSET(C) = 0
            END ELSE
               PLINE = SPACE(OFFSET)
            END
         END
      NEXT C
      IF NOT(SUMMARY) THEN
         PRINT PLINE
         LINE.COUNT = LINE.COUNT + 1
      END
*
      FOR C = 1 TO COL.CNT
         IF TF(C)[1,1] = "T" THEN
            TOT1(C) = TOT1(C) + CDATA(C)
         END
      NEXT C
      RETURN
*
*------------------------*
*---- PROCESS BREAKS ----*
*------------------------*
*
*---- PROCESS BREAKS (LOWEST LEVEL TO HIGHEST)
*
1000*
      IF FIRST.TIME THEN
         FIRST.TIME = 0
         RETURN
      END
      IF TOT.CNT = 0 THEN GOTO 8000
      MAT TOTX = MAT TOT1
      BRK.NO = BRK.CNT
      GOSUB 9000
      FOR C = 1 TO COL.CNT
         IF TF(C)[1,1] = "T" THEN
            TOT2(C) = TOT2(C) + TOT1(C)
         END
      NEXT C
      MAT TOT1 = ""
      IF XXBREAK = 1 THEN GOTO 8000
*
*---- PROCESS LEVEL 2 BREAK
*
2000*
      MAT TOTX = MAT TOT2
      BRK.NO = BRK.CNT - 1
      GOSUB 9000
      FOR C = 1 TO COL.CNT
         IF TF(C)[1,1] = "T" THEN
            TOT3(C) = TOT3(C) + TOT2(C)
         END
      NEXT C
      MAT TOT2 = ""
      IF XXBREAK = 2 THEN GOTO 8000
*
*---- PROCESS LEVEL 3 BREAK
*
3000*
      MAT TOTX = MAT TOT3
      BRK.NO = BRK.CNT - 2
      GOSUB 9000
      FOR C = 1 TO COL.CNT
         IF TF(C)[1,1] = "T" THEN
            TOT4(C) = TOT4(C) + TOT3(C)
         END
      NEXT C
      MAT TOT3 = ""
      IF XXBREAK = 3 THEN GOTO 8000
*
*---- PROCESS LEVEL 4 BREAK
*
4000*
      MAT TOTX = MAT TOT4
      BRK.NO = BRK.CNT - 3
      GOSUB 9000
      FOR C = 1 TO COL.CNT
         IF TF(C)[1,1] = "T" THEN
            TOT5(C) = TOT5(C) + TOT4(C)
         END
      NEXT C
      MAT TOT4 = ""
      IF XXBREAK = 4 THEN GOTO 8000
*
*---- PROCESS LEVEL 5 BREAK
*
5000*
      MAT TOTX = MAT TOT5
      BRK.NO = BRK.CNT - 4
      GOSUB 9000
      FOR C = 1 TO COL.CNT
         IF TF(C)[1,1] = "T" THEN
            TOT6(C) = TOT6(C) + TOT5(C)
         END
      NEXT C
      MAT TOT5 = ""
      IF XXBREAK = 5 THEN GOTO 8000
*
*---- PROCESS LEVEL 6 BREAK
*
6000*
      MAT TOTX = MAT TOT6
      BRK.NO = BRK.CNT - 5
      GOSUB 9000
      MAT TOT6 = ""
      GOTO 8000
*
*---- BREAK COMPLETED
*
8000*
      LINE.COUNT = LINE.COUNT + SKP(BRK.LVL)
      IF LINE.COUNT < PAGE.LENGTH THEN
         FOR LC = 1 TO SKP(BRK.LVL)
            PRINT
         NEXT LC
      END
      RETURN
*
*--------------------------*
*---- PRINT TOTAL LINE ----*
*--------------------------*
*
9000*
      IF TF(1) = "" THEN
         IF STAGCHK(1)
         THEN TLINE = SPACE(OFFSET)
         ELSE TLINE = SPACE(CW(1))
         END ELSE
            TLINE = OCONV(TOTX(1),CV(1)) FFMT(1)
         END
         FOR C = 2 TO COL.CNT
            IF TF(C) = "" THEN
               IF STAGCHK(C)
               THEN TLINE = SPACE(FACTOR*OFFSET)
               ELSE TLINE = TLINE : SPC(C) : SPACE(CW(C))
               END ELSE
                  TLINE = TLINE : SPC(C) : OCONV(TOTX(C),CV(C)) FFMT(C)
               END
            NEXT C
            TFMT = "R#":TOT.PTR
            IF BRK.NO = 0 THEN
               TLINE = GHEAD TFMT : TLINE[TOT.PTR+1,999]
               PRINT; PRINT
               LINE.COUNT = LINE.COUNT + 2
               PRINT TLINE
               LINE.COUNT = LINE.COUNT + 1
               PRINT ULINE2
               LINE.COUNT = LINE.COUNT + 1
            END ELSE
               IF SUMMARY AND (BRK.NO EQ BRK.CNT) THEN
                  TMP = PDATA(BRK(BRK.CNT))
               END ELSE
                  TMP = THEAD(BRK.NO)
                  PRINT ULINE1
                  LINE.COUNT = LINE.COUNT + 1
               END
               TLINE = TMP TFMT : TLINE[TOT.PTR+1,999]
               PRINT TLINE
               LINE.COUNT = LINE.COUNT + 1
               IF STAGCHK(BRK.NO) THEN STAGSET(BRK(BRK.NO)) = 1
            END
            RETURN
*
*-----------------------------*
*---- PRINT PAGE HEADINGS ----*
*-----------------------------*
*
10000*
            PRINT CHAR(12):
            LINE.COUNT = 0
            PAGE.NO = PAGE.NO + 1
            PRINT HEAD(1):PAGE.NO
            FOR HD = 2 TO HEAD.CNT
               PRINT HEAD(HD)
            NEXT HD
            LINE.COUNT = LINE.COUNT + HEAD.CNT
            FOR BH = 1 TO BRK.CNT
               IF BHEAD(BH) # "" THEN
!* SPECIAL MODS
                  PRINT ""
                  PRINT TITLE.ALIGN:BHEAD(BH):" ":CDATA(1)
                  LINE.COUNT = LINE.COUNT + 2
               END
            NEXT BH
            PRINT
            LINE.COUNT = LINE.COUNT + 1
            FOR SH = 1 TO SH.CNT
               PRINT SHEAD(SH)
            NEXT SH
            LINE.COUNT = LINE.COUNT + 1
            RETURN
*
*------------------------*
*---- INITIALIZATION ----*
*------------------------*
*
20000*
*---- GENERAL PARAMETERS
            LINE.COUNT = 99
            PAGE.NO = 0
            FIRST.TIME = 1
*---- COMPUTE PAGE HEADING COUNT
            HEAD.CNT = ""
            FOR HD = 1 TO 5 WHILE HEAD.CNT = ""
               IF HEAD(HD) = "" THEN HEAD.CNT = HD - 1
            NEXT HD
*---- COMPUTE COLUMN HEADING COUNT
            COL.CNT = ""
            FOR C = 20 TO 1 STEP -1 WHILE COL.CNT = ""
               IF DEF(C) # "" THEN COL.CNT = C
            NEXT C
*---- SEGREGATE COLUMN DEFINITION ATTRIBUTES
            CW.TOT = 0
            BHEAD.CNT = 0
            TOT.CNT = 0
            FOR C = 1 TO COL.CNT
               DEF1 = FIELD(DEF(C),";",1)
               DEF2 = FIELD(DEF(C),";",2)
               DEF3 = FIELD(DEF(C),";",3)
               DEF4 = FIELD(DEF(C),";",4)
               CJ(C) = DEF1[1,1]
               CW(C) = DEF1[2,3]
               CV(C) = DEF2
               FFMT(C) = CJ(C):"#":CW(C)
               BEGIN CASE
                  CASE DEF3[1,1] = "T"
                     IF CV(C) = "" THEN CV(C) = "MD0"
                     TF(C) = DEF3
                     TOT.CNT = TOT.CNT + 1
                  CASE DEF3[1,1] = "B"
                     B = DEF3[2,1]
                     BRK(B) = C
                     BEGIN CASE
                        CASE DEF4 = "N"
                           SKP(B) = 99
                           BHEAD.CNT = BHEAD.CNT + 1
                        CASE NUM(DEF4) AND DEF4 # ""
                           SKP(B) = DEF4
                        CASE 1
                           SKP(B) = 1
                     END CASE
               END CASE
               CW.TOT = CW.TOT + CW(C) + SPC(C)
            NEXT C
*---- DETERMINE COLUMN SPACING
            SEP = INT((149-CW.TOT)/(COL.CNT-1))
            IF SEP > 3 THEN SEP = 3
            FOR C = 2 TO COL.CNT
               SP = SPC(C) + SEP
               SPC(C) = SPACE(SP)
            NEXT C
*---- COMPUTE BREAK COUNT
            BRK.CNT = ""
            FOR B = 1 TO 5 WHILE BRK.CNT = ""
               IF BRK(B) = "" THEN BRK.CNT = B - 1
            NEXT B
*---- COMPUTE COLUMN HEADING LINE COUNT
            SH.CNT = 0
            FOR C = 1 TO COL.CNT
               N = COUNT(SUB(C),VM) + (SUB(C) # "")
               IF N > SH.CNT THEN SH.CNT = N
            NEXT C
*---- SHIFT COLUMN HEADINGS TO PROPER LINE
            IF SH.CNT > 1 THEN
               FOR C = 1 TO COL.CNT
                  N = COUNT(SUB(C),VM) + (SUB(C) # "")
                  FOR SH = N+1 TO SH.CNT
                     SUB(C) = VM:SUB(C)
                  NEXT SH
               NEXT C
            END
*---- CENTER COLUMN HEADINGS AND UNDERLINE
            FOR C = 1 TO COL.CNT
               IF CENTRE(C) = '' THEN
                  FOR SH = 1 TO SH.CNT
                     X = SUB(C)<1,SH>
                     X = TRIM(X)
                     XL = LEN(X)
                     IF C # 3 THEN
                        SP = INT((CW(C)-XL)/2)
                     END ELSE
                        SP = 0
                     END
                     IF CJ(C) = "R" THEN
                        X = X:SPACE(SP)
                     END ELSE
                        X = SPACE(SP):X
                     END
                     SUB(C)<1,SH> = X FFMT(C)
                  NEXT SH
                  SUB(C) = SUB(C):VM:STR("-",CW(C))
               END ELSE
                  SUB(C) = SUB(C)
               END
            NEXT C
*---- BUILD COLUMN HEADING PRINT LINES
            WAIT.REPLY=''
            SH.CNT = SH.CNT + 1
            FOR SH = 1 TO SH.CNT
               SHEAD(SH) = SUB(1)<1,SH>
            NEXT SH
            SH.ADD = 0
            SH.ORIG = SH.CNT
            IF STAGCHK(1) THEN
               SH.CNT += SH.CNT
               SH.ADD += SH.CNT
            END
            FOR C = 2 TO COL.CNT
               FOR SH = SH.ADD+1 TO SH.CNT
                  SHEAD(SH) = SHEAD(SH) : SPC(C) : SUB(C)<1,SH-SH.ADD>
               NEXT SH
               IF STAGCHK(C) THEN
                  SH.ADD += SH.CNT
                  SH.CNT += SH.CNT
                  FACTOR = INT(SH.ADD/SH.ORIG)
                  FOR SH=SH.ADD+1 TO SH.CNT
                     SHEAD(SH) = SPACE(FACTOR*OFFSET)
                  NEXT SH
               END
            NEXT C
*CRT @(0,23):"SH.ADD= ":SH.ADD:"ORG=":SH.ORIG:"FAC=":FACTOR:"OFSET=":OFFSET;INPUT WAIT.REPLY
*---- BUILD TOTAL COLUMN UNDERLINE
            IF TF(1) = "" THEN
               IF STAGCHK(1) THEN
                  ULINE1 = SPACE(OFFSET)
                  ULINE2 = SPACE(OFFSET)
               END ELSE
                  ULINE1 = SPACE(CW(1))
                  ULINE2 = SPACE(CW(1))
               END
            END ELSE
               ULINE1 = STR("-",CW(1))
               ULINE2 = STR("=",CW(1))
            END
            FOR C = 2 TO COL.CNT
               IF TF(C) = "" THEN
                  IF STAGCHK(C) THEN
                     ULINE1 = SPACE(OFFSET*FACTOR)
                     ULINE2 = SPACE(OFFSET*FACTOR)
                  END ELSE
                     ULINE1 = ULINE1 : SPC(C) : SPACE(CW(C))
                     ULINE2 = ULINE2 : SPC(C) : SPACE(CW(C))
                  END
               END ELSE
                  ULINE1 = ULINE1 : SPC(C) : STR("-",CW(C))
                  ULINE2 = ULINE2 : SPC(C) : STR("=",CW(C))
               END
            NEXT C
*---- COMPUTE SPACE FOR TOTAL HEADINGS
            TOT.PTR = 0
            ULEN = LEN(ULINE1)
            FOR TP = 1 TO ULEN WHILE TOT.PTR = 0
               IF ULINE1[TP,1] # " " THEN
                  TOT.PTR = TP - 3
               END
            NEXT TP
            IF TOT.PTR < 0 THEN TOT.PTR = 0
*---- COMPUTE PAGE LENGTH
            PAGE.LENGTH = 66 - HEAD.CNT - BHEAD.CNT - 1 - SH.CNT - ((BRK.CNT+1)*2)- 6
*
            PRINTER ON
            RETURN
*
*-----------------------*
*---- ERROR ROUTINE ----*
*-----------------------*
*
90000*
            PRINT ERRMSG:
            INPUT REPLY:
            RETURN
