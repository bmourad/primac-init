*********************************************************************
*
* REVISION- [08.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
*
* PROGRAM - SAS.REPORT.FNGD.WHSE
*
* BY      - NICK AMENDOLA, COMPUTER BUSINESS ASSOCIATES
*
* DATE    - 08/29/84
*
* DESCRIPTION
*
* This program prints Sales Analysis by Finished Goods product and
* warehouse.
*
* T21651 BRM 04/03/97 - BUG SAS REPORT ACT VS BUD BY PROD/WHSE
* T26943 cmykleb 03/25/2002 * Change proc to use REPORT.SCRN and
*                             use GET.PROG.HEAD for heading.
*********************************************************************
*
*********************************************************************
*
******************  INSERT COPY STATEMENTS HERE  ********************
*
*********************************************************************
*
*COPY>PMC.CPYLIB>JOB.SALES.STATS
*COPY>PMC.CPYLIB>INVOICE.SALES.STATS
*COPY>SAS.CPYLIB>INV.SALES.STATS.SUM
*COPY>ICS.CPYLIB>CATEGORY
*COPY>PMC.CPYLIB>CUSTOMER
*COPY>ICS.CPYLIB>INVENTORY
*COPY>PMC.CPYLIB>SALESMAN
*COPY>JCS.CPYLIB>JOB
*COPY>SAS.CPYLIB>BUDGET.SALES
*
*********************************************************************
*
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*
*---- DIMENSIONED VARIABLES
*
      DIM HEAD(5); DIM BHEAD(5); DIM SHEAD(5); DIM THEAD(6)
      DIM SUB(20); DIM DEF(20); DIM SPC(20); DIM CDATA(20); DIM PDATA(20)
      DIM CJ(20); DIM CW(20); DIM CV(20); DIM TF(20); DIM FFMT(20); DIM BRK(5); DIM SKP(5)
      DIM TOT1(20); DIM TOT2(20); DIM TOT3(20); DIM TOT4(20); DIM TOT5(20); DIM TOT6(20); DIM TOTX(20)
      MAT HEAD=""; MAT BHEAD=""; MAT SHEAD=""; MAT THEAD=""
      MAT SUB=""; MAT DEF=""; MAT SPC=""; MAT CDATA=""; MAT PDATA=""
      MAT CJ=""; MAT CW=""; MAT CV=""; MAT TF=""; MAT FFMT=""; MAT BRK=""; MAT SKP=""
      MAT TOT1=""; MAT TOT2=""; MAT TOT3=""; MAT TOT4=""; MAT TOT5=""; MAT TOT6=""; MAT TOTX=""
*
*---- PRE-INITIALIZATION
*
      PROCREAD PARAM ELSE
         PRINT "MUST RUN FROM PROC"
         STOP
      END
*** T21651
      KEY.CUST = ""; KEY.SLSM = ""; KEY.PROD.LINE = ""; KEY.WHSE = ""; KEY.YEAR = ""
*** ^
      WAIT.REPLY=''
      MAT CATG.REC = ""
      CONO = PARAM<1>
      CONAME = PARAM<2>
*T26493 v
*     POST.MONTH = PARAM<3>
*     PRINT.ZERO.BUDGET = PARAM<4>
*     KEY.YEAR = PARAM<3>[1,4]
*     KEY.CURR = PARAM<3>[5,2]
*     PARAM.PROD.LINE = PARAM<6>
*     CUST.OR.SLSM = PARAM<8>
*     OPTION = 'C' 
*     RUN.DATE = DATE()
*     RUN.TIME = TIME()
*     HEAD(1) = "RUN DATE: ":OCONV(RUN.DATE,"D2/"):"    TIME: ":OCONV(RUN.TIME,"MTS")[1,5]
*     HEAD(1) = HEAD(1) "L#40"
*     SP = INT((40-LEN(CONAME))/2)
*     CNAME = SPACE(SP):CONAME
*     CNAME = CNAME "L#40"
*     HEAD(1) = HEAD(1):CNAME
*     HEAD(1) = HEAD(1):SPACE(40):"PAGE: "
      POST.MONTH = PARAM<4>
      PRINT.ZERO.BUDGET = PARAM<6>
      KEY.YEAR = PARAM<4>[1,4]
      KEY.CURR = PARAM<4>[5,2]
      PARAM.PROD.LINE = PARAM<3>
      CUST.OR.SLSM = PARAM<5>
      CONO.NAME = ""
      REPORT.NAME = ""
      REPORT.NUMBER = PARAM<2>
      HEAD(1) = ""
      HEAD(2) = ""
      CALL GET.PROG.HEAD(CONO,CONO.NAME,REPORT.NAME,REPORT.NUMBER,"",HEAD(1),HEAD(2))
*T26943 ^
      GHEAD = "*** GRAND TOTALS ***"
      PREV.PROD.NO = ""
      ACTUAL.SALES = 0
*
*********************************************************************
*
********************  DEFINE PAGE HEADINGS HERE  ********************
*
*********************************************************************
*
      HEAD(3) = SPACE(61):"BY PRODUCT LINE AND WAREHOUSE"
      HEAD(4) = SPACE(66):"FOR PERIOD  " : POST.MONTH
*
*********************************************************************
*
********************  DEFINE BREAK HEADINGS HERE  *******************
*
*********************************************************************
*
*
*********************************************************************
*
********************  DEFINE TOTAL HEADINGS HERE  *******************
*
*********************************************************************
*
      THEAD(1) = "BUDGET FOR PRODUCT LINE"
      THEAD(2) = "BUDGET FOR WAREHOUSE"
*
*********************************************************************
*
********************  DEFINE COLUMN HEADINGS HERE  ******************
*
*********************************************************************
*
      SUB(1) = "PROD LN"
      SUB(2) = "WHSE"
      IF CUST.OR.SLSM = "C" THEN
         SUB(3) = "CUSTOMER NAME"
       END ELSE
         SUB(3) = "SALESREP NAME"
      END
      SUB(4) = "BUDGETED":VM:"SALES"
      SUB(5) = "NET":VM:"SALES"
      SUB(6) = "BUDGET":VM:"% PERFORM"
      SUB(7) = "VALUE":VM:"ADDED"
      SUB(8) = "%"
      SUB(9) = "MARGIN":VM:"ACT COST"
      SUB(10) = "%"
*
*********************************************************************
*
********************  DEFINE DATA ATTRIBUTES HERE  ******************
*
*********************************************************************
*
      DEF(1) = "L7;;B1;2"
      DEF(2) = "L4;;B2;2"
      DEF(3) = "L25"
      DEF(4) = "R9;MD0-;T"
      DEF(5) = "R9;MD0-;T"
      DEF(6) = "R9;MD1-;T"
      DEF(7) = "R9;MD0-;T"
      DEF(8) = "R9;MD1-;T"
      DEF(9) = "R9;MD0-;T"
      DEF(10) = "R9;MD1-;T"
*
*********************************************************************
*
********************  DEFINE ADDITIONAL SPACES TO INSERT  ***********
********************  PRIOR TO EACH COLUMN                ***********
*
*********************************************************************
*
*     SPC(2) = 1
*
*********************************************************************
*
********************  OPEN REQUIRED FILES HERE  *********************
*
*********************************************************************
*
      OPEN "","INVOICE.SALES.STATS" TO INVOICE.SALES.STATS ELSE
         ERRMSG = "CANNOT OPEN INVOICE.SALES.STATS FILE"
         GOSUB 90000
         STOP
      END
      OPEN "","INV.SALES.STATS.SUM" TO INV.SALES.STATS.SUM ELSE
         ERRMSG = "CANNOT OPEN INV.SALES.STATS.SUM FILE"
         GOSUB 90000
         STOP
      END
      OPEN "","CATEGORY" TO CATEGORY ELSE
         ERRMSG = "CANNOT OPEN JOB.CATEGORY FILE"
         GOSUB 90000
         STOP
      END
      OPEN "","CUSTOMER" TO CUSTOMER ELSE
         ERRMSG = "CANNOT OPEN CUSTOMER FILE"
         GOSUB 90000
         STOP
      END
      OPEN "","SALESMAN" TO SALESMAN ELSE
         ERRMSG = "CANNOT OPEN SALESMAN FILE"
         GOSUB 90000
         STOP
      END
      OPEN "","JOB" TO JOB ELSE
         ERRMSG = "CANNOT OPEN JOB FILE"
         GOSUB 90000
         STOP
      END
      OPEN '','BUDGET.SALES' TO BUDGET.SALES ELSE
         ERRMSG='BUDGET.SALES FILE IS MISSING'
         GOSUB 90000
         STOP
      END
      OPEN "","INVENTORY" TO INVENTORY ELSE
         ERRMSG = "CANNOT OPEN INVENTORY FILE"
         GOSUB 90000
         STOP
      END
      OPEN '','CATEGORY' TO CATEGORY ELSE
         ERRMSG = 'CATEGORY FILE IS MISSING'
         GOSUB 90000
         STOP
      END
*
*********************************************************************
*
      GOSUB 22000 ; *GET RECORDS FOR BUDGET COMPARSION
      GOSUB 20000
*
*-------------------------*
*---- MAIN PROCESSING ----*
*-------------------------*
*
100*
      READNEXT ID ELSE
         XXBREAK = BRK.CNT + 1
         GOSUB 21000
         THEAD(1) = "BUDGET FOR PRODUCT LINE"
         GOSUB 1000
         PRINTER OFF
         PRINTER CLOSE
         STOP
      END
         KEY.CUST = FIELD(ID,'_',3)
         KEY.SLSM = FIELD(ID,'_',4)
         KEY.PROD.LINE = FIELD(ID,'_',5)
         KEY.WHSE = FIELD(ID,'_',6)
         IF KEY.PROD.LINE = '' THEN
            GOTO 100
         END
         BUDGET.EXISTS='Y'
         GOSUB 21000 ;* GET BUDGET RECORD
         IF BUDGET.EXISTS='N'AND PRINT.ZERO.BUDGET # "Y" THEN  GOTO 100
         IF BUDGET.SALES.AMT<1,KEY.CURR>+0 = 0 AND PRINT.ZERO.BUDGET # "Y" THEN
            GOTO 100
         END
     *CRT @(5,23):"CUST=":KEY.CUST:"SLSM=":KEY.SLSM:"PROD.LINE=":KEY.PROD.LINE ;INPUT WAIT.REPLY
         
*
*********************************************************************
*
********************  READ FILE(S) AND LOAD ARRAY HERE  *************
*
*********************************************************************
*

      MATREAD SSS.REC FROM INV.SALES.STATS.SUM, ID ELSE GOTO 100
      PROD.NO=FIELD(ID,"_",5)
      MATREAD INV.REC FROM INVENTORY, CONO:PROD.NO ELSE
         MAT INV.REC = ""
      END
      MATREAD SALESMAN.REC FROM SALESMAN, CONO:KEY.SLSM ELSE
         MAT SALESMAN.REC = ""
      END
      MATREAD CUST.REC FROM CUSTOMER, CONO:KEY.CUST ELSE
         MAT CUST.REC = ""
      END
      WSS.NET.SALES = INT(((SSS.INVOICE.TOTAL - SSS.COMMISSION<1,1>) / 100) + 0.5)
      IF SSS.VALUE.ADDED GE 0 THEN
       WSS.VAL.ADDED = INT((SSS.VALUE.ADDED / 100) + 0.5)
      END ELSE
       WSS.VAL.ADDED = INT((SSS.VALUE.ADDED / 100) - 0.5)
      END
      WSS.ADJ.COST = SSS.ADJUST.COST<1,1> - SSS.SHIP.COST
      IF WSS.ADJ.COST GE 0 THEN
        WSS.ADJ.COST = INT((WSS.ADJ.COST /100) + 0.5)
      END ELSE
        WSS.ADJ.COST = INT((WSS.ADJ.COST /100) - 0.5)
      END
      IF SSS.ADJUST.COST<1,2> GE 0 THEN
         WSS.MKT.COST =  INT((SSS.ADJUST.COST<1,2> / 100) + 0.5)
      END ELSE
         WSS.MKT.COST =  INT((SSS.ADJUST.COST<1,2> / 100) - 0.5)
      END
*
      IF WSS.NET.SALES+0 > 0 THEN
         WSS.VAL.ADDED.PCT = (WSS.VAL.ADDED / WSS.NET.SALES) * 1000
         IF WSS.VAL.ADDED.PCT GE 0 THEN
            WSS.VAL.ADDED.PCT = INT(WSS.VAL.ADDED.PCT + 0.5)
         END ELSE
            WSS.VAL.ADDED.PCT = INT(WSS.VAL.ADDED.PCT - 0.5)
         END
         WSS.ADJ.COST.PCT = ((WSS.NET.SALES - WSS.ADJ.COST) / WSS.NET.SALES) * 1000
         WSS.MKT.COST.PCT = ((WSS.NET.SALES - WSS.MKT.COST) / WSS.NET.SALES) * 1000
         IF WSS.ADJ.COST.PCT GE 0 THEN
            WSS.ADJ.COST.PCT = INT(WSS.ADJ.COST.PCT + 0.5)
         END ELSE
            WSS.ADJ.COST.PCT = INT(WSS.ADJ.COST.PCT - 0.5)
         END
         IF WSS.MKT.COST.PCT GE 0 THEN
            WSS.MKT.COST.PCT = INT(WSS.MKT.COST.PCT + 0.5)
         END ELSE
            WSS.MKT.COST.PCT = INT(WSS.MKT.COST.PCT - 0.5)
         END
      END ELSE
         WSS.VAL.ADDED.PCT = 0
         WSS.ADJ.COST.PCT = 0
         WSS.MKT.COST.PCT = 0
      END
      CDATA(1) = KEY.PROD.LINE
      CDATA(2) = KEY.WHSE
      IF CUST.OR.SLSM = "C" THEN
         CDATA(3) = CUST.NAME
       END ELSE
         CDATA(3) = SALS.NAME
      END
      CDATA(4) = BUDGET.SALES.AMT<1,KEY.CURR>
      CDATA(5) = INT(((SSS.INVOICE.TOTAL - SSS.COMMISSION<1,1>) / 100) + 0.5)
      IF CDATA(4) > 0 THEN
         CDATA(6) = ((CDATA(5)/CDATA(4))*1000)
       END ELSE
         CDATA(6) = 0
      END
      CDATA(7) = WSS.VAL.ADDED
      CDATA(8) = WSS.VAL.ADDED.PCT
*      CDATA(10) = WSS.ADJ.COST
*      CDATA(11) = WSS.ADJ.COST.PCT
      CDATA(9) = WSS.MKT.COST
      CDATA(10) = WSS.MKT.COST.PCT
*
*********************************************************************
*
*---- CHECK BREAKS
*
200*
      DONE = 0
      FOR B = 1 TO BRK.CNT UNTIL DONE
         IF CDATA(BRK(B)) <> PDATA(BRK(B)) THEN
            BRK.LVL = B
            XXBREAK = BRK.CNT - B + 1
            GOSUB 1000
            DONE = 1
         END
      NEXT B
      GOSUB 500
      MAT PDATA = MAT CDATA
      GOTO 100
*
*---------------------------*
*---- PRINT DETAIL LINE ----*
*---------------------------*
*
500*
      IF LINE.COUNT >= PAGE.LENGTH THEN GOSUB 10000
      IF CV(1) = "" THEN
         PLINE = CDATA(1) FFMT(1)
      END ELSE
         PLINE = OCONV(CDATA(1),CV(1)) FFMT(1)
      END
      FOR C = 2 TO COL.CNT
         IF CV(C) = "" THEN
            PLINE = PLINE : SPC(C) : CDATA(C) FFMT(C)
         END ELSE
            PLINE = PLINE : SPC(C) : OCONV(CDATA(C),CV(C)) FFMT(C)
         END
      NEXT C
      PRINT PLINE
      LINE.COUNT = LINE.COUNT + 1
*
      FOR C = 1 TO COL.CNT
         IF TF(C)[1,1] = "T" THEN
            TOT1(C) = TOT1(C) + CDATA(C)
         END
      NEXT C
      RETURN
*
*------------------------*
*---- PROCESS BREAKS ----*
*------------------------*
*
*---- PROCESS BREAKS (LOWEST LEVEL TO HIGHEST)
*
1000*
      IF FIRST.TIME THEN
         FIRST.TIME = 0
         RETURN
      END
      IF TOT.CNT = 0 THEN GOTO 8000
      MAT TOTX = MAT TOT1
      BRK.NO = BRK.CNT
      GOSUB 9000
      FOR C = 1 TO COL.CNT
         IF TF(C)[1,1] = "T" THEN
            TOT2(C) = TOT2(C) + TOT1(C)
         END
      NEXT C
      MAT TOT1 = ""
      IF XXBREAK = 1 THEN GOTO 8000
*
*---- PROCESS LEVEL 2 BREAK
*
2000*
      MAT TOTX = MAT TOT2
      BRK.NO = BRK.CNT - 1
      GOSUB 9000
      FOR C = 1 TO COL.CNT
         IF TF(C)[1,1] = "T" THEN
            TOT3(C) = TOT3(C) + TOT2(C)
         END
      NEXT C
      MAT TOT2 = ""
      IF XXBREAK = 2 THEN GOTO 8000
*
*---- PROCESS LEVEL 3 BREAK
*
3000*
      MAT TOTX = MAT TOT3
      BRK.NO = BRK.CNT - 2
      GOSUB 9000
      FOR C = 1 TO COL.CNT
         IF TF(C)[1,1] = "T" THEN
            TOT4(C) = TOT4(C) + TOT3(C)
         END
      NEXT C
      MAT TOT3 = ""
      IF XXBREAK = 3 THEN GOTO 8000
*
*---- PROCESS LEVEL 4 BREAK
*
4000*
      MAT TOTX = MAT TOT4
      BRK.NO = BRK.CNT - 3
      GOSUB 9000
      FOR C = 1 TO COL.CNT
         IF TF(C)[1,1] = "T" THEN
            TOT5(C) = TOT5(C) + TOT4(C)
         END
      NEXT C
      MAT TOT4 = ""
      IF XXBREAK = 4 THEN GOTO 8000
*
*---- PROCESS LEVEL 5 BREAK
*
5000*
      MAT TOTX = MAT TOT5
      BRK.NO = BRK.CNT - 4
      GOSUB 9000
      FOR C = 1 TO COL.CNT
         IF TF(C)[1,1] = "T" THEN
            TOT6(C) = TOT6(C) + TOT5(C)
         END
      NEXT C
      MAT TOT5 = ""
      IF XXBREAK = 5 THEN GOTO 8000
*
*---- PROCESS LEVEL 6 BREAK
*
6000*
      MAT TOTX = MAT TOT6
      BRK.NO = BRK.CNT - 5
      GOSUB 9000
      MAT TOT6 = ""
      GOTO 8000
*
*---- BREAK COMPLETED
*
8000*
      LINE.COUNT = LINE.COUNT + SKP(BRK.LVL)
      IF LINE.COUNT < PAGE.LENGTH THEN
         FOR LC = 1 TO SKP(BRK.LVL)
            PRINT
         NEXT LC
      END
      RETURN
*
*--------------------------*
*---- PRINT TOTAL LINE ----*
*--------------------------*
*
9000*
      IF TOTX(4)+0 > 0 THEN
         TOTX(6) = ((TOTX(5)/TOTX(4))*1000)
        END ELSE
         TOTX(6) = 0
      END
      IF TOTX(5)+0 > 0 THEN
         TOTX(8) = TOTX(7) / TOTX(5)
         IF TOTX(7) > 0 THEN
            TOTX(8) = INT((TOTX(8) * 1000) + 0.5)
         END ELSE
            TOTX(8) = INT((TOTX(8) * 1000) - 0.5)
         END
         TOTX(10) = ((TOTX(5) - TOTX(9)) / TOTX(5))
         IF TOTX(10) > 0 THEN
            TOTX(10) = INT((TOTX(10) * 1000) + 0.5)
         END ELSE
            TOTX(10) = INT((TOTX(10) * 1000) + 0.5)
         END
      END ELSE
         TOTX(8) = 0
         TOTX(10) = 0
      END
      IF TF(1) = "" THEN
         TLINE = SPACE(CW(1))
      END ELSE
         TLINE = OCONV(TOTX(1),CV(1)) FFMT(1)
      END
      FOR C = 2 TO COL.CNT
         IF TF(C) = "" THEN
            TLINE = TLINE : SPC(C) : SPACE(CW(C))
         END ELSE
            TLINE = TLINE : SPC(C) : OCONV(TOTX(C),CV(C)) FFMT(C)
         END
      NEXT C
      TFMT = "R#":TOT.PTR
      IF BRK.NO = 0 THEN
         TLINE = GHEAD TFMT : TLINE[TOT.PTR+1,999]
         PRINT; PRINT
         LINE.COUNT = LINE.COUNT + 2
         PRINT TLINE
         LINE.COUNT = LINE.COUNT + 1
         PRINT ULINE2
         LINE.COUNT = LINE.COUNT + 1
      END ELSE
         TLINE = THEAD(BRK.NO) TFMT : TLINE[TOT.PTR+1,999]
         PRINT ULINE1
         LINE.COUNT = LINE.COUNT + 1
         PRINT TLINE
         LINE.COUNT = LINE.COUNT + 1
      END
      RETURN
*
*-----------------------------*
*---- PRINT PAGE HEADINGS ----*
*-----------------------------*
*
10000*
      PRINT CHAR(12):
      LINE.COUNT = 0
      PAGE.NO = PAGE.NO + 1
      PRINT HEAD(1):PAGE.NO
      FOR HD = 2 TO HEAD.CNT
         PRINT HEAD(HD)
      NEXT HD
      LINE.COUNT = LINE.COUNT + HEAD.CNT
      FOR BH = 1 TO BRK.CNT
         IF BHEAD(BH) # "" THEN
            PRINT BHEAD(BH)
            LINE.COUNT = LINE.COUNT + 1
         END
      NEXT BH
      PRINT
      LINE.COUNT = LINE.COUNT + 1
      FOR SH = 1 TO SH.CNT
         PRINT SHEAD(SH)
      NEXT SH
      LINE.COUNT = LINE.COUNT + 1
      RETURN
*
*------------------------*
*---- INITIALIZATION ----*
*------------------------*
*
20000*
*---- GENERAL PARAMETERS
      LINE.COUNT = 99
      PAGE.NO = 0
      FIRST.TIME = 1
*---- COMPUTE PAGE HEADING COUNT
      HEAD.CNT = ""
      FOR HD = 1 TO 5 WHILE HEAD.CNT = ""
         IF HEAD(HD) = "" THEN HEAD.CNT = HD - 1
      NEXT HD
*---- COMPUTE COLUMN HEADING COUNT
      COL.CNT = ""
      FOR C = 20 TO 1 STEP -1 WHILE COL.CNT = ""
         IF DEF(C) # "" THEN COL.CNT = C
      NEXT C
*---- SEGREGATE COLUMN DEFINITION ATTRIBUTES
      CW.TOT = 0
      BHEAD.CNT = 0
      TOT.CNT = 0
      FOR C = 1 TO COL.CNT
         DEF1 = FIELD(DEF(C),";",1)
         DEF2 = FIELD(DEF(C),";",2)
         DEF3 = FIELD(DEF(C),";",3)
         DEF4 = FIELD(DEF(C),";",4)
         CJ(C) = DEF1[1,1]
         CW(C) = DEF1[2,3]
         CV(C) = DEF2
         FFMT(C) = CJ(C):"#":CW(C)
         BEGIN CASE
            CASE DEF3[1,1] = "T"
               IF CV(C) = "" THEN CV(C) = "MD0"
               TF(C) = DEF3
               TOT.CNT = TOT.CNT + 1
            CASE DEF3[1,1] = "B"
               B = DEF3[2,1]
               BRK(B) = C
               BEGIN CASE
                  CASE DEF4 = "N"
                     SKP(B) = 99
                     BHEAD.CNT = BHEAD.CNT + 1
                  CASE NUM(DEF4) AND DEF4 # ""
                     SKP(B) = DEF4
                  CASE 1
                     SKP(B) = 1
               END CASE
         END CASE
         CW.TOT = CW.TOT + CW(C) + SPC(C)
      NEXT C
*---- DETERMINE COLUMN SPACING
      SEP = INT((132-CW.TOT)/(COL.CNT-1))
      IF SEP > 3 THEN SEP = 3
      FOR C = 2 TO COL.CNT
         SP = SPC(C) + SEP
         SPC(C) = SPACE(SP)
      NEXT C
*---- COMPUTE BREAK COUNT
      BRK.CNT = ""
      FOR B = 1 TO 5 WHILE BRK.CNT = ""
         IF BRK(B) = "" THEN BRK.CNT = B - 1
      NEXT B
*---- COMPUTE COLUMN HEADING LINE COUNT
      SH.CNT = 0
      FOR C = 1 TO COL.CNT
         N = COUNT(SUB(C),VM) + (SUB(C) # "")
         IF N > SH.CNT THEN SH.CNT = N
      NEXT C
*---- SHIFT COLUMN HEADINGS TO PROPER LINE
      IF SH.CNT > 1 THEN
         FOR C = 1 TO COL.CNT
            N = COUNT(SUB(C),VM) + (SUB(C) # "")
            FOR SH = N+1 TO SH.CNT
               SUB(C) = VM:SUB(C)
            NEXT SH
         NEXT C
      END
*---- CENTER COLUMN HEADINGS AND UNDERLINE
      FOR C = 1 TO COL.CNT
         FOR SH = 1 TO SH.CNT
            X = SUB(C)<1,SH>
            X = TRIM(X)
            XL = LEN(X)
            SP = INT((CW(C)-XL)/2)
            IF CJ(C) = "R" THEN
               X = X:SPACE(SP)
            END ELSE
               X = SPACE(SP):X
            END
            SUB(C)<1,SH> = X FFMT(C)
         NEXT SH
         SUB(C) = SUB(C):VM:STR("-",CW(C))
      NEXT C
*---- BUILD COLUMN HEADING PRINT LINES
      SH.CNT = SH.CNT + 1
      FOR SH = 1 TO SH.CNT
         SHEAD(SH) = SUB(1)<1,SH>
      NEXT SH
      FOR SH = 1 TO SH.CNT
         FOR C = 2 TO COL.CNT
            SHEAD(SH) = SHEAD(SH) : SPC(C) : SUB(C)<1,SH>
         NEXT C
      NEXT SH
*---- BUILD TOTAL COLUMN UNDERLINE
      IF TF(1) = "" THEN
         ULINE1 = SPACE(CW(1))
         ULINE2 = SPACE(CW(1))
      END ELSE
         ULINE1 = STR("-",CW(1))
         ULINE2 = STR("=",CW(1))
      END
      FOR C = 2 TO COL.CNT
         IF TF(C) = "" THEN
            ULINE1 = ULINE1 : SPC(C) : SPACE(CW(C))
            ULINE2 = ULINE2 : SPC(C) : SPACE(CW(C))
         END ELSE
            ULINE1 = ULINE1 : SPC(C) : STR("-",CW(C))
            ULINE2 = ULINE2 : SPC(C) : STR("=",CW(C))
         END
      NEXT C
*---- COMPUTE SPACE FOR TOTAL HEADINGS
      TOT.PTR = 0
      ULEN = LEN(ULINE1)
      FOR TP = 1 TO ULEN WHILE TOT.PTR = 0
         IF ULINE1[TP,1] # " " THEN
            TOT.PTR = TP - 3
         END
      NEXT TP
      IF TOT.PTR < 0 THEN TOT.PTR = 0
*---- COMPUTE PAGE LENGTH
      PAGE.LENGTH = 66 - HEAD.CNT - BHEAD.CNT - 1 - SH.CNT - ((BRK.CNT+1)*2)- 6
*
      PRINTER ON
      RETURN
*****************************************************************
21000 *
*
*-----GET BUDGET INFORMATION
*
      BUDGET.EXISTS='Y'
      BUDGET.KEY = CONO:"_":KEY.CUST:"_":KEY.SLSM:"_":KEY.PROD.LINE:"_":KEY.WHSE:"_":KEY.YEAR
     *CRT @(5,23):"BUDGET=":BUDGET.KEY ;INPUT WAIT.REPLY
      MATREADU BUDGET.SALES.REC FROM BUDGET.SALES, BUDGET.KEY ELSE
               MAT BUDGET.SALES.REC=''
               BUDGET.EXISTS='N'
      END
*CRT @(0,23):"CURR=":KEY.CURR:"BSA=":BUDGET.SALES.AMT<1,KEY.CURR>:"BE=":BUDGET.EXISTS;INPUT WAIT.REPLY
*CRT @(0,23):"BSA=":BUDGET.SALES.AMT<1,2>:"BSA2=":BUDGET.AMT<1,KEY.CURR>;INPUT WAIT.REPLY
      RETURN
      
*****************************************************************
22000 *
*
*----- BUILD.WORK.FILE: 
*
     *CRT @(5,23):"PM=":POST.MONTH ;INPUT WAIT.REPLY
      STMT = "CLEAR.FILE INV.SALES.STATS.SUM"
      UDTEXECUTE STMT
      IF PARAM.PROD.LINE = "ALL" THEN
         GOTO  22100
       END ELSE
         GOTO 22200
      END
22100 *
         STMT = "SELECT INVOICE.SALES.STATS WITH REC.TYPE EQ 'O'  AND WITH ISS.POSTING.MONTH EQ ":POST.MONTH
      GOTO 22300
22200 *
         STMT = "SELECT INVOICE.SALES.STATS WITH REC.TYPE EQ 'O'  AND WITH ISS.PROD.LINE = ":PARAM.PROD.LINE:" AND WITH ISS.POSTING.MONTH EQ ":POST.MONTH
22300 *
*CRT @(0,23):STMT;INPUT WAIT.REPLY
      UDTEXECUTE STMT
      LOOP
         READNEXT ID ELSE EXIT
     *CRT @(5,23):"ID=":ID
         MATREAD ISS.REC FROM INVOICE.SALES.STATS,ID ELSE CONTINUE
         IF CUST.OR.SLSM = "C" THEN
            CUST.KEY = ISS.CUST.ID
            SLSM.KEY = "000"
           END ELSE
            CUST.KEY = "000000"
            SLSM.KEY = ISS.SLSM.ID
           END
         MATREADU INV.REC FROM INVENTORY,CONO:FIELD(ID,"_",5) ELSE
                  MAT INV.REC=''
         END
         SSS.KEY = CONO:"_O_":CUST.KEY:"_":SLSM.KEY:"_":INV.LINE:"_":FIELD(ID,"_",6)
     *CRT @(5,23):"SSS.KEY=":SSS.KEY ;INPUT WAIT.REPLY
         MATREAD SSS.REC FROM INV.SALES.STATS.SUM,SSS.KEY ELSE 
           MAT SSS.REC=''
           END
         SSS.INVOICE.TOTAL = SSS.INVOICE.TOTAL + ISS.INVOICE.TOTAL
         SSS.COST.TOTAL = SSS.COST.TOTAL + ISS.COST.TOTAL
         SSS.COMMISSION = SSS.COMMISSION + ISS.COMMISSION 
         SSS.SHIP.COST  = SSS.SHIP.COST  + ISS.SHIP.COST
         SSS.VALUE.ADDED  = SSS.VALUE.ADDED + ISS.VALUE.ADDED
         SSS.ADJUST.COST<1,1> = SSS.ADJUST.COST<1,1> + ISS.ADJUST.COST<1,1>
         SSS.ADJUST.COST<1,2> = SSS.ADJUST.COST<1,2> + ISS.ADJUST.COST<1,2>
         MATWRITE SSS.REC ON INV.SALES.STATS.SUM,SSS.KEY
      REPEAT
      IF CUST.OR.SLSM = "C" THEN
         STMT = "SELECT INV.SALES.STATS.SUM BY PROD.LINE BY CUST"
        END ELSE
         STMT = "SELECT INV.SALES.STATS.SUM BY PROD.LINE BY SLSM"
      END
      UDTEXECUTE STMT
  RETURN
********************************************************************
*
*-----------------------*
*---- ERROR ROUTINE ----*
*-----------------------*
*
90000*
      PRINT ERRMSG:
      INPUT REPLY:
      RETURN
   END
******************************************************************
******************************************************************
************************* EOP ************************************
******************************************************************
******************************************************************
