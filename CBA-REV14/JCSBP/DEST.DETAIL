  SUBROUTINE DEST.DETAIL(CONO)
*COPY>CPYLIB>COM1
*COPY>JCS.CPYLIB>COM.DRS.FILE.VARS
**************************************************************
* REVISION    - [08.1]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
*
* SOURCE         - DRSBP
*
* PROGRAM        - DEST.DETAIL
*
* BY             - L. ROSS, COMPUTER BUSINESS ASSOCIATES
*
* DATE           - 08/26/91
*
* DESCRIPTION    -
* This subroutine will be used to maintain the DEST.DETAIL file. 
*
*T21177 diane 11/06/1996 * REV11 UPG
*T25978 adelgado 02/14/2002 * Add the use of prompts (S,SR,SB,ST).
*ENDDOC
**************************************************************
*
*---- FILE EQUATES
*
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>JCS.CPYLIB>DRS.FILE.VARS
*COPY>CPYLIB>SYSCOM
*COPY>CPYLIB>FILE.VARS
*COPY>PMC.CPYLIB>COMPANY
*COPY>JCS.CPYLIB>SHIPTO.MASTER
*COPY>JCS.CPYLIB>SHIPTO.DETAIL
*COPY>JCS.CPYLIB>FOLD.CODE
*COPY>JCS.CPYLIB>PACK.CODE
*COPY>JCS.CPYLIB>DISTRIBUTION.CODE
*COPY>CPYLIB>CHAR
*
  DIM SAV.REC(75)
  MAT SAV.REC = ''
*---- SETUP FOR SYSTEM ERROR MESSAGES
*
  SYS.TYPE = 1
  CALL SYSCOM(MAT SYSCOM.REC)
*
*---- MAIN PROCESSING
  BEGIN.PAGE = 6
  PAGE.SIZE = 4
  LINE.SPACE = 1
*
5 *
  LINES = 0
  OLD.START.LINE = 0
  MAT SDT.REC = ''
  NEW = 0
  ECD.NUM = 1
  SCV.REC(1)<ECD.SCRN.NO> = SCV.REC(1)<1>
  ECD.ACTION = 5; CALL SCRN.EDIT
  SHIPTO.KEY = SCV.REC(1)<ECD.SCRN.NO>
  BEGIN CASE
    CASE SHIPTO.KEY = 'END'
      GOTO 99999
    CASE SHIPTO.KEY # ''
      BEGIN CASE
        CASE NUM(SHIPTO.KEY) AND SHIPTO.KEY # ''
          MATREADU SDT.REC FROM SHIPTO.DETAIL,CONO:SHIPTO.KEY ELSE
            MAT SDT.REC=''
            NEW = 1
            CLONE = 1
            LOOP
              ECD.NUM = 35
              ECD.ACTION = 4; CALL SCRN.EDIT
              IF NUM(ECD.RET.VALUE) AND ECD.RET.VALUE # '' THEN
                MATREAD SDT.REC FROM SHIPTO.DETAIL, CONO:ECD.RET.VALUE THEN
                  NEW = 2
                  CLONE = 0
                END ELSE
                  MAT SDT.REC = ''
                  ECD.NUM = 34
                  ECD.ACTION = 4; CALL SCRN.EDIT
                  IF ECD.RET.VALUE # 'Y' THEN CLONE = 0
                END
              END ELSE CLONE = 0
            WHILE CLONE DO REPEAT
          END
        CASE 1
      END CASE
      IF NEW # 1 THEN
        LN = 1
        GOSUB 4000
        GOSUB 6000
      END
  END CASE
  IF NEW = 1 THEN 
    LOOP
      OPTION = 'A'
      LN = LINES + 1
      OLD.LINES = LINES
      GOSUB 50
    WHILE LINES > OLD.LINES AND LN < 10 DO
      GOSUB 10000
    REPEAT
    LN = LINES
    FOR I = 1 TO 15 UNTIL ECD.RET.VALUE = 'END'
      ON I GOSUB 110,120,130,140,150,160,170,180,190,200,210,220,230,240,250
    NEXT I
  END
  GOSUB 1000
  GOTO 99999
*
*---- ENTER SPEC INSTR (SCROLLED)
*
50 *
  GOSUB 10000
  SLN = BEGIN.PAGE + LINE.SPACE * MOD(LN-1,PAGE.SIZE)
  P_X  = 0 ; P_Y = SLN ; P_VALUE = OCONV(LN,'MD0Z') 'R#2':'-' ; P_OPT = ""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  X = 4; Y = SLN; TYP = 1; MAXL = 58; O.R = 'O'
  DEFAULT = SCV.REC(LN+1)<ECD.SCRN.NO,1>
  CALL EDIT.SUB
*    PRINT @(0,23):'DEFAULT: ':DEFAULT:
*    PRINT @(X,Y):SPACE(58):@(X):;INPUT VALUE:
*    PRINT @(0,23):SPACE(79):
  IF VALUE # "" AND VALUE = SPACE(LEN(VALUE)) THEN
    FOR I = LN+1 TO 10
      SCV.REC(I) = SCV.REC(I+1)
    NEXT I
    SCV.REC(11) = ''
    OLD.START.LINE = 0
  END ELSE
    VALUE = TRIM(VALUE)
    IF VALUE # 'END' AND VALUE # '' THEN
      SCV.REC(LN+1)<ECD.SCRN.NO,1> = VALUE
    END ELSE
      IF SCV.REC(LN+1) = '' THEN PRINT @(0,SLN): CL:
      P_X  = 4 ; P_Y = SLN ; P_VALUE = SCV.REC(LN+1)<ECD.SCRN.NO,1> 'L#58' ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      IF VALUE = 'END' THEN GOTO 99 ELSE GOTO 50
    END
    P_X  = 63 ; P_Y = SLN ; P_VALUE = LEN(SCV.REC(LN+1)<ECD.SCRN.NO,1>) 'R#2' ; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    SCV.REC(LN+1)<ECD.SCRN.NO,2> = LEN(SCV.REC(LN+1)<ECD.SCRN.NO,1>)
55 *
    X = 66; Y = SLN; TYP = 8; MAXL = 1; O.R = 'O'
    OLD.VAL = ''
    IF SCV.REC(LN+1)<ECD.SCRN.NO,3> # '' THEN
      DEFAULT = SCV.REC(LN+1)<ECD.SCRN.NO,3>
      OLD.VAL = SCV.REC(LN+1)<ECD.SCRN.NO,3>
    END ELSE
      DEFAULT = 'Y'
      OLD.VAL = 'Y'
    END
    CALL EDIT.SUB
    IF VALUE # 'END' AND VALUE # '' AND VALUE # SPACE(LEN(VALUE)) THEN
      SCV.REC(LN+1)<ECD.SCRN.NO,3> = VALUE
    END ELSE GOTO 55
    J = 4
    FOR I = 3 TO 12 STEP 3
60 *
      X =  66 + I; Y = SLN; TYP = 8; MAXL = 1; O.R = 'O'
      IF SCV.REC(LN+1)<ECD.SCRN.NO,3> = 'Y' AND OLD.VAL = 'Y' THEN
        IF SCV.REC(LN+1)<ECD.SCRN.NO,J> # '' THEN DEFAULT = SCV.REC(LN+1)<ECD.SCRN.NO,J> ELSE DEFAULT = 'Y'
      END ELSE
        IF SCV.REC(LN+1)<ECD.SCRN.NO,3> = 'Y' THEN DEFAULT = 'Y' ELSE DEFAULT = 'N'
      END
      CALL EDIT.SUB
      IF VALUE # 'END' AND VALUE # '' AND VALUE # SPACE(LEN(VALUE)) THEN
        SCV.REC(LN+1)<ECD.SCRN.NO,J> = VALUE
      END ELSE GOTO 60
      J = J+1
    NEXT I
  END
  GOSUB 6000
99 *
  RETURN
*
*---- ENTER DATE
*
110 *
  ECD.NUM = 26
  IF SDT.SP.INST.DATE # '' THEN ECD.DEFAULT = OCONV(SDT.SP.INST.DATE,'D2/')
  ECD.ACTION = 4; CALL SCRN.EDIT
*     IF ECD.RET.VALUE # "" AND ECD.RET.VALUE = SPACE(LEN(ECD.RET.VALUE)) THEN
  IF ECD.RET.VALUE # 'END' THEN
    IF ECD.RET.VALUE = '' THEN
      SDT.SP.INST.DATE = ''
      SDT.SP.INST.DATE.USE = ''
      FOR I = 26 TO 31
        SCV.REC(I) = ''
      NEXT I
      P_X  = 4 ; P_Y = 10 ; P_VALUE = "" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    END
  END ELSE GOTO 119
  IF ECD.RET.VALUE # 'END' AND ECD.RET.VALUE # '' THEN
    SDT.SP.INST.DATE = ECD.RET.VALUE
  END  ELSE GOTO 119
112 *
  ECD.NUM = 27
  ECD.DEFAULT = 'N'
  ECD.ACTION = 4; CALL SCRN.EDIT
  IF ECD.RET.VALUE # 'END' AND ECD.RET.VALUE # '' AND ECD.RET.VALUE # SPACE(LEN(ECD.RET.VALUE)) THEN
    SDT.SP.INST.DATE.USE = ECD.RET.VALUE
  END ELSE GOTO 112
  J = 2
  FOR ECD.NUM = 28 TO 31
115 ECD.DEFAULT = 'N'
    ECD.ACTION = 4; CALL SCRN.EDIT
    IF ECD.RET.VALUE # 'END' AND ECD.RET.VALUE # '' AND ECD.RET.VALUE # SPACE(LEN(ECD.RET.VALUE)) THEN
      SDT.SP.INST.DATE.USE<1,J> = ECD.RET.VALUE
      J = J+1
    END ELSE GOTO 115
  NEXT ECD.NUM
*     END
119 RETURN
*
*---- ENTER VERSION NO
*
120 *
  ECD.NUM = 40
  HOLD.DATA = SDT.VER.NO
  SCV.REC(40)<ECD.SCRN.NO> = SDT.VER.NO
  ECD.ACTION = 4;CALL SCRN.EDIT
  IF ECD.RET.VALUE # "END" THEN
    SDT.VER.NO = ECD.RET.VALUE
    IF NUM(OPTION) AND SDT.VER.NO # HOLD.DATA THEN GOSUB 130
  END
  RETURN
*
*---- ENTER VER DESC
*
130 *
  ECD.NUM = 41
  SCV.REC(41)<ECD.SCRN.NO> = SDT.VER.DESC
  ECD.ACTION = 4; CALL SCRN.EDIT
  IF ECD.RET.VALUE # "END" THEN
    SDT.VER.DESC = ECD.RET.VALUE
  END 
  RETURN
*
*---- ENTER QTY
*
140 *
  ECD.NUM = 43
  SCV.REC(43)<ECD.SCRN.NO> = SDT.QTY
  ECD.ACTION = 4; CALL SCRN.EDIT
  IF ECD.RET.VALUE # "END" THEN
    SDT.QTY = ECD.RET.VALUE
  END
  RETURN
*
*---- ENTER DIST CODE
*
150 *
  ECD.NUM = 44
  SCV.REC(44)<ECD.SCRN.NO> = SDT.DIST.CODE
  ECD.ACTION = 4;CALL SCRN.EDIT
  IF ECD.RET.VALUE # "END" THEN
    MATREAD DRS.REC FROM DISTRIBUTION.CODE, CONO:ECD.RET.VALUE ELSE
      X = 0; Y = 23; TYP = 11; MAXL = 1; O.R = 'O'
      PMSG = 'Invalid Distribution Code'
      CALL EDIT.SUB
      P_X  = 0 ; P_Y = 23 ; P_VALUE = "" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      GOTO 150
    END
    SDT.DIST.CODE = ECD.RET.VALUE
  END
  RETURN
*
*---- ENTER EDITION
*
160 *
  ECD.NUM = 45
  SCV.REC(45)<ECD.SCRN.NO>= SDT.EDITION
  ECD.ACTION = 4; CALL SCRN.EDIT
  IF ECD.RET.VALUE # "END" THEN
    SDT.EDITION = ECD.RET.VALUE
  END 
  RETURN
*
*---- ENTER SHRINK WRAP
*
170 *
  ECD.NUM = 46
  SCV.REC(46)<ECD.SCRN.NO> = SDT.SHRKWRP
  ECD.ACTION = 4; CALL SCRN.EDIT
  IF ECD.RET.VALUE # "END" THEN
    SDT.SHRKWRP = ECD.RET.VALUE
  END
  RETURN
*
*---- ENTER CARTON LBL
*
180 *
  ECD.NUM = 47
  IF SDT.CART.LAB # "" THEN
    SCV.REC(47)<ECD.SCRN.NO> = SDT.CART.LAB
  END ELSE
    P = 2
    GOSUB 7000
    SCV.REC(47)<ECD.SCRN.NO> = FLG
  END
  ECD.ACTION = 4; CALL SCRN.EDIT
  IF ECD.RET.VALUE # "END" THEN
    SDT.CART.LAB = ECD.RET.VALUE
  END 
  RETURN
*
*---- ENTER SKID LBL
*
190 *
  ECD.NUM = 48
  IF SDT.SKID.LAB # "" THEN
    SCV.REC(48)<ECD.SCRN.NO> = SDT.SKID.LAB
  END ELSE
    P = 3
    GOSUB 7000
    SCV.REC(48)<ECD.SCRN.NO> = FLG
  END
  ECD.ACTION = 4;CALL SCRN.EDIT
  IF ECD.RET.VALUE # "END" THEN
    SDT.SKID.LAB = ECD.RET.VALUE
  END
  RETURN
*
*---- ENTER B O L
*
200 *
  ECD.NUM = 49
  IF SDT.BOL # "" THEN
    SCV.REC(49)<ECD.SCRN.NO> = SDT.BOL
  END ELSE
    P = 4
    GOSUB 7000
    SCV.REC(49)<ECD.SCRN.NO> = FLG
  END
  ECD.ACTION = 4; CALL SCRN.EDIT
  IF ECD.RET.VALUE # "END" THEN
    SDT.BOL = ECD.RET.VALUE
  END 
  RETURN
*
*---- ENTER FOLD
*
210 *
  ECD.NUM = 50
  SCV.REC(50)<ECD.SCRN.NO> = SDT.FOLD
  ECD.ACTION = 4;CALL SCRN.EDIT
  IF ECD.RET.VALUE # "END" THEN
    MATREAD FLD.REC FROM FOLD.CODE, CONO:ECD.RET.VALUE ELSE
      X = 0; Y = 23; TYP = 11; MAXL = 1; O.R = 'O'
      PMSG = 'Invalid Fold Code'
      CALL EDIT.SUB
      P_X  = 0 ; P_Y = 23 ; P_VALUE = "" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      GOTO 210
    END
    SDT.FOLD = ECD.RET.VALUE
  END
  RETURN
*
*---- ENTER PACKAGING
*
220 *
  ECD.NUM = 51
  SCV.REC(51)<ECD.SCRN.NO> = SDT.PACK
  ECD.ACTION = 4; CALL SCRN.EDIT
  IF ECD.RET.VALUE # 'END' THEN
    MATREAD PCK.REC FROM PACK.CODE, CONO:ECD.RET.VALUE ELSE
      X = 0; Y = 23; TYP = 11; MAXL = 1; O.R = 'O'
      PMSG = 'Invalid Packaging Code'
      CALL EDIT.SUB
      P_X  = 0 ; P_Y = 23 ; P_VALUE = "" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      GOTO 220
    END
    SDT.PACK = ECD.RET.VALUE
  END 
  RETURN
*
*---- ENTER STORE QTY
*
230 *
  ECD.NUM = 52
  SCV.REC(52)<ECD.SCRN.NO> = SDT.STORE.QTY
  ECD.ACTION = 4; CALL SCRN.EDIT
  IF ECD.RET.VALUE # "END" THEN
    SDT.STORE.QTY = ECD.RET.VALUE
  END
  IF SDT.STORE.QTY <= 0 AND SDT.QTY <= 0 THEN
    ERRMSG = 'QUANTITY AND STORE QUANTITY ARE BOTH ZERO ?'
    GOSUB 91000
  END
  RETURN
*
*---- ENTER SHIP TERMS
*
240*
  ECD.NUM = 55
  SCV.REC(55)<ECD.SCRN.NO> = SDT.SHP.TERMS
  ECD.ACTION = 4; CALL SCRN.EDIT
  IF ECD.RET.VALUE # "END" THEN
    SDT.SHP.TERMS = ECD.RET.VALUE
  END
  RETURN
*
*---- ENTER FREIGHT PAY
*
250*
  ECD.NUM = 56
  SCV.REC(56)<ECD.SCRN.NO> = SDT.FRT.PAY
  ECD.ACTION = 4; CALL SCRN.EDIT
  IF ECD.RET.VALUE # "END" THEN
    SDT.FRT.PAY = ECD.RET.VALUE
  END
  RETURN
*
*---- ENTER OPTIONS
*
1000 *
  MORE = 1
  LOOP
    ECD.NUM = 32
    ECD.ACTION = 4; CALL SCRN.EDIT
    OPTION = ECD.RET.VALUE
    BEGIN CASE
      CASE OPTION = 'END' OR OPTION = 'E'
        RELEASE SHIPTO.DETAIL, CONO:SHIPTO.KEY
        MORE = 0
      CASE NUM(OPTION) AND OPTION # ''
        IF OPTION > 0 AND OPTION < 10 THEN
          LN = OPTION
          IF LN-1 > 0 THEN
            IF SCV.REC(LN)<ECD.SCRN.NO,1> = "" THEN
              ERRMSG = 'You must not leave blank instruction lines'
              GOSUB 91000
              LN = 0
            END
          END
          IF LN # 0 THEN
            GOSUB 50
          END
        END ELSE
          ON OPTION -10 GOSUB 110,120,130,140,150,160,170,180,190,200,210,220,230,240,250
        END
      CASE OPTION = 'CL'
        GOSUB 5000
      CASE OPTION = 'S'
        IF LN + PAGE.SIZE <= 10 AND LN + PAGE.SIZE <= LINES THEN LN = LN + PAGE.SIZE ELSE LN = 1
        OLD.START.LINE = 0
        GOSUB 10000
      * T25978 v
      CASE OPTION = 'SR'
        LN -= PAGE.SIZE ; OLD.START.LINE = 0
        IF LN < 1 THEN LN = 1
        GOSUB 10000
      CASE OPTION = 'ST'
        LN = 1 ; OLD.START.LINE = 0
        GOSUB 10000
      CASE OPTION = 'SB'
        LN = LINES ; OLD.START.LINE = 0
        GOSUB 10000
      * T25978 ^
      CASE OPTION = 'F'
        IF LINES < 1 THEN
          ERRMSG='You may not file a record with 0 instruction lines.'
          GOSUB 91000
        END ELSE
          GOSUB 3000
          MORE = 0
        END
    END CASE
  WHILE MORE DO REPEAT
  RETURN
*
*---- CLEAR SCREEN AND RE-INITIALIZE
*
2000 *
  ECD.ACTION = 6; CALL SCRN.EDIT
  RETURN
*
*---- UPDATE SHIPTO.DETAIL FILE
*
3000 *
  MATWRITE SDT.REC ON SHIPTO.DETAIL,CONO:SHIPTO.KEY
  RETURN
4000 *  LOAD SCV.REC VALUES FROM SDT.REC
  ECD.ACTION = 6; CALL SCRN.EDIT
  P = 1
  FOR I = 2 TO 11
    IF I # 2 THEN P = P + 3
    IF SDT.REC(P) # '' THEN
      SCV.REC(I)<ECD.SCRN.NO,1> = SDT.REC(P)
      SCV.REC(I)<ECD.SCRN.NO,2> = SDT.REC(P+2)
      FOR J = 3 TO 7
        SCV.REC(I)<ECD.SCRN.NO,J> = SDT.REC(P+1)<1,J-2>
      NEXT J
    END
  NEXT I
  SCV.REC(26)<ECD.SCRN.NO> = SDT.REC(31)
  FOR J = 1 TO 5
    SCV.REC(26+J)<ECD.SCRN.NO> = SDT.REC(32)<1,J>
  NEXT J
  SCV.REC(40)<ECD.SCRN.NO> = SDT.REC(33)
  SCV.REC(41)<ECD.SCRN.NO> = SDT.REC(34)
  FOR I = 43 TO 52
    SCV.REC(I)<ECD.SCRN.NO> = SDT.REC(I-8)
  NEXT I
  SCV.REC(55)<ECD.SCRN.NO> = SDT.SHP.TERMS
  SCV.REC(56)<ECD.SCRN.NO> = SDT.FRT.PAY
  ECD.ACTION=3; CALL SCRN.EDIT
  RETURN
5000 *
  NX = 0
  CLONE = 1
  LOOP
    ECD.NUM = 35
    ECD.ACTION = 4; CALL SCRN.EDIT
    IF NUM(ECD.RET.VALUE) AND ECD.RET.VALUE # '' THEN
      MATREAD SAV.REC FROM SHIPTO.DETAIL, CONO:ECD.RET.VALUE THEN
        NX = 1
        CLONE = 0
      END ELSE
        MAT SAV.REC = ''
        ECD.NUM = 34
        ECD.ACTION = 4; CALL SCRN.EDIT
        IF ECD.RET.VALUE # 'Y' THEN CLONE = 0
      END
    END ELSE CLONE = 0
  WHILE CLONE DO REPEAT
  IF NX THEN
    LN = 1
    MAT SDT.REC = MAT SAV.REC
    GOSUB 4000
    GOSUB 6000
  END
5099 RETURN
*
6000  * LOAD LINE INFO TO SDT.REC FROM SCV.REC
  LINES = 0
  P = 1
  FOR I = 2 TO 11
    IF I # 2 THEN P = P + 3
    SDT.REC(P) = SCV.REC(I)<ECD.SCRN.NO,1>
    SDT.REC(P+2) = SCV.REC(I)<ECD.SCRN.NO,2>
    IF SDT.REC(P) # "" THEN LINES = LINES + 1
    IF SCV.REC(I)<ECD.SCRN.NO> # '' THEN
      FOR J = 3 TO 7
        SDT.REC(P+1)<1,J-2> = SCV.REC(I)<ECD.SCRN.NO,J>
      NEXT J
    END
  NEXT I
  IF LN > LINES THEN LN = LINES
  IF LN < 0 THEN LN = 1
  OLD.START.LINE = 0
  GOSUB 10000
  RETURN
7000 *
  FLG = 'N'
  FOR J = 2 TO 29 STEP 3
    IF SDT.REC(J)<1,P> = 'Y' THEN FLG = 'Y'
  NEXT J
  RETURN
10000 *
  START.LINE=1 + INT((LN-1)/PAGE.SIZE) * PAGE.SIZE
  LAST.LINE=START.LINE + PAGE.SIZE - 1
  IF LAST.LINE > LINES THEN LAST.LINE=LINES
  IF START.LINE=OLD.START.LINE THEN GOTO 10001
  OLD.START.LINE=START.LINE
  CNT=1
  FOR N=START.LINE TO LAST.LINE
    SLN=BEGIN.PAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
    P_X  = 0 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
    P_X  := AM:0 ; P_Y := AM:SLN ; P_VALUE := AM:N "R#2":'-'
    P_X  := AM:4 ; P_Y := AM:SLN ; P_VALUE := AM:SCV.REC(N+1)<ECD.SCRN.NO,1> 'L#58'
    P_X  := AM:63 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(SCV.REC(N+1)<ECD.SCRN.NO,2>,'MD0Z') 'R#2'
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    Q = 3
    FOR P = 3 TO 7
*P_X  = 63+Q):SCV.REC(N+1)<ECD.SCRN.NO ; P_Y = P> 'L#1': ; P_VALUE = SCV.REC(N+1)<ECD.SCRN.NO,P> 'L#1' ; P_OPT = ""
      P_X=(63+Q);P_Y=SLN;P_VALUE=SCV.REC(N+1)<ECD.SCRN.NO,P>'L#1';P_OPT=""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      Q = Q + 3
    NEXT P
    CNT=CNT + 1
  NEXT N
  FOR M=CNT TO PAGE.SIZE
    SLN=BEGIN.PAGE + LINE.SPACE * MOD(M-1,PAGE.SIZE)
    P_X  = 0 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  NEXT M
10001 *
  RETURN
*
*---- CALLS FOR SYSCOM
*
91000 *
  ERR.TYPE = 1
  CALL SYSCOM(MAT SYSCOM.REC)
  RETURN
93000 *
  ERR.TYPE = 3
  CALL SYSCOM(MAT SYSCOM.REC)
99999 *
  ECD.ACTION=99;CALL SCRN.EDIT
  RETURN
END
