*COPY>CPYLIB>COM1
*COPY>JCS.CPYLIB>COM.JCS.LINK
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>JCS.CPYLIB>COM.INV.STATS 
*COPY>PMC.CPYLIB>COM.CUST
*COPY>OPS.CPYLIB>COM.ORDER
*********************************************************************
* REVISION    - [08.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - JCSBP
* PROGRAM     - REV.WIP.MAINT
* BY          - WALID YAMOUT, C.B.A
* DATE        - 02/10/86
* DESCRIPTION - THIS GUY TAKES A REVERSE WIP PERCENT, AND/OR
*               DATE , AND A Y,N OPTION FOR ZERO RESERVE QTY.
*               IT THEN ASKS THE USER FOR ONE OR MORE JOB IDS,
*               DISPLAYS ELEMENTARY INFO FOR THE WIP STATUS OF
*               EACH JOB, ALLOWS HIM TO ADD THESE TO A LIST
*               OF JOBS TO BE WIP REVERSED.
*
* TASK
*     18573 5/95 LLH 1-52 ACCOUNTING PERIODS
*
* TASK 20377 JR SET JOB STATUS BACK TO COMPLETED OR INVOICED
* T23278 markt 10/13/1998 * Add division security check.
*                           Make fiscal data multi-value by division.
*T25340 gat 07/26/2000 * FIX PROBLEM WITH WIP POINTERS IN ERROR AND NO
*                        WIP ON JOB
*T26334 epitka 12/19/2001 * REV12
*T26126 adelgado 02/28/2002 * Implement the LOCKED clause for READU.
*T27265 thompson 02/04/2003 * Fix release problem if no WIP 
*T26909 lross 02/13/2004 * Add T25900 mod to clear Allocations.
*ENDDOC
*********************************************************************
*
*--- FILE INSERTS
*
*COPY>PMC.CPYLIB>CUSTOMER
*COPY>PMC.CPYLIB>JOB.SALES.STATS
*COPY>PMC.CPYLIB>INVOICE.SALES.STATS
*COPY>JCS.CPYLIB>JOB
*COPY>JCS.CPYLIB>REVERSE.WIP.HIST
*COPY>ICS.CPYLIB>INV.JOB.STATS
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>COST.CNTR
*COPY>CPYLIB>GEN.XREF
*COPY>PMC.CPYLIB>FISCAL
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>SYSCOM
*COPY>CPYLIB>CHAR
*
*--- SETUP SYSTEM ERRMSGES
*
  SYS.TYPE = 1
  CALL SYSCOM(MAT SYSCOM.REC)
  ERRMSG = ""
*
*--- OPEN FILES
*
  OPEN '','JCS.SCREENS' TO M.SCREENS ELSE
    ERRMSG = 'JCS.SCREENS FILES IS MISSING' ; GOTO 93000
  END
  OPEN '','COMPANY' TO COMPANY ELSE
    ERRMSG = 'COMPANY FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','CONTROL' TO CONTROL ELSE
    ERRMSG = 'CONTROL FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','JOB' TO JOB ELSE
    ERRMSG = 'JOB FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','REVERSE.WIP.HIST' TO REVERSE.WIP.HIST ELSE
    ERRMSG = 'REVERSE.WIP.HIST FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','CUSTOMER' TO CUSTOMER ELSE
    ERRMSG = 'CUSTOMER FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','CUSTOMER.XREF' TO CUSTOMER.XREF ELSE
    ERRMSG = 'CUSTOMER.XREF FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','JOB.TIME' TO JOB.TIME ELSE
    ERRMSG = 'JOB.TIME FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','JOB.MATL' TO JOB.MATL ELSE
    ERRMSG = 'JOB.MATL FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','JOB.OSP' TO JOB.OSP ELSE
    ERRMSG = 'JOB.OSP FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','JOB.SHIP' TO JOB.SHIP ELSE
    ERRMSG = 'JOB.SHIP FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','JOB.MISC' TO JOB.MISC ELSE
    ERRMSG = 'JOB.MISC FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','COST.CNTR.WIP' TO COST.CNTR.WIP ELSE
    ERRMSG = 'COST.CNTR.WIP FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','INVENTORY' TO INVENTORY ELSE
    ERRMSG = 'INVENTORY FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','CATEGORY' TO CATEGORY ELSE
    ERRMSG = 'CATEGORY FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','INV.WHSE' TO INV.WHSE ELSE
    ERRMSG = 'INV.WHSE FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','INV.JOB.STATS' TO INV.JOB.STATS ELSE
    ERRMSG = 'INV.JOB.STATS FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','INV.STATS' TO INV.STATS ELSE
    ERRMSG = 'INV.STATS FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','INV.WHSE.LOC' TO INV.WHSE.LOC ELSE
    ERRMSG = 'INV.WHSE.LOC FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','PREFIX' TO PREFIX ELSE
    ERRMSG = 'PREFIX FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','SECURITY' TO SECURITY ELSE
    ERRMSG = 'SECURITY FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','COST.CNTR' TO COST.CNTR ELSE
    ERRMSG = 'COST.CNTR FILE IS MISSING' ; GOTO 93000
  END
  OPEN '','INVOICE.SALES.STATS' TO INVOICE.SALES.STATS ELSE
    ERRMSG = 'INVOICE.SALES.STATS FILE IS MISSING'; GOTO 93000
  END
*
*--- GET COMPANY NAME
*
  MAT COMP.REC = ''
  CONO = ''
  CALL GET.CONO(CONO,MAT COMP.REC)
  IF CONO = 'END' THEN GOTO 99999
  IF CO.SAS = "Y" THEN OPEN '','JOB.SALES.STATS' TO JOB.SALES.STATS ELSE ERRMSG = "JOB.SALES.STATS FILE IS MISSING" ; GOTO 93000
*
*--- GET OPER-ID
*
*     PORT.NO = FIELD(OCONV(0,"U50BB")," ",1)
*     PORT.NO = SYSTEM(18)
  PORT.NO = 'TTY'
  CALL SYSVARS.SUB(PORT.NO)
*     IND.POS = INDEX(PORT.NO,'/',1)
*     IF IND.POS = 0 THEN
*        PORT.NO = PORT.NO[4,(LEN(PORT.NO)-3)]
*     END ELSE
*        PORT.NO = PORT.NO[4,IND.POS-4]
*     END
  READV OPER.ID FROM SECURITY, "R.":PORT.NO,2 ELSE OPER.ID = "???"
  OPER.ID = PORT.NO:"!":OPER.ID
  TODAY = DATE()
  READ PERIOD.REC FROM CONTROL, CONO:"ACCT.PERIODS" ELSE
    PERIOD.REC = ""
    PERIOD.REC<1> = 12
  END
  NUM.PERIODS = PERIOD.REC<1>
  READ CTL.WIP.TYPE FROM CONTROL, CONO : "WIP.DEFAULT" ELSE CTL.WIP.TYPE = ""
  IF CTL.WIP.TYPE = "" THEN CTL.WIP.TYPE = "ALL"
  ALL.TYPE = "LB"
  ALL.TYPE<1,2> = "MT"
  ALL.TYPE<1,3> = "OS"
  ALL.TYPE<1,4> = "SP"
  ALL.TYPE<1,5> = "MS"
  MAIN.DESC = "OTHER - "
*
*--- SET GEN XREF SCREEN
*
  MAT GEN.XREF.REC = ""
  GXR.CO = CONO ; GXR.HEADING<1,2> = "DESCRIPTION" ; GXR.ATT<1,1> = 0 ; GXR.ATT<1,2> = 1 ; GXR.LEN<1,1> = 10 ; GXR.LEN<1,2> = 60
*
*--- GET CURRENT FISCAL PERIOD
*
  MATREAD FISCAL.REC FROM CONTROL, CONO:"JCFISCAL" ELSE
    ERRMSG = "JCFISCAL IS NOT ON CONTROL FILE"
    GOSUB 91000; GOTO 99999
  END
*
***** T23278 v
  READ DIVISION.REC FROM CONTROL, CONO:"DIVISIONS" ELSE
    ERRMSG = "DIVISIONS CONTROL RECORD IS MISSING"
    GOSUB 91000; GOTO 99999
  END
  READ SECURITY.REC FROM CONTROL, CONO:"DIV.SECURITY" ELSE
    ERRMSG = "DIVISIONS SECURITY CONTROL RECORD IS MISSING"
    GOSUB 91000; GOTO 99999
  END
*
***** MOVED THE FOLLOWING SECTION TO AFTER CHECK OF DIV.CODE
*  IF LEN(FR.CURR.PER) # 6 THEN
*      ERRMSG = "ERROR IN JCFISCAL - ":FR.CURR.PER
*      GOSUB 91000; GOTO 99999
*  END
*  IF FR.CURR.PER[5,2] < 1 OR FR.CURR.PER[5,2] > NUM.PERIODS THEN
*      ERRMSG = "ERROR IN JCFISCAL - ":FR.CURR.PER
*      GOSUB 91000; GOTO 99999
*  END
*  CURR = FR.CURR.PER[5,2]
*  YEAR = FR.CURR.PER[1,4]
*
***** T23278 ^
*
*--- PRINT SCREEN
*
  MAT EDIT.COM.DRIVER = ""
  ECD.SCRN.CNT = 1
  ECD.SCRN.NAME = 'REV.WIP.MAINT'
  ECD.ACTION=1;  CALL SCRN.EDIT
  ECD.SCRN.NO = 1
*
*--- MAIN PROCESSING
*
  XLN = 16
  XLN<2> = 29
  XLN<3> = 42
  XLN<4> = 55
1000*
  RELEASE   ;* T26126
  MAT RWH.REC = ""; MAT CUST.REC = ""; MAT SCV.REC = ""
  ECD.ACTION = 6; CALL SCRN.EDIT
  ECD.NUM = 1; ECD.ACTION = 4; CALL SCRN.EDIT
  IF ECD.RET.VALUE = "END" THEN GOTO 99999
  IF ECD.RET.VALUE # "" THEN GOTO 1900
1200*
  ECD.NUM = 2; ECD.ACTION = 4; CALL SCRN.EDIT
  BEGIN CASE
    CASE ECD.RET.VALUE = "END"
      GOTO 1000
    CASE ECD.RET.VALUE # ""
      MATREAD CUST.REC FROM CUSTOMER, CONO : ECD.RET.VALUE ELSE
        ERRMSG = "CANNOT LOCATE CUSTOMER - " : ECD.RET.VALUE
        GOSUB 91000; GOTO 1200
      END
      JOB.CUST = ECD.RET.VALUE
    CASE 1
1400*
      ECD.NUM = 3
      ECD.ACTION = 4; CALL SCRN.EDIT
      IF ECD.RET.VALUE = "END" THEN GOTO 1000
      IF ECD.RET.VALUE = "" THEN GOTO 1200
      GXR.XREF = CUSTOMER.XREF
      GXR.FILE = CUSTOMER
      GXR.LOC = 1
      GXR.TOP.LINE = 'CUSTOMER XREF SEARCH'
      GXR.HEADING<1,1> = 'CUSTOMER'
      GXR.ID = ''
      GXR.SRCH.ID = ECD.RET.VALUE
      CALL GEN.XREF(MAT GEN.XREF.REC,PREFIX)
      IF GXR.ID = '' THEN
        ECD.ACTION = 2; CALL SCRN.EDIT
        SCV.REC(3) = ""; GOTO 1200
      END ELSE
        MATREAD CUST.REC FROM CUSTOMER, CONO : GXR.ID ELSE
          ERRMSG = "CANNOT LOCATE CUSTOMER - " : GXR.ID
          GOSUB 91000; GOTO 1400
        END
        JOB.CUST = GXR.ID
      END
  END CASE
  GXR.XREF = CUSTOMER
  GXR.FILE = JOB
  GXR.TOP.LINE<1,1> = "JOB XREF SEARCH"
  GXR.TOP.LINE<1,2> = "FOR CUSTOMER : ":CUST.NAME
  GXR.ID = ""
  GXR.SRCH.ID = JOB.CUST
  CALL JOB.GEN.XREF(MAT GEN.XREF.REC,PREFIX)
  ECD.ACTION = 2 ; CALL SCRN.EDIT
  IF GXR.ID = "" THEN
    ERRMSG = "NO JOB SELECTION FOR CUSTOMER - " : JOB.CUST
    GOSUB 91000 ; GOTO 1000
  END
  ECD.RET.VALUE = GXR.ID
1900*
  * T26126 v
  MATREADU JOB.REC FROM JOB, CONO : ECD.RET.VALUE LOCKED
    ERRMSG = 'JOB record is locked by user - ':GETUSERNAME(STATUS())
    GOSUB 91000;GOTO 1000 
  END ELSE
  * T26126 ^
    RELEASE JOB, CONO:ECD.RET.VALUE
    ERRMSG = "CANNOT LOCATE JOB - " : ECD.RET.VALUE
    GOSUB 91000; GOTO 1000
  END
  CHARGE.JOB = ECD.RET.VALUE
*T23278 v
  DIV.CODE = JOB.DIV; USER.ID = UPCASE(@LOGNAME); ERRMSG = ''
  CALL CK.DIV.SEC.SUB(CONO,DIV.CODE,USER.ID,ERRMSG)
  IF ERRMSG # '' THEN
    GOSUB 91000; GOTO 1000
  END
  IF SECURITY.REC<1> = "Y" AND SECURITY.REC<2> = "Y" THEN 
    IF DIV.CODE = "00" OR DIV.CODE = "ALL" THEN
      ERRMSG = " 'ALL' OR '00' INVALID WHEN DIVISION-LEVEL POSTING & CLOSING IS SELECTED"
      GOSUB 91000; GOTO 1000
    END
    LOCATE DIV.CODE IN DIVISION.REC<1>,1 SETTING POS ELSE
      ERRMSG = "Division ":DIV.CODE:" not found in Control File DIVISIONS Record"
      GOSUB 91000; GOTO 99999
    END
  END ELSE
    POS = 1
  END
*
  IF LEN(FR.CURR.PER<1,POS>) # 6 THEN
    ERRMSG = "ERROR IN JCFISCAL - ":FR.CURR.PER<1,POS>
    GOSUB 91000; GOTO 99999
  END
  IF FR.CURR.PER<1,POS>[5,2] < 1 OR FR.CURR.PER<1,POS>[5,2] > NUM.PERIODS THEN
    ERRMSG = "ERROR IN JCFISCAL - ":FR.CURR.PER<1,POS>
    GOSUB 91000; GOTO 99999
  END
  CURR = FR.CURR.PER<1,POS>[5,2]
  YEAR = FR.CURR.PER<1,POS>[1,4]
*T23278 ^
*T25340 v IF JOB.WIP<1,1> + 0 = 0 THEN
  IF SUM(JOB.WIP<1,2>) = 0 THEN
*T27265
    RELEASE JOB, CONO:ECD.RET.VALUE
*T27265
    ERRMSG = "NO WORK IN-PROCESS FOR THIS JOB"
    GOSUB 91000; GOTO 1000
  END
  IN.PROCESS = 0; REVERSED = 0
  FOR I = 1 TO 4
    IN.PROCESS = IN.PROCESS + JOB.WIP<1,2,I>
    REVERSED = REVERSED + JOB.WIP<1,3,I>
  NEXT I
  IF IN.PROCESS = 0 THEN
    ERRMSG = "NO WORK IN-PROCESS FOR THIS JOB"
    GOSUB 91000; GOTO 1000
  END
  IF CUST.NAME = "" THEN
    MATREAD CUST.REC FROM CUSTOMER , CONO : JOB.CUST ELSE
      CUST.NAME = "*** NOT ON FILE ***"
    END
  END
  RWH.JOB = ECD.RET.VALUE
  SCV.REC(1) = RWH.JOB
  SCV.REC(2) = JOB.CUST
  SCV.REC(3) = CUST.NAME
  SCV.REC(4) = JOB.DESC<1,1>
  ECD.ACTION = 3 ; CALL SCRN.EDIT
  TOT.JB.WIP = 0; TOT.LB.WIP = 0; TOT.MT.WIP = 0
  TOT.OS.WIP = 0; TOT.SP.WIP = 0; TOT.MS.WIP = 0
  FOR I = 1 TO 4
    P_X  = XLN<I> ; P_Y = 9 ; P_VALUE = OCONV(JOB.LB.WIP<1,2,I>,"MD2Z,") "R#12" ; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    TOT.LB.WIP = TOT.LB.WIP + JOB.LB.WIP<1,2,I>
  NEXT I
  P_X  = 68 ; P_Y = 9 ; P_VALUE = OCONV(TOT.LB.WIP,"MD2Z,") "R#12" ; P_OPT = ""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  FOR I = 1 TO 3
    P_X  = XLN<I> ; P_Y = 10 ; P_VALUE = OCONV(JOB.MT.WIP<1,2,I>,"MD2Z,") "R#12" ; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    TOT.MT.WIP = TOT.MT.WIP + JOB.MT.WIP<1,2,I>
  NEXT I
  P_X  = 68 ; P_Y = 10 ; P_VALUE = OCONV(TOT.MT.WIP,"MD2Z,") "R#12" ; P_OPT = ""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  FOR I = 1 TO 2
    P_X  = XLN<I> ; P_Y = 11 ; P_VALUE = OCONV(JOB.OS.WIP<1,2,I>,"MD2Z,") "R#12" ; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    TOT.OS.WIP = TOT.OS.WIP + JOB.OS.WIP<1,2,I>
  NEXT I
  P_X  = 68 ; P_Y = 11 ; P_VALUE = OCONV(TOT.OS.WIP,"MD2Z,") "R#12" ; P_OPT = ""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  FOR I = 1 TO 2
    P_X  = XLN<I> ; P_Y = 12 ; P_VALUE = OCONV(JOB.SP.WIP<1,2,I>,"MD2Z,") "R#12" ; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    TOT.SP.WIP = TOT.SP.WIP + JOB.SP.WIP<1,2,I>
  NEXT I
  P_X  = 68 ; P_Y = 12 ; P_VALUE = OCONV(TOT.SP.WIP,"MD2Z,") "R#12" ; P_OPT = ""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  FOR I = 1 TO 2
    P_X  = XLN<I> ; P_Y = 13 ; P_VALUE = OCONV(JOB.MS.WIP<1,2,I>,"MD2Z,") "R#12" ; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    TOT.MS.WIP = TOT.MS.WIP + JOB.MS.WIP<1,2,I>
  NEXT I
  P_X  = 68 ; P_Y = 13 ; P_VALUE = OCONV(TOT.MS.WIP,"MD2Z,") "R#12" ; P_OPT = ""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  FOR I = 1 TO 4
    P_X  = XLN<I> ; P_Y = 14 ; P_VALUE = OCONV(JOB.WIP<1,2,I>,"MD2Z,") "R#12" ; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    TOT.JB.WIP = TOT.JB.WIP + JOB.WIP<1,2,I>
  NEXT I
  P_X  = 68 ; P_Y = 14 ; P_VALUE = OCONV(TOT.JB.WIP,"MD2Z,") "R#12" ; P_OPT = ""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*
  TOT.JB.REV = 0; TOT.LB.REV = 0; TOT.MT.REV = 0
  TOT.OS.REV = 0; TOT.SP.REV = 0; TOT.MS.REV = 0
  FOR I = 1 TO 4
    P_X  = XLN<I> ; P_Y = 15 ; P_VALUE = OCONV(JOB.LB.WIP<1,3,I>,"MD2Z,") "R#12" ; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    TOT.LB.REV = TOT.LB.REV + JOB.LB.WIP<1,3,I>
  NEXT I
  P_X  = 68 ; P_Y = 15 ; P_VALUE = OCONV(TOT.LB.REV,"MD2Z,") "R#12" ; P_OPT = ""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  FOR I = 1 TO 3
    P_X  = XLN<I> ; P_Y = 16 ; P_VALUE = OCONV(JOB.MT.WIP<1,3,I>,"MD2Z,") "R#12" ; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    TOT.MT.REV = TOT.MT.REV + JOB.MT.WIP<1,3,I>
  NEXT I
  P_X  = 68 ; P_Y = 16 ; P_VALUE = OCONV(TOT.MT.REV,"MD2Z,") "R#12" ; P_OPT = ""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  FOR I = 1 TO 2
    P_X  = XLN<I> ; P_Y = 17 ; P_VALUE = OCONV(JOB.OS.WIP<1,3,I>,"MD2Z,") "R#12" ; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    TOT.OS.REV = TOT.OS.REV + JOB.OS.WIP<1,3,I>
  NEXT I
  P_X  = 68 ; P_Y = 17 ; P_VALUE = OCONV(TOT.OS.REV,"MD2Z,") "R#12" ; P_OPT = ""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  FOR I = 1 TO 2
    P_X  = XLN<I> ; P_Y = 18 ; P_VALUE = OCONV(JOB.SP.WIP<1,3,I>,"MD2Z,") "R#12" ; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    TOT.SP.REV = TOT.SP.REV + JOB.SP.WIP<1,3,I>
  NEXT I
  P_X  = 68 ; P_Y = 18 ; P_VALUE = OCONV(TOT.SP.REV,"MD2Z,") "R#12" ; P_OPT = ""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  FOR I = 1 TO 2
    P_X  = XLN<I> ; P_Y = 19 ; P_VALUE = OCONV(JOB.MS.WIP<1,3,I>,"MD2Z,") "R#12" ; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    TOT.MS.REV = TOT.MS.REV + JOB.MS.WIP<1,3,I>
  NEXT I
  P_X  = 68 ; P_Y = 19 ; P_VALUE = OCONV(TOT.MS.REV,"MD2Z,") "R#12" ; P_OPT = ""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  FOR I = 1 TO 4
    P_X  = XLN<I> ; P_Y = 20 ; P_VALUE = OCONV(JOB.WIP<1,3,I>,"MD2Z,") "R#12" ; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    TOT.JB.REV = TOT.JB.REV + JOB.WIP<1,3,I>
  NEXT I
  P_X  = 68 ; P_Y = 20 ; P_VALUE = OCONV(TOT.JB.REV,"MD2Z,") "R#12" ; P_OPT = ""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*
  FOR OPTION = 1 TO 5 WHILE ECD.RET.VALUE # "END"
    ON OPTION GOSUB 2000,2500,3000,4000,5000
  NEXT OPTION
  IF ECD.RET.VALUE = "END" THEN GOTO 1000
*
*--- ENTER OPTION
*
  MORE = 1
  LOOP
    ECD.NUM = 9; SCV.REC(ECD.NUM) = ""
    ECD.ACTION = 4; CALL SCRN.EDIT
    OPTION = ECD.RET.VALUE
    BEGIN CASE
      CASE OPTION = "END" OR OPTION = "E"
        MORE = 0
      CASE NUM(OPTION) AND OPTION > 0 AND OPTION < 6
        ON OPTION GOSUB 2000,2500,3000,4000,5000
      CASE OPTION = "F"
        RWH.JB.BEFORE = JOB.WIP<1,2>
        RWH.LB.BEFORE = JOB.LB.WIP<1,2>
        RWH.MT.BEFORE = JOB.MT.WIP<1,2>
        RWH.OS.BEFORE = JOB.OS.WIP<1,2>
        RWH.SP.BEFORE = JOB.SP.WIP<1,2>
        RWH.MS.BEFORE = JOB.MS.WIP<1,2>
        IF RWH.REV.TYPE = "OTH" THEN
          PTR = 0
          FOR II = 1 TO 5
            LOCATE ALL.TYPE<1,II> IN CTL.WIP.TYPE<1>,1 SETTING FND ELSE
              PTR = PTR + 1
              RWH.REV.TYPE<1,PTR> = ALL.TYPE<1,II>
              IF PTR > 1 THEN
                RWH.REV.DATE<1,PTR> = RWH.REV.DATE<1,1>
                RWH.REV.PER<1,PTR> = RWH.REV.PER<1,1>
              END
            END
          NEXT II
        END
        GOSUB 8000  ;* GET 'BEFORE' COSTS    ISS
*              CALL REVERSE.JOB.WIP(CONO,RWH.JOB,RWH.REV.TYPE,RWH.REV.PER,RWH.REV.DATE,RWH.PERIOD,FR.CURR.PER);* T23278
        CALL REVERSE.JOB.WIP(CONO,RWH.JOB,RWH.REV.TYPE,RWH.REV.PER,RWH.REV.DATE,RWH.PERIOD,FR.CURR.PER<1,POS>);* T23278
        GOSUB 9000  ;* GET 'AFTER' COSTS    ISS
        RWH.JB.AFTER = JOB.WIP<1,2>
        RWH.LB.AFTER = JOB.LB.WIP<1,2>
        RWH.MT.AFTER = JOB.MT.WIP<1,2>
        RWH.OS.AFTER = JOB.OS.WIP<1,2>
        RWH.SP.AFTER = JOB.SP.WIP<1,2>
        RWH.MS.AFTER = JOB.MS.WIP<1,2>
        IF RWH.Z.R.QTY = "Y" THEN
*T26909 v
          IF SUM(JOB.ALOC.QTY) # 0 AND CO.POS = 'Y' THEN
            CALL CLEAR.JOB.ALLOC(CONO,RWH.JOB)
          END
*T26909 ^
          RESV.ACTION = "D"
          RESV.LOC = 0
          CALL JOB.RESV.SUB(CONO,RESV.ACTION,RESV.LOC,RWH.JOB)
          MCNT = COUNT(JOB.RESV.MATL,VM) + (JOB.RESV.MATL # "")
          FOR M = MCNT TO 1 STEP - 1
            IF JOB.RESV.QTY<1,M> + JOB.ALOC.QTY<1,M> + JOB.USED.QTY<1,M> = 0 THEN
              JSTAT.ID = JOB.RESV.MATL<1,M>:"!":JOB.RESV.WHSE<1,M>:"!":RWH.JOB
              MATREAD INV.JS.REC FROM INV.JOB.STATS, CONO:JSTAT.ID ELSE
                JOB.RESV.MATL = DELETE(JOB.RESV.MATL,1,M,0)
                JOB.RESV.WHSE = DELETE(JOB.RESV.WHSE,1,M,0)
                JOB.RESV.DATE = DELETE(JOB.RESV.DATE,1,M,0)
                JOB.ALOC.QTY = DELETE(JOB.ALOC.QTY,1,M,0)
                JOB.RESV.QTY = DELETE(JOB.RESV.QTY,1,M,0)
                JOB.USED.QTY = DELETE(JOB.USED.QTY,1,M,0)
                JOB.ALOC.AMT = DELETE(JOB.ALOC.AMT,1,M,0)
                JOB.RESV.AMT = DELETE(JOB.RESV.AMT,1,M,0)
                JOB.USED.AMT = DELETE(JOB.USED.AMT,1,M,0)
              END
            END
          NEXT M
        END
        BEGIN CASE
          CASE RWH.REV.PER < 10000
          CASE RWH.REV.TYPE # "ALL"
          CASE RWH.REV.DATE # "ALL"
          CASE RWH.PERIOD # "ALL"
          CASE JOB.STATUS<1,1> = 1 OR JOB.STATUS<1,1> = 5
            LOCATE "3" IN JOB.STATUS<1>,1 SETTING INVOICED ELSE INVOICED = 0
* T20377
            LOCATE "4" IN JOB.STATUS<1>,1 SETTING COMPLETED ELSE COMPLETED = 0
            BEGIN CASE
              CASE INVOICED + COMPLETED = 0
              CASE INVOICED = 0
                JOB.STATUS = INSERT(JOB.STATUS,1,1,0,"4")
                JOB.STAT.DATE = INSERT(JOB.STAT.DATE,1,1,0,TODAY)
                JOB.TRACK.DATE<1,10> = TODAY
              CASE COMPLETED = 0
                JOB.STATUS = INSERT(JOB.STATUS,1,1,0,"3")
                JOB.STAT.DATE = INSERT(JOB.STAT.DATE,1,1,0,TODAY)
                JOB.TRACK.DATE<1,9> = TODAY
              CASE INVOICED < COMPLETED
                JOB.STATUS = INSERT(JOB.STATUS,1,1,0,"3")
                JOB.STAT.DATE = INSERT(JOB.STAT.DATE,1,1,0,TODAY)
                JOB.TRACK.DATE<1,9> = TODAY
              CASE 1
*        IF INVOICED THEN
                JOB.STATUS = INSERT(JOB.STATUS,1,1,0,"4")
                JOB.STAT.DATE = INSERT(JOB.STAT.DATE,1,1,0,TODAY)
                JOB.TRACK.DATE<1,10> = TODAY
*        END
            END CASE
* T20377
        END CASE
        MATWRITE JOB.REC ON JOB, CONO:RWH.JOB
        READU SEQ.NUM FROM CONTROL , CONO:"REVERSE.WIP" ELSE SEQ.NUM = 10001
        REV.REC = ""
        LOOP
          READ REV.REC FROM REVERSE.WIP.HIST, CONO:SEQ.NUM ELSE REV.REC = ""
        WHILE REV.REC # "" DO
          SEQ.NUM = SEQ.NUM + 1
        REPEAT
        NEW.SEQ.NO = SEQ.NUM + 1
        WRITE NEW.SEQ.NO ON CONTROL , CONO:"REVERSE.WIP"
        RWH.OPER = OPER.ID ; RWH.ENT.DATE = TODAY
        MATWRITE RWH.REC ON REVERSE.WIP.HIST , CONO:SEQ.NUM
        GOSUB 6000
        GOSUB 7000   ;* UPDATE THE INVOICE SALES STATS RECORD ISS
        MORE = 0
    END CASE
  WHILE MORE = 1 DO REPEAT
  GOTO 1000
*-----------------------*
*---   SUBROUTINES   ---*
*-----------------------*
*
*
*--- ZERO RESERVE QUANTITY
*
2000*
  ECD.NUM = 7
  ECD.ACTION = 4; CALL SCRN.EDIT
  IF ECD.RET.VALUE # "END" THEN
    RWH.Z.R.QTY = ECD.RET.VALUE
  END
  RETURN
*
*--- REVERSE TYPE
*
2500*
  ECD.NUM = 10
  IF CTL.WIP.TYPE = "ALL" THEN
    RWH.REV.TYPE = "ALL"
    SCV.REC(ECD.NUM)<ECD.SCRN.NO> = RWH.REV.TYPE
    ECD.ACTION = 5; CALL SCRN.EDIT
  END ELSE
    VCNT = COUNT(CTL.WIP.TYPE,VM) + (CTL.WIP.TYPE # "")
    ECD.VALDAT = "ALL," : CTL.WIP.TYPE<1,1>
    FOR VV = 2 TO VCNT
      ECD.VALDAT = ECD.VALDAT : "," : CTL.WIP.TYPE<1,VV>
    NEXT VV
    IF VCNT < 5 THEN
      LOCATE "OTH" IN CTL.WIP.TYPE<1>,1 SETTING FND ELSE
        ECD.VALDAT = ECD.VALDAT : ",OTH"
      END
    END
    ECD.HMSG = "Enter " : ECD.VALDAT
    ECD.ACTION = 4; CALL SCRN.EDIT
    IF ECD.RET.VALUE = "END" THEN GOTO 2599
    BEGIN CASE
      CASE ECD.RET.VALUE = "END"
        GOTO 2599
      CASE ECD.RET.VALUE = "ALL"
      CASE ECD.RET.VALUE = "OTH" AND VCNT < 5
      CASE 1
        LOCATE ECD.RET.VALUE IN CTL.WIP.TYPE<1>,1 SETTING FND ELSE
          ERRMSG = "INVALID TYPE - " : ECD.RET.VALUE
          GOSUB 91000
          GOTO 2500
        END
    END CASE
    RWH.REV.TYPE = ECD.RET.VALUE
  END
  ECD.NUM = 11
  BEGIN CASE
    CASE RWH.REV.TYPE = "LB"
      SCV.REC(ECD.NUM)<ECD.SCRN.NO> = "LABOR"
    CASE RWH.REV.TYPE = "MT"
      SCV.REC(ECD.NUM)<ECD.SCRN.NO> = "MATERIAL"
    CASE RWH.REV.TYPE = "OS"
      SCV.REC(ECD.NUM)<ECD.SCRN.NO> = "OUTSIDE PURCHASE"
    CASE RWH.REV.TYPE = "SP"
      SCV.REC(ECD.NUM)<ECD.SCRN.NO> = "SHIPPING"
    CASE RWH.REV.TYPE = "MS"
      SCV.REC(ECD.NUM)<ECD.SCRN.NO> = "MISCELLANEOUS"
    CASE RWH.REV.TYPE = "OTH"
      SCV.REC(ECD.NUM)<ECD.SCRN.NO> = MAIN.DESC
      FOR XX = 1 TO 5
        LOCATE ALL.TYPE<1,XX> IN CTL.WIP.TYPE<1>,1 SETTING FND ELSE
          IF SCV.REC(ECD.NUM)<ECD.SCRN.NO> # MAIN.DESC THEN
            SCV.REC(ECD.NUM)<ECD.SCRN.NO> = SCV.REC(ECD.NUM)<ECD.SCRN.NO> : ","
          END
          SCV.REC(ECD.NUM)<ECD.SCRN.NO> = SCV.REC(ECD.NUM)<ECD.SCRN.NO> : ALL.TYPE<1,XX>
        END
      NEXT XX
    CASE 1
      SCV.REC(ECD.NUM)<ECD.SCRN.NO> = "ALL"
  END CASE
  ECD.ACTION = 5; CALL SCRN.EDIT
2599*
  RETURN
*
*--- REVERSE PERCENT
*
3000*
  ECD.NUM = 5; ECD.ACTION = 4; CALL SCRN.EDIT
  IF ECD.RET.VALUE # "END" THEN
    RWH.REV.PER = ECD.RET.VALUE
  END
  RETURN
*
*--- REVERSE DATE
*
4000*
  ECD.NUM = 6
  ECD.ACTION = 4; CALL SCRN.EDIT
  BEGIN CASE
    CASE ECD.RET.VALUE = "END"
    CASE ECD.RET.VALUE = "ALL"
      RWH.REV.DATE = ECD.RET.VALUE
    CASE 1
      IVALUE = ICONV(ECD.RET.VALUE,"D2/")
      IF IVALUE = ECD.RET.VALUE OR IVALUE = "" THEN
        ERRMSG = "*** INVALID DATE ***"
        GOSUB 91000; GOTO 4000
      END
      RWH.REV.DATE = IVALUE
      ECD.NUM = 6; SCV.REC(ECD.NUM) = OCONV(IVALUE,"D2/")
      ECD.ACTION = 5; CALL SCRN.EDIT
  END CASE
  RETURN
*
*--- PERIOD
*
5000*
  ECD.NUM = 8; IVALUE = SCV.REC(ECD.NUM)
  SCV.REC(ECD.NUM) = ""; ECD.ACTION = 5; CALL SCRN.EDIT
  IF LEN(IVALUE) > 3 THEN
    SCV.REC(ECD.NUM) = IVALUE[5,2]
  END ELSE
    SCV.REC(ECD.NUM) = IVALUE
  END
  BEGIN CASE
    CASE CURR < (NUM.PERIODS - 1)
      ECD.VALDAT = STR("0",(2-LEN(CURR))):CURR:","
      ECD.VALDAT = ECD.VALDAT:STR("0",(2-LEN(CURR+1))):(CURR+1):","
      ECD.VALDAT = ECD.VALDAT:STR("0",(2-LEN(CURR+2))):(CURR+2):","
      ECD.VALDAT = ECD.VALDAT:"ALL"
    CASE CURR = (NUM.PERIODS - 1)
      ECD.VALDAT = (NUM.PERIODS - 1):",":NUM.PERIODS:",01,ALL"
    CASE 1
      ECD.VALDAT = NUM.PERIODS:",01,02,ALL"
  END CASE
  ECD.HMSG = "Valid Periods - ":ECD.VALDAT
  ECD.MAXL = 3; ECD.ACTION = 4; CALL SCRN.EDIT
  BEGIN CASE
    CASE ECD.RET.VALUE = "END"
    CASE ECD.RET.VALUE = "ALL"
      RWH.PERIOD = ECD.RET.VALUE
    CASE NOT(NUM(ECD.RET.VALUE))
      ERRMSG = "*** INVALID PERIOD ***"
      GOSUB 91000; GOTO 5000
    CASE ECD.RET.VALUE < 1 OR ECD.RET.VALUE > NUM.PERIODS
      ERRMSG = "*** INVALID PERIOD ***"
      GOSUB 91000; GOTO 5000
    CASE CURR > (NUM.PERIODS - 2) AND ECD.RET.VALUE < 3
      RWH.PERIOD = (YEAR + 1) : STR("0",(2-LEN(ECD.RET.VALUE))) : ECD.RET.VALUE
    CASE 1
      RWH.PERIOD = YEAR : STR("0",(2-LEN(ECD.RET.VALUE))) : ECD.RET.VALUE
  END CASE
  ECD.NUM = 8; SCV.REC(ECD.NUM) = RWH.PERIOD
  ECD.ACTION = 5
  CALL SCRN.EDIT
  RETURN
*
*---- UPDATE SALES STATISTICS
*
6000*
  IF CO.SAS = "Y" THEN
    MATREADU JSS.REC FROM JOB.SALES.STATS, CONO:RWH.JOB ELSE
      RELEASE JOB.SALES.STATS,CONO:RWH.JOB
      GOTO 6999
    END
    JSS.COST.TOTAL = JOB.TOT.COST
    TOT.DCOST = ""
    TOT.SPOILAGE = ""
    TOT.SHIP = ""
    LCNT = COUNT(JOB.LB.DEPT,VM) + (JOB.LB.DEPT # "")
    FOR LB = 1 TO LCNT
      MATREAD CCTR.REC FROM COST.CNTR, CONO:JOB.LB.CCTR<1,LB> ELSE
        MAT CCTR.REC = ""
      END
      IF CCTR.TYPE = "S" OR CCTR.TYPE = "W" OR CCTR.TYPE = "B" THEN
        LOCATE JOB.LB.CCTR<1,LB> IN JSS.PRESS<1>,1 SETTING FOND ELSE
          FOND = COUNT(JSS.PRESS,VM) + (JSS.PRESS # "") + 1
          JSS.PRESS<1,FOND> = JOB.LB.CCTR<1,LB>
          IF FOND > 1 AND JSS.MULTI.PRESS # "Y" THEN JSS.MULTI.PRESS = "Y"
        END
      END
      TOT.SPOILAGE = TOT.SPOILAGE + JOB.LB.TCOST<1,LB,4>
    NEXT LB
    MCNT = COUNT(JOB.MT.DEPT,VM) + (JOB.MT.DEPT # "")
    FOR MT = 1 TO MCNT
      TOT.SPOILAGE = TOT.SPOILAGE + JOB.MT.TCOST<1,MT,4>
      TOT.DCOST = TOT.DCOST + JOB.MT.DCOST<1,MT,1> + JOB.MT.DCOST<1,MT,2>
    NEXT MT
    OCNT = COUNT(JOB.OS.DEPT,VM) + (JOB.OS.DEPT # "")
    FOR OO = 1 TO OCNT
      TOT.SPOILAGE = TOT.SPOILAGE + JOB.OS.TCOST<1,OO,4>
      TOT.DCOST = TOT.DCOST + JOB.OS.DCOST<1,OO>
    NEXT OO
    MSCNT = COUNT(JOB.MS.DEPT,VM) + (JOB.MS.DEPT # "")
    FOR MS = 1 TO MSCNT
      TOT.SPOILAGE = TOT.SPOILAGE + JOB.MS.TCOST<1,MS,4>
      TOT.DCOST = TOT.DCOST + JOB.MS.DCOST<1,MS>
    NEXT MS
    SCNT = COUNT(JOB.SP.DEPT,VM) + (JOB.SP.DEPT # "")
    FOR SP = 1 TO SCNT
      TOT.SPOILAGE = TOT.SPOILAGE + JOB.SP.TCOST<1,SP,4>
      TOT.DCOST = TOT.DCOST + JOB.SP.DCOST<1,SP>
      TOT.SHIP = TOT.SHIP + JOB.SP.COST<1,SP>
    NEXT SP
    JSS.VALUE.ADDED = JSS.INVOICE.TOTAL - TOT.DCOST
    JSS.SPOILAGE = TOT.SPOILAGE
    JSS.SHIP.COST = TOT.SHIP
    MATWRITE JSS.REC ON JOB.SALES.STATS, CONO:RWH.JOB
         *GOSUB 10000 
6999*
  END
  RETURN
*****************************************************************
*
*------INVOICE SALES STATS UPDATE
*
******************************************************************
*
7000*
  PROD.KEY='0'
  WHSE.KEY='0'
*  IF RWH.PERIOD = "ALL" THEN RWH.PERIOD = FR.CURR.PER;* T23278
  IF RWH.PERIOD = "ALL" THEN RWH.PERIOD = FR.CURR.PER<1,POS>;* T23278
  MATREADU ISS.REC FROM INVOICE.SALES.STATS, CONO:"_J_":RWH.JOB:"_":RWH.PERIOD:"XX_":PROD.KEY:"_":WHSE.KEY ELSE
    MAT ISS.REC = ""
  END
  ISS.CUST.ID = JOB.CUST
  ISS.SLSM.ID = JOB.SLSMN
*  ISS.INVOICE.NO = FR.CURR.PER;* T23278
  ISS.INVOICE.NO = FR.CURR.PER<1,POS>;* T23278
  ISS.INVOICE.DATE = DATE()
  ISS.SALES.CODE = JOB.SALES.CODE
  ISS.DIV = JOB.DIV
  ISS.JOB.CAT = JOB.CATG
  ISS.NO.COLORS = JOB.COLORS
*  ISS.POSTING.MONTH = FR.CURR.PER;* T23278
  ISS.POSTING.MONTH = FR.CURR.PER<1,POS>;* T23278
  ISS.MASTER = JOB.MASTER
  ISS.LABOR.DCOST = ISS.LABOR.DCOST + AFTER.LABOR.DCOST
  ISS.LABOR.FFOH = ISS.LABOR.FFOH + AFTER.LABOR.FFOH
  ISS.LABOR.VFOH = ISS.LABOR.VFOH + AFTER.LABOR.VFOH
  ISS.LABOR.SAOH = ISS.LABOR.SAOH + AFTER.LABOR.SAOH
  ISS.MATL.DCOST = ISS.MATL.DCOST + AFTER.MATL.DCOST
  ISS.MATL.FFOH = ISS.MATL.FFOH + AFTER.MATL.FFOH
  ISS.MATL.VFOH = ISS.MATL.VFOH + AFTER.MATL.VFOH
  ISS.OSP.DCOST = ISS.OSP.DCOST + AFTER.OSP.DCOST
  ISS.OSP.FFOH = ISS.OSP.FFOH + AFTER.OSP.FFOH
  ISS.SHIP.DCOST = ISS.SHIP.DCOST + AFTER.SHIP.DCOST
  ISS.SHIP.FFOH = ISS.SHIP.FFOH + AFTER.SHIP.FFOH
  ISS.MISC.DCOST = ISS.MISC.DCOST + AFTER.MISC.DCOST
  ISS.MISC.FFOH = ISS.MISC.FFOH + AFTER.MISC.FFOH 
  ISS.COST.TOTAL = ISS.COST.TOTAL + ( AFTER.LABOR.DCOST + AFTER.LABOR.FFOH  + AFTER.LABOR.VFOH  + AFTER.LABOR.SAOH  + AFTER.MATL.DCOST  + AFTER.MATL.FFOH   + AFTER.MATL.VFOH   + AFTER.OSP.DCOST   + AFTER.OSP.FFOH    + AFTER.SHIP.DCOST  + AFTER.SHIP.FFOH   + AFTER.MISC.DCOST  + AFTER.MISC.FFOH   )
  PLANT.CON = ISS.ADJUST.AMT<1,3>
  OTH = ISS.ADJUST.AMT<1,4>
*     ADJ.FACT.COST = TOT.COST + ADJ.COST + SPOIL + PLANT.CON + OTH
      *ISS.ADJUST.COST<1,1> = ADJ.FACT.COST
*     ISS.VALUE.ADDED = ISS.VALUE.ADDED - (AFTER.LABOR.DCOST + AFTER.MATL.DCOST + AFTER.OSP.DCOST + AFTER.SHIP.DCOST + AFTER.MISC.DCOST)
  ISS.VALUE.ADDED = 0 - ( ISS.MATL.DCOST + ISS.OSP.DCOST + ISS.SHIP.DCOST + ISS.MISC.DCOST)
  IF CO.SAS = "Y" THEN
    MATWRITE ISS.REC ON INVOICE.SALES.STATS, CONO:"_J_":RWH.JOB:"_":RWH.PERIOD:"XX_":PROD.KEY:"_":WHSE.KEY
  END
  RETURN
******************************************************************
8000 * CAPTURE BEFORE  WIP COSTS
******************************************************************
  BEFORE.LABOR.DCOST = JOB.LB.WIP<1,3,1>
  BEFORE.LABOR.FFOH  = JOB.LB.WIP<1,3,2> 
  BEFORE.LABOR.VFOH  = JOB.LB.WIP<1,3,3>
  BEFORE.LABOR.SAOH  = JOB.LB.WIP<1,3,4>
  BEFORE.MATL.DCOST  = JOB.MT.WIP<1,3,1>
  BEFORE.MATL.FFOH   = JOB.MT.WIP<1,3,2> 
  BEFORE.MATL.VFOH   = JOB.MT.WIP<1,3,3>
  BEFORE.OSP.DCOST   = JOB.OS.WIP<1,3,1>
  BEFORE.OSP.FFOH    = JOB.OS.WIP<1,3,2> 
  BEFORE.SHIP.DCOST  = JOB.SP.WIP<1,3,1>
  BEFORE.SHIP.FFOH   = JOB.SP.WIP<1,3,2> 
  BEFORE.MISC.DCOST  = JOB.MS.WIP<1,3,1>
  BEFORE.MISC.FFOH   = JOB.MS.WIP<1,3,2> 
  RETURN
********************************************************************
9000 * CAPTURE AFTER  WIP COSTS
********************************************************************
  AFTER.LABOR.DCOST = JOB.LB.WIP<1,3,1>
  AFTER.LABOR.FFOH  = JOB.LB.WIP<1,3,2> 
  AFTER.LABOR.VFOH  = JOB.LB.WIP<1,3,3>
  AFTER.LABOR.SAOH  = JOB.LB.WIP<1,3,4>
  AFTER.MATL.DCOST  = JOB.MT.WIP<1,3,1>
  AFTER.MATL.FFOH   = JOB.MT.WIP<1,3,2> 
  AFTER.MATL.VFOH   = JOB.MT.WIP<1,3,3>
  AFTER.OSP.DCOST   = JOB.OS.WIP<1,3,1>
  AFTER.OSP.FFOH    = JOB.OS.WIP<1,3,2> 
  AFTER.SHIP.DCOST  = JOB.SP.WIP<1,3,1>
  AFTER.SHIP.FFOH   = JOB.SP.WIP<1,3,2> 
  AFTER.MISC.DCOST  = JOB.MS.WIP<1,3,1>
  AFTER.MISC.FFOH   = JOB.MS.WIP<1,3,2> 
  AFTER.LABOR.DCOST = AFTER.LABOR.DCOST - BEFORE.LABOR.DCOST
  AFTER.LABOR.FFOH = AFTER.LABOR.FFOH - BEFORE.LABOR.FFOH
  AFTER.LABOR.VFOH = AFTER.LABOR.VFOH - BEFORE.LABOR.VFOH
  AFTER.LABOR.SAOH = AFTER.LABOR.SAOH - BEFORE.LABOR.SAOH
  AFTER.MATL.DCOST = AFTER.MATL.DCOST - BEFORE.MATL.DCOST
  AFTER.MATL.FFOH = AFTER.MATL.FFOH - BEFORE.MATL.FFOH 
  AFTER.MATL.VFOH = AFTER.MATL.VFOH - BEFORE.MATL.VFOH
  AFTER.OSP.DCOST = AFTER.OSP.DCOST - BEFORE.OSP.DCOST
  AFTER.OSP.FFOH = AFTER.OSP.FFOH - BEFORE.OSP.FFOH 
  AFTER.SHIP.DCOST = AFTER.SHIP.DCOST - BEFORE.SHIP.DCOST
  AFTER.SHIP.FFOH = AFTER.SHIP.FFOH - BEFORE.SHIP.FFOH
  AFTER.MISC.DCOST = AFTER.MISC.DCOST - BEFORE.MISC.DCOST
  AFTER.MISC.FFOH = AFTER.MISC.FFOH - BEFORE.MISC.FFOH
  RETURN
*
****************************************************************
10000*     INVOICE SALES TOTAL RECORD CREATION                 *
****************************************************************
  PROD.KEY='0'
  WHSE.KEY='0'
  MATREADU ISS.REC FROM INVOICE.SALES.STATS, CONO:"_J_":RWH.JOB:"_0_":PROD.KEY:"_":WHSE.KEY ELSE
    MAT ISS.REC = ""
  END
  ISS.CUST.ID = JOB.CUST
  ISS.VALUE.ADDED = JSS.INVOICE.TOTAL - TOT.DCOST
  ISS.SPOILAGE = TOT.SPOILAGE
  ISS.SHIP.COST = TOT.SHIP
  ISS.INVOICE.DATE = DATE()
  ISS.SLSM.ID = JOB.SLSMN
  ISS.SALES.CODE = JOB.SALES.CODE
  ISS.JOB.CAT = JOB.CATG
  ISS.NO.COLORS = JOB.COLORS
  ISS.POSTING.MONTH = FR.CURR.PER<1,POS>
*cust.state not used any more  ISS.CUST.STATE = CUST.STATE
  IF JOB.MASTER = "" THEN
    ISS.MASTER = CHARGE.JOB
  END ELSE
    ISS.MASTER = JOB.MASTER
  END
  IF CO.SAS = "Y" THEN
    MATWRITE ISS.REC ON INVOICE.SALES.STATS, CONO:"_J_":RWH.JOB:"_0_":PROD.KEY:"_":WHSE.KEY
  END
****************************************************************
  RETURN
*
*---- UPDATE COMMISSION FILE
*
******************************************************************
*--- CALLS FOR SYSCOM
*
91000*
  ERR.TYPE = 1
  CALL SYSCOM(MAT SYSCOM.REC)
  RETURN
92000*
  ERR.TYPE = 2
  CALL SYSCOM(MAT SYSCOM.REC)
  RETURN
93000*
  ERR.TYPE = 3
  CALL SYSCOM(MAT SYSCOM.REC)
99999*
*       PRINT @(-1)
  END
****************************************************************************
****************************************************************************
************************** EOP *********************************************
****************************************************************************
****************************************************************************
