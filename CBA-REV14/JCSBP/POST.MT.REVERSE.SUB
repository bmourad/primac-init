   SUBROUTINE POST.MT.REVERSE.SUB(CONO,MAT COMP.REC)
*COPY>CPYLIB>COM1
*COPY>JCS.CPYLIB>COM.JCS.LINK
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>JCS.CPYLIB>COM.INV.STATS 
*COPY>APS.CPYLIB>APS.FILE.VARS
*********************************************************************
* REVISION   -[08.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM     -PRIMAC
* SOURCE     -JCSBP
* PROGRAM    -POST.MT.REVERSE.SUB
* BY         -WALID A. YAMOUT , C.B.A
* DESCRIPTION -
* This program is used to reverse material cost from a job.
* TASK 20156 JR 3/21/96 DO NOT PUT ROLL/SKID ON REGULAR PRODUCTS
*T21058 julie 10/04/1996*REVERSE IS COMPARING A THREE DECIMAL NUMBER
*                          TO A TWO DECIMAL NUMBER
******* renee 08/18/1997*Adding changes made to this program in Rev10b
*                          to Rev11 for task T21920
*T21920 lanny 05/10/1997*Force small qty diff to match.
*T26334 epitka 06/01/2002 * REV12
*C40244 epitka 06/27/2002 * CALCULATE DIAMETER TOO
*C40579 cmykleb 08/15/2002 * Correct problem with reading the serial
*                            record from JMT.SERIAL field.
*C40659 cmykleb 09/03/2002 * Force location from the serial.
*T26918 epitka 10/15/2002 * CREATE ADDITIONAL ACCOUNTING TRANSACTION IF
*                           THERE IS A DIFFERENCE IN UNIT COST ON THE
*                           JOB.MATL AND INV_RECEIPTS FILE FOR THAT
*                           DIFFERENCE. THIS WOULD HAPPEN IF RECEIPT
*                           COST WAS ADJUSTED AFTER MATERIAL GOT POSTED
*                           TO THE JOB AND WIP GOT REVERSED.
*T27344 cmykleb 03/21/2003 * Use the location from the serial for
*                            the IWLO.ID always.
*T27365 adelgado 04/03/2003 * Fix error on location when serial has been
*                             deleted.
*T27484 lross 06/09/2003 * Not using INS Serial into IWLO.SERIAL could
*                          cause duplication if SERIAL later adjusted by
*                          PHYSICAL adjust.
*T27567 lross 07/16/2003 * If reversal of non-serial tracked prod for a
*                          given JOB.MATL record has multiple
*                          SERIALS/QTYS and multiple reversals are made
*                          to the JOB.MATL prog bails out with error if
*                          SERIAL.QTY = 0; should bypass processing of
*                          that item.
*T27961 lross 02/18/2004 * Several problems updating INV_RECEIPTS file.
*T28167 cmykleb 06/23/2004 * If the serial # being reversed is out of
*                            order in the IWLO.SERIAL field then the
*                            serial # will be added again to the
*                            IWLO.SERIAL field, which causes it to show
*                            up multiple times on some reports & screens.
*T21045 & 26736 lross 11/29/2004 * Mods never made it into base.
*T28675 lross 09/21/2005 * Recreate INV.WHSE.LOC if missing.
*********************************************************************
*
*---- INSERT FILE EQUATE
*
*COPY>JCS.CPYLIB>JOB
*COPY>JCS.CPYLIB>DAILY.REVERSE
*COPY>JCS.CPYLIB>JOB.MATL
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>CATEGORY
*COPY>ICS.CPYLIB>INV.STATS
*COPY>ICS.CPYLIB>INV.HIST
*COPY>ICS.CPYLIB>INV.JOB.STATS
*COPY>ICS.CPYLIB>INV.CNV
*COPY>JCS.CPYLIB>JOB.REVERSE
*COPY>JCS.CPYLIB>PROD.STATS
*COPY>JCS.CPYLIB>COST.CNTR.WIP
*COPY>JCS.CPYLIB>SPOIL.STATS
*COPY>ICS.CPYLIB>INV_SERIAL
*COPY>ICS.CPYLIB>INV_RECEIPTS
*COPY>ICS.CPYLIB>INV_RECP_WHSE
*COPY>ICS.CPYLIB>INV_AUDIT_HIST
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>ICS.CPYLIB>ICS.ID
   ;* used only for cost adj transactions
*COPY>APS.CPYLIB>VEND.STATS     
*COPY>APS.CPYLIB>VEND.PO.STATS  
*COPY>APS.CPYLIB>VEND.PROD.STATS
*COPY>ICS.CPYLIB>INV.COST.ADJ
*COPY>PMC.CPYLIB>COMPANY
*COPY>POS.CPYLIB>ACCRUED.LIAB.HIST
*
   DIM HOLD.JMT.REC(JMT.REC.SIZE); MAT HOLD.JMT.REC=''
   DIM HOLD.IWH.REC(IWH.REC.SIZE); MAT HOLD.IWH.REC=''
   DIM HOLD.IRW.REC(IRW.REC.SIZE); MAT HOLD.IRW.REC=''
   DIM HOLD.IWLO.REC(IWLO.REC.SIZE); MAT HOLD.IWLO.REC=''
   DIM HOLD.ISTK.REC(ISTK.REC.SIZE); MAT HOLD.ISTK.REC=''
*
   DEFFUN CALC.STK.QTY (COST.QTY,MAT INV.CNV.REC,ROND,LN)
   DEFFUN CALC.COST.QTY (STK.QTY,MAT INV.CNV.REC,ROND,LN)
   DEFFUN CALC.DIAM(COST.QTY,STK.QTY,MAT INV.REC)
   DEFFUN GET.INAH.SEQ(CONO,CONTROL.FILE,INV_AUDIT_HIST.FILE)
   DEFFUN GET.RECP.ID(CONO,CONTROL.FILE,DATE)
   DEFFUN CALC.EXT.COST(COST.QTY,UNIT.COST,COST.WT,ROND)
*
*---- INITIALIZATION
*
   SERIAL.FOUND=''
   TODAY=DATE()
   GEN.DIV = "00";GEN.DEPT = "00";GEN.CCTR = "000" 
   OPEN.FLAG=1
   ROND='.5'
   CADJ=''
   ;* CADJ array used for creation of additional
   ;* cost adjustment transacion if 
   ;* difference between JMT and INVR cost is
   ;* detected
   ;*CADJ<1>=receipt number
   ;*CADJ<2>=qty being reversed from jmt per receipt
   ;*CADJ<3>=unit cost on jmt
   ;*CADJ<4>=current unit cost on the receipt
   ;*CADJ<5>=ext cost difference
   ;*CADJ<6>=inah adj id
*
*---- MAIN PROCESSING
*
   SEQ.CNT=DCOUNT(DRV.SEQ,VM)
   FOR MLP=SEQ.CNT TO 1 STEP -1
      MAT IID.REC=''
      ERR=0
      REV.ALL=0
      DRV.STATUS<1,MLP>=""
      DEPT=DRV.DEPT<1,MLP>
      CCTR=DRV.CCTR<1,MLP>
      PROD=DRV.OPER<1,MLP>
      WHSE=DRV.EMP<1,MLP>
      WHSE.ID=CONO:WHSE
      MATREAD WHSE.REC FROM WAREHOUSE,WHSE.ID ELSE MAT WHSE.REC=''
      SEQ=DRV.SEQ<1,MLP>
      MT.NO=DEPT:"!":CCTR:"!":SEQ
      MT.ID=CONO:DRV.JOB:"!":DEPT:"!":CCTR:"!":PROD:"!":WHSE:"!"
      GOSUB CHECK.JMT
      IF DRV.STATUS<1,MLP> THEN GOTO NEXT.MLP
      IF DRV.TTYPE # 'C' THEN
         IF ABS(DRV.COST<1,MLP>-(JMT.QTY-JMT.RC.QTY)) <= 50 THEN
            DRV.COST<1,MLP>=JMT.QTY-JMT.RC.QTY
         END
      END
      GOSUB SET.REV.ALL
      IF DRV.STATUS<1,MLP> THEN GOTO NEXT.MLP
      GOSUB SET.DFND
      IF DRV.STATUS<1,MLP> THEN GOTO NEXT.MLP
      GOSUB SET.MLOC
      IF DRV.STATUS<1,MLP> THEN GOTO NEXT.MLP
      GOSUB SET.INV.WIP
      IF DRV.STATUS<1,MLP> THEN GOTO NEXT.MLP
*T21045 TOT.DCOST=JMT.DCOST<1,1>+JMT.DCOST<1,2>
      TOT.DCOST=JMT.DCOST<1,1>+JMT.DCOST<1,3>
      TOT.RC.DCOST=0; TOT.RC.COST=0; TOT.RC.SALE=0
      TOT.RC.QTY=0; TOT.RC.WIP=0; REV.WIP=""; TOT.RC.CUR.QTY=0
      IF JMT.RC.COST+0 <> 0 OR JMT.RC.QTY+0 <> 0 THEN
         GOSUB CHECK.RC.COST.QTY
         IF DRV.STATUS<1,MLP> THEN GOTO NEXT.MLP
      END
      GOSUB READ.INV.FILES
      IF DRV.STATUS<1,MLP> THEN GOTO NEXT.MLP
* T27365 v
      IF CATG.TRK.LVL = 'S' THEN 
         TMP.SS = DCOUNT(SERIAL.FOUND, VM)
         FOR SS = 1 TO TMP.SS
            IF SERIAL.FOUND<1,SS> = '' THEN
               DRV.STATUS<1,MLP> = 'NO SERIAL FOUND FOR JOB.MATL RECORD ':MT.ID:SEQ
               GOTO NEXT.MLP
            END
         NEXT SS
      END
* T27365 ^
      NEW.PTR=""; NEW.CNT=0
      NEW.QTY=0; NEW.DCOST=0
      BEGIN CASE
         CASE REV.ALL
            NEW.PTR=CUR.PTR
            NEW.CNT=CUR.CNT
            FOR I=1 TO NEW.CNT
               NEW.QTY=NEW.QTY+NEW.PTR<1,2,I>
               NEW.DCOST+=INT((NEW.PTR<1,4,I>/10000)*((NEW.PTR<1,2,I>/10)/(INV.COST.WT/100)))
            NEXT I
         CASE DRV.TTYPE="C"
            IF JMT.COST=TOT.DCOST THEN
               REV.AMT=DRV.COST<1,MLP>
            END ELSE
               PCT=DRV.COST<1,MLP>/(JMT.COST/1000)
               REV.AMT=INT((TOT.DCOST/1000)*PCT+.5)
               IF REV.AMT+TOT.RC.DCOST > TOT.DCOST THEN
                  REV.AMT=TOT.DCOST-TOT.RC.DCOST
               END
            END
            FOR I=CUR.CNT TO 1 STEP -1 WHILE REV.AMT > 0
               NEW.CNT=NEW.CNT+1
               FOR J=1 TO 4
                  INS CUR.PTR<1,J,I> BEFORE NEW.PTR<1,J,1>
               NEXT J
               COST=INT((NEW.PTR<1,4,1>/10000)*((NEW.PTR<1,2,1>/10)/(INV.COST.WT/100)))
               IF COST > REV.AMT THEN
                  PCT=REV.AMT/(COST/1000)
                  NEW.PTR<1,2,1>=INT((NEW.PTR<1,2,1>/1000)*PCT+.5)
                  NEW.PTR<1,2,1>=CALC.STK.QTY(NEW.PTR<1,2,1>,MAT INV.CNV.REC,'','')
                  NEW.PTR<1,2,1>=CALC.COST.QTY(NEW.PTR<1,2,1>,MAT INV.CNV.REC,'','')
                  COST=INT((NEW.PTR<1,4,1>/10000)*((NEW.PTR<1,2,1>/10)/(INV.COST.WT/100)))
               END
               REV.AMT=REV.AMT-COST
               NEW.QTY=NEW.QTY+NEW.PTR<1,2,1>
               NEW.DCOST=NEW.DCOST+COST
            NEXT I
         CASE 1
            REV.AMT=DRV.COST<1,MLP>
            FOR I=CUR.CNT TO 1 STEP -1 WHILE REV.AMT > 0
               NEW.CNT=NEW.CNT+1
               FOR J=1 TO 4
                  INS CUR.PTR<1,J,I> BEFORE NEW.PTR<1,J,1>
               NEXT J
               IF NEW.PTR<1,2,1> > REV.AMT THEN
                  NEW.PTR<1,2,1>=REV.AMT
               END
               REV.AMT=REV.AMT-NEW.PTR<1,2,1>
               NEW.QTY=NEW.QTY+NEW.PTR<1,2,1>
               NEW.DCOST=NEW.DCOST+INT((NEW.PTR<1,4,1>/10000)*((NEW.PTR<1,2,1>/10)/(INV.COST.WT/100)))
            NEXT I
            IF NEW.QTY <> DRV.COST<1,MLP> THEN
               IF ABS(DRV.COST<1,MLP>-NEW.QTY) < 10 THEN
                  DRV.COST<1,MLP>=NEW.QTY
               END ELSE
                  DRV.STATUS<1,MLP>="REV. QTY MISMATCH "
                  DRV.STATUS<1,MLP>:=OCONV(INT(NEW.QTY/10+.5),"MD2")
                  GOSUB RELEASE.INV.FILES 
                  GOTO NEXT.MLP
               END
            END
      END CASE
      CHK.QTY=0; CHK.PTR=""
      ACT.QTY=0; ACT.COST=0
      RSV.QTY=0; RSV.COST=0
      ;*
      ;* if INV.JOB.STATS record exists for this prod/job
      ;*
      FCNT=DCOUNT(IJS.RECP.NO,VM)
      FOR F=FCNT TO 1 STEP -1 WHILE CHK.QTY # NEW.QTY
         LOCATE MT.NO IN IJS.JMT.SEQ<1,F>,1 SETTING T THEN
            PTR=1
            LOCATE IJS.RECP.NO<1,F> IN IWH.RECP.NO<1> SETTING FNO ELSE FNO=0
            IF FNO THEN
               FCOST=IWH.COST.FI<1,FNO>
            END ELSE
               FCOST=0
            END
            LOOP
               LOCATE IJS.RECP.NO<1,F> IN NEW.PTR<1,1>,PTR SETTING TLOC ELSE
                  TLOC=0; PTR=0
               END
               BEGIN CASE
                  CASE PTR=0
                  CASE FCOST <> NEW.PTR<1,3,TLOC>
                  CASE IJS.FI.AMT<1,F>=NEW.PTR<1,4,TLOC>
                     PTR=0
               END CASE
            WHILE PTR DO
               PTR=TLOC+1
            REPEAT
            IF TLOC#0 THEN
               IF IJS.JMT.QTY<1,F,T> < NEW.PTR<1,2,TLOC> THEN
                  QTY=IJS.JMT.QTY<1,F,T>
               END ELSE
                  QTY=NEW.PTR<1,2,TLOC>
               END
               CHK.PTR<TLOC>=CHK.PTR<TLOC>+QTY
               CHK.QTY=CHK.QTY+QTY
               IF FNO THEN
                  ACT.QTY=ACT.QTY+QTY
                  ACT.COST=ACT.COST+INT((FCOST/10000)*((QTY/10)/(INV.COST.WT/100)))
                  IF DRV.TTYPE="R" THEN
                     IWH.RSV.FI<1,FNO>=IWH.RSV.FI<1,FNO>+QTY
                  END ELSE
                     RSV.QTY=RSV.QTY+QTY
                     RSV.COST=RSV.COST+INT((IJS.FI.AMT<1,F>/10000)*((QTY/10)/(INV.COST.WT/100)))
                  END
                  IWH.QTY.FI<1,FNO>=IWH.QTY.FI<1,FNO>+QTY
               END
               IF FNO=0 OR DRV.TTYPE='R' THEN
                  IJS.FI.ORG<1,F>=IJS.FI.ORG<1,F>-QTY
                  IF IJS.FI.ORG<1,F> < IJS.FI.QTY<1,F> THEN
                     IJS.FI.ORG<1,F>=IJS.FI.QTY<1,F>
                  END
               END ELSE
                  IJS.FI.QTY<1,F>=IJS.FI.QTY<1,F>+QTY
                  IF IJS.FI.QTY<1,F> > IJS.FI.ORG<1,F> THEN
                     IJS.FI.QTY<1,F>=IJS.FI.ORG<1,F>
                  END
               END
               IF QTY < IJS.JMT.QTY<1,F,T> THEN
                  IJS.JMT.QTY<1,F,T>=IJS.JMT.QTY<1,F,T>-QTY
               END ELSE
                  IJS.JMT.SEQ=DELETE(IJS.JMT.SEQ,1,F,T)
                  IJS.JMT.QTY=DELETE(IJS.JMT.QTY,1,F,T)
               END
               IF IJS.FI.QTY<1,F> < 1 AND IJS.JMT.SEQ<1,F>="" THEN
                  IJS.RECP.NO=DELETE(IJS.RECP.NO,1,F,0)
                  IJS.FI.ORG=DELETE(IJS.FI.ORG,1,F,0)
                  IJS.FI.QTY=DELETE(IJS.FI.QTY,1,F,0)
                  IJS.FI.AMT=DELETE(IJS.FI.AMT,1,F,0)
                  IJS.JMT.SEQ=DELETE(IJS.JMT.SEQ,1,F,0)
                  IJS.JMT.QTY=DELETE(IJS.JMT.QTY,1,F,0)
               END
            END
         END
      NEXT F
      ORSV.QTY=CHK.QTY; WIP.QTY=ACT.QTY; WIP.COST=ACT.COST
      FOR I=1 TO NEW.CNT
         QTY=NEW.PTR<1,2,I>-CHK.PTR<I>
         IF QTY>1 THEN
            TMP.RECP=NEW.PTR<1,1,I>
            LOCATE TMP.RECP IN IWH.RECP.NO<1> SETTING FNO ELSE FNO=0
            IF FNO=0 OR  IWH.QTY.FI<1,FNO>+QTY>IWH.ORG.FI<1,FNO> THEN
               CHK.QTY=CHK.QTY+QTY
            END ELSE
               IF IWH.COST.FI<1,FNO>#NEW.PTR<1,3,I> THEN
                  CADJ<1,-1>=IWH.RECP.NO<1,FNO>
                  CADJ<2,-1>=QTY
                  CADJ<3,-1>=NEW.PTR<1,3,I>
                  CADJ<4,-1>=IWH.COST.FI<1,FNO>
               END
               ACT.QTY=ACT.QTY+QTY
               ACT.COST+=INT((NEW.PTR<1,3,I>/10000)*((QTY/10)/(INV.COST.WT/100)))
               IWH.RSV.FI<1,FNO>=IWH.RSV.FI<1,FNO>+QTY
               IWH.QTY.FI<1,FNO>=IWH.QTY.FI<1,FNO>+QTY
               CHK.QTY=CHK.QTY+QTY
            END
            NEW.PTR<1,2,I>=0-NEW.PTR<1,2,I>
         END ELSE
            NEW.PTR<1,2,I>=0-NEW.PTR<1,2,I>
         END
      NEXT I
      IF CHK.QTY <> NEW.QTY THEN
         DRV.STATUS<1,MLP>="CHK.REV QTY MISMATCH "
         DRV.STATUS<1,MLP>:=OCONV(INT(CHK.QTY/10+.5),"MD2")
         GOSUB RELEASE.INV.FILES 
         GOTO NEXT.MLP
      END
      NEW.WIP=""
      IF REV.ALL THEN
         NEW.COST=JMT.COST-TOT.RC.COST
         NEW.SALE=JMT.SALE-TOT.RC.SALE
         FOR I=1 TO WPTR
            NEW.WIP<1,1,I>=REV.WIP<1,1,I>-JMT.WIP<1,1,I>
         NEXT I
      END ELSE
         IF TOT.DCOST # 0 THEN
            PCT=NEW.DCOST/(TOT.DCOST/1000)
         END ELSE
            PCT=NEW.DCOST/1000
         END
         IF JMT.COST=TOT.DCOST THEN
            NEW.COST=NEW.DCOST
         END ELSE
            NEW.COST=INT((JMT.COST/1000)*PCT+.5)
            IF NEW.COST+TOT.RC.COST > JMT.COST THEN
               NEW.COST=JMT.COST-TOT.RC.COST
            END
         END
         IF JMT.COST=JMT.SALE THEN
            NEW.SALE=NEW.COST
         END ELSE
            NEW.SALE=INT((JMT.SALE/1000)*PCT+.5)
            IF NEW.SALE+TOT.RC.SALE > JMT.SALE THEN
               NEW.SALE=JMT.SALE-TOT.RC.SALE
            END
         END
         BEGIN CASE
            CASE TOT.WIP=JMT.COST
               CHK.WIP=NEW.COST
            CASE TOT.WIP=TOT.DCOST
               CHK.WIP=NEW.DCOST
            CASE TOT.WIP=JMT.DCOST<1,1>
               CHK.WIP=ACT.COST
            CASE 1
               CHK.WIP=INT((TOT.WIP/1000)*PCT+.5)
               IF TOT.RC.WIP+CHK.WIP > TOT.WIP THEN
                  CHK.WIP=TOT.WIP-TOT.RC.WIP
               END
         END CASE
         TOT.WIP=0
         FOR I=1 TO WPTR
            IF JMT.WIP<1,1,I> > 0 THEN
               NEW.WIP<1,1,I>=0-INT((JMT.WIP<1,1,I>/1000)*PCT+.5)
               IF REV.WIP<1,1,I>-NEW.WIP<1,1,I> > JMT.WIP<1,1,I> THEN
                  NEW.WIP<1,1,I>=REV.WIP<1,1,I>-JMT.WIP<1,1,I>
               END
            END ELSE
               NEW.WIP<1,1,I>=0-INT((JMT.WIP<1,1,I>/1000)*PCT-.5)
               IF REV.WIP<1,1,I>-NEW.WIP<1,1,I> < JMT.WIP<1,1,I> THEN
                  NEW.WIP<1,1,I>=REV.WIP<1,1,I>-JMT.WIP<1,1,I>
               END
            END
            TOT.WIP=TOT.WIP-NEW.WIP<1,1,I>
         NEXT I
         DIFF=CHK.WIP-TOT.WIP
         BEGIN CASE
            CASE DIFF=0
            CASE DIFF > 0
               FOR I=WPTR TO 1 STEP -1 WHILE DIFF > 0
                  IF NEW.WIP<1,1,I> < 0-DIFF THEN
                     IF REV.WIP<1,1,I>-NEW.WIP<1,1,I>+DIFF <= JMT.WIP<1,1,I> THEN
                        NEW.WIP<1,1,I>=NEW.WIP<1,1,I>-DIFF
                        TOT.WIP=TOT.WIP+DIFF
                        DIFF=0
                     END
                  END
               NEXT I
            CASE 1
               FOR I=WPTR TO 1 STEP -1 WHILE DIFF < 0
                  IF NEW.WIP<1,1,I> < DIFF THEN
                     NEW.WIP<1,1,I>=NEW.WIP<1,1,I>-DIFF
                     TOT.WIP=TOT.WIP+DIFF
                     DIFF=0
                  END
               NEXT I
         END CASE
         IF TOT.WIP <> CHK.WIP THEN
            DRV.STATUS<1,MLP>="WIP MISMATCH ":OCONV(TOT.WIP,"MD2")
            GOSUB RELEASE.INV.FILES 
            GOTO NEXT.MLP
         END
      END
      IF DRV.TTYPE="C" AND NEW.COST <> DRV.COST<1,MLP> THEN
         DRV.STATUS<1,MLP>="REV. COST MISMATCH ":OCONV(NEW.COST,"MD2")
         GOSUB RELEASE.INV.FILES 
         GOTO NEXT.MLP
      END
      ADD.MON=0; WIP.CNTR=0
      FOR I=1 TO WPTR
         INV.WIP<1,1,I>=INV.WIP<1,1,I>+0
*T26736 v
         BEGIN CASE
            CASE NEW.WIP<1,1,I> < 0
               BEGIN CASE
                  CASE INV.WIP<1,1,I> < NEW.WIP<1,1,I>
                     INV.WIP<1,1,I>=NEW.WIP<1,1,I>
                     ADD.MON=1; WIP.CNTR=3
                  CASE INV.WIP<1,1,I> <> 0
                     ADD.MON=1; WIP.CNTR=2
                  CASE NEW.WIP<1,1,I> <> 0
                     WIP.CNTR=2
               END CASE
            CASE 1
               BEGIN CASE
                  CASE INV.WIP<1,1,I> > NEW.WIP<1,1,I>
                     INV.WIP<1,1,I> = NEW.WIP<1,1,I>
                     ADD.MON = 1; WIP.CNTR = 3
                  CASE INV.WIP<1,1,I> <> 0
                     ADD.MON = 1; WIP.CNTR = 2
                  CASE NEW.WIP<1,1,I> <> 0
                     WIP.CNTR = 2
               END CASE
         END CASE
*T26736 ^
      NEXT I
      IF ADD.MON THEN
         IF JMT.MON<1,WCNT> > JRV.MON THEN
            NEW.MON=JMT.MON<1,WCNT>
         END ELSE
            NEW.MON=JRV.MON
         END
         WCNT=WCNT+1
         JMT.MON<1,WCNT>=NEW.MON
         JMT.WIP<1,WCNT>=INV.WIP
         CCW.ID=CONO : JMT.DIV : DEPT : "!" : CCTR : NEW.MON
         MATREADU CCW.REC FROM COST.CNTR.WIP, CCW.ID ELSE MAT CCW.REC=""
         FOR I=1 TO WPTR
            CCW.MT.O<1,I>=CCW.MT.O<1,I>-INV.WIP<1,1,I>
         NEXT I
      END ELSE
         IF JMT.MON<1,1> > JRV.MON THEN
            NEW.MON=JMT.MON<1,1>
         END ELSE
            NEW.MON=JRV.MON
         END
      END
      IF WIP.CNTR THEN
         FOR I=1 TO WPTR
            NEW.WIP<1,2,I>=0-NEW.WIP<1,1,I>
         NEXT I
         NEW.MON<1,2>=NEW.MON<1,1>
      END
      LOCATE IWLOC IN IWH.LOC<1>,1 SETTING LLOC ELSE
*T28675 v
*        IF WIP.QTY > 0 THEN
*           DRV.STATUS<1,MLP>="CANNOT LOCATE LOCATION-" : IWLOC
*           GOSUB RELEASE.INV.FILES 
*           GOTO NEXT.MLP
*        END
*T28675 ^
         IWH.LOC<1,LLOC>=IWLOC
      END
      IWLO.ID=IWH.ID : "!" : IWLOC
      IF RECORDLOCKED(INV.WHSE.LOC.TEMP,IWLO.ID)=0 THEN
         DELETE INV.WHSE.LOC.TEMP,IWLO.ID
      END
      MATREADU IWLO.REC FROM INV.WHSE.LOC.TEMP,IWLO.ID ELSE
         MATREADU IWLO.REC FROM INV.WHSE.LOC , IWLO.ID ELSE
*T28675 v
*           IF WIP.QTY > 0 THEN
*              RELEASE INV.WHSE.LOC, IWLO.ID
*              DRV.STATUS<1,MLP>="CANNOT LOCATE REVERSE LOCATION IN INV.WHSE"
*              GOSUB RELEASE.INV.FILES 
*              GOTO NEXT.MLP
*           END
*T28675 ^
            MAT IWLO.REC=""
         END
      END
      IF DRV.STATUS<1,MLP>#'' THEN 
         GOSUB RELEASE.INV.FILES 
         GOTO NEXT.MLP
      END
      IF JMT.DIAM > 0 THEN
         NEW.DIAM=INT(((((JMT.DIAM*100)-JMT.QTY)/(JMT.QTY/1000))*(NEW.QTY/1000)+NEW.QTY)/100+.5)
         ACT.DIAM=INT(((((JMT.DIAM*100)-JMT.QTY)/(JMT.QTY/1000))*(ACT.QTY/1000)+ACT.QTY)/100+.5)
      END ELSE
         NEW.DIAM=0
         ACT.DIAM=0
      END
      NEW.STK.QTY=CALC.STK.QTY(NEW.QTY,MAT INV.CNV.REC,'','')
*  ACT.STK.QTY=CALC.STK.QTY(ACT.QTY,MAT INV.CNV.REC,'','')
      JMT.RC.COST=JMT.RC.COST+NEW.COST
      JMT.RC.QTY=JMT.RC.QTY+NEW.QTY
      MAT HOLD.JMT.REC = MAT JMT.REC
      HOLD.JMT.ID=MT.ID:SEQ
      IF CATG.TRK.LVL='G' THEN
         HOLD.JMT.SERIAL.QTY=JMT.SERIAL.QTY
      END
      JMT.AUDIT.NO=''
      JMT.RC.COST=0
      JMT.RC.QTY=0
      JMT.QTY=0-NEW.QTY
      JMT.SHEET=0-NEW.STK.QTY
      JMT.DIAM=0-NEW.DIAM
      JMT.LOC =IWLOC
      JMT.DCOST=0-ACT.COST
      IF ACT.COST <> NEW.DCOST THEN
         JMT.DCOST<1,2>=ACT.COST-NEW.DCOST
      END
      IF NEW.DCOST <> NEW.COST THEN
         JMT.DCOST<1,2>=JMT.DCOST<1,2>+0
         JMT.DCOST<1,3>=NEW.DCOST-NEW.COST
      END
      JMT.COST=0-NEW.COST
      JMT.WIP=NEW.WIP
      JMT.MON=NEW.MON
      JMT.SALE=0-NEW.SALE
      JMT.DATE=DRV.DATE
      JMT.PTR=NEW.PTR
      JMT.RC.TRAN=DRV.TRAN<1,MLP>
      JMT.RC.JOB=DRV.JOB
      JMT.RC.DESC=DRV.REASON<1,MLP>
      IF DRV.TTYPE # "R" THEN
         JOB.RESV.QTY<1,MLOC>=JOB.RESV.QTY<1,MLOC>+RSV.QTY
         JOB.RESV.AMT<1,MLOC>=JOB.RESV.AMT<1,MLOC>+RSV.COST
         IJS.JOB.QTY=IJS.JOB.QTY+RSV.QTY
         IWH.RESV=IWH.RESV+RSV.QTY
      END
      JOB.USED.QTY<1,MLOC>=JOB.USED.QTY<1,MLOC>-NEW.QTY
      JOB.USED.AMT<1,MLOC>=JOB.USED.AMT<1,MLOC>-NEW.DCOST
      IJS.JOB.USED=IJS.JOB.USED-ORSV.QTY
      IWH.ON.HAND=IWH.ON.HAND+ACT.QTY
      IWH.INPRCS=IWH.INPRCS-WIP.QTY
      IWH.INPRCS.AMT=IWH.INPRCS.AMT-WIP.COST
      IWLO.LOC.ON.HAND=IWLO.LOC.ON.HAND+ACT.QTY
      IF IWLOC=JWLOC THEN
         IWLO.LOC.INPRCS=IWLO.LOC.INPRCS-WIP.QTY
         IF IWLO.LOC.INPRCS < 0 THEN IWLO.LOC.INPRCS = 0 ;*T28675
      END
      MATWRITEU IWLO.REC ON INV.WHSE.LOC.TEMP,IWLO.ID 
      IID.IWLO<1,-1>=IWLO.ID
      IH.CNT=DCOUNT(IH.DATE,VM)
      IDATE=DATE()
      LOCATE IDATE IN IH.DATE<1> SETTING PP ELSE NULL
      BEGIN CASE
         CASE PP=IH.CNT
            IH.AMOUNT<1,PP>=IH.AMOUNT<1,PP>+ACT.QTY
         CASE PP > IH.CNT
            IH.AMOUNT<1,PP>=IH.AMOUNT<1,PP>+ACT.QTY
            IH.DATE<1,PP>=IDATE
         CASE 1
            IH.AMOUNT<1,PP>=IH.AMOUNT<1,PP>+ACT.QTY
      END CASE
      IF WIP.CNTR THEN
         JOB.MT.WIP<1,1>=JOB.MT.WIP<1,1>+WIP.CNTR
         JOB.WIP<1,1>=JOB.WIP<1,1>+WIP.CNTR
         FOR I=1 TO WPTR
            JOB.MT.WIP<1,2,I>=JOB.MT.WIP<1,2,I>+INV.WIP<1,1,I>
            JOB.MT.WIP<1,3,I>=JOB.MT.WIP<1,3,I>-INV.WIP<1,1,I>+JMT.WIP<1,1,I>
            JOB.WIP<1,2,I>=JOB.WIP<1,2,I>+INV.WIP<1,1,I>
            JOB.WIP<1,3,I>=JOB.WIP<1,3,I>-INV.WIP<1,1,I>+JMT.WIP<1,1,I>
         NEXT I
      END
      IF JMT.MON<1,1> < JOB.MT.WIP<1,4> OR JOB.MT.WIP<1,4>="" THEN
         JOB.MT.WIP<1,4>=JMT.MON<1,1>
         IF JMT.MON<1,1> < JOB.WIP<1,4> OR JOB.WIP<1,4>="" THEN
            JOB.WIP<1,4>=JMT.MON<1,1>
         END
      END
      IF JMT.MON<1,1> > JOB.MT.WIP<1,5> THEN
         JOB.MT.WIP<1,5>=JMT.MON<1,1>
         IF JMT.MON<1,1> > JOB.WIP<1,5> THEN
            JOB.WIP<1,5>=JMT.MON<1,1>
         END
      END
      JOB.MT.DATE<1,DFND,1>=JMT.DATE
      JOB.MT.QTY<1,DFND>=JOB.MT.QTY<1,DFND>+JMT.QTY
      JOB.MT.DCOST<1,DFND,1>=JOB.MT.DCOST<1,DFND,1>+JMT.DCOST<1,1>
      IF JMT.DCOST<1,2>+0 <> 0 THEN
         JOB.MT.DCOST<1,DFND,2>=JOB.MT.DCOST<1,DFND,2>+JMT.DCOST<1,2>
      END
      JOB.MT.COST<1,DFND>=JOB.MT.COST<1,DFND>+JMT.COST
      JOB.MT.SALE<1,DFND>=JOB.MT.SALE<1,DFND>+JMT.SALE
      PRDS.ID=CONO:"*":JMT.DIV:"*":DEPT:"*":CCTR:"*":NEW.MON<1,1>:"*1*A"
      MATREADU PRDS.REC FROM PROD.STATS, PRDS.ID ELSE MAT PRDS.REC=""
      BEGIN CASE
         CASE JMT.TYPE="N"
            PTR=2
            PRDS.MAT.NC.DCOST=PRDS.MAT.NC.DCOST+JMT.DCOST<1,1>+JMT.DCOST<1,2>
            PRDS.MAT.NC.COST=PRDS.MAT.NC.COST+JMT.COST
         CASE JMT.TYPE="C"
            PTR=3
            PRDS.MAT.DCOST=PRDS.MAT.DCOST+JMT.DCOST<1,1>+JMT.DCOST<1,2>
            PRDS.MAT.COST=PRDS.MAT.COST+JMT.COST
         CASE JMT.TYPE="S"
            PTR=4
            PRDS.MAT.SP.DCOST=PRDS.MAT.SP.DCOST+JMT.DCOST<1,1>+JMT.DCOST<1,2>
            PRDS.MAT.SP.COST=PRDS.MAT.SP.COST+JMT.COST
            IF JMT.SPOIL.CODE # "" THEN
               SSR.ID=CONO:JMT.DIV:DEPT:"!":CCTR:NEW.MON<1,1>:JMT.SPOIL.CODE
               MATREADU SSR.REC FROM SPOIL.STATS,SSR.ID ELSE MAT SSR.REC=""
               FOR I=1 TO 3
                  IF JMT.DCOST<1,I> # "" THEN
                     SSR.MT<1,I>=SSR.MT<1,I>+JMT.DCOST<1,I>
                  END
               NEXT I
            END
         CASE 1
            PTR=1
            PRDS.MAT.DCOST=PRDS.MAT.DCOST+JMT.DCOST<1,1>+JMT.DCOST<1,2>
            PRDS.MAT.COST=PRDS.MAT.COST+JMT.COST
      END CASE
      JOB.MT.TCOST<1,DFND,PTR>=JOB.MT.TCOST<1,DFND,PTR>+JMT.COST
*T21045 JOB.TOT.DCOST=JOB.TOT.DCOST+JMT.DCOST<1,1>+JMT.DCOST<1,2>
      JOB.TOT.DCOST=JOB.TOT.DCOST+JMT.DCOST<1,1>+JMT.DCOST<1,3>
      JOB.TOT.COST=JOB.TOT.COST+JMT.COST
      JOB.TOT.SALE=JOB.TOT.SALE+JMT.SALE
      READU JMT.SEQ FROM CONTROL, CONO : "DAILY.MATL" ELSE JMT.SEQ=10001
      NEXT.SEQ=JMT.SEQ+1
      WRITE NEXT.SEQ ON CONTROL, CONO : "DAILY.MATL"
      JOB.MT.SEQ<1,DFND>=JOB.MT.SEQ<1,DFND>+1
      JMT.GLA.DATE=""
      IF ACT.QTY > 0 THEN
         IF IWLOC # JWLOC AND WIP.QTY > 0 THEN
*T27344 v
*           IWLO.ID=IWH.ID:"!":JWLOC
*           IF RECORDLOCKED(INV.WHSE.LOC.TEMP,IWLO.ID)=0 THEN
*              DELETE INV.WHSE.LOC.TEMP,IWLO.ID
*           END
*           IF RECORDLOCKED(INV.WHSE.LOC.TEMP,IWLO.ID) THEN
*              DELETE INV.WHSE.LOC.TEMP,IWLO.ID
*           END
*           MATREADU IWLO.REC FROM INV.WHSE.LOC.TEMP,IWLO.ID ELSE
*              MATREADU IWLO.REC FROM INV.WHSE.LOC,IWLO.ID THEN
*                 IWLO.LOC.INPRCS=IWLO.LOC.INPRCS-WIP.QTY
*                 MATWRITEU IWLO.REC ON INV.WHSE.LOC.TEMP,IWLO.ID
*                 LOCATE IWLO.ID IN IID.IWLO<1> SETTING JUNK ELSE
*                    IID.IWLO<1,-1>=IWLO.ID
*                 END
*              END ELSE
*                 RELEASE INV.WHSE.LOC, IWH.ID:"!":JWLOC
*              END
*           END
*T27344 ^
         END
         GOSUB PROCESS.INVENTORY
      END ELSE
         RELEASE INV.WHSE, IWH.ID
         RELEASE INV.WHSE.LOC, IWLO.ID
      END
      IF NOT(ERR) THEN
         GOSUB WRITE.RECORDS
         PPTR=COUNT(JRV.TRAN,VM)+(JRV.TRAN # "")+1
         JRV.TRAN<1,PPTR>=DRV.TRAN<1,MLP>
         JRV.TTRAN<1,PPTR>=JMT.SEQ
         JRV.REASON<1,PPTR>=DRV.REASON<1,MLP>
         JRV.COST<1,PPTR>=DRV.COST<1,MLP>
         JRV.SEQ<1,PPTR>=SEQ
         JRV.TSEQ<1,PPTR>=JOB.MT.SEQ<1,DFND>
         IF JMT.SHEET < 0 THEN JRV.QTY<1,PPTR>=0-JMT.SHEET
         IF DRV.TTYPE # "C" THEN JRV.CONV<1,PPTR>=DRV.CONV<1,MLP>
         DRV.DEPT=DELETE(DRV.DEPT,1,MLP,0)
         DRV.CCTR=DELETE(DRV.CCTR,1,MLP,0)
         DRV.OPER=DELETE(DRV.OPER,1,MLP,0)
         DRV.EMP=DELETE(DRV.EMP,1,MLP,0)
         DRV.TRAN=DELETE(DRV.TRAN,1,MLP,0)
         DRV.REASON=DELETE(DRV.REASON,1,MLP,0)
         DRV.COST=DELETE(DRV.COST,1,MLP,0)
         DRV.STATUS=DELETE(DRV.STATUS,1,MLP,0)
         DRV.CONV=DELETE(DRV.CONV,1,MLP,0)
         DRV.QTY=DELETE(DRV.QTY,1,MLP,0)
         DRV.SEQ=DELETE(DRV.SEQ,1,MLP,0)
      END ELSE
         ACTION=9 ;* delete TEMP records
         CALL JCS.IWH.SUB('','','','',ACTION,'')
      END
NEXT.MLP: 
   NEXT MLP
*
   GOTO 99999
*
*************************************************************************
**** S U B R O U T I N E S **********************************************
*************************************************************************
*
******************
PROCESS.INVENTORY: 
******************
*
   ERR=0
   CHECK.QTY=''
   DEPL.RECP='' ; DEPL.QTY='' ; DEPL.COST=''
   MAT HOLD.IWH.REC=MAT IWH.REC
   MAT IWH.REC=MAT ORG.IWH.REC
   ORG.IWH.QTY.FI=IWH.QTY.FI
   ORG.IWH.ORG.FI=IWH.ORG.FI
   ORG.IWH.RSV.FI=IWH.RSV.FI
   MAT IWH.REC=MAT HOLD.IWH.REC
   ;* return qty back to receipts
   ;* from which it was used
   RCNT=DCOUNT(IWH.QTY.FI,VM)
   FOR RPOS=1 TO RCNT UNTIL (ERR)
      IWH.FI.CHANGED=0                                               
      BEGIN CASE                                                     
         CASE ORG.IWH.QTY.FI<1,RPOS> # IWH.QTY.FI<1,RPOS>    
            IWH.FI.CHANGED=1                                           
         CASE ORG.IWH.RSV.FI<1,RPOS> # IWH.RSV.FI<1,RPOS>    
            IWH.FI.CHANGED=1                                           
      END CASE                                                       
      IF (IWH.FI.CHANGED) THEN                                       
         RECP.NO=IWH.RECP.NO<1,RPOS>
         QTY.DIFF=IWH.QTY.FI<1,RPOS>-ORG.IWH.QTY.FI<1,RPOS>
         DEPL.RECP<1,-1>=IWH.RECP.NO<1,RPOS>
         DEPL.QTY<1,-1>=QTY.DIFF
         ;* if there was a receipt cost adj.
         ;* after material was posted to the job
         ;* and wip reversed, then use unit cost
         ;* that was used on the job.
         LOCATE RECP.NO IN CADJ<1> SETTING RIDX THEN
            DEPL.COST<1,-1>=CADJ<3,RIDX>
         END ELSE
            RIDX=0
            DEPL.COST<1,-1>=IWH.COST.FI<1,RPOS>
         END
         INVR.ID=CONO:RECP.NO                                          
         IF RECORDLOCKED(INV_RECEIPTS_TEMP,INVR.ID)=0 THEN
*T27961 DELETE INV_RECEIPTS,INVR.ID
            DELETE INV_RECEIPTS_TEMP,INVR.ID
         END
         MATREADU INVR.REC FROM INV_RECEIPTS_TEMP,INVR.ID ELSE         
*T27961 v Merge read error from below.
*       MATREADU INVR.REC FROM INV_RECEIPTS,INVR.ID THEN            
            MATREADU INVR.REC FROM INV_RECEIPTS,INVR.ID ELSE            
               DRV.STATUS<1,MLP>='Cannot locate INV_RECEIPTS record ':INVR.ID
               ERR=1
               EXIT
            END
            INVR.DEPL.QTY += QTY.DIFF 
            ;*
            ;* build INV_RECP_WHSE_TEMP 
            ;*
            IRW.ID=CONO:RECP.NO:"!":WHSE 
            IF RECORDLOCKED(INV_RECP_WHSE_TEMP,IRW.ID)=0 THEN
               DELETE INV_RECP_WHSE_TEMP,IRW.ID
            END
*         MATREADU IRW.REC FROM INV_RECP_WHSE,IRW.ID THEN
            MATREADU IRW.REC FROM INV_RECP_WHSE_TEMP,IRW.ID ELSE
               MATREADU IRW.REC FROM INV_RECP_WHSE,IRW.ID ELSE
                  DRV.STATUS<1,MLP>='Cannot locate INV_RECP_WHSE record':IRW.ID
                  ERR=1
                  EXIT
               END
            END
            IRW.ORG.QTY = IWH.ORG.FI<1,RPOS>
            IRW.CUR.QTY=IWH.QTY.FI<1,RPOS>
            IRW.RSVB.QTY =IWH.RSV.FI<1,RPOS>
            IF IRW.CUR.QTY>IRW.ORG.QTY THEN IRW.ORG.QTY=IRW.CUR.QTY
            IF DRV.TTYPE='Q' THEN 
               GOSUB RESERVE.INVENTORY
            END
            LOCATE IRW.ID IN IID.IRW<1> SETTING JUNK ELSE
               IID.IRW<1,-1>=IRW.ID
            END
            MATWRITEU IRW.REC ON INV_RECP_WHSE_TEMP,IRW.ID
* v merge next 4 lines from 912
            MATWRITEU INVR.REC ON INV_RECEIPTS_TEMP,INVR.ID
            LOCATE INVR.ID IN IID.INVR<1> SETTING JUNK ELSE
               IID.INVR<1,-1>=INVR.ID
            END
            ;* now create accounting transaction for the
            ;* receipts on which receipt cost adjustment
            ;* occured before material reversal
            ;* and after wip was reversed
            ;* off of a job
            IF RIDX THEN
               ;* set INAH rec
               MAT INAH.REC=''
               INAH.SEQ=GET.INAH.SEQ(CONO,CONTROL,INV_AUDIT_HIST)
               INAH.TYPE='A'
               INAH.SRC='IC'
               INAH.PROD=PROD
               INAH.WHSE=WHSE
               INAH.DATE=DRV.DATE
               INAH.PERIOD=POSTING.MON                   
               INAH.RECP.NO=CADJ<1,RIDX>
               INAH.QTY=0
               INAH.UNIT.COST=CADJ<4,RIDX>
               OLD.COST=CALC.EXT.COST(CADJ<2,RIDX>,CADJ<3,RIDX>,INV.COST.WT,.5)
               NEW.COST=CALC.EXT.COST(CADJ<2,RIDX>,CADJ<4,RIDX>,INV.COST.WT,.5)
               INAH.EXT.COST=NEW.COST-OLD.COST
               INAH.ACCT=CATG.INV
               INAH.DV.DP.CC=WHS.DIV:GEN.DEPT:GEN.CCTR
               INAH.SYS.DATE=DATE()
               INAH.SYS.TIME=TIME()
               INAH.OPER.ID=@LOGNAME
               IF INVR.PO.ACCR='Y' THEN
                  INAH.ACCR.ACCT=CATG.ACCRU.LIAB                             
               END ELSE
                  INAH.ADJ.ACCT=CATG.ADJ
               END
               INAH.ID=CONO:INAH.SEQ
               LOCATE INAH.ID IN IID.INAH<1> SETTING JUNK ELSE
                  IID.INAH<1,-1>=INAH.ID
               END
               MATWRITEU INAH.REC ON INV_AUDIT_HIST_TEMP,INAH.ID
               ;* save following for later
               CADJ<5,RIDX>=INAH.EXT.COST
               CADJ<6,RIDX>=INAH.ID
            END
*         END ELSE
*           DRV.STATUS<1,MLP>='Cannot locate INV_RECP_WHSE record':IRW.ID
*           ERR=1
*         END
*       END ELSE
*         DRV.STATUS<1,MLP>='Cannot locate INV_RECEIPTS record ':INVR.ID
*         ERR=1
*       END
*T27961 ^
         END 
      END
   NEXT RPOS
   ;* now that we have updated receipts 
   ;* from which usage occured for this job
   ;* update the serial/tracking records that were used
   ;* on the job.
   IF NOT(ERR) THEN
      ;* only non-serial items would have multiple serial
      ;* numbers in JMT.SERIAL. SEE JCS.IWH.SUB
      ;* and only for transaction that occurred after
      ;* conversion to rev12.
      IF JMT.SERIAL<1>#'' THEN
         TOT.QTY=SUM(DEPL.QTY<1>)
         SCNT=DCOUNT(JMT.SERIAL<1>,VM)
         BAIL.OUT=0
         FOR SC=SCNT TO 1 STEP -1 UNTIL (BAIL.OUT)
            SERIAL=JMT.SERIAL<1,SC>
            ISTK.ID=CONO:SERIAL
            IF CATG.TRK.LVL='G' THEN
               CHECK.QTY=JMT.SERIAL.QTY<1,SC>
            END ELSE
               CHECK.QTY=JMT.QTY
            END
            CHECK.QTY=ABS(CHECK.QTY)
            IF CHECK.QTY>=TOT.QTY THEN
               SERIAL.QTY=TOT.QTY
               TOT.QTY=0
            END ELSE
               SERIAL.QTY=CHECK.QTY
               TOT.QTY-=SERIAL.QTY
            END
            IF CATG.TRK.LVL='G' THEN
               HOLD.JMT.SERIAL.QTY<1,SC>+=SERIAL.QTY
               JMT.SERIAL.QTY<1,SC>+=SERIAL.QTY
            END
*T27567 v
            IF SERIAL.QTY+0 # 0 THEN
               IF TOT.QTY=0 THEN BAIL.OUT=1
               INAH.SEQ=GET.INAH.SEQ(CONO,CONTROL,INV_AUDIT_HIST)
               INAH.ID=CONO:INAH.SEQ
*         JMT.AUDIT.NO<1,-1>=INAH.SEQ
               JMT.AUDIT.NO<1,SC>=INAH.SEQ
* T27365 v
*         IF NOT(SERIAL.FOUND<1,SC>) THEN
               ADD.NEW.SERIAL = 0
               IF SERIAL.FOUND<1,SC> = 'D' OR SERIAL.FOUND<1,SC> = '' OR SERIAL.FOUND = 'N' THEN
                  GOSUB ACTIVATE.SERIAL
               END
               GOSUB ADJUST.SERIAL
               IF CATG.TRK.LVL='S' AND CATG.RSV.SERIAL='Y' AND DRV.TTYPE='Q' THEN
                  ;* reserve the serial that we are reversing
                  ;* no matter even if the depleting method is FIFO.
                  GOSUB UPD.ISTK.RESERVE
               END
               IF NOT(ERR) THEN
                  GOSUB SET.INAH
* T27365 v
*           IF NOT(SERIAL.FOUND<1,SC>) AND (ADD.NEW.SERIAL) THEN
                  IF (ADD.NEW.SERIAL) THEN
* T27365 ^
                     GOSUB UPDATE.UNIT.COST
                  END
                  LOCATE INAH.ID IN IID.INAH<1> SETTING JUNK ELSE
                     IID.INAH<1,-1>=INAH.ID
                  END
                  MATWRITEU INAH.REC ON INV_AUDIT_HIST_TEMP,INAH.ID
                  ;* update INVR.REC to which serial belongs with
                  ;* audit seq #
                  INVR.ID=CONO:ISTK.RECP
                  IF RECORDLOCKED(INV_RECEIPTS_TEMP,INVR.ID)=0 THEN
                     DELETE INV_RECEIPTS_TEMP,INVR.ID
                  END
                  MATREADU INVR.REC FROM INV_RECEIPTS_TEMP,INVR.ID ELSE
*T27961 v
*                   MATREADU INVR.REC FROM INV_RECEIPTS,INVR.ID THEN
                     MATREADU INVR.REC FROM INV_RECEIPTS,INVR.ID ELSE
                        DRV.STATUS<1,MLP>='Cannot locate INV_RECEIPTS record ':INVR.ID
                        ERR=1
                        EXIT
                     END
                  END
                  INVR.AUDIT.NO<1,-1>=INAH.SEQ
                  MATWRITEU INVR.REC ON INV_RECEIPTS_TEMP,INVR.ID
                  LOCATE INVR.ID IN IID.INVR<1> SETTING JUNK ELSE
                     IID.INVR<1,-1>=INVR.ID
                  END
*                   END ELSE
*                      DRV.STATUS<1,MLP>='Cannot locate INV_RECEIPTS record ':INVR.ID
*                      ERR=1
*                   END
*                END
*T27961 ^
                  ;* add serial to IWLO
                  ;* normally it should be there
                  ;* but sometimes it is not so...
                  ;* also serial cannot exist in two locations
                  IF ISTK.LOC=IWLOC THEN
*T27484 v
*                    LOCATE SERIAL IN IWLO.SERIAL<1> SETTING JUNK ELSE 
*                       IWLO.SERIAL<1,-1>=SERIAL                        
*T28167 v
*                    LOCATE SERIAL IN IWLO.SERIAL<1>,1 BY 'AR' SETTING JUNK ELSE 
*                       INS SERIAL BEFORE IWLO.SERIAL<1,JUNK>
*                       MATWRITEU IWLO.REC ON INV.WHSE.LOC.TEMP,IWLO.ID 
*                       LOCATE IWLO.ID IN IID.IWLO<1> SETTING JUNK ELSE 
*                          IID.IWLO<1,-1>=IWLO.ID                        
*                       END                                             
*                    END                                               
                     GOSUB CHECK.IWLO.SERIAL
*T28167 ^
                  END
               END
            END ELSE
               IF SC = 1 AND TOT.QTY # 0 THEN
                  DRV.STATUS<1,MLP> = 'Insufficient serial quantity in JOB.MATL record ':HOLD.JMT.ID
                  ERR = 1 ; BAIL.OUT = 1 ; RETURN
               END
            END
*T27567 ^
         NEXT SC
      END ELSE
         ;* this is for transaction that occured before
         ;* conversion on the generally tracked items.
         ;* location was the lowest level of tracking
         ;* and in rev12 we have SERIAL even for 
         ;* generally tracked items.
         IF CATG.TRK.LVL='G' THEN
            BAIL.OUT=0
            ;* get serial numbers to reverse qty to
            ;* from !CNV location
            ;* this is created in data conversion process for 
            ;* fifo buckets that have 0 current qty since
            ;* we don't know to what location qty belonged to
            SLIST='' ; SLIST2='' ; SCNV.SERIAL=''
            SELKEY=IWH.ID:"!CNV"
            IDX="ISTK_PWL_IDX"
            SELECTINDEX IDX,SELKEY FROM INV_SERIAL_DELETED TO SLIST
            READSELECT SLIST.ARR FROM SLIST ELSE NULL
            SELECTINDEX IDX,SELKEY FROM INV_SERIAL TO SLIST2
            READSELECT SLIST.ARR2 FROM SLIST2 ELSE NULL
            SCNV.SERIAL=SLIST.ARR:AM:SLIST.ARR2
            CONVERT AM TO VM IN SCNV.SERIAL
            SC=0
            SCNT=DCOUNT(SCNV.SERIAL,VM)
            CHECK.QTY=ABS(JMT.QTY)
            ;* if there are no serials
            ;* then new has to be created.
            FOR SC=SCNT TO 1 STEP -1 UNTIL (BAIL.OUT)
               ISTK.ID=SCNV.SERIAL<1,SC>
               SERIAL=ISTK.ID[4,99]
               IF SERIAL='' THEN CONTINUE
               ISTK.ID=CONO:SERIAL
               S.OK=1
               IF RECORDLOCKED(INV_SERIAL_TEMP,ISTK.ID)=0 THEN
                  DELETE INV_SERIAL_TEMP,ISTK.ID
               END
               MATREADU ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID ELSE
                  MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID ELSE
                     MATREADU ISTK.REC FROM INV_SERIAL_DELETED,ISTK.ID THEN
                        ;*even though this transacion might not
                        ;* go through this step is neccesary
                        MATWRITEU ISTK.REC ON INV_SERIAL,ISTK.ID
                        DELETE INV_SERIAL_DELETED,ISTK.ID
                        RELEASE INV_SERIAL_DELETED,ISTK.ID
                     END ELSE
                        S.OK=0
                     END
                  END
               END
               IF ISTK.ORG.QTY<=0 THEN 
                  DELETE INV_SERIAL,ISTK.ID
                  S.OK=0
               END
               IF S.OK THEN
                  IF ISTK.RECP.PERIOD<=JPERIOD  AND ISTK.PLACE='C' THEN
                     SERIAL.QTY=ISTK.ORG.QTY-ISTK.CUR.QTY
                     IF SERIAL.QTY>= CHECK.QTY THEN
                        SERIAL.QTY=CHECK.QTY
                        CHECK.QTY=0
                     END ELSE
                        CHECK.QTY-=SERIAL.QTY
                     END
                     IF CHECK.QTY=0 THEN BAIL.OUT=1
                     INAH.SEQ=GET.INAH.SEQ(CONO,CONTROL,INV_AUDIT_HIST)
                     INAH.ID=CONO:INAH.SEQ
*             JMT.AUDIT.NO<1,-1>=INAH.SEQ 
                     JMT.AUDIT.NO<1,SC>=INAH.SEQ 
                     MAT HOLD.ISTK.REC=MAT ISTK.REC
                     GOSUB ADJUST.CNV.SERIAL
                     ;* now create serial to reverse to
                     ;* from !CNV serial
                     SERIAL="R":ISTK.RECP:"!":IWHSE:"!":IWLOC
                     ISTK.ID=CONO:SERIAL
                     ;* lock new serial before saving it
                     MATREADU ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID ELSE NULL
                     MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID ELSE  NULL
                     MAT ISTK.REC=MAT HOLD.ISTK.REC
                     ISTK.CUR.QTY=0
                     ISTK.ORG.QTY=0
                     ISTK.RSVB.QTY=0
                     ISTK.LOC=IWLOC
                     ISTK.AUDIT.NO=''
                     MATWRITEU ISTK.REC ON INV_SERIAL_TEMP,ISTK.ID
                     LOCATE ISTK.ID IN IID.ISTK<1> SETTING JUNK ELSE
                        IID.ISTK<1,-1>=ISTK.ID
                     END
                     GOSUB ADJUST.SERIAL
                     ;* add serial to IWLO
                     IF ISTK.LOC=IWLOC THEN
*T27484 v
*                       LOCATE SERIAL IN IWLO.SERIAL<1> SETTING JUNK ELSE 
*                          IWLO.SERIAL<1,-1>=SERIAL                        
*T28167 v
*                       LOCATE SERIAL IN IWLO.SERIAL<1>,1 BY 'AR' SETTING JUNK ELSE 
*                          INS SERIAL BEFORE IWLO.SERIAL<1,JUNK>
*                          MATWRITEU IWLO.REC ON INV.WHSE.LOC.TEMP,IWLO.ID 
*                          LOCATE IWLO.ID IN IID.IWLO<1> SETTING JUNK ELSE 
*                             IID.IWLO<1,-1>=IWLO.ID                        
*                          END                                             
*                       END
                        GOSUB CHECK.IWLO.SERIAL
*T28167 ^
                     END
                     ;* add serial to INV_RECEIPTS
                     INVR.ID=CONO:ISTK.RECP
                     IF RECORDLOCKED(INV_RECEIPTS_TEMP,INVR.ID)=0 THEN     
                        DELETE INV_RECEIPTS_TEMP,INVR.ID                         
                     END                                                   
                     MATREADU INVR.REC FROM INV_RECEIPTS_TEMP,INVR.ID ELSE 
                        MATREADU INVR.REC FROM INV_RECEIPTS,INVR.ID ELSE    
                           MAT INVR.REC=''
                        END
                     END
                     LOCATE ISTK.ID[4,99] IN INVR.SERIAL.NO<1> SETTING JUNK ELSE
                        INVR.SERIAL.NO<1,-1>=ISTK.ID[4,99]
*T27961 v              MATWRITEU INVR.REC ON INV_RECEIPTS,INVR.ID
                        MATWRITEU INVR.REC ON INV_RECEIPTS_TEMP,INVR.ID
                        LOCATE INVR.ID IN IID.INVR<1> SETTING JUNK ELSE
                           IID.INVR<1,-1>=INVR.ID
                        END
                     END
                     IF NOT(ERR) THEN
                        GOSUB SET.AUDIT.REFERENCE
                     END
                  END
               END
            NEXT SC
            IF CHECK.QTY>0 THEN
               SC=DCOUNT(SERIAL.FOUND<1>,VM)+1
               SERIAL='';SERIAL.FOUND<1,SC>=0                    
               SERIAL.QTY=CHECK.QTY
               INAH.SEQ=GET.INAH.SEQ(CONO,CONTROL,INV_AUDIT_HIST)
               INAH.ID=CONO:INAH.SEQ                             
               JMT.AUDIT.NO<1,-1>=INAH.SEQ                       
               GOSUB RECEIVE.NEW.SERIAL                          
               GOSUB ADJUST.SERIAL                               
               IF NOT(ERR) THEN                                  
                  GOSUB SET.AUDIT.REFERENCE                       
                  GOSUB UPDATE.UNIT.COST                          
               END                                               
            END
         END ELSE
            DRV.STATUS<1,MLP>='MISSING SERIAL NUMBER IN JOB.MATL FILE.'
            DRV.STATUS<1,MLP>:='CANNOT REVERSE'
         END
      END
   END
   RETURN
*
*********************
ADJUST.CNV.SERIAL: 
*********************
*
   ;* we are spliting serial in location CNV into two serials now
   ;* decrease qty on the serial !CNV for the qty that 
   ;* will be moved to serial in location from which usage occured.
   ISTK.ORG.QTY-=SERIAL.QTY
   IF ISTK.ORG.QTY >0 THEN
      ISTK.ORG.STK.QTY=CALC.STK.QTY(ISTK.ORG.QTY,MAT INV.CNV.REC,'','')
   END
   MATWRITEU ISTK.REC ON INV_SERIAL_TEMP,ISTK.ID
   LOCATE ISTK.ID IN IID.ISTK<1> SETTING JUNK ELSE   
      IID.ISTK<1,-1>=ISTK.ID
   END
   RETURN
*
******************
RESERVE.INVENTORY: 
******************
*
   RQTY=QTY.DIFF
   LOCATE DRV.JOB IN IRW.JOB<1> SETTING JPOS ELSE NULL 
   IRW.JOB<1,JPOS>=DRV.JOB                             
   IRW.JRSVD.QTY<1,JPOS>+=RQTY                    
   RETURN
*
********************
UPD.ISTK.RESERVE: 
********************
*
   LOCATE DRV.JOB IN ISTK.JOB<1> SETTING JPOS THEN
      ISTK.RSVB.QTY-=SERIAL.QTY
      ISTK.JRSVD.QTY<1,JPOS>+=SERIAL.QTY
   END ELSE
      ISTK.RSVB.QTY-=SERIAL.QTY
      ISTK.JOB<1,-1>=DRV.JOB    
      ISTK.JRSVD.QTY<1,-1>=RQTY
   END
   LOCATE ISTK.ID IN IID.ISTK<1> SETTING JUNK ELSE
      IID.ISTK<1,-1>=ISTK.ID
   END
   MATWRITEU ISTK.REC ON INV_SERIAL_TEMP,ISTK.ID
   RETURN
*
***************
WRITE.RECORDS: 
***************
*
   IF ACT.QTY>0 THEN
      SAVE.AVAIL=IWH.QTY.FI
      ACTION=3                           
      JOB.ID=CONO:DRV.JOB
      CALL JCS.IWH.SUB(IWH.ID,JOB.ID,PERIOD,TMP.ARR,ACTION,OPEN.FLAG) 
      MATWRITE IH.REC ON INV.HIST, IH.ID
      ;* this part will be executed only
      ;* if there were receipts with 
      ;* receipt cost adj. after material was posted
      ;* to a job and wip reversed.
      RCNT=DCOUNT(CADJ<1>,VM)
      FOR RIDX=1 TO RCNT
         INVR.ID=CONO:CADJ<1,RIDX>
         MATREAD INVR.REC FROM INV_RECEIPTS,INVR.ID THEN
            GOSUB UPD.ICA.REC
            INAH.ID=CADJ<6,RIDX>
            MATREAD INAH.REC FROM INV_AUDIT_HIST,INAH.ID THEN
               INAH.TRAN=ICA.SEQ
               MATWRITE INAH.REC ON INV_AUDIT_HIST,INAH.ID
               ;* put a reference to INV_AUDIT_TAG for EOD/EOM processing.
               ;* since cost adjustment is a transacion
               ;* that is happening on the ICS side
               WRITE '' ON INV_AUDIT_TAG,INAH.ID
            END
            IF INVR.PO.ACCR='Y' THEN
               GOSUB UPD.ACCRUE
            END
            IF CO.APS.R.INTRF>=2 THEN
               LOCATE CADJ<1,RIDX> IN IWH.RECP.NO<1> SETTING RPOS THEN
                  AVAIL=SAVE.AVAIL<1,RPOS>
                  OLD.UN.COST=CADJ<3,RIDX>
                  NEW.UN.COST=CADJ<4,RIDX>
                  DISP.ERR=0
*COPY>ICSBP>RECP.COST.ADJ.STATS    
               END
            END
         END
      NEXT RIDX
   END
   IF ADD.MON THEN 
      MATWRITE CCW.REC ON COST.CNTR.WIP,CCW.ID
   END
   IF JMT.TYPE='S' AND JMT.SPOIL.CODE#'' THEN
      MATWRITE SSR.REC ON SPOIL.STATS,SSR.ID
   END
   MATWRITE PRDS.REC ON PROD.STATS, PRDS.ID
   JMT.SERIAL.QTY=''
   MATWRITE JMT.REC ON JOB.MATL, MT.ID : JOB.MT.SEQ<1,DFND>
   MAT JMT.REC=MAT HOLD.JMT.REC
   IF CATG.TRK.LVL='G' THEN
      JMT.SERIAL.QTY=HOLD.JMT.SERIAL.QTY
   END
   MATWRITE JMT.REC ON JOB.MATL,HOLD.JMT.ID
   IF IJS.JOB.ALOC < 1 AND IJS.JOB.QTY < 1 AND IJS.JMT.SEQ="" AND IJS.REQ.QTY+0=0 THEN
      DELETE INV.JOB.STATS, IJS.ID
      ISTAT.JOB=DELETE(ISTAT.JOB,1,JLOC,0)
   END ELSE
      MATWRITE INV.JS.REC ON INV.JOB.STATS, IJS.ID
   END
   IF ISTAT.PO="" AND ISTAT.JOB="" THEN
      DELETE INV.STATS, IWH.ID
   END ELSE
      MATWRITE INV.STAT.REC ON INV.STATS, IWH.ID
   END
   RETURN
*
******************
ADJUST.SERIAL: 
******************
*
* T27365 v
   IF SERIAL.QTY = 0 THEN
      DRV.STATUS<1,MLP> = 'Reversing quantity is zero for serial/tracking record ':ISTK.ID
      ERR = 1 ; BAIL.OUT = 1 ; RETURN
   END
* T27365 ^
   S.OK=1
   IF RECORDLOCKED(INV_SERIAL_TEMP,ISTK.ID)=0 THEN
      DELETE INV_SERIAL_TEMP,ISTK.ID
   END
   MATREADU ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID ELSE 
      MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID ELSE    
         S.OK=0
      END
   END
   IF (S.OK) THEN
      SER.ORG.QTY=ISTK.CUR.QTY
      SER.ORG.DIAM=ISTK.CUR.DIAM
      SER.ORG.STK.QTY=ISTK.CUR.STK.QTY
      ISTK.CUR.QTY+=SERIAL.QTY
      ISTK.CUR.STK.QTY=CALC.STK.QTY(ISTK.CUR.QTY,MAT INV.CNV.REC,'','')
      ISTK.RSVB.QTY+=SERIAL.QTY
      IF CATG.TYPE='L' OR CATG.TYPE='LR' OR CATG.TYPE='PC' THEN
         DIAM=CALC.DIAM(ISTK.CUR.QTY,ISTK.CUR.STK.QTY,MAT INV.REC)
         ISTK.CUR.DIAM=DIAM
      END
      ;* this would be true if serial that did not
      ;* exist on the system was reversed partially
      ;* so that serial would be created with that orig.
      ;* qty. Later if we reverse some more we have to 
      ;* increase orig. qty
      IF ISTK.CUR.QTY>ISTK.ORG.QTY THEN
         ISTK.ORG.QTY=ISTK.CUR.QTY
         ISTK.ORG.STK.QTY=CALC.STK.QTY(ISTK.ORG.QTY,MAT INV.CNV.REC,'','')
         IF CATG.TYPE='L' OR CATG.TYPE='LR' OR CATG.TYPE='PC' THEN  
            DIAM=CALC.DIAM(ISTK.ORG.QTY,ISTK.ORG.STK.QTY,MAT INV.REC)
            ISTK.ORG.DIAM= DIAM                                      
         END                                                        
      END
      ISTK.AUDIT.NO<1,-1>=INAH.SEQ
      IID.ISTK<1,-1> = ISTK.ID                     
      MATWRITEU ISTK.REC ON INV_SERIAL_TEMP,ISTK.ID
      GOSUB ADJUST.IRW.ON.HAND
   END ELSE
      DRV.STATUS<1,MLP>='Cannot locate serial/tracking record ':ISTK.ID
      ERR=1 ; BAIL.OUT=1
   END
   RETURN
*
***************
SET.INAH: 
***************
*
   IF WHS.DIV='' THEN WHS.DIV=GEN.DIV        
   MAT INAH.REC=''
   INAH.PROD=PROD
   INAH.WHSE=WHSE
   INAH.TYPE='S'                             
   INAH.SRC='UR'                              
   INAH.DATE=DRV.DATE                        
   INAH.PERIOD=POSTING.MON                   
   INAH.JOB=DRV.JOB                          
   INAH.RECP.NO=ISTK.RECP                 
   INAH.LOC=IWLOC
   INAH.TRAN=DRV.JOB                         
   INAH.SERIAL=SERIAL
   INAH.LOC=ISTK.LOC
   INAH.QTY=SERIAL.QTY
   INAH.CUR.QTY=SER.ORG.QTY
   INAH.NEW.QTY=ISTK.CUR.QTY
   INAH.CUR.DIAM=SER.ORG.DIAM
   INAH.NEW.DIAM=ISTK.CUR.DIAM
   INAH.CUR.STK.QTY=SER.ORG.STK.QTY
   INAH.NEW.STK.QTY=ISTK.CUR.STK.QTY
   INAH.DV.DP.CC=WHS.DIV:GEN.DEPT:GEN.CCTR 
   INAH.OPER.ID=@LOGNAME
   INAH.SYS.DATE=DATE()
   INAH.SYS.TIME=TIME()
   DRCNT=DCOUNT(DEPL.RECP<1>,VM)
   TMP.QTY=SERIAL.QTY
   ;* even though we are returning stock back
   ;* we are update depletion att.
   ;* you can think of it as a negative usage.
   COST=0
   FOR DD=DRCNT TO 1 STEP -1 UNTIL TMP.QTY=0
      IF DEPL.QTY<1,DD> > 0 THEN
         IF DEPL.QTY<1,DD> >= TMP.QTY THEN
            INAH.DEPL.RECP<1,-1>=DEPL.RECP<1,DD>
            INAH.DEPL.QTY<1,-1>=TMP.QTY
            INAH.DEPL.COST<1,-1>=DEPL.COST<1,DD> ; * this is a unit cost !!!
            COST+=(DEPL.COST<1,DD>/10000)*((TMP.QTY/10)/(INV.COST.WT/100))
            DEPL.QTY<1,DD>-=TMP.QTY
            TMP.QTY=0
         END ELSE
            INAH.DEPL.RECP<1,-1>=DEPL.RECP<1,DD>
            INAH.DEPL.QTY<1,-1>=DEPL.QTY<1,DD>
            INAH.DEPL.COST<1,-1>=DEPL.COST<1,DD>;* this is a unit cost !!!
            COST+=(DEPL.COST<1,DD>/10000)*((DEPL.QTY<1,DD>/10)/(INV.COST.WT/100))
            TMP.QTY-=DEPL.QTY<1,DD>
            DEPL.QTY<1,DD>=0
         END
      END
   NEXT DD
   INAH.UNIT.COST=(ABS(COST)*1000*INV.COST.WT)/ABS(INAH.QTY)
   INAH.EXT.COST=INT((INAH.UNIT.COST/10000) * ((INAH.QTY/10)/ (INV.COST.WT/100)) + ROND) 
   INAH.UNIT.COST=INT(INAH.UNIT.COST+.5)
   RETURN                                    
*
**********************
ADJUST.IRW.ON.HAND: 
**********************
*
   IRW.ID=CONO:ISTK.RECP:"!":ISTK.WHSE                  
   IRW.OK=1
   IF RECORDLOCKED(INV_RECP_WHSE_TEMP,IRW.ID)=0 THEN
      DELETE INV_RECP_WHSE_TEMP,IRW.ID
   END
   MATREADU IRW.REC FROM INV_RECP_WHSE_TEMP,IRW.ID ELSE 
      MATREADU IRW.REC FROM INV_RECP_WHSE,IRW.ID ELSE    
         IRW.OK=0
      END
   END
   IF (IRW.OK) THEN
      IRW.ON.HAND += SERIAL.QTY                               
      LOCATE ISTK.ID[4,99] IN IRW.SERIAL.NO<1> SETTING JUNK ELSE
         IRW.SERIAL.NO<1,-1>=ISTK.ID[4,99]
      END
      MATWRITEU IRW.REC ON INV_RECP_WHSE_TEMP,IRW.ID        
      LOCATE IRW.ID IN IID.IRW<1> SETTING POS ELSE         
         IID.IRW<1,-1>=IRW.ID                               
      END                                                  
      MAT IRW.REC=''                                   
   END ELSE
      DRV.STATUS<1,MLP>='Cannot locate INV_RECP_WHSE record ':IRW.ID
      ERR=1
   END
   RETURN                                               
*
***************
SET.INV.UM.CNV: 
***************
*
*COPY>ICSBP>INV.UM.CNV
   RETURN
*
****************
CHECK.JMT: 
****************
*
* T27365 v There are now four states for the variable SERIAL.FOUND:
*          SERIAL.FOUND = null     ; no serial due to pre-conversion
*          SERIAL.FOUND<1,?> = 'T' ; serial found in INV_SERIAL_TEMP
*          SERIAL.FOUND<1,?> = 'S' ; serial found in INV_SERIAL
*          SERIAL.FOUND<1,?> = 'D' ; serial found in INV_SERIAL_DELETED
*          SERIAL.FOUND<1,?> = 'N' ; Has a serial, but not found.
   SERIAL.FOUND = ''
* T27365 ^
   MATREAD JMT.REC FROM JOB.MATL, MT.ID : SEQ THEN
      CUR.QTY=SUM(JMT.PTR<1,2>)
      CUR.CNT=DCOUNT(JMT.PTR<1,1>,SVM)
      CUR.PTR=JMT.PTR
      IWHSE=WHSE
      IWLOC=JMT.LOC
      JWLOC=JMT.LOC
      JPERIOD=JMT.MON<1,1>
      IF CUR.QTY <> JMT.QTY THEN
         DRV.STATUS<1,MLP>="WIP QTY MISMATCH "
         DRV.STATUS<1,MLP>:=OCONV(INT(CUR.QTY/10+.5),"MD2")
         DRV.STATUS<1,MLP>:=" JMT QTY ":OCONV(INT(JMT.QTY/10+.5),"MD2")
      END ELSE
         IF JMT.SERIAL#'' THEN
            SCNT=DCOUNT(JMT.SERIAL,VM)
            BAIL.OUT=0
            FOR SS=1 TO SCNT UNTIL BAIL.OUT
               SERIAL.FOUND<1,SS>=''
               ISTK.ID =CONO:JMT.SERIAL<1,SS>
               IF RECORDLOCKED(INV_SERIAL_TEMP,ISTK.ID)=0 THEN
                  DELETE INV_SERIAL_TEMP,ISTK.ID
               END
* T27365 v
               MATREADU ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID THEN
                  SERIAL.FOUND<1,SS> = 'T'
               END ELSE
                  MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID THEN
                     SERIAL.FOUND<1,SS> = 'S'
                  END ELSE
                     MATREADU ISTK.REC FROM INV_SERIAL_DELETED, ISTK.ID THEN
                        SERIAL.FOUND<1,SS> = 'D'
                     END ELSE
                        TMP.SER = FIELD(JMT.SERIAL<1,SS>,"!",1)
                        IF JMT.SERIAL<1,SS> # '' THEN SERIAL.FOUND<1,SS> = 'N'
                        IF LEN(TMP.SER) LT 5 THEN SERIAL.FOUND<1,SS> = ''
                     END
                  END
               END
               IF SERIAL.FOUND<1,SS> # '' AND SERIAL.FOUND<1,SS> # 'N' THEN
* T27365 ^
                  IF IWHSE # ISTK.WHSE THEN
                     DRV.STATUS<1,MLP>="STOCK MOVED AFTER USAGE"
                     BAIL.OUT=1
                  END
                  IWHSE=ISTK.WHSE
                  IWLOC=ISTK.LOC
               END
*         END         ;* T27365
            NEXT SS
         END
      END
   END ELSE
      DRV.STATUS<1,MLP>="CANNOT LOCATE JOB.MATL-":MT.ID:SEQ
   END
   RETURN
*
*****************
READ.INV.FILES: 
*****************
*
   MATREAD INV.REC FROM INVENTORY, CONO : PROD ELSE
      DRV.STATUS<1,MLP>="CANNOT LOCATE INVENTORY-" : PROD
      RETURN
   END
   MATREAD CATG.REC FROM CATEGORY, CONO : INV.LINE ELSE
      DRV.STATUS<1,MLP>="CANNOT LOCATE PRODUCT LINE-" : INV.LINE
      RETURN
   END
   GOSUB SET.INV.UM.CNV
   IWH.ID=CONO : PROD : "!" : IWHSE
   MATREADU IWH.REC FROM INV.WHSE, IWH.ID THEN
      MAT ORG.IWH.REC=MAT IWH.REC              
      ACTION=1 ; TMP.ARR=''                    
      INAH.PROD=PROD ; INAH.WHSE=WHSE
      PERIOD=''
      JOB.ID=''
      CALL JCS.IWH.SUB(IWH.ID,JOB.ID,PERIOD,TMP.ARR,ACTION,OPEN.FLAG)       
   END ELSE
      RELEASE INV.WHSE, IWH.ID
      DRV.STATUS<1,MLP>="CANNOT LOCATE INV.WHSE-" : IWH.ID
      RETURN
   END
   IH.ID=CONO : PROD
   MATREADU IH.REC FROM INV.HIST, IH.ID ELSE
      MAT IH.REC=''
   END
   MATREADU INV.STAT.REC FROM INV.STATS, IWH.ID ELSE
      MAT INV.STAT.REC=""
   END
   LOCATE DRV.JOB IN ISTAT.JOB<1>,1 SETTING JLOC ELSE
      ISTAT.JOB<1,JLOC>=DRV.JOB
   END
   IJS.ID=IWH.ID : "!" : DRV.JOB
   MATREADU INV.JS.REC FROM INV.JOB.STATS, IJS.ID ELSE
      MAT INV.JS.REC=""
   END
   RETURN
*
***************
ACTIVATE.SERIAL: 
***************
*
   ADD.NEW.SERIAL=0
* IF SERIAL.FOUND<1,SC>=0 THEN      ;* T27365
   IF RECORDLOCKED(INV_SERIAL_TEMP,ISTK.ID)=0 THEN
      DELETE INV_SERIAL_TEMP,ISTK.ID
   END
   MATREADU ISTK.REC FROM INV_SERIAL_DELETED,ISTK.ID THEN
      IF ISTK.PROD=PROD THEN
         ERR.MSG='' ; ERR.FLG=0
         ALOC=IWLOC
         AWHSE=IWHSE
         CALL ACTIVATE.DELETED.SERIAL (ISTK.ID,ERR.MSG,ERR.FLG,AWHSE,ALOC)
         IF ERR.FLG='-1' THEN
            DRV.STATUS<1,MLP>='CANNOT ACTIVATE DELETED SERIAL.'
            DRV.STATUS<1,MLP>:=' SOME SUPPORTING RECORDS ARE MISSING'
            GOSUB RELEASE.INV.FILES 
            GOTO NEXT.MLP
         END ELSE
            MATREADU ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID ELSE
               MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID THEN
                  MATREADU IWLO.REC FROM INV.WHSE.LOC.TEMP,IWLO.ID ELSE
                     MATREADU IWLO.REC FROM INV.WHSE.LOC,IWLO.ID ELSE
                        MAT IWLO.REC=''
                     END
                  END
               END
            END
         END
      END ELSE
         DRV.STATUS<1,MLP>='Serial ':ISTK.ID[4,99]
         DRV.STATUS<1,MLP>:=' exists on the system for product ':ISTK.PROD
         GOSUB RELEASE.INV.FILES 
         GOTO NEXT.MLP
      END
   END ELSE
      ADD.NEW.SERIAL=1
   END
* END      ;* T27365
   IF (ADD.NEW.SERIAL) THEN
      GOSUB RECEIVE.NEW.SERIAL
   END
   RETURN
*
**********************
RECEIVE.NEW.SERIAL: 
**********************
*
   ;*
   ;* create INV_RECEIPTS record
   ;*
   NEW.INVR.ID=GET.RECP.ID(CONO,CONTROL,DATE())
   NEW.RECP=NEW.INVR.ID[4,99]
   MATREADU INVR.REC FROM INV_RECEIPTS_TEMP,NEW.INVR.ID ELSE NULL
   MAT INVR.REC=''
   INVR.PROD=PROD
   INVR.VEND='REVERSAL'
   INVR.PO='REVERSAL'
   INVR.PO.LN=1
   INVR.ENT.DATE=DATE()
   INVR.POST.DATE=DATE()
   INVR.PERIOD=JPERIOD
   INVR.DIV=WHS.DIV
   INVR.PO.ACCR='N'
   INVR.UOM=INV.UNIT<1,3>
   INVR.ORG.QTY=SERIAL.QTY
   INVR.ORG.WHSE=IWHSE
   INVR.AUDIT.NO=INAH.SEQ
   INVR.SERIAL.NO=SERIAL
   INVR.DEPL.QTY=SERIAL.QTY
   MATWRITEU INVR.REC ON INV_RECEIPTS_TEMP,NEW.INVR.ID
   IID.INVR<1,-1>=NEW.INVR.ID
   ;*
   ;* create INV_RECP_WHSE record
   ;*
   NEW.IRW.ID=NEW.INVR.ID:"!":IWHSE
   MATREADU IRW.REC FROM INV_RECP_WHSE_TEMP,NEW.IRW.ID ELSE NULL
   MAT IRW.REC=''
   IRW.ORG.QTY=SERIAL.QTY
   ;* reservable and current qty. have been already
   ;* returned to one of the receipts above.
   IRW.CUR.QTY=0
   IRW.RSVB.QTY=0
   IRW.SERIAL.NO=SERIAL
*IRW.ON.HAND=SERIAL.QTY
   MATWRITEU IRW.REC ON INV_RECP_WHSE_TEMP,NEW.IRW.ID
   IID.IRW<1,-1>=NEW.IRW.ID
   ;*
   ;* create INV_SERIAL record
   ;*
   IF CATG.TRK.LVL='G' THEN 
      SERIAL="R":NEW.RECP:"!":IWHSE:"!":IWLOC
      ISTK.ID=CONO:SERIAL
      INVR.SERIAL.NO=SERIAL
      MATWRITEU INVR.REC ON INV_RECEIPTS_TEMP,NEW.INVR.ID
      IRW.SERIAL.NO=SERIAL
      MATWRITEU IRW.REC ON INV_RECP_WHSE_TEMP,NEW.IRW.ID
   END
   MATREADU ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID ELSE NULL
   MAT ISTK.REC=""
   ISTK.PROD=PROD
   ISTK.WHSE=IWHSE
   ISTK.LOC=IWLOC
   ISTK.RECP=NEW.RECP
   ISTK.RECP.PERIOD=JPERIOD
   ISTK.UOM=INV.UNIT<1,3>
   ISTK.ORG.QTY=SERIAL.QTY
   ISTK.ENTRY.DATE=DATE()
   ISTK.EDIT.DATE=DATE()
   ISTK.POST.DATE=DATE()
   ISTK.PRINT.DATE=DATE()
   ISTK.STATUS="SEE JOB # ":DRV.JOB
   ISTK.PLACE='RV'
   ISTK.PO.NO="REVERSAL"
   ISTK.PO.LINE=1
   MATWRITEU ISTK.REC ON INV_SERIAL_TEMP,ISTK.ID
   IID.ISTK<1,-1>=ISTK.ID
   ;*
   ;* add serial to iwlo record
   ;*
*T27484 v
*  LOCATE SERIAL IN IWLO.SERIAL<1> SETTING JUNK ELSE
*     IWLO.SERIAL<1,-1>=SERIAL
*T28167 v
*  LOCATE SERIAL IN IWLO.SERIAL<1>,1 BY 'AR' SETTING JUNK ELSE 
*     INS SERIAL BEFORE IWLO.SERIAL<1,JUNK>
*     MATWRITEU IWLO.REC ON INV.WHSE.LOC.TEMP,IWLO.ID
*     LOCATE IWLO.ID IN IID.IWLO<1> SETTING JUNK ELSE
*        IID.IWLO<1,-1>=IWLO.ID
*     END
*  END
   GOSUB CHECK.IWLO.SERIAL
*T28167 ^
   ;*
   ;* add new receipt to IWH record
   ;* array will be resorted in JCS.IWH.SUB
   ;*
   LOCATE NEW.RECP IN IWH.RECP.NO<1> SETTING JUNK ELSE
      LOCATE INVR.PERIOD IN IWH.RECP.PERIOD<1> BY "AR" SETTING RPOS ELSE NULL
      IWH.RECP.NO<1,-1>=NEW.RECP
      IWH.RECP.PERIOD<1,-1>=INVR.PERIOD
      IWH.RECP.ENT.DATE<1,-1>=INVR.ENT.DATE
   END
   RETURN
*
*****************
UPDATE.UNIT.COST: 
*****************
*
* IF NOT(SERIAL.FOUND<1,SC>) THEN      ;* T27365
   MATREADU INVR.REC FROM INV_RECEIPTS_TEMP,NEW.INVR.ID THEN
      INVR.UNIT.COST=INAH.UNIT.COST
      MATWRITEU INVR.REC ON INV_RECEIPTS_TEMP,NEW.INVR.ID
   END
   MATREADU IRW.REC FROM INV_RECP_WHSE_TEMP,NEW.IRW.ID THEN
      IRW.UNIT.COST=INAH.UNIT.COST
      MATWRITEU IRW.REC ON INV_RECP_WHSE_TEMP,IRW.ID
   END
   MATREADU ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID THEN
      ISTK.UNIT.COST=INAH.UNIT.COST
      MATWRITE ISTK.REC ON INV_SERIAL_TEMP,ISTK.ID
   END
* END      ;* T27365
   RETURN
*
******************
RELEASE.INV.FILES: 
******************
*
   RELEASE INV.WHSE, IWH.ID
   RELEASE INV.STATS, IWH.ID
   RELEASE INV.JOB.STATS, IJS.ID
   RETURN
*
********************
SET.AUDIT.REFERENCE: 
********************
*
   GOSUB SET.INAH
   LOCATE INAH.ID IN IID.INAH<1> SETTING JUNK ELSE
      IID.INAH<1,-1>=INAH.ID
   END
   MATWRITEU INAH.REC ON INV_AUDIT_HIST_TEMP,INAH.ID
   ;* update INVR.REC to which serial belongs with
   ;* audit seq #
   INVR.ID=CONO:ISTK.RECP
   IF RECORDLOCKED(INV_RECEIPTS_TEMP,INVR.ID)=0 THEN
      DELETE INV_RECEIPTS_TEMP,INVR.ID
   END
   IF RECORDLOCKED(INV_RECEIPTS_TEMP,INVR.ID)=0 THEN
      DELETE INV_RECEIPTS_TEMP,INVR.ID
   END
   MATREADU INVR.REC FROM INV_RECEIPTS_TEMP,INVR.ID ELSE
      MATREADU INVR.REC FROM INV_RECEIPTS,INVR.ID THEN
         INVR.AUDIT.NO<1,-1>=INAH.SEQ
         MATWRITEU INVR.REC ON INV_RECEIPTS_TEMP,INVR.ID
         LOCATE INVR.ID IN IID.INVR<1> SETTING JUNK ELSE
            IID.INVR<1,-1>=INVR.ID
         END
      END ELSE
         DRV.STATUS<1,MLP>='Cannot locate INV_RECEIPTS record ':INVR.ID
         ERR=1
      END
   END
   RETURN
*
***************
SET.REV.ALL: 
***************
*
   BEGIN CASE
      CASE DRV.COST<1,MLP> < 1
         IF DRV.TTYPE="C" THEN
            DRV.STATUS<1,MLP>="ZERO REVERSE COST"
         END ELSE
            DRV.STATUS<1,MLP>="ZERO REVERSE QUANTITY"
         END
      CASE DRV.TTYPE # "C" AND DRV.COST<1,MLP>=(JMT.QTY-JMT.RC.QTY)
         REV.ALL=1
      CASE DRV.TTYPE # "C" AND DRV.COST<1,MLP> > (JMT.QTY-JMT.RC.QTY)
         DRV.STATUS<1,MLP>="QUANTITY MISMATCH"
      CASE DRV.TTYPE="C" AND DRV.COST<1,MLP>=(JMT.COST-JMT.RC.COST)
         REV.ALL=1
      CASE DRV.TTYPE="C" AND DRV.COST<1,MLP> > (JMT.COST-JMT.RC.COST)
         DRV.STATUS<1,MLP>="COST MISMATCH"
   END CASE
   RETURN
*
**************
SET.DFND: 
**************
*
   PTR=1
   LOOP WHILE PTR DO
      LOCATE DEPT IN JOB.MT.DEPT<1>,PTR SETTING DFND ELSE DFND=0
      BEGIN CASE
         CASE DFND=0
            PTR=0
         CASE DEPT # JOB.MT.DEPT<1,DFND>
            PTR=DFND+1
         CASE CCTR # JOB.MT.CCTR<1,DFND>
            PTR=DFND+1
         CASE PROD # JOB.MT.PROD<1,DFND>
            PTR=DFND+1
         CASE WHSE # JOB.MT.WHSE<1,DFND>
            PTR=DFND+1
         CASE 1
            PTR=0
      END CASE
   REPEAT
   IF DFND=0 THEN
      DRV.STATUS<1,MLP>="CANNOT LOCATE MAIN DEPT/CCTR/PROD/WHSE"
   END
   RETURN
*
*************
SET.MLOC: 
*************
*
   PTR=1
   LOOP
      LOCATE PROD IN JOB.RESV.MATL<1>,PTR SETTING MLOC ELSE MLOC=0
      PTR=0
      IF MLOC THEN
         IF WHSE # JOB.RESV.WHSE<1,MLOC> THEN
            PTR=MLOC+1
         END
      END
   WHILE PTR DO REPEAT
   IF MLOC=0 THEN
      DRV.STATUS<1,MLP>="CANNOT LOCATE RESERVE PROD/WHSE"
   END
   RETURN
*
************
SET.INV.WIP: 
************
*
   WCNT=DCOUNT(JMT.WIP,VM)
   WPTR=0
   TOT.WIP=0
   INV.WIP=""
   FOR I=1 TO 3
      IF JMT.WIP<1,1,I>+0 <> 0 THEN
         INV.WIP<1,1,I>=0-JMT.WIP<1,1,I>
         TOT.WIP=TOT.WIP+JMT.WIP<1,1,I>
         WPTR=I
      END
   NEXT I
   FOR W=2 TO WCNT
      FOR I=1 TO WPTR
         INV.WIP<1,1,I>=INV.WIP<1,1,I>-JMT.WIP<1,W,I>
      NEXT I
   NEXT W
   RETURN
*
*******************
CHECK.RC.COST.QTY: 
*******************
*
   FOR S=SEQ+1 TO JOB.MT.SEQ<1,DFND>
      MATREAD JMT.REC FROM JOB.MATL, MT.ID : S ELSE
         DRV.STATUS<1,MLP>="CANNOT LOCATE JOB.MATL-":MT.ID:S
         EXIT
      END
      IF JMT.RC.TRAN=DRV.TRAN<1,MLP> THEN
         FOR I=1 TO WPTR
            REV.WIP<1,1,I>=REV.WIP<1,1,I>-JMT.WIP<1,1,I>
            TOT.RC.WIP=TOT.RC.WIP-JMT.WIP<1,1,I>
         NEXT I
         CNT=DCOUNT(JMT.PTR<1,1>,SVM)
         FOR I=1 TO CNT
            PTR=1
            LOOP
               LOCATE JMT.PTR<1,1,I> IN CUR.PTR<1,1>,PTR SETTING TLOC ELSE
                  TLOC=0; PTR=0
               END
               BEGIN CASE
                  CASE PTR=0
                  CASE JMT.PTR<1,3,I> <> CUR.PTR<1,3,TLOC>
                  CASE JMT.PTR<1,4,I>=CUR.PTR<1,4,TLOC>
                     PTR=0
               END CASE
            WHILE PTR DO
               PTR=TLOC+1
            REPEAT
            IF TLOC THEN
               CUR.QTY=CUR.QTY+JMT.PTR<1,2,I>
               CUR.PTR<1,2,TLOC>=CUR.PTR<1,2,TLOC>+JMT.PTR<1,2,I>
            END
         NEXT I
         TOT.RC.QTY=TOT.RC.QTY-JMT.QTY
*T21045  TOT.RC.DCOST=TOT.RC.DCOST-JMT.DCOST<1,1>-JMT.DCOST<1,2>
         TOT.RC.DCOST=TOT.RC.DCOST-JMT.DCOST<1,1>-JMT.DCOST<1,3>
         TOT.RC.COST=TOT.RC.COST-JMT.COST
         TOT.RC.SALE=TOT.RC.SALE-JMT.SALE
      END
   NEXT S
   IF NOT(DRV.STATUS<1,MLP>)THEN
      MATREAD JMT.REC FROM JOB.MATL, MT.ID : SEQ THEN
         BEGIN CASE
            CASE TOT.RC.COST <> JMT.RC.COST
               DRV.STATUS<1,MLP>="REVERSE COST MISMATCH "
               DRV.STATUS<1,MLP>:=OCONV(TOT.RC.COST,"MD2")
               DRV.STATUS<1,MLP>:=" JMT COST ":OCONV(JMT.RC.COST,"MD2")
            CASE TOT.RC.QTY <> JMT.RC.QTY
               DRV.STATUS<1,MLP>="REVERSE QTY MISMATCH "
               DRV.STATUS<1,MLP>:=OCONV(INT(TOT.RC.QTY/10+.5),"MD2")
            CASE JMT.QTY-JMT.RC.QTY <> CUR.QTY
               DRV.STATUS<1,MLP>="REVERSE WIP QTY MISMATCH "
               DRV.STATUS<1,MLP>:=OCONV(INT(CUR.QTY/10+.5),"MD2")
         END CASE
      END ELSE
         DRV.STATUS<1,MLP>="CANNOT LOCATE JOB.MATL-":MT.ID:SEQ
      END
   END
   RETURN
*                                                          
*******************                                        
UPD.ACCRUE: 
********************                                       
*                                                          
* Upate Accrued Liability History                          
*                                                          
   READU ALH.CT FROM CONTROL,CONO:"ALHCOUNTER" ELSE ALH.CT=0  
   ALH.CT=ALH.CT+1                                            
   IF ALH.CT > 999999 THEN ALH.CT=1                           
   WRITE ALH.CT ON CONTROL,CONO:"ALHCOUNTER"                  
   MAT ALH.REC=""                                             
   ALH.ID=CONO:STR("0",6-LEN(ALH.CT)):ALH.CT                  
   ALH.DATE=DRV.DATE                                         
   ALH.REF='R*':INVR.PO:"*":PROD                           
   ALH.SRC='IC'                                           
   ALH.MON=POSTING.MON                                        
   ALH.AMT=0-CADJ<5,RIDX>                                    
   ALH.ACCT=CATG.INV
   ALH.DV.DP.CC=WHS.DIV:GEN.DEPT:GEN.CCTR
   MATWRITE ALH.REC ON ACCRUED.LIAB.HIST,ALH.ID               
   RETURN                                                     
*
********************
UPD.ICA.REC: 
********************
*
   ;* get INV.COST.ADJ new record id
   READU ICA.SEQ FROM CONTROL, CONO : 'INV.COST.ADJ' ELSE ICA.SEQ='10001'
   EOL=0                                                  
   LOOP                                                   
      MATREADU ICA.REC FROM INV.COST.ADJ,CONO:ICA.SEQ THEN 
         RELEASE INV.COST.ADJ,CONO:ICA.SEQ                  
         ICA.SEQ+=1                                         
      END ELSE                                             
         MAT ICA.REC='' ; EOL=1                             
      END                                                  
   UNTIL (EOL) DO REPEAT                                  
   ;* set ICA.REC
   ICA.PROD=PROD                
   ICA.WHSE=WHSE                
   ICA.PO=INVR.PO
   ICA.VEND=INVR.VEND
   ICA.QTY=CADJ<2,RIDX>                
   ICA.REC.DATE=INVR.ENT.DATE   
   ICA.ADJ.DATE=DATE()           
   ICA.REC.COST=CADJ<3,RIDX>
   ICA.ADJ.COST=CADJ<4,RIDX>   
   ICA.RECP.NO=CADJ<1,RIDX>
   ICA.PERIOD=POSTING.MON
   MATWRITE ICA.REC ON INV.COST.ADJ,CONO:ICA.SEQ
   WRITE ICA.SEQ ON CONTROL,CONO:'INV.COST.ADJ'
   RETURN
*T28167 v
*
**************
CHECK.IWLO.SERIAL: 
**************
*
   LOCATE SERIAL IN IWLO.SERIAL<1>,1 SETTING JUNK ELSE
      IF NUM(SERIAL) THEN
         LOCATE SERIAL IN IWLO.SERIAL<1>,1 BY 'AR' SETTING JUNK ELSE
            INS SERIAL BEFORE IWLO.SERIAL<1,JUNK>
         END
      END ELSE
         LOCATE SERIAL IN IWLO.SERIAL<1>,1 BY 'AL' SETTING JUNK ELSE
            INS SERIAL BEFORE IWLO.SERIAL<1,JUNK>
         END
      END
      MATWRITEU IWLO.REC ON INV.WHSE.LOC.TEMP,IWLO.ID
   END
   LOCATE IWLO.ID IN IID.IWLO<1> SETTING JUNK ELSE 
      IID.IWLO<1,-1>=IWLO.ID                        
   END                                             
   RETURN
*T28167 ^
99999 *
   RETURN
END
