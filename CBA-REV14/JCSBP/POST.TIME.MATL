*COPY>CPYLIB>COM1
*COPY>JCS.CPYLIB>COM.JCS.LINK
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>JCS.CPYLIB>COM.INV.STATS 
*********************************************************************
* REVISION    - [08.0B]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - JCSBP
* PROGRAM     - POST.TIME.MATL
* BY          - JIHAD YAMOUT, C.B.A
* DESCRIPTION - THIS PROGRAM POST JOBS BY MOVING DAILY.TIME.MATL
* RECORD TO JOB FILE AND JOB.TIME FILE AND JOB FILE
* AND DELETE DAILY.TIME.MATL RECORD.
**************************
*MODIFICATIONS FOR EPS - BY SFC - FEB 1990
**************************
* (16796) MODIFICATIONS FOR GANGING - BY NA - OCT 1992
* MOD      - TASK 18439 PERF/PROD STATS OCT 1994
* TASK 20110 JR FIX CONCURRENT HOURS ROUNDING ERROR
* TASK 20304 JR PERF.STATS IMP AND HRS (STD AND ACT) NOT CALCULATED
* CORRECTLY
*T21243 lanny 11/20/1996 * If part of TIME.MATL record causes reject the
*                          MATL entries for BARCODED products containing
*                          no errors are copied to DAILY.MATL for every
*                          attempt to post the TIME.MATL transaction.
*T21256 lanny 11/21/1996 * If all matl lines donot post in a given
*                          posting, when reposting for remaining matl
*                          changes to job status on previously posted
*                          matls may cause reject.
*T21523 julie 01/29/1997 * ADD ERROR MESSAGE ROLL-SKID NOT RECEIEVED
*T21847 lanny 04/25/1997 * Make error checks in sync with EDIT.TIME.MATL.
*T21933 julie 05/14/1997 * CHECK FOR BLANK STATUS
*T23254 gat 09/11/1998 * FIX NON-CHARGEABLE JOB POST OF NON-CHARGEABLE
*                        TIME
*T23278 markt 11/20/1998 * Accumulate fiscal data by division.
*T23636 markt 01/27/1999 * Entire S.STP.IMP array is being zeroed out
*                        * when CCTR.OPER.TYPE<1,OLOC> is "F", rather
*                        * than just the current S.STP.IMP<1,SC> value.
*T24118 lanny 10/28/1999 * Non-chg time not being carried to G/L as COGS
*T24531 alex 11/01/1999 * Mod to write out the updated records to the
*                         inventory file.
*T25185 gat 05/24/2000 * Fix problem with missing WSS shift.
*T25837 lanny 05/15/2001 * JOB NO. must not be NULL.
*T25907 lanny 06/26/2001 * Update JLB.OPER.COMP field from DTM.OPER.COMP
*T26093 lanny 08/16/2001 * SIS_LOG Should be opened only if user has
*                          SIS.
*T26207 lanny 10/03/2001 * Do not allow more than 24 hours in one day.
*T26334 epitka 12/17/2001 * REV12
*T26497 adelgado 04/02/2002 * Add validation rule for Inter-Divisional
*                             Whse.                                   
*T26665 adelgado 07/05/2002 * Mods to recalculate Average cost if
*                             posting to a future period.
*T27242 epitka 01/24/2003 * Not all records are being released.
*T28076 lross 04/20/2004 * Use CATG.TRK.LVL # 'S' to call post material
*                          routine.
*T28309 lross 01/26/2005 * Looping in reverse order causes matl rejects
*                          when multiple usage of roll in same posting.
*T29043 lross 01/18/2007 * Add TIME.STAMP to JOB.TIME record.
*********************************************************************
*
***** INSERT FILE EQUATE
*
*COPY>JCS.CPYLIB>PNP.LOG
*COPY>SIS.CPYLIB>SIS_LOG
*COPY>JCS.CPYLIB>DAILY.TIME.MATL
*COPY>JCS.CPYLIB>DAILY.MATL
*COPY>JCS.CPYLIB>JOB.TIME
*COPY>JCS.CPYLIB>JOB
*COPY>JCS.CPYLIB>OJOB.TIME
*COPY>JCS.CPYLIB>JOB.MATL
*COPY>JCS.CPYLIB>OJOB.MATL
*COPY>JCS.CPYLIB>OPERATION
*COPY>JCS.CPYLIB>FACTOR
*COPY>JCS.CPYLIB>JOB.CUTOFF.NO
*COPY>JCS.CPYLIB>JOB.STAT.CODE
*COPY>JCS.CPYLIB>WIP.LEVEL
*COPY>JCS.CPYLIB>PROD.STATS
*COPY>JCS.CPYLIB>PERF.STATS
*COPY>JCS.CPYLIB>COST.CNTR.WIP
*COPY>JCS.CPYLIB>SPOIL.STATS
*COPY>JCS.CPYLIB>JCS.FILE.VARS
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>EMPLOYEE
*COPY>PMC.CPYLIB>DIVISION
*COPY>PMC.CPYLIB>DEPARTMENT
*COPY>PMC.CPYLIB>COST.CNTR
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.HIST
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>ICS.CPYLIB>INV.STATS
*COPY>ICS.CPYLIB>INV.JOB.STATS
*COPY>ICS.CPYLIB>INV.CNV
*COPY>ICS.CPYLIB>CATEGORY
*COPY>ICS.CPYLIB>INV_AUDIT_HIST
*COPY>PRS.CPYLIB>DAILY.HOURS
*COPY>PRS.CPYLIB>EPS.DAILY.HOURS
*COPY>PRS.CPYLIB>WORK.SHIFT
*COPY>PRS.CPYLIB>PAY.CONTROL
*COPY>PSS.CPYLIB>PSS.FILE.VARS
*COPY>JCS.CPYLIB>SF.PROMPT
*COPY>ICS.CPYLIB>INV_SERIAL
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>SYSCOM
*COPY>CPYLIB>CHAR
   DIM SAVE.REC(10)
   EQU S.DCOST   TO SAVE.REC(1)
   EQU S.COST    TO SAVE.REC(2)
   EQU S.SALE    TO SAVE.REC(3)
   EQU S.HRS     TO SAVE.REC(4)
   EQU S.STD.HRS TO SAVE.REC(5)
   EQU S.STD.IMP TO SAVE.REC(6)
   EQU S.OSJ     TO SAVE.REC(7)
   EQU S.FCTR    TO SAVE.REC(8)
   EQU S.DPTR    TO SAVE.REC(9)
   EQU S.PR.HRS  TO SAVE.REC(10)
**** INTITIALIZATION
*
   MAT FILE.VARS = ""; MAT EDIT.COM.DRIVER = ""; MAT OJLB.REC = ""; MAT JLB.REC = ""; MAT JMT.REC = ""
   MAT JCS.FILE.VARS = ""
   MAT PSS.FILE.VARS = ""
   CONO = ''
   GEN.DIV = "00";GEN.DEPT = "00";GEN.CCTR = "000"
*
***** SETUP ERRMSG ROUTINE
*
   SYS.TYPE = 1
   CALL SYSCOM(MAT SYSCOM.REC)
*
   PROCREAD BUFFER ELSE ERRMSG = 'MUST BE RUN FROM A PROC'; GOTO 93000
   DIV.CODE = BUFFER<8>
*
***** OPEN FILES
*
   CALL POST.TIME.MATL.OPEN(ERRMSG,MAT JCS.FILE.VARS)
   IF ERRMSG # "" THEN GOTO 93000
   OPEN "INV.HIST" TO INV.HIST ELSE
      ERRMSG = 'CANNOT OPEN INV.HIST FILE'
      GOTO 93000
   END
   GANG.PRESENT = 1
   OPEN '','GANG.JOB' TO GANG.JOB ELSE GANG.PRESENT = 0
   OPEN '','GANG.ALLOC' TO GANG.ALLOC ELSE GANG.PRESENT = 0
   OPEN "","SF.PROMPT" TO SF.PROMPT ELSE
      ERRMSG = 'CANNOT OPEN SF.PROMPT FILE'
      GOTO 93000
   END
   OPEN '','DAILY.MATL' TO DAILY.MATL ELSE ERRMSG = 'CANNOT OPEN DAILY.MATL.FILE'; GOTO 93000
   OPEN '','INV_SERIAL' TO INV_SERIAL ELSE ERRMSG = 'CANNOT OPEN INV_SERIAL.FILE'; GOTO 93000
*
*----- GET CONO
*
   CALL GET.CONO(CONO, MAT COMP.REC)
   IF CONO = 'END' THEN GOTO 99999
*
*-----DETERMINE if user is running barcode inventory
*
*
***** SETUP VALUES FROM JCS.SCREENS
*
   ECD.ACTION = 1
   ECD.SCRN.CNT = 1
   ECD.SCRN.NAME = "GET.FISCAL.MONTH"
   CALL SCRN.EDIT
   ECD.SCRN.NO = 1
*
***** INT ECD.RT.VALUE AND PRINT SCREEN
*
   MAT SCV.REC = ""
   ECD.ACTION = 2
   CALL SCRN.EDIT
*
***** MAIN PROCESSING
*
   READNEXT DTM.ID ELSE GOTO 99999
   CONO = DTM.ID[1,3]
   TODAY = DATE()
   MATREAD COMP.REC FROM COMPANY,CONO ELSE GOTO 99999
   PRSFLAG=CO.PRS
   IF CO.PRS.INTERFACE = "Y" AND CO.PRS = "Y" THEN
      OPEN "","DAILY.HOURS" TO DAILY.HOURS ELSE
         ERRMSG = "CANNOT LOCATE DAILY.HOURS FILE"; GOTO 93000
      END
   END
   IF CO.PRS = "E"  AND CO.PRS.INTERFACE = "Y" THEN
      OPEN "","EPS.DAILY.HOURS" TO DAILY.HOURS ELSE
         ERRMSG = "CANNOT LOCATE EPS.DAILY.HOURS FILE"; GOTO 93000
      END
      OPEN "","WORK.SHIFT" TO WORK.SHIFT ELSE
         ERRMSG = "CANNOT LOCATE WORK.SHIFT FILE"; GOTO 93000
      END
      MATREAD EPSC.REC FROM CONTROL,CONO:"PAY.CONTROL" ELSE
         ERRMSG = "CANNOT READ PAY.CONTROL RECORD"; GOTO 93000
      END
   END
   IF CO.PSS = "Y" THEN
      OPEN "","JOB.SCHED" TO JOB.SCHED ELSE
         ERRMSG = "CANNOT LOCATE JOB.SCHED FILE";GOTO 93000
      END
      OPEN "","CCTR.SCHED" TO CCTR.SCHED ELSE
         ERRMSG = "CANNOT LOCATE CCTR.SCHED FILE"; GOTO 93000
      END
   END
   SISLIVE = 1
   READ DUMMY FROM CONTROL, CONO:"SISLIVE" ELSE SISLIVE = 0
   DUMMY = ""
   IF SISLIVE THEN
      OPEN "SIS_LOG" TO SIS_LOG ELSE
         ERRMSG = 'CANNOT OPEN SIS_LOG FILE'
         GOTO 93000
      END
   END
   CALL GET.DIV.FISCAL.MONTH(CONO,POSTING.MON,"TIME & MATERIAL POST PROCESS","JCFISCAL",CURR.MON,DIV.CODE);* T23278
   IF POSTING.MON = "END" THEN GOTO 99999
*
**** GET ALL OUTSIDE JOB RANGE
*
   MATREAD JOB.CUTOFF.REC FROM CONTROL,CONO:"JOB.CUTOFF.NO" ELSE
      MAT JOB.CUTOFF.REC = ""
      J.CUTOFF.NUM = 0
   END
   MATREAD WIP.LEVEL.REC FROM CONTROL,CONO : "WIP.LEVEL" ELSE
      MAT WIP.LEVEL.REC = ""
      WLR.LB.COST = 2; WLR.LB.WIP = 2
      WLR.MT.COST = 2; WLR.MT.WIP = 2
   END
   GOSUB 1000
*
***** PROCESS ALL RECORDS
*
   DATA = 1
   LOOP
      READNEXT DTM.ID ELSE DATA = 0
   WHILE DATA DO
      IF CONO = DTM.ID[1,3] THEN GOSUB 1000
   REPEAT
   GOTO 99999
**** UPDATE JOB TIME RECORD
1000 MATREADU DTM.REC FROM DAILY.TIME.MATL,DTM.ID ELSE
      RELEASE DAILY.TIME.MATL,DTM.ID
      GOTO 1999
   END
IF @LOGNAME = 'cmykleb' THEN DEBUG
   DTM.STATUS = ""
   MAT SAVE.REC = ""
   EMP = FIELD(DTM.ID,"*",1)
   DTM.EMP = EMP[4,LEN(EMP)]
   DTM.DATE = FIELD(DTM.ID,"*",2)
   SHIFT = FIELD(DTM.ID,"*",3)
   MATREAD EMP.REC FROM EMPLOYEE,CONO : DTM.EMP ELSE
      DTM.STATUS<1,1> = "CANNOT LOCATE EMPLOYEE # ":DTM.EMP
      GOTO 1998
   END
   IF CO.PRS.INTERFACE = "Y" AND CO.PRS = "E" THEN
      IF EMP.WRK.SCHD<1,SHIFT> = '' AND EMP.SOC.SEC # '' THEN 
         DTM.STATUS<1,1>="NO WORK.SHIFT.SCHD FOR THIS SHIFT"
         GOTO 1998
      END
   END
   IF SISLIVE THEN
      MATREAD SISLOG_REC FROM SIS_LOG, CONO:DTM.EMP THEN
         IF SISLOG_OFF.FLAG = "" AND DTM.DATE = SISLOG_DATE AND SHIFT = SISLOG_SHIFT THEN
            DTM.STATUS<1,1>="LOGGED ON (SFIS)"
            GOTO 1998
         END
      END ELSE
         MAT SISLOG_REC = ""
      END
   END ELSE
      LOGGED.ON = 1
      MATREAD PNPL.REC FROM PNP.LOG,CONO:DTM.EMP ELSE LOGGED.ON = 0
      IF LOGGED.ON THEN
         IF PNPL.LOGOFF.FLAG = "" AND DTM.DATE = PNPL.LOGON.DATE AND SHIFT = PNPL.SHIFT THEN
            DTM.STATUS<1,1>="LOGGED ON"
            GOTO 1998
         END
      END
   END
   ESTAT = ""
   CALL CALC.PRS.TIME(DTM.TYPE,DTM.TIME.ST,DTM.TIME,S.PR.HRS,ESTAT,PRSFLAG)
   TYPE.CNT = COUNT(DTM.TYPE,VM) + (DTM.TYPE # "")
   IF SUM(S.PR.HRS) > 2400 THEN
      DTM.STATUS<1,TYPE.CNT>="Total hours exceeds 24.00"
   END
*T28309 v FOR SC = TYPE.CNT TO 1 STEP -1
   FOR SC = 1 TO TYPE.CNT
      IF DTM.TYPE<1,SC> = "L" OR DTM.TYPE<1,SC> = "I" THEN GOTO 1099
      IF DTM.TYPE<1,SC> = "M" AND DTM.PMT.FLG<1,SC> # "" THEN GOTO 1099
      S.OSJ<1,SC> = 0
      MATREADU JOB.REC FROM JOB,CONO: DTM.JOB<1,SC> ELSE
         MAT JOB.REC = ""
         FND = 0
         IF NUM(DTM.JOB<1,SC>) AND DTM.JOB<1,SC> # "" THEN
            IF DTM.JOB<1,SC> < J.CUTOFF.NUM THEN FND = 1
         END ELSE
            JC.CNT = COUNT(J.CUTOFF.PREFIX,VM) + (J.CUTOFF.PREFIX # "")
            FOR L = 1 TO JC.CNT WHILE FND = 0
               PREFX.LEN = LEN(J.CUTOFF.PREFIX<1,L>)
               IF J.CUTOFF.PREFIX<1,L> = DTM.JOB<1,SC>[1,PREFX.LEN] THEN
                  CHK.VALUE = DTM.JOB<1,SC>[PREFX.LEN+1,LEN(DTM.JOB<1,SC>)-PREFX.LEN]
                  IF NUM(CHK.VALUE) THEN
                     IF CHK.VALUE < J.CUTOFF.PRE.NO<1,L> THEN FND = 1
                  END
               END
            NEXT L
         END
         IF FND = 1 THEN
            S.OSJ<1,SC> = 1
            IF DTM.DIV<1,SC> = "" THEN
               DTM.STATUS<1,SC>="INVALID DIVISION";GOTO 1090
            END
            JOB.DIV = DTM.DIV<1,SC>
            JOB.TYPE = DTM.JOB.TYPE<1,SC>
         END ELSE
            DTM.STATUS<1,SC> = "CANNOT LOCATE JOB # ":DTM.JOB<1,SC>; GOTO 1090
         END
      END
      BEGIN CASE
         CASE JOB.STATUS<1,1> = 9
            DTM.STATUS<1,SC>="JOB IS CANCELLED";GOTO 1090
         CASE JOB.STATUS<1,1> = 7
            DTM.STATUS<1,SC>="JOB IS READY TO PURGE";GOTO 1090
         CASE JOB.STATUS<1,1> = 8
            DTM.STATUS<1,SC>="JOB IS PURGED";GOTO 1090
         CASE (JOB.STATUS<1,1> > 1 AND JOB.STATUS<1,1> # 5) OR JOB.TRACK.DATE<1,7> # "" OR JOB.TRACK.DATE<1,8> # ""
            IF DTM.INIT<1,SC> = "" THEN
               DTM.STATUS<1,SC> = "AUTHORIZATION REQUIRED"; GOTO 1090
            END ELSE
               MATREAD JSI.REC FROM JOB.STAT.CODE,CONO:DTM.INIT<1,SC> ELSE
                  DTM.STATUS<1,SC> = "INVALID AUTHORIZATION"; GOTO 1090
               END
            END
      END CASE
      IF JOB.DEPT # DTM.DEPT<1,SC>[1,LEN(JOB.DEPT)] THEN
         DTM.STATUS<1,SC> = "JOB/DEPARTMENT MISMATCH"; GOTO 1090
      END
      IF JOB.TYPE # "R" AND JOB.TYPE # DTM.JOB.TYPE<1,SC> THEN
         DTM.STATUS<1,SC> = "JOB TYPE MISMATCH"; GOTO 1090
      END
      BEGIN CASE
         CASE DTM.DIV<1,SC> = ""
            DTM.DIV<1,SC> = JOB.DIV
         CASE JOB.DIV # DTM.DIV<1,SC>
            DTM.STATUS<1,SC> = "JOB/DIVISION MISMATCH"; GOTO 1090
      END CASE
      IF CO.SPOIL.FLG = "Y" AND JOB.TYPE = "R" AND DTM.JOB.TYPE<1,SC> = "S" THEN
         IF DTM.SPOIL.CODE<1,SC> = "" THEN
            DTM.STATUS<1,SC> = "CANNOT LOCATE SPOILAGE CODE"; GOTO 1090
         END
         READ SPOIL.CODE.DESC FROM SPOILAGE.CODES,CONO:DTM.SPOIL.CODE<1,SC> ELSE
            DTM.STATUS<1,SC> = "INVALID SPOILAGE CODE ":DTM.SPOIL.CODE<1,SC>; GOTO 1090
         END
      END
      MATREAD DIV.REC FROM DIVISION,CONO : DTM.DIV<1,SC> ELSE
         DTM.STATUS<1,SC> = "CANNOT LOCATE DIV # ":DTM.DIV<1,SC>; GOTO 1090
      END
      MATREAD DEPT.REC FROM DEPARTMENT,CONO : DTM.DEPT<1,SC> ELSE
         DTM.STATUS<1,SC> = "CANNOT LOCATE DEPT # ":DTM.DEPT<1,SC>; GOTO 1090
      END
      LOCATE DTM.DEPT<1,SC> IN DIV.DEPT<1>,1 SETTING DLOC ELSE
         DTM.STATUS<1,SC> = "DIVISION/DEPARTMENT MISMATCH"; GOTO 1090
      END
      MATREAD CCTR.REC FROM COST.CNTR,CONO : DTM.CCTR<1,SC> ELSE
         DTM.STATUS<1,SC> = "CANNOT LOCATE CCTR # ":DTM.CCTR<1,SC>; GOTO 1090
      END
      IF CCTR.DEPT # DTM.DEPT<1,SC> THEN
         DTM.STATUS<1,SC> = "DEPARTMENT/COST CENTER MISMATCH"; GOTO 1090
      END
      IF CCTR.TYPE="F" THEN
         DTM.STATUS<1,SC> = "INACTIVE COST CENTER"; GOTO 1090
      END
      LOCATE DTM.CCTR<1,SC> IN DEPT.CCTRS<1>,1 SETTING CLOC ELSE
         DTM.STATUS<1,SC> = "COST CENTER/DEPARTMENT MISMATCH"; GOTO 1090
      END
      IF DTM.TYPE<1,SC> = "M" THEN
         MAT OPER.REC = ""
         MAT FCTR.REC = ""
         IF DTM.PROD<1,SC> = "" AND DTM.PMT.FLG<1,SC> = "" THEN
            DTM.STATUS<1,SC>="MATERIAL REQUIRED";GOTO 1090
         END
      END ELSE
         LOCATE DTM.OPER<1,SC> IN CCTR.OPER<1>,1 SETTING OLOC ELSE
            DTM.STATUS<1,SC>="CCTR/OPER MISMATCH";GOTO 1090
         END
         MATREAD OPER.REC FROM OPERATION,CONO : DTM.OPER<1,SC> ELSE
            DTM.STATUS<1,SC>="INVALID OPERATION";GOTO 1090
         END
         MATREAD FCTR.REC FROM FACTOR,CONO:DTM.TIME.CODE<1,SC> ELSE
            DTM.STATUS<1,SC>="INVALID FACTOR";GOTO 1090
         END
         IF CO.PRS.INTERFACE = "Y" THEN S.FCTR<SC> = FCTR.EMP.PRCNT
         IF OPER.MATL.REQ = "Y" AND DTM.PROD<1,SC> = "" AND DTM.PMT.FLG<1,SC> = "" THEN
            DTM.STATUS<1,SC> = "MATERIAL REQUIRED"; GOTO 1090
         END
      END
      IF DTM.TYPE<1,SC> = "M" THEN GOTO 1080
      STIME=DTM.TIME.ST<1,SC>
      ETIME=DTM.TIME<1,SC>
      IF ETIME = STIME THEN
         DTM.STATUS<1,SC> = "START TIME CANNOT EQUAL END TIME"; GOTO 1090
      END
      IF ETIME < STIME THEN ETIME=ETIME+2400
      ELAP.MIN=(INT(ETIME/100)*60+MOD(ETIME,100))-(INT(STIME/100)*60+MOD(STIME,100))
      S.HRS<1,SC>=INT(ELAP.MIN*100/60+0.5)
      S.HRS<1,SC> = DTM.LAPS.TIME<1,SC>
      BEGIN CASE
         CASE CCTR.OPER.TYPE<1,OLOC> = "V" AND DTM.IMP<1,SC> = '' AND DTM.TYPE<1,SC> # 'C'
            DTM.STATUS<1,SC>="PRODUCTION QUANTITY REQUIRED";GOTO 1090
         CASE CCTR.OPER.TYPE<1,OLOC> = "U" AND DTM.IMP<1,SC> = '' AND DTM.TYPE<1,SC> # 'C'
            DTM.STATUS<1,SC>="PRODUCTION QUANTITY REQUIRED";GOTO 1090
         CASE CCTR.OPER.TYPE<1,OLOC> # "V" AND CCTR.OPER.TYPE<1,OLOC> # "U" AND DTM.IMP<1,SC> + 0 # 0
            DTM.STATUS<1,SC>="INVALID PRODUCTION QUANTITY";GOTO 1090
         CASE CCTR.OPER.HR.RATE<1,OLOC> > 0
            S.DCOST<1,SC> = (CCTR.OPER.HR.RATE<1,OLOC> * FCTR.PRCNT) / 100
         CASE DTM.JOB.TYPE<1,SC> = "N"
            S.DCOST<1,SC> = 0
            S.COST<1,SC> = 0
            S.SALE<1,SC> = 0
            GOTO 1070
         CASE 1
            DTM.STATUS<1,SC>="INVALID COST";GOTO 1090
      END CASE
      S.DCOST<1,SC> = INT((S.DCOST<1,SC> * S.HRS<1,SC>)/100 + .5)
      S.COST<1,SC> = S.DCOST<1,SC>; S.DPTR<1,SC> = 1
      FOR F = WLR.LB.COST TO 2 STEP -1
         P = F - 1
         IF CCTR.FOH.TYPE<1,P> = "$" THEN
            DCOST = INT(S.HRS<1,SC> * (CCTR.FOH.PCT<1,P> / 100) + .5)
         END ELSE
            DCOST = INT(S.DCOST<1,SC,1> * (CCTR.FOH.PCT<1,P> / 10000) + .5)
         END
         S.COST<1,SC> = S.COST<1,SC> + DCOST
         IF S.COST<1,SC> <> S.DCOST<1,SC,1> THEN
            S.DCOST<1,SC,F> = DCOST
            IF S.DPTR<1,SC> = 1 THEN S.DPTR<1,SC> = F
         END
      NEXT F
      IF DTM.JOB.TYPE<1,SC> = "S" OR DTM.JOB.TYPE<1,SC> = "N" THEN
         S.SALE<1,SC> = 0
      END ELSE
         S.SALE<1,SC> = INT(S.COST<1,SC> + ((S.COST<1,SC> * (CCTR.OPER.MARKUP<1,OLOC>/100))/100)+.5)
      END
1070  BEGIN CASE
         CASE CCTR.OPER.TYPE<1,OLOC> = "U"
            BEGIN CASE
               CASE CCTR.OPER.STD.HRS<1,OLOC> + 0 # 0
                  S.STD.HRS<1,SC> = INT(DTM.IMP<1,SC> * CCTR.OPER.STD.HRS<1,OLOC> / 100)
                  S.STD.IMP<1,SC> = INT(S.HRS<1,SC> / CCTR.OPER.STD.HRS<1,OLOC> * 100)
               CASE CCTR.OPER.STD.IMP<1,OLOC> + 0 # 0
                  S.STD.HRS<1,SC> = INT(DTM.IMP<1,SC> / CCTR.OPER.STD.IMP<1,OLOC>)
                  S.STD.IMP<1,SC> = S.HRS<1,SC> * CCTR.OPER.STD.IMP<1,OLOC>
               CASE 1
                  S.STD.HRS<1,SC> = 0
                  S.STD.IMP<1,SC> = 0
            END CASE
         CASE CCTR.OPER.TYPE<1,OLOC> = "V"
            IF CCTR.OPER.STD.IMP<1,OLOC> + 0 # 0 THEN
               S.STD.HRS<1,SC> = INT(DTM.IMP<1,SC> / CCTR.OPER.STD.IMP<1,OLOC>)
               S.STD.IMP<1,SC> = S.HRS<1,SC> * CCTR.OPER.STD.IMP<1,OLOC>
            END ELSE
               S.STD.HRS<1,SC> = 0
               S.STD.IMP<1,SC> = 0
            END
         CASE 1
            S.STD.HRS<1,SC> = CCTR.OPER.STD.HRS<1,OLOC> + 0
            S.STD.IMP<1,SC> = 0
      END CASE
1080  BEGIN CASE
         CASE DTM.TYPE<1,SC> = "M" AND DTM.PMT.FLG<1,SC> = ""
            GOSUB 2000
         CASE (DTM.TYPE<1,SC> = "T" OR DTM.TYPE<1,SC> = "C") AND DTM.PROD<1,SC> # "" AND DTM.PMT.FLG<1,SC> = ""
            IF DTM.PROD<1,SC> # "0" THEN
               GOSUB 2000
            END
      END CASE
1090  RELEASE JOB,CONO:DTM.JOB<1,SC>
1099 NEXT SC
   FOR SC = 1 TO TYPE.CNT
      IF DTM.STATUS<1,SC> # "" THEN GOTO 1997
      NUM.ADD.PROMPT = COUNT(DTM.ADD.PRMPT.CD<1,SC>,SVM) + (DTM.ADD.PRMPT.CD<1,SC> # "")
      FOR I = 1 TO NUM.ADD.PROMPT
         SF.KEY = CONO:DTM.ADD.PRMPT.CD<1,SC,I>
         MATREAD SFP.REC FROM SF.PROMPT,SF.KEY ELSE MAT SFP.REC = ""
         IF SFP.RESP.TYPE = 1 THEN
            IF DTM.ADD.RESP<1,SC,I> = "" THEN
               DTM.STATUS<1,SC> = "ADD/PRMPT-1"
               GOTO 1997
            END
            IF LEN(DTM.ADD.RESP<1,SC,I>) > SFP.RESP.LEN THEN
               DTM.STATUS<1,SC> = "ADD/PRMPT-1"
               GOTO 1997
            END
         END
         IF SFP.RESP.TYPE = 2 THEN
            IF ALPHA(DTM.ADD.RESP<1,SC,I>) # 1 THEN
               DTM.STATUS<1,SC> = "ADD/PRMPT-2"
               GOTO 1997
            END
            IF LEN(DTM.ADD.RESP<1,SC,I>) > SFP.RESP.LEN THEN
               DTM.STATUS<1,SC> = "ADD/PRMPT-2"
               GOTO 1997
            END
         END
         IF SFP.RESP.TYPE = 3 THEN
            IF DTM.ADD.RESP<1,SC,I> MATCHES "0N" THEN
               NULL
            END ELSE
               DTM.STATUS<1,SC> = "ADD/PRMPT-3"
               GOTO 1997
            END
            IF LEN(DTM.ADD.RESP<1,SC,I>) > SFP.RESP.LEN THEN
               DTM.STATUS<1,SC> = "ADD/PRMPT-3"
               GOTO 1997
            END
         END 
         IF SFP.RESP.TYPE = 6 THEN
            IF DTM.ADD.RESP<1,SC,I> = "" THEN
               DTM.STATUS<1,SC> = "ADD/PRMPT-6"
               GOTO 1997
            END
         END
         IF SFP.RESP.TYPE = 8 THEN
            IF DTM.ADD.RESP<1,SC,I> # "Y" AND DTM.ADD.RESP<1,SC,I> # "N" THEN
               DTM.STATUS<1,SC> = "ADD/PRMPT-8"
               GOTO 1997
            END
         END
         IF SFP.VALDAT NE "" THEN
            VALDAT=CHANGE(SFP.VALDAT<1>,",",VM)
            LOCATE DTM.ADD.RESP<1,SC,I> IN VALDAT<1>,1 SETTING INDX ELSE
               DTM.STATUS<1,SC> = "ADD/PROMPT"
               GOTO 1997
            END
         END
      NEXT I
1997 *
   NEXT SC
1998 *
   STCNT = DCOUNT(DTM.STATUS,VM)
   BLANK = 1
   FOR ST = STCNT TO 1 STEP -1 WHILE BLANK
      IF DTM.STATUS<1,ST> # "" THEN BLANK = 0
   NEXT ST
   IF NOT(BLANK) THEN
      MATWRITE DTM.REC ON DAILY.TIME.MATL,DTM.ID
   END ELSE
      GOSUB 3000
      STCNT = DCOUNT(DTM.STATUS,VM)
      BLANK = 1
      FOR ST = STCNT TO 1 STEP -1 WHILE BLANK
         IF DTM.STATUS<1,ST> # "" THEN BLANK = 0
      NEXT ST
      IF NOT(BLANK) THEN
         MATWRITE DTM.REC ON DAILY.TIME.MATL,DTM.ID
      END ELSE
         GOSUB 4000
         DELETE DAILY.TIME.MATL,DTM.ID
      END
   END
1999 RETURN
2000*
***** CHECK AND UPDATE MATL
*
   MATREAD INV.REC FROM INVENTORY,CONO:DTM.PROD<1,SC> ELSE
      DTM.STATUS<1,SC> = "CANNOT LOCATE PRODUCT"; GOTO 2099
   END
   IF INV.CUST # "" THEN
      IF "X":INV.CUST # "X":JOB.CUST THEN
         DTM.STATUS<1,SC>="CUSTOMER ":INV.CUST:" OWNS STOCK";GOTO 2099
      END
   END
   MATREAD CATG.REC FROM CATEGORY,CONO : INV.LINE ELSE
      DTM.STATUS<1,SC> = "CANNOT LOCATE PRODUCT.LINE ":INV.LINE; GOTO 2099
   END
  * T26497 v
   IF CO.INTR.WHSE # '' AND CO.INTR.WHSE = DTM.WHSE<1,SC> THEN
      DTM.STATUS<1,SC> = 'CANNOT USE MATERAIL FROM AN INTER-DIVISIONAL WHSE'
      GOTO 2099
   END
  * T26497 ^
   IWH.ID=CONO:DTM.PROD<1,SC>:"!":DTM.WHSE<1,SC>
   MATREAD IWH.REC FROM INV.WHSE,IWH.ID ELSE
      DTM.STATUS<1,SC> = "CANNOT LOCATE WAREHOUSE"; GOTO 2099
   END
   IF DTM.OPER<1,SC>#'' AND OPER.PLINE#'' THEN
      LOCATE(INV.LINE,OPER.PLINE,1;POS) ELSE POS = 0
      IF POS < 1 THEN
         DTM.STATUS<1,SC>='INVALID PRODUCT LINE FOR OPERATION'
         GOTO 2099
      END
   END
   MATREAD IH.REC FROM INV.HIST,CONO:DTM.PROD<1,SC> ELSE
      MAT IH.REC = ''
   END
   MATREAD IWLO.REC FROM INV.WHSE.LOC,CONO:DTM.PROD<1,SC>:"!":DTM.WHSE<1,SC>:"!":DTM.LOC<1,SC> ELSE
      IF CATG.TRACK.QOH = "Y" THEN
         DTM.STATUS<1,SC> = "CANNOT LOCATE LOCATION"; GOTO 2099
      END
      MAT IWLO.REC = ""
   END
   IF CATG.TRK.LVL='S' THEN
      SERIAL=DTM.SERIAL<1,SC>
      BEGIN CASE
         CASE SERIAL # ""
            MATREAD ISTK.REC FROM INV_SERIAL, CONO:SERIAL THEN
               IF ISTK.POST.DATE = "" THEN
                  DTM.STATUS<1,SC> = "SERIAL NOT RECEIVED";GOTO 2099
               END ELSE
                  IF ISTK.WHSE # DTM.WHSE<1,SC> OR ISTK.LOC#DTM.LOC<1,SC> THEN 
                     DTM.STATUS<1,SC> ='Serial is in different whse/loc.' 
                  END                                              
               END
            END
         CASE SERIAL="" AND IWLO.SERIAL # "" AND CATG.TRK.LVL='S'
            DTM.STATUS<1,SC>="SERIAL MISSING";GOTO 2099
         CASE SERIAL # ""
            LOCATE SERIAL IN IWLO.SERIAL<1>,1 SETTING P ELSE
               DTM.STATUS<1,SC>="INVALID SERIAL";GOTO 2099
            END
      END CASE
   END
   BEGIN CASE
      CASE DTM.RS.QTYPE<1,SC>=""
      CASE INV.PAP.TYPE="ROLL" AND DTM.RS.QTYPE<1,SC>[1,1]="W"
      CASE INV.PAP.TYPE="ROLL" AND DTM.RS.QTYPE<1,SC>[1,1]="D"
      CASE INV.PAP.TYPE="LROLL" AND DTM.RS.QTYPE<1,SC>[1,1]="S"
      CASE INV.PAP.TYPE="LROLL" AND DTM.RS.QTYPE<1,SC>[1,1]="D"
      CASE INV.PAP.TYPE="PCOAT" AND DTM.RS.QTYPE<1,SC>[1,1]="S"
      CASE INV.PAP.TYPE="PCOAT" AND DTM.RS.QTYPE<1,SC>[1,1]="D"
      CASE INV.PAP.TYPE="SHEET" AND DTM.RS.QTYPE<1,SC>[1,1]="S"
      CASE INV.PAP.TYPE="SHEET" AND DTM.RS.QTYPE<1,SC>[1,1]="D"
      CASE 1
         DTM.STATUS<1,SC>="INVALID QUANTITY TYPE";GOTO 2099
   END CASE
   BARCODE.FLAG=1
   MATREAD INV.REC FROM INVENTORY, CONO:DTM.PROD<1,SC> ELSE MAT INV.REC = ""
   MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE ELSE MAT CATG.REC=''
*T28076 v
*  IF CATG.BARCODE = "Y" THEN BARCODE.FLAG = 1 ELSE BARCODE.FLAG = 0  
   IF CATG.TRK.LVL = "S" THEN BARCODE.FLAG = 1 ELSE BARCODE.FLAG = 0  
   IF NOT(BARCODE.FLAG) THEN
      BEGIN CASE
         CASE DTM.QTY<1,SC> <= 0 AND DTM.RS.QTYPE<1,SC>[2,1] # "R"
            DTM.STATUS<1,SC> = 'MUST HAVE A POSITIVE QUANTITY';GOTO 2099
         CASE DTM.QTY<1,SC> > IWLO.LOC.ON.HAND AND CATG.TRACK.QOH = "Y"
            DTM.STATUS<1,SC> = "QUANTITY USED IS MORE THAN ON HAND"; GOTO 2099
         CASE S.OSJ<1,SC> = 0
            IF DTM.QTY<1,SC> < 0 THEN
               DTM.STATUS<1,SC> = "QUANTITY REVERSED IS MORE THAN USED"; GOTO 2099
            END
      END CASE
   END
2099 RETURN
*
***** POST MATL
3000 PRDS.ID = ""
   CCW.ID = ""
*T28309 v FOR PMT = TYPE.CNT TO 1 STEP -1
   FOR PMT = 1 TO TYPE.CNT
      IF DTM.PMT.FLG<1,PMT> # "" THEN GOTO 3999
      IF DTM.PROD<1,PMT> = "" OR DTM.PROD<1,PMT> = "0" THEN GOTO 3999
      MAT DMT.REC = ""
      IF S.OSJ<1,PMT> THEN
         MAT JOB.REC = ""
      END ELSE
         MATREADU JOB.REC FROM JOB,CONO : DTM.JOB<1,PMT> ELSE
            DTM.STATUS<1,PMT> = "CANNOT LOCATE JOB - " : DTM.JOB<1,PMT>
            RELEASE JOB,CONO:DTM.JOB<1,PMT>
            GOTO 3999
         END
      END
      DMT.JOB = DTM.JOB<1,PMT>
      DMT.TYPE = DTM.JOB.TYPE<1,PMT>
      DMT.DIV = DTM.DIV<1,PMT>
      DMT.DEPT = DTM.DEPT<1,PMT>
      DMT.CCTR = DTM.CCTR<1,PMT>
      DMT.PROD = DTM.PROD<1,PMT>
      DMT.WHSE = DTM.WHSE<1,PMT>
      DMT.LOC = DTM.LOC<1,PMT>
      DMT.SERIAL = DTM.SERIAL<1,PMT>
      DMT.QTY = DTM.QTY<1,PMT>
      DMT.SHEET = DTM.SHEET<1,PMT>
      DMT.SPOIL.CODE = DTM.SPOIL.CODE<1,PMT>
      DMT.INIT = DTM.INIT<1,PMT>
      DMT.COST = DTM.COST<1,PMT>
      DMT.RS.QTYPE = DTM.RS.QTYPE<1,PMT>
      DMT.DATE=DTM.DATE
      IF DTM.TIME.STAMP<1,PMT> # "" THEN
         DMT.TIME = MOD(DTM.TIME.STAMP<1,PMT>,100000)
         DMT.USAGE.SEQ = DTM.TIME.STAMP<1,PMT>
      END ELSE
         DMT.USAGE.SEQ = DMT.DATE*100000
      END
      DMT.PRT.DATE = TODAY
      IWH.ID = CONO:DMT.PROD:"!":DMT.WHSE
      IWLO.ID = IWH.ID : "!" : DMT.LOC
      IJS.ID = IWH.ID : "!" : DMT.JOB
      READU DMT.ID FROM CONTROL,CONO:"DAILY.MATL" ELSE DMT.ID=10000
      SOK = 0
      LOOP
         READV CHKREC FROM DAILY.MATL,CONO:DMT.ID,1 ELSE SOK=1
      UNTIL SOK DO
         DMT.ID = DMT.ID + 1
         IF DMT.ID > 999999 THEN DMT.ID = 10001
      REPEAT
      NEXT.ID = DMT.ID + 1
      IF NEXT.ID > 999999 THEN NEXT.ID = 10001
      WRITE NEXT.ID ON CONTROL,CONO:"DAILY.MATL"
      JMT.ID = DMT.ID; POST.OSJ = S.OSJ<1,PMT>
      BARCODE.FLAG=1
      MATREAD INV.REC FROM INVENTORY, CONO:DMT.PROD ELSE MAT INV.REC = ""
      MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE ELSE MAT CATG.REC=''
*T28076 v
*     IF CATG.BARCODE = "Y" THEN BARCODE.FLAG = 1 ELSE BARCODE.FLAG = 0  
      IF CATG.TRK.LVL = "S" THEN BARCODE.FLAG = 1 ELSE BARCODE.FLAG = 0  
      IF NOT(BARCODE.FLAG) THEN
         JWPTR=''
      * T26665 v
      * CALL POST.MATL.SUB(CONO,"P",WLR.MT.COST,WLR.MT.WIP,WLR.SPL,WLR.NON.CHG,JWPTR)
         CALL POST.MATL.SUB(CONO,"P",WLR.MT.COST,WLR.MT.WIP,WLR.SPL,WLR.NON.CHG,JWPTR,CURR.MON)
      * T26665 ^
         BEGIN CASE
            CASE DMT.STATUS # ""
               GOSUB RELEASE.INV.LOCKS
               RELEASE INV.STATS,IWH.ID
               RELEASE INV.JOB.STATS,IJS.ID
               RELEASE JOB,CONO : DMT.JOB
               IF PRDS.ID # "" THEN
                  RELEASE PROD.STATS,PRDS.ID
               END
               IF CCW.ID # "" THEN
                  RELEASE COST.CNTR.WIP,CCW.ID
               END
               DTM.STATUS<1,PMT> = DMT.STATUS
            CASE S.OSJ<1,PMT> = "0"
               DTM.PMT.FLG<1,PMT> = "Y"
               MATWRITE JMT.REC ON JOB.MATL,JMT.ID
               MATWRITE JOB.REC ON JOB,CONO : DMT.JOB
               MATWRITE INV.REC ON INVENTORY,CONO : DMT.PROD  ;*T24531
               IF ISTAT.JOB = "" AND ISTAT.PO = "" THEN
                  DELETE INV.STATS,IWH.ID
               END ELSE
                  MATWRITE INV.STAT.REC ON INV.STATS,IWH.ID
               END
               IF IJS.JOB.QTY+IJS.JOB.ALOC+IJS.REQ.QTY = 0 AND IJS.JMT.SEQ = "" THEN
                  DELETE INV.JOB.STATS,IWH.ID:"!":DMT.JOB
               END ELSE
                  MATWRITE INV.JS.REC ON INV.JOB.STATS,IWH.ID:"!":DMT.JOB
               END
               MATWRITE PRDS.REC ON PROD.STATS,PRDS.ID
               IF CCW.ID # "" THEN
                  MATWRITE CCW.REC ON COST.CNTR.WIP,CCW.ID
               END
               IF SSR.ID # "" THEN
                  MATWRITE SSR.REC ON SPOIL.STATS,SSR.ID
               END
               IF CATG.TRACK.QOH = "Y" THEN
                  GOSUB SET.INAH                     
                  ACTION=4                           
                  JOB.ID=CONO:DMT.JOB
                  PERIOD=POSTING.MON
                  BEGIN CASE
                     CASE CATG.TRK.LVL='S'
                        TMP.ARR= DMT.SERIAL                
                        CALL JCS.IWH.SUB(IWH.ID,JOB.ID,PERIOD,TMP.ARR,ACTION,OPEN.FLAG)
                     CASE CATG.TRK.LVL='G'
                        TMP.ARR=DMT.LOC
                        CALL JCS.IWH.SUB(IWH.ID,JOB.ID,PERIOD,TMP.ARR,ACTION,OPEN.FLAG)
                  END CASE
               END ELSE
                  GOSUB RELEASE.INV.LOCKS
               END
               IF GANG.PRESENT THEN
                  READV REC FROM GANG.JOB,CONO:DTM.JOB<1,PMT>,1 THEN
                     MTL.ID=JMT.ID[4,99]
                     JDPTR=DCOUNT(JMT.DCOST,VM)
                     STATUS=""
                     CALL GANG.MT.ALLOC.SUB(CONO,MTL.ID,JDPTR,MAT WIP.LEVEL.REC,GANG.JOB,GANG.ALLOC,STATUS,JWPTR)
                  END
               END
            CASE 1
               DTM.PMT.FLG<1,PMT> = "Y"
               MAT OJMT.REC = ""
               OJMT.JOB = DMT.JOB
               OJMT.TYPE = DMT.TYPE
               OJMT.SPOIL.CODE = DMT.SPOIL.CODE
               OJMT.DIV = DMT.DIV
               OJMT.DEPT = DMT.DEPT
               OJMT.CCTR = DMT.CCTR
               OJMT.PROD = DMT.PROD
               OJMT.WHSE = DMT.WHSE
               OJMT.LOC = DMT.LOC
               OJMT.DATE = DMT.DATE
               OJMT.MON = POSTING.MON
               OJMT.QTY = DMT.QTY
               OJMT.DIAM = DMT.NDIAM
               OJMT.SHEET = DMT.SHEET
               OJMT.SERIAL = DMT.SERIAL
               OJMT.DESC = DMT.DESC
               OJMT.COST = JMT.COST
               OJMT.SALE = JMT.SALE
               MATWRITE OJMT.REC ON OJOB.MATL,CONO:DMT.ID
               MATWRITE INV.REC ON INVENTORY,CONO : DMT.PROD  ;*T24531
               RELEASE INV.STATS,IWH.ID
               RELEASE INV.JOB.STATS,IJS.ID
               IF CATG.TRACK.QOH = "Y" THEN
                  GOSUB SET.INAH                     
                  ACTION=4                           
                  PERIOD=POSTING.MON
                  BEGIN CASE                                                    
                     CASE CATG.TRK.LVL='S'                                       
                        TMP.ARR= DMT.SERIAL                                       
                        CALL JCS.IWH.SUB(IWH.ID,JOB.ID,PERIOD,TMP.ARR,ACTION,OPEN.FLAG)
                     CASE CATG.TRK.LVL='G'                                       
                        TMP.ARR=DMT.LOC                                           
                        CALL JCS.IWH.SUB(IWH.ID,JOB.ID,PERIOD,TMP.ARR,ACTION,OPEN.FLAG)
                  END CASE                                                      
               END ELSE
                  GOSUB RELEASE.INV.LOCKS
               END
         END CASE
         RELEASE JOB,CONO:DMT.JOB
      END ELSE
         MATREAD INV.REC FROM INVENTORY, CONO:DMT.PROD ELSE
            DMT.STATUS = 'PRODUCT # ':DMT.PROD:' IS MISSING'
            GOTO 3599
         END
         MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
            DMT.STATUS = 'CANNOT LOCATE PRODUCT LINE ':INV.LINE
            GOTO 3599
         END
         LOCATE DMT.WHSE IN INV.WHSE.CODE<1>,1 SETTING FND.WHSE ELSE
            DMT.STATUS = 'PRODUCT # ':DMT.PROD:' IS NOT IN WHSE # ':DMT.WHSE
            GOTO 3599
         END
         IWH.ID = CONO : DMT.PROD : '!' : DMT.WHSE
         IH.ID = CONO : DMT.PROD
         MATREAD IWH.REC FROM INV.WHSE, IWH.ID ELSE
            DMT.STATUS = 'WAREHOUSE # ':DMT.WHSE:' IS MISSING FROM PRODUCT # ':DMT.PROD
            GOTO 3599
         END
         IWLO.ID = IWH.ID : "!" : DMT.LOC
         MATREAD IWLO.REC FROM INV.WHSE.LOC, IWLO.ID ELSE
            DMT.STATUS = "LOCATION # ":DMT.LOC:" IS MISSING FROM # ":DMT.PROD:",":DMT.WHSE
            GOTO 3599
         END
3599 *
         IF DMT.STATUS # "" THEN
            DTM.STATUS<1,PMT> = DMT.STATUS
         END ELSE
            MATWRITE DMT.REC ON DAILY.MATL,CONO:DMT.ID
            DTM.PMT.FLG<1,PMT> = "Y"  ;* T21243
         END
      END
3999 NEXT PMT
   RETURN
*
***** POST TIME
4000 *
   IF CO.PRS = "E" AND CO.PRS.INTERFACE = "Y" THEN
      MATREAD WSS.REC FROM WORK.SHIFT,CONO:"!":EMP.WRK.SCHD<1,SHIFT> ELSE MAT WSS.REC = ''
   END
*T28309 v FOR SCC = TYPE.CNT TO 1 STEP -1
   FOR SCC = 1 TO TYPE.CNT
      IF DTM.TYPE<1,SCC> = "M" THEN GOTO 4999
      MAT JLB.REC = ''; MAT OJLB.REC = ''
*--- PRS INTERFACE FOR STANDARD PAYROLL
      IF CO.PRS.INTERFACE = "Y" AND CO.PRS = "Y" AND S.PR.HRS<1,SCC> + 0 # 0 AND EMP.SOC.SEC # "" THEN
         IF DTM.TYPE<1,SCC> = "L" OR DTM.TYPE<1,SCC> = "I" THEN GOTO 4999
         PRS.KEY = CONO:DTM.EMP:"!":DTM.DIV<1,SCC>:"!":DTM.DEPT<1,SCC>:"!":DTM.CCTR<1,SCC>:"!":DTM.DATE
         MATREADU DHR.REC FROM DAILY.HOURS,PRS.KEY ELSE MAT DHR.REC = ""
         DHR.DEPT = EMP.DEPT
         BEGIN CASE
            CASE DTM.JOB.TYPE<1,SCC> = "N"
               BEGIN CASE
                  CASE S.FCTR<SCC> <= "100"
                     DHR.REG.NON = DHR.REG.NON + S.PR.HRS<1,SCC>
                  CASE S.FCTR<SCC> > "100" AND S.FCTR<SCC> < "200"
                     DHR.OT.NON = DHR.OT.NON + S.PR.HRS<1,SCC>
                  CASE 1
                     DHR.DT.NON = DHR.DT.NON + S.PR.HRS<1,SCC>
               END CASE
            CASE 1
               BEGIN CASE
                  CASE S.FCTR<SCC> <= "100"
                     DHR.REG = DHR.REG + S.PR.HRS<1,SCC>
                  CASE S.FCTR<SCC> > "100" AND S.FCTR<SCC> < "200"
                     DHR.OT = DHR.OT + S.PR.HRS<1,SCC>
                  CASE 1
                     DHR.DT = DHR.DT + S.PR.HRS<1,SCC>
               END CASE
         END CASE
         MATWRITE DHR.REC ON DAILY.HOURS,PRS.KEY
      END
*---PRS INTERFACE FOR ENHANCED PAYROLL
      IF CO.PRS = "E" AND CO.PRS.INTERFACE = "Y" AND S.PR.HRS<1,SCC> + 0 # 0 AND EMP.SOC.SEC # "" THEN
         DTE=DTM.DATE;DAY=''
         DD=MOD(DTE,7)
         BEGIN CASE
            CASE DD=0
               DAY='SUN'
            CASE DD=1
               DAY='MON'
            CASE DD=2
               DAY='TUE'
            CASE DD=3
               DAY='WED'
            CASE DD=4
               DAY='THU'
            CASE DD=5
               DAY='FRI'
            CASE DD=6
               DAY='SAT'
         END CASE
         LOCATE DAY IN WSS.DAY<1> SETTING POS ELSE GO 4020
         IF WSS.LUN.PD<1,POS> # "Y" AND DTM.TYPE<1,SCC> = "L" THEN GO 4999
         GO 4030
4020 *
         BEGIN CASE
            CASE DAY='SAT'
               IF WSS.USH.LUN<1,2> # "Y" AND DTM.TYPE<1,SCC> = "L" THEN GO 4999
            CASE DAY='SUN'
               IF WSS.USH.LUN<1,3> # "Y" AND DTM.TYPE<1,SCC> = "L" THEN GO 4999
            CASE 1
               IF WSS.USH.LUN<1,1> # "Y" AND DTM.TYPE<1,SCC> = "L" THEN GO 4999
         END CASE
4030 *
         IF DTM.CLASS.CD<1,SCC> = '' THEN DTM.CLASS.CD<1,SCC> = EMP.JOB.CLASS
         IF DTM.RATE<1,SCC> = '' THEN DTM.RATE<1,SCC>= EMP.JOB.CL.RATE
         IF DTM.TYPE<1,SCC> = "L" OR DTM.TYPE<1,SCC> = "I" THEN
            DTM.DEPT<1,SCC>=EMP.DEPT;DTM.DIV<1,SCC>=EMP.DIV;DTM.CCTR<1,SCC>=EMP.COST.CNTR
         END
         EPS.KEY=CONO:DTM.EMP:"!":DTM.DATE:"!":SHIFT
         IF DTM.TYPE<1,SCC> = "L" OR DTM.TYPE<1,SCC> = "I" OR DTM.JOB.TYPE<1,SCC> = "N" THEN
            EPS.KEY=EPS.KEY:"!":EPSC.NC.REG
         END ELSE
            EPS.KEY=EPS.KEY:"!":EPSC.REG
         END
         EPS.KEY=EPS.KEY:"!":DTM.RATE<1,SCC>:"!":DTM.DIV<1,SCC>:"!":DTM.DEPT<1,SCC>
         EPS.KEY=EPS.KEY:"!":DTM.CCTR<1,SCC>:"!":DTM.CLASS.CD<1,SCC>
         MATREADU EPS.REC FROM DAILY.HOURS,EPS.KEY ELSE
            MAT EPS.REC = ''
            EPS.DEPT=EMP.DEPT
*CSF 25344 v
            EPS.START=DTM.TIME.ST<1,1>
            EPS.WSS=EMP.WRK.SCHD<1,SHIFT>
         END
         IF EPS.STOP = "" THEN EPS.STOP=DTM.TIME<1,SCC>
         EPS.REG=EPS.REG + S.PR.HRS<1,SCC>
         EPS.SOURCE="JCS"
         MATWRITE EPS.REC ON DAILY.HOURS,EPS.KEY
         IF DTM.TYPE<1,SCC> = "L" OR DTM.TYPE<1,SCC> = "I" THEN GO 4999
      END
      IF S.OSJ<1,SCC> = "0" THEN
         MATREADU JOB.REC FROM JOB,CONO:DTM.JOB<1,SCC> ELSE MAT JOB.REC = ""
         OJLB.JOB = DTM.JOB<1,SCC>
         JLB.SEQ = DTM.SEQ<1,SCC>
         JLB.TYPE = DTM.JOB.TYPE<1,SCC>
         JLB.DIV = DTM.DIV<1,SCC>
         OJLB.DEPT = DTM.DEPT<1,SCC>
         OJLB.CCTR = DTM.CCTR<1,SCC>
         JLB.OPER = DTM.OPER<1,SCC>
         JLB.OPER.COMP = DTM.OPER.COMPLETE<1,SCC> ;*T25907
         JLB.TIME.STAMP = DTM.TIME.STAMP<1,SCC> ;*T29043
         JLB.FCTR = DTM.TIME.CODE<1,SCC>
         JLB.EMP = DTM.EMP
         JLB.IMP = DTM.IMP<1,SCC>
         JLB.CNCR = S.HRS<1,SCC> - S.PR.HRS<1,SCC>
         IF JLB.CNCR < 2 THEN JLB.CNCR = "0"
         JLB.DATE = DTM.DATE
         JLB.MON = POSTING.MON
         JLB.HRS.STD = S.STD.HRS<1,SCC>
         JLB.IMP.STD = S.STD.IMP<1,SCC>
         JLB.HRS = S.HRS<1,SCC>
         JLB.COST = S.COST<1,SCC>
         JLB.WIP = ""; JLB.DCOST = ""; DPTR = S.DPTR<1,SCC>
         FOR I = 1 TO DPTR
            JLB.DCOST<1,I> = S.DCOST<1,SCC,I>
         NEXT I
         BEGIN CASE
            CASE WLR.SPL = "N" AND DTM.JOB.TYPE<1,SCC> = "S"
               WPTR = 0
            CASE WLR.NON.CHG = "N" AND DTM.JOB.TYPE<1,SCC> = "N"
               WPTR = 0
            CASE 1
               IF DPTR < WLR.LB.WIP THEN
                  WPTR = DPTR
               END ELSE
                  WPTR = WLR.LB.WIP
               END
               FOR I = 1 TO WPTR
                  JLB.WIP<1,1,I> = JLB.DCOST<1,I>
               NEXT I
         END CASE
         JLB.SALE = S.SALE<1,SCC>
         JLB.SPOIL.CODE = DTM.SPOIL.CODE<1,SCC>
         PCNT=DCOUNT(DTM.ADD.PRMPT.CD<1,SCC>,SVM)
         FOR P=1 TO PCNT
            JLB.PRMPT.CODE<1,P>=DTM.ADD.PRMPT.CD<1,SCC,P>
            JLB.PRMPT.RESP<1,P>=DTM.ADD.RESP<1,SCC,P>
         NEXT P
         JLB.SHIFT = SHIFT
         IF JLB.SPOIL.CODE # "" THEN
            SSR.ID = CONO:JLB.DIV:OJLB.DEPT:"!":OJLB.CCTR:JLB.MON:JLB.SPOIL.CODE
            MATREADU SSR.REC FROM SPOIL.STATS,SSR.ID ELSE MAT SSR.REC = ""
            SSR.LB<1,1> = SSR.LB<1,1> + JLB.DCOST<1,1>
            SSR.LB<1,2> = SSR.LB<1,2> + JLB.DCOST<1,2>
            SSR.LB<1,3> = SSR.LB<1,3> + JLB.DCOST<1,3>
            SSR.LB<1,4> = SSR.LB<1,4> + JLB.DCOST<1,4>
            MATWRITE SSR.REC ON SPOIL.STATS,SSR.ID
         END
         GOSUB 4100
         IF CO.PSS="Y" OR CO.PSS = "T" THEN
            CALL JOB.TRANS.UPD(CONO,DTM.ID,MAT DTM.REC,SCC,JOB.TRANS)
         END
         IF GANG.PRESENT THEN
            READV REC FROM GANG.JOB,CONO:DTM.JOB<1,SCC>,1 THEN
               LAB.ID=JLB.ID[4,99]
               JDPTR=S.DPTR<1,SCC>
               STATUS=""
               CALL GANG.LB.ALLOC.SUB(CONO,LAB.ID,JDPTR,MAT WIP.LEVEL.REC,GANG.JOB,GANG.ALLOC,STATUS)
            END
         END
      END ELSE
         OJLB.JOB = DTM.JOB<1,SCC>
         OJLB.TYPE = DTM.JOB.TYPE<1,SCC>
         OJLB.DIV = DTM.DIV<1,SCC>
         OJLB.DEPT = DTM.DEPT<1,SCC>
         OJLB.CCTR = DTM.CCTR<1,SCC>
         OJLB.OPER = DTM.OPER<1,SCC>
         OJLB.FCTR = DTM.TIME.CODE<1,SCC>
         OJLB.EMP = DTM.EMP
         OJLB.HRS = S.HRS<1,SCC>
         OJLB.IMP = DTM.IMP<1,SCC>
         OJLB.CNCR = S.HRS<1,SCC> - S.PR.HRS<1,SCC>
         OJLB.DATE = DTM.DATE
         OJLB.MON = POSTING.MON
         OJLB.COST = S.COST<1,SCC>
         OJLB.SALE = S.SALE<1,SCC>
         OJLB.TIME.ST = DTM.TIME.ST<1,SCC>
         OJLB.TIME.EN = DTM.TIME<1,SCC>
         OJLB.HRS.ST = DTM.TIME.ST<1,SCC>
         OJLB.HRS.EN = DTM.TIME<1,SCC>
         OJLB.SPOIL.CODE = DTM.SPOIL.CODE<1,SCC>
         OJLB.SHIFT = SHIFT
         OJLB.ADD.PRPMT.CD = DTM.ADD.PRMPT.CD<1,SCC>
         OJLB.ADD.PRPMT.CD = CHANGE(OJLB.ADD.PRPMT.CD,SVM,VM)
         OJLB.ADD.RESP = DTM.ADD.RESP<1,SCC>
         OJLB.ADD.RESP = CHANGE(OJLB.ADD.RESP,SVM,VM)
         MATWRITE OJLB.REC ON OJOB.TIME,CONO:DTM.SEQ<1,SCC>
      END
4999 NEXT SCC
   RETURN
**** UPDATE JOB RECORD FOR TIME
4100 DFND = 1; MATCHED = 0
   DCNT = COUNT(JOB.LB.DEPT,VM) + (JOB.LB.DEPT # "")
   FOR D = 1 TO DCNT WHILE MATCHED = 0
      BEGIN CASE
         CASE OJLB.DEPT = JOB.LB.DEPT<1,D>
            IF OJLB.CCTR = JOB.LB.CCTR<1,D> THEN
               DFND = D
               MATCHED = 1
            END ELSE
               DFND = D + 1
            END
         CASE OJLB.DEPT > JOB.LB.DEPT<1,D>
            DFND = D + 1
      END CASE
   NEXT D
   IF MATCHED = 0 THEN
      IF DFND <= DCNT THEN
         JOB.LB.SEQ = INSERT(JOB.LB.SEQ,1,DFND,0,"")
         JOB.LB.DEPT = INSERT(JOB.LB.DEPT,1,DFND,0,"")
         JOB.LB.CCTR = INSERT(JOB.LB.CCTR,1,DFND,0,"")
         JOB.LB.OPER = INSERT(JOB.LB.OPER,1,DFND,0,"")
         JOB.LB.HRS = INSERT(JOB.LB.HRS,1,DFND,0,"")
         JOB.LB.IMP = INSERT(JOB.LB.IMP,1,DFND,0,"")
         JOB.LB.DATE = INSERT(JOB.LB.DATE,1,DFND,0,"")
         JOB.LB.TCOST = INSERT(JOB.LB.TCOST,1,DFND,0,"")
         JOB.LB.DCOST = INSERT(JOB.LB.DCOST,1,DFND,0,"")
         JOB.LB.COST = INSERT(JOB.LB.COST,1,DFND,0,"")
         JOB.LB.SALE = INSERT(JOB.LB.SALE,1,DFND,0,"")
      END
      JOB.LB.DEPT<1,DFND> = OJLB.DEPT
      JOB.LB.CCTR<1,DFND> = OJLB.CCTR
   END
   LB.ID = CONO:OJLB.JOB:"!":OJLB.DEPT:"!":OJLB.CCTR:"!"
   LOOP
      JOB.LB.SEQ<1,DFND> = JOB.LB.SEQ<1,DFND> + 1
      JLB.ID = LB.ID:JOB.LB.SEQ<1,DFND>
      READ DUMMY FROM JOB.TIME,JLB.ID ELSE DUMMY = ""
   WHILE DUMMY # "" DO REPEAT
   MATWRITE JLB.REC ON JOB.TIME,JLB.ID
   IF JLB.WIP # "" THEN
      CCW.ID = CONO:JLB.DIV:OJLB.DEPT:"!":OJLB.CCTR:JLB.MON
      MATREADU CCW.REC FROM COST.CNTR.WIP,CCW.ID ELSE MAT CCW.REC = ""
      JOB.WIP<1,1> = JOB.WIP<1,1> + 2
      JOB.LB.WIP<1,1> = JOB.LB.WIP<1,1> + 2
      FOR W = 1 TO WPTR
         JOB.WIP<1,2,W> = JOB.WIP<1,2,W> + JLB.WIP<1,1,W>
         JOB.LB.WIP<1,2,W> = JOB.LB.WIP<1,2,W> + JLB.WIP<1,1,W>
         CCW.LB.I<1,W> = CCW.LB.I<1,W> + JLB.WIP<1,1,W>
      NEXT W
      MATWRITE CCW.REC ON COST.CNTR.WIP,CCW.ID
   END
   IF JLB.MON < JOB.LB.WIP<1,4> OR JOB.LB.WIP<1,4> = "" THEN
      JOB.LB.WIP<1,4> = JLB.MON
      IF JLB.MON < JOB.WIP<1,4> OR JOB.WIP<1,4> = "" THEN
         JOB.WIP<1,4> = JLB.MON
      END
   END
   IF JLB.MON > JOB.LB.WIP<1,5> THEN
      JOB.LB.WIP<1,5> = JLB.MON
      IF JLB.MON > JOB.WIP<1,5> THEN
         JOB.WIP<1,5> = JLB.MON
      END
   END
   IF JLB.DATE >= JOB.LB.DATE<1,DFND,1> THEN
      JOB.LB.DATE<1,DFND,1> = JLB.DATE
   END
   IF JLB.SEQ > JOB.LB.DATE<1,DFND,2> THEN
      JOB.LB.OPER<1,DFND> = JLB.OPER
      JOB.LB.DATE<1,DFND,2> = JLB.SEQ
      JOB.LB.DATE<1,DFND,3> = JOB.LB.SEQ<1,DFND>
   END
   JOB.LB.HRS<1,DFND> = JOB.LB.HRS<1,DFND> + JLB.HRS
   JOB.LB.IMP<1,DFND> = JOB.LB.IMP<1,DFND> + JLB.IMP
   JOB.LB.COST<1,DFND> = JOB.LB.COST<1,DFND> + JLB.COST
   FOR I = 1 TO DPTR
      JOB.LB.DCOST<1,DFND,I> = JOB.LB.DCOST<1,DFND,I> + JLB.DCOST<1,I>
   NEXT I
   JOB.LB.SALE<1,DFND> = JOB.LB.SALE<1,DFND> + JLB.SALE
   PSR.ID = CONO:"!":JLB.DIV:"!":OJLB.DEPT:"!":OJLB.CCTR:"!":JLB.OPER:"!":JLB.EMP:"!":JLB.MON
   MATREADU PSR.REC FROM PERF.STATS,PSR.ID ELSE MAT PSR.REC = ""
   IF JLB.CNCR <> 0 THEN
      PSR.CNC.HRS = PSR.CNC.HRS + JLB.CNCR
      IF JLB.CNCR = JLB.HRS THEN
         JOB.LB.TCOST<1,DFND,5> = JOB.LB.TCOST<1,DFND,5> + JLB.COST
         PSR.CNC.IMP = PSR.CNC.IMP + JLB.IMP
      END ELSE
         PCT = JLB.CNCR / (JLB.HRS / 1000)
         JOB.LB.TCOST<1,DFND,5> = JOB.LB.TCOST<1,DFND,5> + INT((JLB.COST /1000) * PCT + .5)
         PSR.CNC.IMP = PSR.CNC.IMP + INT((JLB.IMP / 1000) * PCT + .5)
      END
   END
   BEGIN CASE
      CASE JLB.TYPE = "N"
         PTR = 2
      CASE JLB.TYPE = "S"
         PTR = 4
      CASE JLB.TYPE = "C"
         PTR = 3
      CASE 1
         PTR = 1
   END CASE
   IF JLB.CNCR + 0 = 0 THEN      ;* UPDATE PERF-PROD STATS ONLY IF CONCURRENT = 0
      PRDS.ID = CONO:"*":JLB.DIV:"*":OJLB.DEPT:"*":OJLB.CCTR:"*":JLB.MON:"*":SHIFT:"*A"
      MATREADU PRDS.REC FROM PROD.STATS,PRDS.ID ELSE MAT PRDS.REC = ""
      BEGIN CASE
         CASE JLB.TYPE = "N"
            PRDS.LAB.NC.HRS = PRDS.LAB.NC.HRS + JLB.HRS
            PRDS.LAB.NC.COST = PRDS.LAB.NC.COST + JLB.COST
            PSR.N.C.HRS = PSR.N.C.HRS + JLB.HRS
            PSR.N.C.IMP = PSR.N.C.IMP + JLB.IMP
         CASE JLB.TYPE = "C"
            PRDS.LAB.HRS = PRDS.LAB.HRS + JLB.HRS
            PRDS.LAB.COST = PRDS.LAB.COST + JLB.COST
            PSR.CHG.HRS = PSR.CHG.HRS + JLB.HRS
            PSR.CHG.IMP = PSR.CHG.IMP + JLB.IMP
         CASE JLB.TYPE = "S"
            PRDS.LAB.SP.HRS = PRDS.LAB.SP.HRS + JLB.HRS
            PRDS.LAB.SP.COST = PRDS.LAB.SP.COST + JLB.COST
            PSR.N.C.HRS = PSR.N.C.HRS + JLB.HRS
            PSR.N.C.IMP = PSR.N.C.IMP + JLB.IMP
         CASE 1
            JLB.TYPE = "R"
            PRDS.LAB.HRS = PRDS.LAB.HRS + JLB.HRS
            PRDS.LAB.COST = PRDS.LAB.COST + JLB.COST
            PSR.CHG.HRS = PSR.CHG.HRS + JLB.HRS
            PSR.CHG.IMP = PSR.CHG.IMP + JLB.IMP
      END CASE
      BEGIN CASE
         CASE JLB.FCTR = "02"
            PRDS.LAB.OT.HRS = PRDS.LAB.OT.HRS + JLB.HRS
            PRDS.LAB.OT.COST = PRDS.LAB.OT.COST + JLB.COST
            PSR.O.T.HRS = PSR.O.T.HRS + JLB.HRS
         CASE JLB.FCTR = "03"
            PRDS.LAB.DT.HRS = PRDS.LAB.DT.HRS + JLB.HRS
            PSR.D.T.HRS = PSR.D.T.HRS + JLB.HRS
            PRDS.LAB.DT.COST = PRDS.LAB.DT.COST + JLB.COST
      END CASE
      MATWRITE PRDS.REC ON PROD.STATS,PRDS.ID
   END
*
   IF JLB.HRS.STD + JLB.IMP.STD <> 0 THEN
      PSR.ACT.HRS = PSR.ACT.HRS + JLB.HRS
      PSR.STD.HRS = PSR.STD.HRS + JLB.HRS.STD
      PSR.ACT.IMP = PSR.ACT.IMP + JLB.IMP
      PSR.STD.IMP = PSR.STD.IMP + JLB.IMP.STD
   END
   PSR.DEPT = OJLB.DEPT
   PSR.OPER = OJLB.OPER
   MATWRITE PSR.REC ON PERF.STATS,PSR.ID
   JOB.LB.TCOST<1,DFND,PTR> = JOB.LB.TCOST<1,DFND,PTR> + JLB.COST
   BEGIN CASE
      CASE JOB.STATUS = ''
         JOB.STATUS = INSERT(JOB.STATUS,1,1,0,"1")
         JOB.STAT.DATE = INSERT(JOB.STAT.DATE,1,1,0,TODAY)
      CASE JOB.STATUS<1,1>='1'
      CASE JOB.STATUS<1,1>='5'
      CASE 1
         JOB.STATUS = INSERT(JOB.STATUS,1,1,0,"5")
         JOB.STAT.DATE = INSERT(JOB.STAT.DATE,1,1,0,TODAY)
   END CASE
*
   IF JOB.TRACK.DATE<1,5> = "" THEN JOB.TRACK.DATE<1,5> = DTM.DATE
   JOB.TOT.DCOST = JOB.TOT.DCOST + JLB.DCOST<1,1>
   JOB.TOT.COST = JOB.TOT.COST + JLB.COST
   JOB.TOT.SALE = JOB.TOT.SALE + JLB.SALE
   MATWRITE JOB.REC ON JOB,CONO : OJLB.JOB
   RETURN
*
***********
SET.INAH: 
***********
*
   IF DMT.DIV='' THEN DMT.DIV=GEN.DIV
   INAH.PROD=DMT.PROD                         
   INAH.WHSE=DMT.WHSE                         
   INAH.TYPE='S'                              
   INAH.SRC='U'                               
   INAH.DATE=DMT.DATE                         
   INAH.PERIOD=POSTING.MON                    
   INAH.JOB=DMT.JOB                           
   INAH.RECP.NO=ISTK.RECP                  
   INAH.LOC=DMT.LOC                           
   INAH.TRAN=DMT.JOB                          
   INAH.SERIAL=DMT.SERIAL                     
   INAH.QTY = INAH.NEW.QTY - INAH.CUR.QTY     
   INAH.DV.DP.CC = DMT.DIV:GEN.DEPT:GEN.CCTR  
   RETURN
*
*******************
RELEASE.INV.LOCKS: 
*******************
*
   ;*27242 v
   RELEASE INV_SERIAL_TEMP
   RELEASE INV_SERIAL
   RELEASE INV_RECP_WHSE_TEMP
   RELEASE INV_RECP_WHSE
   RELEASE INV_RECEIPTS_TEMP
   RELEASE INV_RECEIPTS
   RELEASE INV.WHSE.LOC.TEMP
   ;* 27242 ^
   RELEASE INV.WHSE,IWH.ID
   RELEASE INV.WHSE.LOC,IWLO.ID
   RETURN
91000 ERR.TYPE = 1
   CALL SYSCOM(MAT SYSCOM.REC)
   RETURN
93000 ERR.TYPE = 3
   CALL SYSCOM(MAT SYSCOM.REC)
****** END OF JOB
*
99999 END
