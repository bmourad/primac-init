   SUBROUTINE POST.MATL.SUB(CONO,SUB.ACTION,WLR.MT.COST,WLR.MT.WIP,WLR.SPL,WLR.NON.CHG,JWPTR,CURR.MON)
*COPY>CPYLIB>COM1
*COPY>JCS.CPYLIB>COM.JCS.LINK
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>JCS.CPYLIB>COM.INV.STATS 
*****************************************************************
* REVISION    - [08.0B]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - JCSBP
* PROGRAM     - POST.MATL.SUB
* AUTHOR      - ZIAD YAMOUT , C.B.A
* DESCRIPTION
* This program posts DAILY.MATL items to the Inventory files.
*
* SUB.ACTION="P" - Partial Edit (Allow zero quantity)
*            "F" - Full Edit
* C25667 GAT 5/9/96 * CORRECT PC/MSI POST ON MINUTE CALC DIF.
*T21600 lanny 02/18/1997 * Clear small qty remaining on roll.
*T24850 aron 02/23/2000 * Update IWLO.CURR.SHEET for depletion
*T26334 epitka 12/12/2001 * REV12
*T26556 adelgado 05/10/2002 * Add validation for period checking at the
*                             serial level.
*T26599 epitka 06/18/2002 * ALLOW USE OF A NON RESERVED SERIAL ON THE
*                           JOB WITHOUT REDUCING RESERVED QTY.
*T26665 adelgado 07/05/2002 * Mods to recalculate Average cost if
*                             posting to a future period.
*T26767 epitka 07/24/2002 * CHANGE OF ARGUMENTS FOR INV.AVG.COST.MAINT
*T26505 epitka 08/23/2002 * FORCE LOCATION FROM SERIAL
*T26948 epitka 10/24/2002 * add actual costing
*T27596 lross 07/24/2003 * INV.JOB.STATS record trashed for multilple
*                          receipts same prod/whse/job "AC"tual cost.
*T28064 lross 04/26/2004 * 'AC' cost needs IJS.RECP.NO(s) updated.
*T29061 lross 07/19/2007 * Include SALT T28860 in base REV14.
******************************************************************
*
*---- COPY STATEMENTS
*
*COPY>JCS.CPYLIB>JOB
*COPY>JCS.CPYLIB>DAILY.MATL
*COPY>JCS.CPYLIB>JOB.MATL
*COPY>JCS.CPYLIB>FOH.TABLE
*COPY>JCS.CPYLIB>PROD.STATS
*COPY>JCS.CPYLIB>COST.CNTR.WIP
*COPY>JCS.CPYLIB>SPOIL.STATS
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>CATEGORY
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.HIST
*COPY>ICS.CPYLIB>INV_AUDIT_HIST
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>ICS.CPYLIB>INV.STATS
*COPY>ICS.CPYLIB>INV.JOB.STATS
*COPY>ICS.CPYLIB>INV.CNV
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>ICS.CPYLIB>INV_SERIAL
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*
   DEFFUN CALC.STK.QTY (COST.QTY,MAT INV.CNV.REC,ROND,LN)
   DEFFUN CALC.DIAM (COST.QTY,STK.QTY,MAT INV.REC)
*
*---- INTITIALIZATION
*
   OPEN.FLAG=1
   MAT JMT.REC=''
*
*---- MAIN PROCESSING
*
   ERR=0
   IF DMT.QTY < 0 OR (DMT.QTY=0 AND SUB.ACTION="F") THEN
      DMT.STATUS='MUST HAVE A POSITIVE QUANTITY'
   END ELSE
      INV.ID=CONO:DMT.PROD
      MATREADU INV.REC FROM INVENTORY,INV.ID THEN
         IF INV.CUST # "" THEN
            IF "X":INV.CUST # "X":JOB.CUST THEN
               DMT.STATUS="CUSTOMER ":INV.CUST:" OWNS STOCK"
               ERR=1
            END
         END
         IF NOT (ERR) THEN
            MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE THEN
*T29061 v
*              IF CATG.MAJ.LINE="FNGD" THEN
*                 DMT.STATUS="Cannot utilize a Finished Goods product"
*                 ERR=1
*              END ELSE
                  LOCATE DMT.WHSE IN INV.WHSE.CODE<1>,1 SETTING FND.WHSE ELSE
                     DMT.STATUS='PRODUCT # ':DMT.PROD:' IS NOT IN WHSE # ':DMT.WHSE
                     ERR=1
                  END
*              END
*T29061 ^
            END ELSE
               DMT.STATUS='CANNOT LOCATE PRODUCT LINE ':INV.LINE
               ERR=1
            END
         END
      END ELSE
         DMT.STATUS='PRODUCT # ':DMT.PROD:' IS MISSING'
         ERR=1
      END
   END
*
   IF (ERR) THEN GOTO 99999
*
   GOSUB READ.IWH.REC
*
   IF (ERR) THEN GOTO 99999
*T29061 v
   GOSUB READ.IWLO.REC
   IF (ERR) THEN GOTO 99999
*  IF CATG.TRK.LVL='S' THEN
   IF CATG.TRK.LVL='S' OR CATG.TRK.LVL='R' THEN
      IF CATG.TRK.LVL='R' AND SUB.ACTION = 'F' THEN
         FOR FS = 1 TO DCOUNT(IWLO.SERIAL,VM) WHILE DMT.SERIAL = ''
            MATREADU ISTK.REC FROM INV_SERIAL,CONO:IWLO.SERIAL<1,FS> ELSE
               ISTK.RSVB.QTY=0
               RELEASE INV_SERIAL,CONO:IWLO.SERIAL<1,FS>
            END
            IF ISTK.RSVB.QTY >= DMT.QTY AND ISTK.RSVB.QTY > 0 THEN
               DMT.SERIAL = IWLO.SERIAL<1,FS>
               IF SUB.ACTION = 'F' THEN
                  MATWRITEU DMT.REC ON DAILY.MATL,CONO:JMT.ID
               END ELSE RELEASE INV_SERIAL,CONO:IWLO.SERIAL<1,FS>
            END ELSE
               RELEASE INV_SERIAL,CONO:IWLO.SERIAL<1,FS>
            END
         NEXT FS
      END
      IF CATG.TRK.LVL = 'S' OR SUB.ACTION = 'F' THEN
         IF DMT.SERIAL='' THEN               
            DMT.STATUS='NEED A SERIAL NUMBER' 
            ERR=1                             
         END ELSE
            ISTK.ID=CONO:DMT.SERIAL 
            IF RECORDLOCKED(INV_SERIAL_TEMP,ISTK.ID)=0 THEN
               DELETE INV_SERIAL_TEMP,ISTK.ID               
            END                                            
            MATREADU ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID ELSE
               MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID ELSE             
                  DMT.STATUS='INV_SERIAL RECORD ':ISTK.ID:' IS MISSING.'   
                  ERR=1                                                    
               END                                                        
            END                                                          
         END
         IF NOT(ERR) THEN DMT.LOC = ISTK.LOC
      END
   END
*T29061 ^
   IF (ERR) THEN GOTO 99999
*
*T29061 v
*  GOSUB READ.IWLO.REC
*
*  IF (ERR) THEN GOTO 99999
*T29061 ^
*
   PTR=1
   LOOP
      LOCATE DMT.PROD IN JOB.RESV.MATL<1>,PTR SETTING MLOC ELSE
         JOB.RESV.MATL<1,MLOC>=DMT.PROD
         JOB.RESV.WHSE<1,MLOC>=DMT.WHSE
         JOB.RESV.DATE<1,MLOC>='NOT RESV'
         JOB.ALOC.QTY<1,MLOC>=0
         JOB.RESV.QTY<1,MLOC>=0
         JOB.USED.QTY<1,MLOC>=0
         JOB.ALOC.AMT<1,MLOC>=0
         JOB.RESV.AMT<1,MLOC>=0
         JOB.USED.AMT<1,MLOC>=0
      END
      IF DMT.WHSE=JOB.RESV.WHSE<1,MLOC> THEN
         PTR=0
      END ELSE
         PTR=MLOC + 1
      END
   WHILE PTR DO
   REPEAT
   MATREADU INV.STAT.REC FROM INV.STATS, IWH.ID ELSE MAT INV.STAT.REC=''
   LOCATE DMT.JOB IN ISTAT.JOB<1>,1 SETTING JLOC ELSE
      ISTAT.JOB<1,JLOC>=DMT.JOB
   END
   MATREADU INV.JS.REC FROM INV.JOB.STATS, IWH.ID:"!":DMT.JOB ELSE
      MAT INV.JS.REC=""
      IJS.JOB.CUST=JOB.CUST
      IJS.JOB.DATE="NOT RESV"
      IJS.JOB.ALOC=0
      IJS.JOB.QTY=0
      IJS.JOB.USED=0
      IJS.RECP.NO=""
      IJS.FI.ORG=""
      IJS.FI.QTY=""
      IJS.FI.AMT=""
      IJS.JMT.SEQ=""
      IJS.JMT.QTY=""
   END
   GOSUB GET.INV.UM.CNV
   IF INV.PAP.TYPE # "REGULAR" THEN
      GOSUB GET.QTY.TYPE
   END
   IF (ERR) THEN GOTO 99999
   WQA=CALC.STK.QTY(IWH.ON.HAND,MAT INV.CNV.REC,'.5','')
   IF CATG.TRACK.QOH="Y" THEN
      GOSUB CHECK.QTY
   END ELSE
*T29061 IF IWH.LOC="" THEN IWH.LOC=DMT.LOC
      IF IWH.LOC="" AND DMT.LOC # "" THEN IWH.LOC=DMT.LOC
   END
*
   IF (ERR) THEN GOTO 99999
*
   LOCATE DMT.LOC IN IWH.LOC<1>,1 SETTING LLOC ELSE
      DMT.STATUS='CANNOT LOCATE LOCATION ':DMT.LOC
      ERR=1
   END
*
   IF (ERR) THEN GOTO 99999
*
*T29061 v
*  IF CATG.TRK.LVL='S' THEN
   IF CATG.TRK.LVL='S' OR CATG.TRK.LVL='R' THEN
      GOSUB CHECK.SERIAL
   END
*
   IF (ERR) THEN GOTO 99999
*
   INV.LA.SALE=DMT.DATE
   ;*T26599 v T26948
   RESV.ARR=''
*T29061 v
*   IF CATG.TRK.LVL='S' THEN
   IF CATG.TRK.LVL='S' OR CATG.TRK.LVL='R' THEN
*T29061 ^
      RESV.ARR<4>=1 ;* 1-USAGE
      IF CATG.RSV.SERIAL='Y' THEN
         LOCATE DMT.JOB IN ISTK.JOB<1> SETTING JUNK THEN
            RESV.QTY=DMT.QTY - JOB.RESV.QTY<1,MLOC>
         END ELSE
            RESV.QTY=DMT.QTY
         END
      END ELSE
         RESV.QTY=DMT.QTY - JOB.RESV.QTY<1,MLOC>
      END
      IF CATG.COST.TYPE='AC' THEN
         RESV.ARR<1>=ISTK.RECP
         RESV.ARR<2>=DMT.SERIAL
         RESV.ARR<3>=RESV.QTY
      END
   END ELSE
      RESV.QTY=DMT.QTY - JOB.RESV.QTY<1,MLOC>
   END
   IF RESV.QTY < 0 THEN RESV.QTY = 0
   ;*T26599 ^ T26948
   RRESV.QTY=RESV.QTY
   ;* T26665 v
   ORIG.AVG.COST = IWH.AVG.COST
   IF POSTING.MON GT CURR.MON THEN
      CALL INV.AVG.COST.MAINT(MAT IWH.REC, '',CURR.MON)
   END
   ;* T26665 ^
*COPY>JCSBP>FIFO.RESV.SUB
   IF ERRMSG # '' THEN
      DMT.STATUS=ERRMSG
      ERR=1
   END
   IWH.AVG.COST = ORIG.AVG.COST       ;* T26665
*
   IF (ERR) THEN GOTO 99999
*
   JOB.RESV.QTY<1,MLOC>+=RRESV.QTY
   JOB.RESV.AMT<1,MLOC>+=STD.PRICE
   QTY.LEFT=DMT.QTY
   JMT.DCOST=0;JMT.PTR=""
   JMT.MARKUP=IWH.MARKUP + 0
   IF STD.PRICE=0 THEN
      STD.PRICE=INT((DMT.COST/10000) * ((DMT.QTY/10) / (INV.COST.WT/100)))
   END ELSE
      STD.PRICE=0
      DMT.COST=0
   END
   T.MT.NO="";TPTR=0
   ;*T26948 v
   ;* for following scenario
   ;* reserve is kept only at the warehouse level
   ;* so we have to create IJS record at the usage time
*T27596 v T28064
*T29061 v
*   IF CATG.TRK.LVL='S' AND CATG.COST.TYPE='AC' AND CATG.RSV.SERIAL='N' THEN
   IF (CATG.TRK.LVL='S' OR CATG.TRK.LVL='R') AND CATG.COST.TYPE='AC' AND CATG.RSV.SERIAL#'Y' THEN
*T29061 ^
      LOCATE ISTK.RECP IN IJS.RECP.NO<1>,1 BY 'AR' SETTING RFND ELSE
         INS ISTK.RECP BEFORE IJS.RECP.NO<1,RFND>
         INS '' BEFORE IJS.FI.ORG<1,RFND>
         INS '' BEFORE IJS.FI.QTY<1,RFND>
         INS '' BEFORE IJS.FI.AMT<1,RFND>
         INS '' BEFORE IJS.JMT.SEQ<1,RFND>
         INS '' BEFORE IJS.JMT.QTY<1,RFND>
      END
*T28064 ^
*     IJS.RECP.NO<1>=ISTK.RECP
      LOCATE ISTK.RECP IN IWH.RECP.NO<1> SETTING RPOS THEN
*        IJS.FI.AMT<1>=IWH.COST.FI<1,RPOS>
         IJS.FI.AMT<1,RFND>=IWH.COST.FI<1,RPOS>
      END
*     IJS.FI.QTY<1>=DMT.QTY
      IJS.FI.QTY<1,RFND>+=DMT.QTY
*T27596 ^
   END
   ;*T26948 ^
   QCNT=DCOUNT(IJS.RECP.NO<1>,VM)
*T27596 v
   IF CATG.COST.TYPE = 'AC' AND RESV.ARR # '' THEN
      LOCATE RESV.ARR<1> IN IJS.RECP.NO<1>,1 SETTING Q THEN
         GOSUB IJS.PROCESS
      END
   END ELSE
*T26596 ^
      FOR Q=1 TO QCNT WHILE QTY.LEFT > 0
*T27596 v
         ;*T26948 v
*   IF CATG.COST.TYPE='AC' THEN
*     IF RESV.ARR#'' THEN
*       LOCATE IJS.RECP.NO<1,Q> IN RESV.ARR<1> SETTING RTS ELSE
*         CONTINUE
*       END
*     END
*   END
         ;*T26948 ^
         GOSUB IJS.PROCESS ;* This replaces following 62 lines.
*T27596 ^
*    LOCATE IJS.RECP.NO<1,Q> IN IWH.RECP.NO<1> SETTING FNO ELSE NULL
*    BEGIN CASE
*      CASE IJS.FI.QTY<1,Q> + 0=0
*        CONTINUE
*      CASE IJS.RECP.NO<1,Q> < 1
*        CHECK.QTY=QTY.LEFT
*      CASE QTY.LEFT > IJS.FI.QTY<1,Q>
*        CHECK.QTY=IJS.FI.QTY<1,Q>
*      CASE 1
*        CHECK.QTY=QTY.LEFT
*    END CASE
*    IF IJS.FI.AMT<1,Q>+0=0 AND DMT.COST > 0 THEN
*      FLOC=DCOUNT(IJS.RECP.NO,VM)
*      IF IJS.RECP.NO<1,FLOC>=IWH.RECP.NO<1,FNO> AND IJS.FI.AMT<1,FLOC>=DMT.COST THEN
*        IJS.FI.ORG<1,FLOC>=IJS.FI.ORG<1,FLOC> + CHECK.QTY
*        IJS.FI.QTY<1,FLOC>=IJS.FI.QTY<1,FLOC> + CHECK.QTY
*      END ELSE
*        FLOC=FLOC + 1
*        IJS.RECP.NO<1,FLOC>=IWH.RECP.NO<1,FNO>
*        IJS.FI.ORG<1,FLOC>=CHECK.QTY
*        IJS.FI.QTY<1,FLOC>=CHECK.QTY
*        IJS.FI.AMT<1,FLOC>=DMT.COST
*      END
*      IJS.FI.ORG<1,Q>=IJS.FI.ORG<1,Q> - CHECK.QTY
*      IJS.FI.QTY<1,Q>=IJS.FI.QTY<1,Q> - CHECK.QTY
*    END ELSE
*      FLOC=Q
*      DCOST=INT((IJS.FI.AMT<1,FLOC>/10000) * ((CHECK.QTY/10) / (INV.COST.WT/100)))
*      STD.PRICE=STD.PRICE + DCOST
*      JOB.RESV.AMT<1,MLOC>=JOB.RESV.AMT<1,MLOC> - DCOST
*    END
*    IJS.FI.QTY<1,FLOC>=IJS.FI.QTY<1,FLOC> - CHECK.QTY
*    SEQ.CNT=DCOUNT(IJS.JMT.QTY<1,FLOC>,SVM)+1
*    TPTR=TPTR + 1
*    T.MT.NO<TPTR,1>=FLOC;T.MT.NO<TPTR,2>=SEQ.CNT
*    IJS.JMT.QTY<1,FLOC,SEQ.CNT>=CHECK.QTY
*    IF (IJS.RECP.NO<1,Q>) THEN
*      FCOST=IWH.COST.FI<1,FNO>
*      JMT.DCOST=JMT.DCOST + INT((FCOST/10000) * ((CHECK.QTY/10) / (INV.COST.WT/100)))
*      IWH.QTY.FI<1,FNO>=IWH.QTY.FI<1,FNO> - CHECK.QTY
*    END ELSE
*      FCOST=0
*    END
*    PTR=1
*    LOOP
*      LOCATE IJS.RECP.NO<1,Q> IN JMT.PTR<1,1>,PTR SETTING TLOC ELSE
*        JMT.PTR<1,1,TLOC>=IJS.RECP.NO<1,Q>
*        JMT.PTR<1,3,TLOC>=FCOST
*        JMT.PTR<1,4,TLOC>=IJS.FI.AMT<1,FLOC>
*        PTR=0
*      END
*      BEGIN CASE
*        CASE PTR=0
*        CASE JMT.PTR<1,4,TLOC> <> IJS.FI.AMT<1,FLOC>
*        CASE JMT.PTR<1,3,TLOC>=FCOST
*          PTR=0
*      END CASE
*    WHILE PTR DO
*      PTR=TLOC + 1
*    REPEAT
*    JMT.PTR<1,2,TLOC>=JMT.PTR<1,2,TLOC> + CHECK.QTY
*    QTY.LEFT=QTY.LEFT - CHECK.QTY
      NEXT Q
   END ;*T27596 ^
   IF QTY.LEFT > 0 THEN
      QTY.LEFT=CALC.STK.QTY(QTY.LEFT,MAT INV.CNV.REC,'.5','')
      DMT.STATUS='CANNOT COMPUTE COST FOR QTY ':OCONV(QTY.LEFT,ICR.CNV)
      ERR=1
   END
*
   IF (ERR) THEN GOTO 99999
*
   IJS.JOB.QTY=IJS.JOB.QTY - DMT.QTY
   IF IJS.JOB.QTY < 0 THEN IJS.JOB.QTY=0
   IJS.JOB.USED=IJS.JOB.USED + DMT.QTY
   IF CATG.TRACK.QOH # "Y" THEN GOTO 1899
   IWH.ON.HAND=IWH.ON.HAND - DMT.QTY
*
   GOSUB SET.IH.REC
   IWH.RESV=IWH.RESV - DMT.QTY
   IWLO.LOC.ON.HAND=IWLO.LOC.ON.HAND - DMT.QTY
   IF POST.OSJ=0 THEN
      IWH.INPRCS=IWH.INPRCS + DMT.QTY
      IWH.INPRCS.AMT=IWH.INPRCS.AMT + JMT.DCOST
      IWLO.LOC.INPRCS=IWLO.LOC.INPRCS + DMT.QTY
   END
   IF DMT.DATE > IWH.LA.SALE THEN IWH.LA.SALE=DMT.DATE
1899 *
   JMT.SEQ=JMT.ID
   JMT.TYPE=DMT.TYPE
   JMT.SPOIL.CODE=DMT.SPOIL.CODE
   JMT.DIV=DMT.DIV
   JMT.LOC=DMT.LOC
   JMT.DATE=DMT.DATE
   JMT.MON=POSTING.MON
   JMT.QTY=DMT.QTY
   JMT.DIAM=DMT.NDIAM
   JMT.SHEET=DMT.STK.QTY
   JMT.SERIAL=DMT.SERIAL
   PTR=1
   LOOP
      LOCATE DMT.DEPT IN JOB.MT.DEPT<1>,PTR SETTING DFND ELSE
         JOB.MT.DEPT<1,DFND>=DMT.DEPT
         JOB.MT.CCTR<1,DFND>=DMT.CCTR
         JOB.MT.PROD<1,DFND>=DMT.PROD
         JOB.MT.WHSE<1,DFND>=DMT.WHSE
         PTR=0
      END
      BEGIN CASE
         CASE PTR=0
         CASE DMT.CCTR # JOB.MT.CCTR<1,DFND>
            PTR=DFND + 1
         CASE DMT.PROD # JOB.MT.PROD<1,DFND>
            PTR=DFND + 1
         CASE DMT.WHSE # JOB.MT.WHSE<1,DFND>
            PTR=DFND + 1
         CASE 1
            PTR=0
      END CASE
   WHILE PTR DO REPEAT
   BEGIN CASE
      CASE WLR.MT.COST < 2
         JMT.COST=STD.PRICE
      CASE NUM(IWH.FOH.PCT)
         JMT.COST=INT((STD.PRICE * (1 + IWH.FOH.PCT/10000)) + .5)
      CASE 1
         MATREAD FTR.REC FROM FOH.TABLE, CONO : IWH.FOH.PCT ELSE
            MAT FTR.REC=''
         END
         IF FTR.QTY='' THEN
            FOH.PCT=0
         END ELSE
            TOT.DCOST=STD.PRICE
            TOT.COST=0
            K=1
            LOOP
               FND=0
               LOOP
                  LOCATE DMT.PROD IN JOB.MT.PROD<1>,K SETTING PTR ELSE
                     FND=1
                     PTR=0
                  END
                  IF PTR THEN
                     IF DMT.WHSE=JOB.MT.WHSE<1,PTR> THEN
                        FND=PTR
                     END
                     K=PTR + 1
                  END
               WHILE FND=0 DO
               REPEAT
            WHILE PTR DO
               TOT.DCOST=TOT.DCOST + JOB.MT.DCOST<1,PTR,1> + JOB.MT.DCOST<1,PTR,2>
               TOT.COST=TOT.COST + JOB.MT.COST<1,PTR>
            REPEAT
            FTR.CNT=COUNT(FTR.QTY,VM) + 1
            IF TOT.DCOST >= FTR.QTY<1,FTR.CNT> THEN
               FOH.PCT=FTR.PCT<1,FTR.CNT>
            END ELSE
               FOH.PCT=0
               FOR FTR=1 TO FTR.CNT WHILE FOH.PCT=0
                  IF TOT.DCOST <= FTR.QTY<1,FTR> THEN
                     FOH.PCT=FTR.PCT<1,FTR>
                  END
               NEXT FTR
            END
         END
         JMT.COST=INT((TOT.DCOST * (1 + FOH.PCT/10000)) + .5) - TOT.COST
   END CASE
   JOB.USED.AMT<1,MLOC>=JOB.USED.AMT<1,MLOC> + STD.PRICE
   JOB.USED.QTY<1,MLOC>=JOB.USED.QTY<1,MLOC> + JMT.QTY
   JOB.RESV.QTY<1,MLOC>=JOB.RESV.QTY<1,MLOC> - JMT.QTY
   IF JOB.RESV.QTY<1,MLOC> < 0 THEN JOB.RESV.QTY<1,MLOC>=0
   JOB.MT.QTY<1,DFND>=JOB.MT.QTY<1,DFND> + JMT.QTY
   IF JMT.DATE > JOB.MT.DATE<1,DFND,1> THEN
      JOB.MT.DATE<1,DFND,1>=JMT.DATE
   END
   MT.ID=CONO:DMT.JOB:"!":DMT.DEPT:"!":DMT.CCTR:"!":DMT.PROD:"!"
   LOOP
      JOB.MT.SEQ<1,DFND>=JOB.MT.SEQ<1,DFND> + 1
      JMT.ID=MT.ID:DMT.WHSE:"!":JOB.MT.SEQ<1,DFND>
      READ DUMMY FROM JOB.MATL, JMT.ID ELSE DUMMY=""
   WHILE DUMMY # "" DO REPEAT
   IF JMT.SEQ > JOB.MT.DATE<1,DFND,2> THEN
      JOB.MT.DATE<1,DFND,2>=JMT.SEQ
      JOB.MT.DATE<1,DFND,3>=JOB.MT.SEQ<1,DFND>
   END
   MT.NO=DMT.DEPT:"!":DMT.CCTR:"!":JOB.MT.SEQ<1,DFND>
   FOR I=1 TO TPTR
      IJS.JMT.SEQ<1,T.MT.NO<I,1>,T.MT.NO<I,2>>=MT.NO
   NEXT I
   BEGIN CASE
      CASE STD.PRICE <> JMT.DCOST
         DPTR=2;WPTR=3
         JMT.DCOST<1,2>=STD.PRICE - JMT.DCOST
         IF JMT.COST <> STD.PRICE THEN
            DPTR=3
            JMT.DCOST<1,3>=JMT.COST - STD.PRICE
         END
      CASE JMT.COST <> STD.PRICE
         DPTR=3;WPTR=2
         JMT.DCOST<1,2>=0
         JMT.DCOST<1,3>=JMT.COST - STD.PRICE
      CASE 1
         DPTR=1;WPTR=1
   END CASE
   FOR I=1 TO DPTR
      JOB.MT.DCOST<1,DFND,I>=JOB.MT.DCOST<1,DFND,I> + JMT.DCOST<1,I>
   NEXT I
   JOB.TOT.DCOST=JOB.TOT.DCOST + STD.PRICE
   JOB.MT.COST<1,DFND>=JOB.MT.COST<1,DFND> + JMT.COST
   WIP.UPD=0
   BEGIN CASE
      CASE WLR.SPL="N" AND DMT.TYPE="S"
      CASE WLR.NON.CHG="N" AND DMT.TYPE="N"
      CASE WLR.MT.WIP > 1
         JMT.WIP=JMT.DCOST<1,1>;WIP.UPD=JMT.WIP
         BEGIN CASE
            CASE WPTR > 2
               JMT.WIP<1,1,2>=JMT.DCOST<1,3>
               JMT.WIP<1,1,3>=JMT.DCOST<1,2>
               WIP.UPD=WIP.UPD + JMT.DCOST<1,2> + JMT.DCOST<1,3>
            CASE WPTR > 1
               JMT.WIP<1,1,2>=JMT.DCOST<1,3>
               WIP.UPD=WIP.UPD + JMT.DCOST<1,3>
         END CASE
      CASE WLR.MT.WIP > 0
         JMT.WIP=JMT.DCOST<1,1>;WIP.UPD=JMT.WIP
         IF WPTR > 2 THEN
            JMT.WIP<1,1,2>=0
            JMT.WIP<1,1,3>=JMT.DCOST<1,2>
            WIP.UPD=WIP.UPD + JMT.DCOST<1,2>
         END
   END CASE
   IF WIP.UPD=0 THEN
      JMT.WIP=""
      QCNT=DCOUNT(IJS.RECP.NO,VM)
      FOR Q=QCNT TO 1 STEP -1
         WIP.QTY=0
         LOOP
            LOCATE MT.NO IN IJS.JMT.SEQ<1,Q>,1 SETTING PTR ELSE PTR=0
         WHILE PTR DO
            WIP.QTY=WIP.QTY + IJS.JMT.QTY<1,Q,PTR>
            IJS.JMT.SEQ=DELETE(IJS.JMT.SEQ,1,Q,PTR)
            IJS.JMT.QTY=DELETE(IJS.JMT.QTY,1,Q,PTR)
         REPEAT
         IF IJS.FI.QTY<1,Q>+0=0 AND IJS.JMT.SEQ<1,Q>="" THEN
            IJS.RECP.NO=DELETE(IJS.RECP.NO,1,Q,0)
            IJS.FI.ORG=DELETE(IJS.FI.ORG,1,Q,0)
            IJS.FI.QTY=DELETE(IJS.FI.QTY,1,Q,0)
            IJS.FI.AMT=DELETE(IJS.FI.AMT,1,Q,0)
            IJS.JMT.SEQ=DELETE(IJS.JMT.SEQ,1,Q,0)
            IJS.JMT.QTY=DELETE(IJS.JMT.QTY,1,Q,0)
         END ELSE
            IJS.FI.ORG<1,Q>=IJS.FI.ORG<1,Q> - WIP.QTY
            IF IJS.FI.ORG<1,Q> < IJS.FI.QTY<1,Q> THEN
               IJS.FI.ORG<1,Q>=IJS.FI.QTY<1,Q>
            END
         END
      NEXT Q
      IF IJS.JOB.QTY+IJS.JOB.ALOC+IJS.REQ.QTY=0 AND IJS.JMT.SEQ="" THEN
         ISTAT.JOB=DELETE(ISTAT.JOB,1,JLOC,0)
      END ELSE
         IJS.JOB.USED=IJS.JOB.USED - DMT.QTY
         IF IJS.JOB.USED < 0 THEN IJS.JOB.USED=0
      END
      IF POST.OSJ=0 THEN
         IWH.INPRCS=IWH.INPRCS - DMT.QTY
         IWH.INPRCS.AMT=IWH.INPRCS.AMT - JMT.DCOST<1,1>
         IWLO.LOC.INPRCS=IWLO.LOC.INPRCS - DMT.QTY
      END
   END
   IF DMT.TYPE="S" OR DMT.TYPE="N" THEN
      JMT.SALE=0
   END ELSE
      JMT.SALE=INT(JMT.COST + ((JMT.COST * (JMT.MARKUP/100))/100) + .5)
   END
   IF JMT.WIP # "" THEN
      CCW.ID=CONO : JMT.DIV : DMT.DEPT : "!" : DMT.CCTR : JMT.MON
      MATREADU CCW.REC FROM COST.CNTR.WIP, CCW.ID ELSE MAT CCW.REC=""
      JOB.WIP<1,1>=JOB.WIP<1,1> + 2
      JOB.MT.WIP<1,1>=JOB.MT.WIP<1,1> + 2
      FOR W=1 TO WPTR
         JOB.WIP<1,2,W>=JOB.WIP<1,2,W> + JMT.WIP<1,1,W>
         JOB.MT.WIP<1,2,W>=JOB.MT.WIP<1,2,W> + JMT.WIP<1,1,W>
         CCW.MT.I<1,W>=CCW.MT.I<1,W> + JMT.WIP<1,1,W>
      NEXT W
   END ELSE
      CCW.ID=""
   END
   IF JMT.MON < JOB.MT.WIP<1,4> OR JOB.MT.WIP<1,4>="" THEN
      JOB.MT.WIP<1,4>=JMT.MON
      IF JMT.MON < JOB.WIP<1,4> OR JOB.WIP<1,4>="" THEN
         JOB.WIP<1,4>=JMT.MON
      END
   END
   IF JMT.MON > JOB.MT.WIP<1,5> THEN
      JOB.MT.WIP<1,5>=JMT.MON
      IF JMT.MON > JOB.WIP<1,5> THEN
         JOB.WIP<1,5>=JMT.MON
      END
   END
   JOB.MT.SALE<1,DFND>=JOB.MT.SALE<1,DFND> + JMT.SALE
   PRDS.ID=CONO:"*":JMT.DIV:"*":DMT.DEPT:"*":DMT.CCTR:"*":JMT.MON:"*1*A"
   MATREADU PRDS.REC FROM PROD.STATS, PRDS.ID ELSE MAT PRDS.REC=""
   SSR.ID=""
   BEGIN CASE
      CASE JMT.TYPE='N'
         PTR=2
         PRDS.MAT.NC.DCOST=PRDS.MAT.NC.DCOST + STD.PRICE
         PRDS.MAT.NC.COST=PRDS.MAT.NC.COST + JMT.COST
      CASE JMT.TYPE='C'
         PTR=3
         PRDS.MAT.DCOST=PRDS.MAT.DCOST + STD.PRICE
         PRDS.MAT.COST=PRDS.MAT.COST + JMT.COST
      CASE JMT.TYPE='S'
         PTR=4
         PRDS.MAT.SP.DCOST=PRDS.MAT.SP.DCOST + STD.PRICE
         PRDS.MAT.SP.COST=PRDS.MAT.SP.COST + JMT.COST
         IF JMT.SPOIL.CODE # "" THEN
            SSR.ID=CONO:JMT.DIV:DMT.DEPT:"!":DMT.CCTR:JMT.MON:JMT.SPOIL.CODE
            MATREADU SSR.REC FROM SPOIL.STATS, SSR.ID ELSE MAT SSR.REC=""
            FOR I=1 TO DPTR
               SSR.MT<1,I>=SSR.MT<1,I> + JMT.DCOST<1,I>
            NEXT I
         END
      CASE 1
         PTR=1
         JMT.TYPE="R"
         PRDS.MAT.DCOST=PRDS.MAT.DCOST + STD.PRICE
         PRDS.MAT.COST=PRDS.MAT.COST + JMT.COST
   END CASE
   JOB.MT.TCOST<1,DFND,PTR>=JOB.MT.TCOST<1,DFND,PTR> + JMT.COST
   BEGIN CASE
      CASE JOB.STATUS=''
         JOB.STATUS=INSERT(JOB.STATUS,1,1,0,"1")
         JOB.STAT.DATE=INSERT(JOB.STAT.DATE,1,1,0,DATE())
      CASE JOB.STATUS<1,1>='1'
      CASE JOB.STATUS<1,1>='5'
      CASE 1
         JOB.STATUS=INSERT(JOB.STATUS,1,1,0,"5")
         JOB.STAT.DATE=INSERT(JOB.STAT.DATE,1,1,0,DATE())
   END CASE
   JOB.TOT.COST=JOB.TOT.COST + JMT.COST
   JOB.TOT.SALE=JOB.TOT.SALE + JMT.SALE
   JWPTR=WPTR
*
   GOTO 99999
**************************************************************************
****** S U B R O U T I N E S *********************************************
**************************************************************************
*
***************
READ.IWH.REC: 
***************
*
   IWH.ID=INV.ID:"!":DMT.WHSE
   EOL=0
   LOOP
      REC.LOCK=0
      MATREADU IWH.REC FROM INV.WHSE, IWH.ID LOCKED REC.LOCK=1 THEN
         MAT ORG.IWH.REC=MAT IWH.REC
         ACTION=1 ; TMP.ARR=''
         INAH.PROD=DMT.PROD ; INAH.WHSE=DMT.WHSE
         PERIOD= POSTING.MON
         JOB.ID=''
         CALL JCS.IWH.SUB(IWH.ID,JOB.ID,PERIOD,TMP.ARR,ACTION,OPEN.FLAG)
      END ELSE
         DMT.STATUS='INV.WHSE RECORD ':IWH.ID:' IS MISSING.'
         ERR=1 ; EOL=1
      END
      IF REC.LOCK THEN
*        CRT @(0,22):CL:"INV.WHSE RECORD ":IWH.ID:" IS LOCKED <RTN> TO TRY AGAIN ":
         CRT @(0,22):CL:"INV.WHSE RECORD ":IWH.ID:" IS LOCKED BY ":GETUSERNAME(STATUS()):" <RTN> TO TRY AGAIN ":
         INPUT ANS:;CRT @(0,22):CL:
      END ELSE
         EOL=1
      END
   UNTIL (EOL) DO REPEAT
   RETURN
*
****************
READ.IWLO.REC: 
****************
*
   IWLO.ID=IWH.ID : "!" : DMT.LOC
   IF RECORDLOCKED(INV.WHSE.LOC.TEMP,IWLO.ID)=0 THEN
      DELETE INV.WHSE.LOC.TEMP,IWLO.ID
   END
   MATREADU IWLO.REC FROM INV.WHSE.LOC.TEMP,IWLO.ID ELSE
      MATREADU IWLO.REC FROM INV.WHSE.LOC, IWLO.ID ELSE
         IF CATG.TRACK.QOH="Y" THEN
            DMT.STATUS='INV.WHSE.LOC RECORD ':IWLO.ID:' IS MISSING.'
            ERR=1
         END ELSE
            MAT IWLO.REC=""
         END
      END
   END
   RETURN
*
****************
GET.INV.UM.CNV: 
****************
*
*COPY>ICSBP>INV.UM.CNV
   RETURN
*
************
SET.IH.REC: 
************
*
   IH.ID=CONO : DMT.PROD
   MATREADU IH.REC FROM INV.HIST, IH.ID ELSE
      MAT IH.REC=''
   END
   IH.CNT=DCOUNT(IH.DATE,VM)
   IDATE=DATE()
   LOCATE IDATE IN IH.DATE<1> SETTING PP ELSE NULL
   BEGIN CASE
      CASE PP=IH.CNT
         IH.AMOUNT<1,PP>=IH.AMOUNT<1,PP> - DMT.QTY
      CASE PP > IH.CNT
         IH.AMOUNT<1,PP>=IH.AMOUNT<1,PP> - DMT.QTY
         IH.DATE<1,PP>=IDATE
      CASE 1
         IH.AMOUNT<1,PP>=IH.AMOUNT<1,PP> - DMT.QTY
   END CASE
   RETURN
*
**************
GET.QTY.TYPE: 
**************
*
   BEGIN CASE
      CASE DMT.RS.QTYPE=''
      CASE INV.PAP.TYPE="ROLL" AND DMT.RS.QTYPE[1,1]="W"
      CASE INV.PAP.TYPE="ROLL" AND DMT.RS.QTYPE[1,1]="D"
      CASE INV.PAP.TYPE="LROLL" AND DMT.RS.QTYPE[1,1]="S"
      CASE INV.PAP.TYPE="LROLL" AND DMT.RS.QTYPE[1,1]="D"
      CASE INV.PAP.TYPE="PCOAT" AND DMT.RS.QTYPE[1,1]="S"
      CASE INV.PAP.TYPE="PCOAT" AND DMT.RS.QTYPE[1,1]="D"
      CASE INV.PAP.TYPE="SHEET" AND DMT.RS.QTYPE[1,1]="S"
      CASE INV.PAP.TYPE="SHEET" AND DMT.RS.QTYPE[1,1]="D"
      CASE 1
         DMT.STATUS='INVALID QUANTITY TYPE'
         ERR=1
   END CASE
   RETURN
*
***************
CHECK.QTY: 
****************
*
   IF DMT.QTY > IWH.ON.HAND THEN
      DMT.STATUS='QTY IS MORE THAN WAREHOUSE QTY ':OCONV(WQA,ICR.CNV)
      ERR=1
   END ELSE
      LQA=CALC.STK.QTY(IWLO.LOC.ON.HAND,MAT INV.CNV.REC,'.5','')
      XCNT=DCOUNT(IWLO.SERIAL,VM)
      BEGIN CASE
         CASE SUB.ACTION='P'
         CASE XCNT # 1
         CASE 1
            IF DMT.RS.QTYPE="SU" AND INV.UNIT<1,3>="MSI" AND ABS(DMT.QTY-IWLO.LOC.ON.HAND)<=50 OR DMT.RS.QTYPE="WU" AND ABS(DMT.QTY-IWLO.LOC.ON.HAND)<=9 THEN
               DMT.QTY=IWLO.LOC.ON.HAND
            END
      END CASE
      IF DMT.QTY > IWLO.LOC.ON.HAND THEN
         DMT.STATUS='QTY IS MORE THAN LOCATION QTY ':OCONV(LQA,ICR.CNV)
         ERR=1
      END
   END
   RETURN
*
******************
CHECK.SERIAL: 
******************
*
*T29061 v
   IF CATG.TRK.LVL = 'S' OR SUB.ACTION = 'F' THEN
      LOCATE DMT.SERIAL IN IWLO.SERIAL<1>,1 SETTING RLOC THEN
         RQA=CALC.STK.QTY(ISTK.CUR.QTY,MAT INV.CNV.REC,'.5','')
         IF DMT.RS.QTYPE="SU" AND INV.UNIT<1,3>="MSI" AND ABS(DMT.QTY - ISTK.CUR.QTY) <= 50  AND SUB.ACTION # 'P' THEN
            DMT.QTY=ISTK.CUR.QTY
         END
         IF DMT.RS.QTYPE="WU" AND ABS(DMT.QTY - ISTK.CUR.QTY) <= 9  AND SUB.ACTION # 'P' THEN
            DMT.QTY=ISTK.CUR.QTY
         END
         ;* T26556 v
         IF ISTK.RECP.PERIOD GT POSTING.MON AND POSTING.MON # '' THEN
            DMT.STATUS='Serial was received after the posting period'
            ERR=1 ; RETURN
         END
         ;* T26556 ^
         IF CATG.TRACK.QOH="Y" AND DMT.QTY > ISTK.CUR.QTY THEN
            DMT.STATUS='QTY IS MORE THAN SERIAL QTY ':OCONV(RQA,ICR.CNV)
            ERR=1
         END ELSE
            INAH.CUR.QTY=ISTK.CUR.QTY
            INAH.NEW.QTY= INAH.CUR.QTY-DMT.QTY
            TMP.STK.QTY=CALC.STK.QTY(INAH.NEW.QTY,MAT INV.CNV.REC,'.5','')
            DIAM=CALC.DIAM(INAH.NEW.QTY,TMP.STK.QTY,MAT INV.REC) 
            DMT.NDIAM=DIAM
         END
      END ELSE
         DMT.STATUS='CAN NOT LOCATE SERIAL ':DMT.SERIAL
         ERR=1
      END
   END
*T29061 ^
   RETURN
*
************
IJS.PROCESS: 
************
   LOCATE IJS.RECP.NO<1,Q> IN IWH.RECP.NO<1> SETTING FNO ELSE NULL
   BEGIN CASE
      CASE IJS.FI.QTY<1,Q> + 0=0
         RETURN
      CASE IJS.RECP.NO<1,Q> < 1
         CHECK.QTY=QTY.LEFT
      CASE QTY.LEFT > IJS.FI.QTY<1,Q>
         IF CATG.COST.TYPE # 'AC' THEN
            CHECK.QTY=IJS.FI.QTY<1,Q>
         END ELSE CHECK.QTY = 0
      CASE 1
         CHECK.QTY=QTY.LEFT
   END CASE
   IF IJS.FI.AMT<1,Q>+0=0 AND DMT.COST > 0 THEN
      FLOC=DCOUNT(IJS.RECP.NO,VM)
      IF IJS.RECP.NO<1,FLOC>=IWH.RECP.NO<1,FNO> AND IJS.FI.AMT<1,FLOC>=DMT.COST THEN
         IJS.FI.ORG<1,FLOC>=IJS.FI.ORG<1,FLOC> + CHECK.QTY
         IJS.FI.QTY<1,FLOC>=IJS.FI.QTY<1,FLOC> + CHECK.QTY
      END ELSE
*T27586 v
         LOCATE IWH.RECP.NO<1,FNO> IN IJS.RECP.NO<1>,1 BY 'AR' SETTING FLOC ELSE
            INS '' BEFORE IJS.RECP.NO<1,FLOC>
            INS '' BEFORE IJS.FI.ORG<1,FLOC>
            INS '' BEFORE IJS.FI.QTY<1,FLOC>
            INS '' BEFORE IJS.FI.AMT<1,FLOC>
         END
*     FLOC=FLOC + 1
*T27586 ^
         IJS.RECP.NO<1,FLOC>=IWH.RECP.NO<1,FNO>
         IJS.FI.ORG<1,FLOC>=CHECK.QTY
         IJS.FI.QTY<1,FLOC>=CHECK.QTY
         IJS.FI.AMT<1,FLOC>=DMT.COST
      END
      IJS.FI.ORG<1,Q>=IJS.FI.ORG<1,Q> - CHECK.QTY
      IJS.FI.QTY<1,Q>=IJS.FI.QTY<1,Q> - CHECK.QTY
   END ELSE
      FLOC=Q
      DCOST=INT((IJS.FI.AMT<1,FLOC>/10000) * ((CHECK.QTY/10) / (INV.COST.WT/100)))
      STD.PRICE=STD.PRICE + DCOST
      JOB.RESV.AMT<1,MLOC>=JOB.RESV.AMT<1,MLOC> - DCOST
   END
   IJS.FI.QTY<1,FLOC>=IJS.FI.QTY<1,FLOC> - CHECK.QTY
   SEQ.CNT=DCOUNT(IJS.JMT.QTY<1,FLOC>,SVM)+1
   TPTR=TPTR + 1
   T.MT.NO<TPTR,1>=FLOC;T.MT.NO<TPTR,2>=SEQ.CNT
   IJS.JMT.QTY<1,FLOC,SEQ.CNT>=CHECK.QTY
   IF (IJS.RECP.NO<1,Q>) THEN
      FCOST=IWH.COST.FI<1,FNO>
      JMT.DCOST=JMT.DCOST + INT((FCOST/10000) * ((CHECK.QTY/10) / (INV.COST.WT/100)))
      IWH.QTY.FI<1,FNO>=IWH.QTY.FI<1,FNO> - CHECK.QTY
   END ELSE
      FCOST=0
   END
   PTR=1
   LOOP
      LOCATE IJS.RECP.NO<1,Q> IN JMT.PTR<1,1>,PTR SETTING TLOC ELSE
         JMT.PTR<1,1,TLOC>=IJS.RECP.NO<1,Q>
         JMT.PTR<1,3,TLOC>=FCOST
         JMT.PTR<1,4,TLOC>=IJS.FI.AMT<1,FLOC>
         PTR=0
      END
      BEGIN CASE
         CASE PTR=0
         CASE JMT.PTR<1,4,TLOC> <> IJS.FI.AMT<1,FLOC>
         CASE JMT.PTR<1,3,TLOC>=FCOST
            PTR=0
      END CASE
   WHILE PTR DO
      PTR=TLOC + 1
   REPEAT
   JMT.PTR<1,2,TLOC>=JMT.PTR<1,2,TLOC> + CHECK.QTY
   QTY.LEFT=QTY.LEFT - CHECK.QTY
   RETURN
*
*---- END OF PROGRAM
*
99999 *
   RETURN
END
