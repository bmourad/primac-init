*COPY>CPYLIB>COM1
*COPY>JCS.CPYLIB>COM.JOB
*********************************************************************
* REVISION    - [08.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM       - PRIMAC
* SOURCE       - JCSBP
* PROGRAM      - POST.OSP
* BY           - JIHAD YAMOUT , C.B.A
* DESCRIPTION  - THIS PROGRAM POST JOBS BY MOVING DAILY.OSP RECORD TO
*                JOB.FILE AND MOVING DAILY.OSP RECORD TO MONTHLY.OSP
*                AND DELETE DAILY.OSP RECORD.
* 04/16/92 DLG TASK 16414 - ALLOW MULTIPLE JOBS IN OPO
* 01/25/94 DOUG S TASK 17919 * ADD ACCURAL HISTORY
* TASK 18961 GAT 03/08/95 FIX RECIEVE AMT/ UM ON VEND.PROD.STATS
* TASK 20080 JR STORE DV DP CC IN ACCRUED.LIAB.HIST
*T23278 markt 11/20/1998 * Accumulate fiscal data by division.
*T23319 alex 04/11/2000 * Fix calculation for a UOM Type "C"; it is
*                         defaulting as a "EA" Type.
*T25755 cm 04/19/2001 * Modify pgm so that the update to OUTSIDE.PO is
*                       to the correct line according to sequence.
*T23880 lross 10/16/2002 * Include offset acct in ALH record.  
*T28171 thompson 06/24/2004 * Fix problem when user puts in a routing
*                             department
*T28171 lross 07/06/2004 * Reinstate logic prior to T28171.
*T28678 lross 09/23/2005 * Negative rounding problem.
*ENDDOC
*********************************************************************
*** INSERT FILE EQUATE
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>DIVISION
*COPY>PMC.CPYLIB>DEPARTMENT
*COPY>PMC.CPYLIB>COST.CNTR
*COPY>JCS.CPYLIB>JOB
*COPY>JCS.CPYLIB>JOB.CUTOFF.NO
*COPY>JCS.CPYLIB>DAILY.OSP
*COPY>JCS.CPYLIB>JOB.OSP
*COPY>JCS.CPYLIB>OJOB.OSP
*COPY>JCS.CPYLIB>CATEGORY.OSP
*COPY>JCS.CPYLIB>WIP.LEVEL
*COPY>JCS.CPYLIB>FOH.TABLE
*COPY>JCS.CPYLIB>OPERATION
*COPY>JCS.CPYLIB>JOB.STAT.CODE
*COPY>JCS.CPYLIB>PROD.STATS
*COPY>JCS.CPYLIB>COST.CNTR.WIP
*COPY>JCS.CPYLIB>SPOIL.STATS
*COPY>POS.CPYLIB>OUTSIDE.PO
*COPY>APS.CPYLIB>VEND.STATS
*COPY>APS.CPYLIB>VEND.PO.STATS
*COPY>APS.CPYLIB>VEND.PROD.STATS
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>POS.CPYLIB>ACCRUED.LIAB.HIST
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>SYSCOM
*COPY>CPYLIB>CHAR
*
*** INTITIALIZATION
*
MAT FILE.VARS = '' ; MAT JSI.REC = '' ; MAT EDIT.COM = '' ; MAT EDIT.COM.DRIVER = '' ; MAT JOS.REC = '' ; MAT COMP.REC = '' ; MAT OJOS.REC = ''
SYS.TYPE = 1
CALL SYSCOM(MAT SYSCOM.REC)
*
***** T23278 v
PROCREAD XX ELSE ERRMSG = 'MUST BE RUN FROM A PROC'; GOTO 93000
DIV.CODE = XX<5>
***** T23278 ^
*
*** OPEN FILES
*
OPEN '','COMPANY' TO COMPANY ELSE ERRMSG = 'COMPANY FILE MISSING'; GOTO 93000
OPEN '','JOB' TO JOB ELSE ERRMSG = "JOB FILE IS MISSING" ; GOTO 93000
OPEN '','DAILY.OSP' TO DAILY.OSP ELSE ERRMSG = "DAILY.OSP FILE IS MISSING" ; GOTO 93000
OPEN '','PROD.STATS' TO PROD.STATS ELSE ERRMSG = "PROD.STATS FILE IS MISSING" ; GOTO 93000
OPEN '','COST.CNTR.WIP' TO COST.CNTR.WIP ELSE ERRMSG = "COST.CNTR.WIP FILE IS MISSING" ; GOTO 93000
OPEN '','JOB.OSP' TO JOB.OSP ELSE ERRMSG = "JOB.OSP FILE IS MISSING" ; GOTO 93000
OPEN '','OJOB.OSP' TO OJOB.OSP ELSE ERRMSG = "OJOB.OSP FILE IS MISSING" ; GOTO 93000
OPEN '','CATEGORY.OSP' TO CATEGORY.OSP ELSE ERRMSG = "CATEGORY.OSP FILE IS MISSING" ; GOTO 93000
OPEN '','FOH.TABLE' TO FOH.TABLE ELSE ERRMSG = "FOH.TABLE FILE IS MISSING" ; GOTO 93000
OPEN '','PMC.SCREENS' TO M.SCREENS ELSE ERRMSG = "M.SCREENS FILE IS MISSING" ; GOTO 93000
OPEN '', 'DIVISION' TO DIVISION ELSE ERRMSG = "DIVISION FILE IS MISSING" ; GOTO 93000
OPEN '', 'DEPARTMENT' TO DEPARTMENT ELSE ERRMSG = "DEPARTMENT FILE IS MISSING" ; GOTO 93000
OPEN '', 'COST.CNTR' TO COST.CNTR ELSE ERRMSG = "COST.CNTR FILE IS MISSING" ; GOTO 93000
OPEN '', 'OPERATION' TO OPERATION ELSE ERRMSG = "OPERATION FILE IS MISSING" ; GOTO 93000
OPEN '','PREFIX' TO PREFIX ELSE ERRMSG = "PREFIX FILE IS MISSING" ; GOTO 93000
OPEN '', 'JOB.STAT.CODE' TO JOB.STAT.CODE ELSE ERRMSG = "JOB.STAT.CODE FILE IS MISSING" ; GOTO 93000
OPEN '', 'WAREHOUSE' TO WAREHOUSE ELSE ERRMSG = "WAREHOUSE FILE IS MISSING" ; GOTO 93000
OPEN '','CONTROL' TO CONTROL ELSE ERRMSG = 'CONTROL FILE MISSING'; GOTO 93000
OPEN '','SPOIL.STATS' TO SPOIL.STATS ELSE ERRMSG = "SPOIL.STATS FILE IS MISSING" ; GOTO 93000
OPEN '','ACCRUED.LIAB.HIST' TO ACCRUED.LIAB.HIST ELSE ERRMSG = "ACCRUED.LIAB.HIST FILE IS MISSING" ; GOTO 93000
GANG.PRESENT=1
OPEN '','GANG.JOB' TO GANG.JOB ELSE GANG.PRESENT=0
OPEN '','GANG.ALLOC' TO GANG.ALLOC ELSE GANG.PRESENT=0
COMBO.PRESENT=1
OPEN '','COMBO.JOB' TO COMBO.JOB ELSE COMBO.PRESENT=0
OPEN '','COMBO.ALLOC' TO COMBO.ALLOC ELSE COMBO.PRESENT=0
*
*** SETUP VALUES FROM PMC.SCREENS
*
READNEXT DOS.ID ELSE GOTO 99999
ECD.ACTION = 1
ECD.SCRN.CNT = 1
ECD.SCRN.NAME = 'GET.FISCAL.MONTH'
CALL SCRN.EDIT
ECD.SCRN.NO = 1
MAT SCV.REC = ""
*
*** MAIN PROCESSING
*
* MOVED UP      READNEXT DOS.ID ELSE GOTO 99999
CONO = DOS.ID[1,3]
MATREAD COMP.REC FROM COMPANY, CONO ELSE GOTO 99999
IF CO.POS = "Y" THEN
  OPEN '','OUTSIDE.PO' TO OUTSIDE.PO ELSE ERRMSG = "OUTSIDE.PO FILE IS MISSING" ; GOTO 93000
END
IF CO.APS.O.INTRF > 1 THEN
  OPEN '','VEND.STATS' TO VEND.STATS ELSE ERRMSG = "VEND.STATS FILE IS MISSING" ; GOTO 93000
  OPEN '','VEND.PO.STATS' TO VEND.PO.STATS ELSE ERRMSG = "VEND.PO.STATS FILE IS MISSING" ; GOTO 93000
  OPEN '','VEND.PROD.STATS' TO VEND.PROD.STATS ELSE ERRMSG = "VEND.PROD.STATS FILE IS MISSING" ; GOTO 93000
END
*
*** GET PERIOD
*
ECD.ACTION = 2
CALL SCRN.EDIT
*  CALL GET.FISCAL.MONTH(CONO,POSTING.MON,"OUTSIDE PURCHASES POSTING","JCFISCAL",CURR.MON);* T23278
CALL GET.DIV.FISCAL.MONTH(CONO,POSTING.MON,"OUTSIDE PURCHASES POSTING","JCFISCAL",CURR.MON,DIV.CODE);* T23278
IF POSTING.MON = "END" THEN GOTO 99999
MON = POSTING.MON[5,2]
MATREAD JOB.CUTOFF.REC FROM CONTROL, CONO:"JOB.CUTOFF.NO" ELSE
  MAT JOB.CUTOFF.REC = ''
  J.CUTOFF.NUM = 0
END
OLD.NAME = '' ; GXR.CO = CONO
MATREAD WIP.LEVEL.REC FROM CONTROL, CONO : "WIP.LEVEL" ELSE
  MAT WIP.LEVEL.REC = ""
  WLR.OS.COST = 2; WLR.OS.WIP = 2
END
GOSUB 1000
DATA = 1
LOOP
  READNEXT DOS.ID ELSE DATA = 0
WHILE DATA DO
  IF CONO = DOS.ID[1,3] THEN GOSUB 1000
REPEAT
GOTO 99999
1000 MATREADU DOS.REC FROM DAILY.OSP, DOS.ID ELSE
  RELEASE DAILY.OSP, DOS.ID; GOTO 1999
END
UOM=''
POST.OSJ = 0 ; DOS.STATUS = ""
* 16414
OSP.FIRST.JOB = DOS.JOB
IF CO.POS = "Y" THEN
  MATREADU OPO.REC FROM OUTSIDE.PO , CONO:DOS.PO ELSE
    MAT OPO.REC = ''
  END
* 16414,A2
*        OSP.FIRST.JOB = OPO.JOB.NO<1,1>
*        IF OSP.FIRST.JOB = '' THEN OSP.FIRST.JOB = DOS.JOB
* 16414 - ALLOW THIS TO HAPPEN ; STILL READ OPO
  REM      IF OPO.JOB.NO # '' AND OPO.JOB.NO # DOS.JOB THEN
  REM         RELEASE OUTSIDE.PO ,CONO:DOS.PO
  REM         DOS.STATUS = 'OUTSIDE PO (':DOS.PO:') BELONG TO JOB # (':OPO.JOB.NO:')'
  REM         MATWRITE DOS.REC ON DAILY.OSP, DOS.ID
  REM         GOTO 1999
  REM      END
*CSF 24512 v
  OPTR=1
  LOOP
    LOCATE DOS.JOB IN OPO.JOB.NO<1>,OPTR SETTING OJFND ELSE OJFND = 0
    BEGIN CASE
      CASE OJFND = 0
        OPTR = 0
*T25755 v
*       CASE OPO.PROD.LINE<1,OJFND> # DOS.PRD.LINE
      CASE OPO.PROD.SEQ<1,OJFND> # DOS.PRD.SEQ
*T25755 ^
        OPTR = OJFND + 1
      CASE 1
        OPTR = 0
    END CASE
  WHILE OPTR DO REPEAT
  IF OJFND THEN UOM = OPO.UOM<1,OJFND>
*CSF 24512 ^
END
MATREAD CAOS.REC FROM CATEGORY.OSP , CONO:DOS.PRD.LINE ELSE
  IF CO.POS = "Y" THEN RELEASE OUTSIDE.PO ,CONO:DOS.PO
  DOS.STATUS = "CATEGORY.OSP # (":DOS.PRD.LINE:") NOT ON FILE"
  MATWRITE DOS.REC ON DAILY.OSP, DOS.ID
  GOTO 1999
END
*  ERR = 0
*  VPDS.KEY = CONO:DOS.VEND:"!O!":DOS.PO:"!":DOS.JOB:"!":DOS.PRD.LINE
*  MATREAD VPDS.REC FROM VEND.PROD.STATS,VPDS.KEY ELSE ERR = 1
*  IF ERR = 1 THEN 
*    DOS.STATUS = "THIS JOB NO LONGER   ON ":DOS.PO:" "
*    MATWRITE DOS.REC ON DAILY.OSP, DOS.ID
*    GOTO 1999
*  END
MATREADU JOB.REC FROM JOB, CONO : DOS.JOB ELSE
  MAT JOB.REC = ''
  FND = 0
  IF NUM(DOS.JOB) THEN
    IF DOS.JOB < J.CUTOFF.NUM THEN FND = 1
  END ELSE
    JC.CNT = COUNT(J.CUTOFF.PREFIX,VM) + (J.CUTOFF.PREFIX # "")
    FOR L = 1 TO JC.CNT WHILE FND = 0
      PREFX.LEN = LEN(J.CUTOFF.PREFIX<1,L>)
      IF J.CUTOFF.PREFIX<1,L> = DOS.JOB[1,PREFX.LEN] THEN
        CHK.VALUE = DOS.JOB[PREFX.LEN+1,LEN(DOS.JOB)-PREFX.LEN]
        IF NUM(CHK.VALUE) THEN
          IF CHK.VALUE < J.CUTOFF.PRE.NO<1,L> THEN FND = 1
        END
      END
    NEXT L
  END
  IF FND = 1 THEN
    POST.OSJ = 1
    JOB.DIV = DOS.DIV
    JOB.TYPE = DOS.TYPE
    JOB.DESC = "OUTSIDE JOB"
  END ELSE
    DOS.STATUS = 'JOB # ':DOS.JOB:' IS MISSING' ; GOTO 1899
  END
END
BEGIN CASE
  CASE JOB.STATUS<1,1> = 9
    DOS.STATUS = 'JOB # ':DOS.JOB:' IS CANCELED' ; GOTO 1899
  CASE JOB.STATUS<1,1> = 7
    DOS.STATUS = 'JOB # ':DOS.JOB:' IS READY TO PURGE' ; GOTO 1899
  CASE JOB.STATUS<1,1> = 8
    DOS.STATUS = 'JOB # ':DOS.JOB:' IS PURGED' ; GOTO 1899
END CASE
IF JOB.TYPE # "R" AND JOB.TYPE # DOS.TYPE THEN
  DOS.STATUS = "JOB BELONG TO A DIFFERENT TYPE"; GOTO 1899
END
IF JOB.DIV # DOS.DIV THEN
  DOS.STATUS = "JOB BELONG TO DIFFERENT DIVISION"; GOTO 1899
END
IF JOB.DEPT # DOS.DEPT[1,LEN(JOB.DEPT)] THEN
  DOS.STATUS = "JOB BELONG TO DIFFERENT DEPARTMENT"; GOTO 1899
END
IF (JOB.STATUS<1,1> > 1 AND JOB.STATUS<1,1> # 5) OR JOB.TRACK.DATE<1,7> # "" OR JOB.TRACK.DATE<1,8> # "" THEN
  IF DOS.INIT = "" THEN
    DOS.STATUS = 'JOB # ':DOS.JOB:' STATUS IS NOT BOOKED, NOR IN PROCESS AND INITIALS ARE MISSING' ; GOTO 1899
  END ELSE
    MATREAD JSI.REC FROM JOB.STAT.CODE,CONO:DOS.INIT ELSE
      DOS.STATUS = 'JOB # ':DOS.JOB:' STATUS IS NOT BOOKED, NOR IN PROCESS AND INITIALS ARE INVALID' ; GOTO 1899
    END
  END
END
MATREAD DIV.REC FROM DIVISION, CONO : DOS.DIV ELSE
  DOS.STATUS = 'DIV # ':DOS.DIV:' IS MISSING' ; GOTO 1899
END
MATREAD DEPT.REC FROM DEPARTMENT, CONO : DOS.DEPT ELSE
  DOS.STATUS = 'DEPT # ':DOS.DEPT:' IS MISSING' ; GOTO 1899
END
LOCATE DOS.DEPT IN DIV.DEPT<1>,1 SETTING FND.DEPT ELSE
  DOS.STATUS = 'DEPT # ':DOS.DEPT:' IS NOT UNDER DIV # ':DOS.DIV ; GOTO 1899
END
MATREAD CCTR.REC FROM COST.CNTR, CONO : DOS.CCTR ELSE
  DOS.STATUS = 'CCTR # ':DOS.CCTR:' IS MISSING' ; GOTO 1899
END
*T28171
* Restore to original code LMR 07/06/2004 v
IF CCTR.DEPT[1,2] # DOS.DEPT[1,2] THEN
*IF CCTR.DEPT # DOS.DEPT THEN
*T28171
  DOS.STATUS = 'INCORRECT DEPARTMENT FOR CCTR # ':DOS.CCTR ; GOTO 1899
END
IF CCTR.TYPE='F' THEN
  DOS.STATUS='CCTR # ':DOS.CCTR:' IS FROZEN'; GOTO 1899
END
LOCATE DOS.CCTR IN DEPT.CCTRS<1>,1 SETTING FND.CCTR ELSE
  DOS.STATUS = 'CCTR # ':DOS.CCTR:' IS NOT UNDER DEPT # ':DOS.DEPT
  GOTO 1899
END
MATREAD OPER.REC FROM OPERATION, CONO : DOS.OPER ELSE
  DOS.STATUS = 'OPER # ':DOS.OPER:' IS MISSING'; GOTO 1899
END
LOCATE DOS.OPER IN CCTR.OPER<1>,1 SETTING FND.OPER ELSE
  DOS.STATUS = 'OPER # ':DOS.OPER:' IS NOT IN CCTR # ':DOS.CCTR; GOTO 1899
END
IF DOS.WHSE # "" THEN
  MATREAD WHSE.REC FROM WAREHOUSE, CONO : DOS.WHSE ELSE
    DOS.STATUS = "CANNOT LOCATE WAREHOUSE - " : DOS.WHSE; GOTO 1899
  END
  IF DOS.LOC = "" THEN
    DOS.STATUS = "MISSING LOCATION # FOR WAREHOUSE - " : DOS.WHSE; GOTO 1899
  END
END
1899 BEGIN CASE
  CASE DOS.STATUS # ""
    RELEASE JOB, CONO:DOS.JOB
    IF CO.POS = "Y" THEN
      RELEASE OUTSIDE.PO ,CONO:DOS.PO
    END
    MATWRITE DOS.REC ON DAILY.OSP, DOS.ID
  CASE POST.OSJ = 0
    JOS.SEQ = DOS.ID[4,99]
    JOS.TYPE = DOS.TYPE
    JOS.SPOIL.CODE = DOS.SPOIL.CODE
    JOS.DIV = DOS.DIV
    JOS.OPER = DOS.OPER
    JOS.INV.DATE = DOS.INV.DATE
    JOS.DUE.DATE = DOS.DUE.DATE
    JOS.DATE = DOS.DATE
    JOS.VEND = DOS.VEND
    JOS.PO = DOS.PO
    JOS.QTY = DOS.QTY
    JOS.MON = POSTING.MON
    JOS.INV = DOS.INV
    JOS.DESC = DOS.DESC
    JOS.WHSE = DOS.WHSE
    JOS.LOC = DOS.LOC
    JOS.OPO.SEQ = DOS.PRD.SEQ ; * T25755
    IF DOS.TYPE = "S" OR DOS.TYPE = "N" THEN
      JOS.SALE = 0
    END ELSE
      JOS.SALE = DOS.SALE.AMT
    END
    JOS.DCOST = DOS.GRS.AMT
    IF DOS.GRS.AMT < 0 THEN ROND = (-.5) ELSE ROND = (.5) ;*T28678
    PTR = 1
    LOOP
      LOCATE DOS.DEPT IN JOB.OS.DEPT<1>,PTR SETTING DFND ELSE
        JOB.OS.DEPT<1,DFND> = DOS.DEPT
        JOB.OS.CCTR<1,DFND> = DOS.CCTR
        JOB.OS.PLINE<1,DFND> = DOS.PRD.LINE
        PTR = 0
      END
      BEGIN CASE
        CASE PTR = 0
        CASE DOS.CCTR # JOB.OS.CCTR<1,DFND>
          PTR = DFND + 1
        CASE DOS.PRD.LINE # JOB.OS.PLINE<1,DFND>
          PTR = DFND + 1
        CASE 1
          PTR = 0
      END CASE
    WHILE PTR DO REPEAT
    BEGIN CASE
      CASE WLR.OS.COST < 2
        JOS.COST = JOS.DCOST
      CASE NUM(CAOS.FOH.PCT)
*T28678 JOS.COST = INT((JOS.DCOST*(1 + CAOS.FOH.PCT/10000)) + .5)
        JOS.COST = INT((JOS.DCOST*(1 + CAOS.FOH.PCT/10000)) + ROND)
      CASE 1
        MATREAD FTR.REC FROM FOH.TABLE, CONO : CAOS.FOH.PCT ELSE
          MAT FTR.REC = ''
        END
        IF FTR.QTY = '' THEN
          FOH.PCT = 0
        END ELSE
          TOT.DCOST = JOS.DCOST
          TOT.COST = 0
          K = 1
          LOOP
            LOCATE DOS.PRD.LINE IN JOB.OS.PLINE<1>,K SETTING CPTR ELSE CPTR = 0
          WHILE CPTR DO
            TOT.DCOST = TOT.DCOST + JOB.OS.DCOST<1,CPTR>
            TOT.COST = TOT.COST + JOB.OS.COST<1,CPTR>
            K = CPTR + 1
          REPEAT
          FTR.CNT = COUNT(FTR.QTY,VM) + 1
          IF TOT.DCOST >= FTR.QTY<1,FTR.CNT> THEN
            FOH.PCT = FTR.PCT<1,FTR.CNT>
          END ELSE
            FOH.PCT = 0
            FOR FTR = 1 TO FTR.CNT WHILE FOH.PCT = 0
              IF TOT.DCOST <= FTR.QTY<1,FTR> THEN
                FOH.PCT = FTR.PCT<1,FTR>
              END
            NEXT FTR
          END
        END
*T28678 JOS.COST = INT((TOT.DCOST * (1 + FOH.PCT/10000)) + .5) - TOT.COST
        JOS.COST = INT((TOT.DCOST * (1 + FOH.PCT/10000)) + ROND) - TOT.COST
    END CASE
    JOB.OS.QTY<1,DFND> = JOB.OS.QTY<1,DFND> + JOS.QTY
    JOB.OS.DCOST<1,DFND> = JOB.OS.DCOST<1,DFND> + JOS.DCOST
    JOB.OS.COST<1,DFND> = JOB.OS.COST<1,DFND> + JOS.COST
    JOS.WIP = ""
    BEGIN CASE
      CASE WLR.SPL = "N" AND JOS.TYPE = "S"
      CASE WLR.NON.CHG = "N" AND JOS.TYPE = "N"
      CASE WLR.OS.WIP > 1
        JOS.WIP<1,1,1> = JOS.DCOST
        JOS.WIP<1,1,2> = JOS.COST - JOS.DCOST
      CASE WLR.OS.WIP > 0
        JOS.WIP<1,1,1> = JOS.DCOST
    END CASE
    OS.ID = CONO:DOS.JOB:"!":DOS.DEPT:"!":DOS.CCTR:"!"
    LOOP
      JOB.OS.SEQ<1,DFND> = JOB.OS.SEQ<1,DFND> + 1
      JOS.ID = OS.ID:DOS.PRD.LINE:"!":JOB.OS.SEQ<1,DFND>
      READ DUMMY FROM JOB.OSP, JOS.ID ELSE DUMMY = ""
    WHILE DUMMY # "" DO REPEAT
    IF JOS.DATE > JOB.OS.DATE<1,DFND,1> THEN
      JOB.OS.DATE<1,DFND,1> = JOS.DATE
    END
    IF JOS.SEQ > JOB.OS.DATE<1,DFND,2> THEN
      JOB.OS.VEND<1,DFND> = JOS.VEND
      JOB.OS.DATE<1,DFND,2> = JOS.SEQ
      JOB.OS.DATE<1,DFND,3> = JOB.OS.SEQ<1,DFND>
    END
    JOB.OS.SALE<1,DFND> = JOB.OS.SALE<1,DFND> + JOS.SALE
    IF JOS.WIP # "" THEN
      CCW.ID = CONO:JOS.DIV:DOS.DEPT:"!":DOS.CCTR:JOS.MON
      MATREADU CCW.REC FROM COST.CNTR.WIP, CCW.ID ELSE MAT CCW.REC = ""
      JOB.WIP<1,1> = JOB.WIP<1,1> + 2
      JOB.OS.WIP<1,1> = JOB.OS.WIP<1,1> + 2
      FOR W = 1 TO WLR.OS.WIP
        JOB.WIP<1,2,W> = JOB.WIP<1,2,W> + JOS.WIP<1,1,W>
        JOB.OS.WIP<1,2,W> = JOB.OS.WIP<1,2,W> + JOS.WIP<1,1,W>
        CCW.OS.I<1,W> = CCW.OS.I<1,W> + JOS.WIP<1,1,W>
      NEXT W
      MATWRITE CCW.REC ON COST.CNTR.WIP, CCW.ID
    END
    IF JOS.MON < JOB.OS.WIP<1,4> OR JOB.OS.WIP<1,4> = "" THEN
      JOB.OS.WIP<1,4> = JOS.MON
      IF JOS.MON < JOB.WIP<1,4> OR JOB.WIP<1,4> = "" THEN
        JOB.WIP<1,4> = JOS.MON
      END
    END
    IF JOS.MON > JOB.OS.WIP<1,5> THEN
      JOB.OS.WIP<1,5> = JOS.MON
      IF JOS.MON > JOB.WIP<1,5> THEN
        JOB.WIP<1,5> = JOS.MON
      END
    END
    PRDS.ID = CONO:"*":JOS.DIV:"*":DOS.DEPT:"*":DOS.CCTR:"*":JOS.MON:"*1*A"
    MATREADU PRDS.REC FROM PROD.STATS, PRDS.ID ELSE MAT PRDS.REC = ""
    BEGIN CASE
      CASE JOS.TYPE = 'N'
        PTR = 2
        PRDS.OSP.NC.DCOST = PRDS.OSP.NC.DCOST + JOS.DCOST
        PRDS.OSP.NC.COST = PRDS.OSP.NC.COST + JOS.COST
      CASE JOS.TYPE = 'C'
        PTR = 3
        PRDS.OSP.DCOST = PRDS.OSP.DCOST + JOS.DCOST
        PRDS.OSP.COST = PRDS.OSP.COST + JOS.COST
      CASE JOS.TYPE = 'S'
        PTR = 4
        PRDS.OSP.SP.DCOST = PRDS.OSP.SP.DCOST + JOS.DCOST
        PRDS.OSP.SP.COST = PRDS.OSP.SP.COST + JOS.COST
        IF JOS.SPOIL.CODE # "" THEN
          SSR.ID=CONO:JOS.DIV:DOS.DEPT:"!":DOS.CCTR:JOS.MON:JOS.SPOIL.CODE
          MATREADU SSR.REC FROM SPOIL.STATS, SSR.ID ELSE MAT SSR.REC = ""
          SSR.OS<1,1> = SSR.OS<1,1> + JOS.DCOST
          IF JOS.DCOST <> JOS.COST THEN
            SSR.OS<1,2> = SSR.OS<1,2> + JOS.COST - JOS.DCOST
          END
          MATWRITE SSR.REC ON SPOIL.STATS, SSR.ID
        END
      CASE 1
        PTR = 1
        JOS.TYPE = "R"
        PRDS.OSP.DCOST = PRDS.OSP.DCOST + JOS.DCOST
        PRDS.OSP.COST = PRDS.OSP.COST + JOS.COST
    END CASE
    MATWRITE PRDS.REC ON PROD.STATS, PRDS.ID
    JOB.OS.TCOST<1,DFND,PTR> = JOB.OS.TCOST<1,DFND,PTR> + JOS.COST
    IF JOB.STATUS = "" THEN
      JOB.STATUS = INSERT(JOB.STATUS,1,1,0,"1")
      JOB.STAT.DATE = INSERT(JOB.STAT.DATE,1,1,0,DATE())
    END
    IF JOB.STATUS<1,1> # 1 THEN
      JOB.STATUS = INSERT(JOB.STATUS,1,1,0,"5")
      JOB.STAT.DATE = INSERT(JOB.STAT.DATE,1,1,0,DATE())
    END
    JOB.TOT.SALE = JOB.TOT.SALE + JOS.SALE
    JOB.TOT.COST = JOB.TOT.COST + JOS.COST
    JOB.TOT.DCOST = JOB.TOT.DCOST + JOS.DCOST
    IF CO.POS = "Y" THEN
      PTR = 1
      CFND = 0
*T25755 v
*       LOOP
*       UNTIL CFND > 0 OR OPO.JOB.NO<1,PTR> = '' DO
*         LOCATE DOS.JOB IN OPO.JOB.NO<1>,PTR SETTING CFND ELSE CFND = 0
*         IF CFND # 0 THEN
*           IF DOS.PRD.LINE=OPO.PROD.LINE<1,CFND> THEN CFND=CFND ELSE CFND=0
*         END
*         PTR = PTR + 1
*       REPEAT
      LOCATE DOS.PRD.SEQ IN OPO.PROD.SEQ<1>,PTR SETTING CFND ELSE
        CFND = 0
      END
*T25755 ^
*       IF OPO.JOB.NO # '' THEN
      IF CFND # 0 THEN
        OPO.QTY.RECVD<1,CFND> = OPO.QTY.RECVD<1,CFND> + DOS.QTY
* CSF 23044 LMR
        OPO.TOT.OPEN<1,CFND> = OPO.TOT.OPEN<1,CFND> - DOS.QTY
        IF OPO.TOT.OPEN<1,CFND> < 0 THEN OPO.TOT.OPEN<1,CFND> = 0
*
        OPO.DATE.RECVD<1,CFND> = DOS.DATE
        OPO.INV.NO<1,CFND> = DOS.INV
        OPO.AMT.RECVD<1,CFND> = OPO.AMT.RECVD<1,CFND> + DOS.GRS.AMT
        IF OPO.EST.COST<1,CFND> # OPO.AMT.RECVD<1,CFND> THEN
          OPO.STATUS = 1
        END
        IF OPO.JOB.TRAN = "" THEN
          OPO.JOB.TRAN<1,1> = JOS.SEQ
        END ELSE
          TR.CNT = COUNT(OPO.JOB.TRAN,VM) + (OPO.JOB.TRAN # "") + 1
          OPO.JOB.TRAN<1,TR.CNT> = JOS.SEQ
        END
        MATWRITE OPO.REC ON OUTSIDE.PO , CONO:DOS.PO
* Update Accrued Liability History
        IF OPO.ACCRUE = "Y" THEN
          READU ALH.CT FROM CONTROL,CONO:"ALHCOUNTER" ELSE ALH.CT=0
          ALH.CT = ALH.CT + 1
          IF ALH.CT > 999999 THEN ALH.CT = 1
          WRITE ALH.CT ON CONTROL,CONO:"ALHCOUNTER"
          MAT ALH.REC = ""
          ALH.ID = CONO:STR("0",6-LEN(ALH.CT)):ALH.CT
          ALH.DATE = DATE()
          ALH.REF = "O*":JOS.PO:"*":DOS.JOB
          ALH.SRC = "OR"
          ALH.MON = JOS.MON
          ALH.AMT = 0 - DOS.GRS.AMT
          ALH.ACCT = CAOS.ACCRU.LIAB
* TASK 20080 v
          ALH.DV.DP.CC = DOS.DIV:DOS.DEPT:DOS.CCTR
* TASK 20080 ^
          ALH.OFF.ACCT = CAOS.WIP ;*T23880  
          MATWRITE ALH.REC ON ACCRUED.LIAB.HIST,ALH.ID
        END
      END ELSE
        RELEASE OUTSIDE.PO, CONO:DOS.PO
      END
    END
    MATWRITE JOB.REC ON JOB, CONO : DOS.JOB
    MATWRITE JOS.REC ON JOB.OSP, JOS.ID
* 16414 TO SKIP RECORDS ALREADY UPDATE TO STATS IN VOUCHERING
    REM      IF CO.APS.O.INTRF > 1 THEN GOSUB 2000
    IF CO.APS.O.INTRF > 1 THEN
      IF DOS.ORIGIN # 1 THEN
        GOSUB 2000
      END
    END
    DELETE DAILY.OSP, DOS.ID
    IF COMBO.PRESENT THEN
      READV REC FROM COMBO.JOB,CONO:DOS.JOB,1 THEN
        COSP.ID=JOS.ID[4,99]
        JDPTR=DCOUNT(JOS.DCOST,VM)
        STATUS=""
        CALL COMBO.OS.ALLOC.SUB(CONO,COSP.ID,JDPTR,MAT WIP.LEVEL.REC,COMBO.JOB,COMBO.ALLOC,GANG.JOB,GANG.ALLOC,GANG.PRESENT,STATUS)
        IF STATUS # "" THEN
          ERRMSG = STATUS
          GOSUB 91000
        END
      END ELSE
        IF GANG.PRESENT THEN
          READV REC FROM GANG.JOB,CONO:DOS.JOB,1 THEN
            OSP.ID=JOS.ID[4,99]
            JDPTR=DCOUNT(JOS.DCOST,VM)
            STATUS=""
            CALL GANG.OS.ALLOC.SUB(CONO,OSP.ID,JDPTR,MAT WIP.LEVEL.REC,GANG.JOB,GANG.ALLOC,STATUS)
            IF STATUS # "" THEN
              ERRMSG = STATUS
              GOSUB 91000
            END
          END
        END
      END
    END ELSE
      IF GANG.PRESENT THEN
        READV REC FROM GANG.JOB,CONO:DOS.JOB,1 THEN
          OSP.ID=JOS.ID[4,99]
          JDPTR=DCOUNT(JOS.DCOST,VM)
          STATUS=""
          CALL GANG.OS.ALLOC.SUB(CONO,OSP.ID,JDPTR,MAT WIP.LEVEL.REC,GANG.JOB,GANG.ALLOC,STATUS)
          IF STATUS # "" THEN
            ERRMSG = STATUS
            GOSUB 91000
          END
        END
      END
    END
  CASE 1
    MAT OJOS.REC = ""
    OJOS.JOB = DOS.JOB
    OJOS.TYPE = DOS.TYPE
    OJOS.SPOIL.CODE = DOS.SPOIL.CODE
    OJOS.DIV = DOS.DIV
    OJOS.DEPT = DOS.DEPT
    OJOS.CCTR = DOS.CCTR
    OJOS.OPER = DOS.OPER
    OJOS.PRD.LINE = DOS.PRD.LINE
    OJOS.INV.DATE = DOS.INV.DATE
    OJOS.DUE.DATE = DOS.DUE.DATE
    OJOS.DATE = DOS.DATE
    OJOS.VEND = DOS.VEND
    OJOS.PO = DOS.PO
    OJOS.QTY = DOS.QTY
    OJOS.MON = POSTING.MON
    OJOS.INV = DOS.INV
    OJOS.DESC = DOS.DESC
    OJOS.WHSE = DOS.WHSE
    OJOS.LOC = DOS.LOC
    OJOS.PRD.SEQ = DOS.PRD.SEQ ; * T25755
    IF DOS.TYPE = "S" OR DOS.TYPE = "N" THEN
      OJOS.SALE = 0
    END ELSE
      OJOS.SALE = DOS.SALE.AMT
    END
    OJOS.COST = DOS.GRS.AMT
    MATWRITE OJOS.REC ON OJOB.OSP , DOS.ID
    IF CO.APS.O.INTRF > 1 THEN GOSUB 2000
    DELETE DAILY.OSP , DOS.ID
END CASE
1999 *
RETURN
*
*--- UPDATE VEND.STATS FILES
*
2000 *
VSTAT.KEY = CONO : DOS.VEND :"!O"
VPS.KEY = VSTAT.KEY :"!": DOS.PO
* 16414
REM  VPDS.KEY = VPS.KEY :"!": DOS.JOB :"!":DOS.PRD.LINE
*T25755 v
*  VPDS.KEY = VPS.KEY :"!": OSP.FIRST.JOB :"!":DOS.PRD.LINE
VPDS.KEY = VPS.KEY :"!": OSP.FIRST.JOB :"!":DOS.PRD.LINE:'@':DOS.PRD.SEQ
*T25755 ^
MATREADU VSTAT.REC FROM VEND.STATS, VSTAT.KEY ELSE MAT VSTAT.REC = ""
MATREADU VPS.REC FROM VEND.PO.STATS, VPS.KEY ELSE MAT VPS.REC = ""
MATREADU VPDS.REC FROM VEND.PROD.STATS, VPDS.KEY ELSE MAT VPDS.REC = ""
* 16414 - CREATE NEW ITEM IN VEND PROD STATS FOR EACH RECEIPT
REM   LOCATE DOS.DATE IN VPDS.REC.DATE<1>,1 SETTING JFND ELSE
REM      VPDS.REC.DATE<1,JFND> = DOS.DATE
REM      VPDS.REC.QTY<1,JFND> = 0
REM      VPDS.REC.UN.COST<1,JFND> = 0
REM   END
JFND = COUNT(VPDS.REC.DATE<1>,VM) + (VPDS.REC.DATE<1> # "") + 1
VPDS.REC.DATE<1,JFND> = DOS.DATE
VPDS.REC.QTY<1,JFND> = DOS.QTY
VPDS.OPER.PERF<1,JFND> = DOS.OPER
*    VPDS.REC.UN.COST<1,JFND> = DOS.GRS.AMT
*CSF 24512 v
* CSF 23566
* CSF 25695 v
IF DOS.QTY+0 = 0 THEN DOS.QTY = 1
* CSF 25695 ^
  *T23319 v                                                           
IF DOS.U.PRICE + 0 = 0 THEN                                         
  BEGIN CASE                                                        
    CASE UOM = "M"                                                  
      REC.AMT = DOS.GRS.AMT / DOS.QTY                               
      VPDS.REC.UN.COST<1,JFND> = INT((REC.AMT * 100000) + .5) * 100 
    CASE UOM = "C"                                                  
      REC.AMT = DOS.GRS.AMT / DOS.QTY                               
      VPDS.REC.UN.COST<1,JFND> = INT((REC.AMT * 10000) + .5) * 100  
    CASE 1                                                          
      VPDS.REC.UN.COST<1,JFND> = ICONV(DOS.GRS.AMT / DOS.QTY, 'MD4')
  END CASE                                                          
END ELSE                                                            
  VPDS.REC.UN.COST<1,JFND> = DOS.U.PRICE                            
END                                                                 
  * IF UOM = 'M' THEN
  *   IF DOS.U.PRICE + 0 = 0 THEN
  *     REC.AMT = DOS.GRS.AMT / DOS.QTY
  *     VPDS.REC.UN.COST<1,JFND> = INT((REC.AMT * 100000) + .5) * 100
  *   END ELSE
  *     VPDS.REC.UN.COST<1,JFND> = DOS.U.PRICE
  *   END
  * END ELSE
  *   IF DOS.U.PRICE + 0 = 0 THEN
  *     VPDS.REC.UN.COST<1,JFND> = ICONV(DOS.GRS.AMT / DOS.QTY, 'MD4')
  *   END ELSE
  *     VPDS.REC.UN.COST<1,JFND> = DOS.U.PRICE
  *   END
  * END
  *T23319 ^
*
*CSF 24512 ^
PFND = 1
LOOP
* 16414
  REM      LOCATE DOS.JOB IN VPS.PROD<1>,PFND SETTING JFND ELSE PFND = 0
  LOCATE OSP.FIRST.JOB IN VPS.PROD<1>,PFND SETTING JFND ELSE PFND = 0
  BEGIN CASE
    CASE PFND = 0
* 16414
      REM         VPS.PROD<1,JFND> = DOS.JOB
      VPS.PROD<1,JFND> = OSP.FIRST.JOB
      VPS.PROD.DESC<1,JFND> = JOB.DESC<1,1>
      VPS.U.M<1,JFND> = ""
*T25755 v
*           VPS.WHSE<1,JFND> = DOS.PRD.LINE
      VPS.WHSE<1,JFND> = DOS.PRD.LINE:'@':DOS.PRD.SEQ
*T25755 ^
      VPS.ORD.QTY<1,JFND> = ""
      VPS.ORD.AMT<1,JFND> = ""
      VPS.REC.QTY<1,JFND> = DOS.QTY
*           VPS.REC.AMT<1,JFND> = DOS.GRS.AMT
      VPS.REC.AMT<1,JFND> = DOS.GRS.AMT
      VPS.VOU.QTY<1,JFND> = ""
      VPS.VOU.AMT<1,JFND> = ""
      VPS.VOU.NO<1,JFND> = ""
*T25755 v
*        CASE VPS.WHSE<1,JFND> # DOS.PRD.LINE
    CASE VPS.WHSE<1,JFND> # DOS.PRD.LINE:'@':DOS.PRD.SEQ
*T25755 ^
      PFND = JFND + 1
    CASE 1
      VPS.REC.QTY<1,JFND> = VPS.REC.QTY<1,JFND> + DOS.QTY
      VPS.REC.AMT<1,JFND> = VPS.REC.AMT<1,JFND> + DOS.GRS.AMT
      PFND = 0
  END CASE
WHILE PFND DO
REPEAT
LOCATE DOS.PO IN VSTAT.PO<1>,1 SETTING JFND ELSE
  VSTAT.PO<1,JFND> = DOS.PO
  VSTAT.PO.ORDERD<1,JFND> = ""
  VSTAT.PO.RECV<1,JFND> = ""
  VSTAT.PO.VOUCH<1,JFND> = ""
  VSTAT.VOUCH.NOS<1,JFND> = ""
END
VSTAT.PO.RECV<1,JFND> = VSTAT.PO.RECV<1,JFND> + DOS.GRS.AMT
MATWRITE VSTAT.REC ON VEND.STATS, VSTAT.KEY
MATWRITE VPS.REC ON VEND.PO.STATS, VPS.KEY
MATWRITE VPDS.REC ON VEND.PROD.STATS, VPDS.KEY
RETURN
91000 *
ERR.TYPE = 1
CALL SYSCOM(MAT SYSCOM.REC)
RETURN
92000 *
ERR.TYPE = 2
CALL SYSCOM(MAT SYSCOM.REC)
RETURN
93000 *
ERR.TYPE = 3
CALL SYSCOM(MAT SYSCOM.REC)
**** END OF JOB
99999 *
END
