*COPY>CPYLIB>COM1
*COPY>JCS.CPYLIB>COM.JCS.LINK
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>JCS.CPYLIB>COM.INV.STATS 
*COPY>PMC.CPYLIB>COM.CUST
*COPY>OPS.CPYLIB>COM.ORDER
*COPY>JCS.CPYLIB>COM.JCS.EOM.POST
*COPY>PMC.CPYLIB>COM.COMPANY
*********************************************************************
* REVISION    - [08.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - JCSBP
* PROGRAM     - JCS.EOM.POST
* BY          - ZIAD YAMOUT, C.B.A
* DATE        - 02/28/87
* DESCRIPTION -
*
*TASK 17927 GAT 10/31/94 ALLOW FOR REV DIST ON INVOICE
*
* TASK 17919 RKB * import into from dev
*
* 18573 5/95 LLH - 1-52 ACCOUNTING PERIODS
*
*T21177 diane 12/19/1996 * Add close for GUI
*T21177 diane 12/19/1996 * Move processing message for GUI
*T23200 cindy 08/24/1998 * prompt after cont not gui'd
*T23278 markt 11/23/1998 * Allow closing/posting by division.
*T22367 renee 01/02/1998 * Adding open statement for JOB.FNGD.STATS 
*T24118 cm 08/03/1999 * Correct posting problem where X-Jobs are not
*                       posting in the correct fiscal period
*T25389 lanny 08/18/2000 * WEEK SEQ # NOT ALWAYS DETERMINED CORRECTLY
*                          FOR XJOBS.
*T25648 lanny 02/23/2001 * XJOBS should be completed when processed.
*T26334 epitka 12/19/2001 * REV12
*T26685 lhelms 07/03/2002 * REV12 DIVISION SECURITY
*T27655 lross 09/12/2003 * Clear WIP.SALES.STATS at beginning.
*T28473 lross 03/16/2005 * Close 'X' Jobs only once.
*T28562 lross 05/24/2005 * Move Closing of XJOB's to EOM Closing function.
*ENDDOC
*********************************************************************
*
***** INSERT FILE EQUATE
*
*COPY>JCS.CPYLIB>EOM.ACCT
*COPY>PMC.CPYLIB>CUSTOMER
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>COA
*COPY>PMC.CPYLIB>GLTABLE
*COPY>PMC.CPYLIB>SALESDATES
*COPY>PMC.CPYLIB>FISCAL
*COPY>PMC.CPYLIB>POST.REJECTS
*COPY>PMC.CPYLIB>INVOICE.SALES.STATS
*COPY>PMC.CPYLIB>WIP.SALES.STATS
*COPY>ICS.CPYLIB>INV.JOB.STATS
*COPY>ICS.CPYLIB>INV.STATS
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>JCS.CPYLIB>COST.CNTR.WIP
*COPY>PMC.CPYLIB>COST.CNTR
*COPY>JCS.CPYLIB>JOB
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>SYSCOM
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>JCS.CPYLIB>INVOICE
*
**** INTITIALIZATION
*
MAT FILE.VARS = ""
MAT EDIT.COM.DRIVER = ""
* MAT EDIT.COM = ""
* TYP = 0; CALL EDIT.SUB; FILL = "#"
MAT EOM.ACCT.REC = ""
*
***** SETUP ERRMSG ROUTINE
*
SYS.TYPE=1
CALL SYSCOM(MAT SYSCOM.REC)
*
*--- PROCREAD
*
PROCREAD INBUFF ELSE
  ERRMSG = "MUST RUN FROM PROC"
  GOSUB 91000; GOTO 99999
END
CONO = INBUFF<1>
DIV.CODE = INBUFF<7>;* T23278
FR.NEXT.PER = ""
*
***** OPEN FILES
*
OPEN '','CUSTOMER' TO CUSTOMER ELSE ERRMSG='CUSTOMER FILE MISSING';GOTO 93000
OPEN '','COMPANY' TO COMPANY ELSE ERRMSG='COMPANY FILE MISSING';GOTO 93000
OPEN '','CONTROL' TO CONTROL ELSE ERRMSG='CONTROL FILE MISSING';GOTO 93000
OPEN '','PMC.SCREENS' TO M.SCREENS ELSE ERRMSG='PMC.SCREENS FILE IS MISSING';GOTO 93000
OPEN '','COA' TO COA ELSE ERRMSG='COA FILE IS MISSING';GOTO 93000
OPEN '','SALES.CODE' TO SALES.CODE ELSE ERRMSG='SALES.CODE FILE IS MISSING';GOTO 93000
OPEN '','JOB' TO JOB ELSE ERRMSG='JOB FILE MISSING';GOTO 93000
OPEN '','INVENTORY' TO INVENTORY ELSE ERRMSG='INVENTORY FILE MISSING';GOTO 93000
OPEN '','CATEGORY' TO CATEGORY ELSE ERRMSG='CATEGORY FILE MISSING';GOTO 93000
OPEN '','CATEGORY.OSP' TO CATEGORY.OSP ELSE ERRMSG='CATEGORY.OSP FILE MISSING';GOTO 93000
OPEN '','COST.CNTR.WIP' TO COST.CNTR.WIP ELSE ERRMSG='COST.CNTR.WIP FILE MISSING';GOTO 93000
OPEN '','COST.CNTR' TO COST.CNTR ELSE ERRMSG='COST.CNTR FILE MISSING';GOTO 93000
OPEN '','EOD.HIST' TO EOD.HIST ELSE ERRMSG='EOD.HIST FILE MISSING';GOTO 93000
OPEN '','INV.WHSE.LOC' TO INV.WHSE.LOC ELSE ERRMSG='INV.WHSE.LOC FILE MISSING';GOTO 93000
OPEN '','INV.WHSE' TO INV.WHSE ELSE ERRMSG='INV.WHSE FILE MISSING';GOTO 93000
OPEN '','INV.STATS' TO INV.STATS ELSE ERRMSG='INV.STATS FILE MISSING';GOTO 93000
OPEN '','INV.JOB.STATS' TO INV.JOB.STATS ELSE ERRMSG='INV.JOB.STATS FILE MISSING';GOTO 93000
OPEN '','INVOICE' TO INVOICE ELSE ERRMSG='INVOICE FILE MISSING';GOTO 93000
OPEN '','JOB.TIME' TO JOB.TIME ELSE ERRMSG='JOB.TIME FILE IS MISSING';GOTO 93000
OPEN '','JOB.TIME.TAG' TO JOB.TIME.TAG ELSE ERRMSG='JOB.TIME.TAG FILE IS MISSING';GOTO 93000
OPEN '','JOB.MATL' TO JOB.MATL ELSE ERRMSG='JOB.MATL FILE IS MISSING';GOTO 93000
OPEN '','JOB.OSP' TO JOB.OSP ELSE ERRMSG='JOB.OSP FILE IS MISSING';GOTO 93000
OPEN '','JOB.SHIP' TO JOB.SHIP ELSE ERRMSG='JOB.SHIP FILE IS MISSING';GOTO 93000
OPEN '','JOB.MISC' TO JOB.MISC ELSE ERRMSG='JOB.MISC FILE IS MISSING';GOTO 93000
OPEN '','TAX' TO TAX ELSE ERRMSG='TAX FILE IS MISSING';GOTO 93000
OPEN '','SHIP.VIA' TO SHIP.VIA ELSE ERRMSG='SHIP.VIA FILE IS MISSING';GOTO 93000
OPEN '','OUTSIDE.PO' TO OUTSIDE.PO ELSE ERRMSG='OUTSIDE.PO FILE IS MISSING';GOTO 93000
OPEN '',INBUFF<3> TO EOM.TRANS ELSE ERRMSG=INBUFF<3>:' FILE MISSING';GOTO 93000
OPEN '',INBUFF<4> TO POST.REJECTS ELSE ERRMSG=INBUFF<4>:' FILE IS MISSING';GOTO 93000
OPEN '',INBUFF<6> TO WIP.SALES.STATS ELSE ERRMSG=INBUFF<6>:' FILE IS MISSING';GOTO 93000
*
***** GET CONO
*
MATREAD COMP.REC FROM COMPANY, CONO ELSE
  ERRMSG = "COMPANY RECORD IS MISSING"
  GOTO 93000
END
READ PERIOD.REC FROM CONTROL, CONO:"ACCT.PERIODS" ELSE
  PERIOD.REC = ""
  PERIOD.REC<1> = 12
END
NUM.PERIODS = PERIOD.REC<1>
IF CO.ARS = "Y" THEN
  OPEN '','OPEN.RECV' TO OPEN.RECV ELSE ERRMSG='OPEN.RECV FILE MISSING';GOTO 93000
END
IF CO.OPS = 'Y' THEN
  IF FILEINFO(INV_RECEIPTS,0)=0 THEN                   
    OPEN '','INV_RECEIPTS' TO INV_RECEIPTS ELSE        
      ERRMSG="INV_RECEIPTS FILE IS MISSING";GOTO 93000 
    END                                                
  END                                                  
  OPEN '','FNGD.WIP.HIST' TO FNGD.WIP.HIST ELSE ERRMSG='FNGD.WIP.HIST FILE IS MISSING';GOTO 93000
  OPEN '','FNGD_WIP_HIST_TAG' TO FNGD_WIP_HIST_TAG ELSE ERRMSG='FNGD_WIP_HIST_TAG FILE IS MISSING';GOTO 93000
  OPEN '','JOB.FNGD.STATS' TO JOB.FNGD.STATS ELSE ERRMSG='JOB.FNGD.STATS FILE MISSING';GOTO 93000
END
SYS.FISCAL = "JCFISCAL"
STMT.HEAD = "SALES & JOB COST"
*
*---- Load Screen
*
*COPY>PMCBP>EOD.POST
IF ECD.RET.VALUE = "END" THEN
  ECD.ACTION = 99 ; CALL SCRN.EDIT
  GOTO 99000
END
*T24118 v
MATREAD FISCAL.REC FROM CONTROL, CONO:SYS.FISCAL ELSE
  ERRMSG = "Cannot locate CONTROL ":SYS.FISCAL
  GOTO 93000
END
FISCAL.YR = FR.CURR.PER<1,POS>[1,4]
FISCAL.PER = FR.CURR.PER<1,POS>[5,2]
LFISCAL.YR = FISCAL.YR
LFISCAL.PER = FISCAL.PER -1
IF LFISCAL.PER = 0 THEN
  LFISCAL.PER = NUM.PERIODS
  LFISCAL.YR -= 1
END
LFISCAL.PER = STR('0',2-LEN(LFISCAL.PER)):LFISCAL.PER
READ PRODUCTION.REC FROM CONTROL,CONO:FISCAL.YR:'PRODUCTION.WEEKS' THEN NULL ELSE
  ERRMSG=FISCAL.YR:'PRODUCTION.WEEKS CONTROL RECORD IS MISSING'
  GOTO 93000
END
*T24118 ^
LOOP
  ECD.NUM = 20
  ECD.ACTION = 4
  CALL SCRN.EDIT
  VALUE = ECD.RET.VALUE
  BEGIN CASE
    CASE VALUE = "Y"
      NO.DETAIL = 0
    CASE VALUE = "N"
      NO.DETAIL = 1
    CASE 1
      VALUE = "END"
  END CASE
WHILE VALUE = "END" DO
REPEAT
CLEARFILE EOM.TRANS
CLEARFILE POST.REJECTS
CLEARFILE WIP.SALES.STATS ;*T27655
PRR.SEQ = 10000
MATREAD COA.REC FROM COA, CONO : GLTB.SALES ELSE COA.LEVEL = 0
SA.SAL.ACCT = GLTB.SALES
SA.SAL.LEVEL = COA.LEVEL
MATREAD COA.REC FROM COA, CONO : GLTB.RET.ALLOW ELSE COA.LEVEL = 0
SA.RET.ACCT = GLTB.RET.ALLOW
SA.RET.LEVEL = COA.LEVEL
MATREAD COA.REC FROM COA, CONO : GLTB.AR ELSE COA.LEVEL = 0
SA.INV.ACCT = GLTB.AR
SA.INV.LEVEL = COA.LEVEL
MATREAD COA.REC FROM COA, CONO : GLTB.PRE.BILL ELSE COA.LEVEL = 0
SA.PBL.ACCT = GLTB.PRE.BILL
SA.PBL.LEVEL = COA.LEVEL
MATREAD COA.REC FROM COA, CONO : GLTB.MSC.SALE ELSE COA.LEVEL = 0
SA.MSC.ACCT = GLTB.MSC.SALE
SA.MSC.LEVEL = COA.LEVEL
MATREAD COA.REC FROM COA, CONO : GLTB.SALES.TAX ELSE COA.LEVEL = 0
SA.TAX.ACCT = GLTB.SALES.TAX
SA.TAX.LEVEL = COA.LEVEL
MATREAD COA.REC FROM COA, CONO : GLTB.FRT ELSE COA.LEVEL = 0
SA.FRT.ACCT = GLTB.FRT
SA.FRT.LEVEL = COA.LEVEL
MATREAD COA.REC FROM COA, CONO : GLTB.TRADE.DISC ELSE COA.LEVEL = 0
SA.DSC.ACCT = GLTB.TRADE.DISC
SA.DSC.LEVEL = COA.LEVEL
MATREAD COA.REC FROM COA, CONO : GLTB.WIP.CLR ELSE COA.LEVEL = 0
WIP.CLR.ACCT = GLTB.WIP.CLR
WIP.CLR.LEVEL = COA.LEVEL
MATREAD COA.REC FROM COA, CONO : GLTB.FNGD.VAR ELSE COA.LEVEL = 0
FNGD.VAR.ACCT = GLTB.FNGD.VAR
FNGD.VAR.LEVEL = COA.LEVEL
LB.WIP.ACCT<1> = GLTB.LB.DIR.WIP
LB.WIP.ACCT<2> = GLTB.LB.FOH.WIP
LB.WIP.ACCT<3> = GLTB.LB.VOH.WIP
LB.WIP.ACCT<4> = GLTB.LB.S.A.WIP
FOR W = 1 TO 4
  MATREAD COA.REC FROM COA, CONO : LB.WIP.ACCT<W> ELSE COA.LEVEL = 0
  LB.WIP.LEVEL<W> = COA.LEVEL
NEXT W
LB.COG.ACCT<1> = GLTB.LB.DIR.COG
LB.COG.ACCT<2> = GLTB.LB.FOH.COG
LB.COG.ACCT<3> = GLTB.LB.VOH.COG
LB.COG.ACCT<4> = GLTB.LB.S.A.COG
FOR W = 1 TO 4
  MATREAD COA.REC FROM COA, CONO : LB.COG.ACCT<W> ELSE COA.LEVEL = 0
  LB.COG.LEVEL<W> = COA.LEVEL
NEXT W
LB.APL.ACCT<1> = GLTB.LB.DIR.APL
LB.APL.ACCT<2> = GLTB.LB.FOH.APL
LB.APL.ACCT<3> = GLTB.LB.VOH.APL
LB.APL.ACCT<4> = GLTB.LB.S.A.APL
FOR W = 1 TO 4
  MATREAD COA.REC FROM COA, CONO : LB.APL.ACCT<W> ELSE COA.LEVEL = 0
  LB.APL.LEVEL<W> = COA.LEVEL
NEXT W
MT.WIP.ACCT<1> = GLTB.MT.DIR.WIP
MT.WIP.ACCT<2> = GLTB.MT.FOH.WIP
MT.WIP.ACCT<3> = GLTB.MT.VOH.WIP
FOR W = 1 TO 3
  MATREAD COA.REC FROM COA, CONO : MT.WIP.ACCT<W> ELSE COA.LEVEL = 0
  MT.WIP.LEVEL<W> = COA.LEVEL
NEXT W
MT.COG.ACCT<1> = GLTB.MT.DIR.COG
MT.COG.ACCT<2> = GLTB.MT.FOH.COG
MT.COG.ACCT<3> = GLTB.MT.VOH.COG
FOR W = 1 TO 3
  MATREAD COA.REC FROM COA, CONO : MT.COG.ACCT<W> ELSE COA.LEVEL = 0
  MT.COG.LEVEL<W> = COA.LEVEL
NEXT W
MT.INV.ACCT<1> = GLTB.INV
MT.INV.ACCT<2> = GLTB.MT.FOH.APL
MT.INV.ACCT<3> = GLTB.MT.VOH.APL
FOR W = 1 TO 3
  MATREAD COA.REC FROM COA, CONO : MT.INV.ACCT<W> ELSE COA.LEVEL = 0
  MT.INV.LEVEL<W> = COA.LEVEL
NEXT W
OS.WIP.ACCT<1> = GLTB.OS.DIR.WIP
OS.WIP.ACCT<2> = GLTB.OS.FOH.WIP
FOR W = 1 TO 2
  MATREAD COA.REC FROM COA, CONO : OS.WIP.ACCT<W> ELSE COA.LEVEL = 0
  OS.WIP.LEVEL<W> = COA.LEVEL
NEXT W
OS.COG.ACCT<1> = GLTB.OS.DIR.COG
OS.COG.ACCT<2> = GLTB.OS.FOH.COG
FOR W = 1 TO 2
  MATREAD COA.REC FROM COA, CONO : OS.COG.ACCT<W> ELSE COA.LEVEL = 0
  OS.COG.LEVEL<W> = COA.LEVEL
NEXT W
OS.APL.ACCT<1> = GLTB.OS.DIR.APL
OS.APL.ACCT<2> = GLTB.OS.FOH.APL
FOR W = 1 TO 2
  MATREAD COA.REC FROM COA, CONO : OS.APL.ACCT<W> ELSE COA.LEVEL = 0
  OS.APL.LEVEL<W> = COA.LEVEL
NEXT W
SP.WIP.ACCT<1> = GLTB.SP.DIR.WIP
SP.WIP.ACCT<2> = GLTB.SP.FOH.WIP
FOR W = 1 TO 2
  MATREAD COA.REC FROM COA, CONO : SP.WIP.ACCT<W> ELSE COA.LEVEL = 0
  SP.WIP.LEVEL<W> = COA.LEVEL
NEXT W
SP.COG.ACCT<1> = GLTB.SP.DIR.COG
SP.COG.ACCT<2> = GLTB.SP.FOH.COG
FOR W = 1 TO 2
  MATREAD COA.REC FROM COA, CONO : SP.COG.ACCT<W> ELSE COA.LEVEL = 0
  SP.COG.LEVEL<W> = COA.LEVEL
NEXT W
SP.APL.ACCT<1> = GLTB.SP.DIR.APL
SP.APL.ACCT<2> = GLTB.SP.FOH.APL
FOR W = 1 TO 2
  MATREAD COA.REC FROM COA, CONO : SP.APL.ACCT<W> ELSE COA.LEVEL = 0
  SP.APL.LEVEL<W> = COA.LEVEL
NEXT W
MS.WIP.ACCT<1> = GLTB.MS.DIR.WIP
MS.WIP.ACCT<2> = GLTB.MS.FOH.WIP
FOR W = 1 TO 2
  MATREAD COA.REC FROM COA, CONO : MS.WIP.ACCT<W> ELSE COA.LEVEL = 0
  MS.WIP.LEVEL<W> = COA.LEVEL
NEXT W
MS.COG.ACCT<1> = GLTB.MS.DIR.COG
MS.COG.ACCT<2> = GLTB.MS.FOH.COG
FOR W = 1 TO 2
  MATREAD COA.REC FROM COA, CONO : MS.COG.ACCT<W> ELSE COA.LEVEL = 0
  MS.COG.LEVEL<W> = COA.LEVEL
NEXT W
MS.APL.ACCT<1> = GLTB.MS.DIR.APL
MS.APL.ACCT<2> = GLTB.MS.FOH.APL
FOR W = 1 TO 2
  MATREAD COA.REC FROM COA, CONO : MS.APL.ACCT<W> ELSE COA.LEVEL = 0
  MS.APL.LEVEL<W> = COA.LEVEL
NEXT W
CAL.PER = OCONV(SALESDATES.REC(PERIOD[5,2]+1)<1,1>,"D2/")[1,2]
CAL.YEAR = OCONV(SALESDATES.REC(PERIOD[5,2]+1)<1,1>,"D2/")[7,2]
IF DATE() < SALESDATES.REC(PERIOD[5,2]+1)<1,1> THEN
  CAL.DAY=DATE()
END ELSE
  CAL.DAY=SALESDATES.REC(PERIOD[5,2]+1)<1,1>
END
LOCATE CAL.DAY IN PRODUCTION.REC<1>,1 BY 'AR' SETTING PW ELSE NULL
IF PW > 53 THEN PW = 53
IF CAL.DAY < PRODUCTION.REC<1,PW> THEN
  IF PRODUCTION.REC<2,PW> > FISCAL.PER AND PRODUCTION.REC<2,PW-1> = FISCAL.PER THEN PW = PW - 1
END
*25389 ^
LOCATE PRODUCTION.REC<2,PW> IN PRODUCTION.REC<2>,1 BY 'AR' SETTING STRT THEN
  SEQ = PW - STRT + 1
END ELSE
  SEQ = 1
END
READ DIV.NUMS FROM CONTROL, CONO:"DIVISIONS" ELSE DIV.NUMS = ""
DATA = 1
LOOP
  READNEXT JOB.ID ELSE DATA = 0
WHILE DATA DO
  IF CONO # JOB.ID[1,3] THEN GOTO 999
  JOBNO = JOB.ID[4,99]
  MATREADU JOB.REC FROM JOB, JOB.ID ELSE
    MAT PRR.REC = ''
    PRR.JOB = JOBNO
    PRR.FILE = 'JOB'
    PRR.ERR = 'CANNOT LOCATE'
    PRR.SEQ = PRR.SEQ + 1
    MATWRITE PRR.REC ON POST.REJECTS, PRR.SEQ
    GOTO 999
  END
  P_X  = 3 ; P_Y = 23 ; P_VALUE = 'NOW PROCESSING JOB NUMBER - ':JOBNO "L#10" ; P_OPT = "CL"
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*
*---- CHECK AND POST N/C JOBS
*
  IF (JOBNO[1,5]='X':FISCAL.YR[3,2]:FISCAL.PER OR JOBNO[1,5]='X':LFISCAL.YR[3,2]:LFISCAL.PER) AND JOB.TYPE='N' THEN
    IF DIV.NUMS # "" THEN
      LOCATE JOBNO[6,2] IN DIV.NUMS<1>,1 SETTING FND ELSE FND = 0
      IF FND > 0 THEN
        IF (JOBNO[4,2] = FISCAL.PER AND JOBNO[8,1]<SEQ) OR (JOBNO[4,2]=LFISCAL.PER AND JOBNO[8,1]>0 AND JOBNO[8,1]<=6) THEN
*T24118 ^
          WIP.TYPE = "ALL"
          WIP.PERCENT = "10000"
          WIP.DATE = "ALL"
          WIP.PERIOD = "ALL"
          CALL REVERSE.JOB.WIP(CONO,JOBNO,WIP.TYPE,WIP.PERCENT,WIP.DATE,WIP.PERIOD,PERIOD)
          RESV.ACTION = "D"
          RESV.LOC = 0
          CALL JOB.RESV.SUB(CONO,RESV.ACTION,RESV.LOC,JOBNO)
          MCNT = COUNT(JOB.RESV.MATL,VM) + (JOB.RESV.MATL # "")
          FOR M = MCNT TO 1 STEP - 1
            IF JOB.RESV.QTY<1,M> + JOB.ALOC.QTY<1,M> + JOB.USED.QTY<1,M> = 0 THEN
              JSTAT.ID = JOB.RESV.MATL<1,M>:"!":JOB.RESV.WHSE<1,M>:"!":JOBNO
              MATREAD INV.JS.REC FROM INV.JOB.STATS, CONO:JSTAT.ID ELSE
                JOB.RESV.MATL = DELETE(JOB.RESV.MATL,1,M,0)
                JOB.RESV.WHSE = DELETE(JOB.RESV.WHSE,1,M,0)
                JOB.RESV.DATE = DELETE(JOB.RESV.DATE,1,M,0)
                JOB.ALOC.QTY = DELETE(JOB.ALOC.QTY,1,M,0)
                JOB.RESV.QTY = DELETE(JOB.RESV.QTY,1,M,0)
                JOB.USED.QTY = DELETE(JOB.USED.QTY,1,M,0)
                JOB.ALOC.AMT = DELETE(JOB.ALOC.AMT,1,M,0)
                JOB.RESV.AMT = DELETE(JOB.RESV.AMT,1,M,0)
                JOB.USED.AMT = DELETE(JOB.USED.AMT,1,M,0)
              END
            END
          NEXT M
*T28562 v
*T28473 v
*         IF JOB.STATUS<1,1> # 4 AND JOB.STATUS<1,1> < 6 THEN
*           JOB.TRACK.DATE<1,10> = DATE()
*           INS '4' BEFORE JOB.STATUS<1,1>
*           INS DATE() BEFORE JOB.STAT.DATE<1,1>
*         END
*T28473 ^
*T28562 ^
          CFND = 1
          MATREADU CUST.REC FROM CUSTOMER,CONO:JOB.CUST ELSE CFND = 0
          IF CFND THEN
            LOCATE JOBNO IN CUST.JOB<1>,1 SETTING JFND ELSE JFND = 0
            IF JFND THEN
              CUST.JOB.BAL<1,FND> = 0
            END
          END
          MATWRITE CUST.REC ON CUSTOMER,CONO:JOB.CUST
        END
      END
    END
  END
  IF JOB.INV.NO # '' THEN
    P_X  = 43 ; P_Y = 23 ; P_VALUE = 'INVOICES' ; P_OPT = "CL"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    CALL JCS.EOM.POST.SA
  END
  BEGIN CASE
    CASE JOB.LB.WIP<1,5> < PERIOD
    CASE JOB.LB.WIP<1,4> > PERIOD
    CASE 1
      P_X  = 43 ; P_Y = 23 ; P_VALUE = 'LABOR' ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      CALL JCS.EOM.POST.LB
  END CASE
  BEGIN CASE
    CASE JOB.MT.WIP<1,5> < PERIOD
    CASE JOB.MT.WIP<1,4> > PERIOD
    CASE 1
      P_X  = 43 ; P_Y = 23 ; P_VALUE = 'MATERIAL' ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      CALL JCS.EOM.POST.MT
  END CASE
  BEGIN CASE
    CASE JOB.OS.WIP<1,5> < PERIOD
    CASE JOB.OS.WIP<1,4> > PERIOD
    CASE 1
      P_X  = 43 ; P_Y = 23 ; P_VALUE = 'OUTSIDE PURCHASES' ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      CALL JCS.EOM.POST.OS
  END CASE
  BEGIN CASE
    CASE JOB.SP.WIP<1,5> < PERIOD
    CASE JOB.SP.WIP<1,4> > PERIOD
    CASE 1
      P_X  = 43 ; P_Y = 23 ; P_VALUE = 'SHIPPING' ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      CALL JCS.EOM.POST.SP
  END CASE
  BEGIN CASE
    CASE JOB.MS.WIP<1,5> < PERIOD
    CASE JOB.MS.WIP<1,4> > PERIOD
    CASE 1
      P_X  = 43 ; P_Y = 23 ; P_VALUE = 'MISCELLANEOUS' ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      CALL JCS.EOM.POST.MS
  END CASE
* END CASE
999MATWRITE JOB.REC ON JOB, JOB.ID
REPEAT
IF CO.OPS = 'Y' THEN
  CALL JCS.EOM.POST.FG(FNGD.WIP.HIST,FNGD_WIP_HIST_TAG,INV_RECEIPTS)
END
ECD.ACTION = 99 ; CALL SCRN.EDIT
GOTO 99999
********************************************************************

91000ERR.TYPE = 1
CALL SYSCOM(MAT SYSCOM.REC)
RETURN
93000ERR.TYPE = 3; CALL SYSCOM(MAT SYSCOM.REC)
99000IF FR.NEXT.PER = "" THEN
INBUFF<5> = "END"
PROCWRITE INBUFF
END
UDTEXECUTE 'CLEARSELECT' CAPTURING JUNK
*** END OF JOB ***
99999 END
**************************************************************************
**************************************************************************
*************************** EOP ******************************************
**************************************************************************
**************************************************************************
*********************************************************************
