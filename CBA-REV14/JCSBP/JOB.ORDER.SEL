      SUBROUTINE JOB.ORDER.SEL(CONO,JOBNO,PDNO,WHNO,ATYPE,ALOC.MAX,ALOC.TOT,ALOC.QTY,MAT INV.CNV.REC)
*COPY>CPYLIB>COM1
*COPY>JCS.CPYLIB>COM.JCS.LINK
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>JCS.CPYLIB>COM.INV.STATS 
*COPY>PMC.CPYLIB>COM.CUST
*COPY>OPS.CPYLIB>COM.ORDER
*********************************************************************
* REVISION    - [08.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - BP
* PROGRAM     - JOB.ORDER.SEL
* DATE        - 01/31/84
* DESCRIPTION - This program is used to display all (PO) activities
*               for a product in a warehouse
*T24291 cm 08/12/1999 * Getting Variable Unassigned error message when
*                       shipto of 000 only in FNGD.STATS record
*T26334 epitka 12/19/2001 * REV12
*ENDDOC
*********************************************************************
*COPY>PMC.CPYLIB>CUSTOMER
*COPY>OPS.CPYLIB>ORDER
*COPY>OPS.CPYLIB>ORDER.DETAIL
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>INV.CNV
*COPY>ICS.CPYLIB>FNGD.STATS
*COPY>ICS.CPYLIB>FNGD.ORDER.STATS
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
      MAT SYSCOM.REC =  ""; SYS.TYPE = 2
*
      LN = 0; IWH.ID = CONO:PDNO:"!":WHNO
      LINES = DCOUNT(FGS.ORDER,VM)
      S.B.QTY = ""; S.A.QTY = ""; S.V.QTY = ""
      S.CUST = ""; S.DATE = ""
      OSD.PROD.SEQ='' ; *T24291
      FOR I = 1 TO LINES
         MATREAD ORD.REC FROM ORDER,CONO:FGS.ORDER<1,I> ELSE
            MAT ORD.REC = ""
         END
         ST.CNT = DCOUNT(ORD.SHIP.TO,VM)
         TOT.B.QTY = 0
         TOT.A.QTY = 0
         TOT.R.QTY = 0
         TOT.V.QTY = 0
         TOT.R.QTY = 0; TOT.S.QTY = 0 ; TOT.O.QTY = 0
         FOR S = 2 TO ST.CNT
            MATREAD ORD.DET.REC FROM ORDER.DETAIL,CONO:FGS.ORDER<1,I>:"!":ORD.SHIP.TO<1,S> ELSE
               MAT ORD.DET.REC = ""
            END
            IF OSD.PROD.SEQ = "" THEN
               MATREAD FOS.REC FROM FNGD.ORDER.STATS, IWH.ID:"!":FGS.ORDER<1,I> ELSE
                  MAT FOS.REC = ""
                  MATREAD ORD.REC FROM ORDER, CONO:FGS.ORDER<1,I> THEN
                     FOS.CUST = ORD.CUST
                     FOS.DATE = ORD.DATE
                  END
               END
               S.CUST<I> = FOS.CUST
               S.DATE<I> = FOS.DATE
               LOCATE JOBNO IN FOS.JOB<1>,1 SETTING JLOC THEN
                  IF FOS.JOB.QTY<1,JLOC> > ALOC.QTY<1,I> THEN
                     S.V.QTY<I> = FOS.A.QTY - FOS.JOB.QTY<1,JLOC>
                  END ELSE
                     S.V.QTY<I> = FOS.A.QTY - ALOC.QTY<1,I>
                  END
               END ELSE
                  S.V.QTY<I> = FOS.A.QTY - ALOC.QTY<1,I>
                  S.A.QTY<I> = FOS.A.QTY
               END
               IF S.V.QTY<I> < 0 THEN S.V.QTY<I> = 0
               S.V.QTY<I> = FOS.O.QTY - FOS.R.QTY - FOS.S.QTY - S.V.QTY<I>
               S.B.QTY<I> = FOS.O.QTY - FOS.R.QTY - FOS.S.QTY
               IF LN = 0 THEN
                  IF S.B.QTY<I> > 0 THEN
                     LN = I
                  END
               END
            END ELSE
               PTR = 1
               LOOP
                  LOCATE PDNO IN OSD.PROD<1>,PTR SETTING INDX THEN
                     IF WHNO = OSD.WHSE<1,INDX> THEN
                        FOS.ID = CONO:PDNO:"!":WHNO:"!":FGS.ORDER<1,I>:"!":OSD.PROD.SEQ<1,INDX>:"!":OSD.KIT<1,INDX>
                        MATREAD FOS.REC FROM FNGD.ORDER.STATS, FOS.ID ELSE
                           MAT FOS.REC = ""
                           MATREAD ORD.REC FROM ORDER, CONO:FGS.ORDER<1,I> THEN
                              FOS.CUST = ORD.CUST
                              FOS.DATE = ORD.DATE
                           END
                        END
                        S.CUST<I> = FOS.CUST
                        S.DATE<I> = FOS.DATE
                        TOT.O.QTY = TOT.O.QTY + FOS.O.QTY
                        TOT.S.QTY = TOT.S.QTY + FOS.S.QTY
                        TOT.R.QTY = TOT.R.QTY + FOS.R.QTY
                        LOCATE JOBNO IN FOS.JOB<1>,1 SETTING JLOC THEN
                           IF FOS.JOB.QTY<1,JLOC> > ALOC.QTY<1,I> THEN
                              TOT.V.QTY = TOT.V.QTY + (FOS.A.QTY - FOS.JOB.QTY<1,JLOC>)
                           END ELSE
                              TOT.V.QTY = TOT.V.QTY + (FOS.A.QTY - ALOC.QTY<1,I>)
                           END
                        END ELSE
                           TOT.V.QTY = TOT.V.QTY + (FOS.A.QTY - ALOC.QTY<1,I>)
                           TOT.A.QTY = TOT.A.QTY + FOS.A.QTY
                        END
                        PTR = 0
                     END
                  END ELSE
                     PTR = 0
                  END
               WHILE PTR DO
                  PTR = INDX + 1
               REPEAT
*               S.V.QTY<I> = TOT.V.QTY
*               S.B.QTY<I> = TOT.B.QTY
*               S.A.QTY<I> = TOT.A.QTY
            END
         NEXT S
         IF OSD.PROD.SEQ # "" THEN
            IF TOT.V.QTY < 0 THEN TOT.V.QTY = 0
            S.V.QTY<I> = TOT.O.QTY - TOT.R.QTY - TOT.S.QTY - TOT.V.QTY
            S.B.QTY<I> = TOT.O.QTY - TOT.R.QTY - TOT.S.QTY
            S.A.QTY<I> = TOT.A.QTY
         END
      NEXT I
      IF LN = 0 THEN LN = 1
      IF ATYPE = "B" THEN
         GOSUB 2000
         GOTO 99990
      END
*
      ESN = ECD.SCRN.NO
*
      PAGE.SIZE = 5
      BEGIN.PAGE = 7
      LINE.SPACE = 2
*
      SCV.REC(1)<ESN> = PDNO
      SCV.REC(2)<ESN> = WHNO
      SCV.REC(3)<ESN> = INV.FULL.DESC
      SCV.REC(21)<ESN> = ALOC.MAX - SUM(ALOC.QTY)
      SCV.REC(22)<ESN> = SUM(S.B.QTY)
      SCV.REC(23)<ESN> = SUM(S.A.QTY)
      SCV.REC(24)<ESN> = SUM(S.V.QTY)
      SCV.REC(25)<ESN> = SUM(ALOC.QTY)
      FOR I = 21 TO 25
         SCV.REC(I)<ESN> = OCONV(INT(((SCV.REC(I)<ESN>/ICR.DV1) * ICR.MT1) / ICR.DV2 +.5),ICR.CNV1)
      NEXT I
      SCV.REC(32)<ESN> = INT(LINES/PAGE.SIZE+.9) "R%2"
      ECD.ACTION = 3; CALL SCRN.EDIT
      OLD.START.LINE = 0; GOSUB 1900
      MORE = 1
      LOOP
         ECD.NUM = 41; SCV.REC(ECD.NUM)<ESN> = ""
         ECD.ACTION = 4; CALL SCRN.EDIT
         OPTION = ECD.RET.VALUE
         BEGIN CASE
            CASE OPTION = "" OR OPTION = "E" OR OPTION = "END"
               MORE = 0
            CASE OPTION = "B"
               ALOC.QTY = ""
               GOSUB 2000
               OLD.START.LINE = 0; GOSUB 1900
            CASE OPTION = "S" OR OPTION = "SF"
               LN = 1 + INT((LN-1)/PAGE.SIZE) * PAGE.SIZE + PAGE.SIZE
               IF LN > LINES THEN LN = 1
               GOSUB 1900
            CASE OPTION = "SR"
               LN = 1 + INT((LN-1)/PAGE.SIZE) * PAGE.SIZE - PAGE.SIZE
               IF LN < 1 THEN LN = 1
               GOSUB 1900
            CASE OPTION = "ST"
               LN = 1
               GOSUB 1900
            CASE OPTION = "SB"
               LN = LINES
               GOSUB 1900
            CASE OPTION[1,1] = "S" AND NUM(OPTION[2,99])
               LN.NO = OPTION[2,99] + 0
               IF LN.NO < 1 OR LN.NO > LINES THEN
                  ERRMSG = "** Invalid selection **"
                  GOSUB 91000
               END ELSE
                  LN = LN.NO
                  GOSUB 1900
               END
            CASE NOT(NUM(OPTION))
               ERRMSG = "Invalid entry, please re-enter"
               GOSUB 91000
            CASE OPTION < 1 OR OPTION > LINES
               ERRMSG = "Out of range, please re-enter"
               GOSUB 91000
            CASE 1
               LN = OPTION
               GOSUB 1000
         END CASE
      WHILE MORE DO REPEAT
      GOTO 99999
*
*---- Qty To Allocate
1000*
      AVL = INT((((S.V.QTY<LN>)/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
      AVL.MAX = ALOC.MAX - SUM(ALOC.QTY) + ALOC.QTY<1,LN>
      BEGIN CASE
         CASE AVL < 1
            ERRMSG = "No available quantity to allocate for Order # ":FGS.ORDER<1,LN>
            GOSUB 91000; GOTO 1099
         CASE AVL.MAX < 1
            ERRMSG = "All available quantity have already been allocated."
            GOSUB 91000; GOTO 1099
         CASE AVL > AVL.MAX
            AVL = AVL.MAX
      END CASE
      SLN = BEGIN.PAGE + LINE.SPACE * MOD(LN-1,PAGE.SIZE)
      TYP = ICR.TYPE; SCALER = ICR.SCAL
      X = 61; Y = SLN; MAXL = 12
      MINV = 0; MAXV = AVL
      HMSG = "Enter Quantity to Allocate"
      IF ALOC.QTY<1,LN> > 0 THEN
         O.R = "O"
         DEFAULT = OCONV(INT(((ALOC.QTY<1,LN>/ICR.DV1)*ICR.MT1)/ICR.DV2+.5),ICR.CNV)
      END
      CALL EDIT.SUB
      IF VALUE = "END" THEN
         GOTO 1099
      END
      ALOC.QTY<1,LN> = INT(((VALUE/ICR.MT1)*ICR.DV1)*ICR.DV2+.5)
      P_X  = 61 ; P_Y = SLN ; P_VALUE = OCONV(INT(((ALOC.QTY<1,LN>/ICR.DV1)*ICR.MT1)/ICR.DV2+.5),ICR.CNV1) "R#12" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      GOSUB 1700
1099*
      RETURN
*
*---- Display Total Reserve
1700*
      ECD.NUM = 21
      ALOC.TOT = SUM(ALOC.QTY)
      ALOC.BAL = ALOC.MAX - ALOC.TOT
      SCV.REC(ECD.NUM)<ESN> = OCONV(INT(((ALOC.BAL/ICR.DV1)*ICR.MT1)/ICR.DV2+.5),ICR.CNV1)
      ECD.ACTION = 5; CALL SCRN.EDIT
      ECD.NUM = 25
      SCV.REC(ECD.NUM)<ESN> = OCONV(INT(((ALOC.TOT/ICR.DV1)*ICR.MT1)/ICR.DV2+.5),ICR.CNV1)
      ECD.ACTION = 5; CALL SCRN.EDIT
      RETURN
*
*---- Scroll Routine
1900*
      START.LINE = 1 + INT((LN-1)/PAGE.SIZE)*PAGE.SIZE
      LAST.LINE = START.LINE + PAGE.SIZE - 1
      IF LAST.LINE > LINES THEN LAST.LINE = LINES
      IF START.LINE = OLD.START.LINE THEN GOTO 1909
      OLD.START.LINE = START.LINE
      ECD.NUM = 31
      SCV.REC(ECD.NUM)<ESN> = INT(LAST.LINE/PAGE.SIZE+.9) "R%2"
      ECD.ACTION = 5; CALL SCRN.EDIT
      CNT = 1
      FOR N = START.LINE TO LAST.LINE
         SLN = BEGIN.PAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
         P_X  = 0 ; P_Y = SLN ; P_VALUE = N "R#3" ; P_OPT = ""
         P_X  := AM:4 ; P_Y := AM:SLN ; P_VALUE := AM:FGS.ORDER<1,N> "L#8"
         P_X  := AM:13 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(S.DATE<N>,"D2/") "L#8"
         P_X  := AM:22 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(INT(((S.B.QTY<N>/ICR.DV1) * ICR.MT1) / ICR.DV2 +.5),ICR.CNV1) "R#12"
         P_X  := AM:35 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(INT(((S.A.QTY<N>/ICR.DV1) * ICR.MT1) / ICR.DV2 +.5),ICR.CNV1) "R#12"
         P_X  := AM:48 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(INT((((S.V.QTY<N>)/ICR.DV1) * ICR.MT1) / ICR.DV2 +.5),ICR.CNV1) "R#12"
         P_X  := AM:61 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(INT(((ALOC.QTY<1,N>/ICR.DV1) * ICR.MT1) / ICR.DV2 +.5),ICR.CNV1) "R#12"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         P_X  = 4 ; P_Y = SLN+1 ; P_VALUE = S.CUST<N> "L#8" ; P_OPT = ""
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         MATREAD CUST.REC FROM CUSTOMER, CONO:S.CUST<N> ELSE
            MAT CUST.REC = ""; CUST.NAME = STR("?",30)
         END
         P_X  = 13 ; P_Y = SLN+1 ; P_VALUE = CUST.NAME "L#30" ; P_OPT = ""
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         CNT = CNT + 1
      NEXT N
      FOR M = CNT TO PAGE.SIZE
         SLN = BEGIN.PAGE + LINE.SPACE * MOD(M-1,PAGE.SIZE)
         P_X  = 0 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         P_X  = 0 ; P_Y = SLN+1 ; P_VALUE = "" ; P_OPT = "CL"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      NEXT M
1909  RETURN
*
*---- Adjust job allocations
2000*
      ALOC.DIF = ALOC.TOT - SUM(ALOC.QTY)
      BEGIN CASE
         CASE ALOC.DIF > 0
            LIMIT = LINES
*
*---- Adjust current allocated jobs
*
            FOR A = 1 TO LIMIT
               AVL = S.V.QTY<A> - ALOC.QTY<1,A>
               BEGIN CASE
                  CASE ALOC.QTY<1,A> < 1
                  CASE AVL < 1
                  CASE AVL < ALOC.DIF
                     ALOC.QTY<1,A> = ALOC.QTY<1,A> + AVL
                     ALOC.DIF = ALOC.DIF - AVL
                  CASE 1
                     ALOC.QTY<1,A> = ALOC.QTY<1,A> + ALOC.DIF
                     ALOC.DIF = 0; LIMIT = 0
               END CASE
            NEXT A
*
*---- Allocate new jobs
*
            FOR A = 1 TO LIMIT
               AVL = S.V.QTY<A> - ALOC.QTY<1,A>
               BEGIN CASE
                  CASE AVL < 1
                  CASE AVL >= ALOC.DIF
                     ALOC.QTY<1,A> = ALOC.QTY<1,A> + ALOC.DIF
                     ALOC.DIF = 0; LIMIT = 0
               END CASE
            NEXT A
*
            FOR A = 1 TO LIMIT
               AVL = S.V.QTY<A> - ALOC.QTY<1,A>
               BEGIN CASE
                  CASE AVL < 1
                  CASE AVL < ALOC.DIF
                     ALOC.QTY<1,A> = ALOC.QTY<1,A> + AVL
                     ALOC.DIF = ALOC.DIF - AVL
                  CASE 1
                     ALOC.QTY<1,A> = ALOC.QTY<1,A> + ALOC.DIF
                     ALOC.DIF = 0; LIMIT = 0
               END CASE
            NEXT A
         CASE ALOC.DIF < 0
            ALOC.DIF = 0 - ALOC.DIF
            LIMIT = LINES
            FOR A = 1 TO LIMIT
               BEGIN CASE
                  CASE ALOC.QTY<1,A> < 1
                  CASE ALOC.QTY<1,A> < ALOC.DIF
                     ALOC.DIF = ALOC.DIF - ALOC.QTY<1,A>
                     ALOC.QTY<1,A> = 0
                  CASE 1
                     ALOC.QTY<1,A> = ALOC.QTY<1,A> - ALOC.DIF
                     ALOC.DIF = 0; LIMIT = 0
               END CASE
            NEXT A
      END CASE
      ALOC.TOT = SUM(ALOC.QTY)
      RETURN
*
*---- Error message routine
91000 ERR.TYPE=1;CALL SYSCOM(MAT SYSCOM.REC);RETURN
*
*---- End of job
99999*
      ECD.ACTION=99;CALL SCRN.EDIT
99990 *
      RETURN
   END
