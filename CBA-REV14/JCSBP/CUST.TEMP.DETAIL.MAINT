*COPY>CPYLIB>COM1
*COPY>JCS.CPYLIB>COM.DRS.FILE.VARS
**************************************************************
* REVISION    - [08.1]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
*
* SOURCE         - DRSBP
*
* PROGRAM        - CUST.TEMP.DETAIL.MAINT
*
* BY             - L. ROSS, COMPUTER BUSINESS ASSOCIATES
*
* DATE           - 08/29/91
*
* DESCRIPTION    -
* This program will be used to maintain the TEMPLATE.DETAIL file. 
* It is very similar to the DEST.DETAIL subroutine.
*
*T21177 diane 11/06/1996 * REV11 UPG
*T25978 adelgado 02/14/2002 * Add the use of prompts (S,SR,SB,ST).
*T26126 adelgado 02/28/2002 * Implement the LOCKED clause for READU.
*T27986 lross 03/08/2004 * Adding a new Shipto to a Cust Template blows
*                          away any previously entered Shiptos on that
*                          List.
*T28276 bmourad 11/23/2004 * Change verbage from TEMPLATE to JOB.
*ENDDOC
**************************************************************
*
*---- FILE EQUATES
*
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>JCS.CPYLIB>DRS.FILE.VARS
*COPY>CPYLIB>SYSCOM
*COPY>CPYLIB>FILE.VARS
*COPY>PMC.CPYLIB>COMPANY
*COPY>JCS.CPYLIB>SHIPTO.MASTER
*COPY>JCS.CPYLIB>SHIPTO.DETAIL
*COPY>JCS.CPYLIB>FOLD.CODE
*COPY>JCS.CPYLIB>PACK.CODE
*COPY>JCS.CPYLIB>DISTRIBUTION.CODE
*COPY>JCS.CPYLIB>TEMPLATE.DETAIL
*COPY>JCS.CPYLIB>CUST.TEMPLATE.LIST
*COPY>JCS.CPYLIB>CUST.SHIPTO.LIST
*COPY>PMC.CPYLIB>CUSTOMER
*COPY>PMC.CPYLIB>SHIP.VIA
*COPY>CPYLIB>CHAR
*
DIM SAV.REC(75)
MAT SAV.REC = ''
*---- SETUP FOR SYSTEM ERROR MESSAGES
*
SYS.TYPE = 1
CALL SYSCOM(MAT SYSCOM.REC)
*
*---- OPEN FILES
*
OPEN '','COMPANY' TO COMPANY ELSE ERRMSG = 'COMPANY FILE MISSING';GOTO 93000
OPEN '','CONTROL' TO CONTROL ELSE ERRMSG = 'CONTROL FILE MISSING';GOTO 93000
OPEN '','JCS.SCREENS' TO M.SCREENS ELSE ERRMSG = 'JCS.SCREENS FILE MISSING';GOTO 93000
OPEN '','SHIPTO.MASTER' TO SHIPTO.MASTER ELSE ERRMSG = 'SHIPTO.MASTER FILE MISSING';GOTO 93000
OPEN '','SHIPTO.DETAIL' TO SHIPTO.DETAIL ELSE ERRMSG = 'SHIPTO.DETAIL FILE MISSING'; GOTO 93000
OPEN '','TEMPLATE.DETAIL' TO TEMPLATE.DETAIL ELSE ERRMSG = 'TEMPLATE.DETAIL FILE MISSING'; GOTO 93000
OPEN '','CUST.TEMPLATE.LIST' TO CUST.TEMPLATE.LIST ELSE ERRMSG = 'CUST.TEMPLATE.LIST FILE MISSING'; GOTO 93000
OPEN '','CUST.SHIPTO.LIST' TO CUST.SHIPTO.LIST ELSE ERRMSG = 'CUST.SHIPTO.LIST FILE MISSING'; GOTO 93000
OPEN '','FOLD.CODE' TO FOLD.CODE ELSE ERRMSG = 'FOLD.CODE FILE MISSING'; GOTO 93000
OPEN '','PACK.CODE' TO PACK.CODE ELSE ERRMSG = 'PACK.CODE FILE MISSING'; GOTO 93000
OPEN '','DISTRIBUTION.CODE' TO DISTRIBUTION.CODE ELSE ERRMSG = 'DISTRIBUTION.CODE FILE MISSING'; GOTO 93000
OPEN '','CUSTOMER' TO CUSTOMER ELSE ERRMSG = 'CUSTOMER FILE MISSING'; GOTO 93000
OPEN '','SHIP.VIA' TO SHIP.VIA ELSE ERRMSG = 'SHIP.VIA FILE MISSING'; GOTO 93000
*
*---- INITIALIZATION
*
*      MAT EDIT.COM = ""
MAT EDIT.COM.DRIVER = ""
*      TYP = 0
*      CALL EDIT.SUB
ERRMSG = ""
UNKNOWN = "???????????????"
*
*---- GET COMPANY NUMBER
*
CONO = ""
CALL GET.CONO(CONO,MAT COMP.REC)
IF CONO = "END" THEN GOTO 99999
*
*---- PRINT SCREEN
*
ECD.SCRN.CNT = 1
ECD.SCRN.NAME<1> = 'CUST.TEMP.DETAIL.MAINT'
ECD.ACTION = 1; CALL SCRN.EDIT
ECD.SCRN.NO = 1
*
*---- MAIN PROCESSING
BEGIN.PAGE = 8
PAGE.SIZE = 4
LINE.SPACE = 1
1*    LINES = 0
LN = 0
OLD.START.LINE = 0
MAT SCV.REC = ''
ECD.ACTION = 2
CALL SCRN.EDIT
ECD.ACTION = 6
CALL SCRN.EDIT
MAT TDT.REC = ''
NEW = 0
NX = 0
*
*---- GET CUSTOMER
*
5 *
ECD.NUM = 53
ECD.VALDAT.CODE = 2
ECD.VALDAT.FILE = CUSTOMER
ECD.PREFIX.ID = CONO
ECD.ACTION = 4; CALL SCRN.EDIT
IF ECD.RET.VALUE = 'END' THEN GOTO 99999
IF ECD.RET.VALUE # '' AND ECD.VALDAT.ITEM # '' THEN
   CUST.NO = ECD.RET.VALUE
   SCV.REC(53) = CUST.NO
   CUST.NAME = ECD.VALDAT.ITEM<1>
   ECD.NUM = 56
   SCV.REC(56) = CUST.NAME
   ECD.ACTION = 5; CALL SCRN.EDIT
END ELSE
   ERRMSG = 'Customer is not on file'
   GOSUB 91000
   GOTO 5
END
*
*---- GET TEMPLATE
*
10 *
ECD.NUM = 57
SCV.REC(ECD.NUM) = ''
ECD.ACTION = 5; CALL SCRN.EDIT
TMP.FLG = 0
ECD.NUM = 54
ECD.ACTION = 4; CALL SCRN.EDIT
IF ECD.RET.VALUE = 'END' THEN GOTO 1
IF ECD.RET.VALUE # '' THEN
   TEMP.NO = ECD.RET.VALUE
    * T26126 v
   MATREADU CTL.REC FROM CUST.TEMPLATE.LIST, CONO:CUST.NO:"!":TEMP.NO:"!001" LOCKED
      ERRMSG = 'TEMPLATE record is locked by user - ':GETUSERNAME(STATUS())
      GOSUB 91000;GOTO 10 
   END ELSE
    * T26126
      MAT CTL.REC = ''
      ECD.NUM = 57
      ECD.ACTION = 4; CALL SCRN.EDIT
      IF ECD.RET.VALUE = 'END' OR ECD.RET.VALUE = '' THEN
         RELEASE CUST.TEMPLATE.LIST, CONO:CUST.NO:"!":TEMP.NO:"!001"
         GOTO 10
      END
      TMP.FLG = 1
      CTL.DESC = TRIM(ECD.RET.VALUE)
   END
   IF NOT(TMP.FLG) THEN
      ECD.NUM = 57
      SCV.REC(57) = CTL.DESC
      ECD.ACTION = 5; CALL SCRN.EDIT
      TMP.FLG = 1
   END
END ELSE GOTO 10
*
*---- GET SHIPTO
*
15 *
LINES = 0
LN = 0
OLD.START.LINE = 0
MAT SCV.REC = ''
ECD.ACTION = 6
CALL SCRN.EDIT
SCV.REC(53)=CUST.NO
SCV.REC(56)=CUST.NAME
SCV.REC(54)=TEMP.NO
SCV.REC(57)=CTL.DESC
ECD.ACTION = 3
CALL SCRN.EDIT
MAT TDT.REC = ''
NEW = 0
NX = 0
ECD.NUM = 1
ECD.ACTION = 4; CALL SCRN.EDIT
SHIPTO.NO = ECD.RET.VALUE
BEGIN CASE
   CASE SHIPTO.NO = 'END'
      GOTO 10
   CASE SHIPTO.NO # ''
      MATREAD SHM.REC FROM SHIPTO.MASTER,CONO:SHIPTO.NO ELSE
         ERRMSG = 'Ship To Master is not on file.'
         GOSUB 91000
         GOTO 15
      END
      SCV.REC(58) = SHM.SP.NAME
      ECD.NUM = 58
      ECD.ACTION = 5; CALL SCRN.EDIT
   CASE 1
      GOTO 15
END CASE
*
*---- GET TEMPLATE.DETAIL RECORD
*
TDT.KEY = SHIPTO.NO:"!":TEMP.NO
  * T26126 v
MATREADU TDT.REC FROM TEMPLATE.DETAIL, CONO:TDT.KEY LOCKED
   ERRMSG = 'TEMPLATE record is locked by user - ':GETUSERNAME(STATUS())
   GOSUB 91000;GOTO 15 
END ELSE
  * T26126 ^
   MAT TDT.REC = ''
   NEW = 1
   GOSUB 5000
END
IF NEW # 1 THEN
   LN = 1
   GOSUB 4000
   GOSUB 6000
END
IF NEW = 1 AND NOT(NX) THEN 
   LOOP
      OPTION = 'A'
      LN = LINES + 1
      OLD.LINES = LINES
      GOSUB 50
   WHILE LINES > OLD.LINES AND LN < 10 DO
*           GOSUB 10000
   REPEAT
   LN = LINES
   FOR I = 1 TO 15 UNTIL ECD.RET.VALUE = 'END'
      ON I GOSUB 110,120,130,140,150,160,170,180,190,200,210,220,230,240,250
   NEXT I
END
GOSUB 1000
GOTO 15
*
*---- ENTER SPEC INSTR (SCROLLED)
*
50 *
GOSUB 10000
SLN = BEGIN.PAGE + LINE.SPACE * MOD(LN-1,PAGE.SIZE)
P_X  = 0 ; P_Y = SLN ; P_VALUE = OCONV(LN,'MD0Z') 'R#2':'-' ; P_OPT = ""
CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
X = 4; Y = SLN; TYP = 1; MAXL = 58; O.R = 'O'
DEFAULT = SCV.REC(LN+1)<ECD.SCRN.NO,1>
CALL EDIT.SUB
IF VALUE # "" AND VALUE = SPACE(LEN(VALUE)) THEN
   FOR I = LN+1 TO 10
      SCV.REC(I) = SCV.REC(I+1)
   NEXT I
   SCV.REC(11) = ''
   OLD.START.LINE = 0
END ELSE
   VALUE = TRIM(VALUE)
   IF VALUE # 'END' AND VALUE # '' THEN
      SCV.REC(LN+1)<ECD.SCRN.NO,1> = VALUE
   END ELSE
      IF SCV.REC(LN+1) = '' THEN
         P_X = 0 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      END
      P_X  = 4 ; P_Y = SLN ; P_VALUE = SCV.REC(LN+1)<ECD.SCRN.NO,1> 'L#58' ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      IF VALUE = 'END' THEN GOTO 99 ELSE GOTO 50
   END
   P_X  = 63 ; P_Y = SLN ; P_VALUE = LEN(SCV.REC(LN+1)<ECD.SCRN.NO,1>) 'R#2' ; P_OPT = ""
   CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
   SCV.REC(LN+1)<ECD.SCRN.NO,2> = LEN(SCV.REC(LN+1)<ECD.SCRN.NO,1>)
55 *
   X = 66; Y = SLN; TYP = 8; MAXL = 1; O.R = 'O'
   OLD.VAL = ''
   IF SCV.REC(LN+1)<ECD.SCRN.NO,3> # '' THEN
      OLD.VAL = SCV.REC(LN+1)<ECD.SCRN.NO,3>
      DEFAULT = SCV.REC(LN+1)<ECD.SCRN.NO,3>
   END ELSE
      DEFAULT = 'Y'
      OLD.VAL = 'Y'
   END
   CALL EDIT.SUB
   IF VALUE # 'END' AND VALUE # '' AND VALUE # SPACE(LEN(VALUE)) THEN
      SCV.REC(LN+1)<ECD.SCRN.NO,3> = VALUE
   END ELSE GOTO 55
   J = 4
   FOR I = 3 TO 12 STEP 3
60 *
      X =  66 + I; Y = SLN; TYP = 8; MAXL = 1; O.R = 'O'
      IF SCV.REC(LN+1)<ECD.SCRN.NO,3> = 'Y' AND OLD.VAL = 'Y' THEN
         IF SCV.REC(LN+1)<ECD.SCRN.NO,J> # '' THEN DEFAULT = SCV.REC(LN+1)<ECD.SCRN.NO,J> ELSE DEFAULT = 'Y'
      END ELSE
         IF SCV.REC(LN+1)<ECD.SCRN.NO,3> = 'Y' THEN DEFAULT = 'Y' ELSE DEFAULT = 'N'
      END
      CALL EDIT.SUB
      IF VALUE # 'END' AND VALUE # '' AND VALUE # SPACE(LEN(VALUE)) THEN
         SCV.REC(LN+1)<ECD.SCRN.NO,J> = VALUE
      END ELSE GOTO 60
      J = J+1
   NEXT I
END
GOSUB 6000
99 *
RETURN
*
*---- ENTER DATE
*
110 *
ECD.NUM = 26
ECD.DEFAULT = TDT.SP.INST.DATE
ECD.ACTION = 4; CALL SCRN.EDIT
IF ECD.RET.VALUE # "" AND ECD.RET.VALUE = SPACE(LEN(ECD.RET.VALUE)) THEN
   TDT.SP.INST.DATE = ''
   TDT.SP.INST.DATE.USE = ''
   FOR I = 26 TO 31
      SCV.REC(I) = ''
   NEXT I
   P_X  = 4 ; P_Y = 10 ; P_VALUE = "" ; P_OPT = "CL"
   CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
END ELSE
   IF ECD.RET.VALUE # 'END' AND ECD.RET.VALUE # '' THEN
      TDT.SP.INST.DATE = ECD.RET.VALUE
   END ELSE
      GOTO 119
   END
112 *
   ECD.NUM = 27
   ECD.DEFAULT = 'N'
   ECD.ACTION = 4; CALL SCRN.EDIT
   IF ECD.RET.VALUE # 'END' AND ECD.RET.VALUE # '' AND ECD.RET.VALUE # SPACE(LEN(ECD.RET.VALUE)) THEN
      TDT.SP.INST.DATE.USE = ECD.RET.VALUE
   END ELSE GOTO 112
   J = 2
   FOR ECD.NUM = 28 TO 31
115   ECD.DEFAULT = 'N'
      ECD.ACTION = 4; CALL SCRN.EDIT
      IF ECD.RET.VALUE # 'END' AND ECD.RET.VALUE # '' AND ECD.RET.VALUE # SPACE(LEN(ECD.RET.VALUE)) THEN
         TDT.SP.INST.DATE.USE<1,J> = ECD.RET.VALUE
         J = J+1
      END ELSE GOTO 115
   NEXT ECD.NUM
END
119 RETURN
*
*---- ENTER VERSION NO
*
120 *
ECD.NUM = 40
SCV.REC(40)<ECD.SCRN.NO> = TDT.VER.NO
HOLD.DATA = TDT.VER.NO
ECD.ACTION = 4;CALL SCRN.EDIT
IF ECD.RET.VALUE # "END" THEN
   TDT.VER.NO = ECD.RET.VALUE
   IF NUM(OPTION) AND TDT.VER.NO # HOLD.DATA THEN GOSUB 130
END
RETURN
*
*---- ENTER VER DESC
*
130 *
ECD.NUM = 41
SCV.REC(41)<ECD.SCRN.NO> = TDT.VER.DESC
ECD.ACTION = 4; CALL SCRN.EDIT
IF ECD.RET.VALUE # "END" THEN
   TDT.VER.DESC = ECD.RET.VALUE
END 
RETURN
*
*---- ENTER QTY
*
140 *
ECD.NUM = 43
SCV.REC(43)<ECD.SCRN.NO> = TDT.QTY
ECD.ACTION = 4; CALL SCRN.EDIT
IF ECD.RET.VALUE # "END" THEN
   TDT.QTY = ECD.RET.VALUE
END
RETURN
*
*---- ENTER DIST CODE
*
150 *
ECD.NUM = 44
SCV.REC(44)<ECD.SCRN.NO> = TDT.DIST.CODE
ECD.ACTION = 4;CALL SCRN.EDIT
IF ECD.RET.VALUE # "END" THEN
   MATREAD DRS.REC FROM DISTRIBUTION.CODE, CONO:ECD.RET.VALUE ELSE
      X = 0; Y = 23; TYP = 11; MAXL = 1; O.R = 'O'
      PMSG = 'Invalid Distribution Code'
      CALL EDIT.SUB
      P_X  = 0 ; P_Y = 23 ; P_VALUE = "" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      GOTO 150
   END
   TDT.DIST.CODE = ECD.RET.VALUE
END
RETURN
*
*---- ENTER EDITION
*
160 *
ECD.NUM = 45
SCV.REC(45)<ECD.SCRN.NO> = TDT.EDITION
ECD.ACTION = 4; CALL SCRN.EDIT
IF ECD.RET.VALUE # "END" THEN
   TDT.EDITION = ECD.RET.VALUE
END 
RETURN
*
*---- ENTER SHRINK WRAP
*
170 *
ECD.NUM = 46
SCV.REC(46)<ECD.SCRN.NO> = TDT.SHRKWRP
ECD.ACTION = 4; CALL SCRN.EDIT
IF ECD.RET.VALUE # "END" THEN
   TDT.SHRKWRP = ECD.RET.VALUE
END
RETURN
*
*---- ENTER CARTON LBL
*
180 *
ECD.NUM = 47
IF TDT.CART.LAB # "" THEN
   SCV.REC(47)<ECD.SCRN.NO> = TDT.CART.LAB
END ELSE
   P = 2
   GOSUB 7000
   SCV.REC(47)<ECD.SCRN.NO> = FLG
END
ECD.ACTION = 4; CALL SCRN.EDIT
IF ECD.RET.VALUE # "END" THEN
   TDT.CART.LAB = ECD.RET.VALUE
END 
RETURN
*
*---- ENTER SKID LBL
*
190 *
ECD.NUM = 48
IF TDT.SKID.LAB # "" THEN
   SCV.REC(48)<ECD.SCRN.NO> = TDT.SKID.LAB
END ELSE
   P = 3
   GOSUB 7000
   SCV.REC(48)<ECD.SCRN.NO> = FLG
END
ECD.ACTION = 4;CALL SCRN.EDIT
IF ECD.RET.VALUE # "END" THEN
   TDT.SKID.LAB = ECD.RET.VALUE
END
RETURN
*
*---- ENTER B O L
*
200 *
ECD.NUM = 49
IF TDT.BOL # '' THEN
   SCV.REC(49)<ECD.SCRN.NO> = TDT.BOL                                             
END ELSE                           
   P = 4                           
   GOSUB 7000                      
   SCV.REC(49)<ECD.SCRN.NO> = FLG  
END
ECD.ACTION = 4; CALL SCRN.EDIT
IF ECD.RET.VALUE # "END" THEN
   TDT.BOL = ECD.RET.VALUE
END 
RETURN
*
*---- ENTER FOLD
*
210 *
ECD.NUM = 50
SCV.REC(50)<ECD.SCRN.NO> = TDT.FOLD
ECD.ACTION = 4;CALL SCRN.EDIT
IF ECD.RET.VALUE # "END" THEN
   MATREAD FLD.REC FROM FOLD.CODE, CONO:ECD.RET.VALUE ELSE
      X = 0; Y = 23; TYP = 11; MAXL = 1; O.R = 'O'
      PMSG = 'Invalid Fold Code'
      CALL EDIT.SUB
      P_X  = 0 ; P_Y = 23 ; P_VALUE = "" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      GOTO 210
   END
   TDT.FOLD = ECD.RET.VALUE
END
RETURN
*
*---- ENTER PACKAGING
*
220 *
ECD.NUM = 51
SCV.REC(51)<ECD.SCRN.NO> = TDT.PACK
ECD.ACTION = 4; CALL SCRN.EDIT
IF ECD.RET.VALUE # "END" THEN
   MATREAD PCK.REC FROM PACK.CODE, CONO:ECD.RET.VALUE ELSE
      X = 0; Y = 23; TYP = 11; MAXL = 1; O.R = 'O'
      PMSG = 'Invalid Packaging Code'
      CALL EDIT.SUB
      P_X  = 0 ; P_Y = 23 ; P_VALUE = "" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      GOTO 220
   END
   TDT.PACK = ECD.RET.VALUE
END 
RETURN
*
*---- ENTER STORE QTY
*
230 *
ECD.NUM = 52
SCV.REC(52)<ECD.SCRN.NO> = TDT.STORE.QTY
ECD.ACTION = 4; CALL SCRN.EDIT
IF ECD.RET.VALUE # "END" THEN
   TDT.STORE.QTY = ECD.RET.VALUE
END
IF TDT.STORE.QTY <= 0 AND TDT.QTY <= 0 THEN
   ERRMSG = 'QUANTITY AND STORE QUANTITY ARE BOTH ZERO ?'
   GOSUB 91000
END
RETURN
*
*---- ENTER SHIP VIA
*
240 *
ECD.NUM = 55
IF TDT.SHIP.VIA # "" THEN
   SCV.REC(55)<ECD.SCRN.NO> = TDT.SHIP.VIA
END ELSE
   SCV.REC(55)<ECD.SCRN.NO> = SHM.DT.SHPVIA
END
ECD.ACTION = 4; CALL SCRN.EDIT
IF ECD.RET.VALUE # "END" THEN
   MATREAD SHIP.VIA.REC FROM SHIP.VIA, CONO:ECD.RET.VALUE THEN
      TDT.SHIP.VIA = ECD.RET.VALUE
      SCV.REC(59)<ECD.SCRN.NO> = SHPV.DESC
      ECD.NUM = 59; ECD.ACTION = 5; CALL SCRN.EDIT
   END ELSE
      ERRMSG = 'Invalid Ship Via Code'
      GOSUB 91000
      GOTO 240
   END
END
RETURN
*
*---- ENTER SHIP TERMS AND FREIGHT PAY
*
250*
ECD.NUM = 60
SCV.REC(60)<ECD.SCRN.NO> = TDT.SHP.TERMS
ECD.ACTION = 4; CALL SCRN.EDIT
IF ECD.RET.VALUE # "END" THEN
   TDT.SHP.TERMS = ECD.RET.VALUE
   ECD.NUM = 42
   SCV.REC(42)<ECD.SCRN.NO> = TDT.FRT.PAY
   ECD.ACTION = 4; CALL SCRN.EDIT
   IF ECD.RET.VALUE # "END" THEN
      TDT.FRT.PAY = ECD.RET.VALUE
   END
END
RETURN
*
*---- ENTER OPTIONS
*
1000 *
MORE = 1
LOOP
   ECD.NUM = 32
   ECD.ACTION = 4; CALL SCRN.EDIT
   OPTION = ECD.RET.VALUE
   BEGIN CASE
      CASE OPTION = 'END' OR OPTION = 'E'
         RELEASE CUST.TEMPLATE.LIST, CONO:CUST.NO:"!":TEMP.NO:"!001"       ;* T26126
         RELEASE TEMPLATE.DETAIL, TDT.KEY
         MORE = 0
      CASE NUM(OPTION) AND OPTION # ''
         IF OPTION > 0 AND OPTION <= 10 THEN
            LN = OPTION
            IF LN-1 > 0 THEN
               IF SCV.REC(LN)<ECD.SCRN.NO,1> = "" THEN
                  ERRMSG = 'You must not leave blank instruction lines'
                  GOSUB 91000
                  LN = 0
               END
            END
            IF LN # 0 THEN
               GOSUB 50
            END
         END ELSE
            ON OPTION -10 GOSUB 110,120,130,140,150,160,170,180,190,200,210,220,230,240,250
         END
      CASE OPTION = 'CL'
         GOSUB 5000
      CASE OPTION = 'S'
         IF LN + PAGE.SIZE <= 10 AND LN + PAGE.SIZE <= LINES THEN LN = LN + PAGE.SIZE ELSE LN = 1
         OLD.START.LINE = 0
         GOSUB 10000
      * T25978 v
      CASE OPTION = 'SR'
         LN -= PAGE.SIZE ; OLD.START.LINE = 0
         IF LN < 1 THEN LN = 1
         GOSUB 10000
      CASE OPTION = 'ST'
         LN = 1 ; OLD.START.LINE = 0
         GOSUB 10000
      CASE OPTION = 'SB'
         LN = LINES ; OLD.START.LINE = 0
         GOSUB 10000
      * T25978 ^
      CASE OPTION = 'F'
         IF LINES < 1 THEN
            ERRMSG='You may not file a record with 0 instruction lines.'
            GOSUB 91000
         END ELSE
            GOSUB 3000
            MORE = 0
         END
   END CASE
WHILE MORE DO REPEAT
RETURN
*
*---- CLEAR SCREEN AND RE-INITIALIZE
*
2000 *
ECD.ACTION = 6; CALL SCRN.EDIT
RETURN
*
*---- UPDATE TEMPLATE.DETAIL FILE
*
3000 *
MATWRITE TDT.REC ON TEMPLATE.DETAIL,CONO:TDT.KEY
IF TMP.FLG THEN
* the following line commented out by renee 02/25/99 because the 001
* record was being overwritten by the previous record that was pulled up
* if more the one detail record is entered at a time. (CTL.REC still
* contained record 002's information from pervious entry)
*        MATWRITE CTL.REC ON CUST.TEMPLATE.LIST, CONO:CUST.NO:"!":TEMP.NO:"!001"
         *** THE FOLLOWING ADDED PER REQUEST BY D. DOBY 12/17/91
*T27986 v
*   IF NEW AND CTL.STATUS<1,1> # 1 THEN
   IF CTL.STATUS<1,1> # 1 THEN
      RSEQ = '001'
      CTL.KEY = CONO:CUST.NO:"!":TEMP.NO:"!"
      CFND=''
      XSEQ='001'
      LOOP
      UNTIL CFND DO
         MATREAD CTL.REC FROM CUST.TEMPLATE.LIST,CTL.KEY:XSEQ THEN
            LOCATE SHIPTO.NO IN CTL.SHIPS<1>,1 SETTING CFND ELSE
               CFND = 0
               XSEQ = (XSEQ+1)'R%3'
            END
         END ELSE
            CFND = 'END'
         END
      REPEAT
      IF CFND = 'END' THEN
         SCV.REC(2)<ECD.SCRN.NO> = ''
         ECD.NUM=2; CALL SCRN.EDIT
         IF ECD.RET.VALUE = 'Y' THEN
            CMORE = 1
            LOOP
               MATREADU CTL.REC FROM CUST.TEMPLATE.LIST, CTL.KEY:RSEQ THEN
                  SCNT = DCOUNT(CTL.SHIPS,VM)
                  LOCATE SHIPTO.NO IN CTL.SHIPS<1>,1 SETTING SFND ELSE SFND=0
                  IF NOT(SFND) AND SCNT < 100 THEN
                     XSEQ = RSEQ + 1
                     IF LEN(XSEQ) < 3 THEN XSEQ = STR('0',3-LEN(XSEQ)):XSEQ
                     READV TEST FROM CUST.TEMPLATE.LIST ,CTL.KEY:XSEQ,1 THEN
                        RELEASE CUST.TEMPLATE.LIST, CTL.KEY:RSEQ
                        RSEQ = XSEQ
                     END ELSE
                        * added by Renee 02/25/99
                        * when creating a new sequence record, nul CTL.REC
*T27986 v The mod made by Renee is incorrect - at this point we donot know
*         that we are adding a new record, we have only concluded that we
*         donot have another record sequence following the one we are
*         currently working on. If we null this out we blow away any shipto
*         that are already in existence in this record!
****          MAT CTL.REC = ""
                        CTL.SHIPS<1,-1> = SHIPTO.NO
                        MATWRITE CTL.REC ON CUST.TEMPLATE.LIST, CTL.KEY:RSEQ
                        CMORE = 0
                     END
                  END ELSE
                     RELEASE CUST.TEMPLATE.LIST, CTL.KEY:RSEQ
                     IF SFND THEN
                        CMORE = 0
                     END ELSE
                        RSEQ = RSEQ + 1
                        IF LEN(RSEQ) < 3 THEN RSEQ = STR('0',3-LEN(RSEQ)):RSEQ
                     END
                  END
               END ELSE
                  IF CMORE THEN
                     CTL.SHIPS<1,-1> = SHIPTO.NO
                     MATWRITE CTL.REC ON CUST.TEMPLATE.LIST, CTL.KEY:RSEQ
                     CMORE = 0
                  END
               END
            WHILE CMORE DO REPEAT
            RSEQ = '001'
            CSL.KEY = CONO:CUST.NO:"!"
            CMORE = 1
            LOOP
               MATREADU CSL.REC FROM CUST.SHIPTO.LIST, CSL.KEY:RSEQ THEN
                  SCNT = DCOUNT(CSL.SHIPS,VM)
                  LOCATE SHIPTO.NO IN CSL.SHIPS<1>,1 SETTING SFND ELSE SFND=0
                  IF NOT(SFND) AND SCNT < 100 THEN
                     XSEQ = RSEQ + 1
                     IF LEN(XSEQ) < 3 THEN XSEQ = STR('0',3-LEN(XSEQ)):XSEQ
                     READV TEST FROM CUST.SHIPTO.LIST ,CSL.KEY:XSEQ,1 THEN
                        RELEASE CUST.SHIPTO.LIST, CSL.KEY:RSEQ
                        RSEQ = XSEQ
                     END ELSE
                        CSL.SHIPS<1,-1> = SHIPTO.NO
                        MATWRITE CSL.REC ON CUST.SHIPTO.LIST, CSL.KEY:RSEQ
                        CMORE = 0
                     END
                  END ELSE
                     RELEASE CUST.SHIPTO.LIST, CSL.KEY:RSEQ
                     IF SFND THEN
                        CMORE = 0
                     END ELSE
                        RSEQ = RSEQ + 1
                        IF LEN(RSEQ) < 3 THEN RSEQ = STR('0',3-LEN(RSEQ)):RSEQ
                     END
                  END
               END ELSE
                  IF CMORE THEN
                     CSL.SHIPS<1,-1> = SHIPTO.NO
                     MATWRITE CSL.REC ON CUST.SHIPTO.LIST, CSL.KEY:RSEQ
                     CMORE = 0
                  END
               END
            WHILE CMORE DO REPEAT
         END
      END ELSE
         RELEASE CUST.TEMPLATE.LIST, CONO:CUST.NO:"!":TEMP.NO:"!001"
      END
   END
END
RETURN
4000 *  LOAD SCV.REC VALUES FROM TDT.REC
ECD.ACTION = 6; CALL SCRN.EDIT
P = 1
FOR I = 2 TO 11
   IF I # 2 THEN P = P + 3
   IF TDT.REC(P) # '' THEN
      SCV.REC(I)<ECD.SCRN.NO,1> = TDT.REC(P)
      SCV.REC(I)<ECD.SCRN.NO,2> = TDT.REC(P+2)
      FOR J = 3 TO 7
         SCV.REC(I)<ECD.SCRN.NO,J> = TDT.REC(P+1)<1,J-2>
      NEXT J
   END
NEXT I
SCV.REC(26)<ECD.SCRN.NO> = TDT.REC(31)
FOR J = 1 TO 5
   SCV.REC(26+J)<ECD.SCRN.NO> = TDT.REC(32)<1,J>
NEXT J
SCV.REC(40)<ECD.SCRN.NO> = TDT.REC(33)
SCV.REC(41)<ECD.SCRN.NO> = TDT.REC(34)
FOR I = 43 TO 52
   SCV.REC(I)<ECD.SCRN.NO> = TDT.REC(I-8)
NEXT I
SCV.REC(55)<ECD.SCRN.NO> = TDT.REC(45)
IF TDT.REC(45) # "" THEN
   MATREAD SHIP.VIA.REC FROM SHIP.VIA, CONO:TDT.REC(45) THEN
      SCV.REC(59)<ECD.SCRN.NO> = SHPV.DESC
   END ELSE
      SCV.REC(59)<ECD.SCRN.NO> = UNKNOWN
   END
END
SCV.REC(60) = TDT.SHP.TERMS
SCV.REC(42) = TDT.FRT.PAY
ECD.ACTION=3; CALL SCRN.EDIT
RETURN
5000 *   READ CLONE-FROM RECORD
NX = 0
CLONE = 1
MAT SAV.REC = ''
LOOP
   ECD.NUM = 33
   ECD.ACTION = 4; CALL SCRN.EDIT
   BEGIN CASE
      CASE ECD.RET.VALUE # 'END' AND ECD.RET.VALUE # ''
         CFILE = ECD.RET.VALUE[1,1]
         IF CFILE = 'M' OR CFILE = 'D' THEN
            ECD.NUM = 35
            ECD.ACTION = 4; CALL SCRN.EDIT
            IF ECD.RET.VALUE = 'END' THEN GOTO 5050
            BEGIN CASE
               CASE ECD.RET.VALUE = ''
                  CSHIP = SHIPTO.NO
               CASE 1
                  CSHIP = TRIM(ECD.RET.VALUE)
            END CASE
            IF CFILE = 'D' THEN
               ECD.NUM = 36
               ECD.ACTION = 4; CALL SCRN.EDIT
               IF ECD.RET.VALUE = 'END' THEN GOTO 5050
               BEGIN CASE
                  CASE ECD.RET.VALUE = ''
                     CTEMP = TEMP.NO
                  CASE 1
                     CTEMP = TRIM(ECD.RET.VALUE)
               END CASE
            END
         END
         BEGIN CASE
            CASE CFILE = 'M'
               MATREAD SAV.REC FROM SHIPTO.DETAIL, CONO:CSHIP THEN
                  TMPSHP = ''
                  READV TMPSHP FROM SHIPTO.MASTER,CONO:CSHIP,20 ELSE NULL
                  SAV.REC(45) = TMPSHP
                  NX = 1
                  CLONE = 0
               END ELSE
                  ECD.NUM = 34
                  ECD.ACTION = 4; CALL SCRN.EDIT
                  IF ECD.RET.VALUE # 'Y' THEN CLONE = 0
               END
            CASE CFILE = 'D'
               MATREAD SAV.REC FROM TEMPLATE.DETAIL, CONO:CSHIP:"!":CTEMP THEN
                  NX = 1
                  CLONE = 0
               END ELSE
                  ECD.NUM = 34
                  ECD.ACTION = 4; CALL SCRN.EDIT
                  IF ECD.RET.VALUE # 'Y' THEN CLONE = 0
               END
            CASE 1
               CLONE = 0
         END CASE
      CASE 1
         CLONE = 0
   END CASE
5050 WHILE CLONE DO REPEAT
IF NX THEN
   LN = 1
   MAT TDT.REC = MAT SAV.REC
   GOSUB 4000
   GOSUB 6000
END
5099  *
RETURN
*
6000  * LOAD LINE INFO TO TDT.REC FROM SCV.REC
LINES = 0
P = 1
FOR I = 2 TO 11
   IF I # 2 THEN P = P + 3
   TDT.REC(P) = SCV.REC(I)<ECD.SCRN.NO,1>
   TDT.REC(P+2) = SCV.REC(I)<ECD.SCRN.NO,2>
   IF TDT.REC(P) # "" THEN LINES = LINES + 1
   IF SCV.REC(I)<ECD.SCRN.NO> # '' THEN
      FOR J = 3 TO 7
         TDT.REC(P+1)<1,J-2> = SCV.REC(I)<ECD.SCRN.NO,J>
      NEXT J
   END
NEXT I
IF LN > LINES THEN LN = LINES
IF LN < 0 THEN LN = 1
OLD.START.LINE = 0
GOSUB 10000
RETURN
7000 *
FLG = 'N'
FOR J = 2 TO 29 STEP 3
   IF TDT.REC(J)<1,P> = 'Y' THEN FLG = 'Y'
NEXT J 
RETURN
10000 *
START.LINE=1 + INT((LN-1)/PAGE.SIZE) * PAGE.SIZE
LAST.LINE=START.LINE + PAGE.SIZE - 1
IF LAST.LINE > LINES THEN LAST.LINE=LINES
IF START.LINE=OLD.START.LINE THEN GOTO 10001
OLD.START.LINE=START.LINE
CNT=1
FOR N=START.LINE TO LAST.LINE
   SLN=BEGIN.PAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
   P_X  = 0 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
   P_X  := AM:0 ; P_Y := AM:SLN ; P_VALUE := AM:N "R#2":'-'
   P_X  := AM:4 ; P_Y := AM:SLN ; P_VALUE := AM:SCV.REC(N+1)<ECD.SCRN.NO,1> 'L#58'
   P_X  := AM:63 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(SCV.REC(N+1)<ECD.SCRN.NO,2>,'MD0Z') 'R#2'
   CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
   Q = 3
   FOR P = 3 TO 7
*P_X=(63+Q):SCV.REC(N+1)<ECD.SCRN.NO,P>;P_Y=P>'L#1':;P_VALUE=SCV.REC(N+1)<ECD.SCRN.NO,P>'L#1';P_OPT=""
      P_X=(63+Q);P_Y=SLN;P_VALUE=SCV.REC(N+1)<ECD.SCRN.NO,P>'L#1';P_OPT=""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      Q = Q + 3
   NEXT P
   CNT=CNT + 1
NEXT N
FOR M=CNT TO PAGE.SIZE
   SLN=BEGIN.PAGE + LINE.SPACE * MOD(M-1,PAGE.SIZE)
   P_X  = 0 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
   CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
NEXT M
10001 *
RETURN
*
*---- CALLS FOR SYSCOM
*
91000 *
ERR.TYPE = 1
CALL SYSCOM(MAT SYSCOM.REC)
RETURN
93000 *
ERR.TYPE = 3
CALL SYSCOM(MAT SYSCOM.REC)
99999 *
*       PRINT @(-1):
END
