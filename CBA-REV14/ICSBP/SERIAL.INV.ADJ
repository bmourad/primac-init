*COPY>CPYLIB>COM1
*************************************************************************
* REVISION    - [12.1]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - ICSBP
* PROGRAM     - PAPER.INV.ADJ
* BY          - K JAHAN ,C.B.A
* DATE        - 06/16/04
* DESCRIPTION - THIS UPDATES PHYSICAL.INV FILE TO RUN A PHYSICAL
*     PAPER INVENTORY UPDATE TO THE QUANTITY ON HAND ON INVENTORY FILE.
*T27923 kjahan 06/16/2004 * Revised code.
*T27931 saleem 07/26/2004 * Mill Roll # Xref
*T27928 lross 12/23/2004 * Mods to diameter calc and many other problems.
*T27919 wyamout 03/16/2005 * PROBLEMS WHEN QC'ING NON-PAPER ITEMS.
*T29032 cmyklebu 01/03/2007 * Move pgm from rev12 to rev14.
*ENDDOC
*************************************************************************
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>ICS.CPYLIB>PHYSICAL.INV
*COPY>ICS.CPYLIB>INV.ADJ.CODES
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>ICS.CPYLIB>CATEGORY
*COPY>JCS.CPYLIB>JOB
*COPY>ICS.CPYLIB>MILL_TO_SERIAL
*COPY>JCS.CPYLIB>JOB.STATS
*COPY>CPYLIB>GEN.XREF
*COPY>PMC.CPYLIB>COMPANY
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>ICS.CPYLIB>INV_SERIAL
*COPY>ICS.CPYLIB>INV_RECEIPTS
*COPY>PMC.CPYLIB>PO
*COPY>ICS.CPYLIB>INV_AUDIT_HIST
*COPY>ICS.CPYLIB>INV_AUDIT_BAL
*COPY>ICS.CPYLIB>INV.STATS
*COPY>ICS.CPYLIB>INV.JOB.STATS
*COPY>CPYLIB>SYSCOM
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>ICS.CPYLIB>INV.CNV
*COPY>PMC.CPYLIB>DIVISION
*
EQU INV.UOM.STK TO INV.UNIT<1,2>
EQU INV.UOM.CST TO INV.UNIT<1,3>
DEFFUN CALC.DIAM(COST.QTY,STK.QTY,MAT INV.REC)
DEFFUN GET.SERIAL.SEQ(CONO,CONTROL.FILE,INV_SERIAL.FILE)
DEFFUN CALC.STK.QTY(COST.QTY,MAT INV.CNV.REC,ROND,LN)
DEFFUN CALC.COST.QTY(STK.QTY,MAT INV.CNV.REC,ROND,LN)
*
SYS.TYPE=1
CALL SYSCOM(MAT SYSCOM.REC)
*
* OPEN FILES
*
OPEN '','INVENTORY' TO INVENTORY ELSE
   ERRMSG='INVENTORY FILE IS MISSING';GOTO 93000
END
OPEN '','INV.WHSE' TO INV.WHSE ELSE
   ERRMSG='INV.WHSE FILE IS MISSING';GOTO 93000
END
OPEN '','INV.WHSE.LOC' TO INV.WHSE.LOC ELSE
   ERRMSG='INV.WHSE.LOC FILE IS MISSING';GOTO 93000
END
OPEN '','MILL_TO_SERIAL' TO MILL_TO_SERIAL ELSE
   ERRMSG = 'MILL_TO_SERIAL FILE IS MISSING' ; GOTO 93000
END
OPEN '','PHYSICAL.INV' TO PHYSICAL.INV ELSE
   ERRMSG='PHYSICAL.INV FILE IS MISSING';GOTO 93000
END
OPEN '','CATEGORY' TO CATEGORY ELSE
   ERRMSG='CATEGORY FILE IS MISSING';GOTO 93000
END
OPEN '','JOB' TO JOB ELSE ERRMSG='JOB FILE IS MISSING';GOTO 93000
OPEN '','JOB.STATS' TO JOB.STATS ELSE
   ERRMSG='JOB.STATS FILE IS MISSING';GOTO 93000
END
OPEN '','WAREHOUSE' TO WAREHOUSE ELSE
   ERRMSG='WAREHOUSE FILE IS MISSING';GOTO 93000
END
OPEN '','PREFIX' TO PREFIX ELSE
   ERRMSG='PREFIX FILE IS MISSING';GOTO 93000
END
OPEN '','COMPANY' TO COMPANY ELSE
   ERRMSG='COMPANY FILE IS MISSING';GOTO 93000
END
OPEN '','DIVISION' TO DIVISION ELSE 
   ERRMSG = "DIVISION FILE IS MISSING"; GOTO 93000
END
OPEN '','CONTROL' TO CONTROL ELSE
   ERRMSG='CONTROL FILE IS MISSING';GOTO 93000
END
*T29032 v
*  OPEN '','REV12A.SCREENS' TO M.SCREENS ELSE
*     ERRMSG = 'REV12A.SCREENS FILE IS MISSING'
*     GOTO 93000
*  END
OPEN '','ICS.SCREENS' TO M.SCREENS ELSE
   ERRMSG = 'ICS.SCREENS FILE IS MISSING'
   GOTO 93000
END
*T29032 ^
OPEN '','INVENTORY.XREF' TO INVENTORY.XREF ELSE
   ERRMSG='INVENTORY.XREF FILE IS MISSING';GOTO 93000
END
OPEN '','INV.ADJ.CODES' TO INV.ADJ.CODES ELSE
   ERRMSG='INV.ADJ.CODES FILE IS MISSING';GOTO 93000
END
OPEN '','INV_AUDIT_BAL' TO INV_AUDIT_BAL ELSE ERRMSG = 'INV_AUDIT_BAL FILE IS MISSING'; GOTO 93000
OPEN '','INV_AUDIT_HIST' TO INV_AUDIT_HIST ELSE ERRMSG = 'INV_AUDIT_HIST FILE IS MISSING'; GOTO 93000
OPEN '','SECURITY' TO SECURITY ELSE
   ERRMSG='SECURITY FILE IS MISSING';GOTO 93000
END
OPEN '','INV_SERIAL' TO INV_SERIAL ELSE
   ERRMSG='INV_SERIAL FILE IS MISSING';GOTO 93000
END
OPEN '','INV_SERIAL_DELETED' TO INV_SERIAL_DELETED ELSE
   ERRMSG='INV_SERIAL_DELETED FILE IS MISSING';GOTO 93000
END
OPEN '','INV_RECEIPTS' TO INV_RECEIPTS ELSE
   ERRMSG ='INV_RECEIPTS FILE IS MISSING'; GOTO 93000
END
OPEN '','PO' TO PO ELSE
   ERRMSG='PO FILE IS MISSING'; GOTO 93000
END
*
****** GET COMPANY NAME
*
OPER.ID=@LOGNAME
MAT COMP.REC='';CONO=''
CALL GET.CONO(CONO,MAT COMP.REC)
IF CONO='END' THEN GOTO 99999
OPTION='';OPTION1=''
ERROR.FLAG=0
MAT EDIT.COM.DRIVER=''
OLDADJCODE=''; NEWADJCODE=''
*
*******SCREEN INFO
*
ECD.SCRN.CNT=1
ECD.SCRN.NAME<1>='SERIAL.INV.ADJ'
ECD.ACTION=1;CALL SCRN.EDIT
ECD.SCRN.NO=1
ESN = ECD.SCRN.NO
*
* INITIALIZE SCREEN
ECD.ACTION=1;CALL SCRN.EDIT
MAT PHS.INV.REC='';MAT INV.CNV.REC='';MAT CATG.REC=''
MAT SCV.REC=""
*
*******PRINT SCREEN
*
ECD.ACTION=2;CALL SCRN.EDIT
*
*
**** CLEAR SCREEN CONTENT
*
100*
RELEASE
MAT SCV.REC = ""
ECD.ACTION = 6 ; CALL SCRN.EDIT
*
*********************
*MAIN PROCESSING
**********************
DIFF.DIAM = ''; DIFF.SHEET=''; DIFF.WGHT=''; DIFF.QTY=''
ECD.NUM = 1
ECD.ACTION=4;CALL SCRN.EDIT
IF ECD.RET.VALUE = 'END' THEN
   GOTO 99999
END ELSE
   SERIAL.NUM = ECD.RET.VALUE
   IF SERIAL.NUM = "M" THEN
      ECD.NUM = 4; ECD.ACTION = 4; CALL SCRN.EDIT
      IF ECD.RET.VALUE # "END" THEN
         MATREAD MTS.REC FROM MILL_TO_SERIAL,CONO:ECD.RET.VALUE THEN
            SERIAL.NUM = MTS.SERIAL<1,1>
         END ELSE
            ERRMSG = "Mill Roll # ":ECD.RET.VALUE:" is not on file"
            GOSUB 91000
            GOTO 100
         END
      END ELSE
         GOTO 100
      END
   END
END
*
GOSUB GET.SERIAL.DATA
GOSUB DISPLAY.SERIAL.DATA
ECD.ACTION=3; CALL SCRN.EDIT
IF ERRMSG # '' THEN GOTO 100 ;*T27928
IF ERROR.FLAG = 1 OR FND = 0 OR FND2 = 0 THEN 
   GOSUB 1000
END
*
MORE = 0
LOOP
   ECD.NUM = 37
   ECD.ACTION =4; CALL SCRN.EDIT
   OPTION = ECD.RET.VALUE
   BEGIN CASE
      CASE OPTION = 'END'
         MORE = 1
      CASE OPTION = 'LO'
         GOSUB 99999
      CASE NUM(OPTION)
         ON OPTION GOSUB 1000,1100
         MORE = 0
      CASE OPTION = 'F'
         MATWRITE PHS.INV.REC ON PHYSICAL.INV, CONO:CATG_TYPE:'!':PROD_TYPE:'!':WHSE_CODE:'!':LOC_CODE
         MORE = 1
      CASE OPTION = 'E'
         MORE = 1
      CASE OPTION = 'D'
         GOSUB CHECK.DELETE.DATA
         MORE = 1
   END CASE
WHILE MORE = 0 DO REPEAT
GOTO 100
************************
GET.SERIAL.DATA: 
************************
*
S.ID = CONO:SERIAL.NUM
PROD_LINE = ""
PROD_TYPE = ""
CATG_TYPE = ""
ODVD = 10
MATREAD ISTK.REC FROM INV_SERIAL, S.ID ELSE
   ERRMSG = SERIAL.NUM:" is not a valid serial tracking ID."
   GOSUB 91000; GOTO 100
END
MATREAD INV.REC FROM INVENTORY, CONO:ISTK.PROD ELSE MAT INV.REC = ""
MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE MAT CATG.REC = ""
**COPY>ICSBP>INV.UM.CNV
PROD_NUM = ISTK.PROD
PROD_LINE = INV.LINE
PROD_TYPE = INV.PAP.TYPE
CATG_TYPE = CATG.TYPE
WHSE_CODE = ISTK.WHSE
LOC_CODE = ISTK.LOC
BEGIN CASE
   CASE INV.PAP.TYPE="SHEET"
      OCNV="MD2";ICR="MD0"
   CASE INV.PAP.TYPE="ROLL"
      OCNV="MD2"; ICR="MD2"
   CASE INV.PAP.TYPE="LROLL"
      OCNV="MD0";ICR="MD0"
   CASE INV.PAP.TYPE="PCOAT"
      OCNV="MD0"; ICR="MD0"
   CASE 1
      OCNV="MD2"; ICR="MD2"
END CASE
IF INV.UOM.CST="SHT" OR INV.UOM.CST="FT" OR INV.UOM.CST="PC" THEN
   OCNV="MD0"; ODVD=1000
END ELSE
   OCNV="MD2"; ODVD=10
END
MAT IWLO.REC = ""
MATREAD IWLO.REC FROM INV.WHSE.LOC,CONO: PROD_NUM:'!':WHSE_CODE:'!':LOC_CODE ELSE
   MAT IWLO.REC = ""
   IWLO.LOC.ON.HAND=0
END
MATREAD IWH.REC FROM INV.WHSE,CONO:PROD_NUM:'!':WHSE_CODE ELSE
   MAT IWH.REC = ""
END
ERR = 0
IF CATG.MAJ.LINE='FNGD' AND CO.OPS = 'Y' THEN
   ERRMSG="YOU MUST USE THE FINISHED GOODS ADJUSTMENT FUNCTION"
   GOSUB 91000
   GOTO 100
END ELSE
   IF CATG.TRK.LVL='S' THEN
      BEGIN CASE
         CASE CATG.TYPE="L"
            U.M="LBS"
         CASE CATG.TYPE="S"
            U.M="SHT"
         CASE CATG.TYPE="RL"
            U.M="PC"
         CASE CATG.TYPE="PC"
            U.M="FT"
         CASE 1
*              ERRMSG="THIS PRODUCT LINE IS NOT A PAPER PRODUCT LINE"
            U.M=INV.UNIT<1,2>
*              GOSUB 91000; GOTO 100
      END CASE
      IF NOT(ERR) THEN
         SCV.REC(25)<ESN> = U.M
         SCV.REC(29)<ESN> = U.M
         ECD.ACTION=3;CALL SCRN.EDIT
      END
   END ELSE
      ERRMSG='THIS IS NOT A SERIALY TRACKED PRODUCT LINE.'
      GOSUB 91000 ; GOTO 100
   END
*
   MATREAD PO.REC FROM PO, CONO:ISTK.PO.NO ELSE MAT PO.REC = ""
   LOCATE ISTK.PROD IN PO.PROD.NUM<1> SETTING POS ELSE POS = ""
   IF POS THEN
      VENDOR = PO.VEND.NO
   END ELSE
      VENDOR = ""
   END
   RECP.ID = CONO:ISTK.RECP
   MATREAD INVR.REC FROM INV_RECEIPTS,RECP.ID ELSE MAT INVR.REC=""
   ROND = 0.5
   IF ISTK.CUR.QTY < 0 THEN ROND = -0.5
   RETURN
*
*********************
DISPLAY.SERIAL.DATA: 
*********************
*T27928 v Merge code from below setting of SCV.REC data.
   FND = 0
   MAT PHS.INV.REC = ''
   P.ID = CONO:CATG_TYPE:"!":PROD_TYPE:"!":ISTK.WHSE:"!":ISTK.LOC
   MATREADU PHS.INV.REC FROM PHYSICAL.INV, P.ID LOCKED
      ERRMSG = 'PHYSICAL INVENTORY record is locked by user - ':GETUSERNAME(STATUS())
      GOSUB 91000 ; RETURN
   END ELSE
      MAT PHS.INV.REC=''
   END
   IF PHS.INV.PROD = '' THEN
      LN1 = 1
      LN2 = 1
      GOSUB SET.CONV.VALUES
      GOSUB SET.NEW.REC.DATA
      GOSUB SERIAL.LINES.ENTRY
      PHS.INV.PROD<1,LN1> = PROD_NUM
      PHS.R.S.ID<1,LN1,LN2> = SERIAL.NUM
      ERROR.FLAG = 1
      FND2 = 0
   END ELSE
      LINES.1=DCOUNT(PHS.INV.PROD,VM)
      FOR D=1 TO LINES.1
         IF PHS.INV.PROD<1,D> = PROD_NUM THEN
            LN1 = D
            CNT=DCOUNT(PHS.R.S.ID<1,D>,SVM)
            FND2 = 0
            FOR DD=1 TO CNT
               IF PHS.R.S.ID<1,D,DD> = SERIAL.NUM THEN
                  LN2 = DD
                  FND2 = 1
                  DIFF.DIAM<1,D,DD>=PHS.NEW.DIAM<1,D,DD> - PHS.CUR.DIAM<1,D,DD>
                  DIFF.WGHT<1,D,DD>=PHS.NEW.WGHT<1,D,DD> - PHS.CUR.WGHT<1,D,DD>
                  DIFF.SHEET<1,D,DD>=PHS.NEW.SHEET<1,D,DD> - PHS.CUR.SHEET<1,D,DD>
               END
            NEXT DD
            FND = 1
         END
      NEXT D
      IF FND = 0 THEN
         FND2 = 0
         LN1 = LINES.1 + 1
         LN2 = 1
      END
      IF FND = 1 AND FND2 = 0 THEN
         CNT=DCOUNT(PHS.R.S.ID<1,LN1>,SVM); *T27919
         LN2 = CNT + 1
      END
      ERROR.FLAG = 0
      GOSUB SET.CONV.VALUES
      ON.HAND = IWLO.LOC.ON.HAND
      PHS.R.S.ID<1,LN1,LN2> = SERIAL.NUM
*T27928  PHS.INV.PROD<1,LN1> = ISTK.PROD
*T27928  PHS.CUR.QTY<1,LN1> = IWLO.LOC.ON.HAND
*T27928  PHS.NEW.QTY<1,LN1> = PHS.CUR.QTY<1,LN1>
*T27928  DIFF.QTY<1,LN1> = PHS.NEW.QTY<1,LN1> - PHS.CUR.QTY<1,LN1>
*T27928  PHS.UN.COST<1,LN1> = ''
*        DIFF.DIAM<1,LN1,LN2> = PHS.NEW.DIAM<1,LN1,LN2> - PHS.CUR.DIAM<1,LN1,LN2>
*        DIFF.WGHT<1,LN1,LN2> = PHS.NEW.WGHT<1,LN1,LN2> - PHS.CUR.WGHT<1,LN1,LN2>
      GOSUB SET.NEW.REC.DATA
   END
   DIFF.DIAM<1,LN1,LN2> = PHS.NEW.DIAM<1,LN1,LN2> - PHS.CUR.DIAM<1,LN1,LN2>
   DIFF.WGHT<1,LN1,LN2> = PHS.NEW.WGHT<1,LN1,LN2> - PHS.CUR.WGHT<1,LN1,LN2>
*T27928 ^
*T27928  IF FND2 = 1 THEN ;* Only if serial already exists ?
   SCV.REC(24)<ESN> = PHS.ADJ.CODE<1,LN1,LN2>
   OLDADJCODE = PHS.ADJ.CODE<1,LN1,LN2>
   GOSUB SERIAL.LINES.ENTRY
*T27928     GOSUB DISPLAY.DATA
*T27928  END
END
SCV.REC(1)<ESN> = SERIAL.NUM
SCV.REC(2)<ESN> = ISTK.PROD
SCV.REC(3)<ESN> = INV.FULL.DESC
SCV.REC(4)<ESN> = ISTK.MILL.ID
SCV.REC(5)<ESN> = ISTK.PO.NO
SCV.REC(6)<ESN> = ISTK.WHSE
SCV.REC(7)<ESN> = VENDOR
SCV.REC(8)<ESN> = ISTK.LOC
SCV.REC(9)<ESN> = ISTK.RECP
TEMP.CURR.QTY = (ISTK.CUR.QTY/ODVD)
SCV.REC(10)<ESN> = OCONV(INT(TEMP.CURR.QTY+.5),OCNV)
SCV.REC(11)<ESN> = INVR.ENT.DATE
SCV.REC(12)<ESN> = ISTK.CUR.DIAM
WGHT=ISTK.CUR.QTY
* GET STOCKING QTY BY CONVERTING COSTIN QTY.
SCV.REC(13)<ESN> = INVR.PERIOD
*T27919      SCV.REC(14)<ESN>=OCONV(INT(((ISTK.CUR.QTY/ICR.DV1)*ICR.MT1)/ICR.DV2+ROND),ICR.CNV)
SCV.REC(14)<ESN>=OCONV(INT(((ISTK.CUR.QTY/ICR.DV1<LN1>)*ICR.MT1<LN1>)/ICR.DV2<LN1>+ROND),ICR.CNV<LN1>)
*T27919      ISTK.CUR.STK.QTY=CALC.STK.QTY(ISTK.CUR.QTY,MAT INV.CNV.REC,ROND,'') ;*T27928
ISTK.CUR.STK.QTY=CALC.STK.QTY(ISTK.CUR.QTY,MAT INV.CNV.REC,ROND,LN1) ;*T27928
SCV.REC(15)<ESN> = INVR.UNIT.COST
SCV.REC(16)<ESN> = PROD_LINE
SCV.REC(17)<ESN> = PROD_TYPE
SCV.REC(18)<ESN>=INV.UNIT<1,3>
SCV.REC(19)<ESN>=INV.UNIT<1,2>
IF FND2 THEN GOSUB DISPLAY.DATA ;*T27928
*     FND = 0
*     MAT PHS.INV.REC = ''
*     P.ID = CONO:CATG_TYPE:"!":PROD_TYPE:"!":ISTK.WHSE:"!":ISTK.LOC
*     MATREADU PHS.INV.REC FROM PHYSICAL.INV, P.ID LOCKED
*        ERRMSG = 'PHYSICAL INVENTORY record is locked by user - ':GETUSERNAME(STATUS())
*        GOSUB 91000 ; CONTINUE
*     END ELSE
*        MAT PHS.INV.REC=''
*     END
*     IF PHS.INV.PROD = '' THEN
*        LN1 = 1
*        LN2 = 1
*        GOSUB SET.NEW.REC.DATA
*        GOSUB SERIAL.LINES.ENTRY
*        PHS.INV.PROD<1,LN1> = PROD_NUM
*        PHS.R.S.ID<1,LN1,LN2> = SERIAL.NUM
*        ERROR.FLAG = 1
*        FND2 = 0
*     END ELSE
*        LINES.1=DCOUNT(PHS.INV.PROD,VM)
*        FOR D=1 TO LINES.1
*           IF PHS.INV.PROD<1,D> = PROD_NUM THEN
*              LN1 = D
*              CNT=DCOUNT(PHS.R.S.ID<1,D>,SVM)
*              FND2 = 0
*              FOR DD=1 TO CNT
*                 IF PHS.R.S.ID<1,D,DD> = SERIAL.NUM THEN
*                    LN2 = DD
*                    FND2 = 1
*                    DIFF.DIAM<1,D,DD>=PHS.NEW.DIAM<1,D,DD> - PHS.CUR.DIAM<1,D,DD>
*                    DIFF.WGHT<1,D,DD>=PHS.NEW.WGHT<1,D,DD> - PHS.CUR.WGHT<1,D,DD>
*                 END
*              NEXT DD
*              FND = 1
*           END
*        NEXT D
*        IF FND = 0 THEN
*           FND2 = 0
*           LN1 = LINES.1 + 1
*           LN2 = 1
*        END
*        IF FND = 1 AND FND2 = 0 THEN
*           LN2 = CNT + 1
*        END
*        ERROR.FLAG = 0
*        GOSUB SET.CONV.VALUES
*        ON.HAND = IWLO.LOC.ON.HAND
*        PHS.R.S.ID<1,LN1,LN2> = SERIAL.NUM
*        PHS.INV.PROD<1,LN1> = ISTK.PROD
*T27928* PHS.CUR.QTY<1,LN1> = IWLO.LOC.ON.HAND
*T27928* PHS.NEW.QTY<1,LN1> = PHS.CUR.QTY<1,LN1>
*T27928* DIFF.QTY<1,LN1> = PHS.NEW.QTY<1,LN1> - PHS.CUR.QTY<1,LN1>
*        PHS.UN.COST<1,LN1> = ''
*        DIFF.DIAM<1,LN1,LN2> = PHS.NEW.DIAM<1,LN1,LN2> - PHS.CUR.DIAM<1,LN1,LN2>
*        DIFF.WGHT<1,LN1,LN2> = PHS.NEW.WGHT<1,LN1,LN2> - PHS.CUR.WGHT<1,LN1,LN2>
*        GOSUB SET.NEW.REC.DATA
*T27928* IF FND2 = 1 THEN ;* Only if serial already exists ?
*           SCV.REC(24)<ESN> = PHS.ADJ.CODE<1,LN1,LN2>
*           OLDADJCODE = PHS.ADJ.CODE<1,LN1,LN2>
*           GOSUB SERIAL.LINES.ENTRY
*           GOSUB DISPLAY.DATA
*T27928* END
*     END
RETURN
*
*
**********************
DISPLAY.DATA: 
**********************
*
P_X = 60;P_Y=17;P_OPT=''
IF PHS.NEW.WGHT<1,LN1,LN2> < 0 THEN ROND="-.5" ELSE ROND=".5"
*T27919      P_VALUE = OCONV(INT(((PHS.NEW.WGHT<1,LN1,LN2>/ICR.DV1<1,LN1>)*ICR.MT1<1,LN1>)/ICR.DV2<1,LN1>+ROND), ICR.CNV<1,LN1>)
P_VALUE = OCONV(INT(((PHS.NEW.WGHT<1,LN1,LN2>/ICR.DV1<LN1>)*ICR.MT1<LN1>)/ICR.DV2<LN1>+ROND), ICR.CNV<LN1>)
P_VALUE := STR(' ',9-LEN(P_VALUE)) ;*T27928
CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
IF DIFF.WGHT<1,LN1,LN2> < 0 THEN ROND="-.5" ELSE ROND=".5"
P_X=23;P_Y=18;P_OPT=''
*T27928 v
IF DIFF.WGHT<1,LN1,LN2> < 0 THEN
   TMP = DIFF.WGHT<1,LN1,LN2> * (-1)
END ELSE
   TMP = DIFF.WGHT<1,LN1,LN2>
END
ROND='.5'
*     P_VALUE = OCONV(INT(((DIFF.WGHT<1,LN1,LN2>/ICR.DV1<1,LN1>)*ICR.MT1<1,LN1>)/ICR.DV2<1,LN1>+ROND), ICR.CNV<1,LN1>)
*T27919      P_VALUE = OCONV(INT(((TMP/ICR.DV1<1,LN1>)*ICR.MT1<1,LN1>)/ICR.DV2<1,LN1>+ROND), ICR.CNV<1,LN1>)
P_VALUE = OCONV(INT(((TMP/ICR.DV1<LN1>)*ICR.MT1<LN1>)/ICR.DV2<LN1>+ROND), ICR.CNV<LN1>)
*T27928 ^
P_VALUE := STR(' ',9-LEN(P_VALUE)) ;*T27928
DEFDIFF = TRIM(P_VALUE)
CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*CM   IF U.M = "LBS" THEN
IF U.M = "LBS" OR U.M = "PC" THEN
   P_X = 59; P_Y=18;P_OPT=''
   DIFF_VAL = OCONV(PHS.NEW.DIAM<1,LN1,LN2>,"MD2")'R#5'
   CALL VSI_PLINE(P_X,P_Y,DIFF_VAL,P_OPT)
END
RETURN
*
******************************
SERIAL.LINES.ENTRY: 
******************************
PHS.CUR.WGHT<1,LN1,LN2> = ISTK.CUR.QTY
PHS.INV.PROD<1,LN1> = ISTK.PROD
WGHT = ISTK.CUR.QTY
DIAM = ISTK.CUR.DIAM
SHTS = ISTK.CUR.STK.QTY ;*T27928
GOSUB GET.DIAM
PHS.CUR.DIAM<1,LN1,LN2> = DIAM
SCV.REC(12)<ESN> = DIAM
PHS.CUR.SHEET<1,LN1,LN2> = ISTK.CUR.STK.QTY
*T27919      CUR_WGHT = OCONV(INT(((PHS.CUR.WGHT<1,LN1,LN2>/ICR.DV1<1,LN1>)*ICR.MT1<1,LN1>)/ICR.DV2<1,LN1>+.5), ICR.CNV<1,LN1>)
CUR_WGHT = OCONV(INT(((PHS.CUR.WGHT<1,LN1,LN2>/ICR.DV1<LN1>)*ICR.MT1<LN1>)/ICR.DV2<LN1>+.5), ICR.CNV<LN1>)
DIAM_VAL = OCONV(PHS.CUR.DIAM<1,LN1,LN2>,"MD2")
RETURN
*
*********************************
SET.NEW.REC.DATA: 
*********************************
*T27928 v
IF FND = 0 THEN
   PHS.INV.PROD<1,LN1> = ISTK.PROD
   PHS.CUR.QTY<1,LN1> = IWLO.LOC.ON.HAND
   PHS.NEW.QTY<1,LN1> = PHS.CUR.QTY<1,LN1>
   DIFF.QTY<1,LN1> = PHS.NEW.QTY<1,LN1> - PHS.CUR.QTY<1,LN1>
   PHS.INV.DESC<1,LN1>=INV.DESC
   PHS.M.WGHT<1,LN1>=INV.M.WT
END
*T27928 ^
PHS.UN.COST<1,LN1,LN2> = ISTK.UNIT.COST
PHS.DATE.ENT<1,LN1,LN2> = DATE()
PHS.OPER.ID<1,LN1,LN2> = OPER.ID
RETURN
*
*
*************************
CHECK.DELETE.DATA: 
*************************
DCNT = DCOUNT(PHS.INV.PROD,@VM)
IF DCNT = 1 THEN
   DSCNT = DCOUNT(PHS.R.S.ID<1,LN1>,@SVM)
   IF DSCNT = 1 THEN
      DELETE PHYSICAL.INV,P.ID
   END ELSE
      GOSUB DELETE.DATA
   END
END ELSE
   GOSUB DELETE.DATA
END
RETURN
*
*
***********************
DELETE.DATA: 
***********************
*
LOCATE SERIAL.NUM IN PHS.R.S.ID<1,LN1>,1 SETTING FND ELSE FND=0
IF FND THEN
*T27928  PHS.INV.PROD=DELETE(PHS.INV.PROD,1,LN1,FND)
*T27928  PHS.INV.DESC=DELETE(PHS.INV.DESC,1,LN1,FND)
   PHS.UN.COST=DELETE(PHS.UN.COST,1,LN1,FND)
   PHS.UN.MAG=DELETE(PHS.UN.MAG,1,LN1,FND)
*T27928  PHS.M.WGHT=DELETE(PHS.M.WGHT,1,LN1,FND)
*T27928  PHS.NEW.QTY=DELETE(PHS.NEW.QTY,1,LN1,FND)
*T27928  PHS.CUR.QTY=DELETE(PHS.CUR.QTY,1,LN1,FND)
   PHS.NO.POST=DELETE(PHS.NO.POST,1,LN1,FND)
*T27928  ICR.CNV=DELETE(ICR.CNV,1,LN1,FND)
*T27928  ICR.DV1=DELETE(ICR.DV1,1,LN1,FND)
*T27928  ICR.DV2=DELETE(ICR.DV2,1,LN1,FND)
*T27928  ICR.MT1=DELETE(ICR.MT1,1,LN1,FND)
*T27928  ICR.TYPE=DELETE(ICR.TYPE,1,LN1,FND)
*T27928  ICR.SCAL=DELETE(ICR.SCAL,1,LN1,FND)
*T27928  DIFF.QTY=DELETE(DIFF.QTY,1,LN1,FND)
   PHS.OPER.ID=DELETE(PHS.OPER.ID,1,LN1,FND)
   PHS.DATE.ENT=DELETE(PHS.DATE.ENT,1,LN1,FND)
   PHS.ADJ.CODE=DELETE(PHS.ADJ.CODE,1,LN1,FND)
   PHS.ADJ.TYPE=DELETE(PHS.ADJ.TYPE,1,LN1,FND)
   PHS.R.S.ID=DELETE(PHS.R.S.ID,1,LN1,FND)
   PHS.CUR.SHEET=DELETE(PHS.CUR.SHEET,1,LN1,FND)
   PHS.CUR.DIAM=DELETE(PHS.CUR.DIAM,1,LN1,FND)
   PHS.CUR.WGHT=DELETE(PHS.CUR.WGHT,1,LN1,FND)
   PHS.NEW.SHEET=DELETE(PHS.NEW.SHEET,1,LN1,FND)
   PHS.NEW.DIAM=DELETE(PHS.NEW.DIAM,1,LN1,FND)
   PHS.NEW.WGHT=DELETE(PHS.NEW.WGHT,1,LN1,FND)
   DIFF.SHEET=DELETE(DIFF.SHEET,1,LN1,FND)
   DIFF.DIAM=DELETE(DIFF.DIAM,1,LN1,FND)
   DIFF.WGHT=DELETE(DIFF.WGHT,1,LN1,FND)
*T27928 v
   IF PHS.R.S.ID<1,LN1>='' THEN
      DEL PHS.INV.PROD<1,LN1>
      DEL PHS.INV.DESC<1,LN1>
      PHS.UN.COST=DELETE(PHS.UN.COST,1,LN1,0)
      PHS.UN.MAG=DELETE(PHS.UN.MAG,1,LN1,0)
      PHS.M.WGHT=DELETE(PHS.M.WGHT,1,LN1,0)
      PHS.NEW.QTY=DELETE(PHS.NEW.QTY,1,LN1,0)
      PHS.CUR.QTY=DELETE(PHS.CUR.QTY,1,LN1,0)
      PHS.NO.POST=DELETE(PHS.NO.POST,1,LN1,0)
*T27919    ICR.CNV=DELETE(ICR.CNV,1,LN1,0)
*T27919    ICR.DV1=DELETE(ICR.DV1,1,LN1,0)
*T27919    ICR.DV2=DELETE(ICR.DV2,1,LN1,0)
*T27919    ICR.MT1=DELETE(ICR.MT1,1,LN1,0)
*T27919    ICR.TYPE=DELETE(ICR.TYPE,1,LN1,0)
*T27919    ICR.SCAL=DELETE(ICR.SCAL,1,LN1,0)
      ICR.CNV=DELETE(ICR.CNV,LN1,0,0)
      ICR.DV1=DELETE(ICR.DV1,LN1,0,0)
      ICR.DV2=DELETE(ICR.DV2,LN1,0,0)
      ICR.MT1=DELETE(ICR.MT1,LN1,0,0)
      ICR.TYPE=DELETE(ICR.TYPE,LN1,0,0)
      ICR.SCAL=DELETE(ICR.SCAL,LN1,0,0)
      DIFF.QTY=DELETE(DIFF.QTY,1,LN1,0)
      PHS.OPER.ID=DELETE(PHS.OPER.ID,1,LN1,0)
      PHS.DATE.ENT=DELETE(PHS.DATE.ENT,1,LN1,0)
      PHS.ADJ.CODE=DELETE(PHS.ADJ.CODE,1,LN1,0)
      PHS.ADJ.TYPE=DELETE(PHS.ADJ.TYPE,1,LN1,0)
      PHS.R.S.ID=DELETE(PHS.R.S.ID,1,LN1,0)
      PHS.CUR.SHEET=DELETE(PHS.CUR.SHEET,1,LN1,0)
      PHS.CUR.DIAM=DELETE(PHS.CUR.DIAM,1,LN1,0)
      PHS.CUR.WGHT=DELETE(PHS.CUR.WGHT,1,LN1,0)
      PHS.NEW.SHEET=DELETE(PHS.NEW.SHEET,1,LN1,0)
      PHS.NEW.DIAM=DELETE(PHS.NEW.DIAM,1,LN1,0)
      PHS.NEW.WGHT=DELETE(PHS.NEW.WGHT,1,LN1,0)
      DIFF.SHEET=DELETE(DIFF.SHEET,1,LN1,0)
      DIFF.DIAM=DELETE(DIFF.DIAM,1,LN1,0)
      DIFF.WGHT=DELETE(DIFF.WGHT,1,LN1,0)
   END
   IF PHS.INV.PROD='' THEN
      DELETE PHYSICAL.INV,P.ID
   END ELSE
      MATWRITE PHS.INV.REC ON PHYSICAL.INV,P.ID
   END
*T27928 ^
END
RETURN
*
****************
GET.DIAM: 
****************
*
*T27928 DIAM = CALC.DIAM(WGHT,PHS.NEW.SHEET<1,LN1,LN2>+0,MAT INV.REC)
IF INV.PAP.TYPE='ROLL' OR INV.PAP.TYPE='LROLL' OR INV.PAP.TYPE='PC' THEN
   DIAM = CALC.DIAM(WGHT,SHTS+0,MAT INV.REC)
END ELSE
   DIAM = 0
END
RETURN
*
***************
1000 *
***************
*
EOI = 0
LOOP
   OLDADJCODE = PHS.ADJ.CODE<1,LN1,LN2> ; * CM
   ECD.NUM = 24
   ECD.ACTION = 4;CALL SCRN.EDIT
   ADJ.VALUE = ECD.RET.VALUE
   SKIP = 0
   IF ADJ.VALUE = 'END' OR ADJ.VALUE = ''  THEN
      IF DIFF.WGHT<1,LN1,LN2>=''  THEN
         PHS.NEW.QTY<1,LN1>=PHS.CUR.QTY<1,LN1>+DIFF.QTY<1,LN1>
      END
*CM         IF FND = 0 THEN
      IF PHS.NEW.SHEET<1,LN1,LN2> = "" THEN
         GOTO 100
      END ELSE
         IF ERROR.FLAG = 0 THEN
            P_VALUE = OLDADJCODE
            P_X = 23;P_Y=17;P_OPT =''
            CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
            GOSUB DISPLAY.DATA
         END
         RETURN
      END
   END ELSE
      IF NOT(SKIP) THEN
         MATREAD IADJ.REC FROM INV.ADJ.CODES, CONO:ADJ.VALUE THEN
            PHS.ADJ.CODE<1,LN1,LN2> = ADJ.VALUE
            PHS.ADJ.TYPE<1,LN1,LN2> = IADJ.TYPE
            NEWADJCODE = ADJ.VALUE
            EOI = 1
         END ELSE
            ERRMSG = 'INVALID ADJUSTMENT REASON CODE'
            IF ERROR.FLAG = 0 THEN
               NEWADJCODE = OLDADJCODE
            END
            GOSUB 91000
         END
      END
   END
UNTIL (EOI) DO REPEAT
GOSUB SERIAL.LINES.ENTRY
GOSUB ENT.ADJ.QTY
IF EOS = 0 THEN
   GOSUB CALC.ADJUSTMENTS
END ELSE
   P_X  = 23 ; P_Y = 17; P_OPT = '';P_VALUE=''
   CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
END
RETURN
*
*******************
1100 *
******************
DEFAULT = TRIM(DEFDIFF)
GOSUB ENT.ADJ.QTY
IF EOS = 0 THEN
   GOSUB CALC.ADJUSTMENTS
END ELSE
   SCV.REC(27)<ESN> = DEFDIFF
   GOSUB DISPLAY.DATA
END
RETURN
*
*
*
***************
ENT.ADJ: 
**************
*
EOI = 0
LOOP
   ECD.NUM = 26
   ECD.ACTION = 4;CALL SCRN.EDIT
   ADJ = ECD.RET.VALUE
   IF ADJ = 'END' THEN
      RETURN
   END ELSE
      EOI = 1
   END
UNTIL (EOI) DO REPEAT
GOSUB 1100
RETURN
*
*
***************************
ENT.ADJ.QTY: 
***************************
EOI = 0
EOS = 0
JUSTIFY='L' ;*T27928
LOOP
   ERRMSG='' ; SKIP =0
   ROND='.5' ;*T27928
   BEGIN CASE
      CASE PHS.ADJ.TYPE<1,LN1,LN2>='R'
*T27919        X=60;Y=17;MAXL=9;TYP=ICR.TYPE<1,LN1>
         X=60;Y=17;MAXL=9;TYP=ICR.TYPE<LN1>
*T27919        SCALER=ICR.SCAL<1,LN1>;O.R ='R'
         SCALER=ICR.SCAL<LN1>;O.R ='R'
         IF PHS.NEW.SHEET<1,LN1,LN2> # '' THEN O.R="O"
*T27919        DEFAULT=OCONV(PHS.NEW.SHEET<1,LN1,LN2>, "MD":ICR.SCAL<1,LN1>)
         DEFAULT=OCONV(PHS.NEW.SHEET<1,LN1,LN2>, "MD":ICR.SCAL<LN1>)
         MINV=0;MAXV=999999999
         CALL EDIT.SUB
         BEGIN CASE
            CASE VALUE='END'
               SKIP=1; EOI=1; EOS=1
*CM                  IF FND = 0 THEN
               IF PHS.NEW.SHEET<1,LN1,LN2> = "" THEN
                  GOTO 1000
               END
               IF ERROR.FLAG = 0 THEN
                  IF OLDADJCODE = NEWADJCODE THEN
                     GOSUB DISPLAY.DATA
                  END ELSE
                     GOTO 1000
                  END
               END
            CASE VALUE # ''
*T27928              IF VALUE < 0 THEN ROND="-.5" ELSE ROND=".5"
*T27919              VALUE=INT(((VALUE/ICR.MT1<1,LN1>)*ICR.DV1<1,LN1>)*ICR.DV2<1,LN1>+ROND)
               VALUE=INT(((VALUE/ICR.MT1<LN1>)*ICR.DV1<LN1>)*ICR.DV2<LN1>+ROND)
*T29190 v
               IF VALUE > ISTK.ORG.QTY THEN
                  ERRMSG='ADJUSTED QTY. EXCEEDS ORIGINALY RECEIVED QTY.'
                  ERRMSG:=' USE RECEIPT ADJUSTMENTS.'
                  GOSUB 91000 ; SKIP=1
               END
*T29190 ^
               VALUE -=PHS.CUR.WGHT<1,LN1,LN2>
         END CASE
      CASE PHS.ADJ.TYPE<1,LN1,LN2>='P'
*T27919        X=23;Y=18;TYP=ICR.TYPE<1,LN1>;MAXL=9
         X=23;Y=18;TYP=ICR.TYPE<LN1>;MAXL=9
*T27919        O.R='R';SCALER=ICR.SCAL<1,LN1>
         O.R='R';SCALER=ICR.SCAL<LN1>
         IF DIFF.SHEET<1,LN1,LN2> # '' THEN O.R="O"
*CM            DEFAULT=OCONV(DIFF.SHEET<1,LN1,LN2>,"MD":ICR.SCAL<1,LN1>)
*T27919        DEFAULT=ABS(OCONV(DIFF.SHEET<1,LN1,LN2>,"MD":ICR.SCAL<1,LN1>))
         DEFAULT=ABS(OCONV(DIFF.SHEET<1,LN1,LN2>,"MD":ICR.SCAL<LN1>))
         MINV=1;MAXV=999999999
         CALL EDIT.SUB
         BEGIN CASE
            CASE VALUE='END'
               SKIP=1;EOI=1; EOS=1
*CM                  IF FND = 0 THEN
               IF PHS.NEW.SHEET<1,LN1,LN2> = "" THEN
                  GOTO 1000
               END
               IF ERROR.FLAG = 0 THEN
                  IF OLDADJCODE = NEWADJCODE THEN
                     GOSUB DISPLAY.DATA
                  END ELSE
                     GOTO 1000
                  END
               END
            CASE VALUE # ''
               IF PHS.CUR.SHEET<1,LN1,LN2>+VALUE>ISTK.ORG.STK.QTY THEN
                  ERRMSG='ADJUSTED QTY. EXCEEDS ORIGINALY RECEIVED QTY.'
                  ERRMSG:=' USE RECEIPT ADJUSTMENTS.'
                  GOSUB 91000 ; SKIP=1
               END
*T27919              VALUE = INT(((VALUE/ICR.MT1<1,LN1>)*ICR.DV1<1,LN1>)*ICR.DV2<1,LN1>+ROND)
               VALUE = INT(((VALUE/ICR.MT1<LN1>)*ICR.DV1<LN1>)*ICR.DV2<LN1>+ROND)
         END CASE
      CASE 1
         IF IWH.ON.HAND-IWH.RESV>1 THEN
            IF ISTK.RSVB.QTY>1 THEN
*T27919              X=23;Y=18;TYP=ICR.TYPE<1,LN1>;MAXL=9
               X=23;Y=18;TYP=ICR.TYPE<LN1>;MAXL=9
*T27919              O.R="R";SCALER=ICR.SCAL<1,LN1>
               O.R="R";SCALER=ICR.SCAL<LN1>
               IF DIFF.SHEET<1,LN1,LN2> # '' THEN O.R="O"
*T27919              DEFAULT=OCONV(ABS(DIFF.SHEET<1,LN1,LN2>),"MD":ICR.SCAL<1,LN1>)
               DEFAULT=OCONV(ABS(DIFF.SHEET<1,LN1,LN2>),"MD":ICR.SCAL<LN1>)
               MINV=1
               BEGIN CASE
                  CASE INV.PAP.TYPE = "SHEET"
                     MAXV=PHS.CUR.SHEET<1,LN1,LN2>
                  CASE 1
*T27928                    IF PHS.CUR.WGHT<1,LN1,LN2> > "0" THEN ROND=".5" ELSE ROND="-.5"
                     MAXV=CALC.STK.QTY(PHS.CUR.WGHT<1,LN1,LN2>,MAT INV.CNV.REC,'',LN1)
               END CASE
               CALL EDIT.SUB
               BEGIN CASE
                  CASE VALUE='END'
                     SKIP=1;EOI=1; EOS=1
*CM                        IF FND = 0 THEN
                     IF PHS.NEW.SHEET<1,LN1,LN2> = "" THEN
                        GOTO 1000
                     END
                     IF ERROR.FLAG = 0 THEN
                        IF OLDADJCODE = NEWADJCODE THEN
                           GOSUB DISPLAY.DATA
                        END ELSE
                           GOTO 1000
                        END
                     END
                  CASE VALUE # ''
*T27928                    ROND = ".5"
*T27919                    VALUE = INT(((VALUE/ICR.MT1<1,LN1>)*ICR.DV1<1,LN1>)*ICR.DV2<1,LN1>+ROND)
                     VALUE = INT(((VALUE/ICR.MT1<LN1>)*ICR.DV1<LN1>)*ICR.DV2<LN1>+ROND)
                     IF ABS(VALUE-IWH.ON.HAND-IWH.RESV)<=9 THEN VALUE=PHS.CUR.WGHT<1,LN1,LN2>
                     IF ABS(VALUE-PHS.CUR.WGHT<1,LN1,LN2>) <= 9 THEN VALUE = PHS.CUR.WGHT<1,LN1,LN2>
               END CASE
               IF NOT(SKIP) THEN
                  IF IWH.ON.HAND - IWH.RESV < VALUE THEN
                     TMP=CALC.STK.QTY(IWH.ON.HAND-IWH.RESV,MAT INV.CNV.REC,'',LN1)
*T27919                    TMP=OCONV(TMP,ICR.CNV<1,LN1>)
                     TMP=OCONV(TMP,ICR.CNV<LN1>)
                     ERRMSG='AVAILABLE QUANTITY IS ONLY ':TMP
                     GOSUB 91000
                  END ELSE
                     IF ISTK.RSVB.QTY<VALUE THEN
                        TMP=CALC.STK.QTY(ISTK.RSVB.QTY,MAT INV.CNV.REC,'',LN1)
*T27919                       TMP=OCONV(TMP,ICR.CNV<1,LN1>)
                        TMP=OCONV(TMP,ICR.CNV<LN1>)
                        ERRMSG='SERIAL AVAILABLE QTY IS ONLY ':TMP
                        GOSUB 91000
                     END ELSE
                        IF VALUE > PHS.CUR.WGHT<1,LN1,LN2> THEN
                           VALUE = PHS.CUR.WGHT<1,LN1,LN2>
                        END
                        VALUE=VALUE*(-1)
                     END
                  END
               END
            END ELSE
               ERRMSG='SERIAL AVAILABLE QUANTITY IS ZERO'
               GOSUB 91000
               EOI=1 ; SKIP=1
            END
         END ELSE
            ERRMSG=' AVAILABLE QUANTITY IS ZERO'
            GOSUB 91000
            EOI=1 ; SKIP=1
         END
   END CASE
   IF ERRMSG='' AND NOT(SKIP) THEN
      IF VALUE > 0 AND PHS.UN.COST<1,LN1>='' THEN
         SAVE.VALUE=VALUE
         IF VALUE='END' THEN 
            SKIP=1; EOI=1
         END ELSE
            VALUE=SAVE.VALUE
            EOI=1
         END
      END ELSE
         EOI=1
      END
   END
UNTIL (EOI) DO REPEAT
RETURN
*
*********************
CALC.ADJUSTMENTS: 
********************
*
DIFF.QTY<1,LN1>=DIFF.QTY<1,LN1> - DIFF.WGHT<1,LN1,LN2>
IF PHS.NEW.WGHT<1,LN1,LN2>='' THEN
   PHS.NEW.QTY<1,LN1>=PHS.NEW.QTY<1,LN1> - PHS.CUR.WGHT<1,LN1,LN2>
END ELSE
   PHS.NEW.QTY<1,LN1> = PHS.NEW.QTY<1,LN1>-PHS.NEW.WGHT<1,LN1,LN2>
END
DIFF.WGHT<1,LN1,LN2> = VALUE
IF DIFF.WGHT<1,LN1,LN2> < 0 THEN ROND="-.5" ELSE ROND=".5"
*T27919      DIFF.SHEET<1,LN1,LN2> = INT(((DIFF.WGHT<1,LN1,LN2>/ICR.DV1<1,LN1>)*ICR.MT1<1,LN1>)/ICR.DV2<1,LN1>+ROND)
DIFF.SHEET<1,LN1,LN2> = INT(((DIFF.WGHT<1,LN1,LN2>/ICR.DV1<LN1>)*ICR.MT1<LN1>)/ICR.DV2<LN1>+ROND)
PHS.NEW.WGHT<1,LN1,LN2>=PHS.CUR.WGHT<1,LN1,LN2>+VALUE
ROND='.5'
*T27919      PHS.NEW.SHEET<1,LN1,LN2>=INT(((PHS.NEW.WGHT<1,LN1,LN2>/ICR.DV1<1,LN1>)*ICR.MT1<1,LN1>)/ICR.DV2<1,LN1>+ROND)
PHS.NEW.SHEET<1,LN1,LN2>=INT(((PHS.NEW.WGHT<1,LN1,LN2>/ICR.DV1<LN1>)*ICR.MT1<LN1>)/ICR.DV2<LN1>+ROND)
IF PHS.NEW.WGHT<1,LN1,LN2> = 0 AND ABS(PHS.NEW.SHEET<1,LN1,LN2>) <= 9 THEN PHS.NEW.SHEET<1,LN1,LN2> = 0
*     DIFF.QTY<1,LN1>=DIFF.QTY<1,LN1>+DIFF.WGHT<1,LN1,LN2>
DIFF.QTY<1,LN1> = SUM(PHS.NEW.WGHT<1,LN1>) - SUM(PHS.CUR.WGHT<1,LN1>)
*     PHS.NEW.QTY<1,LN1>=PHS.NEW.QTY<1,LN1>+PHS.NEW.WGHT<1,LN1,LN2>
PHS.NEW.QTY<1,LN1> = PHS.CUR.QTY<1,LN1> + DIFF.QTY<1,LN1>
;*
P_X  = 23 ; P_Y = 18; P_OPT = ''
IF DIFF.WGHT<1,LN1,LN2> < 0 THEN ROND="-.5" ELSE ROND=".5"
*T27919      P_VALUE = OCONV(INT(((DIFF.WGHT<1,LN1,LN2>/ICR.DV1<1,LN1>)*ICR.MT1<1,LN1>)/ICR.DV2<1,LN1>+ROND), ICR.CNV<1,LN1>)
P_VALUE = OCONV(INT(((DIFF.WGHT<1,LN1,LN2>/ICR.DV1<LN1>)*ICR.MT1<LN1>)/ICR.DV2<LN1>+ROND), ICR.CNV<LN1>)
P_VALUE := STR(' ',9-LEN(P_VALUE)) ;*T27928
SCV.REC(27)<ESN> = P_VALUE
P_X = 60 ; P_Y =17 ; P_OPT =''
IF PHS.NEW.WGHT<1,LN1,LN2> < 0 THEN ROND="-.5" ELSE ROND=".5"
*T27919      P_VALUE = OCONV(INT(((PHS.NEW.WGHT<1,LN1,LN2>/ICR.DV1<1,LN1>)*ICR.MT1<1,LN1>)/ICR.DV2<1,LN1>+ROND), ICR.CNV<1,LN1>)
P_VALUE = OCONV(INT(((PHS.NEW.WGHT<1,LN1,LN2>/ICR.DV1<LN1>)*ICR.MT1<LN1>)/ICR.DV2<LN1>+ROND), ICR.CNV<LN1>)
P_VALUE := STR(' ',9-LEN(P_VALUE)) ;*T27928
CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
;*
IF U.M # "SHT" THEN
   BEGIN CASE
      CASE PHS.ADJ.TYPE<1,LN1,LN2>='R'
         WGHT=PHS.NEW.WGHT<1,LN1,LN2>
         SHTS=PHS.NEW.SHEET<1,LN1,LN2>
         DIAM=""
         GOSUB GET.DIAM
         IF DIAM # "" THEN
            PHS.NEW.DIAM<1,LN1,LN2>=DIAM
            VALUE=DIAM
         END ELSE
            VALUE=OCONV(PHS.NEW.DIAM<1,LN1>,"MD2")
         END
         VALUE=VALUE-PHS.CUR.DIAM<1,LN1,LN2>
      CASE 1
         WGHT=PHS.NEW.WGHT<1,LN1,LN2>
         SHTS=PHS.NEW.SHEET<1,LN1,LN2>
         DIAM=""
         GOSUB GET.DIAM
         IF DIAM # "" THEN
            PHS.NEW.DIAM<1,LN1,LN2>=DIAM
            VALUE=ABS(DIAM-PHS.CUR.DIAM<1,LN1,LN2>)
         END ELSE
            DEFAULT = OCONV(ABS(DIFF.DIAM<1,LN1,LN2>),"MD2")
            ECD.NUM = 28
            ECD.ACTION =4; CALL SCRN.EDIT
            VALUE = ECD.RET.VALUE
            IF VALUE = 'END' THEN SKIP = 1
         END
         IF PHS.ADJ.TYPE<1,LN1,LN2>='M' THEN VALUE=VALUE*(-1)
   END CASE
   IF NOT(SKIP) THEN
      DIFF.DIAM<1,LN1,LN2> = VALUE
      P_X=59;P_Y = 18;P_OPT=""
      PHS.NEW.DIAM<1,LN1,LN2> = PHS.CUR.DIAM<1,LN1,LN2> + VALUE
      P_VALUE = OCONV(PHS.NEW.DIAM<1,LN1,LN2>,"MD2") "R#5"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
   END
END
DEFDIFF=DIFF.SHEET<1,LN1,LN2>'L#9';*T27928
RETURN
********************
SET.CONV.VALUES: 
********************
*
BEGIN CASE
   CASE INV.UNIT<1,2>='SHT' AND INV.UNIT<1,3>='LBS'
*T27919     ICR.CNV<1,LN1>="MD0";ICR.SCAL<1,LN1>=0;ICR.TYPE<1,LN1>=3
*T27919     ICR.DV1<1,LN1>=INV.M.WT;ICR.MT1<1,LN1>=1;ICR.DV2<1,LN1>=1
      ICR.CNV<LN1>="MD0";ICR.SCAL<LN1>=0;ICR.TYPE<LN1>=3
      ICR.DV1<LN1>=INV.M.WT;ICR.MT1<LN1>=1;ICR.DV2<LN1>=1
   CASE INV.UNIT<1,2>='PC' AND INV.UNIT<1,3>='MSI'
*T27919     ICR.CNV<1,LN1>="MD0";ICR.SCAL<1,LN1>=0;ICR.TYPE<1,LN1>=3
*T27919     ICR.DV1<1,LN1>=INV.PAP.WIDTH/100;ICR.MT1<1,LN1>=10;ICR.DV2<1,LN1>=1
      ICR.CNV<LN1>="MD0";ICR.SCAL<LN1>=0;ICR.TYPE<LN1>=3
      ICR.DV1<LN1>=INV.PAP.WIDTH/100;ICR.MT1<LN1>=10;ICR.DV2<LN1>=1
   CASE INV.UNIT<1,2>='FT' AND INV.UNIT<1,3>='MSI'
*T27919     ICR.CNV<1,LN1>="MD0";ICR.SCAL<1,LN1>=0;ICR.TYPE<1,LN1>=3
*T27919     ICR.DV1<1,LN1>=INV.PAP.WIDTH/100;ICR.MT1<1,LN1>=100;ICR.DV2<1,LN1>=12
      ICR.CNV<LN1>="MD0";ICR.SCAL<LN1>=0;ICR.TYPE<LN1>=3
      ICR.DV1<LN1>=INV.PAP.WIDTH/100;ICR.MT1<LN1>=100;ICR.DV2<LN1>=12
   CASE 1
*T27919     ICR.CNV<1,LN1>="MD2";ICR.SCAL<1,LN1>=2;ICR.TYPE<1,LN1>=4
*T27919     ICR.DV1<1,LN1>=10;ICR.MT1<1,LN1>=1;ICR.DV2<1,LN1>=1
      ICR.CNV<LN1>="MD2";ICR.SCAL<LN1>=2;ICR.TYPE<LN1>=4
      ICR.DV1<LN1>=10;ICR.MT1<LN1>=1;ICR.DV2<LN1>=1
END CASE
RETURN
*
*
* CALL SYSCOM FOR ERRMSG
91000 ERR.TYPE=1;CALL SYSCOM(MAT SYSCOM.REC);RETURN
92000 ERR.TYPE=2;CALL SYSCOM(MAT SYSCOM.REC);RETURN
93000 ERR.TYPE=3;CALL SYSCOM(MAT SYSCOM.REC)
99999 
ECD.ACTION=99 ; CALL SCRN.EDIT
END
