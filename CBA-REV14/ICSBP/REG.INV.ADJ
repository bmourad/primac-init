*COPY>CPYLIB>COM1
*********************************************************************
* REVISION    - [08.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM      - PRIMAC
* SOURCE      - ICSBP
* PROGRAM     - REG.INV.ADJ
* BY          - JIHAD YAMOUT ,C.B.A
* DATE        - 11/17/83
* DESCRIPTION - THIS UPDATE PHYSICAL.INV FILE TO RUN A PHYSICAL
*           INVENTORY UPDATE TO THE QUANTY ON HAND ON INVENTORY FILE.
*T23278 markt 10/20/1998 * Add check for divisional security
*T24915 alex 03/08/2000 * In GUI, the variable 'VALUE' is being
*                         reassigned to null before it is later assigned
*                         to PHS.INV.PROD.
*T25740 edvard 08/20/2001 * REV12
*T25978 adelgado 02/18/2002 * Add the use of prompts (S,SR,SB,ST).
*T26126 adelgado 02/26/2002 * Implement the LOCKED clause for READU.
*T26685 cmykleb 08/20/2002 * Division Security
*T27126 epitka 12/05/2002 * DISPLAY STOCKING INSTEAD OF COSTING UNIT OF
*                           MEASURE
*T27990 lross 03/12/2004 * Include OPER.ID (var used but not referenced).
*T28324 lross 11/08/2004 * Qty test error.
*********************************************************************
*ENDDOC
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>ICS.CPYLIB>PHYSICAL.INV
*COPY>ICS.CPYLIB>INV.ADJ.CODES
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>ICS.CPYLIB>CATEGORY
*COPY>JCS.CPYLIB>JOB
*COPY>JCS.CPYLIB>JOB.STATS
*COPY>CPYLIB>GEN.XREF
*COPY>PMC.CPYLIB>COMPANY
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>CPYLIB>SYSCOM
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>ICS.CPYLIB>INV.CNV
   ;* define functions
   DEFFUN CALC.STK.QTY (COST.QTY,MAT INV.CNV.REC,ROND,LN)
   DEFFUN CALC.COST.QTY (STK.QTY,MAT INV.CNV.REC,ROND,LN)
*
   SYS.TYPE=1
   CALL SYSCOM(MAT SYSCOM.REC)
   OPEN '','INVENTORY' TO INVENTORY ELSE
      ERRMSG='INVENTORY FILE IS MISSING' ; GOTO 93000
   END
   OPEN '','INV.WHSE.LOC' TO INV.WHSE.LOC ELSE
      ERRMSG='INV.WHSE.LOC FILE IS MISSING' ; GOTO 93000
   END
   OPEN '','INV.WHSE' TO INV.WHSE ELSE
      ERRMSG='INV.WHSE FILE IS MISSING' ; GOTO 93000
   END
   OPEN '','PHYSICAL.INV' TO PHYSICAL.INV ELSE
      ERRMSG='PHYSICAL.INV FILE IS MISSING' ; GOTO 93000
   END
   OPEN '','CATEGORY' TO CATEGORY ELSE
      ERRMSG='CATEGORY FILE IS MISSING' ; GOTO 93000
   END
   OPEN '','JOB' TO JOB ELSE
      ERRMSG='JOB FILE IS MISSING' ; GOTO 93000
   END
   OPEN '','JOB.STATS' TO JOB.STATS ELSE
      ERRMSG='JOB.STATS FILE IS MISSING' ; GOTO 93000
   END
   OPEN '','WAREHOUSE' TO WAREHOUSE ELSE
      ERRMSG='WAREHOUSE FILE IS MISSING' ; GOTO 93000
   END
   OPEN '','PREFIX' TO PREFIX ELSE
      ERRMSG='PREFIX FILE IS MISSING' ; GOTO 93000
   END
   OPEN '','COMPANY' TO COMPANY ELSE
      ERRMSG='COMPANY FILE IS MISSING' ; GOTO 93000
   END
   OPEN '','CONTROL' TO CONTROL ELSE
      ERRMSG='CONTROL FILE IS MISSING' ; GOTO 93000
   END
   OPEN '','ICS.SCREENS' TO M.SCREENS ELSE
      ERRMSG='M.SCREENS FILE IS MISSING' ; GOTO 93000
   END
   OPEN '','INVENTORY.XREF' TO INVENTORY.XREF ELSE
      ERRMSG='INVENTORY.XREF FILE IS MISSING' ; GOTO 93000
   END
   OPEN '','INV.ADJ.CODES' TO INV.ADJ.CODES ELSE
      ERRMSG='INV.ADJ.CODES FILE IS MISSING' ; GOTO 93000
   END
   OPEN '','SECURITY' TO SECURITY ELSE
      ERRMSG='SECURITY FILE IS MISSING'; GOTO 93000
   END
   MAT COMP.REC=''
   CONO=''
   CALL GET.CONO(CONO,MAT COMP.REC)
   IF CONO='END' THEN GOTO 99999
   OPER.ID=@LOGNAME ;*T27990
   OPTION=''
   BEGIN.PAGE.1=7
   PAGE.SIZE.1=6
   LINE.SPACE=2
   MAT EDIT.COM.DRIVER=''
   ECD.SCRN.CNT=1
   ECD.SCRN.NAME<1>='REG.INV.ADJ'
   ECD.ACTION=1;CALL SCRN.EDIT
   FILL='#'
   ECD.SCRN.NO=1
   MAT GEN.XREF.REC=''
   GXR.CO=CONO
   GXR.TOP.LINE='INVENTORY XREF SEARCH'
   GXR.HEADING<1,1>='PRODUCT NUMBER'
   GXR.HEADING<1,2>='FULL DESCRIPTION'
   GXR.ATT<1,1>=0
   GXR.ATT<1,2>=2
   GXR.LEN<1,1>=15
   GXR.LEN<1,2>=45
   GXR.LOC=1
   GXR.FILE=INVENTORY
   GXR.XREF=INVENTORY.XREF
   ;*
   ;* MAIN LOOP
   ;*
   DONE=0
   LOOP
      ERR=0
      MAT PHS.INV.REC=''; MAT INV.CNV.REC=''
      MAT SCV.REC = ""
      ECD.ACTION=6;CALL SCRN.EDIT
      LINES.1=0
      OLD.START.LINE.1=0
      FOR CC=1 TO 3 UNTIL ERR=1
         ON CC GOSUB ENT.PROD.LINE,ENT.WHSE,ENT.LOC
      NEXT CC
      ;*
      IF NOT(ERR) THEN
         PHS.INV.KEY=CONO:'REG':'!':PROD.LINE:'!':WHSE.CODE:'!':LOC.CODE
      * T26126 v
         MATREADU PHS.INV.REC FROM PHYSICAL.INV , PHS.INV.KEY LOCKED
            ERRMSG = 'PHYSICAL INVENTORY record is locked by user - ':GETUSERNAME(STATUS())
            GOSUB 91000 ; CONTINUE 
         END ELSE
      * T26126 ^
            MAT PHS.INV.REC=''
         END
         DIFF.QTY=''
         IF PHS.INV.PROD='' THEN
            LN1=LINES.1 + 1
            OLD.LINES.1=LINES.1
            GOSUB PRODUCT.LINES.ENTRY
            LN1=LINES.1
         END ELSE
            LINES.1=DCOUNT(PHS.INV.PROD,VM)
            FOR D=1 TO LINES.1
               MATREAD INV.REC FROM INVENTORY,CONO:PHS.INV.PROD<1,D> ELSE
                  MAT INV.REC=""                                          
               END                                                       
               LN1=D;GOSUB SET.CONV.VALUES                               
               DIFF.QTY<1,D>=PHS.NEW.QTY<1,D> - PHS.CUR.QTY<1,D>
            NEXT D
            LN1=1
         END
         GOSUB 10000
         GOSUB OPTION.PROMPT
      END
   UNTIL (DONE) DO REPEAT
*
**************************************************************************
*** S U B R O U T I N E S ************************************************
**************************************************************************
*
********************
PRODUCT.LINES.ENTRY: 
********************
*
   EOL=0
   LOOP
      GOSUB 10000
      SLN=BEGIN.PAGE.1 + LINE.SPACE * MOD(LN1 - 1,PAGE.SIZE.1)
      ERR=0; BAIL.OUT=0
      FOR CC=1 TO 4 UNTIL BAIL.OUT
         ON CC GOSUB ENT.PROD,ENT.ADJ.CODE,DISP.CURR.QTY,ENT.ADJ.QTY
      NEXT CC
      IF NOT(ERR) THEN
         PHS.NEW.QTY<1,LN1>=PHS.CUR.QTY<1,LN1> + VALUE  
         PHS.OPER.ID<1,LN1>=OPER.ID
         PHS.DATE.ENT<1,LN1>=DATE()
         P_X  = 36 ; P_Y = SLN
         TMP=CALC.STK.QTY(PHS.NEW.QTY<1,LN1>,MAT INV.CNV.REC,'',LN1) 
         TMP=OCONV(TMP,ICR.CNV<LN1>)                  
         P_VALUE=TMP"R#10"
         P_OPT = ""
         P_X  := AM:47 ; P_Y := AM:SLN
         TMP=CALC.STK.QTY(DIFF.QTY<1,LN1>,MAT INV.CNV.REC,'',LN1)
         TMP=OCONV(TMP,ICR.CNV<LN1>)                               
         P_VALUE :=AM:TMP"R#10"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         LINES.1=DCOUNT(PHS.INV.PROD,VM)
         LN1=LINES.1 + 1     
         OLD.LINES.1=LINES.1 
      END
      IF OPTION='C' THEN EOL=1
   UNTIL (EOL) DO REPEAT
   RETURN
*
*************
ENT.UN.PRICE: 
*************
*
   X=58; Y=SLN; MAXL=10; TYP=4; SCALER=4; O.R='R'
   IF PHS.UN.COST<1,LN1> # '' THEN
      O.R='O'; DEFAULT=OCONV(PHS.UN.COST<1,LN1>,"MD4")
   END
   CALL EDIT.SUB
   IF VALUE='END' THEN
      ERR=1
   END ELSE
      PHS.UN.COST<1,LN1>=VALUE
   END
   RETURN
*
**************
OPTION.PROMPT: 
**************
*
   MORE=1
   LOOP
      ECD.NUM = 19
      SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""
      ECD.ACTION = 4
      CALL SCRN.EDIT
      OPTION = ECD.RET.VALUE
      BEGIN CASE
         CASE OPTION='E' OR OPTION='END'
            MORE=0
            RELEASE
         CASE OPTION='A'
            LOOP
               LN1=LINES.1 + 1
               OLD.LINES.1=LINES.1
               GOSUB PRODUCT.LINES.ENTRY
            WHILE LINES.1 > OLD.LINES.1 DO
            REPEAT
            LN1=LINES.1
         CASE OPTION='C'
            GOSUB 60000
            IF LNO THEN
               LN1=LNO
               GOSUB PRODUCT.LINES.ENTRY
            END
         CASE OPTION='D'
            GOSUB 60000
            IF LNO THEN
               LN1=LNO
               PHS.INV.PROD=DELETE(PHS.INV.PROD,1,LN1,0)
               PHS.INV.DESC=DELETE(PHS.INV.DESC,1,LN1,0)
               PHS.OPER.ID=DELETE(PHS.OPER.ID,1,LN1,0)
               PHS.DATE.ENT=DELETE(PHS.DATE.ENT,1,LN1,0)
               PHS.UN.COST=DELETE(PHS.UN.COST,1,LN1,0)
               PHS.NEW.QTY=DELETE(PHS.NEW.QTY,1,LN1,0)
               PHS.CUR.QTY=DELETE(PHS.CUR.QTY,1,LN1,0)
               PHS.ADJ.CODE=DELETE(PHS.ADJ.CODE,1,LN1,0)
               PHS.ADJ.TYPE=DELETE(PHS.ADJ.TYPE,1,LN1,0)
               PHS.NO.POST=DELETE(PHS.NO.POST,1,LN1,0)
               DIFF.QTY=DELETE(DIFF.QTY,1,LN1,0)
               LINES.1=COUNT(PHS.INV.PROD,VM) + (PHS.INV.PROD # '')
               IF LN1 > 1 AND LN1 > LINES.1 THEN LN1=LN1 - 1
               IF LN1 < 1 THEN LN1=1
               OLD.START.LINE.1=0
            END
            GOSUB 10000
         CASE OPTION='S'
            LN1=LN1 + PAGE.SIZE.1
            IF LN1 > LINES.1 THEN LN1=1
            GOSUB 10000
      * T25978 v
         CASE OPTION = 'SR'
            LN1 -= PAGE.SIZE.1
            IF LN1 < 1 THEN LN1 = 1
            GOSUB 10000
         CASE OPTION = 'ST'
            LN1 = 1
            GOSUB 10000
         CASE OPTION = 'SB'
            LN1 = LINES.1
            GOSUB 10000
      * T25978 ^
         CASE OPTION='F'
            MATWRITE PHS.INV.REC ON PHYSICAL.INV , CONO:'REG':'!':PROD.LINE:'!':WHSE.CODE:'!':LOC.CODE
            MORE=0
      END CASE
   WHILE MORE=1 DO REPEAT
   RETURN
*
********
10000 
*********
*
   START.LINE.1=1 + INT((LN1-1)/PAGE.SIZE.1) * PAGE.SIZE.1
   IF START.LINE.1#OLD.START.LINE.1 THEN
      OLD.START.LINE.1=START.LINE.1
      LAST.LINE.1=START.LINE.1 + PAGE.SIZE.1 - 1
      CNT=1
      FOR N=START.LINE.1 TO LAST.LINE.1 UNTIL N > LINES.1
         SLN=BEGIN.PAGE.1 + LINE.SPACE * MOD(N-1,PAGE.SIZE.1)
         P_X  = 0 ; P_Y = SLN
         P_VALUE = N "R#3" ; P_OPT = ""
         P_X  := AM:4 ; P_Y := AM:SLN 
         P_VALUE := AM:PHS.INV.PROD<1,N> "L#15"
         P_X  := AM:20 ; P_Y := AM:SLN 
         P_VALUE := AM:PHS.ADJ.CODE<1,N> "L#4"
         P_X  := AM:25 ; P_Y := AM:SLN
         TMP=CALC.STK.QTY(PHS.CUR.QTY<1,N>,MAT INV.CNV.REC,'',N)
         TMP=OCONV(TMP,ICR.CNV<N>)
         P_VALUE :=AM:TMP"R#10"
         P_X  := AM:36 ; P_Y := AM:SLN
         TMP=CALC.STK.QTY(PHS.NEW.QTY<1,N>,MAT INV.CNV.REC,'',N)
         TMP=OCONV(TMP,ICR.CNV<N>)
         P_VALUE :=AM:TMP"R#10"
         P_X  := AM:47 ; P_Y := AM:SLN 
         TMP=CALC.STK.QTY(DIFF.QTY<1,N>,MAT INV.CNV.REC,'',N)
         TMP=OCONV(TMP,ICR.CNV<N>)
         P_VALUE :=AM:TMP"R#10"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         IF PHS.UN.COST<1,N> # '' THEN
            P_X  = 58 ; P_Y = SLN
            P_VALUE = OCONV(PHS.UN.COST<1,N>,"MD4") "R#10" ; P_OPT = ""
            CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         END
         P_X  = 4 ; P_Y = SLN+1
         P_VALUE = PHS.INV.DESC<1,N> "L#30" ; P_OPT = ""
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         CNT=CNT + 1
      NEXT N
      FOR M=CNT TO PAGE.SIZE.1
         SLN=BEGIN.PAGE.1 + LINE.SPACE * MOD(M-1,PAGE.SIZE.1)
         P_X  = 0 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
         P_X  = 0 ; P_Y = SLN+1 ; P_VALUE = "" ; P_OPT = "CL"
         CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      NEXT M
   END
   RETURN
*
*********
60000 *
*********
*
   GOSUB 10000
   ECD.NUM = 20
   SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""
   ECD.MINV=OLD.START.LINE.1
   IF LAST.LINE.1 < LINES.1 THEN
      ECD.MAXV=LAST.LINE.1
   END ELSE
      ECD.MAXV=LINES.1
   END
   ECD.ACTION = 4
   CALL SCRN.EDIT
   LNO=ECD.RET.VALUE
   IF LNO='' OR LNO='END' THEN LNO=0
   RETURN
*
**************
ENT.PROD.LINE: 
**************
*
   EOI=0; ERR=0
   LOOP
      ERR=0
      ECD.NUM=5; ECD.VALDAT.CODE=2
      ECD.VALDAT.FILE=CATEGORY; ECD.PREFIX.ID=CONO
      ECD.ACTION=4;CALL SCRN.EDIT
      IF ECD.RET.VALUE#'END' THEN
         FOR SAVE=1 TO CATG.REC.SIZE
            CATG.REC(SAVE)=ECD.VALDAT.ITEM<SAVE>
         NEXT SAVE
         IF CO.OPS = 'Y' THEN
            IF CATG.MAJ.LINE='FNGD' THEN
               ERRMSG="YOU MUST USE THE FINISHED GOODS ADJUSTMENT FUNCTION"
               GOSUB 91000;ERR=1
            END
         END
         IF NOT(ERR) THEN
            IF CATG.TRK.LVL='S' THEN 
               ERRMSG='THIS IS A SERIALY TRACKED PRODUCT LINE'
               GOSUB 91000;ERR=1
            END
         END
         IF NOT(ERR) THEN
            PROD.LINE=ECD.RET.VALUE
            EOI=1
         END
      END ELSE
         GOTO 99999
      END
   UNTIL (EOI) DO REPEAT
   RETURN
*
**************
ENT.WHSE: 
**************
*
   EOI=1
   LOOP
      ECD.NUM=6; ECD.VALDAT.CODE=2
      ECD.VALDAT.FILE=WAREHOUSE; ECD.PREFIX.ID=CONO
      ECD.ACTION=4;CALL SCRN.EDIT
      IF ECD.RET.VALUE#'END' THEN
         FOR SAVE=1 TO WHSE.REC.SIZE
            WHSE.REC(SAVE)=ECD.VALDAT.ITEM<SAVE>
         NEXT SAVE
         DIV.CODE = WHS.DIV; USER.ID = UPCASE(@LOGNAME); ERRMSG = ''
         CALL CK.DIV.SEC.SUB(CONO,DIV.CODE,USER.ID,ERRMSG)
         IF ERRMSG # '' THEN
            GOSUB 91000
*T26685 v
            ERRMSG = ""
            GOTO ENT.WHSE
*T26685 ^
         END ELSE
            WHSE.CODE=ECD.RET.VALUE
            EOI=1
         END
      END ELSE
         EOI=1;ERR=1
      END
   UNTIL (EOI) DO REPEAT
   RETURN
*
************
ENT.LOC: 
************
*
   EOI=0 ; ERR=0
   LOOP
      ECD.NUM=7
      PTR=1
      ECD.HMSG<1,1,PTR>='LOCATION - ': WHS.LOC<1,1>
      LOC.CNT=DCOUNT(WHS.LOC,VM)
      FOR L=2 TO LOC.CNT
         IF LEN(ECD.HMSG<1,1,PTR>) > 70 THEN
            PTR=PTR + 1
            ECD.HMSG<1,1,PTR>='LOCATION - ': WHS.LOC<1,L>
         END ELSE
            ECD.HMSG<1,1,PTR>=ECD.HMSG<1,1,PTR> : ' ,' : WHS.LOC<1,L>
         END
      NEXT L
      ECD.ACTION=4;CALL SCRN.EDIT
      IF ECD.RET.VALUE#'END' THEN
         LOC.CODE=ECD.RET.VALUE
         EOI=1
      END ELSE
         EOI=1 ; ERR=1
      END
   UNTIL (EOI) DO REPEAT
   RETURN
*
***********
ENT.PROD: 
***********
*
1001 *
   EOI=0 ; ERR=0
   LOOP
      P_X  = 0 ; P_Y = SLN ; P_VALUE = LN1 "R#3" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      X=4 ; Y=SLN ; TYP=1 ; MAXL=15 ; O.R='O' ; VALDAT='' ; HMSG=''
      DEFAULT=PHS.INV.PROD<1,LN1>
      CALL EDIT.SUB
      BEGIN CASE
         CASE VALUE='END'
            PHS.INV.PROD=DELETE(PHS.INV.PROD,1,LN1,0)
            PHS.INV.DESC=DELETE(PHS.INV.DESC,1,LN1,0)
            PHS.OPER.ID=DELETE(PHS.OPER.ID,1,LN1,0)
            PHS.DATE.ENT=DELETE(PHS.DATE.ENT,1,LN1,0)
            PHS.UN.COST=DELETE(PHS.UN.COST,1,LN1,0)
            PHS.NEW.QTY=DELETE(PHS.NEW.QTY,1,LN1,0)
            PHS.CUR.QTY=DELETE(PHS.CUR.QTY,1,LN1,0)
            PHS.ADJ.CODE=DELETE(PHS.ADJ.CODE,1,LN1,0)
            PHS.ADJ.TYPE=DELETE(PHS.ADJ.TYPE,1,LN1,0)
            PHS.NO.POST=DELETE(PHS.NO.POST,1,LN1,0)
            DIFF.QTY=DELETE(DIFF.QTY,1,LN1,0)
            P_X  = 0 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
            CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
            EOI=1;ERR=1;EOL=1
         CASE VALUE=''
            X=4 ; Y=SLN+1 ; O.R='O' ; TYP=1 ; MAXL=40 ; VALDAT='' ; HMSG=''
            CALL EDIT.SUB
            IF VALUE='' OR VALUE='END' THEN
               EOI=1
            END ELSE
               GXR.ID=''
               GXR.SRCH.ID=VALUE
               CALL GEN.XREF(MAT GEN.XREF.REC,PREFIX)
               ECD.ACTION=2;CALL SCRN.EDIT
               ECD.ACTION=3;CALL SCRN.EDIT
               OLD.START.LINE.1=0
               GOSUB 10000
               IF GXR.ID='' THEN
                  EOI=1; ERR=1
               END ELSE
                  VALUE=GXR.ID
                  SLN=BEGIN.PAGE.1 + LINE.SPACE * MOD(LN1-1,PAGE.SIZE.1)
                  P_X  = 0 ; P_Y = SLN ; P_VALUE = LN1 "R#3" ; P_OPT = "CL"
                  P_X  := AM:4 ; P_Y := AM:SLN ; P_VALUE := AM:VALUE "L#15"
                  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
               END
            END
         CASE 1
            NULL
      END CASE
      IF PHS.INV.PROD<1,LN1> # VALUE THEN
         LOCATE VALUE IN PHS.INV.PROD<1>,1 SETTING FND ELSE FND=0
         IF FND THEN
            ERRMSG='INVENTORY (':VALUE:') ALREADY ALLOCATED'
            GOSUB 91000; ERR=1
         END
      END
      IF NOT(ERR) THEN
         PROD.NUM=VALUE
         MATREAD INV.REC FROM INVENTORY, CONO:VALUE THEN
            IF PROD.LINE # INV.LINE THEN
               ERRMSG='THIS PRODUCT DOES NOT BELONG TO PRODUCT LINE ':PROD.LINE
               GOSUB 91000
            END ELSE
               MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE THEN
                  IF CATG.TRK.LVL='S' THEN
                     ERRMSG='THIS IS A SERIALY TRACKED PRODUCT.'
                     GOSUB 91000
                  END ELSE
                     LOCATE WHSE.CODE IN INV.WHSE.CODE<1>,1 SETTING WFND THEN
                        INV.WHSE.KEY=CONO:PROD.NUM:'!':WHSE.CODE
                        MATREAD IWH.REC FROM INV.WHSE , INV.WHSE.KEY THEN
                           LOCATE LOC.CODE IN IWH.LOC<1>,1 SETTING LFND ELSE
                              LFND=DCOUNT(IWH.LOC,VM) + 1
                              IWH.LOC<1,LFND>=LOC.CODE
                              ERRMSG='THIS PRODUCT IS NOT SETUP FOR LOCATION - ':LOC.CODE
                              GOSUB 91000
                           END
                           MATREAD IWLO.REC FROM INV.WHSE.LOC , INV.WHSE.KEY:'!':IWH.LOC<1,LFND> ELSE
                              MAT IWLO.REC = ""
                              IWLO.LOC.ON.HAND = 0
                           END
                           PHS.INV.PROD<1,LN1>=PROD.NUM       ;*C35846
                           PHS.INV.DESC<1,LN1>=INV.DESC
                           P_X  = 4 ; P_Y = SLN+1 ; P_VALUE = INV.DESC "L#30" ; P_OPT = ""
                           CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
                           PHS.CUR.QTY<1,LN1>=IWLO.LOC.ON.HAND
                           EOI=1
                        END ELSE
                           ERRMSG='INV.WHSE RECORD NOT ON FILE'
                           GOSUB 91000
                        END
                     END ELSE
                        ERRMSG='PRODUCT IS NOT SETUP FOR WAREHOUSE # ':WHSE.CODE
                        GOSUB 91000
                     END
                  END
               END ELSE
                  ERRMSG='PRODUCT LINE RECORD ':INV.LINE:' IS MISSING'
                  GOSUB 91000
               END
            END
            GOSUB SET.CONV.VALUES
         END ELSE
            ERRMSG='INVENTORY (':VALUE:') IS NOT ON FILE.'
            GOSUB 91000
            GOTO ENT.PROD ; * C40675
         END
      END ELSE
         BAIL.OUT=1
      END
   UNTIL (EOI) DO REPEAT
   RETURN
*
*************
ENT.ADJ.CODE: 
*************
*
   EOI=0; ERR=0
   LOOP
      X=20; Y=SLN; TYP=1; MAXL=4
      BEGIN CASE
         CASE PHS.ADJ.CODE<1,LN1> # ''
            O.R='O'; DEFAULT=PHS.ADJ.CODE<1,LN1>
         CASE LN1 > 1
            O.R='O'; DEFAULT=PHS.ADJ.CODE<1,LN1-1>
         CASE 1
            O.R='R'
      END CASE
      CALL EDIT.SUB
      IF VALUE='END' OR VALUE='' THEN 
         EOI=1;ERR=1
      END ELSE
         MATREAD IADJ.REC FROM INV.ADJ.CODES, CONO:VALUE THEN
            EOI=1
            PHS.ADJ.CODE<1,LN1>=VALUE
            PHS.ADJ.TYPE<1,LN1>= IADJ.TYPE
         END ELSE
            ERRMSG='INVALID ADJUSTMENT REASON CODE'
            GOSUB 91000
            EOI=1; ERR=1
         END
      END
      IF ERR THEN BAIL.OUT=1
   UNTIL (EOI) DO REPEAT
   RETURN
*
************
ENT.ADJ.QTY: 
************
*
   EOI=0 ; ERR=0
   LOOP
      BEGIN CASE
         CASE PHS.ADJ.TYPE<1,LN1>='R'
            X=36 ; Y=SLN ; MAXL=10
            SCALER=ICR.SCAL<LN1>; TYP=ICR.TYPE<LN1>
            IF PHS.NEW.QTY<1,LN1> # '' THEN
               TMP=CALC.STK.QTY(PHS.NEW.QTY<1,LN1>,MAT INV.CNV.REC,'',LN1)
               TMP=INT(TMP+.5)
               TMP=OCONV(TMP,ICR.CNV<LN1>)
*        O.R='O'; DEFAULT=OCONV(INT(PHS.NEW.QTY<1,LN1>/10),"MD2")
               O.R='O' ; DEFAULT=TMP
            END
            MINV=0; MAXV=999999999
            CALL EDIT.SUB
            IF VALUE#'END' THEN
               TMP=CALC.COST.QTY(VALUE,MAT INV.CNV.REC,'',LN1)
               TMP=INT(TMP+.5)
               VALUE=TMP
*        VALUE=VALUE - INT(PHS.CUR.QTY<1,LN1> / 10)
               VALUE -=PHS.CUR.QTY<1,LN1>
            END ELSE
               EOI=1; ERR=1
            END
         CASE PHS.ADJ.TYPE<1,LN1>='P'
            X=47; Y=SLN; MAXL=10
            SCALER=ICR.SCAL<LN1>; TYP=ICR.TYPE<LN1>
            IF DIFF.QTY<1,LN1> # '' THEN
               TMP=CALC.STK.QTY(DIFF.QTY<1,LN1>,MAT INV.CNV.REC,'',LN1)
               TMP=INT(TMP+.5)                                              
               TMP=OCONV(TMP,ICR.CNV<LN1>)                                
*        O.R='O'; DEFAULT=OCONV(INT(DIFF.QTY<1,LN1>/10),"MD2")
               O.R='O';DEFAULT=TMP
            END
            MINV=0; MAXV=999999999
            CALL EDIT.SUB
            IF VALUE='END' THEN
               EOI=1 ; ERR=1
            END ELSE
               TMP=CALC.COST.QTY(VALUE,MAT INV.CNV.REC,'',LN1)
               TMP=INT(TMP+.5)                                  
               VALUE=TMP                                        
            END
         CASE 1
            AVAIL=IWH.ON.HAND-IWH.RESV
            AVAIL=CALC.STK.QTY(AVAIL,MAT INV.CNV.REC,'',LN1)
            AVAIL=INT(AVAIL+.5)
            AVAIL=OCONV(AVAIL,ICR.CNV<LN1>)
*T28324 v   IF AVAIL>1 THEN
            IF AVAIL>0 THEN
*      IF INT((IWH.ON.HAND - IWH.RESV) / 10) > 1 THEN
               X=47; Y=SLN; MAXL=10
               SCALER=ICR.SCAL<LN1>;TYP=ICR.TYPE<LN1>
               IF DIFF.QTY<1,LN1> # '' THEN
                  TMP=ABS(DIFF.QTY<1,LN1>)
                  TMP=CALC.STK.QTY(TMP,MAT INV.CNV.REC,'',LN1)
                  TMP=INT(TMP+.5)                                              
                  TMP=OCONV(TMP,ICR.CNV<LN1>)
*          O.R='O'; DEFAULT=OCONV(ABS(INT(DIFF.QTY<1,LN1>/10)),"MD2")
                  O.R='O' ; DEFAULT=TMP
               END
               MINV=0
*        MAXV=INT(PHS.CUR.QTY<1,LN1> / 10)
               TMP=PHS.CUR.QTY<1,LN1>
               TMP=CALC.STK.QTY(TMP,MAT INV.CNV.REC,'',LN1) 
               TMP=INT(TMP+.5)                                
               MAXV=TMP
               CALL EDIT.SUB
               IF VALUE#'END' THEN
*          IF INT((IWH.ON.HAND - IWH.RESV) / 10) < VALUE THEN
                  IF ICONV(AVAIL,ICR.CNV<LN1>)<VALUE THEN
                     ERRMSG='AVAILABLE QTY IS ONLY ('
                     ERRMSG=AVAIL:')'
*            ERRMSG:=OCONV(INT((IWH.ON.HAND-IWH.RESV)/10),"MD2"):')'
                     GOSUB 91000
                  END ELSE
                     TMP=CALC.COST.QTY(VALUE,MAT INV.CNV.REC,'',LN1)
                     TMP=INT(TMP+.5)                                  
                     VALUE=TMP                                        
                  END
                  EOI=1
                  VALUE=VALUE * (-1)
               END ELSE
                  EOI=1;ERR=1
               END
            END ELSE
               ERRMSG = "AVAILABLE QUANTITY IS ZERO"
               GOSUB 91000
               EOI=1;ERR=1
            END
      END CASE
      IF NOT(ERR) THEN
         IF VALUE > 0 THEN
            SAVE.VALUE=VALUE
            GOSUB ENT.UN.PRICE
            IF VALUE#'END' THEN
               VALUE=SAVE.VALUE
            END ELSE
               EOI=1;ERR=1
            END
         END ELSE
            PHS.UN.COST<1,LN1>=''
            EOI=1
         END
         IF NOT(ERR) THEN
*      DIFF.QTY<1,LN1>=VALUE * 10
            DIFF.QTY<1,LN1>=VALUE
            EOI=1
         END
      END
      IF (ERR) THEN BAIL.OUT=1
   UNTIL (EOI) DO REPEAT
   RETURN
*
**************
DISP.CURR.QTY: 
**************
*
   P_X  = 25 ; P_Y = SLN
   TMP=CALC.STK.QTY(PHS.CUR.QTY<1,LN1>,MAT INV.CNV.REC,'',LN1) 
   TMP=INT(TMP+.5)                                
   TMP=OCONV(TMP,ICR.CNV<LN1>)                  
*P_VALUE = OCONV(INT(PHS.CUR.QTY<1,LN1>/10),"MD2") "R#10" ; P_OPT = ""
   P_VALUE=TMP"R#10"
   CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
   RETURN
*                                                                        
****************                                                         
SET.CONV.VALUES: 
****************                                                         
*                                                                        
   BEGIN CASE                                                               
      CASE INV.UNIT<1,2>='SHT' AND INV.UNIT<1,3>='LBS'                       
         ICR.CNV<LN1>="MD0";ICR.SCAL<LN1>=0;ICR.TYPE<LN1>=3             
         ICR.DV1<LN1>=INV.M.WT;ICR.MT1<LN1>=1;ICR.DV2<LN1>=1            
      CASE INV.UNIT<1,2>='PC' AND INV.UNIT<1,3>='MSI'                        
         ICR.CNV<LN1>="MD0";ICR.SCAL<LN1>=0;ICR.TYPE<LN1>=3             
         ICR.DV1<LN1>=INV.PAP.WIDTH/100;ICR.MT1<LN1>=10;ICR.DV2<LN1>=1  
      CASE INV.UNIT<1,2>='FT' AND INV.UNIT<1,3>='MSI'                        
         ICR.CNV<LN1>="MD0";ICR.SCAL<LN1>=0;ICR.TYPE<LN1>=3             
         ICR.DV1<LN1>=INV.PAP.WIDTH/100;ICR.MT1<LN1>=100;ICR.DV2<LN1>=12
      CASE 1                                                                 
         ICR.CNV<LN1>="MD2";ICR.SCAL<LN1>=2;ICR.TYPE<LN1>=4             
         ICR.DV1<LN1>=10;ICR.MT1<LN1>=1;ICR.DV2<LN1>=1                  
   END CASE                                                                 
   RETURN
*
91000 ERR.TYPE=1 ; CALL SYSCOM(MAT SYSCOM.REC) ; RETURN
92000 ERR.TYPE=2 ; CALL SYSCOM(MAT SYSCOM.REC) ; RETURN
93000 ERR.TYPE=3 ; CALL SYSCOM(MAT SYSCOM.REC)
99999 * PRINT * @(-1)
   END


