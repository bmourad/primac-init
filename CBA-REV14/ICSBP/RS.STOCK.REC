*********************************************************************
* REVISION - [08.2]
* PROGRAM  - RS.STOCK.REC
* AUTHOR   - Scott McHargue, COMPUTER BUSINESS ASSOCIATES
* DATE     - 08/10/90
* DESCRIPTION
* TASK 20032 JR 1/16/96 - ROUNDING ERROR ON FT]PC]MSI STOCK
*T20697 RKB 7/2/96 FIX ABILITY TO ADD WHEN LINES > 99
*T22202 renee 09/03/1997 * Receiving should not allow a warehouse with a
*                          different division than the owning division
*                          of the PO.
*T23278 markt 10/16/1998 * Check for divisional security
*T25740 edvard 07/19/2001 * Replaced COM.STOCK.REC,COM.TRN or 
*                           COM.TRN.FNGD with R12ICS.COM      
*                            Enabled to work with rev12 data file
*                            structure
*T26296 edwin 11/19/2001 * Display messages when duplicate Roll/Skid
*                          Barcode Number are entered.
*T26126 adelgado 02/26/2002 * Implement the LOCKED clause for READU.
*T25740 epitka 04/03/2002 * REV12
*T26497 adelgado 04/04/2002 * Add validation rule for Inter-Divisional
*                             Whse.
*T26556 adelgado 05/14/2002 * Allow to add manual serial and generate
*                             barcode.
*T26556 adelgado 07/05/2002 * Fix to not allow entry of non-serial
*                             tracking items.
*T26764 cmykleb 07/23/2002 * Update RSXRF.LN.NO and PO.NO.OF.ROLLS when
*                            a new serial is created.
*T26198 adelgado 08/29/2002 * Fix to accept PO.NO = '*BAD*'
*T27009 epitka   1104/2002 * Fix posting problem
*T27306 lross 05/05/2003 * Receiving one of several lines on PO causes
*                          Manifest record to get out-of-sync.
*T27902 lross 01/27/2004 * See task for details.
*T27904 cmykleb 02/13/2004 * Janus gun changes.
*T28054 lross 04/11/2004 * Error in issuing warning for excess received.
*T28064 lross 04/14/2004 * Display Product info when enter PO Line No.
*T27931 saleem 06/23/2004 * Mill Roll # Xref. END
*T28214 szubair 08/18/2004 * validation for new serial # and mill roll #
*T27920 cmykleb 08/18/2004 * Allow the ability to close a purchase order
*                            from the Serial Stock Receipts entry
*                            screen.
*T28300 lross 10/18/2004 *  Serial Stock Receipts Maint - Had conversions 
*                           for SHT/MSI TY
*                           Also convert from SCREEN INPUT to SCRN.EDIT.
*T27928 lross 12/14/2004 * Include Autopost functionality.
*T28422 lross 01/28/2005 * Restore orig QTY conversions plus tweek to
*                          make work for any conversions not in orig.
*********************************************************************
*
*---- COPY STATEMENTS
*
*COPY>CPYLIB>COM1
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>ICS.CPYLIB>COM.INV.LINK  
*COPY>POS.CPYLIB>COM.PO.INTRF
*COPY>PMC.CPYLIB>COMPANY
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>ICS.CPYLIB>PO.MAN.XREF
*COPY>ICS.CPYLIB>PO.RSKI.XREF 
*COPY>ICS.CPYLIB>INV_SERIAL
*COPY>PMC.CPYLIB>VEND
*COPY>PMC.CPYLIB>PO
*COPY>ICS.CPYLIB>INVENTORY
*COPY>JCS.CPYLIB>JOB
*COPY>ICS.CPYLIB>SAVE.STOCK.REC
*COPY>APS.CPYLIB>APS.FILE.VARS
*COPY>CPYLIB>SYSCOM
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>CATEGORY
*COPY>CPYLIB>GEN.XREF.SUB
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>ICS.CPYLIB>DAILY_STOCK
*COPY>ICS.CPYLIB>MILL_TO_SERIAL
*
DEFFUN GET.SERIAL.SEQ(CONO,CONTROL.FILE,INV_SERIAL.FILE) 
*
DEFFUN CALC.DIAM(COST.QTY,STK.QTY,MAT INV.REC)
DEFFUN UOM.CONVERSION.CALC(QTY,FROM.UOM,TO.UOM,WGT,WIDTH,ROND,LN)    ;* T27902
*---- SETUP FOR SYSTEM ERRMSGS
*
SYS.TYPE = 1
CALL SYSCOM(MAT SYSCOM.REC)
*
*---- OPEN ALL FILES
*
OPEN "","COMPANY" TO COMPANY ELSE
  ERRMSG = "CANNOT OPEN COMPANY FILE";GOTO 93000 
END
OPEN "","CONTROL" TO CONTROL ELSE
  ERRMSG = "CANNOT OPEN CONTROL FILE";GOTO 93000 
END
*T27902 v
OPEN "","XREF.DATA" TO XREF.DATA ELSE
  ERRMSG = "CANNOT OPEN XREF.DATA FILE";GOTO 93000 
END
OPEN "","PREFIX" TO PREFIX ELSE
  ERRMSG = "CANNOT OPEN PREFIX FILE";GOTO 93000 
END
*T27902 ^
OPEN "","PO.MAN.XREF" TO PO.MAN.XREF ELSE
  ERRMSG ="CANNOT OPEN PO.MAN.XREF FILE";GOTO 93000 
END
OPEN "","PO.RSKI.XREF" TO PO.RSKI.XREF ELSE
  ERRMSG ="CANNOT OPEN PO.RSKI.XREF FILE";GOTO 93000 
END
OPEN "","INV_SERIAL" TO INV_SERIAL ELSE
  ERRMSG = "CANNOT OPEN INV_SERIAL FILE";GOTO 93000
END
OPEN "","INV_SERIAL_DELETED" TO INV_SERIAL_DELETED ELSE
  ERRMSG = "CANNOT OPEN INV_SERIAL_DELETED FILE";GOTO 93000
END
OPEN "","DAILY_STOCK" TO DAILY_STOCK ELSE
  ERRMSG="CANNOT OPEN DAILY_STOCK FILE";GOTO 93000
END
OPEN "","MILL_TO_SERIAL" TO MILL_TO_SERIAL ELSE
  ERRMSG="CANNOT OPEN MILL_TO_SERIAL FILE";GOTO 93000
END
   OPEN "","ICS.SCREENS" TO M.SCREENS ELSE
      ERRMSG = "CANNOT OPEN ICS.SCREENS FILE";GOTO 93000
   END
*T29032 v
*OPEN "","REV12A.SCREENS" TO M.SCREENS ELSE
*  ERRMSG = "CANNOT OPEN REV12A.SCREENS FILE";GOTO 93000
*END
OPEN "","PO" TO PO ELSE
  ERRMSG = "CANNOT OPEN PO FILE"; GOTO 93000
END
OPEN "","VEND" TO VEND ELSE
  ERRMSG = "CANNOT OPEN VEND FILE"; GOTO 93000 
END
OPEN "","CATEGORY" TO CATEGORY ELSE
  ERRMSG = "CATEGORY FILE IS MISSING"; GOTO 93000
END
OPEN "","INVENTORY" TO INVENTORY ELSE
  ERRMSG = "CANNOT OPEN INVENTORY FILE";GOTO 93000 
END
OPEN "","INV.STATS" TO INV.STATS ELSE
  ERRMSG = "INV.STATS FILE IS MISSING"; GOTO 93000 
END
OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE
  ERRMSG = "INV.WHSE.LOC IS MISSING"; GOTO 93000
END
OPEN "","INV.WHSE" TO INV.WHSE ELSE
  ERRMSG = "INV.WHSE IS MISSING"; GOTO 93000
END
OPEN "","INV.HIST" TO INV.HIST ELSE
  ERRMSG = "INV.HIST IS MISSING"; GOTO 93000
END
OPEN "","INV.JOB.STATS" TO INV.JOB.STATS ELSE
  ERRMSG = "INV.JOB.STATS FILE IS MISSING"; GOTO 93000
END
OPEN "","JOB" TO JOB ELSE
  ERRMSG = "JOB IS MISSING"; GOTO 93000
END
OPEN "","WAREHOUSE" TO WAREHOUSE ELSE
  ERRMSG = "WAREHOUSE IS MISSING"; GOTO 93000
END
*
*---- INITIALIZATION
*
CONO = ""
CALL GET.CONO1 (CONO, MAT COMP.REC, COMPANY, CONTROL)
IF CO.APS.R.INTRF > 1 THEN
  OPEN "","VEND.STATS" TO VEND.STATS ELSE
    ERRMSG = "CANNOT OPEN VEND.STATS FILE";GOTO 93000 
  END
  OPEN "","VEND.PO.STATS" TO VEND.PO.STATS ELSE
    ERRMSG="CANNOT OPEN VEND.PO.STATS FILE";GOTO 93000 
  END
  OPEN "","VEND.PROD.STATS" TO VEND.PROD.STATS ELSE
    ERRMSG = "CANNOT OPEN VEND.PROD.STATS FILE"; GOTO 93000
  END
END
*
1*
ECD.SCRN.CNT=2
ECD.SCRN.NAME="RS.STOCK.REC"
ECD.SCRN.NAME<2>="RS.STOCK.REC.SUB"
ECD.SCRN.NO = 1
EQU ESN TO ECD.SCRN.NO
ECD.ACTION = 1; CALL SCRN.EDIT
MAT SCV.REC = ''
PAGE.SIZE = 10
BEGIN.PAGE=8
LINE.SPACE = 1
LINE.CNT = 0
REF.NO = ""
CURR.REF.NO = ""
EDIT.FLAG = 0
FILE.FLAG=0 ;*T27928
MAT GEN.XREF.REC = ""
GXR.CO = CONO
*
DIM HOLD.ISTK.REC(ISTK.REC.SIZE) ; MAT HOLD.ISTK.REC=""
DIM S.REC(25)
EQU S.SERIAL        TO S.REC(1);*
EQU S.PO.LINE.NO    TO S.REC(2)
EQU S.QTY           TO S.REC(3);*
EQU S.LOC           TO S.REC(4);*
EQU S.MILL.ID       TO S.REC(5);*
EQU S.QTY.ENTERED   TO S.REC(6)
EQU S.WHSE          TO S.REC(7);*
EQU S.COMPLETE     TO S.REC(8) ; * T27920
EQU S.PROD.NO       TO S.REC(9)
EQU S.INV.FULL.DESC TO S.REC(10);*
EQU S.INV.PAP.TYPE  TO S.REC(11)
EQU S.TOT.WEIGHT    TO S.REC(12)
EQU S.UNIT          TO S.REC(13);*UOM
EQU S.INV.UNIT      TO S.REC(14)
EQU S.INV.M.WT      TO S.REC(15)
EQU S.STK.QTY       TO S.REC(16)
EQU S.INV.PAP.WIDTH TO S.REC(17)
EQU S.POST.DATE     TO S.REC(19);*
EQU S.STATUS        TO S.REC(20)
EQU S.EDIT.DATE     TO S.REC(21)
EQU S.UN.PRICE      TO S.REC(24)
EQU S.INV.SBR       TO S.REC(25) ;*T28300
*
MAT S.REC = ''
S.SEQ='' ;*T27928
ICR.CNV = ""
DIFF.UM = ""
ICR.DV1 = ""
ICR.DV2 = ""
ICR.MT1 = ""
ENTERED = ""
BALANCE = ""
LINE.STATUS=""
GOTO 110
*
*---- MAIN PROCESSING
*
100 *
RELEASE
ECD.ACTION = 6; CALL SCRN.EDIT
MAT SCV.REC = ''
110 *
SCV.REC(1)<ESN> = DATE()
ECD.NUM=1; ECD.ACTION=5; CALL SCRN.EDIT
ECD.NUM=2
ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE='END' THEN GOTO 99999
PO.NO = ECD.RET.VALUE
MAT S.REC = ""
SS = 0
OLD.DSR.ID = '' ; * T27904
MANUAL.ENTRY = 0      ;* T26556
  * T26126 v
MATREADU RSXRF.REC FROM PO.RSKI.XREF, CONO: PO.NO LOCKED 
  ERRMSG = 'P/O record is locked by user - ':GETUSERNAME(STATUS())
  GOSUB 91000;GOTO 100 
END ELSE
  * T26126 ^
  MAT RSXRF.REC = ""
  IF PO.NO = "*BAD*" THEN
    ERRMSG ="No errors present!"
* T26556 v
    GOSUB 91000
    GOTO 100
  END ELSE
      * ERRMSG ="Invalid P/O for this function"
    MANUAL.ENTRY = 1
  END
* T26556 ^
END
PO.PRESENT = 1
IF PO.NO = "*BAD*" THEN
  PO.PRESENT = 0
  MAT PO.REC = ""
  MAT VEND.REC = ""
  MAT RSMAN.REC = MAT RSXRF.REC
  GXR.SRCH.ID = PO.NO:'!1'
  SCV.REC(5)<ESN> = '1'
  ECD.NUM=5; ECD.ACTION=5; CALL SCRN.EDIT
  S.SERIAL = RSMAN.RS.NO
  S.PO.LINE.NO = RSMAN.LINE.NO
  MANIFEST = 1          ;* T26198
END ELSE
    * T26126 v
  MATREADU PO.REC FROM PO, CONO:PO.NO LOCKED
    ERRMSG = 'P/O record is locked by user - ':GETUSERNAME(STATUS())
    GOSUB 91000;GOTO 100 
  END ELSE
    * T26126 ^
*T27306 (T26556 left out) v
    IF DCOUNT(RSXRF.RS.NO,VM) > 0 THEN MANUAL.ENTRY = 1 ;*T27306
    IF NOT(MANUAL.ENTRY) THEN
      ERRMSG = "P/O record cannot be found"
      GOSUB 91000
      GOTO 100
    END ELSE
      ECD.NUM=37
      ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE='END' THEN GOTO 100
      IF ECD.RET.VALUE='Y' THEN
        MAT PO.REC = ''
        PO.DIV.OWNER = '00'
      END ELSE GOTO 100
    END
    PO.PRESENT=0;*T27306
*T27306 ^
  END
  IF PO.PRESENT THEN MANUAL.ENTRY = 0 ;*27306
  DIV.CODE = PO.DIV.OWNER; USER.ID = UPCASE(@LOGNAME); ERRMSG = ''
  CALL CK.DIV.SEC.SUB(CONO,DIV.CODE,USER.ID,ERRMSG)
  IF ERRMSG # '' THEN
    GOSUB 91000
    GOTO 100
  END
*T27306 v Merged block from below
  IF NOT(MANUAL.ENTRY) THEN
    SCV.REC(3)<ESN>  = PO.VEND.NO
    ECD.NUM=3; ECD.ACTION=5; CALL SCRN.EDIT
  END ELSE
    ECD.NUM=3
    ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE='END' THEN GOTO 100
    PO.VEND.NO = SCV.REC(3)<ESN>
  END
*T27306 ^ End of merged block
  MATREAD VEND.REC FROM VEND,CONO:PO.VEND.NO ELSE
    ERRMSG = "Vendor record cannot be found"
    GOSUB 91000
    GOTO 100
  END
*T27306 v Merge from below
  SCV.REC(4)<ESN>  = VEND.DESC 
  ECD.NUM=4; ECD.ACTION=5; CALL SCRN.EDIT
*T27306 ^
    * T26556 v
*T27306  IF MANUAL.ENTRY THEN
  IF NOT(MANUAL.ENTRY) THEN
    PO.LINE.CNT = DCOUNT(PO.PROD.NUM,VM)
    BCFLAG=0
    FOR PO.LINE.PTR=1 TO PO.LINE.CNT WHILE BCFLAG=0
      MATREAD INV.REC FROM INVENTORY, CONO:PO.PROD.NUM<1,PO.LINE.PTR> ELSE MAT INV.REC = ""
      MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE ELSE MAT CATG.REC=''
      IF CATG.TRK.LVL='S' THEN
        BCFLAG=1
      END
    NEXT PO.LINE.PTR
    IF BCFLAG=0 THEN
      ERRMSG = "Invalid P/O for this function"
      GOSUB 91000
      GOTO 100
    END
  END
    * T26556 ^
  GXR.SRCH.ID = PO.MAN
  MCNT = DCOUNT(PO.MAN,VM)
  FOR MPTR = 1 TO MCNT
    MAN.ID = PO.NO:'!':PO.MAN<1,MPTR>
    GXR.SRCH.ID = REPLACE(GXR.SRCH.ID,1,MPTR,0,MAN.ID)
  NEXT MPTR
  NEW.MANIFEST = ''
*T27306 v Moved to above
*  SCV.REC(3)<ESN>  = PO.VEND.NO
*  ECD.NUM=3; ECD.ACTION=5; CALL SCRN.EDIT
*  SCV.REC(4)<ESN>  = VEND.DESC 
*  ECD.NUM=4; ECD.ACTION=5; CALL SCRN.EDIT
*T27306 ^
  GOSUB ENT.MAN.NUM
  IF ECD.RET.VALUE = 'END' THEN GOTO 100
END
*IF @LOGNAME='lross' THEN DEBUG
GOSUB LOAD.S.REC
GOSUB LOAD.HEADER.DATA
GOSUB LOAD.MLINES
GOSUB UPDATE.TOTALS
REF.NO = 1
CURR.REF.NO = ""
GOSUB SCROLL.ROUTINE
IF PO.NO # "*BAD*" THEN
  GOSUB ENT.DATE
* IF ECD.RET.VALUE = "END" THEN GOTO 100
  IF ECD.RET.VALUE = "END" THEN GOTO 1
  GOSUB ENT.PERIOD
* IF ECD.RET.VALUE = "END" THEN GOTO 100
  IF ECD.RET.VALUE = "END" THEN GOTO 1
  GOSUB ENT.MAN.WGT
* IF ECD.RET.VALUE = "END" THEN GOTO 100
  IF ECD.RET.VALUE = "END" THEN GOTO 1
  IF (MANUAL.ENTRY) AND (NEW.MANIFEST) THEN GOSUB ADD.SERIAL  ;* T26556
END
*
************
ENT.OPTION: 
************
*
IF PO.NO = "*BAD*" THEN
  ECD.NUM=31
END ELSE
*T27928 v
  IF CO.ICS.REAL.REC='Y' THEN
    ECD.NUM=60
  END ELSE
    ECD.NUM=21
  END
*27928 ^
END
ECD.ACTION=4; CALL SCRN.EDIT
OPT = ECD.RET.VALUE
BEGIN CASE
  CASE OPT = "E" OR OPT = "END"
*        GOTO 100
    ECD.ACTION=99; CALL SCRN.EDIT
    GOTO 1
  CASE OPT = "A" AND LINE.CNT < 999 ;* T20697
    GOSUB ADD.SERIAL             ;* T26556
  CASE OPT = "C" AND LINE.CNT > 0
    MODE = "C"
    GOSUB ENT.LINE.NUM
    IF ECD.RET.VALUE # "" AND ECD.RET.VALUE # "END" THEN
      IF ECD.RET.VALUE = "ALL" OR ECD.RET.VALUE = "A" THEN
        ECD.RET.VALUE = ""
        FOR REF.NO = 1 TO LINE.CNT WHILE ECD.RET.VALUE # "END"
          GOSUB SCROLL.ROUTINE
          GOSUB CHG.DETAIL.LINE
*T27902 v
          CURR.REF.NO=''
          GOSUB SCROLL.ROUTINE
*
        NEXT REF.NO
      END ELSE
        REF.NO = ECD.RET.VALUE
        GOSUB CHG.DETAIL.LINE
*T27902 ^
        CURR.REF.NO=''
        GOSUB SCROLL.ROUTINE
*
      END
    END
  CASE OPT = "D" AND LINE.CNT > 0
    MODE = "D"
    GOSUB ENT.LINE.NUM
    IF ECD.RET.VALUE # "" AND ECD.RET.VALUE # "END" THEN
      IF ECD.RET.VALUE = "ALL" OR ECD.RET.VALUE = "A" THEN
        FOR REF.NO = 1 TO LINE.CNT
*T28300 v
          IF S.POST.DATE<1,REF.NO> = '' THEN
            SCV.REC(12)<ESN,REF.NO> = "X"
          END
*T28300 ^
        NEXT REF.NO
      END ELSE
        REF.NO = ECD.RET.VALUE
        IF SCV.REC(12)<ESN,REF.NO> = "X" THEN
          SCV.REC(12)<ESN,REF.NO> = ""
        END ELSE
*T28300 v
          IF S.POST.DATE<1,REF.NO> = '' THEN
            SCV.REC(12)<ESN,REF.NO> = "X"
          END
*T28300 ^
        END
      END
      CURR.REF.NO = ""
      GOSUB SCROLL.ROUTINE
    END
  CASE OPT = "S" OR OPT = "SF"
    REF.NO = CURR.REF.NO + PAGE.SIZE
    IF REF.NO > LINE.CNT THEN REF.NO = 1
    GOSUB SCROLL.ROUTINE
  CASE OPT = "SR"
    REF.NO = CURR.REF.NO - PAGE.SIZE
    IF REF.NO < 1 THEN REF.NO = 1
    GOSUB SCROLL.ROUTINE
  CASE OPT = "ST"
    REF.NO = 1
    GOSUB SCROLL.ROUTINE
  CASE OPT = "SB"
    REF.NO = LINE.CNT
    IF REF.NO < 1 THEN REF.NO = 1
    GOSUB SCROLL.ROUTINE
  CASE OPT = "1"
    GOSUB ENT.DATE
    IF ECD.RET.VALUE#'END' THEN
      GOSUB ENT.PERIOD
    END
  CASE OPT='2'
    GOSUB ENT.PERIOD
  CASE OPT = "3"
    GOSUB ENT.MAN.WGT
  CASE OPT = "F" AND PO.NO = "*BAD*"
    FOR REF.NO = LINE.CNT TO 1 STEP -1
      IF SCV.REC(12)<ESN,REF.NO> = "X" THEN
        DELETE INV_SERIAL, CONO:S.SERIAL<1,REF.NO>
        LOCATE S.SERIAL<1,REF.NO> IN RSMAN.RS.NO<1>,1 SETTING SPTR THEN
          RSMAN.RS.NO = DELETE(RSMAN.RS.NO,1,SPTR,0)
          RSMAN.LINE.NO = DELETE(RSMAN.LINE.NO,1,SPTR,0)
        END
        LOCATE S.SERIAL<1,REF.NO> IN RSXRF.RS.NO<1>,1 SETTING SPTR THEN
          RSXRF.RS.NO = DELETE(RSXRF.RS.NO,1,SPTR,0)
          RSXRF.LN.NO = DELETE(RSXRF.LN.NO,1,SPTR,0)
        END
      END
    NEXT REF.NO
    IF RSMAN.RS.NO = "" THEN
      DELETE PO.MAN.XREF, CONO:PO.NO:"!1"
    END ELSE
      MATWRITE RSMAN.REC ON PO.MAN.XREF, CONO:PO.NO:"!1"
    END
    IF RSXRF.RS.NO = "" THEN
      DELETE PO.RSKI.XREF, CONO:PO.NO
    END ELSE
      MATWRITE RSXRF.REC ON PO.RSKI.XREF, CONO:PO.NO
    END
    GOTO 100
  CASE OPT = "F"
*T27928 v Use subroutine
    RTN2.FLAG='100'
    GOSUB FILE.SUB
    IF RTN2.FLAG='100' THEN
      IF CO.ICS.REAL.REC # 'Y' THEN
        GOTO 100
      END
    END
    GOTO ENT.OPTION
*T27928 ^
  CASE OPT = "R"
    GOSUB ENT.LINE.NUM
    IF ECD.RET.VALUE # "" AND ECD.RET.VALUE # "END" THEN
      IF ECD.RET.VALUE = "ALL" OR ECD.RET.VALUE = "A" THEN
        GOSUB SCROLL.ROUTINE
        FOR REF.NO = 1 TO LINE.CNT
          GOSUB SCROLL.ROUTINE
          GOSUB 450
        NEXT REF.NO
      END ELSE
        REF.NO = ECD.RET.VALUE
        GOSUB 450
      END
    END
*T27928 v
  CASE OPT = "P" AND CO.ICS.REAL.REC="Y"
    IF FILE.FLAG THEN
      BUFF=CONO
      BUFF<2>='IC200'
      BUFF<9>='EDIT'
      BUFF<10>=''
      PROCWRITE BUFF
      CMD='SELECT DAILY_STOCK WITH @ID = "':CONO:PO.NO:"!":MANIFEST:'"'
      UDTEXECUTE CMD CAPTURING JUNK
      HUSH ON
      CALL RS.REC.ED.LIST
      HUSH OFF
    END ELSE
      ECD.NUM=7; CALL SCRN.EDIT
    END
  CASE OPT = "U" AND CO.ICS.REAL.REC="Y"
    IF FILE.FLAG THEN
      BUFF=CONO
      PROCWRITE BUFF
      CMD='SELECT DAILY_STOCK WITH @ID = "':CONO:PO.NO:"!":MANIFEST:'"'
      UDTEXECUTE CMD CAPTURING JUNK
      CALL RS.POST.DRIVER
      UDTEXECUTE CMD CAPTURING JUNK
      READNEXT DID THEN
        BUFF<2>='IC204'
        BUFF<9>='REJECT'
        UDTEXECUTE CMD CAPTURING JUNK
        CALL RS.REC.ED.LIST
      END
      GOTO 100
    END ELSE
      ECD.NUM=7; CALL SCRN.EDIT
    END
*T27928 ^
END CASE
GOTO ENT.OPTION
*
*************************************************************************
****  S U B R O U T I N E S *********************************************
*************************************************************************
*
*********
450 *
*********
*
SCV.REC(12)<ESN,REF.NO> = "*"
ECD.NUM=12; ECD.SUB.NUM=REF.NO; ECD.ACTION=5; CALL SCRN.EDIT
SCV.REC(23)<ESN> = S.PROD.NO<1,REF.NO>:" , ":S.INV.FULL.DESC<1,REF.NO>:" , ":S.INV.PAP.TYPE<1,REF.NO>
ECD.NUM=23 ; ECD.ACTION=5; CALL SCRN.EDIT
ECD.NUM=33
ECD.ACTION=4; CALL SCRN.EDIT
SCV.REC(12)<ESN,REF.NO> = ""    
ECD.SUB.NUM = REF.NO
ECD.NUM=12 ; ECD.ACTION=5; CALL SCRN.EDIT
RETURN 
*
*****************
CHG.DETAIL.LINE: 
*****************
*
IF S.POST.DATE<1,REF.NO> # "" THEN
  ERRMSG = "Serial was received on ": OCONV(S.POST.DATE<1,REF.NO>,"D2/")
  GOSUB 91000
END ELSE
  SCV.REC(23)<ESN> = S.PROD.NO<1,REF.NO>:" , ":S.INV.FULL.DESC<1,REF.NO>:" , ":S.INV.PAP.TYPE<1,REF.NO>
  ECD.NUM=23; ECD.ACTION=5; CALL SCRN.EDIT
  GOSUB GET.MLINE.DATA
  IF ECD.RET.VALUE = "END" THEN
    CURR.REF.NO = ""
    GOSUB SCROLL.ROUTINE
  END
  SCV.REC(23)<ESN> = ""
  ECD.SUB.NUM = REF.NO
  ECD.NUM=12 ; ECD.ACTION=5; CALL SCRN.EDIT
  ECD.NUM=23 ; ECD.ACTION=5; CALL SCRN.EDIT
  ECD.SUB.NUM = REF.NO
  ECD.NUM=21; ECD.ACTION=5; CALL SCRN.EDIT
END
RETURN
*
**************
ENT.LINE.NUM: 
**************
*
ECD.NUM=22
ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE='END' THEN RETURN
ECD.MINV = CURR.REF.NO
ECD.MAXV = ECD.MINV + PAGE.SIZE - 1
IF ECD.MAXV > LINE.CNT THEN ECD.MAXV = LINE.CNT
IF ECD.RET.VALUE # "" THEN
  IF NUM(ECD.RET.VALUE) THEN
    IF ECD.RET.VALUE > ECD.MAXV OR ECD.RET.VALUE < ECD.MINV THEN
      ERRMSG =  "*** Out of range ***"
      GOSUB 91000
      GOTO ENT.LINE.NUM
    END
  END ELSE
    IF ECD.RET.VALUE # "ALL" AND ECD.RET.VALUE # "A" THEN
      ERRMSG = "*** Invalid input ***"
      GOSUB 91000
      GOTO ENT.LINE.NUM
    END
  END
END
ECD.MINV = ""
ECD.MAXV = ""
RETURN
*
****************
DEL.MLINE.DATA: 
****************
*
S.SERIAL = DELETE(S.SERIAL,1,REF.NO,0)
S.PO.LINE.NO = DELETE(S.PO.LINE.NO,1,REF.NO,0)
S.COMPLETE = DELETE(S.COMPLETE,1,REF.NO,0) ; * T27920
S.QTY = DELETE(S.QTY,1,REF.NO,0)
S.LOC = DELETE(S.LOC,1,REF.NO,0)
S.MILL.ID = DELETE(S.MILL.ID,1,REF.NO,0)
S.QTY.ENTERED = DELETE(S.QTY.ENTERED,1,REF.NO,0)
S.WHSE = DELETE(S.WHSE,1,REF.NO,0)
S.PROD.NO = DELETE(S.PROD.NO,1,REF.NO,0)
S.INV.FULL.DESC = DELETE(S.INV.FULL.DESC,1,REF.NO,0)
S.INV.PAP.TYPE = DELETE(S.INV.PAP.TYPE,1,REF.NO,0)
S.UNIT = DELETE(S.UNIT,1,REF.NO,0)
S.INV.UNIT = DELETE(S.INV.UNIT,1,REF.NO,0)
S.INV.M.WT = DELETE(S.INV.M.WT,1,REF.NO,0)
S.INV.PAP.WIDTH = DELETE(S.INV.PAP.WIDTH,1,REF.NO,0)
S.STK.QTY = DELETE(S.STK.QTY,1,REF.NO,0)
S.EDIT.DATE = DELETE(S.EDIT.DATE,1,REF.NO,0)
S.POST.DATE = DELETE(S.POST.DATE,1,REF.NO,0)
SCV.REC(12) = DELETE(SCV.REC(12),1,REF.NO,0) 
SCV.REC(14) = DELETE(SCV.REC(14),1,REF.NO,0) 
GOSUB UPDATE.TOTALS
LINE.CNT=DCOUNT(S.SERIAL,VM)
RETURN
*
**********
ENT.DATE: 
**********
*
ECD.NUM=50
IF RSMAN.ENTRY.DATE#'' THEN
  ECD.DEFAULT=RSMAN.ENTRY.DATE
  SCV.REC(50)<ESN> = RSMAN.ENTRY.DATE
END ELSE
  ECD.DEFAULT = DATE()
  SCV.REC(50)<ESN>=DATE()
END
ECD.ACTION=4; CALL SCRN.EDIT
IF ECD.RET.VALUE#'END' THEN
  DEF.PERIOD = "";ERR.FLG = "";ERRMSG = ""                              
  CALL CHECK.PERIOD.DATE(CONO,ECD.RET.VALUE,DEF.PERIOD,DIV.CODE,ERR.FLG,ERRMSG,COMPANY,CONTROL)
  BEGIN CASE                           
    CASE ERRMSG = ""                   
      RSMAN.ENTRY.DATE = ECD.RET.VALUE
      RECP.DATE=ECD.RET.VALUE
    CASE ERR.FLG = 0                   
      RSMAN.ENTRY.DATE = ECD.RET.VALUE
      RECP.DATE=ECD.RET.VALUE
      GOSUB 91000                      
    CASE ERR.FLG = 1                   
      GOSUB 91000;GOTO ENT.DATE        
    CASE ERR.FLG = 2                   
      GOSUB 91000; ECD.RET.VALUE='END'
  END CASE                             
  ERRMSG = ""                          
  ERR.FLG = ""                         
END ELSE
  SCV.REC(50)<ESN> = RSMAN.ENTRY.DATE
  ECD.NUM=50; ECD.ACTION=5; CALL SCRN.EDIT
END
RETURN
*
***************
ENT.PERIOD: 
***************
*
IF CO.ICS.PERIOD.FLG='N' THEN
  ECD.NUM=53
  ECD.DEFAULT=DEF.PERIOD
  ECD.ACTION=4; CALL SCRN.EDIT
  IF ECD.RET.VALUE#'END' THEN
    ERR.FLG = "";ERRMSG = ""                                              
    CALL CHECK.PERIOD.DATE(CONO,RSMAN.ENTRY.DATE,ECD.RET.VALUE,DIV.CODE,ERR.FLG,ERRMSG,COMPANY,CONTROL)
    BEGIN CASE                           
      CASE ERRMSG = ""                   
        RSMAN.PERIOD=ECD.RET.VALUE
      CASE ERR.FLG = 0                   
        RSMAN.PERIOD = ECD.RET.VALUE    
        GOSUB 91000                      
      CASE ERR.FLG = 1                   
        GOSUB 91000;GOTO ENT.PERIOD      
      CASE ERR.FLG = 2                   
        GOSUB 91000;ECD.RET.VALUE = "END"
    END CASE                             
    ERRMSG = ""                          
    ERR.FLG = ""                         
  END ELSE
    SCV.REC(53)<ESN> = RSMAN.PERIOD
    ECD.NUM=53 ; ECD.ACTION=5; CALL SCRN.EDIT
  END
END ELSE
  RSMAN.PERIOD=DEF.PERIOD
  SCV.REC(53)<ESN> = RSMAN.PERIOD
  ECD.NUM=53; ECD.ACTION=5; CALL SCRN.EDIT
END
RETURN
*
**************
ENT.MAN.NUM: 
**************
*
ECD.NUM=5
ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE='END' THEN RETURN
BEGIN CASE
  CASE ECD.RET.VALUE  = "???" OR ECD.RET.VALUE = ''
    OPEN "","PREFIX" TO PREFIX ELSE
      ERRMSG = "UNABLE TO OPEN PREFIX"
      GOSUB 91000
      GOTO ENT.MAN.NUM
    END
    OPEN "","XREF.DATA" TO XREF.DATA ELSE
      ERRMSG = "UNABLE TO OPEN XREF.DATA"
      GOSUB 91000
      GOTO ENT.MAN.NUM
    END
    GXR.NAME = "MANIFEST"
    GXR.FILE = PO.MAN.XREF
    GXR.OPEN.DATA = 'PO.MAN.XREF'
    CALL GEN.XREF.SUB(MAT GEN.XREF.REC,PREFIX,XREF.DATA)
    ECD.ACTION = 2; CALL SCRN.EDIT
    ECD.ACTION = 3; CALL SCRN.EDIT
    GOSUB SCROLL.ROUTINE
    IF GXR.ID = "" THEN GOTO ENT.MAN.NUM
    ECD.RET.VALUE = FIELD(GXR.ID,"!",2)
  CASE ECD.RET.VALUE = 'N'
    GOT.ONE = 0
    LOOP UNTIL GOT.ONE DO
      IF PO.LAST.MAN = '' THEN
        PO.LAST.MAN = 1
        ECD.RET.VALUE = 1
      END ELSE
        PO.LAST.MAN = PO.LAST.MAN + 1
        ECD.RET.VALUE = PO.LAST.MAN
      END
      MATREAD RSMAN.REC FROM PO.MAN.XREF, CONO:PO.NO:"!":ECD.RET.VALUE ELSE 
        GOT.ONE = 1
      END
    REPEAT
    NEW.MANIFEST = 1
END CASE
*IF @LOGNAME='lross' THEN DEBUG
MATREADU RSMAN.REC FROM PO.MAN.XREF, CONO:PO.NO:"!":ECD.RET.VALUE ELSE 
  MANIFEST = ECD.RET.VALUE
  IF NOT(NEW.MANIFEST) THEN
    ECD.NUM=32
    ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE='END' THEN GOTO ENT.MAN.NUM
    IF ECD.RET.VALUE = 'N' THEN
      RELEASE PO.MAN.XREF, CONO:PO.NO:"!":ECD.RET.VALUE
      GOTO ENT.MAN.NUM
    END
*IF @LOGNAME='lross' THEN DEBUG
    NEW.MANIFEST = 1
  END
      *** Creating new manifest with serials that are not assigned ***
      *** to a manifest yet.                                       ***
  MAT RSMAN.REC = ''
  ECD.RET.VALUE = MANIFEST
  RSMAN.RS.NO = RSXRF.RS.NO
  RSMAN.LINE.NO = RSXRF.LN.NO ;*T27306
  RCNT = DCOUNT(RSXRF.RS.NO,VM)
  MAT HOLD.ISTK.REC = MAT ISTK.REC
*T27306 v
      *** Deletion must be in right-to-left manner else skips ***
      *** may occur.                                          ***
  FOR RPTR = RCNT TO 1 STEP - 1
    ISTK.ID=CONO:RSXRF.RS.NO<1,RPTR>
    MATREAD ISTK.REC FROM INV_SERIAL_DELETED,ISTK.ID THEN
      LOCATE RSXRF.RS.NO<1,RPTR> IN RSMAN.RS.NO<1>,1 SETTING SPTR THEN
        RSMAN.RS.NO = DELETE(RSMAN.RS.NO,1,SPTR,0)
        RSMAN.LINE.NO = DELETE(RSMAN.LINE.NO,1,SPTR,0) ;*T27306
      END
    END ELSE
      MATREAD ISTK.REC FROM INV_SERIAL,ISTK.ID THEN
        IF ISTK.MANIFEST.NO # '' THEN
          LOCATE RSXRF.RS.NO<1,RPTR> IN RSMAN.RS.NO<1>,1 SETTING SPTR THEN
            RSMAN.RS.NO = DELETE(RSMAN.RS.NO,1,SPTR,0)
            RSMAN.LINE.NO = DELETE(RSMAN.LINE.NO,1,SPTR,0) ;*T27306
          END
        END
      END
    END
  NEXT RPTR
  MAT ISTK.REC = MAT HOLD.ISTK.REC
  NEW.MANIFEST = 1
*     RSMAN.MAN.NO = MANIFEST
END
*IF @LOGNAME='lross' THEN DEBUG
*T27928 v Arrange serials by PO.LINE
RCNT=DCOUNT(RSMAN.RS.NO,VM)
FOR R = 1 TO RCNT
  IF NUM(RSMAN.RS.NO<1,R>) THEN
    RSEQ=RSMAN.LINE.NO<1,R>'R%3':RSMAN.RS.NO<1,R>'R%15'
  END ELSE
    RSEQ=RSMAN.LINE.NO<1,R>'R%3':RSMAN.RS.NO<1,R>'L#15'
  END
  LOCATE RSEQ IN S.SEQ<1>,1 BY 'AR' SETTING SNO ELSE
    INS RSEQ BEFORE S.SEQ<1,SNO>
    INS RSMAN.RS.NO<1,R> BEFORE S.SERIAL<1,SNO>
    INS RSMAN.LINE.NO<1,R> BEFORE S.PO.LINE.NO<1,SNO>
  END
NEXT R
*  S.SERIAL = RSMAN.RS.NO
*  S.PO.LINE.NO=RSMAN.LINE.NO
*T27928 ^
MANIFEST = ECD.RET.VALUE
RSMAN.MAN.NO = MANIFEST
*T27306 v Load Manual PO values.
IF MANUAL.ENTRY AND NOT(PO.PRESENT) THEN
  FOR P = 1 TO DCOUNT(RSMAN.RS.NO,VM)
    MATREAD ISTK.REC FROM INV_SERIAL,CONO:RSMAN.RS.NO<1,P> THEN
      PTR=1
      LOOP
        LOCATE ISTK.PROD IN PO.PROD.NUM<1>,PTR SETTING FND THEN
          IF ISTK.WHSE = PO.WHSE<1,FND> THEN
            PTR = 0
          END ELSE
            PTR = FND+1
          END
        END ELSE
          INS ISTK.PROD BEFORE PO.PROD.NUM<1,RSMAN.LINE.NO<1,P>>
          INS ISTK.WHSE BEFORE PO.WHSE<1,RSMAN.LINE.NO<1,P>>
          INS ISTK.UOM BEFORE PO.UNIT.FLG<1,RSMAN.LINE.NO<1,P>>
          INS ISTK.UNIT.COST BEFORE PO.GROS.PRICE<1,RSMAN.LINE.NO<1,P>>
          PTR = 0
        END
      WHILE PTR DO
      REPEAT
    END
  NEXT P
END
*T27306 ^
RETURN
*
************
ENT.MAN.WGT: 
************
*
ECD.NUM=6
ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE='END' THEN RETURN
RSMAN.MAN.TOT.WGT = ECD.RET.VALUE
GOSUB UPDATE.TOTALS
RETURN
*
***************
GET.MLINE.DATA: 
***************
*
ECD.SUB.NUM = REF.NO
ECD.NUM=11; ECD.ACTION=5; CALL SCRN.EDIT
IF MODE # 'A' THEN GOTO ENT.QTY
NEW.SERIAL = 0
ECD.SUB.NUM = REF.NO
ECD.NUM=13
ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE='END' THEN GOTO 19950
GMD.CASE: 
BEGIN CASE
*T27902 v
*     CASE ECD.RET.VALUE = 'N'
  CASE ECD.RET.VALUE = 'N' AND CATG.BARCODE = "Y"
*T27902 ^
* T26556 v
    BAD.SERIAL.BUILD = 0
    GOSUB BUILD.NEW.SERIAL
    IF (BAD.SERIAL.BUILD) THEN GOTO GET.MLINE.DATA
    ISTK.SEQ=GET.SERIAL.SEQ(CONO,CONTROL,INV_SERIAL)
    READU TMP.REC FROM INV_SERIAL, CONO:ISTK.SEQ ELSE NULL
* T26556 ^
    NEW.SERIAL = 1
    S.SERIAL<1,REF.NO>=ISTK.SEQ
    SCV.REC(13)<ESN,REF.NO> = S.SERIAL<1,REF.NO>
    ECD.SUB.NUM = REF.NO
    ECD.NUM=13; ECD.ACTION=5; CALL SCRN.EDIT
    SCV.REC(30)<ESN,REF.NO> = S.UNIT<1,REF.NO>
    ECD.SUB.NUM = REF.NO
    ECD.NUM=30; ECD.ACTION=5; CALL SCRN.EDIT
    SCV.REC(23)<ESN> = S.PROD.NO<1,REF.NO>:" , ":S.INV.FULL.DESC<1,REF.NO>:" , ":S.INV.PAP.TYPE<1,REF.NO>
    ECD.NUM=23; ECD.ACTION=5; CALL SCRN.EDIT
    SCV.REC(18)<ESN,REF.NO>=S.WHSE<1,REF.NO>
    ECD.SUB.NUM=REF.NO
    ECD.NUM=18; ECD.ACTION=5; CALL SCRN.EDIT
*T27902 v
* CASE 1
*T28214 CASE ECD.RET.VALUE # "N" AND CATG.BARCODE # "Y" AND ECD.RET.VALUE # 'M'
  CASE ECD.RET.VALUE # "N" AND ECD.RET.VALUE # 'M'
    MATREADU ISTK.REC FROM INV_SERIAL,CONO:ECD.RET.VALUE THEN
      INV.ID=CONO:ISTK.PROD
      IWH.ID=INV.ID:"!":ISTK.WHSE
      GOSUB CHECK.DATA
*      IF S.STATUS<1,REF.NO>="" THEN  
      IF S.STATUS='' THEN
        LOCATE ECD.RET.VALUE IN S.SERIAL<1>,1 SETTING NDX THEN        ; *26296
          ERRMSG = 'Duplicate Serial for this Purchase order '
          GOSUB 91000
          GOTO GET.MLINE.DATA
        END ELSE
          IF ISTK.POST.DATE # '' THEN
            ERRMSG = 'Serial was received on ':OCONV(ISTK.POST.DATE,'D2/')
            GOSUB 91000
            GOTO GET.MLINE.DATA
          END
          IF ISTK.MANIFEST.NO # '' AND ISTK.MANIFEST.NO # MANIFEST THEN
            ERRMSG = 'Serial belongs to Purchase order ':ISTK.PO.NO:' manifest ':ISTK.MANIFEST.NO
            GOSUB 91000
            GOTO GET.MLINE.DATA
          END
          IF ISTK.PO.NO # PO.NO THEN                            ; *26296
            ERRMSG = 'Serial belongs to Purchase order ':ISTK.PO.NO
            GOSUB 91000
            GOTO GET.MLINE.DATA
          END
        END
* T26556 v
*     END
      END ELSE
        LOCATE ECD.RET.VALUE IN S.SERIAL<1>,1 SETTING NDX THEN        ; *26296
          ERRMSG='Serial already exists on line ':NDX
          GOSUB 91000
          GOTO GET.MLINE.DATA
        END
      END
      SS=REF.NO
      S.SERIAL<1,SS>=ECD.RET.VALUE
      GOSUB SET.S.REC
      GOSUB GET.CONV
    END ELSE
      BAD.SERIAL.BUILD = 0
      GOSUB BUILD.NEW.SERIAL
      IF (BAD.SERIAL.BUILD) THEN GOTO GET.MLINE.DATA
      NEW.SERIAL = 1
      S.SERIAL<1,REF.NO> = ECD.RET.VALUE
* T26556 ^
    END
    SCV.REC(13)<ESN,REF.NO> = S.SERIAL<1,REF.NO>
    ECD.SUB.NUM = REF.NO
    ECD.NUM=13; ECD.ACTION=5; CALL SCRN.EDIT
    SCV.REC(30)<ESN,REF.NO> = S.UNIT<1,REF.NO>
    ECD.SUB.NUM = REF.NO
    ECD.NUM=30; ECD.ACTION=5; CALL SCRN.EDIT
    SCV.REC(23)<ESN> = S.PROD.NO<1,REF.NO>:" , ":S.INV.FULL.DESC<1,REF.NO>:" , ":S.INV.PAP.TYPE<1,REF.NO>
    ECD.NUM=23; ECD.ACTION=5; CALL SCRN.EDIT
    SCV.REC(18)<ESN,REF.NO>=S.WHSE<1,REF.NO>
    ECD.SUB.NUM=REF.NO
    ECD.NUM=18; ECD.ACTION=5; CALL SCRN.EDIT
  CASE ECD.RET.VALUE = 'M'
    ECD.SUB.NUM = REF.NO
    ECD.NUM=16
    ECD.ACTION=4; CALL SCRN.EDIT
    IF ECD.RET.VALUE = "END" THEN
      GOTO GET.MLINE.DATA
    END ELSE
*T28214 v
      LOCATE ECD.RET.VALUE IN S.MILL.ID<1>,1 SETTING MFND THEN
        IF MFND # REF.NO THEN
          ERRMSG='Mill ID exists on line ':MFND
          GOSUB 91000
          GOTO GET.MLINE.DATA
        END
      END
*T28214 ^
      MATREAD MTS.REC FROM MILL_TO_SERIAL,CONO:ECD.RET.VALUE THEN
        SCV.REC(13)<ESN,REF.NO> = MTS.SERIAL
        ECD.SUB.NUM = REF.NO
        ECD.RET.VALUE = MTS.SERIAL
        ECD.NUM=13; ECD.ACTION=5; CALL SCRN.EDIT
        GOTO GMD.CASE
      END ELSE
        ERRMSG = "Mill Roll # ":ECD.RET.VALUE:" is not on file"
        GOSUB 91000
        GOTO GET.MLINE.DATA
      END
    END
*T27902 v
  CASE 1
    IF ECD.RET.VALUE = 'N' AND CATG.BARCODE # 'Y' THEN
      ERRMSG='Product not setup for PRIMAC generated barcodes.'
    END
    IF ECD.RET.VALUE # 'N' AND CATG.BARCODE = 'Y' THEN
      ERRMSG='Must enter "N" to generate barcode.'
    END
    IF ERRMSG='' THEN
      ERRMSG='Invalid Serial input'
    END
    GOSUB 91000
    SCV.REC(13)<ESN,REF.NO> = ""
    ECD.SUB.NUM = REF.NO
    ECD.NUM=13; ECD.ACTION=5; CALL SCRN.EDIT
    GOTO GET.MLINE.DATA
*T27902 ^
END CASE
*
*********
ENT.QTY: 
*********
*
SLN=BEGIN.PAGE + LINE.SPACE * MOD(REF.NO-1,PAGE.SIZE)
TEMP.QTY.ENTERED=0
ECD.SUB.NUM = REF.NO
ECD.NUM=14
*T28300 T28422 v Undo
O.R='R'; MINL=1; MAXL=8
*  IF S.UNIT<1,REF.NO> = "LBS" OR S.UNIT<1,REF.NO> = "MSI" THEN 
IF S.UNIT<1,REF.NO>#'SHT' AND S.UNIT<1,REF.NO>#'FT' AND S.UNIT<1,REF.NO>#'PC' THEN
*     S$TYP = 4
*     ECD.SCALER = 2
  SCALER=2; TYP=4; MAXV = '99999999'; JUSTIFY='R'
  IF S.QTY.ENTERED<1,REF.NO>#'' THEN
    SCV.REC(14)<ESN,REF.NO> = SCV.REC(14)<ESN,REF.NO> * 100
    DEFAULT= OCONV(SCV.REC(14)<ESN,REF.NO>,'MD2')
    O.R='O'
  END
END ELSE 
*     S$TYP = 3
  SCALER = 0; TYP=3; MAXV = '99999999'; JUSTIFY='R'
  IF S.QTY.ENTERED<1,REF.NO>#'' THEN
    DEFAULT = SCV.REC(14)<ESN,REF.NO>
    O.R='O'
  END
END
*  ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE = 'END' THEN GOTO 19950
X=25; Y=SLN; CALL EDIT.SUB
IF VALUE='END' THEN GOTO 19950
ECD.RET.VALUE=VALUE
*IF @LOGNAME='lross' THEN DEBUG
*   BEGIN CASE
*      CASE OQX<1,REF.NO> AND ICR.DV1<REF.NO,2>=''
*         MAXL=8; O.R='R'
*         TYP=4; SCALER=2; MINV=0; MAXV=9999999
*         BEGIN CASE
*            CASE S.QTY<1,REF.NO> # '' AND ICR.CNV<REF.NO,1>="MD2"
*               O.R='O'
*               SCV.REC(14)<ESN,REF.NO>=INT(((S.QTY<1,REF.NO>/ICR.DV1<REF.NO,1>)*ICR.MT1<REF.NO,1>)/ICR.DV2<REF.NO,1>+.5)
*               SCV.REC(14)<ESN,REF.NO>=OCONV(SCV.REC(14)<ESN,REF.NO>/INV.SBR,"MD2")
*            CASE S.QTY<1,REF.NO> # "" AND ICR.CNV<REF.NO,1>="MD0"
*               O.R='O'
*               SCV.REC(14)<ESN,REF.NO>=INT(S.QTY<1,REF.NO>/10)
*               SCV.REC(14)<ESN,REF.NO>=OCONV(SCV.REC(14)<ESN,REF.NO>/INV.SBR,"MD2")
*         END CASE
**        ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE='END' THEN GOTO 19950
*         DEFAULT=SCV.REC(14)<ESN,REF.NO>
*         X=25; Y=SLN; CALL EDIT.SUB; IF VALUE='END' THEN GOTO 19950
*         ECD.RET.VALUE=VALUE * S.INV.SBR<1,REF.NO>
*         ECD.RET.VALUE=ECD.RET.VALUE * 10
*         RQ.VALUE=INT(((ECD.RET.VALUE/ICR.DV1<REF.NO,1>)*ICR.MT1<REF.NO,1>)/ICR.DV2<REF.NO,1>+.5)
*         WT.VALUE=INT(((RQ.VALUE/ICR.MT1<REF.NO,1>)*ICR.DV1<REF.NO,1>)*ICR.DV2<REF.NO,1>+.5)
*         OQ.VALUE=INT(WT.VALUE/10/S.INV.SBR<1,REF.NO>+.5)
*         SCV.REC(14)<ESN,REF.NO> = OQ.VALUE
*      CASE OQX<1,REF.NO>
*         TYP=3; MAXL=8; O.R='R'
*         MINV=0; MAXV=9999999
*         IF S.QTY<1,REF.NO> # '' THEN
*            O.R='O'
*            SCV.REC(14)<ESN,REF.NO>=INT(((S.QTY<1,REF.NO>/ICR.DV1<REF.NO,2>)*ICR.MT1<REF.NO,2>)/ICR.DV2<REF.NO,2>+.5)
*         END
**        ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE='END' THEN GOTO 19950
*         DEFAULT=SCV.REC(14)<ESN,REF.NO>
*         X=25; Y=SLN; CALL EDIT.SUB; IF VALUE='END' THEN GOTO 19950
*         ECD.RET.VALUE=VALUE
*         WT.VALUE=INT(((ECD.RET.VALUE/ICR.MT1<REF.NO,2>)*ICR.DV1<REF.NO,2>)*ICR.DV2<REF.NO,2>+.5)
*         RQ.VALUE=INT(((WT.VALUE/ICR.DV1<REF.NO,1>)*ICR.MT1<REF.NO,1>)/ICR.DV2<REF.NO,1>+.5)
*         WT.VALUE=INT(((RQ.VALUE/ICR.MT1<REF.NO,1>)*ICR.DV1<REF.NO,1>)*ICR.DV2<REF.NO,1>+.5)
*         OQ.VALUE=INT(((WT.VALUE/ICR.DV1<REF.NO,2>)*ICR.MT1<REF.NO,2>)/ICR.DV2<REF.NO,2>+.5)
*         SCV.REC(14)<ESN,REF.NO> = OQ.VALUE
*      CASE RQX<1,REF.NO>
*         MAXL=8; O.R='R'
*         MINV=0; MAXV=9999999  ;*T20896
*         BEGIN CASE
*            CASE ICR.CNV<REF.NO,1>="MD0"
*               TYP=3
*               MAXL=8
*               MAXV=9999999
*            CASE 1
*               TYP=4; SCALER=2
*               IF SCV.REC(14)<ESN,REF.NO> # '' THEN SCV.REC(14)<ESN,REF.NO> = ICONV(SCV.REC(14)<ESN,REF.NO>,ICR.CNV<REF.NO,1>)
*         END CASE
*         IF S.QTY<1,REF.NO> <> '' THEN
*            O.R='O'
*            SCV.REC(14)<ESN,REF.NO>=INT(((S.QTY<1,REF.NO>/ICR.DV1<REF.NO,1>) *ICR.MT1<REF.NO,1>)/ICR.DV2<REF.NO,1> + .5)
*            SCV.REC(14)<ESN,REF.NO>=OCONV(SCV.REC(14)<ESN,REF.NO>,ICR.CNV<REF.NO,1>)
**           IF SCV.REC(14)<ESN,REF.NO> # '' THEN SCV.REC(14)<ESN,REF.NO> = ICONV(SCV.REC(14)<ESN,REF.NO>,ICR.CNV<REF.NO,1>)
*         END
**        ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE='END' THEN GOTO 19950
*         DEFAULT=SCV.REC(14)<ESN,REF.NO>
*         X=25; Y=SLN; CALL EDIT.SUB; IF VALUE='END' THEN GOTO 19950
*IF @LOGNAME='lross' THEN DEBUG
*         ECD.RET.VALUE=VALUE
*         WT.VALUE=INT(((ECD.RET.VALUE/ICR.MT1<REF.NO,1>)*ICR.DV1<REF.NO,1>)*ICR.DV2<REF.NO,1>+.5)
*         OQ.VALUE=0
*         RQ.VALUE=INT(((WT.VALUE/ICR.DV1<REF.NO,1>)*ICR.MT1<REF.NO,1>)/ICR.DV2<REF.NO,1>+.5)
*         SCV.REC(14)<ESN,REF.NO> = RQ.VALUE
*   END CASE
*IF @LOGNAME='lross' THEN DEBUG
IF ECD.RET.VALUE = "" THEN
*      EOI=1
**     P_X =RQX<1,REF.NO> ; P_S$Y=SLN ; P_VALUE=OCONV(RQ.VALUE,ICR.CNV) "R#11" ; P_OPT=""
**     CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
**     RSMAN.MAN.TOT.WGT=RSMAN.MAN.TOT.WGT - S.QTY<1,REF.NO> + WT.VALUE
**     RSMAN.MAN.TOT.WGT=RSMAN.MAN.TOT.WGT - S.STK.QTY<1,REF.NO> + ECD.RET.VALUE
*      S.QTY<1,REF.NO>=WT.VALUE
*      S.STK.QTY<1,REF.NO>=RQ.VALUE
*   END ELSE
*      EOI=1
*      FLD=0
*T28300 ^
  SCV.REC(14)<ESN,REF.NO> = ""
  SCV.REC(15)<ESN,REF.NO> = ""
  SCV.REC(16)<ESN,REF.NO> = ""
  S.QTY<1,REF.NO> = ""
  S.QTY.ENTERED<1,REF.NO> = ""
  S.LOC<1,REF.NO> = ""
  S.MILL.ID<1,REF.NO> = ""
  ECD.SUB.NUM = REF.NO
  ECD.NUM=14; ECD.ACTION=5; CALL SCRN.EDIT
  ECD.SUB.NUM = REF.NO
  ECD.NUM=18; ECD.ACTION=5; CALL SCRN.EDIT
  ECD.SUB.NUM = REF.NO
  ECD.NUM=15; ECD.ACTION=5; CALL SCRN.EDIT
  ECD.SUB.NUM = REF.NO
  ECD.NUM=16; ECD.ACTION=5; CALL SCRN.EDIT
  GOTO 19950
END
TEMP.QTY.ENTERED = ECD.RET.VALUE
IF DIFF.UM<REF.NO> = "Y" THEN
*  IF OQX<1,REF.NO> AND ICR.DV1<REF.NO,2> # '' THEN ;*T28300
  TEMP.ROLL.WEIGHT = ECD.RET.VALUE
  IF ICR.CNV<REF.NO,2> = "MD0" THEN
    ECD.RET.VALUE = INT(((ECD.RET.VALUE/ICR.MT1<REF.NO,2>)*ICR.DV1<REF.NO,2>)*ICR.DV2<REF.NO,2> + .5)
  END
  IF ICR.CNV<REF.NO,1> = "MD0" THEN
    IF ICR.CNV<REF.NO,2> # "MD0" THEN
      ECD.RET.VALUE = ECD.RET.VALUE * 10
    END
    ECD.RET.VALUE = INT(((ECD.RET.VALUE/ICR.DV1<REF.NO,1>)*ICR.MT1<REF.NO,1>)/ICR.DV2<REF.NO,1> + .5)
    TEMP.STK.QTY = ECD.RET.VALUE
    ECD.RET.VALUE = INT(((ECD.RET.VALUE/ICR.MT1<REF.NO,1>)*ICR.DV1<REF.NO,1>)*ICR.DV2<REF.NO,1> + .5)
  END ELSE
    ECD.RET.VALUE = ECD.RET.VALUE * ICR.MT1<REF.NO,1> * 10
    TEMP.STK.QTY = ""
  END
END ELSE
  IF ICR.CNV<REF.NO,1> = "MD0" THEN
    TEMP.STK.QTY = ECD.RET.VALUE
    ECD.RET.VALUE = INT(((ECD.RET.VALUE/ICR.MT1<REF.NO,1>)*ICR.DV1<REF.NO,1>)*ICR.DV2<REF.NO,1> + .5)
  END ELSE
    ECD.RET.VALUE = ECD.RET.VALUE * 10
    TEMP.STK.QTY = ""
  END
END
TEMP.ROLL.WEIGHT = ECD.RET.VALUE
*
***********
ENT.WHSE: 
**********
*
IF S.WHSE<1,REF.NO>='' THEN
  ECD.SUB.NUM = REF.NO
  ECD.NUM=18
  ECD.ACTION=4; CALL SCRN.EDIT
  IF ECD.RET.VALUE = "END" THEN
    GOTO ENT.QTY
  END
  TEMP.WHSE = ECD.RET.VALUE
END ELSE
  TEMP.WHSE=S.WHSE<1,REF.NO>
END
  * T26497 v
IF CO.INTR.WHSE # '' AND TEMP.WHSE = CO.INTR.WHSE THEN
  ERRMSG = 'CAN NOT APPLY, USING AN INTER-DIVISIONAL WHSE IS RESTRICTED'
  SCV.REC(18)<ESN,REF.NO> = S.WHSE<1,REF.NO>
  GOSUB 91000 ; GOTO ENT.WHSE
END
  * T26497 ^
MATREAD IWH.REC FROM INV.WHSE, CONO: S.PROD.NO<1,REF.NO>:"!": TEMP.WHSE ELSE
  ERRMSG = "Inventory warehouse record cannot be found"
  GOSUB 91000
  SCV.REC(18)<ESN,REF.NO> = S.WHSE<1,REF.NO>
  GOTO ENT.WHSE
END
MATREAD WHSE.REC FROM WAREHOUSE, CONO:TEMP.WHSE ELSE
  MAT WHSE.REC = ""
END
IF WHS.DIV # PO.DIV.OWNER AND PO.DIV.OWNER # "00" THEN
  ERRMSG = "Warehouse Division does not match PO's owner Division"
  GOSUB 91000
  SCV.REC(18)<ESN,REF.NO> = S.WHSE<1,REF.NO>
  GOTO ENT.WHSE
END
*
**********
ENT.LOC: 
**********
*
IF TEMP.ROLL.WEIGHT = 0 THEN
  TEMP.LOC = ""
  SCV.REC(15)<ESN,REF.NO> = ""
  ECD.SUB.NUM = REF.NO
  ECD.NUM=15; ECD.ACTION=5; CALL SCRN.EDIT
END ELSE
  ECD.SUB.NUM = REF.NO
  ECD.NUM=15
  BEGIN CASE
    CASE REF.NO = 1
    CASE S.LOC<1,REF.NO> # ""
    CASE TEMP.WHSE # S.WHSE<1,REF.NO-1>
    CASE S.LOC<1,REF.NO-1> = ""
    CASE 1
      ECD.O.R = "O"
      ECD.DEFAULT = S.LOC<1,REF.NO-1>
  END CASE
  ECD.ACTION=4; CALL SCRN.EDIT 
  IF ECD.RET.VALUE = "END" THEN
    GOTO ENT.QTY
  END
  TEMP.LOC = ECD.RET.VALUE
  IF FIELD(TRIM(TEMP.LOC),' ',2) # "" OR TRIM(TEMP.LOC) = "" THEN
    ERRMSG = "You may not use SPACES in the Location ID"
    GOSUB 91000
    GOTO ENT.LOC
  END
  TEMP.LOC = TRIM(TEMP.LOC)
END
SCV.REC(15)<ESN,REF.NO> = TEMP.LOC
ECD.SUB.NUM = REF.NO
ECD.NUM=15; ECD.ACTION=5; CALL SCRN.EDIT
*
************
ENT.MILL.ID: 
************
*
IF TEMP.ROLL.WEIGHT = 0 THEN
  TEMP.MILL.ID = ""
  SCV.REC(16)<ESN,REF.NO> = ""
  ECD.SUB.NUM = REF.NO
  ECD.NUM=16; ECD.ACTION=5; CALL SCRN.EDIT
END ELSE
  ECD.SUB.NUM = REF.NO
  ECD.NUM=16
  ECD.ACTION=4; CALL SCRN.EDIT
  IF ECD.RET.VALUE = "END" THEN
    GOTO ENT.QTY
  END
  TEMP.MILL.ID = ECD.RET.VALUE
END
**** ADDED TO CHECK WHEN NEW SERIAL # IS ENTERED
*T28214 v
IF TEMP.MILL.ID # '' THEN ;*C44166
  IF S.SERIAL<1,REF.NO> # '' THEN
    MATREAD ISTK.REC FROM INV_SERIAL,CONO:S.SERIAL<1,REF.NO> THEN
      TEMP_REC = "OLD_RECORD"
    END ELSE
      TEMP_REC = "NEW_RECORD"
    END
*C44166 v Serial record if system gen'd will already be on file
*     IF TEMP_REC = "NEW_RECORD" THEN
    IF TEMP_REC = "NEW_RECORD" OR CATG.BARCODE = 'Y' THEN
      MATREAD MTS.REC FROM MILL_TO_SERIAL,CONO:ECD.RET.VALUE THEN
        ERRMSG = "MILL ROLL ID ALREADY EXISTS FOR SERIAL ID ":MTS.SERIAL
        GOSUB 91000
        GOTO ENT.MILL.ID
      END
      LOCATE ECD.RET.VALUE IN S.MILL.ID<1> SETTING RFND THEN
        IF RFND # REF.NO THEN
          ERRMSG = "MILL ROLL ID " : ECD.RET.VALUE : " FOUND ON LINE " : RFND
          GOSUB 91000
          GOTO ENT.MILL.ID
        END
      END
    END
  END
END ;*C44166
*T28214 ^
*
**********
11000 *
***********
*IF @LOGNAME='lross' THEN DEBUG
*
S.QTY.ENTERED<1,REF.NO> = TEMP.QTY.ENTERED
S.QTY<1,REF.NO> = TEMP.ROLL.WEIGHT
SS = REF.NO
GOSUB 45000
S.STK.QTY<1,REF.NO> = TEMP.STK.QTY
IF S.INV.PAP.TYPE<1,REF.NO>='ROLL' OR S.INV.PAP.TYPE='LROLL' OR S.INV.PAP.TYPE<1,REF.NO>='PCOAT' THEN
END
S.LOC<1,REF.NO> = TEMP.LOC
S.MILL.ID<1,REF.NO> = TEMP.MILL.ID
S.WHSE<1,REF.NO> = TEMP.WHSE
IF S.EDIT.DATE<1,REF.NO> # "" THEN EDIT.FLAG = 1
*
**********
19950 *
**********
*
*  IF S.UNIT<1,REF.NO> = "LBS" OR S.UNIT<1,REF.NO> = "MSI" THEN
IF S.UNIT<1,REF.NO> # 'SHT' AND S.UNIT<1,REF.NO> # 'PC' AND S.UNIT<1,REF.NO> # 'FT' THEN
  SCV.REC(14)<ESN,REF.NO> = OCONV(S.QTY.ENTERED<1,REF.NO>, "MD2")
END
IF MODE = "A" AND ECD.RET.VALUE = "END" THEN SCV.REC(14)<ESN,REF.NO> = ""
GOSUB LOAD.MLINES
GOSUB UPDATE.TOTALS
RETURN
*
*T27306 v & T27902 v
************
ENT.PRODUCT: 
************
ECD.SUB.NUM = REF.NO
ECD.O.R='O'
IF PO.PROD.NUM<1,PO.LINE> # '' THEN
  ECD.DEFAULT=PO.PROD.NUM<1,PO.LINE>
END ELSE
  ECD.O.R='R'
END
ECD.NUM=34
ECD.MAXL = 15
ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE='END' THEN RETURN
*T27902 v
IF ECD.RET.VALUE = '' OR ECD.RET.VALUE = '???' THEN
  ECD.NUM=56
  ECD.MAXL = 15
  ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE='END' THEN GOTO ENT.PRODUCT
  IF ECD.RET.VALUE # '' THEN
    GXR.NAME = "INVENTORY"
    GXR.XREF = INVENTORY.XREF
    GXR.FILE = INVENTORY
    GXR.SRCH.ID = ECD.RET.VALUE
    CALL GEN.XREF.SUB(MAT GEN.XREF.REC, PREFIX, XREF.DATA)
    ECD.ACTION = 2; CALL SCRN.EDIT
    ECD.ACTION = 3; CALL SCRN.EDIT
    GOSUB SCROLL.ROUTINE
    IF GXR.ID = '' THEN GOTO ENT.PRODUCT
    ECD.RET.VALUE = GXR.ID
  END ELSE GOTO ENT.PRODUCT
END
*T27902 ^
MATREAD INV.REC FROM INVENTORY,CONO:ECD.RET.VALUE ELSE
  ERRMSG='Invalid Product ID'
  GOSUB 91000
  GOTO ENT.PRODUCT
END
*T27902 v
MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE ELSE MAT CATG.REC = ""
IF CATG.TRK.LVL # "S" THEN
  ERRMSG='Product is not serially tracked - use Regular Stock Receipts.'
  GOSUB 91000
  GOTO ENT.PRODUCT
END
IF CATG.INV="" OR CATG.ACCRU.LIAB="" OR CATG.AP.ACCT="" THEN
  ERRMSG="ACCOUNT DETAILS NOT SET UP FOR PRODUCT LINE '":INV.LINE:"'"
  GOSUB 91000
  GOTO ENT.PRODUCT
END
IF INV.M.LINE="FNGD" THEN
  ERRMSG="FINISHED GOODS INVENTORY CAN'T BE RECEIVED"
  GOSUB 91000
  GOTO ENT.PRODUCT
END
CHG.PROD=0
IF PO.PROD.NUM<1,PO.LINE> # "" AND PO.PROD.NUM<1,PO.LINE> # ECD.RET.VALUE THEN
  ERRMSG='PO LINE# ':PO.LINE:' already has product ':PO.PROD.NUM<1,PO.LINE>
  GOSUB 91000
  IF NOT(PO.PRESENT) THEN
    ECD.NUM=54
    HOLD.SVALUE = ECD.RET.VALUE
    ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE='END' THEN GOTO ENT.PRODUCT
    IF ECD.RET.VALUE = 'Y' THEN
      ECD.RET.VALUE=HOLD.SVALUE
      CHG.PROD=1
    END ELSE
      ECD.RET.VALUE=PO.PROD.NUM<1,PO.LINE>
    END
  END ELSE
    ECD.RET.VALUE=PO.PROD.NUM<1,PO.LINE>
  END
  MATREAD INV.REC FROM INVENTORY,CONO:ECD.RET.VALUE ELSE
    ERRMSG='Invalid Product ID'
    GOSUB 91000
    GOTO ENT.PRODUCT
  END
END
IF CHG.PROD THEN
  FOR SS = 1 TO DCOUNT(S.SERIAL,VM)
    IF S.PO.LINE.NO<1,SS> = PO.LINE THEN
      S.PROD.NO<1,SS>=ECD.RET.VALUE
      S.INV.FULL.DESC<1,SS>=INV.FULL.DESC
      S.INV.PAP.TYPE<1,SS>=INV.PAP.TYPE
    END
  NEXT SS
END
S.PROD.NO<1,REF.NO>=ECD.RET.VALUE
S.INV.FULL.DESC<1,REF.NO>=INV.FULL.DESC
S.INV.PAP.TYPE<1,REF.NO>=INV.PAP.TYPE
SCV.REC(23)<ESN> = S.PROD.NO<1,REF.NO>:" , ":S.INV.FULL.DESC<1,REF.NO>:" , ":S.INV.PAP.TYPE<1,REF.NO>
ECD.NUM=23 ; ECD.ACTION=5; CALL SCRN.EDIT
*T27902 ^
PO.PROD.NUM<1,PO.LINE> = ECD.RET.VALUE
PO.UNIT.FLG<1,PO.LINE> = INV.UNIT<1,1>
*********
ENT.WAREHOUSE: 
*********
ECD.O.R='O'
IF PO.WHSE<1,1> # '' THEN
  ECD.DEFAULT=PO.WHSE<1,1>
END ELSE
  ECD.O.R='R'
END
ECD.VALDAT=INV.WHSE.CODE<1,1>
ECD.HMSG=INV.WHSE.CODE<1,1>
FOR I = 2 TO DCOUNT(INV.WHSE.CODE,VM)
  ECD.VALDAT := ',':INV.WHSE.CODE<1,I>
  ECD.PMSG:=',':INV.WHSE.CODE<1,I>
NEXT I
ECD.NUM=35
ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE='END' THEN GOTO ENT.PRODUCT
LOCATE ECD.RET.VALUE IN INV.WHSE.CODE<1> SETTING WFND ELSE
  ERRMSG='Invalid warehouse for product'
  GOSUB 91000
  GOTO ENT.WAREHOUSE
END
INV.WHSE.KEY=CONO:PO.PROD.NUM<1,PO.LINE>:'!':ECD.RET.VALUE
MATREAD IWH.REC FROM INV.WHSE , INV.WHSE.KEY ELSE
  ERRMSG='Cannot Locate INV.WHSE - ':INV.WHSE.KEY
  GOSUB 91000; GOTO ENT.PRODUCT
END
MATREAD WHSE.REC FROM WAREHOUSE, CONO:ECD.RET.VALUE ELSE
  ERRMSG="Warehouse ":ECD.RET.VALUE:" not on file"
  GOSUB 91000; GOTO ENT.PRODUCT
END
IF PO.LINE = 1 AND NOT(PO.PRESENT) THEN
  DIV.CODE = WHS.DIV; USER.ID = UPCASE(@LOGNAME); ERRMSG = ''
  CALL CK.DIV.SEC.SUB(CONO,DIV.CODE,USER.ID,ERRMSG)
  IF ERRMSG # '' THEN
    GOSUB 91000
    GOTO ENT.WAREHOUSE
  END
  PO.DIV.OWNER = WHS.DIV
END
IF PO.LINE > 1 AND NOT(PO.PRESENT) THEN
  IF PO.DIV.OWNER # '00' AND WHS.DIV # PO.DIV.OWNER THEN
    ERRMSG='Warehouse DIV must be ':PO.DIV.OWNER
    GOSUB 91000
    GOTO ENT.WAREHOUSE
  END
END
PO.WHSE<1,PO.LINE> = ECD.RET.VALUE
*******
ENT.PRICE: 
*******
LOCATE PO.VEND.NO IN INV.VENDOR<1>,1 SETTING VV ELSE VV=0 
IF VV THEN PO.GROS.PRICE<1,PO.LINE>=INV.PRICE<1,VV>
IF PO.GROS.PRICE<1,PO.LINE>='' THEN
  ECD.O.R='R'
END ELSE
  ECD.O.R='O'
  ECD.DEFAULT=PO.GROS.PRICE<1,PO.LINE>
END
ECD.NUM=36
ECD.MAXL = 9
ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE='END' THEN GOTO ENT.WAREHOUSE
PO.GROS.PRICE<1,PO.LINE> = ECD.RET.VALUE
*T27902 v
********
ENT.UOM: 
********
IF S.UNIT<1,REF.NO> # '' THEN
  ECD.DEFAULT = S.UNIT<1,REF.NO>
END ELSE
  ECD.O.R='O'
  ECD.DEFAULT = INV.UNIT<1,1>
END
ECD.VALDAT=INV.UNIT<1,1> ; ECD.PMSG=INV.UNIT<1,1>
IF INV.UNIT<1,1> # INV.UNIT<1,2> THEN
  ECD.VALDAT=ECD.VALDAT:',':INV.UNIT<1,2>
  ECD.PMSG=ECD.PMSG :" , ":INV.UNIT<1,2>
END
IF INV.UNIT<1,1> # INV.UNIT<1,3> THEN
  ECD.VALDAT=ECD.VALDAT:',':INV.UNIT<1,3>
  ECD.PMSG=ECD.PMSG:" , ":INV.UNIT<1,3>
END
ECD.NUM=55
ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE='END' THEN GOTO ENT.PRICE
S.UNIT<1,REF.NO>=ECD.RET.VALUE
PO.UNIT.FLG<1,PO.LINE>=ECD.RET.VALUE
*T27902 ^
RETURN
*
*T27306 ^
**************
LOAD.S.REC: 
**************
*
DSR.ID = CONO:PO.NO:"!":MANIFEST
MATREADU DSR.REC FROM DAILY_STOCK,DSR.ID THEN
  LINE.CNT = 0
  S.CNT = DCOUNT(S.SERIAL,VM)
  LINE.CNT = S.CNT
  FOR SS=1 TO S.CNT
    MATREAD ISTK.REC FROM INV_SERIAL,CONO:S.SERIAL<1,SS> ELSE            
      MATREAD ISTK.REC FROM INV_SERIAL_DELETED,CONO:S.SERIAL<1,SS> ELSE  
        MAT ISTK.REC = ""                                                  
        ERRMSG = "Serial information record cannot be found":S.SERIAL<1,SS>
        GOTO 93000                                                         
      END                                                                  
    END
    INV.ID=CONO:ISTK.PROD
    IWH.ID=INV.ID:"!":ISTK.WHSE
    GOSUB CHECK.DATA
    FIND S.SERIAL<1,SS> IN DSR.SERIAL SETTING FLD,VL,SVL THEN
      S.EDIT.DATE<1,SS> = DSR.EDIT.DATE
      S.PROD.NO<1,SS> = DSR.PROD<1,VL>
      S.COMPLETE<1,SS> = DSR.COMPLETE<1,VL> ; * T27920
      S.WHSE<1,SS> = DSR.WHSE<1,VL>
      S.UN.PRICE<1,SS> = DSR.UN.PRICE<1,VL>
      S.UNIT<1,SS> = DSR.UOM<1,VL>
      S.STATUS=DSR.STATUS
      S.QTY<1,SS> = DSR.QTY<1,VL,SVL>
      S.STK.QTY<1,SS> =DSR.STK.QTY<1,VL,SVL>
      S.LOC<1,SS> = DSR.LOC<1,VL,SVL>
      S.MILL.ID<1,SS> = DSR.MILL.ID<1,VL,SVL>
      S.POST.DATE<1,SS> =  ISTK.POST.DATE
      S.INV.FULL.DESC<1,SS> = INV.FULL.DESC
      S.QTY.ENTERED<1,SS> = ISTK.QTY.ENTERED
*T27904 v
      IF S.QTY.ENTERED<1,SS> = "" THEN
        S.QTY.ENTERED<1,SS> = DSR.QTY.ENTERED<1,VL,SVL>
      END
*T27904 ^
      S.INV.PAP.TYPE<1,SS> = INV.PAP.TYPE     
      S.INV.M.WT<1,SS> = INV.M.WT             
      S.INV.PAP.WIDTH<1,SS> = INV.PAP.WIDTH   
      FOR I = 1 TO 4                          
        S.INV.UNIT<1,SS,-1>=INV.UNIT<1,I>
      NEXT I                                  
      S.INV.SBR<1,SS> = INV.SBR ;*T28300
      GOSUB GET.CONV                          
    END
  NEXT SS
END ELSE
  MAT DSR.REC=""
  S.CNT=DCOUNT(S.SERIAL<1>,VM)
  LINE.CNT = S.CNT
  FOR SS=1 TO S.CNT
    MATREAD ISTK.REC FROM INV_SERIAL,CONO:S.SERIAL<1,SS> ELSE            
      MATREAD ISTK.REC FROM INV_SERIAL_DELETED,CONO:S.SERIAL<1,SS> ELSE
        MAT ISTK.REC = ""                                                  
        ERRMSG = "Serial information record cannot be found":S.SERIAL<1,SS>
        GOTO 93000                                                         
      END                                                                  
    END
    INV.ID=CONO:ISTK.PROD
    IWH.ID=INV.ID:"!":ISTK.WHSE
    GOSUB CHECK.DATA
    GOSUB SET.S.REC
    GOSUB GET.CONV
  NEXT SS
END
*T27904 v
IF PO.DATE = '' AND DSR.TYPE = 'J' THEN
  GOSUB JANUS.PO.CHANGE
  IF ABORT.FLAG THEN GOTO 100
END
*T27904 ^
RETURN
*
***************
CHECK.DATA: 
****************
*
INV.PRESENT = 1
IWH.PRESENT = 1
IF PO.NO = "*BAD*" THEN
  INV.PRESENT = 0
  IWH.PRESENT = 0
  MAT INV.REC = ""
  MAT IWH.REC = ""
END ELSE
  MATREAD INV.REC FROM INVENTORY,INV.ID ELSE
    INV.PRESENT = 0
    IWH.PRESENT = 0
    MAT INV.REC = ""
    MAT IWH.REC = ""
    ERRMSG = "Inventory record cannot be found - ":ISTK.PROD
    GOSUB 91000
    S.STATUS = "INV.REC. MISSING"
  END
  IF INV.PRESENT THEN
    MATREAD IWH.REC FROM INV.WHSE,IWH.ID ELSE
      MAT IWH.REC = ""
      ERRMSG = "Inventory warehouse record cannot be found - ":IWH.ID
      GOSUB 91000
      S.STATUS = "IWH.REC":IWH.ID:" IS MISSING"
    END
  END
  IF S.STATUS = '' THEN
    MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
      ERRMSG = "Product Line '":INV.LINE:"' Missing"; GOSUB 91000
      S.STATUS = ERRMSG
    END
    IF S.STATUS = '' THEN
      IF CATG.INV="" OR CATG.ACCRU.LIAB="" OR CATG.AP.ACCT="" THEN
        ERRMSG = "Acct Details Missing for Prod Line '":INV.LINE:"'"; GOSUB 91000
        S.STATUS = ERRMSG
      END
    END
  END
END
RETURN
*
***********
GET.CONV: 
***********
*IF @LOGNAME='lross' THEN DEBUG
*
IF NOT(INV.PRESENT) THEN
  SCV.REC(14)<ESN,SS> = S.QTY.ENTERED<1,SS>
  RETURN
END
*T28300 v
BEGIN CASE
  CASE S.INV.UNIT<1,SS,2> = "SHT" AND S.INV.UNIT<1,SS,3> = "LBS"
    ICR.CNV<SS,1> = "MD0"; ICR.DV2<SS,1> = 1
    ICR.DV1<SS,1> = S.INV.M.WT<1,SS>; ICR.MT1<SS,1> = 1
*        IF S.UNIT<1,SS> = S.INV.UNIT<1,SS,2> THEN RQX<1,SS> = 1
*        IF S.UNIT<1,SS> = 'LBS' THEN OQX<1,SS> = 1; RQX<1,SS> = 1
  CASE S.INV.UNIT<1,SS,2> = "PC" AND S.INV.UNIT<1,SS,3> = "MSI"
    ICR.CNV<SS,1> = "MD0"; ICR.DV2<SS,1> = 1
    ICR.DV1<SS,1>=S.INV.PAP.WIDTH<1,SS>/100;ICR.MT1<SS,1>=10
*        IF S.UNIT<1,SS> = 'PC' THEN RQX<1,SS> = 1
*        IF S.UNIT<1,SS> = 'MSI' THEN OQX<1,SS> = 1; RQX<1,SS> = 1
*        IF S.UNIT<1,SS> = 'FT' THEN
*          ICR.DV1<SS,2>=S.INV.PAP.WIDTH<1,SS>/100; ICR.MT1<SS,2>=100
*          ICR.DV2<SS,2>=12; OQX<1,SS> = 1; RQX<1,SS> = 1
*        END
  CASE S.INV.UNIT<1,SS,2> = "FT" AND S.INV.UNIT<1,SS,3> = "MSI"
    ICR.CNV<SS,1> = "MD0"; ICR.DV2<SS,1> = 12
    ICR.DV1<SS,1>=S.INV.PAP.WIDTH<1,SS>/100;ICR.MT1<SS,1>=100
*        IF S.UNIT<1,SS> = 'FT' THEN RQX<1,SS> = 1
*        IF S.UNIT<1,SS> = 'MSI' THEN OQX<1,SS> = 1; RQX<1,SS> = 1
*        IF S.UNIT<1,SS> = 'PC' THEN
*          ICR.DV1<SS,2>=S.INV.PAP.WIDTH<1,SS>/100;ICR.MT1<SS,2>=10
*          ICR.DV2<SS,2>=1; OQX<1,SS> = 1; RQX<1,SS> = 1
*        END
  CASE 1
    ICR.CNV<SS,1> = "MD2"; ICR.DV2<SS,1> = 1
    ICR.DV1<SS,1> = 10; ICR.MT1<SS,1> = S.INV.SBR<1,SS>
*        IF S.UNIT<1,SS> # S.INV.UNIT<1,SS,2> THEN
*          OQX<1,SS>=1 ; RQX<1,SS> =1
*        END ELSE RQX<1,SS> = 1
*T28300 ^
END CASE
*T28300 v T28422 v Undo
BEGIN CASE
  CASE S.UNIT<1,SS>="SHT" AND S.INV.UNIT<1,SS,3>="LBS"
    ICR.CNV<SS,2> = "MD0"; ICR.DV2<SS,2> = 1
    ICR.DV1<SS,2> = S.INV.M.WT<1,SS>; ICR.MT1<SS,2> = 1
  CASE S.UNIT<1,SS>="PC" AND S.INV.UNIT<1,SS,3>="MSI"
    ICR.CNV<SS,2> = "MD0"; ICR.DV2<SS,2> = 1
    ICR.DV1<SS,2>=S.INV.PAP.WIDTH<1,SS>/100;ICR.MT1<SS,2>=10
  CASE S.UNIT<1,SS>="FT" AND S.INV.UNIT<1,SS,3>="MSI"
    ICR.CNV<SS,2> = "MD0"; ICR.DV2<SS,2> = 12
    ICR.DV1<SS,2>=S.INV.PAP.WIDTH<1,SS>/100;ICR.MT1<SS,2>=100
  CASE 1
    ICR.CNV<SS,2> = "MD2"; ICR.DV2<SS,2> = 1
    ICR.DV1<SS,2> = 10; ICR.MT1<SS,2> = 1
END CASE
IF S.UNIT<1,SS> # S.INV.UNIT<1,SS,2> THEN 
  DIFF.UM<SS> = "Y" 
END ELSE
  DIFF.UM<SS> = "N"
END
*
***********
45000 *
***********
*
*  IF S.UNIT<1,SS> = "LBS" OR S.UNIT<1,SS> = "MSI" THEN 
IF S.UNIT<1,SS> # 'SHT' AND S.UNIT<1,SS> # 'PC' AND S.UNIT<1,SS> # 'FT' THEN
  SCV.REC(14)<ESN,SS> = OCONV(S.QTY.ENTERED<1,SS>,"MD2")
END ELSE
  SCV.REC(14)<ESN,SS> = S.QTY.ENTERED<1,SS>
END
GOSUB SCROLL.ROUTINE
RETURN
*
***************
SCROLL.ROUTINE: 
***************
*
START.REF.NO = 1 + INT((REF.NO-1)/PAGE.SIZE)*PAGE.SIZE
IF START.REF.NO = CURR.REF.NO THEN RETURN
CURR.REF.NO = START.REF.NO
ECD.NUM=11; ECD.SUB.NUM=START.REF.NO; ECD.ACTION=7; CALL SCRN.EDIT
ECD.NUM=12; ECD.SUB.NUM=START.REF.NO; ECD.ACTION=7; CALL SCRN.EDIT
ECD.NUM=13; ECD.SUB.NUM=START.REF.NO; ECD.ACTION=7; CALL SCRN.EDIT
ECD.NUM=14; ECD.SUB.NUM=START.REF.NO; ECD.ACTION=7; CALL SCRN.EDIT
ECD.NUM=30; ECD.SUB.NUM=START.REF.NO; ECD.ACTION=7; CALL SCRN.EDIT
ECD.NUM=18; ECD.SUB.NUM=START.REF.NO; ECD.ACTION=7; CALL SCRN.EDIT
ECD.NUM=15; ECD.SUB.NUM=START.REF.NO; ECD.ACTION=7; CALL SCRN.EDIT
ECD.NUM=16; ECD.SUB.NUM=START.REF.NO; ECD.ACTION=7; CALL SCRN.EDIT
ECD.NUM=51; ECD.SUB.NUM=START.REF.NO; ECD.ACTION=7; CALL SCRN.EDIT
RETURN
*
******************
LOAD.HEADER.DATA: 
******************
*
SCV.REC(3)<ESN>  = PO.VEND.NO
SCV.REC(4)<ESN>  = VEND.DESC
SCV.REC(5)<ESN>  = RSMAN.MAN.NO
SCV.REC(6)<ESN>  = RSMAN.MAN.TOT.WGT
SCV.REC(50)<ESN> = RSMAN.ENTRY.DATE  
SCV.REC(53)<ESN> = RSMAN.PERIOD
RETURN
*
**************
LOAD.MLINES: 
**************
*
SCV.REC(13)<ESN> = S.SERIAL
SCV.REC(18)<ESN> = S.WHSE
SCV.REC(15)<ESN> = S.LOC
SCV.REC(16)<ESN> = S.MILL.ID
SCV.REC(30)<ESN> = S.UNIT
SCV.REC(51)<ESN> = S.POST.DATE
RETURN
*
***************
UPDATE.TOTALS: 
***************
*IF @LOGNAME='lross' THEN DEBUG
*
ENTERED = ""
TCNT = DCOUNT(S.SERIAL,VM)
FOR TPTR = 1 TO TCNT
  IF S.POST.DATE<1,TPTR> = "" THEN
*        IF S.UNIT<1,TPTR> = "LBS" OR S.UNIT<1,TPTR> = "MSI" THEN
    IF S.UNIT<1,TPTR> # 'SHT' AND S.UNIT<1,TPTR> # 'PC' AND S.UNIT<1,TPTR> # 'FT' THEN
      ENTERED+=S.QTY.ENTERED<1,TPTR>
    END ELSE
      ENTERED+=S.QTY.ENTERED<1,TPTR>*100
    END
  END
NEXT TPTR
SCV.REC(28)<ESN> = ENTERED
ECD.NUM=28; ECD.ACTION=5; CALL SCRN.EDIT
IF RSMAN.MAN.TOT.WGT = "" THEN
  BALANCE = ""
END ELSE
  BALANCE = RSMAN.MAN.TOT.WGT - ENTERED
END
SCV.REC(29)<ESN> = BALANCE
ECD.NUM=29; ECD.ACTION=5; CALL SCRN.EDIT
RETURN
*
*
**********
SET.S.REC: 
**********
*
S.PO.LINE.NO<1,SS> = ISTK.PO.LINE      
S.PROD.NO<1,SS> = ISTK.PROD            
S.MILL.ID<1,SS> = ISTK.MILL.ID    
S.QTY<1,SS> = ISTK.ORG.QTY            
S.QTY.ENTERED<1,SS> = ISTK.QTY.ENTERED 
S.STK.QTY<1,SS> = ISTK.ORG.STK.QTY    
S.WHSE<1,SS> = ISTK.WHSE               
S.LOC<1,SS> = ISTK.LOC                 
S.POST.DATE<1,SS> = ISTK.POST.DATE     
S.EDIT.DATE<1,SS> = ISTK.EDIT.DATE     
S.UN.PRICE<1,SS> = ISTK.UNIT.COST
S.INV.FULL.DESC<1,SS> = INV.FULL.DESC
S.INV.PAP.TYPE<1,SS> = INV.PAP.TYPE
S.INV.M.WT<1,SS> = INV.M.WT
S.INV.PAP.WIDTH<1,SS> = INV.PAP.WIDTH
*  S.UNIT<1,SS> = ISTK.UOM
*T28422 v
BEGIN CASE
  CASE ISTK.UOM # ''
    S.UNIT<1,SS> = ISTK.UOM
  CASE PO.JB.UNITS<1,S.PO.LINE.NO<1,SS>> # ''
    S.UNIT<1,SS> = PO.JB.UNITS<1,S.PO.LINE.NO<1,SS>> ;*T28300
  CASE 1
    S.UNIT<1,SS> = INV.UNIT<1,1>
END CASE
*T28422 ^
FOR I = 1 TO 4
  S.INV.UNIT<1,SS,I> = INV.UNIT<1,I>
NEXT I
S.INV.SBR<1,SS> = INV.SBR ;*T28300
RETURN
* T26556 v
**********
ADD.SERIAL: 
**********
MODE = "A"
DONE = 0
OLD.PO.LINE = ''
FOR REF.NO = LINE.CNT+1 TO 999 UNTIL DONE ;* T20697
  IF OLD.PO.LINE = '' THEN
    ECD.MINV = 1
    ECD.MAXV = DCOUNT(PO.PROD.NUM,VM)
    IF ECD.MAXV+0 < ECD.MINV THEN ECD.MAXV = ECD.MINV ;*T27306
    IF MANUAL.ENTRY THEN ECD.MAXV +=1 ;*T27306
    ECD.NUM=27
    ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE='END' THEN GOTO ENT.OPTION
    PO.LINE=ECD.RET.VALUE
*T27306 v
    IF MANUAL.ENTRY THEN
      GOSUB ENT.PRODUCT
      IF ECD.RET.VALUE='END' THEN GOTO ENT.OPTION
*T28064 Move logic below only on 1st Add of PO line.
*        END
    END ELSE
      MATREAD INV.REC FROM INVENTORY, CONO:PO.PROD.NUM<1,PO.LINE> ELSE MAT INV.REC = ""
      SCV.REC(23)<ESN> = PO.PROD.NUM<1,PO.LINE>:" , ":INV.FULL.DESC:" , ":INV.PAP.TYPE
      ECD.NUM=23; ECD.ACTION=5; CALL SCRN.EDIT
      MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE ELSE MAT CATG.REC=''
      IF CATG.TRK.LVL#'S' THEN
        ERRMSG = 'PO line item is not a serial tracked item.'
        GOSUB 91000
        GOTO ADD.SERIAL
      END ELSE
        IF DCOUNT(PO.PROD.NUM,VM) > 1 THEN
          ECD.NUM=59
          ECD.ACTION=4; CALL SCRN.EDIT; IF ECD.RET.VALUE='END' THEN GOTO ADD.SERIAL
          IF ECD.RET.VALUE = 'N' THEN
            SCV.REC(23)<ESN>=''
            ECD.NUM=23; ECD.ACTION=5; CALL SCRN.EDIT
            GOTO ADD.SERIAL
          END
        END
      END
    END
*T28064 ^
  END ELSE
    PO.LINE = OLD.PO.LINE
  END
  LINE.CNT = LINE.CNT + 1
  GOSUB SCROLL.ROUTINE
* T26556 v T28064 Moved above to inside IF OLD.PO.LINE ...
*     MATREAD INV.REC FROM INVENTORY, CONO:PO.PROD.NUM<1,PO.LINE> ELSE MAT INV.REC = ""
*     MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE ELSE MAT CATG.REC=''
*     IF CATG.TRK.LVL='S' THEN
  GOSUB GET.MLINE.DATA
*     END ELSE
*        ERRMSG = 'PO line item is not a serial track item.'
*        GOSUB 91000
*        ECD.RET.VALUE = 'END'
*     END
* T26556 ^
  IF ECD.RET.VALUE = "END" THEN
    DONE = 1
    LINE.CNT = LINE.CNT - 1
    GOSUB DEL.MLINE.DATA
    SCV.REC(13) = DELETE(SCV.REC(13),ESN,REF.NO,0)
    SCV.REC(14) = DELETE(SCV.REC(14),ESN,REF.NO,0)
    SCV.REC(23) = DELETE(SCV.REC(23),ESN,0,0)
    SCV.REC(30) = DELETE(SCV.REC(30),ESN,REF.NO,0)
  END
  OLD.PO.LINE = PO.LINE
NEXT REF.NO
REF.NO = LINE.CNT
CURR.REF.NO = ""
GOSUB SCROLL.ROUTINE
  *
RETURN
****************
BUILD.NEW.SERIAL: 
****************
S.EDIT.DATE<1,REF.NO>=''
S.STATUS=''
S.QTY<1,REF.NO>=''
S.STK.QTY<1,REF.NO>=''
S.LOC<1,REF.NO>=''
S.MILL.ID<1,REF.NO>=''
S.POST.DATE<1,REF.NO>=''
S.QTY.ENTERED<1,REF.NO>=''
LOCATE PO.LINE IN S.PO.LINE.NO<1>,1 SETTING LPOS THEN
  S.PO.LINE.NO<1,REF.NO>=PO.LINE
  S.PROD.NO<1,REF.NO> = S.PROD.NO<1,LPOS>
  S.WHSE<1,REF.NO>=S.WHSE<1,LPOS>
  S.UN.PRICE<1,REF.NO>=S.UN.PRICE<1,LPOS>
  S.UNIT<1,REF.NO> = S.UNIT<1,LPOS>
  S.INV.FULL.DESC<1,REF.NO> = S.INV.FULL.DESC<1,LPOS>
  S.INV.PAP.TYPE<1,REF.NO> = S.INV.PAP.TYPE<1,LPOS>
  S.INV.M.WT<1,REF.NO> = S.INV.M.WT<1,LPOS>
  S.INV.PAP.WIDTH<1,REF.NO> = S.INV.PAP.WIDTH<1,LPOS>
  FOR I = 1 TO 4 
    S.INV.UNIT<1,REF.NO,I> = S.INV.UNIT<1,LPOS,I>
  NEXT I
  S.INV.SBR<1,REF.NO> = S.INV.SBR<1,LPOS> ;*T28300
  SS = REF.NO; GOSUB GET.CONV
END ELSE
  S.PO.LINE.NO<1,REF.NO>=PO.LINE
  S.PROD.NO<1,REF.NO>=PO.PROD.NUM<1,PO.LINE>
  S.WHSE<1,REF.NO>=PO.WHSE<1,PO.LINE>
  S.UN.PRICE<1,REF.NO>=PO.GROS.PRICE<1,PO.LINE>
  S.UNIT<1,REF.NO>=PO.UNIT.FLG<1,PO.LINE>
  INV.ID=CONO:S.PROD.NO<1,REF.NO>
  IWH.ID=INV.ID:"!":S.WHSE<1,REF.NO>
  GOSUB CHECK.DATA
  IF S.STATUS#'' THEN
    ERRMSG=S.STATUS
    GOSUB 91000
    BAD.SERIAL.BUILD = 1 ; RETURN
  END ELSE
    S.INV.FULL.DESC<1,REF.NO>=INV.FULL.DESC
    S.INV.PAP.TYPE<1,REF.NO>=INV.PAP.TYPE
    S.INV.M.WT<1,REF.NO>=INV.M.WT
    S.INV.PAP.WIDTH<1,REF.NO>=INV.PAP.WIDTH
    FOR I=1 TO 4
      S.INV.UNIT<1,REF.NO,I>=INV.UNIT<1,I>
    NEXT I
    S.INV.SBR<1,REF.NO> = INV.SBR ;*T28300
    SS = REF.NO; GOSUB GET.CONV
  END
END
  *
RETURN
* T26556 ^
*T27904 v
*
***************
JANUS.PO.CHANGE: 
***************
*
OLD.DSR.ID = DSR.ID
ABORT.FLAG = 0
ECD.NUM=57
ECD.MAXL = 8
ECD.ACTION=4; CALL SCRN.EDIT
IF ECD.RET.VALUE = 'END' THEN ABORT.FLAG = 1;RETURN
MATREAD PO.REC FROM PO, CONO:ECD.RET.VALUE ELSE
  ERRMSG = 'PO # not on file.'
  GOSUB 91000
  GOTO JANUS.PO.CHANGE
END
PO.NO = ECD.RET.VALUE
ECD.NUM=58
ECD.MAXL = 20
ECD.DEFAULT = MANIFEST
ECD.ACTION=4; CALL SCRN.EDIT
IF ECD.RET.VALUE = 'END' THEN ABORT.FLAG = 1;RETURN
MANIFEST = ECD.RET.VALUE
NEW.DSR.ID = CONO:PO.NO:"!":MANIFEST
READU CHECKIT FROM DAILY_STOCK, NEW.DSR.ID LOCKED
  ERRMSG = 'Daily Stock record is locked by user - ':GETUSERNAME(STATUS())
  GOSUB 91000
  GOTO JANUS.PO.CHANGE
END ELSE CHECKIT = ''
IF CHECKIT # '' THEN
  ERRMSG = 'There is already a daily stock record with the same PO and Manifest #.'
  GOSUB 91000
  GOTO JANUS.PO.CHANGE
END
DSR.ID = NEW.DSR.ID
RSMAN.MAN.NO = MANIFEST
SCV.REC(2)<ESN> = PO.NO
ECD.NUM=2; ECD.ACTION=5; CALL SCRN.EDIT
SCV.REC(5)<ESN> = MANIFEST
ECD.NUM=5; ECD.ACTION=5; CALL SCRN.EDIT
MATREADU RSXRF.REC FROM PO.RSKI.XREF, CONO: PO.NO LOCKED
  ERRMSG = 'P/O record is locked by user - ':GETUSERNAME(STATUS())
  GOSUB 91000;GOTO 100 
END ELSE MAT RSXRF.REC = ''
   *** UPDATE THE DAILY STOCK RECORD ***
FOR S = 1 TO S.CNT
  LNO = S.PO.LINE.NO<1,S>
  DSR.PROD<1,S> = PO.PROD.NUM<1,LNO>
  DSR.WHSE<1,S> = PO.WHSE<1,LNO>
  DSR.UOM<1,S> = PO.JB.UNITS<1,LNO>
  S.PROD.NO<1,S> = PO.PROD.NUM<1,LNO>
  S.WHSE<1,S> = PO.WHSE<1,LNO>
  S.UNIT<1,S> = PO.JB.UNITS<1,LNO>
NEXT S
RETURN
*T27904 ^
*
*T27928 v
*
FILE.SUB: 
*
LOCATE '' IN S.QTY.ENTERED<1> SETTING JUNK THEN
  ECD.NUM=52 
  ECD.ACTION=4; CALL SCRN.EDIT 
  IF ECD.RET.VALUE='Y' THEN
    FOR REF.NO = LINE.CNT TO 1 STEP -1
      IF S.QTY.ENTERED<1,REF.NO>='' AND S.POST.DATE<1,REF.NO>='' THEN
        SCV.REC(12)<ESN,REF.NO>='X'
      END
    NEXT REF.NO
  END
END
FOR REF.NO = LINE.CNT TO 1 STEP -1
  IF SCV.REC(12)<ESN,REF.NO> = "X" THEN
    ISTK.ID = CONO:S.SERIAL<1,REF.NO>
    MATREAD ISTK.REC FROM INV_SERIAL_DELETED,ISTK.ID THEN
      ERRMSG = 'Cannot delete received Serial ':S.SERIAL<1,REF.NO>
      GOSUB 91000
    END ELSE
      MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID THEN
        IF S.POST.DATE<1,REF.NO> # '' THEN
          RELEASE INV_SERIAL, CONO:S.SERIAL<1,REF.NO>
          ERRMSG = 'Cannot delete received Serial ':S.SERIAL<1,REF.NO>
          GOSUB 91000
        END ELSE
          ISTK.MANIFEST.NO = ''
          ISTK.QTY.ENTERED=''
          ISTK.LOC=''
          ISTK.PLACE = ''     ;* T26556
          ISTK.STATUS = ''
          MATWRITE ISTK.REC ON INV_SERIAL,ISTK.ID
          GOSUB DEL.MLINE.DATA
          RSMAN.RS.NO = DELETE(RSMAN.RS.NO,1,REF.NO,0)
          RSMAN.PLACE = DELETE(RSMAN.PLACE,1,REF.NO,0)     ;* T26556
          RSMAN.LINE.NO = DELETE(RSMAN.LINE.NO,1,REF.NO,0) ;*T27306
        END
      END ELSE
        RELEASE INV_SERIAL, CONO:S.SERIAL<1,REF.NO>
        GOSUB DEL.MLINE.DATA
      END
    END
  END
NEXT REF.NO
*IF @LOGNAME='lross' THEN DEBUG
GOSUB LOAD.MLINES ;* Move up to here from v
CURR.REF.NO = ""
REF.NO = 1
GOSUB SCROLL.ROUTINE
*IF @LOGNAME='lross' THEN DEBUG
IF BALANCE+0 # 0 THEN
  SCV.REC(26)<ESN> = ""
  ECD.NUM=26
  ECD.ACTION=4; CALL SCRN.EDIT
  IF ECD.RET.VALUE # "Y" THEN
*        GOSUB LOAD.MLINES
*        CURR.REF.NO = ""
*        REF.NO = 1
*        GOSUB SCROLL.ROUTINE
    RTN2.FLAG=''
    GOTO FILE.SUB.EXIT
  END
END
PROB = 0
TOT = ""; SUM = ""
FOR LPTR = 1 TO LINE.CNT
  IF S.POST.DATE<1,LPTR> = "" THEN
    POLINE = S.PO.LINE.NO<1,LPTR>
    TOT<1,POLINE> = TOT<1,POLINE> + S.QTY<1,LPTR>
    IF S.WHSE<1,LPTR> = PO.WHSE<1,POLINE> THEN 
      SUM<1,POLINE> = SUM<1,POLINE> + S.QTY<1,LPTR>
    END
  END
NEXT LPTR
PLCNT = DCOUNT(PO.PROD.NUM,VM)
ALL.OPEN=0
FOR I = 1 TO PLCNT
  NEW.OPEN = PO.QTY.OPEN<1,I> - TOT<1,I>
*T28054 v Nonsense! Below will always yield a zero result unless qty recd
*   is at least double the qty ordered.
*     IF NEW.OPEN < 0 AND PO.QTY.OPEN<1,I> > 0 THEN
*        IF INT(NEW.OPEN / PO.QTY.OPEN<1,I>) = 0 THEN
*           NEW.OPEN = 0
*        END
*     END
*T28054 ^
*T27306 IF NEW.OPEN < 0 THEN
*     IF NEW.OPEN < 0 AND NOT(MANUAL.ENTRY) THEN
*T28422 v
  LOCATE I IN S.PO.LINE.NO<1>,1 SETTING LNO THEN
    PO.OPEN.STK=INT(PO.QTY.OPEN<1,I>/ICR.DV1<LNO,1>*ICR.MT1<LNO,1>/ICR.DV2<LNO,1>+.5)
    TOT.STK=INT(TOT<1,I>/ICR.DV1<LNO,1>*ICR.MT1<LNO,1>/ICR.DV2<LNO,1>+.5)
    DIFF = ABS(PO.OPEN.STK - TOT.STK)
    IF (S.INV.UNIT<1,LNO,3> = 'MSI' AND DIFF <= 50) OR (S.INV.UNIT<1,LNO,3> # 'MSI' AND DIFF <= 9) THEN NEW.OPEN = 0
  END
*28422 ^
  IF NEW.OPEN < 0 THEN NEW.OPEN = 0
  IF (TOT<1,I> + PO.TOT.RECEVED<1,I>) > PO.TOT.ONORD<1,I> THEN
    NEW.OPEN = 0
    ERRMSG = "Warning! Received more than ordered for P/O line #":I
    GOSUB 91000
  END
  IF NEW.OPEN # 0 THEN ALL.OPEN = 1
  NEW.ALLOC = SUM(PO.JB.OPEN<1,I>) - SUM<1,I>
  IF NEW.ALLOC < 0 THEN NEW.ALLOC = 0
*T27306 IF NEW.OPEN < NEW.ALLOC THEN
  IF NEW.OPEN < NEW.ALLOC AND NOT(MANUAL.ENTRY) THEN
    ERRMSG = "Remaining allocation exceeds P/O open for P/O line #":I
    GOSUB 91000
    LINE.STATUS<1,I> = ERRMSG
    ERRMSG=""
  END 
NEXT I
REF.PTR = 1
NEW.SERIAL = 0
*IF @LOGNAME='lross' THEN DEBUG
S.CNT = DCOUNT(S.SERIAL,VM)
FOR SS=1 TO S.CNT
  ISTK.ID = CONO:S.SERIAL<1,SS>
  MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID THEN
    ISTK.MANIFEST.NO = MANIFEST
    ISTK.QTY.ENTERED = S.QTY.ENTERED<1,SS>
    IF ISTK.PLACE = '' THEN ISTK.PLACE = 'M'      ;* T26556
*T27902 v
    IF MANUAL.ENTRY THEN
      ISTK.PO.NO = PO.NO
      ISTK.PO.LINE=S.PO.LINE.NO<1,SS>
      ISTK.PROD=S.PROD.NO<1,SS>
      ISTK.WHSE=S.WHSE<1,SS>
      ISTK.PRINT.DATE=''
      ISTK.UOM=S.UNIT<1,SS>
      ISTK.UNIT.COST=S.UN.PRICE<1,SS>
    END
*T27902 ^
*T27904 v
    IF DSR.TYPE = "J" THEN
      NEW.SERIAL = 1
      LOCATE S.SERIAL<1,SS> IN RSXRF.RS.NO,1 SETTING VAR ELSE
        RSXRF.RS.NO = INSERT(RSXRF.RS.NO,1,-1,0,S.SERIAL<1,SS>)
        RSXRF.LN.NO = INSERT(RSXRF.LN.NO,1,-1,0,S.PO.LINE.NO<1,SS>)
        PO.NO.OF.ROLLS<1,S.PO.LINE.NO<1,SS>> += 1
      END
      IF ISTK.PO.LINE + 0 = 0 THEN ISTK.PO.LINE = 1
      IF ISTK.PROD # PO.PROD.NUM<1,ISTK.PO.LINE> THEN
        ISTK.PROD = PO.PROD.NUM<1,ISTK.PO.LINE>
        ISTK.WHSE = PO.WHSE<1,ISTK.PO.LINE>
        ISTK.UOM = PO.JB.UNITS<1,ISTK.PO.LINE>
      END
    END
*T27904 ^
    MATWRITE ISTK.REC ON INV_SERIAL,ISTK.ID
  END ELSE
    NEW.SERIAL = 1
    RSXRF.RS.NO = INSERT(RSXRF.RS.NO,1,-1,0,S.SERIAL<1,SS>)
    ;*T26764 v
    RSXRF.LN.NO = INSERT(RSXRF.LN.NO,1,-1,0,S.PO.LINE.NO<1,SS>)
    PO.NO.OF.ROLLS<1,S.PO.LINE.NO<1,SS>> += 1
    ;*T26764 ^
    MAT ISTK.REC=""
    ISTK.PO.NO = PO.NO
    ISTK.PO.LINE=S.PO.LINE.NO<1,SS>
    ISTK.PROD=S.PROD.NO<1,SS>
    ISTK.WHSE=S.WHSE<1,SS>
    ISTK.PRINT.DATE=''
    ISTK.UOM=S.UNIT<1,SS>
    ISTK.UNIT.COST=S.UN.PRICE<1,SS>
    ISTK.MANIFEST.NO=MANIFEST
    ISTK.QTY.ENTERED=S.QTY.ENTERED<1,SS>
    ISTK.PLACE = 'M'      ;* T26556
    MATWRITE ISTK.REC ON INV_SERIAL,ISTK.ID
  END
NEXT SS
MAT DSR.REC=""
DSR.PO = PO.NO
DSR.VEND=PO.VEND.NO
DSR.DATE=RECP.DATE
DSR.PERIOD=RSMAN.PERIOD
DSR.SHPMNT.NO=MANIFEST
DSR.SHPMNT.TOT=RSMAN.MAN.TOT.WGT
SV.CNT=0
POST.FLAG = 0 ; * T27941
FOR SS=1 TO S.CNT
*T27902 v
*     LOCATE S.PO.LINE.NO<1,SS> IN DSR.PO.LINE<1> SETTING LN THEN
  LOCATE S.PO.LINE.NO<1,SS> IN DSR.PO.LINE<1>,1 BY 'AR' SETTING LN THEN
*T27902 ^
    SV.CNT=DCOUNT(DSR.SERIAL<1,LN>,SVM)
  END ELSE
    SV.CNT=0
  END
*     T27902 v
  IF NOT(SV.CNT) THEN
    INS '' BEFORE DSR.PO.LINE<1,LN>
    INS '' BEFORE DSR.LINE.STATUS<1,LN>
    INS '' BEFORE DSR.PROD<1,LN>
    INS '' BEFORE DSR.UOM<1,LN>
    INS '' BEFORE DSR.WHSE<1,LN>
    INS '' BEFORE DSR.UN.PRICE<1,LN>
    INS '' BEFORE DSR.LOC<1,LN>
    INS '' BEFORE DSR.SERIAL<1,LN>
    INS '' BEFORE DSR.QTY<1,LN>
    INS '' BEFORE DSR.STK.QTY<1,LN>
    INS '' BEFORE DSR.POST.DATE<1,LN>
    INS '' BEFORE DSR.DIAM<1,LN>
    INS '' BEFORE DSR.MILL.ID<1,LN>
  END
*     T27902 ^
  SV.CNT+=1
  DSR.PO.LINE<1,LN> = S.PO.LINE.NO<1,SS>
  DSR.COMPLETE<1,LN> = S.COMPLETE<1,SS> ; * T27920
  DSR.LINE.STATUS<1,LN> = LINE.STATUS<1,LN>
  DSR.PROD<1,LN> = S.PROD.NO<1,SS>
  DSR.UOM<1,LN> = S.UNIT<1,SS>
  DSR.WHSE<1,LN> = S.WHSE<1,SS>
  DSR.UN.PRICE<1,LN> = S.UN.PRICE<1,SS>
  DSR.LOC<1,LN,SV.CNT> = S.LOC<1,SS>
  DSR.SERIAL<1,LN,SV.CNT>=S.SERIAL<1,SS>
  DSR.QTY<1,LN,SV.CNT>=S.QTY<1,SS>
  DSR.STK.QTY<1,LN,SV.CNT>=S.STK.QTY<1,SS>
*T27306 v Had subscripts reversed
  DSR.POST.DATE<1,LN,SV.CNT>=S.POST.DATE<1,SS>;*T27009
  IF DSR.POST.DATE<1,LN,SV.CNT>='' THEN POST.FLAG=1;*T27941
  MATREAD INV.REC FROM INVENTORY,CONO:S.PROD.NO<1,SS> THEN
    DSR.DIAM<1,LN,SV.CNT>=CALC.DIAM(S.QTY<1,SS>,S.STK.QTY<1,SS>,MAT INV.REC)
  END ELSE
    MAT INV.REC=''
  END
  DSR.STATUS=S.STATUS
  DSR.MILL.ID<1,LN,SV.CNT>=S.MILL.ID<1,SS>
NEXT SS
*T27920 v
IF CO.ICS.CANC.OPEN = 'Y' AND POST.FLAG AND ALL.OPEN THEN
  CALL RS.STOCK.REC.SUB(CONO,MAT DSR.REC,MAT PO.REC)
  ECD.SCRN.NO = 1
  ECD.ACTION=3; CALL SCRN.EDIT
  CURR.REF.NO=''; REF.NO=1
  GOSUB SCROLL.ROUTINE
END
*T27920 ^
IF POST.FLAG THEN ; * T27941
  MATWRITE DSR.REC ON DAILY_STOCK,DSR.ID
*T27941 v
END ELSE
  ERRMSG = 'All lines on this receipt have already been posted.'
  GOSUB 91000
END
*T27941 ^
*T27904 v
IF OLD.DSR.ID # '' THEN DELETE DAILY_STOCK, OLD.DSR.ID
*T27904 ^
RSMAN.RS.NO = S.SERIAL
RSMAN.LINE.NO  = S.PO.LINE.NO
RSMAN.STATUS = ""
IF RSMAN.RS.NO = "" THEN
  DELETE PO.MAN.XREF, CONO:PO.NO:"!":MANIFEST
  DELETE DAILY_STOCK,CONO:PO.NO:"!":MANIFEST
  LOCATE MANIFEST IN PO.MAN<1>,1 SETTING PPTR THEN
    PO.MAN = DELETE(PO.MAN,1,PPTR,0)
    NEW.MANIFEST = 0
  END
END ELSE
  MATWRITE RSMAN.REC ON PO.MAN.XREF, CONO:PO.NO:"!":MANIFEST
END
IF NEW.SERIAL THEN
  MATWRITE RSXRF.REC ON PO.RSKI.XREF, CONO: PO.NO
END
IF NEW.MANIFEST THEN
  PO.MAN = INSERT(PO.MAN,1,-1,0,MANIFEST)
END
PO.CHG.FLG = 1
*T27306 v
IF NOT(MANUAL.ENTRY) THEN
  MATWRITE PO.REC ON PO, CONO:PO.NO
END ELSE RELEASE PO, CONO:PO.NO
*T27306 ^
FILE.FLAG=1
FILE.SUB.EXIT: 
RETURN
*T27928 ^
*
*---- CALLS FOR SYSCOM
*
91000 *
ERR.TYPE = 1; CALL SYSCOM(MAT SYSCOM.REC)
RETURN
92000 *
ERR.TYPE = 2; CALL SYSCOM(MAT SYSCOM.REC)
RETURN
93000 *
ERR.TYPE = 3; CALL SYSCOM(MAT SYSCOM.REC)
*
*---- END OF PROGRAM
*
99999 *
ECD.ACTION=99; CALL SCRN.EDIT
*       PRINT @(-1)
END
