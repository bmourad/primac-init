   SUBROUTINE RS.STOCK.REC.UPDATE(CONO,PO.CODE,MAT COMP.REC,MAT RSXRF.REC,MAT RSMAN.REC,ERROR,HERRMSG,CUR.PERIOD,PO.PRESENT)
*COPY>CPYLIB>COM1
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>ICS.CPYLIB>COM.INV.LINK  
*COPY>POS.CPYLIB>COM.PO.INTRF
*********************************************************************
* REVISION - [08.1B]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM   - PRIMAC
* PROGRAM  - RS.STOCK.REC.UPDATE
* AUTHOR   - JIHAD YAMOUT, C.B.A
* DATE     - 12/07/83
* DESCRIPTION
* This program updates all files for Roll/Skid Stock receipts.
* MOD         - TASK 14945 RWW 3.30.90
* MOD CLW 10/02/94 Task 17919 - Accrual accounting
* MOD TASK 18761 LMR 10/20/94 MODIFY TO RUN PRE-POSTING TESTS BEFORE
*     ACTUALLY UPDATING RECORDS - INSERT ERRMSG IN RS.STATUS.
*T22281 10/09/97 Include IGT.DV.DP.CC in ACCRUED.LIAB.HIST
*T22532 1/20/98 lanny * Uninitialized var error fix.
*T25740 epitka 03/12/2002 * REV12
*NOTE: if error occurs on one of the serials for the po line then none
* of serials for the po line in question will not be received.
*T26334 epitka 03/22/2002 * REV12
*T26497 adelgado 04/04/2002 * Add validation rule for Inter-Divisional
*                             Whse.
*C39801 ajibaly 05/01/2002 * Add VPDS.REC.PERIOD to update
*T25740 epitka 06/11/2002 * REV12
*T26671 epitka 06/14/2002 * see task
*T26764 cmykleb 07/23/2002 * Correct problem with po line # being changed
*                            on the INV_SERIAL records.
*T27009 epitka   11/04/2002 * Fix posting problem
*T26767 epitka 07/24/2002 * CHANGE OF ARGUMENTS FOR INV.AVG.COST.MAINT
*T27306 lross 05/05/2003 * Mods for PO.OPEN.QTY & PO.JB.QTY rounding.
*                          Also, finish T26556 Manual P/O entry.
*T27990 lross 03/10/2004 * Mods for call to ICS.IWH.SUB (ERRMSG)
*T28090 lross 04/28/2004 * Allow processing of entire manifest with all
*                          zero serials to delete serials received
*                          incorrectly.
*T27920 cmykleb 08/20/2004 * Allow PO lines to be cancelled from receipt
*                            entry.
*T28518 lross 04/08/2005 * Average cost will not get calulated unless
*                          receipt is in current IC period.
*T28779 lross 02/23/2006 * Retain identity of multiple same Prod/Whse
*                          lines.
*********************************************************************
*
*---- INSERT FILES EQUATES
*
*COPY>PMC.CPYLIB>PO
*COPY>ICS.CPYLIB>SAVE.STOCK.REC
*COPY>PMC.CPYLIB>COMPANY
**COPY>ICS.CPYLIB>STOCK.REC
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>INV.STATS
*COPY>ICS.CPYLIB>INV.JOB.STATS
*COPY>JCS.CPYLIB>JOB
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.HIST
*COPY>APS.CPYLIB>APS.FILE.VARS
*COPY>APS.CPYLIB>VEND.STATS
*COPY>APS.CPYLIB>VEND.PO.STATS
*COPY>APS.CPYLIB>VEND.PROD.STATS
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>POS.CPYLIB>ACCRUED.LIAB.HIST
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>ICS.CPYLIB>ICS.ID        
*COPY>ICS.CPYLIB>INV.WHSE.LOC  
*COPY>ICS.CPYLIB>CATEGORY      
*COPY>ICS.CPYLIB>INV_RECEIPTS  
*COPY>ICS.CPYLIB>INV_RECP_WHSE 
*COPY>ICS.CPYLIB>INV_AUDIT_HIST
*COPY>ICS.CPYLIB>INV_SERIAL    
*COPY>ICS.CPYLIB>DAILY_STOCK   
*COPY>ICS.CPYLIB>PO.RSKI.XREF
*COPY>ICS.CPYLIB>PO.MAN.XREF 
*COPY>ICS.CPYLIB>INV.CNV ;*T27306
*                                                           
*                                                           
*---- INITIALIZATION
*
   ERRMSG=""
   DEFFUN CALC.STK.QTY (COST.QTY,MAT INV.CNV.REC,ROND,LN)
*
*---- MAIN PROCESSING
*
   MAT ORG.IWH.REC=''
   OPEN.FLAG=1
   GEN.DIV = "00";GEN.DEPT = "00";GEN.CCTR = "000"
   ERRMSG=''    
   PROD.CNT=DCOUNT(SSTK.PROD,VM)
   FOR PP=1 TO PROD.CNT
      INV.ID = ''
      IWH.ID = ''
      IH.ID  = ''
      SSTK.STATUS<1,PP>=""
      SSTK.LOC.STATUS<1,PP>=""
      SSTK.JOB.STATUS<1,PP>=""
      SSTK.JOB.QTY='' ;*T27306
      ;*T27009 v
*     RECV.QTY = SUM(SSTK.QTY<1,PP>)
      RECV.QTY=0
      SCNT=DCOUNT(SSTK.SERIAL<1,PP>,SVM)    
      FOR SS=1 TO SCNT                      
         IF SSTK.POST.DATE<1,PP,SS>='' THEN 
            RECV.QTY+=SSTK.QTY<1,PP,SS>     
         END                                
      NEXT SS                               
      ;*27009 ^
*T28090 v Move 'IF' to after GOSUB CHECK.SERIAL & DELETE.SERIAL.
*  IF RECV.QTY>0 THEN
      ERR=""
      POLN=SSTK.PO.LINE<1,PP>
      PROD=SSTK.PROD<1,PP>
      WHSE=SSTK.WHSE<1,PP>
      * T26497 v
      IF CO.INTR.WHSE # '' AND WHSE = CO.INTR.WHSE THEN
         SSTK.STATUS<1,PP> = 'CAN NOT USE AN INTER-DIVISIONAL WHSE ':WHSE
         ERR=1
      END ELSE
      * T26497 ^
         MATREAD WHSE.REC FROM WAREHOUSE,CONO:WHSE ELSE 
            MAT WHSE.REC = ""                                
         END                                                 
         IF WHS.DIV = "" THEN WHS.DIV = GEN.DIV              
         DV.DP.CC = WHS.DIV:GEN.DEPT:GEN.CCTR
         MAT INAH.REC=""
         INAH.PROD=PROD
         INAH.WHSE=WHSE
         INAH.DATE=SSTK.DATE
         INAH.TYPE="R"
         INAH.SRC="IR"
         INAH.PERIOD=SSTK.PERIOD
         INAH.DV.DP.CC=DV.DP.CC
         INAH.TRAN=PO.CODE
         INV.ID=CONO:PROD
         MATREADU INV.REC FROM INVENTORY, INV.ID THEN
*COPY>ICSBP>INV.UM.CNV ;*T27306
            MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE THEN
               IF PO.ACCRUE='Y' THEN
                  INAH.ACCT=CATG.INV
                  INAH.ACCR.ACCT=CATG.ACCRU.LIAB
               END
               IWH.ID=CONO:PROD:"!":WHSE
               MATREADU IWH.REC FROM INV.WHSE, IWH.ID THEN
                  MAT ORG.IWH.REC=MAT IWH.REC                                 
                  ACTION=1; * build INV.WHSE fifo buckets                       
                  TMP.CNT='' ; LAST='' ; TMP.ARR=''                             
                  PERIOD=INAH.PERIOD
*T27990           CALL ICS.IWH.SUB(CONO,PERIOD,SERIAL,SPTR,LAST,ACTION,OPEN.FLAG)
                  CALL ICS.IWH.SUB(CONO,PERIOD,SERIAL,SPTR,LAST,ACTION,OPEN.FLAG,ERRMSG)
                  IH.ID=CONO:PROD
                  MATREADU IH.REC FROM INV.HIST, IH.ID ELSE
                     MAT IH.REC=""
                  END
                  IF INV.COST.WT + 0=0 THEN INV.COST.WT=100
                  IF INV.SBR + 0=0 THEN INV.SBR=1
                  ACT.RECV.PRICE=INT((PO.GROS.PRICE<1,POLN> * (1- (PO.DISCOUNT<1,POLN>/10000))) / INV.SBR +.5)
                  RECV.PRICE=ACT.RECV.PRICE
                  INAH.UNIT.COST=RECV.PRICE
*T27306 v   ACT.RECV.QTY=INT(SUM(SSTK.QTY<1,PP>)/10)
                  ACT.RECV.QTY=INT(RECV.QTY/10)
                  RET.ARR='' ; ERMSG=''
                  RECP.NO='';DEPL.METHOD=''
                  TYPE='R'
                  CALL QTY.CHANGE.SUB(CONO,PO.CODE,MAT IWH.REC,MAT INV.REC,MAT PO.REC,DEPL.METHOD,RECP.NO,SSTK.DATE,PERIOD,RECV.QTY,RECV.PRICE,TYPE,ERRMSG,RET.ARR)
                  IF ERRMSG="" THEN
                     TOT.COST=RET.ARR<1>
*T26764 v
*                       IWH.PO.LN.FI <1,-1> = PP
*T27928 v The commenting out of below 2 lines causes POLN to be missing 
*         from INV_SERIAL record.
*T28090 v Move to below check for deleted serials.
                  FI.CNT = DCOUNT(IWH.RECV.FI,VM)
                  IWH.PO.LN.FI<1,FI.CNT> = POLN
*T28090 ^
*T26764 ^
                     SCNT=DCOUNT(SSTK.SERIAL<1,PP>,SVM)
                     GOSUB CHECK.SERIAL
                     IF (S.ERR) THEN
                        SSTK.STATUS<1,PP>="Error occured while processing serials."
                        ACTION=9;*delete tmp records
*T27990                 CALL  ICS.IWH.SUB(CONO,PERIOD,SERIAL,SPTR,LAST,ACTION,OPEN.FLAG)
                        CALL  ICS.IWH.SUB(CONO,PERIOD,SERIAL,SPTR,LAST,ACTION,OPEN.FLAG,ERRMSG)
                     END ELSE
*T28090 Include 'IF' relocated from above and move check for deleted serials here from below.
                        IF DEL.ARR#'' THEN
                           GOSUB DELETE.SERIALS
                        END
                        IF RECV.QTY>0 THEN
*T28090 v From above.
*T27928                    FI.CNT = DCOUNT(IWH.RECV.FI,VM)
*T27928                    IWH.PO.LN.FI<1,FI.CNT> = POLN
*T28090 ^
                           IWH.LA.PUR=SSTK.DATE
                           ROND='.5'
                           IWH.ON.HAND=IWH.ON.HAND + RECV.QTY
                           IH.CNT=DCOUNT(IH.DATE,VM)
                           IDATE=SSTK.DATE
                           LOCATE IDATE IN IH.DATE<1> SETTING DP ELSE NULL
                           BEGIN CASE
                              CASE DP=IH.CNT
                                 IH.AMOUNT<1,DP>=IH.AMOUNT<1,DP> + RECV.QTY
                              CASE DP > IH.CNT
                                 IH.AMOUNT<1,DP>=IH.AMOUNT<1,DP> + RECV.QTY
                                 IH.DATE<1,DP>=IDATE
                              CASE 1
                                 IH.AMOUNT<1,DP>=IH.AMOUNT<1,DP> + RECV.QTY
                           END CASE
*T28518 v                  IF CUR.PERIOD=INAH.PERIOD THEN
                           IF CUR.PERIOD=INAH.PERIOD OR CATG.COST.TYPE='AV' THEN
                              CALL INV.AVG.COST.MAINT(MAT IWH.REC,INV.COST.WT,CUR.PERIOD)
                           END
*T27306 v
                           IF PO.PRESENT THEN
                              MATREADU INV.STAT.REC FROM INV.STATS, IWH.ID ELSE MAT INV.STAT.REC=""
                              LOCATE PO.CODE IN ISTAT.PO<1>,1 SETTING PFND ELSE
                                 ISTAT.PO<1,PFND>=PO.CODE
                                 ISTAT.PO.VEND<1,PFND>=PO.VEND.NO
                                 ISTAT.PO.DATE<1,PFND>=PO.DATE
                                 ISTAT.PO.QTY<1,PFND>=PO.QTY.OPEN<1,POLN>
                                 ISTAT.PO.JOB<1,PFND>=""
                                 ISTAT.PO.JOB.QTY<1,PFND>=""
                                 ISTAT.PO.JOB.AMT<1,PFND>=""
                              END
                              QTY.OPEN=PO.QTY.OPEN<1,POLN>
                              GOSUB 3000
*T27306 v Perform following regardless of JOB.ERR.
*                  IF JOB.ERR="" THEN
                              IWH.ON.ORDER=SUM(ISTAT.PO.QTY)
                              IF ISTAT.PO="" AND ISTAT.JOB="" THEN
                                 DELETE INV.STATS, IWH.ID
                              END ELSE
                                 MATWRITE INV.STAT.REC ON INV.STATS, IWH.ID
                              END
                           END
*T27306 ^
                           MATWRITE IH.REC ON INV.HIST, IH.ID
                           IF PO.ACCRUE="Y" THEN
                              GOSUB PROCESS.ACCRUE
                           END
                           ACTION=3 
*T27990                    CALL ICS.IWH.SUB(CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG)
                           CALL ICS.IWH.SUB(CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG,ERRMSG)
*T28090 v Move to above.
*                          IF DEL.ARR#'' THEN
*                             GOSUB DELETE.SERIALS
*                          END
*T28090 ^
                           INV.LA.PUR=SSTK.DATE
                           MATWRITE INV.REC ON INVENTORY, INV.ID
                           IF PO.ACCRUE='Y' THEN
                              MATWRITE ALH.REC ON ACCRUED.LIAB.HIST,ALH.ID
                           END
                           IF CO.APS.R.INTRF > 1 THEN
                              GOSUB PROCESS.VEND
                           END
*T28090 v Move from below.
                        END ELSE
*T27306 v
                           IF SCNT > 0 THEN
                              SSTK.STATUS<1,PP>="Qty. must be greater than 0."
                              ERR=1
                           END
*T27306 ^
                        END
*T28090 ^
*T27306 v STATUS already set with verbal mesg in 3000 below.
*               END ELSE
*                 SSTK.JOB.STATUS<1,PP>=JOB.ERR
*               END
                     END
                  END ELSE
                     SSTK.STATUS<1,PP> = ERRMSG
                     ERR=1
                  END
               END ELSE
                  SSTK.STATUS<1,PP>="INV.WHSE ":IWH.ID:" IS MISSING."
                  ERR=1
               END
            END ELSE
               SSTK.STATUS<1,PP>="CATEGORY ":INV.LINE:" IS MISSING."
               ERR=1
            END
         END ELSE
            SSTK.STATUS<1,PP>="INVENTORY ":PROD:" IS MISSING."
            ERR=1
         END
      END         ;* T26497
*T28090 v Move to above.
*  END ELSE
*T27306 v
*     IF SCNT > 0 THEN
*        SSTK.STATUS<1,PP>="Qty. must be greater than 0."
*        ERR=1
*     END
*T27306 ^
*  END
2999 *
      IF (ERR) # '' THEN
         IF INV.ID # '' THEN
            RELEASE INVENTORY, INV.ID
         END
         IF IWH.ID # '' THEN
            RELEASE INV.WHSE, IWH.ID
            RELEASE INV.WHSE, IWH.ID
            RELEASE INV.WHSE.LOC, IWH.ID:"!":SSTK.LOC
         END
         IF IH.ID # '' THEN
            RELEASE INV.HIST, IH.ID
         END
      END
   NEXT PP
   GOSUB CLEAR.SSTK
   GOTO 99999
*
**************************************************************************
**** S U B R O U R I N E S ***********************************************
**************************************************************************
*
*******************
CHECK.SERIAL: 
*******************
*
   S.ERR=""
            * do not reset S.ERR within loop.
   ;* want to get errors on all serials at once.
   ;* if one serial is erroneous then none will post for
   ;* PO line.
   DEL.ARR=''
   FOR SS=1 TO SCNT 
      IF SSTK.QTY<1,PP,SS>#'' THEN
         SERIAL=SSTK.SERIAL<1,PP,SS>
         ISTK.ID = CONO:SERIAL
         MATREAD ISTK.REC FROM INV_SERIAL,ISTK.ID THEN
            IF ISTK.POST.DATE='' THEN
               IF SSTK.QTY<1,PP,SS>=0 THEN
                  DEL.ARR<1,-1>=SSTK.SERIAL<1,PP,SS>
               END ELSE
                  IF ISTK.PO.NO#"" AND ISTK.PO.NO#PO.CODE THEN
                     SSTK.LOC.STATUS<1,PP,SS>="Serial belongs to PO ":PO.CODE
                     S.ERR=1
                  END ELSE
                     IF ISTK.PO.LINE # SSTK.PO.LINE<1,PP> THEN                     
                        SSTK.LOC.STATUS<1,PP,SS>="Serial belongs to PO line. ":ISTK.PO.LINE
                        S.ERR=1
                     END ELSE
                        IF SSTK.QTY<1,PP,SS>+0#0 AND SSTK.DIAM<1,PP,SS>+0=0 THEN
                           IF INV.PAP.TYPE#'SHEET' AND INV.PAP.TYPE#'REGULAR' THEN
                              SSTK.LOC.STATUS<1,PP,SS>='Diameter is zero'
                              S.ERR=1
                           END
                        END
                     END
                  END
                  IF NOT(S.ERR) THEN
                     GOSUB PROCESS.SERIAL
                  END
               END
            END
         END
      END
   NEXT SS
   RETURN
*
*****************
PROCESS.SERIAL: 
*****************
*
   INAH.LOC=SSTK.LOC<1,PP,SS> 
   INAH.QTY = SSTK.QTY<1,PP,SS> 
   INAH.CUR.QTY = 0
   INAH.NEW.QTY = INAH.QTY
   INAH.CUR.DIAM=SSTK.DIAM<1,PP,SS>
   INAH.NEW.DIAM=SSTK.DIAM<1,PP,SS>
   INAH.CUR.STK.QTY=SSTK.SHEET<1,PP,SS>
   INAH.NEW.STK.QTY=SSTK.SHEET<1,PP,SS>
   SERIAL=SSTK.SERIAL<1,PP,SS>
   ACTION=2 
*T27990 v CALL ICS.IWH.SUB(CONO,PERIOD,SERIAL,SPTR,LAST,ACTION,OPEN.FLAG)
   CALL ICS.IWH.SUB(CONO,PERIOD,SERIAL,SPTR,LAST,ACTION,OPEN.FLAG,ERRMSG)
   IF ERRMSG # '' THEN
      SSTK.LOC.STATUS<1,PP,SS>=ERRMSG
      S.ERR = 1
   END
*T27990 ^
   LOCATE INAH.LOC IN IWH.LOC<1>,1 SETTING LLOC ELSE
      LLOC=DCOUNT(IWH.LOC,VM) + 1
      IWH.LOC<1,LLOC>=INAH.LOC
   END
   RETURN
*
*************
CLEAR.SSTK: 
*************
*
   ;* if line succesfully received then clear from SAVE.STK.REC
   ;* values for that line
*FOR PP=1 TO PROD.CNT
   FOR PP=PROD.CNT TO 1 STEP -1
      IF SSTK.STATUS<1,PP>="" AND SSTK.LOC.STATUS<1,PP>="" AND SSTK.JOB.STATUS<1,PP>="" THEN
*T27306 v
         FOR D = 1 TO SAVE.STK.REC.SIZE
            DEL SAVE.STK.REC(D)<1,PP>
         NEXT D
*   DEL SSTK.PO.LINE<1,PP> 
*   DEL SSTK.STATUS<1,PP>   
*   DEL SSTK.PROD<1,PP>
*   DEL SSTK.WHSE<1,PP>
*   DEL SSTK.UNIT.PRICE<1,PP>
*   DEL SSTK.DISCOUNT<1,PP>
*   DEL SSTK.UNIT.FLG<1,PP>
*   DEL SSTK.COMPLETE<1,PP>
*   DEL SSTK.TOT.ONORD<1,PP> 
*   DEL SSTK.TOT.RECEVED<1,PP>
*   DEL SSTK.PREV.RECEVED<1,PP>  
*   DEL SSTK.QTY.OPEN<1,PP>
*   DEL SSTK.TOT.CANCEL<1,PP> 
*   DEL SSTK.TOT.REC<1,PP>  
*   DEL SSTK.PROD.TYPE<1,PP>
*   DEL SSTK.DEL.DATE<1,PP> 
*   DEL SSTK.LOC<1,PP>
*   DEL SSTK.SERIAL<1,PP>
*   DEL SSTK.QTY<1,PP> ;*T27306
*   DEL SSTK.DIAM<1,PP> 
*   DEL SSTK.SHEET<1,PP>
*   DEL SSTK.MILL.ID<1,PP>
*   DEL SSTK.LOC.STATUS<1,PP>
*   DEL SSTK.NO.PIECES<1,PP> 
*   DEL SSTK.LOC.DEL<1,PP> 
*   DEL SSTK.JOB<1,PP>
*   DEL SSTK.JOB.QTY<1,PP>
*   DEL SSTK.JOB.ALC<1,PP>
*   DEL SSTK.JOB.STATUS<1,PP>  
*   DEL SSTK.JOB.REC<1,PP>
*   DEL SSTK.JOB.DEL<1,PP> 
      END ELSE
         ERROR=1
      END
   NEXT PP
   RETURN
*
3000 *
*---- ROUTINE TO UPDATE ISTAT, JOB AND PO
*
   JCNT=DCOUNT(PO.JOB.NO<1,POLN>,SVM)
   RECQTY=SUM(SSTK.QTY<1,PP>)
   FOR JPTR = 1 TO JCNT UNTIL RECQTY = 0          
      POJQTY = PO.JB.OPEN<1,POLN,JPTR>+0 
      IF POJQTY >= RECQTY THEN                   
         SSTK.JOB.QTY<1,1,JPTR> = RECQTY        
         RECQTY = 0                             
      END ELSE                                   
         SSTK.JOB.QTY<1,1,JPTR> = POJQTY        
         RECQTY = RECQTY - POJQTY               
      END                                        
   NEXT JPTR
   JOB.ERR=""
   FOR J=1 TO JCNT
      IF SSTK.JOB.QTY<1,1,J>+0 <= 0 THEN GOTO 3088
      JOB.NUM=PO.JOB.NO<1,POLN,J>
      MATREADU JOB.REC FROM JOB, CONO:JOB.NUM ELSE
         RELEASE JOB, CONO:JOB.NUM
         SSTK.JOB.STATUS<1,PP,J>="Job ":JOB.NUM:" for PO ":PO.CODE:" is not on file"
         JOB.ERR=1
         GOTO 3088
      END
      LOCATE JOB.NUM IN ISTAT.JOB<1>,1 SETTING JLOC ELSE
         ISTAT.JOB<1,JLOC>=JOB.NUM
      END
      MATREADU INV.JS.REC FROM INV.JOB.STATS, IWH.ID:"!":JOB.NUM ELSE
         MAT INV.JS.REC=""
      END
      IF IJS.JOB.CUST="" THEN
         IJS.JOB.CUST=JOB.CUST
         IJS.JOB.DATE=SSTK.DATE
         IJS.JOB.ALOC=0
         IJS.JOB.QTY=0
         IJS.JOB.USED=0
         IJS.RECP.NO=""
         IJS.FI.ORG=""
         IJS.FI.QTY=""
         IJS.FI.AMT=""
         IJS.JMT.SEQ=""
         IJS.JMT.QTY=""
      END
      IF IJS.JOB.DATE="ALLOCATE" THEN IJS.JOB.DATE=SSTK.DATE
      NEW.COST=INT((RECV.PRICE/10000) * ((PO.JB.OPEN<1,POLN,J>/10) / (INV.COST.WT/100)) + ROND)
      LOCATE JOB.NUM IN ISTAT.PO.JOB<1,PFND>,1 SETTING JJ ELSE
         ISTAT.PO.JOB<1,PFND,JJ>=JOB.NUM
         ISTAT.PO.JOB.QTY<1,PFND,JJ>=PO.JB.OPEN<1,POLN,J>
         ISTAT.PO.JOB.AMT<1,PFND,JJ>=NEW.COST
      END
      LOCATE PO.CODE IN IJS.PO<1>, 1 SETTING FNDP ELSE
         IJS.PO<1,FNDP>=PO.CODE
         IJS.JOB.ALOC=IJS.JOB.ALOC + PO.JB.OPEN<1,POLN,J>
         IJS.PO.JOB.QTY<1,FNDP>=PO.JB.OPEN<1,POLN,J>
         IJS.PO.JOB.AMT<1,FNDP>=NEW.COST
      END
      PTR=1
      LOOP
         LOCATE PROD IN JOB.RESV.MATL<1>,PTR SETTING MLOC ELSE MLOC=0
         IF MLOC THEN
            IF JOB.RESV.WHSE<1,MLOC>=WHSE THEN
               PTR=0
            END ELSE
               PTR=MLOC + 1
            END
         END
      WHILE MLOC AND PTR DO REPEAT
      IF MLOC=0 THEN
         MLOC=DCOUNT(JOB.RESV.MATL,VM) + 1
         JOB.RESV.MATL<1,MLOC>=PROD
         JOB.RESV.WHSE<1,MLOC>=WHSE
         JOB.RESV.DATE<1,MLOC>=SSTK.DATE
         JOB.ALOC.QTY<1,MLOC>=PO.JB.OPEN<1,POLN,J>
         JOB.RESV.QTY<1,MLOC>=0
         JOB.USED.QTY<1,MLOC>=0
         JOB.ALOC.AMT<1,MLOC>=NEW.COST
         JOB.RESV.AMT<1,MLOC>=0
         JOB.USED.AMT<1,MLOC>=0
      END
      IJS.JOB.ALOC=IJS.JOB.ALOC - PO.JB.OPEN<1,POLN,J>
      IWH.ALLOC=IWH.ALLOC - PO.JB.OPEN<1,POLN,J>
      IF IWH.ALLOC < 0 THEN IWH.ALLOC=0
      ISTAT.PO.JOB.QTY<1,PFND,JJ>=ISTAT.PO.JOB.QTY<1,PFND,JJ> - PO.JB.OPEN<1,POLN,J>
      IJS.PO.JOB.QTY<1,FNDP>=IJS.PO.JOB.QTY<1,FNDP> - PO.JB.OPEN<1,POLN,J>
      ISTAT.PO.JOB.AMT<1,PFND,JJ>=ISTAT.PO.JOB.AMT<1,PFND,JJ> - NEW.COST
      IJS.PO.JOB.AMT<1,FNDP>=IJS.PO.JOB.AMT<1,FNDP> - NEW.COST
      JOB.ALOC.QTY<1,MLOC>=JOB.ALOC.QTY<1,MLOC> - PO.JB.OPEN<1,POLN,J>
      JOB.ALOC.AMT<1,MLOC>=JOB.ALOC.AMT<1,MLOC> - NEW.COST
      PO.JB.RECEVED<1,POLN,J>=PO.JB.RECEVED<1,POLN,J> + SSTK.JOB.QTY<1,1,J>
*T27306 v Rounding
      TEST.OPEN=ABS(PO.JB.ONORD<1,POLN,J>-PO.JB.RECEVED<1,POLN,J>)
      IF (INV.UNIT<1,3> = 'MSI' AND TEST.OPEN <= 50) OR (INV.UNIT<1,3> # 'MSI' AND TEST.OPEN <= 9) THEN
         PO.JB.RECEVED<1,POLN,J> += PO.JB.ONORD<1,POLN,J> - PO.JB.RECEVED<1,POLN,J>
      END
*T27306 ^
      PO.JB.OPEN<1,POLN,J>=PO.JB.ONORD<1,POLN,J> - PO.JB.RECEVED<1,POLN,J>
      IF PO.JB.OPEN<1,POLN,J> < 0 THEN PO.JB.OPEN<1,POLN,J>=0
      NEW.COST=INT((RECV.PRICE/10000) * ((PO.JB.OPEN<1,POLN,J>/10) / (INV.COST.WT/100)) + ROND)
      IJS.JOB.ALOC=IJS.JOB.ALOC + PO.JB.OPEN<1,POLN,J>
      ISTAT.PO.JOB.QTY<1,PFND,JJ>=ISTAT.PO.JOB.QTY<1,PFND,JJ> + PO.JB.OPEN<1,POLN,J>
      ISTAT.PO.JOB.AMT<1,PFND,JJ>=ISTAT.PO.JOB.AMT<1,PFND,JJ> + NEW.COST
      JOB.ALOC.QTY<1,MLOC>=JOB.ALOC.QTY<1,MLOC> + PO.JB.OPEN<1,POLN,J>
      JOB.ALOC.AMT<1,MLOC>=JOB.ALOC.AMT<1,MLOC> + NEW.COST
      IJS.PO.JOB.QTY<1,FNDP>=IJS.PO.JOB.QTY<1,FNDP> + PO.JB.OPEN<1,POLN,J>
      IJS.PO.JOB.AMT<1,FNDP>=IJS.PO.JOB.AMT<1,FNDP> + NEW.COST
      RESV.QTY=SSTK.JOB.QTY<1,1,J>
      RESV.ARR=''
      IF CATG.TRK.LVL='S' AND CATG.COST.TYPE='AC' AND CATG.RSV.SERIAL='Y' THEN
         ;* in this case only
         ;* reserve qty from the receipt that is 
         ;* currently being processed and 
         ;* serials that belong to that receipt
         ;* in fifo order
         RESV.ARR<1>=INAH.RECP.NO
      END
*COPY>JCSBP>FIFO.RESV.SUB
      IF ERRMSG # "" THEN GOSUB 91000
      GOSUB SET.RESERVES
      JOB.RESV.QTY<1,MLOC>=JOB.RESV.QTY<1,MLOC> + SSTK.JOB.QTY<1,1,J> - RESV.QTY
      JOB.RESV.AMT<1,MLOC>=JOB.RESV.AMT<1,MLOC> + STD.PRICE
      MATWRITE JOB.REC ON JOB, CONO:JOB.NUM
      IF ISTAT.PO.JOB.QTY<1,PFND,JJ>=0 THEN
         ISTAT.PO.JOB=DELETE(ISTAT.PO.JOB,1,PFND,JJ)
         ISTAT.PO.JOB.QTY=DELETE(ISTAT.PO.JOB.QTY,1,PFND,JJ)
         ISTAT.PO.JOB.AMT=DELETE(ISTAT.PO.JOB.AMT,1,PFND,JJ)
      END
      IF IJS.PO.JOB.QTY<1,FNDP>=0 THEN
         IJS.PO=DELETE(IJS.PO,1,FNDP,0)
         IJS.PO.JOB.QTY=DELETE(IJS.PO.JOB.QTY,1,FNDP,0)
         IJS.PO.JOB.AMT=DELETE(IJS.PO.JOB.AMT,1,FNDP,0)
      END
      IF IJS.JOB.ALOC+0=0 AND IJS.JOB.QTY+0=0 AND IJS.JOB.USED+0=0 AND IJS.PO="" AND IJS.REQ.QTY+0=0 THEN
         DELETE INV.JOB.STATS, IWH.ID:"!":JOB.NUM
         ISTAT.JOB=DELETE(ISTAT.JOB,1,JLOC,0)
      END ELSE
         MATWRITE INV.JS.REC ON INV.JOB.STATS, IWH.ID:"!":JOB.NUM
      END
3088 NEXT J
   ISTAT.PO.QTY<1,PFND>=ISTAT.PO.QTY<1,PFND> - PO.QTY.OPEN<1,POLN>
   PO.TOT.RECEVED<1,POLN>=PO.TOT.RECEVED<1,POLN> + RECV.QTY
   PO.QTY.OPEN<1,POLN>=PO.TOT.ONORD<1,POLN> - PO.TOT.CANCEL<1,POLN> - PO.TOT.RECEVED<1,POLN>
*T27306 v
   TEST.OPEN = ABS(PO.QTY.OPEN<1,POLN>)
   IF (INV.UNIT<1,3>='MSI' AND TEST.OPEN <= 50) OR (INV.UNIT<1,3>#'MSI' AND TEST.OPEN <= 9) THEN
* PO.TOT.CANCEL<1,POLN> += (PO.TOT.ONORD<1,POLN>-PO.TOT.CANCEL<1,POLN>-PO.TOT.RECEVED<1,POLN>)
      PO.TOT.CANCEL<1,POLN> = PO.TOT.ONORD<1,POLN> - PO.TOT.RECEVED<1,POLN>
* PO.QTY.OPEN<1,POLN>=PO.TOT.ONORD<1,POLN> - PO.TOT.CANCEL<1,POLN> - PO.TOT.RECEVED<1,POLN>
      PO.QTY.OPEN<1,POLN> = 0
      IF PO.TOT.CANCEL<1,POLN> < 0 THEN PO.TOT.CANCEL<1,POLN> = 0
   END
*T27306 ^
   IF PO.QTY.OPEN<1,POLN> < 0 THEN PO.QTY.OPEN<1,POLN>=0
*T27920 v
   IF SSTK.COMPLETE<1,PP> = "Y" THEN
      PO.TOT.CANCEL<1,POLN> = PO.TOT.CANCEL<1,POLN> + PO.QTY.OPEN<1,POLN>
      IF PO.TOT.CANCEL<1,POLN> < 0 THEN PO.TOT.CANCEL<1,POLN> = 0
      PO.QTY.OPEN<1,POLN> = 0
   END
*T27920 ^
   ISTAT.PO.QTY<1,PFND>=ISTAT.PO.QTY<1,PFND> + PO.QTY.OPEN<1,POLN>
   IF ISTAT.PO.QTY<1,PFND>=0 THEN
      ISTAT.PO=DELETE(ISTAT.PO,1,PFND,0)
      ISTAT.PO.VEND=DELETE(ISTAT.PO.VEND,1,PFND,0)
      ISTAT.PO.DATE=DELETE(ISTAT.PO.DATE,1,PFND,0)
      ISTAT.PO.QTY=DELETE(ISTAT.PO.QTY,1,PFND,0)
      ISTAT.PO.JOB=DELETE(ISTAT.PO.JOB,1,PFND,0)
      ISTAT.PO.JOB.QTY=DELETE(ISTAT.PO.JOB.QTY,1,PFND,0)
      ISTAT.PO.JOB.AMT=DELETE(ISTAT.PO.JOB.AMT,1,PFND,0)
   END
3099 RETURN
*
****************
PROCESS.ACCRUE: 
****************
*
   INAH.ACCT=CATG.INV
   INAH.ACCR.ACCT=CATG.ACCRU.LIAB
* Update Accrued Liability History
   READU ALH.CT FROM CONTROL,CONO:"ALHCOUNTER" ELSE ALH.CT=0
   ALH.CT=ALH.CT + 1
   IF ALH.CT > 999999 THEN ALH.CT=1
   WRITE ALH.CT ON CONTROL,CONO:"ALHCOUNTER"
   MAT ALH.REC=""
   ALH.ID=CONO:STR("0",6-LEN(ALH.CT)):ALH.CT
   ALH.DATE=INAH.DATE
   ALH.REF="R*":PO.CODE:"*":PROD
   ALH.SRC=INAH.SRC
   ALH.MON=INAH.PERIOD
   ALH.AMT=0-TOT.COST
   ALH.ACCT=INAH.ACCR.ACCT
   ALH.DV.DP.CC=INAH.DV.DP.CC
   RETURN
*
**************
PROCESS.VEND: 
**************
*
   VSTAT.KEY=CONO:PO.VEND.NO:"!":"R"
   MATREADU VSTAT.REC FROM VEND.STATS, VSTAT.KEY ELSE
      MAT VSTAT.REC=""
   END
   LOCATE PO.CODE IN VSTAT.PO<1>,1 SETTING POFND ELSE NULL
   VSTAT.PO<1,POFND>=PO.CODE
   VSTAT.PO.RECV<1,POFND>=VSTAT.PO.RECV<1,POFND> + INT(((ACT.RECV.PRICE/100) * (ACT.RECV.QTY/(INV.COST.WT/100)))/100 + .5)
   MATWRITE VSTAT.REC ON VEND.STATS, VSTAT.KEY
   VPS.KEY=VSTAT.KEY:"!":PO.CODE
   MATREADU VPS.REC FROM VEND.PO.STATS, VPS.KEY ELSE
      MAT VPS.REC=""
   END
   PTR=1
   LOOP
      LOCATE PO.PROD.NUM<1,POLN> IN VPS.PROD<1>,PTR SETTING PFND ELSE
         VPS.PROD<1,PFND>=PO.PROD.NUM<1,POLN>
         VPS.PROD.DESC<1,PFND>=INV.FULL.DESC
         VPS.U.M<1,PFND>=INV.UNIT<1,2>
*T28779  VPS.WHSE<1,PFND>=WHSE
         VPS.WHSE<1,PFND>=WHSE:"@":PO.PROD.SEQ<1,POLN>
      END
*T28779   IF WHSE # VPS.WHSE<1,PFND> THEN
      IF WHSE:"@":PO.PROD.SEQ<1,POLN> # VPS.WHSE<1,PFND> THEN
         PTR=PFND + 1
      END ELSE
         PTR=0
      END
   WHILE PTR DO
   REPEAT
   VPS.REC.QTY<1,PFND>=VPS.REC.QTY<1,PFND> + ACT.RECV.QTY
   VPS.REC.AMT<1,PFND>=VPS.REC.AMT<1,PFND> + INT(((ACT.RECV.PRICE/100) * (ACT.RECV.QTY/(INV.COST.WT/100)))/100 + .5)
   MATWRITE VPS.REC ON VEND.PO.STATS, VPS.KEY
*T28779 VPDS.KEY=VPS.KEY:"!":PO.PROD.NUM<1,POLN>:"!":WHSE
   VPDS.KEY=VPS.KEY:"!":PO.PROD.NUM<1,POLN>:"!":WHSE:"@":PO.PROD.SEQ<1,POLN>
   MATREADU VPDS.REC FROM VEND.PROD.STATS, VPDS.KEY ELSE
      MAT VPDS.REC=""
   END
   PTR=1
   LOOP
      LOCATE SSTK.DATE IN VPDS.REC.FI.DATE<1>,PTR SETTING DFND ELSE
         VPDS.REC.DATE<1,DFND>=SSTK.DATE
         VPDS.REC.UN.COST<1,DFND>=ACT.RECV.PRICE
         VPDS.REC.FI.DATE<1,DFND>=SSTK.DATE 
         VPDS.REC.QTY<1,DFND>=''
         VPDS.REC.PERIOD<1,DFND>=SSTK.PERIOD ;* C39801
      END
      IF VPDS.REC.UN.COST<1,DFND> # ACT.RECV.PRICE THEN
         PTR=DFND + 1
      END ELSE
         PTR=0
      END
   WHILE PTR DO
   REPEAT
   VPDS.REC.QTY<1,DFND>=VPDS.REC.QTY<1,DFND> + ACT.RECV.QTY
   MATWRITE VPDS.REC ON VEND.PROD.STATS, VPDS.KEY
   RETURN
*
****************
DELETE.SERIALS: 
***************
*
   DCNT=DCOUNT(DEL.ARR<1>,VM)
   FOR DD=1 TO DCNT
      DEL.SERIAL=DEL.ARR<1,DD>
      DELETE INV_SERIAL,CONO:DEL.SERIAL
      LOCATE DEL.SERIAL IN RSMAN.RS.NO<1>,1 SETTING SPTR THEN
         RSMAN.RS.NO = DELETE(RSMAN.RS.NO,1,SPTR,0)                    
         RSMAN.LINE.NO = DELETE(RSMAN.LINE.NO,1,SPTR,0)                  
      END                                                             
      LOCATE DEL.SERIAL IN RSXRF.RS.NO<1>,1 SETTING SPTR THEN
         RSXRF.RS.NO = DELETE(RSXRF.RS.NO,1,SPTR,0)                    
         RSXRF.LN.NO = DELETE(RSXRF.LN.NO,1,SPTR,0)                    
      END                                                             
   NEXT DD
   SCNT -= DCNT ;*T28090
   RETURN
*
******************
SET.RESERVES: 
******************
*
   RCNT=DCOUNT(IJS.RECP.NO<1>,VM)
   FOR RR=1 TO RCNT
      RECP.NO=IJS.RECP.NO<1,RR>
      IRW.ID=CONO:RECP.NO:"!":WHSE
      MATREADU IRW.REC FROM INV_RECP_WHSE_TEMP,IRW.ID ELSE      
         MATREADU IRW.REC FROM INV_RECP_WHSE,IRW.ID ELSE         
            MAT IRW.REC=''                                        
         END                                                     
      END                                                       
      LOCATE RECP.NO IN IWH.RECP.NO<1> SETTING RPOS THEN
         IRW.RSVB.QTY=IWH.RSV.FI<1,RPOS> 
         LOCATE JOB.NUM IN IRW.JOB<1> SETTING JPOS THEN             
            DIFF=IJS.FI.QTY<1,RR>-IRW.JRSVD.QTY<1,JPOS>
            IRW.JRSVD.QTY<1,JPOS>=IJS.FI.QTY<1,RR>
         END ELSE                                          
            IRW.JOB<1,JPOS>=JOB.NUM                          
            IRW.JRSVD.QTY<1,JPOS>+=IJS.FI.QTY<1,RR>                     
            DIFF=IJS.FI.QTY<1,RR>
         END                                               
         MATWRITEU IRW.REC ON INV_RECP_WHSE_TEMP,IRW.ID    
         LOCATE IRW.ID IN IID.IRW SETTING JUNK ELSE        
            IID.IRW<1,-1>=IRW.ID                            
         END                                               
         IF CATG.RSV.SERIAL='Y' THEN
            GOSUB RESERVE.SERIAL
         END
      END                                                 
   NEXT RR
   RETURN
*
********************
RESERVE.SERIAL: 
********************
*
   ;* reserve serials allways in FIFO order per Walid
   SCNT=DCOUNT(SSTK.SERIAL<1,PP>,SVM)
   FOR SS=1 TO SCNT UNTIL DIFF=0
      ISTK.ID=CONO:SSTK.SERIAL<1,PP,SS>
      MATREADU ISTK.REC FROM INV_SERIAL_TEMP,ISTK.ID THEN
         IF ISTK.RSVB.QTY>0 THEN
            IF DIFF<ISTK.RSVB.QTY THEN
               RQTY=DIFF
               DIFF=0
            END ELSE
               RQTY=ISTK.RSVB.QTY
               DIFF-=ISTK.RSVB.QTY
            END
            GOSUB UPD.ISTK.RESERVE
         END
      END
   NEXT SS
   RETURN
*
********************
UPD.ISTK.RESERVE: 
********************
*
   ISTK.RSVB.QTY-=RQTY                           
   ISTK.JOB<1,-1>=JOB.NUM                         
   ISTK.JRSVD.QTY<1,-1>=RQTY                     
   MATWRITE ISTK.REC ON INV_SERIAL_TEMP,ISTK.ID      
   LOCATE ISTK.ID IN IID.ISTK<1> SETTING JUNK ELSE
      IID.ISTK<1,-1>=ISTK.ID                            
   END
   RETURN                                            
*
***************
*
*---- ERROR ROUTINE
*
91000*CRT @(0,23):@(-4):ERRMSG : 
   IF HERRMSG # '' THEN
      HERRMSG=HERRMSG:SM:ERRMSG
   END ELSE
      HERRMSG=ERRMSG
   END
   RETURN
93000*CRT @(0,23):@(-4):ERRMSG : 
*
*---- END OF PROGRAM
*
99999 *
   RETURN
