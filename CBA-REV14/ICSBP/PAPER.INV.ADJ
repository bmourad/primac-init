*COPY>CPYLIB>COM1
*************************************************************************
*T25740 edvard 07/19/2001 *  REV12
*T25978 adelgado 02/18/2002 * Add the use of prompts (S,SR,SB,ST).
*T26126 adelgado 02/25/2002 * Implement the LOCKED clause for READU.
*T26497 adelgado 04/04/2002 * Add validation rule for Inter-Divisional
*                             Whse.
*T26556 cmykleb 04/23/2002 * Correct problems found during qc.
*T26685 cmykleb 08/20/2002 * Division Security
*T26912 cmykleb 07/30/2002 * If a product entered with CATG.TYPE not =
*                            previous type it will not accept but if no
*                            other products with the original type are
*                            entered it writes out the record with the
*                            incorrect type.
*T27144 epitka 12/20/2002 * CHECK FOR SERIAL IN INV_SERIAL_DELETED FILE
*T27425 lross 05/12/2003 * Rounding problem.
*T27484 lross 06/09/2003 * If IADJ.TYPE = 'R' it should allow entry of a
*                          new serial.
*T27705 lross 09/25/2003 * Lengthen SERIAL to 15.
*T27860 lross 12/30/2003 * Correct INV.CNV.REC values that are passed 
*                          to CALC.STK.QTY.
*T27801 lross 04/05/2004 * Error in calc diam.
*T27893 cmykleb 01/21/2004 * If the serial product does not match the
*                            product id entered, give an error message.
*ENDDOC
*************************************************************************
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>ICS.CPYLIB>PHYSICAL.INV
*COPY>ICS.CPYLIB>INV.ADJ.CODES
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>ICS.CPYLIB>CATEGORY
*COPY>JCS.CPYLIB>JOB
*COPY>JCS.CPYLIB>JOB.STATS
*COPY>CPYLIB>GEN.XREF
*COPY>PMC.CPYLIB>COMPANY
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>ICS.CPYLIB>INV_SERIAL
*COPY>CPYLIB>SYSCOM
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>ICS.CPYLIB>INV.CNV
*
DEFFUN CALC.DIAM(COST.QTY,STK.QTY,MAT INV.REC)
DEFFUN GET.SERIAL.SEQ(CONO,CONTROL.FILE,INV_SERIAL.FILE)
DEFFUN CALC.STK.QTY(COST.QTY,MAT INV.CNV.REC,ROND,LN)
DEFFUN CALC.COST.QTY(STK.QTY,MAT INV.CNV.REC,ROND,LN)
*
SYS.TYPE=1
CALL SYSCOM(MAT SYSCOM.REC)
*
* OPEN FILES
*
OPEN '','INVENTORY' TO INVENTORY ELSE
  ERRMSG='INVENTORY FILE IS MISSING';GOTO 93000
END
OPEN '','INV.WHSE' TO INV.WHSE ELSE
  ERRMSG='INV.WHSE FILE IS MISSING';GOTO 93000
END
OPEN '','INV.WHSE.LOC' TO INV.WHSE.LOC ELSE
  ERRMSG='INV.WHSE.LOC FILE IS MISSING';GOTO 93000
END
OPEN '','PHYSICAL.INV' TO PHYSICAL.INV ELSE
  ERRMSG='PHYSICAL.INV FILE IS MISSING';GOTO 93000
END
OPEN '','CATEGORY' TO CATEGORY ELSE
  ERRMSG='CATEGORY FILE IS MISSING';GOTO 93000
END
OPEN '','JOB' TO JOB ELSE ERRMSG='JOB FILE IS MISSING';GOTO 93000
OPEN '','JOB.STATS' TO JOB.STATS ELSE
  ERRMSG='JOB.STATS FILE IS MISSING';GOTO 93000
END
OPEN '','WAREHOUSE' TO WAREHOUSE ELSE
  ERRMSG='WAREHOUSE FILE IS MISSING';GOTO 93000
END
OPEN '','PREFIX' TO PREFIX ELSE
  ERRMSG='PREFIX FILE IS MISSING';GOTO 93000
END
OPEN '','COMPANY' TO COMPANY ELSE
  ERRMSG='COMPANY FILE IS MISSING';GOTO 93000
END
OPEN '','CONTROL' TO CONTROL ELSE
  ERRMSG='CONTROL FILE IS MISSING';GOTO 93000
END
*T27705 v
OPEN '','ICS.SCREENS' TO M.SCREENS ELSE
  ERRMSG='ICS.SCREENS FILE IS MISSING';GOTO 93000
END
OPEN '','INVENTORY.XREF' TO INVENTORY.XREF ELSE
  ERRMSG='INVENTORY.XREF FILE IS MISSING';GOTO 93000
END
OPEN '','INV.ADJ.CODES' TO INV.ADJ.CODES ELSE
  ERRMSG='INV.ADJ.CODES FILE IS MISSING';GOTO 93000
END
OPEN '','SECURITY' TO SECURITY ELSE
  ERRMSG='SECURITY FILE IS MISSING';GOTO 93000
END
OPEN '','INV_SERIAL' TO INV_SERIAL ELSE
  ERRMSG='INV_SERIAL FILE IS MISSING';GOTO 93000
END
OPEN '','INV_SERIAL_DELETED' TO INV_SERIAL_DELETED ELSE
  ERRMSG='INV_SERIAL_DELETED FILE IS MISSING';GOTO 93000
END
*
OPER.ID=@LOGNAME
MAT COMP.REC='';CONO=''
CALL GET.CONO(CONO,MAT COMP.REC)
IF CONO='END' THEN GOTO 99999
OPTION='';OPTION1=''
ERROR.FLAG=0
BEGIN.PAGE.1=7;BEGIN.PAGE.2=16
*T27705PAGE.SIZE.1=3;PAGE.SIZE.2=4
PAGE.SIZE.1=2;PAGE.SIZE.2=2
*T27705LINE.SPACE=2;LINE.SPACE.2=1
LINE.SPACE=2;LINE.SPACE.2=2
MAT EDIT.COM.DRIVER=''
ECD.SCRN.CNT=1
ECD.SCRN.NAME<1>='PAPER.INV.ADJ'
ECD.ACTION=1;CALL SCRN.EDIT
ECD.SCRN.NO=1
MAT GEN.XREF.REC=''
GXR.CO=CONO
GXR.TOP.LINE='INVENTORY XREF SEARCH'
GXR.HEADING<1,1>='PRODUCT NUMBER'
GXR.HEADING<1,2>='FULL DESCRIPTION'
GXR.ATT<1,1>=0;GXR.ATT<1,2>=2
GXR.LEN<1,1>=15;GXR.LEN<1,2>=45
GXR.LOC=1
GXR.FILE=INVENTORY
GXR.XREF=INVENTORY.XREF
;*
;* MAIN PROCESSING
;*
DONE=0
LOOP
  MAT PHS.INV.REC='';MAT INV.CNV.REC='';MAT CATG.REC=''
  MAT SCV.REC=""
  ECD.ACTION=6;CALL SCRN.EDIT
  LINES.1=0
  OLD.START.LINE.1=0
  LINES.2=0
  OLD.START.LINE.2=0
  GOSUB ENT.PROD.LINE
  IF NOT(ERR) THEN
    GOSUB ENT.WHSE
  END
  IF NOT(ERR) THEN
    GOSUB ENT.LOC
  END
  IF NOT(ERR) THEN
    PHS.INV.KEY=CONO:CATG.TYPE:'!':PROD.LINE:'!':WHSE.CODE:'!':LOC.CODE
    ;* T26126 v
    MATREADU PHS.INV.REC FROM PHYSICAL.INV, PHS.INV.KEY LOCKED
      ERRMSG = 'PHYSICAL INVENTORY record is locked by user - ':GETUSERNAME(STATUS())
      GOSUB 91000 ; CONTINUE 
    END ELSE
      ;* T26126 ^
      MAT PHS.INV.REC=''
    END
    DIFF.DIAM=''; DIFF.SHEET='' ; DIFF.WGHT='' ; DIFF.QTY=''
    IF PHS.INV.PROD='' THEN
      LOOP
        LN1=LINES.1+1
        OLD.LINES.1=LINES.1
        GOSUB PRODUCT.LINES.ENTRY
        LINES.2=0
        FOR C=16 TO 19
          P_X  = 0 ; P_Y = C ; P_VALUE = "" ; P_OPT = "CL"
          CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
        NEXT C
        IF LINES.1 # OLD.LINES.1 THEN
          LOOP
            LN2=LINES.2+1
            OLD.LINES.2=LINES.2
            GOSUB SERIAL.LINES.ENTRY
          WHILE LINES.2 > OLD.LINES.2 DO REPEAT
          GOSUB SUB.OPTION.ENTRY
        END
      WHILE LINES.1 > OLD.LINES.1 DO REPEAT
      LN1=LINES.1
      FOR C=16 TO 19
        P_X  = 0 ; P_Y = C ; P_VALUE = "" ; P_OPT = "CL"
        CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      NEXT C
    END ELSE
      LINES.1=COUNT(PHS.INV.PROD,VM)+1
      FOR D=1 TO LINES.1
        MATREAD INV.REC FROM INVENTORY,CONO:PHS.INV.PROD<1,D> ELSE
          MAT INV.REC=""
        END
        LN1=D;GOSUB SET.CONV.VALUES
        DIFF.QTY<1,D>=PHS.NEW.QTY<1,D> - PHS.CUR.QTY<1,D>
        CNT=DCOUNT(PHS.R.S.ID<1,D>,SVM)
        FOR DD=1 TO CNT
          DIFF.DIAM<1,D,DD>=PHS.NEW.DIAM<1,D,DD> - PHS.CUR.DIAM<1,D,DD>
          DIFF.WGHT<1,D,DD>=PHS.NEW.WGHT<1,D,DD> - PHS.CUR.WGHT<1,D,DD>
        NEXT DD
      NEXT D
      LN1=1
    END
    GOSUB SCROLL.PRODUCT
    GOSUB MAIN.OPTION.ENTRY
  END
UNTIL (DONE) DO REPEAT
*
*************************************************************************
***** S U B R O U T I N E S *********************************************
*************************************************************************
*
********************
PRODUCT.LINES.ENTRY: 
********************
*
EOP=0; SKIP=0
LOOP
  GOSUB SCROLL.PRODUCT
  SLN=BEGIN.PAGE.1+LINE.SPACE*MOD(LN1 - 1,PAGE.SIZE.1)
  GOSUB ENT.PRODUCT
  IF NOT(SKIP) THEN
    EOP=1
  END
UNTIL (EOP) DO REPEAT
RETURN
*
*******************
SERIAL.LINES.ENTRY: 
*******************
*
GOSUB SCROLL.SERIAL
EOS=0
LOOP
  SKIP=0
  GOSUB ENT.ADJ.CODE
  IF NOT(SKIP) THEN
    GOSUB ENT.SERIAL
    IF NOT(SKIP) THEN
      PHS.CUR.WGHT<1,LN1,LN2>=ISTK.CUR.QTY
      WGHT=ISTK.CUR.QTY
      PHS.NEW.SHEET<1,LN1,LN2>=ISTK.CUR.STK.QTY ;*T27801
      DIAM=ISTK.CUR.DIAM
      GOSUB GET.DIAM
      PHS.NEW.SHEET<1,LN1,LN2>='' ;*T27801
      PHS.CUR.DIAM<1,LN1,LN2>=DIAM
      PHS.CUR.SHEET<1,LN1,LN2>=ISTK.CUR.STK.QTY
      ;*
      ;* display current qty's
      ;*
*T27705 P_X  = 21 ; P_Y = SLN2
      P_X  = 25 ; P_Y = SLN2
      TMP=CALC.STK.QTY(PHS.CUR.WGHT<1,LN1,LN2>,MAT INV.CNV.REC,'',LN1)
*T27860      P_VALUE=OCONV(TMP,ICR.CNV<1,LN1>)"R#9" ; P_OPT=""
      P_VALUE=OCONV(TMP,ICR.CNV<LN1>)"R#9" ; P_OPT=""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      P_X  = 51 ; P_Y = SLN2
      P_VALUE = OCONV(PHS.CUR.DIAM<1,LN1,LN2>, "MD2") "R#9" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      ;*
      GOSUB ENT.ADJ.QTY
      ;*T26556 v
      IF NOT(SKIP) THEN
        GOSUB GET.UNIT.COST
      END ELSE
        P_X = 0 ; P_Y = SLN2 ; P_VALUE = "" ; P_OPT = "CL"
        CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      END
      ;*T26556 ^
      ;*
      IF NOT(SKIP) THEN
        DIFF.QTY<1,LN1>=DIFF.QTY<1,LN1> - DIFF.WGHT<1,LN1,LN2>
        IF PHS.NEW.WGHT<1,LN1,LN2>='' THEN
          PHS.NEW.QTY<1,LN1>=PHS.NEW.QTY<1,LN1> - PHS.CUR.WGHT<1,LN1,LN2>
        END ELSE
          PHS.NEW.QTY<1,LN1>=PHS.NEW.QTY<1,LN1> - PHS.NEW.WGHT<1,LN1,LN2>
        END
        DIFF.WGHT<1,LN1,LN2>=VALUE
        TMP=CALC.STK.QTY(DIFF.WGHT<1,LN1,LN2>,MAT INV.CNV.REC,'',LN1)
        DIFF.SHEET=TMP
        PHS.NEW.WGHT<1,LN1,LN2>=PHS.CUR.WGHT<1,LN1,LN2>+VALUE
        TMP=CALC.STK.QTY(PHS.NEW.WGHT<1,LN1,LN2>,MAT INV.CNV.REC,'',LN1)
        PHS.NEW.SHEET<1,LN1,LN2>=TMP
*T27425 IF PHS.NEW.WGHT<1,LN1,LN2> = 0 AND ABS(PHS.NEW.SHEET<1,LN1,LN2>) <= 9 THEN PHS.NEW.SHEET<1,LN1,LN2> = 0
        IF PHS.NEW.WGHT<1,LN1,LN2>+0 = 0 AND ABS(PHS.NEW.SHEET<1,LN1,LN2>) <= FUDGE THEN PHS.NEW.SHEET<1,LN1,LN2> = 0
        DIFF.QTY<1,LN1>=DIFF.QTY<1,LN1>+DIFF.WGHT<1,LN1,LN2>
        PHS.NEW.QTY<1,LN1>=PHS.NEW.QTY<1,LN1>+PHS.NEW.WGHT<1,LN1,LN2>
        ;*
        P_X  = 41 ; P_Y = SLN2
        IF DIFF.WGHT<1,LN1,LN2> < 0 THEN ROND="-.5" ELSE ROND=".5"
        TMP=CALC.STK.QTY(DIFF.WGHT<1,LN1,LN2>,MAT INV.CNV.REC,ROND,LN1)
*T27860        P_VALUE=OCONV(TMP,ICR.CNV<1,LN1>)"R#9" ; P_OPT=""
        P_VALUE=OCONV(TMP,ICR.CNV<LN1>)"R#9" ; P_OPT=""
        CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*T27705 P_X  = 31 ; P_Y = SLN2
        P_X  = 31 ; P_Y = SLN2+1
        IF PHS.NEW.WGHT<1,LN1,LN2> < 0 THEN ROND="-.5" ELSE ROND=".5"
        TMP=CALC.STK.QTY(PHS.NEW.WGHT<1,LN1,LN2>,MAT INV.CNV.REC,ROND,LN1)
*T27860        P_VALUE=OCONV(TMP,ICR.CNV<1,LN1>)"R#9" ; P_OPT=""
        P_VALUE=OCONV(TMP,ICR.CNV<LN1>)"R#9" ; P_OPT=""
        CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
        P_X  = 30 ; P_Y = SLN
        IF PHS.NEW.QTY<1,LN1> < 0 THEN ROND="-.5" ELSE ROND=".5"
        TMP=CALC.STK.QTY(PHS.NEW.QTY<1,LN1>,MAT INV.CNV.REC,ROND,LN1)
*T27860        P_VALUE=OCONV(TMP,ICR.CNV<1,LN1>)"R#9" ; P_OPT=""
        P_VALUE=OCONV(TMP,ICR.CNV<LN1>)"R#9" ; P_OPT=""
        CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
        P_X  = 40 ; P_Y = SLN
        IF DIFF.QTY<1,LN1> < 0 THEN ROND="-.5" ELSE ROND=".5"
        TMP=CALC.STK.QTY(DIFF.QTY<1,LN1>,MAT INV.CNV.REC,ROND,LN1)
*T27860        P_VALUE=OCONV(TMP,ICR.CNV<1,LN1>)"R#9" ; P_OPT=""
        P_VALUE=OCONV(TMP,ICR.CNV<LN1>)"R#9" ; P_OPT=""
        CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
        ;*
        IF U.M # "SHT" THEN
          BEGIN CASE
            CASE PHS.ADJ.TYPE<1,LN1,LN2>='R'
              WGHT=PHS.NEW.WGHT<1,LN1,LN2>
              SHTS=PHS.NEW.SHEET<1,LN1,LN2>
              DIAM=""
              GOSUB GET.DIAM
              IF DIAM # "" THEN
                PHS.NEW.DIAM<1,LN1,LN2>=DIAM
                VALUE=DIAM
              END ELSE
                X=61;Y=SLN2;MAXL=9;TYP=4;SCALER=2;O.R='O'
                DEFAULT=OCONV(PHS.NEW.DIAM<1,LN1,LN2>,"MD2")
                MINV=0;MAXV=999999999
                CALL EDIT.SUB
                IF VALUE='END' THEN SKIP=1
              END
              VALUE=VALUE-PHS.CUR.DIAM<1,LN1,LN2>
            CASE 1
              WGHT=PHS.NEW.WGHT<1,LN1,LN2>
              SHTS=PHS.NEW.SHEET<1,LN1,LN2>
              DIAM=""
              GOSUB GET.DIAM
              IF DIAM # "" THEN
                PHS.NEW.DIAM<1,LN1,LN2>=DIAM
                VALUE=ABS(DIAM-PHS.CUR.DIAM<1,LN1,LN2>)
              END ELSE
                X=71;Y=SLN2;MAXL=9;TYP=4;SCALER=2
                O.R='O';DEFAULT=OCONV(ABS(DIFF.DIAM<1,LN1,LN2>),"MD2")
                MINV=0;MAXV=999999999
                CALL EDIT.SUB
                IF VALUE='END' THEN SKIP=1
              END
              IF PHS.ADJ.TYPE<1,LN1,LN2>='M' THEN VALUE=VALUE*(-1)
          END CASE
          IF NOT(SKIP) THEN
            DIFF.DIAM<1,LN1,LN2>=VALUE
            PHS.NEW.DIAM<1,LN1,LN2>=PHS.CUR.DIAM<1,LN1,LN2> + VALUE
            P_X  = 61 ; P_Y = SLN2
            P_VALUE = OCONV(PHS.NEW.DIAM<1,LN1,LN2>,"MD2") "R#9" ; P_OPT = ""
            P_X  := AM:71 ; P_Y := AM:SLN2
            P_VALUE := AM:OCONV(DIFF.DIAM<1,LN1,LN2>,"MD2") "R#9"
            CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
          END
        END
        IF NOT(SKIP) THEN
          PHS.DATE.ENT<1,LN1,LN2>=DATE()
          PHS.OPER.ID<1,LN1,LN2>=OPER.ID
          LINES.2=DCOUNT(PHS.R.S.ID<1,LN1>,SVM)
          EOS=1
        END
      END
    END
  END
UNTIL (EOS) DO REPEAT
RETURN
*
******************
MAIN.OPTION.ENTRY: 
******************
*
MORE=1
LOOP
  ECD.NUM = 37
  SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""
  ECD.ACTION = 4
  CALL SCRN.EDIT
  OPTION=ECD.RET.VALUE
  BEGIN CASE
    CASE OPTION='E' OR OPTION='END'
      MORE=0
      RELEASE
    CASE OPTION='A'
      LOOP
        LN1=LINES.1+1
        OLD.LINES.1=LINES.1
        GOSUB PRODUCT.LINES.ENTRY
        LINES.2=0
        FOR C=16 TO 19
          P_X  = 0 ; P_Y = C ; P_VALUE = "" ; P_OPT = "CL"
          CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
        NEXT C
        IF LINES.1 # OLD.LINES.1 THEN
          LOOP
            LN2=LINES.2+1
            OLD.LINES.2=LINES.2
            GOSUB SERIAL.LINES.ENTRY
          WHILE LINES.2 > OLD.LINES.2 DO REPEAT
          GOSUB SUB.OPTION.ENTRY
        END
      WHILE LINES.1 > OLD.LINES.1 DO REPEAT
      LN1=LINES.1
      FOR C=16 TO 19
        P_X  = 0 ; P_Y = C ; P_VALUE = "" ; P_OPT = "CL"
        CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      NEXT C
    CASE OPTION='R'
      GOSUB GET.PROD.LINE.NUM
      IF LNO THEN
        LN1=LNO
        SLN=BEGIN.PAGE.1+LINE.SPACE*MOD(LN1 - 1,PAGE.SIZE.1)
        LINES.2=DCOUNT(PHS.R.S.ID<1,LN1>,SVM)
        INV.KEY=CONO:PHS.INV.PROD<1,LN1>
        MATREAD INV.REC FROM INVENTORY, INV.KEY ELSE MAT INV.REC=''
        MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE ELSE MAT CATG.REC=""
        WHSE.KEY=CONO:PHS.INV.PROD<1,LN1>:'!':WHSE.CODE
        MATREAD IWH.REC FROM INV.WHSE, WHSE.KEY ELSE
          MAT IWH.REC=''
        END
        LOCATE LOC.CODE IN IWH.LOC<1>,1 SETTING LFND ELSE
          LFND=DCOUNT(IWH.LOC,VM)+1
          IWH.LOC<1,LFND>=LOC.CODE
        END
        MATREAD IWLO.REC FROM INV.WHSE.LOC, WHSE.KEY:"!":IWH.LOC<1,LFND>  ELSE
          MAT IWLO.REC=""
        END
        OLD.START.LINE.2=0
        LN2=1
        GOSUB SCROLL.SERIAL;GOSUB SUB.OPTION.ENTRY
      END
    CASE OPTION='D'
      GOSUB GET.PROD.LINE.NUM
      IF LNO THEN
        LN1=LNO
        LL=0;GOSUB 80000
        LINES.1=DCOUNT(PHS.INV.PROD,VM)
        IF LN1 > 1 AND LN1 > LINES.1 THEN LN1=LN1 - 1
        IF LN1 < 1 THEN LN1=1
        OLD.START.LINE.1=0
      END
      GOSUB SCROLL.PRODUCT
    CASE OPTION='S'
      LN1=LN1+PAGE.SIZE.1
      IF LN1 > LINES.1 THEN LN1=1
      GOSUB SCROLL.PRODUCT
      * T25978 v
    CASE OPTION = 'SR'
      LN1 -= PAGE.SIZE.1
      IF LN1 < 1 THEN LN1 = 1
      GOSUB SCROLL.PRODUCT
    CASE OPTION = 'ST'
      LN1 = 1
      GOSUB SCROLL.PRODUCT
    CASE OPTION = 'SB'
      LN1 = LINES.1
      GOSUB SCROLL.PRODUCT
      * T25978 ^
    CASE OPTION='F'
*T26912 v
      MATWRITE PHS.INV.REC ON PHYSICAL.INV, CONO:PROD.TYPE:'!':PROD.LINE:'!':WHSE.CODE:'!':LOC.CODE
      ;*T26912 ^
      MORE=0
  END CASE
WHILE MORE=1 DO REPEAT
RETURN
*
*****************
SUB.OPTION.ENTRY: 
*****************
*
MORE1=1
LOOP
  ECD.NUM = 38
  SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""
  ECD.ACTION = 4
  CALL SCRN.EDIT
  OPTION1=ECD.RET.VALUE
  BEGIN CASE
    CASE OPTION1='' OR OPTION1='END'
      FOR C=16 TO 19
        P_X  = 0 ; P_Y = C ; P_VALUE = "" ; P_OPT = "CL"
        CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      NEXT C
      MORE1=0
    CASE OPTION1='A'
      LOOP
        LN2=LINES.2+1
        OLD.LINES.2=LINES.2
        GOSUB SERIAL.LINES.ENTRY
      WHILE LINES.2 > OLD.LINES.2 DO REPEAT
      LN2=LINES.2
      GOSUB SCROLL.SERIAL
    CASE OPTION1='C'
      GOSUB GET.SER.LINE.NUM
      IF LNO THEN
        LN2=LNO
        ;*T26556 v
        IF PHS.ADJ.TYPE<1,LN1,LN2> # 'R' THEN
          ISTK.ID = CONO:PHS.R.S.ID<1,LN1,LN2>
          MATREAD ISTK.REC FROM INV_SERIAL, ISTK.ID ELSE
            ERRMSG = 'SERIAL DOES NOT EXIST'
            GOSUB 91000
            GOTO SUB.OPTION.ENTRY
          END
        END
        ;*T26556 ^
        GOSUB SCROLL.SERIAL
        SLN2=BEGIN.PAGE.2+LINE.SPACE.2*MOD(LN2 - 1,PAGE.SIZE.2)
*T27705 P_X  = 31 ; P_Y = SLN2 ; P_VALUE = SPACE(10) ; P_OPT = ""
        P_X  = 31 ; P_Y = SLN2+1 ; P_VALUE = SPACE(10) ; P_OPT = ""
        P_X  := AM:41 ; P_Y := AM:SLN2 ; P_VALUE := AM:SPACE(10)
        P_X  := AM:61 ; P_Y := AM:SLN2 ; P_VALUE := AM:SPACE(10)
        CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
        ;*T26556 v
        GOSUB SERIAL.LINES.ENTRY
        ;*T26556 ^
      END
    CASE OPTION1='D'
      GOSUB GET.SER.LINE.NUM
      IF LNO THEN
        LN2=LNO
        DIFF.QTY<1,LN1>=DIFF.QTY<1,LN1> - DIFF.WGHT<1,LN1,LN2>
        LL=LN2;GOSUB 85000
        PHS.NEW.QTY<1,LN1>=PHS.CUR.QTY<1,LN1>+DIFF.QTY<1,LN1>
        IF PHS.NEW.QTY<1,LN1> < 0 THEN ROND="-.5" ELSE ROND=".5"
        P_X  = 30 ; P_Y = SLN
        TMP=CALC.STK.QTY(PHS.NEW.QTY<1,LN1>,MAT INV.CNV.REC,ROND,LN1)
*T27860        P_VALUE=OCONV(TMP,ICR.CNV<1,LN1>)"R#9" ; P_OPT=""
        P_VALUE=OCONV(TMP,ICR.CNV<LN1>)"R#9" ; P_OPT=""
        CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
        IF DIFF.QTY<1,LN1> < 0 THEN ROND="-.5" ELSE ROND=".5"
        P_X  = 40 ; P_Y = SLN
        TMP=CALC.STK.QTY(DIFF.QTY<1,LN1>,MAT INV.CNV.REC,ROND,LN1)
*T27860        P_VALUE=OCONV(TMP,ICR.CNV<1,LN1>)"R#9" ; P_OPT=""
        P_VALUE=OCONV(TMP,ICR.CNV<LN1>)"R#9" ; P_OPT=""
        CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
        LINES.2=DCOUNT(PHS.R.S.ID<1,LN1>,SVM)
        IF LN2 > 1 AND LN2 > LINES.2 THEN LN2=LN2 - 1
        IF LN2 < 1 THEN LN2=1
        OLD.START.LINE.2=0
      END
      GOSUB SCROLL.SERIAL
    CASE OPTION1='S'
      LN2=LN2+PAGE.SIZE.2
      IF LN2 > LINES.2 THEN LN2=1
      GOSUB SCROLL.SERIAL
      * T25978 v
    CASE OPTION = 'SR'
      LN2 -= PAGE.SIZE.2
      IF LN2 < 1 THEN LN2 = 1
      GOSUB SCROLL.SERIAL
    CASE OPTION = 'ST'
      LN2 = 1
      GOSUB SCROLL.SERIAL
    CASE OPTION = 'SB'
      LN2 = LINES.2
      GOSUB SCROLL.SERIAL
      * T25978 ^
  END CASE
WHILE MORE1=1 DO REPEAT
RETURN
*
************
ENT.PRODUCT: 
************
*
EOI=0
LOOP
  SKIP=0
  P_X  = 0 ; P_Y = SLN ; P_VALUE = LN1 "R#3" ; P_OPT = "CL"
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  X=4;Y=SLN;TYP=1;MAXL=15;O.R='O';VALDAT='';HMSG=''
  DEFAULT=PHS.INV.PROD<1,LN1>
  CALL EDIT.SUB
  BEGIN CASE
    CASE VALUE='END'
      LL=0;GOSUB 80000
      P_X  = 0 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      SKIP=1;EOI=1;EOP=1
    CASE VALUE=''
      X=4;Y=SLN+1;O.R='O';TYP=1;MAXL=40;VALDAT='';HMSG=''
      CALL EDIT.SUB
      IF VALUE#'' AND VALUE#'END' THEN
        GXR.ID=''
        GXR.SRCH.ID=VALUE
        CALL GEN.XREF(MAT GEN.XREF.REC,PREFIX)
        ECD.ACTION=2;CALL SCRN.EDIT
        ECD.ACTION=3;CALL SCRN.EDIT
        OLD.START.LINE.1=0
        GOSUB SCROLL.PRODUCT
        IF GXR.ID#'' THEN
          VALUE=GXR.ID
          SLN=BEGIN.PAGE.1+LINE.SPACE*MOD(LN1-1,PAGE.SIZE.1)
          P_X  = 0 ; P_Y = SLN ; P_VALUE = LN1 "R#3" ; P_OPT = "CL"
          P_X  := AM:4 ; P_Y := AM:SLN ; P_VALUE := AM:VALUE "L#15"
          CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
        END ELSE
          SKIP=1;EOI=1
        END
      END ELSE
        SKIP=1;EOI=1
      END
  END CASE
  IF NOT(SKIP) THEN
    LOCATE VALUE IN PHS.INV.PROD<1>,1 SETTING FND ELSE FND=0
    BEGIN CASE
      CASE (FND)
        ERRMSG='INVENTORY (':VALUE:') ALREADY ALLOCATED'
        GOSUB 91000
      CASE 1
        PROD.NUM=VALUE
        MATREAD INV.REC FROM INVENTORY, CONO:VALUE THEN
          MATREAD CATG.REC FROM CATEGORY,CONO:INV.LINE THEN
            IF PROD.LINE = INV.LINE THEN
              IF INV.PAP.TYPE="REGULAR" OR INV.PAP.TYPE="REG" OR INV.PAP.TYPE="" THEN
                ERRMSG="THIS PRODUCT IS NOT A PAPER PRODUCT";GOSUB 91000
              END ELSE
                LOCATE WHSE.CODE IN INV.WHSE.CODE<1>,1 SETTING WFND THEN
                  WHSE.KEY=CONO:PROD.NUM:'!':WHSE.CODE
                  MATREAD IWH.REC FROM INV.WHSE, WHSE.KEY THEN
                    LOCATE LOC.CODE IN IWH.LOC<1>,1 SETTING LFND THEN
                      EOI=1
                    END ELSE
                      LFND=DCOUNT(IWH.LOC,VM)+1
                      IWH.LOC<1,LFND>=LOC.CODE
                      ERRMSG='THIS PRODUCT IS NOT SETUP FOR LOCATION - ':LOC.CODE
                      GOSUB 91000
                    END
                    IF NOT(SKIP) THEN
                      MATREAD IWLO.REC FROM INV.WHSE.LOC, WHSE.KEY:"!":IWH.LOC<1,LFND> ELSE
                        MAT IWLO.REC=""
                        IWLO.LOC.ON.HAND=0
                      END
                      IF IWLO.SERIAL='' THEN
                        ERRMSG='THERE ARE NO SERIALS FOR THIS LOCATION'
                        GOSUB 91000; SKIP=1
                      END
*T27425 v
                      IF INV.UNIT<1,3>='MSI' THEN FUDGE=50 ELSE FUDGE=9
*T27425 ^
                    END
                  END ELSE
                    ERRMSG='INV.WHSE RECORD NOT ON FILE'
                    GOSUB 91000 ; SKIP=1
                  END
                END ELSE
                  ERRMSG='PRODUCT IS NOT SETUP FOR WAREHOUSE # ':WHSE.CODE
                  GOSUB 91000 ; SKIP=1
                END
              END
            END ELSE
              ERRMSG='THIS PRODUCT DOES NOT BELONG TO PRODUCT LINE'
              GOSUB 91000; SKIP=1
            END
          END ELSE
            ERRMSG="CATEGORY (":INV.LINE:") IS NOT ON FILE"
            GOSUB 91000; SKIP=1
          END
        END ELSE
          ERRMSG='INVENTORY (':VALUE:') IS NOT ON FILE.'
          GOSUB 91000; SKIP=1
        END
    END CASE
  END
UNTIL (EOI) DO REPEAT
IF NOT(SKIP) THEN
  GOSUB SET.CONV.VALUES
  ON.HAND=IWLO.LOC.ON.HAND
  PHS.INV.PROD<1,LN1>=PROD.NUM
  PHS.INV.DESC<1,LN1>=INV.DESC
  PHS.M.WGHT<1,LN1>=INV.M.WT
  PHS.CUR.QTY<1,LN1>=ON.HAND
  PHS.NEW.QTY<1,LN1>=PHS.CUR.QTY<1,LN1>
  DIFF.QTY<1,LN1>=PHS.NEW.QTY<1,LN1> - PHS.CUR.QTY<1,LN1>
  PHS.UN.COST<1,LN1>=''
  P_X  = 4 ; P_Y = SLN+1 ; P_VALUE = INV.DESC "L#30" ; P_OPT = ""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  P_X  = 20 ; P_Y = SLN
  IF PHS.CUR.QTY<1,LN1> < 0 THEN ROND="-.5" ELSE ROND=".5"
  TMP=CALC.STK.QTY(PHS.CUR.QTY<1,LN1>,MAT INV.CNV.REC,ROND,LN1)
*T27860  P_VALUE=OCONV(TMP,ICR.CNV<1,LN1>)"R#9" ; P_OPT=""
  P_VALUE=OCONV(TMP,ICR.CNV<LN1>)"R#9" ; P_OPT=""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  IF PHS.NEW.QTY<1,LN1> < 0 THEN ROND="-.5" ELSE ROND=".5"
  P_X  = 30 ; P_Y = SLN
  TMP=CALC.STK.QTY(PHS.NEW.QTY<1,LN1>,MAT INV.CNV.REC,ROND,LN1)
*T27860  P_VALUE=OCONV(TMP,ICR.CNV<1,LN1>)"R#9" ; P_OPT=""
  P_VALUE=OCONV(TMP,ICR.CNV<LN1>)"R#9" ; P_OPT=""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  IF DIFF.QTY<1,LN1> < 0 THEN ROND="-.5" ELSE ROND=".5"
  P_X  = 40 ; P_Y = SLN
  TMP=CALC.STK.QTY(DIFF.QTY<1,LN1>,MAT INV.CNV.REC,ROND,LN1)
*T27860  P_VALUE=OCONV(TMP,ICR.CNV<1,LN1>)"R#9" ; P_OPT=""
  P_VALUE=OCONV(TMP,ICR.CNV<LN1>)"R#9" ; P_OPT=""
  CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  LINES.1=DCOUNT(PHS.INV.PROD,VM)
END
RETURN
*
****************
SCROLL.PRODUCT: 
****************
*
10000 
START.LINE.1=1+INT((LN1-1)/PAGE.SIZE.1)*PAGE.SIZE.1
IF START.LINE.1#OLD.START.LINE.1 THEN 
  OLD.START.LINE.1=START.LINE.1
  LAST.LINE.1=START.LINE.1+PAGE.SIZE.1 - 1
  CNT=1
  FOR N=START.LINE.1 TO LAST.LINE.1 UNTIL N > LINES.1
    SLN=BEGIN.PAGE.1+LINE.SPACE*MOD(N-1,PAGE.SIZE.1)
    P_X  = 0 ; P_Y = SLN ; P_VALUE = N "R#3" ; P_OPT = ""
    P_X  := AM:4 ; P_Y := AM:SLN ; P_VALUE := AM:PHS.INV.PROD<1,N> "L#15"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    IF PHS.CUR.QTY<1,N> < 0 THEN ROND="-.5" ELSE ROND=".5"
    P_X  = 20 ; P_Y = SLN 
    TMP=CALC.STK.QTY(PHS.CUR.QTY<1,N>,MAT INV.CNV.REC,ROND,N)
*T27860    P_VALUE=OCONV(TMP,ICR.CNV<1,N>)"R#9" ; P_OPT=""
    P_VALUE=OCONV(TMP,ICR.CNV<N>)"R#9" ; P_OPT=""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    IF PHS.NEW.QTY<1,N> < 0 THEN ROND="-.5" ELSE ROND=".5"
    P_X  = 30 ; P_Y = SLN 
    TMP=CALC.STK.QTY(PHS.NEW.QTY<1,N>,MAT INV.CNV.REC,ROND,N)
*T27860    P_VALUE=OCONV(TMP,ICR.CNV<1,N>)"R#9" ; P_OPT=""
    P_VALUE=OCONV(TMP,ICR.CNV<N>)"R#9" ; P_OPT=""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    IF DIFF.QTY<1,N> < 0 THEN ROND="-.5" ELSE ROND=".5"
    P_X  = 40 ; P_Y = SLN 
    TMP=CALC.STK.QTY(DIFF.QTY<1,N>,MAT INV.CNV.REC,ROND,N)
*T27860    P_VALUE=OCONV(TMP,ICR.CNV<1,N>)"R#9" ; P_OPT=""
    P_VALUE=OCONV(TMP,ICR.CNV<N>)"R#9" ; P_OPT=""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    P_X  = 4 ; P_Y = SLN+1 ; P_VALUE = PHS.INV.DESC<1,N> "L#30" ; P_OPT = ""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    CNT=CNT+1
  NEXT N
  FOR M=CNT TO PAGE.SIZE.1
    SLN=BEGIN.PAGE.1+LINE.SPACE*MOD(M-1,PAGE.SIZE.1)
    P_X  = 0 ; P_Y = SLN ; P_VALUE = "" ; P_OPT = "CL"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    P_X  = 0 ; P_Y = SLN+1 ; P_VALUE = "" ; P_OPT = "CL"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  NEXT M
END
RETURN
*
**************
SCROLL.SERIAL: 
**************
*
START.LINE.2=1+INT((LN2-1)/PAGE.SIZE.2)*PAGE.SIZE.2
IF START.LINE.2#OLD.START.LINE.2 THEN 
  OLD.START.LINE.2=START.LINE.2
  LAST.LINE.2=START.LINE.2+PAGE.SIZE.2 - 1
  CNT2=1
  FOR N1=START.LINE.2 TO LAST.LINE.2 UNTIL N1 > LINES.2
    SLN2=BEGIN.PAGE.2+LINE.SPACE.2*MOD(N1-1,PAGE.SIZE.2)
    P_X  = 0 ; P_Y = SLN2 ; P_VALUE = N1 "R#3" ; P_OPT = ""
    P_X  := AM:4 ; P_Y := AM:SLN2 ; P_VALUE := AM:PHS.ADJ.CODE<1,LN1,N1> "L#4"
*T27705 P_X  := AM:9 ; P_Y := AM:SLN2 ; P_VALUE := AM:PHS.R.S.ID<1,LN1,N1> "L#11"
    P_X  := AM:9 ; P_Y := AM:SLN2 ; P_VALUE := AM:PHS.R.S.ID<1,LN1,N1> "L#15"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    IF PHS.CUR.WGHT<1,LN1,N1> < 0 THEN ROND="-.5" ELSE ROND=".5"
*T27705 P_X  = 21 ; P_Y = SLN2 
    P_X  = 25 ; P_Y = SLN2 
    TMP=CALC.STK.QTY(PHS.CUR.WGHT<1,LN1,N1>,MAT INV.CNV.REC,ROND,LN1)
*T27860    P_VALUE=OCONV(TMP,ICR.CNV<1,LN1>)"R#9" ; P_OPT=""
    P_VALUE=OCONV(TMP,ICR.CNV<LN1>)"R#9" ; P_OPT=""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    IF PHS.NEW.WGHT<1,LN1,N1> < 0 THEN ROND="-.5" ELSE ROND=".5"
*T27705 P_X  = 31 ; P_Y = SLN2 
    P_X  = 31 ; P_Y = SLN2 +1
    TMP=CALC.STK.QTY(PHS.NEW.WGHT<1,LN1,N1>,MAT INV.CNV.REC,ROND,LN1)
*T27860    P_VALUE=OCONV(TMP,ICR.CNV<1,LN1>)"R#9" ; P_OPT=""
    P_VALUE=OCONV(TMP,ICR.CNV<LN1>)"R#9" ; P_OPT=""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    IF DIFF.WGHT<1,LN1,N1> < 0 THEN ROND="-.5" ELSE ROND=".5"
    P_X  = 41 ; P_Y = SLN2 
    TMP=CALC.STK.QTY(DIFF.WGHT<1,LN1,N1>,MAT INV.CNV.REC,ROND,LN1)
*T27860    P_VALUE=OCONV(TMP,ICR.CNV<1,LN1>)"R#9" ; P_OPT=""
    P_VALUE=OCONV(TMP,ICR.CNV<LN1>)"R#9" ; P_OPT=""
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    IF U.M="LBS" THEN
      P_X  = 51 ; P_Y = SLN2 ; P_VALUE = OCONV(PHS.CUR.DIAM<1,LN1,N1>,"MD2") "R#9" ; P_OPT = ""
      P_X  := AM:61 ; P_Y := AM:SLN2 ; P_VALUE := AM:OCONV(PHS.NEW.DIAM<1,LN1,N1>,"MD2") "R#9"
      P_X  := AM:71 ; P_Y := AM:SLN2 ; P_VALUE := AM:OCONV(DIFF.DIAM<1,LN1,N1>,"MD2") "R#9"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    END
    CNT2=CNT2+1
  NEXT N1
  FOR M2=CNT2 TO PAGE.SIZE.2
    SLN2=BEGIN.PAGE.2+LINE.SPACE.2*MOD(M2-1,PAGE.SIZE.2)
    P_X  = 0 ; P_Y = SLN2 ; P_VALUE = "" ; P_OPT = "CL"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*T27705 v
    P_X  = 0 ; P_Y = SLN2+1 ; P_VALUE = "" ; P_OPT = "CL"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
*T27705 ^
  NEXT M2
END
RETURN
*
****************
SET.CONV.VALUES: 
****************
*
BEGIN CASE
  CASE INV.UNIT<1,2>='SHT' AND INV.UNIT<1,3>='LBS'
*T27860    ICR.CNV<1,LN1>="MD0";ICR.SCAL<1,LN1>=0;ICR.TYPE<1,LN1>=3
    ICR.CNV<LN1>="MD0";ICR.SCAL<LN1>=0;ICR.TYPE<LN1>=3
*T27860    ICR.DV1<1,LN1>=INV.M.WT;ICR.MT1<1,LN1>=1;ICR.DV2<1,LN1>=1
    ICR.DV1<LN1>=INV.M.WT;ICR.MT1<LN1>=1;ICR.DV2<LN1>=1
  CASE INV.UNIT<1,2>='PC' AND INV.UNIT<1,3>='MSI'
*T27860    ICR.CNV<1,LN1>="MD0";ICR.SCAL<1,LN1>=0;ICR.TYPE<1,LN1>=3
    ICR.CNV<LN1>="MD0";ICR.SCAL<LN1>=0;ICR.TYPE<LN1>=3
*T27860    ICR.DV1<1,LN1>=INV.PAP.WIDTH/100;ICR.MT1<1,LN1>=10;ICR.DV2<1,LN1>=1
    ICR.DV1<LN1>=INV.PAP.WIDTH/100;ICR.MT1<LN1>=10;ICR.DV2<LN1>=1
  CASE INV.UNIT<1,2>='FT' AND INV.UNIT<1,3>='MSI'
*T27860    ICR.CNV<1,LN1>="MD0";ICR.SCAL<1,LN1>=0;ICR.TYPE<1,LN1>=3
    ICR.CNV<LN1>="MD0";ICR.SCAL<LN1>=0;ICR.TYPE<LN1>=3
*T27860    ICR.DV1<1,LN1>=INV.PAP.WIDTH/100;ICR.MT1<1,LN1>=100;ICR.DV2<1,LN1>=12
    ICR.DV1<LN1>=INV.PAP.WIDTH/100;ICR.MT1<LN1>=100;ICR.DV2<LN1>=12
  CASE 1
*T27860    ICR.CNV<1,LN1>="MD2";ICR.SCAL<1,LN1>=2;ICR.TYPE<1,LN1>=4
    ICR.CNV<LN1>="MD2";ICR.SCAL<LN1>=2;ICR.TYPE<LN1>=4
*T27860    ICR.DV1<1,LN1>=10;ICR.MT1<1,LN1>=1;ICR.DV2<1,LN1>=1
    ICR.DV1<LN1>=10;ICR.MT1<LN1>=1;ICR.DV2<LN1>=1
END CASE
RETURN
* LINE NUMBER
80000*
PHS.INV.PROD=DELETE(PHS.INV.PROD,1,LN1,LL)
PHS.INV.DESC=DELETE(PHS.INV.DESC,1,LN1,LL)
PHS.UN.COST=DELETE(PHS.UN.COST,1,LN1,LL)
PHS.UN.MAG=DELETE(PHS.UN.MAG,1,LN1,LL)
PHS.M.WGHT=DELETE(PHS.M.WGHT,1,LN1,LL)
PHS.NEW.QTY=DELETE(PHS.NEW.QTY,1,LN1,LL)
PHS.CUR.QTY=DELETE(PHS.CUR.QTY,1,LN1,LL)
PHS.NO.POST=DELETE(PHS.NO.POST,1,LN1,LL)
*T27860 v
*ICR.CNV=DELETE(ICR.CNV,1,LN1,LL)
   ICR.CNV=DELETE(ICR.CNV,LN1,1,1)
*ICR.DV1=DELETE(ICR.DV1,1,LN1,LL)
   ICR.DV1=DELETE(ICR.DV1,LN1,1,1)
*ICR.DV2=DELETE(ICR.DV2,1,LN1,LL)
   ICR.DV2=DELETE(ICR.DV2,LN1,1,1)
*ICR.MT1=DELETE(ICR.MT1,1,LN1,LL)
   ICR.MT1=DELETE(ICR.MT1,LN1,1,1)
*ICR.TYPE=DELETE(ICR.TYPE,1,LN1,LL)
   ICR.TYPE=DELETE(ICR.TYPE,LN1,1,1)
*ICR.SCAL=DELETE(ICR.SCAL,1,LN1,LL)
   ICR.SCAL=DELETE(ICR.SCAL,LN1,1,1)
*T27860 ^
DIFF.QTY=DELETE(DIFF.QTY,1,LN1,LL)
85000*
PHS.OPER.ID=DELETE(PHS.OPER.ID,1,LN1,LL)
PHS.DATE.ENT=DELETE(PHS.DATE.ENT,1,LN1,LL)
PHS.ADJ.CODE=DELETE(PHS.ADJ.CODE,1,LN1,LL)
PHS.ADJ.TYPE=DELETE(PHS.ADJ.TYPE,1,LN1,LL)
PHS.R.S.ID=DELETE(PHS.R.S.ID,1,LN1,LL)
PHS.CUR.SHEET=DELETE(PHS.CUR.SHEET,1,LN1,LL)
PHS.CUR.DIAM=DELETE(PHS.CUR.DIAM,1,LN1,LL)
PHS.CUR.WGHT=DELETE(PHS.CUR.WGHT,1,LN1,LL)
PHS.NEW.SHEET=DELETE(PHS.NEW.SHEET,1,LN1,LL)
PHS.NEW.DIAM=DELETE(PHS.NEW.DIAM,1,LN1,LL)
PHS.NEW.WGHT=DELETE(PHS.NEW.WGHT,1,LN1,LL)
DIFF.SHEET=DELETE(DIFF.SHEET,1,LN1,LL)
DIFF.DIAM=DELETE(DIFF.DIAM,1,LN1,LL)
DIFF.WGHT=DELETE(DIFF.WGHT,1,LN1,LL)
RETURN
*
**************
ENT.PROD.LINE: 
**************
*
ERR=0
ECD.NUM=5;ECD.VALDAT.CODE=2
ECD.VALDAT.FILE=CATEGORY;ECD.PREFIX.ID=CONO
ECD.ACTION=4;CALL SCRN.EDIT
IF ECD.RET.VALUE='END' THEN GOTO 99999
FOR SV=1 TO CATG.REC.SIZE
  CATG.REC(SV)=ECD.VALDAT.ITEM<SV>
NEXT SV
PROD.LINE=ECD.RET.VALUE
PROD.TYPE=CATG.TYPE ; * T26912
IF CATG.MAJ.LINE='FNGD' AND CO.OPS = 'Y' THEN
  ERRMSG="YOU MUST USE THE FINISHED GOODS ADJUSTMENT FUNCTION"
  GOSUB 91000
  GOTO ENT.PROD.LINE ; * T26912
END ELSE
  IF CATG.TRK.LVL='S' THEN
    BEGIN CASE
      CASE CATG.TYPE="L"
        U.M="LBS"
      CASE CATG.TYPE="S"
        U.M="SHT"
      CASE CATG.TYPE="RL"
        U.M="PC "
      CASE CATG.TYPE="PC"
        U.M="FT "
      CASE 1
        ERRMSG="THIS PRODUCT LINE IS NOT A PAPER PRODUCT LINE"
        GOSUB 91000
        GOTO ENT.PROD.LINE
    END CASE
    IF NOT(ERR) THEN
      FOR X=8 TO 13
        SCV.REC(X)<ECD.SCRN.NO,0>=U.M
      NEXT X
      IF U.M # "SHT" THEN
        SCV.REC(14)<ECD.SCRN.NO,0>="Curr Diam"
        SCV.REC(15)<ECD.SCRN.NO,0>=" Adj Diam"
        SCV.REC(16)<ECD.SCRN.NO,0>="Diff Diam"
      END ELSE
        FOR XX=14 TO 16
          SCV.REC(XX)<ECD.SCRN.NO,0>=""
        NEXT XX
      END
      ECD.ACTION=3;CALL SCRN.EDIT
      FNGD.MODE=0
    END
  END ELSE
    ERRMSG='THIS IS NOT A SERIALY TRACKED PRODUCT LINE.'
    GOSUB 91000 ; ERR=1
  END
END
RETURN
*
**************
ENT.WHSE: 
**************
*
LOOP
  ;*T26685 v
  ERR = 0
  EOI = 0
  ;*T26685 ^
  ECD.NUM=6;ECD.VALDAT.CODE=2
  ECD.VALDAT.FILE=WAREHOUSE;ECD.PREFIX.ID=CONO
  ECD.ACTION=4;CALL SCRN.EDIT
  IF ECD.RET.VALUE#'END' THEN 
    FOR SAVE=1 TO WHSE.REC.SIZE
      WHSE.REC(SAVE)=ECD.VALDAT.ITEM<SAVE>
    NEXT SAVE
    ;* T26497 v
    IF CO.INTR.WHSE # '' AND ECD.RET.VALUE = CO.INTR.WHSE THEN
      ERRMSG = 'CAN NOT APPLY, USING AN INTER-DIVISIONAL WHSE IS RESTRICTED'
      GOSUB 91000 ; ERR=1
    END
    ;* T26497 ^
    IF NOT(ERR) THEN
      DIV.CODE = WHS.DIV; USER.ID = UPCASE(@LOGNAME); ERRMSG = ''
      CALL CK.DIV.SEC.SUB(CONO,DIV.CODE,USER.ID,ERRMSG)
      IF ERRMSG # '' THEN
        GOSUB 91000 ; ERR=1
      END ELSE
        WHSE.CODE=ECD.RET.VALUE
        EOI=1
      END
    END 
  END ELSE
    EOI=1;ERR=1
  END
UNTIL (EOI) DO REPEAT
RETURN
*
************
ENT.LOC: 
************
*
EOI=0 ; ERR=0
LOOP
  ECD.NUM=7
  PTR=1
  ECD.HMSG<1,1,PTR>='LOCATION - ':WHS.LOC<1,1>
  LOC.CNT=DCOUNT(WHS.LOC,VM)
  FOR L=2 TO LOC.CNT
    IF LEN(ECD.HMSG<1,1,PTR>) > 70 THEN
      PTR=PTR+1
      ECD.HMSG<1,1,PTR>='LOCATION - ':WHS.LOC<1,L>
    END ELSE
      ECD.HMSG<1,1,PTR>=ECD.HMSG<1,1,PTR>:', ':WHS.LOC<1,L>
    END
  NEXT L
  ECD.ACTION=4;CALL SCRN.EDIT
  IF ECD.RET.VALUE#'END' THEN 
    IF NOT(ERR) THEN
      LOC.CODE=ECD.RET.VALUE
      EOI=1
    END
  END ELSE
    EOI = 1 ; ERR = 1
  END
UNTIL (EOI) DO REPEAT
RETURN
*
*
*************
ENT.ADJ.CODE: 
*************
*
SLN2=BEGIN.PAGE.2+LINE.SPACE.2*MOD(LN2 - 1,PAGE.SIZE.2)
EOI=0
LOOP
  SKIP=0
  ;*T26556 v
  IF ERROR.FLAG # 1 THEN
    ;*T26556 ^
    P_X  = 0 ; P_Y = SLN2
    P_VALUE = LN2 "R#3" ; P_OPT = "CL"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    X=4;Y=SLN2;TYP=1;MAXL=4
    BEGIN CASE
      CASE PHS.ADJ.CODE<1,LN1,LN2> # ''
        O.R='O';DEFAULT=PHS.ADJ.CODE<1,LN1,LN2>
      CASE LN2 > 1
        O.R='O';DEFAULT=PHS.ADJ.CODE<1,LN1,LN2-1>
      CASE 1
        O.R='R'
    END CASE
    CALL EDIT.SUB
  END ELSE
    ERROR.FLAG=0
  END
  IF VALUE='END' OR VALUE='' THEN
    IF DIFF.WGHT<1,LN1,LN2>=''  THEN
      LL=LN2;GOSUB 85000
      PHS.NEW.QTY<1,LN1>=PHS.CUR.QTY<1,LN1>+DIFF.QTY<1,LN1>
      IF PHS.NEW.QTY<1,LN1> < 0 THEN ROND="-.5" ELSE ROND=".5"
      P_X  = 30 ; P_Y = SLN
      TMP=CALC.STK.QTY(PHS.NEW.QTY<1,LN1>,MAT INV.CNV.REC,ROND,LN1)
*T27860      P_VALUE=OCONV(TMP,ICR.CNV<1,LN1>)"R#9" ; P_OPT=""
      P_VALUE=OCONV(TMP,ICR.CNV<LN1>)"R#9" ; P_OPT=""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      IF DIFF.QTY<1,LN1> < 0 THEN ROND="-.5" ELSE ROND=".5"
      P_X  = 40 ; P_Y = SLN
      TMP=CALC.STK.QTY(DIFF.QTY<1,LN1>,MAT INV.CNV.REC,ROND,LN1)
*T27860      P_VALUE=OCONV(TMP,ICR.CNV<1,LN1>)"R#9" ; P_OPT=""
      P_VALUE=OCONV(TMP,ICR.CNV<LN1>)"R#9" ; P_OPT=""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    END
    P_X  = 0 ; P_Y = SLN2
    P_VALUE = "" ; P_OPT = "CL"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    SKIP=1; EOI=1 ; EOS=1
  END
  IF NOT(SKIP) THEN
    MATREAD IADJ.REC FROM INV.ADJ.CODES, CONO:VALUE THEN
      PHS.ADJ.CODE<1,LN1,LN2>=VALUE
      PHS.ADJ.TYPE<1,LN1,LN2>=IADJ.TYPE
      EOI=1
    END ELSE
      ERRMSG='INVALID ADJUSTMENT REASON CODE'
      GOSUB 91000
    END
  END
UNTIL (EOI) DO REPEAT
RETURN
*
************
ENT.SERIAL: 
************
*
EOI=0
LOOP
  SKIP=0
  ERRMSG=''
  SCNT=DCOUNT(IWLO.SERIAL,VM)
  BEGIN CASE
    CASE IADJ.TYPE # "R" AND SCNT=1
      VALUE=IWLO.SERIAL
*T27705 P_X  = 9 ; P_Y = SLN2 ; P_VALUE = VALUE "L#11" ; P_OPT = ""
      P_X  = 9 ; P_Y = SLN2 ; P_VALUE = VALUE "L#15" ; P_OPT = ""
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    CASE 1
*T27705 X=9;Y=SLN2;TYP=1;MAXL=11;JUSTIFY='L'
      X=9;Y=SLN2;TYP=1;MAXL=15;JUSTIFY='L'
      IF PHS.R.S.ID<1,LN1,LN2> # '' THEN
        O.R='O';DEFAULT=PHS.R.S.ID<1,LN1,LN2>
      END
      IF IWLO.SERIAL="" THEN HMSG='LOCATION HAS NO SERIALS'
      CALL EDIT.SUB
  END CASE
  IF VALUE # 'END' THEN
    IF VALUE='N' THEN
      IF  PHS.ADJ.TYPE<1,LN1,LN2>='R' THEN
        VALUE=GET.SERIAL.SEQ(CONO,CONTROL,INV_SERIAL)
        SCV.REC(30)<ECD.SCRN.NO,LN2>=VALUE
        ECD.NUM=30;ECD.SUB.NUM=LN2;ECD.ACTION=5;CALL SCRN.EDIT
        MAT ISTK.REC='' ; EOI=1
        PHS.R.S.ID<1,LN1,LN2>=VALUE       
        EOI=1 ; SKIP = 0                  
        EXIT
      END ELSE
        ERRMSG='CANNOT GENERATE NEW SERIAL WITH THIS ADJUSTMENT CODE'
        GOSUB 91000
        CONTINUE
      END
    END
    IF VALUE # PHS.R.S.ID<1,LN1,LN2> THEN
      LOCATE VALUE IN PHS.R.S.ID<1,LN1>,1 SETTING FND ELSE FND=0
      IF FND THEN
        ERRMSG='SERIAL NUMBER (':VALUE:') ALREADY ADJUSTED';GOSUB 91000
        IF IADJ.TYPE # "R" AND SCNT=1 THEN
          VALUE="END";ERROR.FLAG=1
          EOI=1 ; SKIP=1
        END
      END
    END
    IF ERRMSG='' THEN
      ISTK.ID = CONO:VALUE
      MATREAD ISTK.REC FROM INV_SERIAL,ISTK.ID THEN
        BEGIN CASE
          CASE ISTK.POST.DATE='' AND PHS.ADJ.TYPE<1,LN1,LN2>#'R'
            ERRMSG='THIS SERIAL HAS NOT BEEN RECEIVED YET'
            GOSUB 91000
          CASE ISTK.WHSE=CO.INTR.WHSE  AND ISTK.WHSE#''
            ERRMSG="CANNOT ADJUST ITEMS IN THE"
            ERRMSG:=" INTER-DIVISIONAL WAREHOUSE"
            GOSUB 91000
          CASE ISTK.WHSE#WHSE.CODE OR ISTK.LOC#LOC.CODE 
            ERRMSG='SERIAL BELONGS TO ANOTHER WAREHOUSE OR LOCATION.'
            GOSUB 91000
*T27893 v
          CASE ISTK.PROD # PHS.INV.PROD<1,LN1>
             ERRMSG='THIS SERIAL IS NOT FOR PRODUCT # ':PHS.INV.PROD<1,LN1>
             GOSUB 91000
*T27893 ^
        END CASE
      END ELSE
        MATREAD ISTK.REC FROM INV_SERIAL_DELETED,ISTK.ID THEN
          IF PHS.ADJ.TYPE<1,LN1,LN2>='M' THEN
            ERRMSG='THIS SERIAL HAS BEEN DELETED AND'
            ERRMSG:=' CANNOT BE NEGATIVE ADJUSTED'
            GOSUB 91000
          END
        END ELSE
*T27484 v
          IF PHS.ADJ.TYPE<1,LN1,LN2> # 'R' THEN
            ERRMSG='CANNOT ADJUST A NON EXISTING SERIAL'
            GOSUB 91000
          END
          MAT ISTK.REC = ''
*T27484 ^
        END
      END
      IF ERRMSG # "" THEN
        IF IADJ.TYPE # "R" AND SCNT=1 THEN
          VALUE="END";ERROR.FLAG=1
          EOI=1;SKIP=1
        END
      END ELSE
        PHS.R.S.ID<1,LN1,LN2>=VALUE 
        EOI=1 ; SKIP = 0
      END
    END
  END ELSE
    EOI=1; EOS=1
    SKIP=1
  END
UNTIL (EOI) DO REPEAT
RETURN
*
*************
ENT.ADJ.QTY: 
*************
*
EOI=0
LOOP
  ERRMSG='' ; SKIP=0
  BEGIN CASE
    CASE PHS.ADJ.TYPE<1,LN1,LN2>='R'
*T27705 X=31;Y=SLN2;MAXL=9;TYP=ICR.TYPE<1,LN1>
*T27860      X=31;Y=SLN2+1;MAXL=9;TYP=ICR.TYPE<1,LN1>
      X=31;Y=SLN2+1;MAXL=9;TYP=ICR.TYPE<LN1>
*T27860      SCALER=ICR.SCAL<1,LN1>;O.R='R'
      SCALER=ICR.SCAL<LN1>;O.R='R'
      IF PHS.NEW.SHEET<1,LN1,LN2> # '' THEN O.R="O"
*T27860      DEFAULT=OCONV(PHS.NEW.SHEET<1,LN1,LN2>, "MD":ICR.SCAL<1,LN1>)
      DEFAULT=OCONV(PHS.NEW.SHEET<1,LN1,LN2>, "MD":SCALER)
      MINV=0;MAXV=999999999
      CALL EDIT.SUB
      BEGIN CASE
        CASE VALUE='END'
          SKIP=1; EOI=1; EOS=1
        CASE VALUE # ''
          TMP=CALC.COST.QTY(VALUE,MAT INV.CNV.REC,'',LN1)
          VALUE=TMP
          VALUE -=PHS.CUR.WGHT<1,LN1,LN2>
      END CASE
    CASE PHS.ADJ.TYPE<1,LN1,LN2>='P'
*T27860      X=41;Y=SLN2;TYP=ICR.TYPE<1,LN1>;MAXL=9
      X=41;Y=SLN2;TYP=ICR.TYPE<LN1>;MAXL=9
*T27860      O.R='R';SCALER=ICR.SCAL<1,LN1>
      O.R='R';SCALER=ICR.SCAL<LN1>
      IF DIFF.SHEET<1,LN1,LN2> # '' THEN O.R="O"
*T27860      DEFAULT=OCONV(DIFF.SHEET<1,LN1,LN2>,"MD":ICR.SCAL<1,LN1>)
      DEFAULT=OCONV(DIFF.SHEET<1,LN1,LN2>,"MD":SCALER)
      MINV=1;MAXV=999999999
      CALL EDIT.SUB
      BEGIN CASE
        CASE VALUE='END'
          SKIP=1;EOI=1; EOS=1
        CASE VALUE # ''
          IF PHS.CUR.SHEET<1,LN1,LN2>+VALUE>ISTK.ORG.STK.QTY THEN
            ERRMSG='ADJUSTED QTY EXCEEDS ORIGINALLY RECEIVED QTY.'
            ERRMSG:=' USE RECEIPT ADJUSTMENTS.'
            GOSUB 91000 ; SKIP=1
          END
          TMP=CALC.COST.QTY(VALUE,MAT INV.CNV.REC,'',LN1)
          VALUE=TMP
      END CASE
    CASE 1
      IF IWH.ON.HAND-IWH.RESV>1 THEN
        IF ISTK.RSVB.QTY>1 THEN
*T27860          X=41;Y=SLN2;TYP=ICR.TYPE<1,LN1>;MAXL=9
          X=41;Y=SLN2;TYP=ICR.TYPE<LN1>;MAXL=9
*T27860          O.R="R";SCALER=ICR.SCAL<1,LN1>
          O.R="R";SCALER=ICR.SCAL<LN1>
          IF DIFF.SHEET<1,LN1,LN2> # '' THEN O.R="O"
*T27860          DEFAULT=OCONV(ABS(DIFF.SHEET<1,LN1,LN2>),"MD":ICR.SCAL<1,LN1>)
          DEFAULT=OCONV(ABS(DIFF.SHEET<1,LN1,LN2>),"MD":SCALER)
          MINV=1
          BEGIN CASE
            CASE INV.PAP.TYPE = "SHEET"
              MAXV=PHS.CUR.SHEET<1,LN1,LN2>
            CASE 1
              IF PHS.CUR.WGHT<1,LN1,LN2> > "0" THEN ROND=".5" ELSE ROND="-.5"
              MAXV=CALC.STK.QTY(PHS.CUR.WGHT<1,LN1,LN2>,MAT INV.CNV.REC,'',LN1)
          END CASE
          CALL EDIT.SUB
          BEGIN CASE
            CASE VALUE='END'
              SKIP=1;EOI=1; EOS=1
            CASE VALUE # ''
              TMP=CALC.COST.QTY(VALUE,MAT INV.CNV.REC,'',LN1)
              VALUE=TMP
*T27425 v     IF ABS(VALUE-IWH.ON.HAND-IWH.RESV)<=9 THEN
              IF ABS(VALUE-IWH.ON.HAND-IWH.RESV)<=FUDGE THEN
                VALUE=PHS.CUR.WGHT<1,LN1,LN2>
              END
*T27425 v     IF ABS(VALUE-PHS.CUR.WGHT<1,LN1,LN2>) <= 9 THEN
              IF ABS(VALUE-PHS.CUR.WGHT<1,LN1,LN2>) <= FUDGE THEN
                VALUE = PHS.CUR.WGHT<1,LN1,LN2>
              END
          END CASE
          IF NOT(SKIP) THEN
            IF IWH.ON.HAND - IWH.RESV < VALUE THEN
              TMP=CALC.STK.QTY(IWH.ON.HAND-IWH.RESV,MAT INV.CNV.REC,'',LN1)
*T27860              TMP=OCONV(TMP,ICR.CNV<1,LN1>)
              TMP=OCONV(TMP,ICR.CNV<LN1>)
              ERRMSG='AVAILABLE QUANTITY IS ONLY ':TMP
              GOSUB 91000
            END ELSE
              IF ISTK.RSVB.QTY<VALUE THEN
                TMP=CALC.STK.QTY(ISTK.RSVB.QTY,MAT INV.CNV.REC,'',LN1)
*T27860                TMP=OCONV(TMP,ICR.CNV<1,LN1>)
                TMP=OCONV(TMP,ICR.CNV<LN1>)
                ERRMSG='SERIAL AVAILABLE QTY IS ONLY ':TMP
                GOSUB 91000
              END ELSE
                IF VALUE > PHS.CUR.WGHT<1,LN1,LN2> THEN
                  VALUE = PHS.CUR.WGHT<1,LN1,LN2>
                END
                VALUE=VALUE*(-1)
              END
            END
          END
        END ELSE
          ERRMSG='SERIAL AVAILABLE QUANTITY IS ZERO'
          GOSUB 91000
          EOI=1 ; SKIP=1
        END
      END ELSE
        ERRMSG=' AVAILABLE QUANTITY IS ZERO'
        GOSUB 91000
        EOI=1 ; SKIP=1
      END
  END CASE
  IF ERRMSG='' AND NOT(SKIP) THEN
    IF VALUE > 0 AND PHS.UN.COST<1,LN1>='' THEN
      SAVE.VALUE=VALUE
      IF VALUE='END' THEN 
        SKIP=1; EOI=1
      END ELSE
        VALUE=SAVE.VALUE
        EOI=1
      END
    END ELSE
      EOI=1
    END
  END
UNTIL (EOI) DO REPEAT
RETURN
*
**********
GET.DIAM: 
**********
*
;*T26556 v
DIAM=CALC.DIAM(WGHT,PHS.NEW.SHEET<1,LN1,LN2>,MAT INV.REC)
;*T26556 ^
RETURN
*
******************
GET.PROD.LINE.NUM: 
******************
*
GOSUB 10000
ECD.NUM = 39
SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""
ECD.MINV=OLD.START.LINE.1
IF LAST.LINE.1 < LINES.1 THEN
  ECD.MAXV=LAST.LINE.1
END ELSE
  ECD.MAXV=LINES.1
END
ECD.ACTION = 4
CALL SCRN.EDIT
LNO=ECD.RET.VALUE
IF LNO='' OR LNO='END' THEN LNO=0
RETURN
*
*********************
GET.SER.LINE.NUM: 
*********************
*
GOSUB SCROLL.SERIAL
ECD.NUM = 39
SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""
ECD.MINV=OLD.START.LINE.2
IF LAST.LINE.2 < LINES.2 THEN
  ECD.MAXV=LAST.LINE.2
END ELSE
  ECD.MAXV=LINES.2
END
ECD.ACTION = 4
CALL SCRN.EDIT
LNO=ECD.RET.VALUE
IF LNO='' OR LNO='END' THEN LNO=0
RETURN
*
*********************
GET.UNIT.COST: 
*********************
*
IF ISTK.UNIT.COST # "" THEN
  PHS.UN.COST<1,LN1,LN2> = ISTK.UNIT.COST
END ELSE
  ECD.DEFAULT = PHS.UN.COST<1,LN1,LN2>
  ECD.NUM = 40
  ECD.ACTION = 4
  CALL SCRN.EDIT
  IF ECD.RET.VALUE # "END" THEN
    PHS.UN.COST<1,LN1,LN2> = ECD.RET.VALUE
  END
END
RETURN
*
* CALL SYSCOM FOR ERRMSG
91000 ERR.TYPE=1;CALL SYSCOM(MAT SYSCOM.REC);RETURN
92000 ERR.TYPE=2;CALL SYSCOM(MAT SYSCOM.REC);RETURN
93000 ERR.TYPE=3;CALL SYSCOM(MAT SYSCOM.REC)
99999 
ECD.ACTION=99 ; CALL SCRN.EDIT
END
