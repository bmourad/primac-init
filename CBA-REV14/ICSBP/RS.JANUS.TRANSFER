*T28895   SUBROUTINE RS.JANUS.TRANSFER(CONO,MAT INT.REC,INTERMEC.ERRS,INTERMEC.ID)
SUBROUTINE RS.JANUS.TRANSFER(CONO,MAT INT.REC,INTERMEC.ERRS,INTERMEC.ID,PREV.RDATE,D.TRAN.CODE)
*********************************************************************
*
* PROGRAM  - RS.JANUS.TRANSFER
*
* AUTHOR   - CHRIS MYKLEBUST, PRIMAC SYSTEMS
*
* DATE     - 07/17/2002
*
* DESCRIPTION
*
* This program is used to process the Roll Transfer transaction
* from the hand-held Janus units used in the warehouse.
*
* T26198 adelgado 07/17/2002 * Initial programming.
*T28895 lross 05/02/2006 * Bring logic from REV11 for Transfers (create
*                          single DAILY_TRANSFER record for a given
*                          date).
*********************************************************************
*
*---- COPY STATEMENTS
*
*COPY>CPYLIB>COM1
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>ICS.CPYLIB>COM.INV.LINK  
*COPY>PMC.CPYLIB>COMPANY
*COPY>ICS.CPYLIB>DAILY_TRANSFER
*COPY>PMC.CPYLIB>PO
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>ICS.CPYLIB>INV.HIST
*COPY>ICS.CPYLIB>INV_SERIAL
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>ICS.CPYLIB>TRANSFER
*COPY>ICS.CPYLIB>INV.CNV
*COPY>ICS.CPYLIB>INTERMEC.TRAN
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*
TDATE = Intermec.TDATE
SERIAL.ID = Intermec.SERIAL
WHSE.ID = Intermec.WHSE
LOC.ID = Intermec.LOC
*
*---- MAIN PROCESSING
*
ERRMSG = ''
MATREAD COMP.REC FROM COMPANY, CONO ELSE MAT COMP.REC = ''
GOSUB VALIDATE.TRANS
IF ERRMSG = '' THEN GOSUB UPDATE.TRANS
GOTO 99999
*
VALIDATE.TRANS: 
*
MATREADU ISTK.REC FROM INV_SERIAL, CONO:SERIAL.ID ELSE
   ERRMSG = "CANNOT LOCATE SERIAL # ":SERIAL.ID
   GOSUB 91000 ; RETURN
END
IF CO.INTR.WHSE # "" THEN
   IF CO.INTR.WHSE = ISTK.WHSE THEN
      ERRMSG = 'CANNOT TRANSFER, SERIAL # ':SERIAL.ID:' BELONG TO AN INTER-DIVISIONAL WAREHOUSE.'
      GOSUB 91000 ; RETURN
   END
   MATREAD WHSE.REC FROM WAREHOUSE, CONO:ISTK.WHSE ELSE
      ERRMSG = "NO WAREHOUSE DIV FOR SERIAL # ":SERIAL.ID
      GOSUB 91000 ; RETURN
   END
END
DEF.PERIOD = "";ERR.FLG = "";ERRMSG = ""
CALL CHECK.PERIOD.DATE(CONO,TDATE,DEF.PERIOD,WHS.DIV,ERR.FLG,ERRMSG,COMPANY,CONTROL)
BEGIN CASE
   CASE ERRMSG = ""
   CASE ERR.FLG = 0
   CASE ERR.FLG = 1
   CASE ERR.FLG = 2
      ERRMSG = "FISCAL IS MISSING FOR SERIAL # ":SERIAL.ID
      GOSUB 91000 ; RETURN
END CASE
ERRMSG = ""
ERR.FLG = ""
IF ISTK.RECP.PERIOD > DEF.PERIOD THEN
   ERRMSG = "RECEIPT PERIOD IS GREATER FOR SERIAL # ":SERIAL.ID
   GOSUB 91000 ; RETURN
END
IF ISTK.POST.DATE = "" THEN
   ERRMSG = "SERIAL # ":SERIAL.ID:" HAS NOT BEEN RECEIVED"
   GOSUB 91000 ; RETURN
END
IF (ISTK.CUR.QTY + 0) = 0 THEN
   ERRMSG = "NO QUANTITY FOR SERIAL # ":SERIAL.ID
   GOSUB 91000 ; RETURN
END
IF ISTK.CUR.QTY # ISTK.RSVB.QTY THEN
   ERRMSG = "QUANTITY IS RESERVED FOR SERIAL # ":SERIAL.ID
   GOSUB 91000 ; RETURN
END
MATREAD INV.REC FROM INVENTORY, CONO:ISTK.PROD ELSE
   ERRMSG = "NO INVENTORY FOR SERIAL # ":SERIAL.ID
   GOSUB 91000 ; RETURN
END
IF WHSE.ID = ISTK.WHSE AND LOC.ID = ISTK.LOC THEN
   ERRMSG = "THE SERIAL # ":SERIAL.ID:" ALREADY EXISTS IN THE WHSE & LOC ENTERED"
   GOSUB 91000 ; RETURN
END
MATREAD IWLO.REC FROM INV.WHSE.LOC, CONO:ISTK.PROD:"!":ISTK.WHSE:"!":ISTK.LOC ELSE
   ERRMSG = "CANNOT LOCATE SERIAL # ":SERIAL.ID:" TO WHSE # ":ISTK.WHSE
   GOSUB 91000 ; RETURN
END
LOCATE SERIAL.ID IN IWLO.SERIAL<1>,1 SETTING P ELSE
*T28895 ERRMSG = "CANNOT LOCATE SERIAL # ":SERIAL.ID:" TO WHSE # ":ISTK.WHSE
   ERRMSG = "CANNOT LOCATE SERIAL # ":SERIAL.ID:" TO LOC # ":ISTK.LOC
   GOSUB 91000 ; RETURN
END
*COPY>ICSBP>INV.UM.CNV
FROM.WHSE.DIV = WHS.DIV
MATREAD WHSE.REC FROM WAREHOUSE, CONO:WHSE.ID ELSE
   ERRMSG = 'WAREHOUSE #':WHSE.ID:' DOES NOT EXIST'
   GOSUB 91000 ; RETURN
END
IF FROM.WHSE.DIV # WHS.DIV THEN
   ERRMSG = 'WAREHOUSE DIVISIONS MISMATCH FOR SERIAL #':SERIAL.ID
   GOSUB 91000 ;RETURN
END
  *
RETURN
*
UPDATE.TRANS: 
*
MAT TRAN.REC = ""
*T28895 v
*  MAT D.TRAN.REC = ""
IF TDATE # PREV.RDATE THEN
   GOSUB GET.DTN
   D.TRAN.PRT.DATE        = TDATE
   D.TRAN.EMP             = 'JANUS'
   D.TRAN.SERIAL          = SERIAL.ID
   D.TRAN.RECP            = ISTK.RECP
   D.TRAN.PROD.NO         = ISTK.PROD
   D.TRAN.FROM.WHSE       = ISTK.WHSE        
   D.TRAN.FROM.LOC        = ISTK.LOC         
   D.TRAN.TO.WHSE         = WHSE.ID      
   D.TRAN.TO.LOC          = LOC.ID        
   D.TRAN.QTY             = ISTK.CUR.QTY        
   D.TRAN.DATE.ENTER      = TDATE
   D.TRAN.PERIOD          = DEF.PERIOD
   D.TRAN.TOT.QTY         = ISTK.CUR.QTY        
   D.TRAN.REASON.DESC     = "JANUS TRANSFER"
*  D.TRAN.CODE = "N"
   D.TRAN.CODE = DTN
  *
*T28895 v TRAN.UPDATE does nothing with these except get a new ID
*         so we will just get the ID here and skip the CALL.
*  NEW.ERRMSG = "" ; PROCESS.FLAG = CO.ICS.REAL.TRAN
*  PROCESS.FLAG = ''
*  CALL TRAN.UPDATE(CONO,D.TRAN.CODE,MAT TRAN.REC,PROCESS.FLAG,CO.ICS.LOC.TRAN,NEW.ERRMSG)
*  IF NEW.ERRMSG = '' AND PROCESS.FLAG = 'Y' THEN
*     ERRMSG = 'ERROR OCCUR DURING TRANSFER PROCESSING'
*     GOSUB 91000
*  END
END ELSE
   MATREADU D.TRAN.REC FROM DAILY_TRANSFER,CONO:D.TRAN.CODE ELSE
     RELEASE DAILY_TRANSFER,CONO:D.TRAN.CODE
     PREV.RDATE = "@$#!%"
     GOTO UPDATE.TRANS
   END
   IF D.TRAN.FROM.WHSE # ISTK.WHSE THEN
     RELEASE DAILY_TRANSFER,CONO:D.TRAN.CODE
     PREV.RDATE = "@$#!%"
     GOTO UPDATE.TRANS
   END
   D.TRAN.SERIAL<1,-1>          = SERIAL.ID
   D.TRAN.RECP<1,-1>            = ISTK.RECP
   D.TRAN.PROD.NO<1,-1>         = ISTK.PROD
   D.TRAN.FROM.LOC<1,-1>        = ISTK.LOC         
   D.TRAN.TO.WHSE<1,-1>         = WHSE.ID      
   D.TRAN.TO.LOC<1,-1>          = LOC.ID        
   D.TRAN.QTY<1,-1>             = ISTK.CUR.QTY        
   D.TRAN.TOT.QTY<1,-1>         = ISTK.CUR.QTY        
END
MATWRITE D.TRAN.REC ON DAILY_TRANSFER,CONO:D.TRAN.CODE
RELEASE INV_SERIAL, SERIAL.ID
RETURN
*
GET.DTN: 
READU DTN FROM CONTROL,CONO:"TRANSFER" ELSE
   DTN=1000
END
FND=1
LOOP
WHILE FND DO
   DTN+=1
   READU REC FROM TRANSFER,CONO:DTN ELSE FND=0
   REC=""
   IF FND THEN
      RELEASE TRANSFER, CONO:DTN
   END ELSE
      WRITE DTN ON CONTROL, CONO:'TRANSFER'
   END
REPEAT
MAT D.TRAN.REC = ''
  *
RETURN
*
*---- ERROR ROUTINE
*
91000 *
Intermec.ERROR = ERRMSG
MATWRITE INT.REC ON INTERMEC.ERRS, INTERMEC.ID
RELEASE INV_SERIAL, CONO:SERIAL.ID
RETURN
*
*---- END OF PROGRAM
*
99999 *
RETURN
END
