*********************************************************************
*
* REVISION - [08.1B]
*
* PROGRAM  - RS.CONVERT
*
* AUTHOR   - NICK AMENDOLA, COMPUTER BUSINESS ASSOCIATES
*
* DATE     - 01/11/91
*
* DESCRIPTION
*
* This program is used to assign barcode serial number to stock
* previously stored with other identifiers.
*T28746 lross 12/12/2005 * Convert program from REV11 to REV12.
*
*********************************************************************
*
*---- COPY STATEMENTS
*
*COPY>CPYLIB>SCOMMON1
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>ICS.CPYLIB>COM.INV.LINK  
*COPY>PMC.CPYLIB>COMPANY
*COPY>ICS.CPYLIB>CATEGORY
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>ICS.CPYLIB>INV_SERIAL
*COPY>ICS.CPYLIB>INV_RECP_WHSE
*COPY>ICS.CPYLIB>INV_RECEIPTS
*COPY>ICS.CPYLIB>INV_AUDIT_HIST
*COPY>ICS.CPYLIB>INV.CNV
*COPY>CPYLIB>SCREEN.COM
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
MAT SYSCOM.REC =  ""; SYS.TYPE = 1
CALL SI_SYSCOM (MAT SYSCOM.REC)
DEFFUN CALC.STK.QTY(COST.QTY,MAT INV.CNV.REC,ROND,LN)
DEFFUN CALC.DIAM(COST.QTY,STK.QTY,MAT INV.REC)
DEFFUN CALC.COST.QTY(STK.QTY,MAT INV.CNV.REC,ROND,LN)
DEFFUN GET.INAH.SEQ(CONO,CONTROL.FILE,INV_AUDIT_HIST.FILE)
*DEFFUN GET.SERIAL.SEQ(CONO,CONTROL.FILE,INV_SERIAL.FILE)
   DEFFUN DIVISION.POSITION (CONO,CONTROL.FILE,DIV.CODE)
   DEFFUN CURRENT.PERIOD(CONO,CONTROL.FILE,DIV.POS,FISCAL.FLAG)
*
*---- DIMENSIONED VARIABLES
*
DIM RSCNV.REC(10)
*
EQU RSCNV.ID       TO RSCNV.REC(1)    ;* (MV1) Serial #
EQU RSCNV.LOC      TO RSCNV.REC(2)    ;* (MV1) Serial loc
EQU RSCNV.QTY      TO RSCNV.REC(3)    ;* (MV1) Serial qty
EQU RSCNV.WGT      TO RSCNV.REC(4)    ;* (MV1) Serial weight
EQU RSCNV.SHT      TO RSCNV.REC(5)    ;* (MV1) Skid sheets
EQU RSCNV.MILL     TO RSCNV.REC(6)    ;* (MV1) Mill #
*
*---- OPEN ALL FILES
*
OPEN "","COMPANY" TO COMPANY ELSE
   ERRMSG = "CANNOT OPEN COMPANY FILE"
   GOSUB 90000
   STOP
END
OPEN "","CONTROL" TO CONTROL ELSE
   ERRMSG = "CANNOT OPEN CONTROL FILE"
   GOSUB 90000
   STOP
END
OPEN "","CATEGORY" TO CATEGORY ELSE
   ERRMSG = "CANNOT OPEN CATEGORY FILE"
   GOSUB 90000
   STOP
END
OPEN "","INVENTORY" TO INVENTORY ELSE
   ERRMSG = "CANNOT OPEN INVENTORY FILE"
   GOSUB 90000
   STOP
END
OPEN "","WAREHOUSE" TO WAREHOUSE ELSE
   ERRMSG = "CANNOT OPEN WAREHOUSE FILE"
   GOSUB 90000
   STOP
END
OPEN "","INV.WHSE" TO INV.WHSE ELSE
   ERRMSG = "CANNOT OPEN INV.WHSE FILE"
   GOSUB 90000
   STOP
END
OPEN "","INV.WHSE.LOC" TO INV.WHSE.LOC ELSE
   ERRMSG = "CANNOT OPEN INV.WHSE.LOC FILE"
   GOSUB 90000
   STOP
END
OPEN "","INV_AUDIT_HIST" TO INV_AUDIT_HIST ELSE
   ERRMSG = "CANNOT OPEN INV_AUDIT_HIST FILE"
   GOSUB 90000
   STOP
END
OPEN "","INV_SERIAL" TO INV_SERIAL ELSE
   ERRMSG = "CANNOT OPEN INV_SERIAL FILE"
   GOSUB 90000
   STOP
END
OPEN "","INV_SERIAL_DELETED" TO INV_SERIAL_DELETED ELSE
   ERRMSG = "CANNOT OPEN INV_SERIAL_DELETED FILE"
   GOSUB 90000
   STOP
END
OPEN "","INV_SERIAL_TEMP" TO INV_SERIAL_TEMP ELSE
   ERRMSG = "CANNOT OPEN INV_SERIAL_TEMP FILE"
   GOSUB 90000
   STOP
END
OPEN "","INV_RECEIPTS" TO INV_RECEIPTS ELSE
   ERRMSG = "CANNOT OPEN INV_RECEIPTS FILE"
   GOSUB 90000
   STOP
END
OPEN "","INV_RECP_WHSE" TO INV_RECP_WHSE ELSE
   ERRMSG = "CANNOT OPEN INV_RECP_WHSE FILE"
   GOSUB 90000
   STOP
END
OPEN "","ICS.SCREENS" TO M.SCREENS ELSE
   ERRMSG = "CANNOT OPEN ICS.SCREENS FILE"
   GOSUB 90000
   STOP
END
*
*---- INITIALIZATION
*
CONO = ""
CALL GET.CONO1 (CONO, MAT COMP.REC, COMPANY, CONTROL)
REPORT.NUMBER="IC601"
REPORT.NAME=""
CONO.NAME=""
REPORT.DATE=DATE()
HD1="" ; HD2=""
CALL GET.PROG.HEAD(CONO,CONO.NAME,REPORT.NAME,REPORT.NUMBER,REPORT.DATE,HD1,HD2)
SCREEN INIT;#
S$SCR = 1
SCREEN DEFINE;SERIAL.CONVERT
SCREEN FORMAT
SCREEN COUNT;;12
LINE.COUNT = S$LCNT
LINE.SPACE = S$LSPC
SP3 = SPACE(3)
*GOTO 110
*
*---- MAIN PROCESSING
*
100 *
RELEASE
NEW.SERIAL = ""
REF.NO = ""
CURR.REF.NO = ""
LINE.CNT = 0
TRAN = ""
PROD = ""
WHSE = ""
FROM.LOC  = ""
FROM.RSID = ""
SCREEN CLEAR
110 *
TODAY = DATE()
S$DATA(1)<S$SCR> = TODAY
*SCREEN FIELD;;1
SCREEN DISPLAY;;1
*
S$DATA(9)<S$SCR>=""
SCREEN FIELD;;9
SCREEN INPUT;;9;GOTO 99999
TRAN = S$VALUE
120 *
S$DATA(2)<S$SCR> = PROD
SCREEN FIELD;;2
SCREEN INPUT;;2;GOTO 100
MATREAD INV.REC FROM INVENTORY, CONO:S$VALUE ELSE
   ERRMSG = "Invalid Product ID. Try again! "
   GOSUB 90000
   GOTO 120
END
MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
   ERRMSG = "Invalid Product Line. Try again! "
   GOSUB 90000
   GOTO 120
END
IF CATG.TRK.LVL # "S" THEN
   ERRMSG="This Product is not setup for Serialized ID's"
   GOSUB 90000
   GOTO 120
END
BEGIN CASE
   CASE CATG.TYPE = "L" OR CATG.TYPE = "RL" OR CATG.TYPE = "PC"
      IF INV.PAP.WIDTH+0 = 0 OR INV.FACTOR+0 = 0 THEN
         ERRMSG = "Incomplete product definition. Try again! "
         GOSUB 90000
         GOTO 120
      END
*     CASE CATG.TYPE = "S"
   CASE 1
*         ERRMSG = "Invalid paper type. Try again! "
*         GOSUB 90000
*         GOTO 120
END CASE
IF S$VALUE # PROD AND DCOUNT(INV.WHSE.CODE,VM) = 1 THEN WHSE = INV.WHSE.CODE
PROD = S$VALUE
S$DATA(3)<S$SCR> = INV.FULL.DESC
SCREEN DISPLAY;;3
130 *
S$DATA(4)<S$SCR> = WHSE
SCREEN FIELD;;4
S$HMSG = CHANGE(INV.WHSE.CODE,VM,",")
SCREEN INPUT;;4;GOTO 100
MATREADU IWH.REC FROM INV.WHSE, CONO:PROD:"!":S$VALUE LOCKED
  ERRMSG='INV.WHSE Record is locked by user - ':GETUSERNAME(STATUS())
  GOSUB 90000
  GOTO 130
END ELSE
   RELEASE INV.WHSE, CONO:PROD:"!":S$VALUE
   ERRMSG = "Invalid Warehouse ID. Try again! "
   GOSUB 90000
   GOTO 130
END
MATREAD WHSE.REC FROM WAREHOUSE, CONO:S$VALUE ELSE MAT WHSE.REC = ''
DIV.CODE = WHS.DIV; USER.ID = UPCASE(@LOGNAME); ERRMSG = ''
CALL SI.CK.DIV.SEC.SUB(CONO,DIV.CODE,USER.ID,ERRMSG)
IF ERRMSG # '' THEN
   GOSUB 90000; GOTO 130
END
IF S$VALUE # WHSE AND DCOUNT(IWH.LOC,VM) = 1 THEN FROM.LOC = IWH.LOC
WHSE = S$VALUE
DIV.POS=DIVISION.POSITION(CONO,CONTROL,WHS.DIV)
BEGIN CASE                                              
   CASE DIV.POS<1,1>=''                                  
      DIV.POS=DIV.POS<1,2>                                
      CUR.PERIOD=CURRENT.PERIOD(CONO,CONTROL,DIV.POS,"IC")
      IF CUR.PERIOD<1,1>='' THEN                          
         CUR.PERIOD=CUR.PERIOD<1,2>                        
      END ELSE                                            
         IF CUR.PERIOD<1,2>='-2' THEN                      
            ERRMSG=CUR.PERIOD<1,2>                          
            GOSUB 90000                                     
         END                                               
      END                                                 
   CASE DIV.POS<1,1>='-1'                                
      ERRMSG=DIV.POS<1,2>                                 
      GOSUB 90000                                         
   CASE DIV.POS<1,1>='-2'                                
      ERRMSG=DIV.POS<1,2>                                 
      GOSUB 90000                                         
END CASE                                                
IF ERRMSG # "" THEN GOTO 99999
140 *
S$DATA(5)<S$SCR> = FROM.LOC
SCREEN FIELD;;5
S$HMSG = CHANGE(IWH.LOC,VM,",")
SCREEN INPUT;;5;GOTO 100
MATREADU IWLO.REC FROM INV.WHSE.LOC, CONO:PROD:"!":WHSE:"!":S$VALUE ELSE
   RELEASE INV.WHSE.LOC, CONO:PROD:"!":WHSE:"!":S$VALUE
   ERRMSG = "Invalid Location ID. Try again! "
   GOSUB 90000
   GOTO 140
END
FROM.RSID = ""
IF DCOUNT(IWLO.SERIAL,VM) = 1 THEN
   FROM.RSID = IWLO.SERIAL
END ELSE
   IF DCOUNT(IWLO.SERIAL,VM) < 1 THEN
      RELEASE INV.WHSE.LOC,CONO:PROD:"!":WHSE:"!":S$VALUE
      ERRMSG="Location has no ID's to be assigned"
      GOSUB 90000
      GOTO 140
   END
END
FROM.LOC = S$VALUE
GOTO 150
149 *
FROM.RSID = ""
150 *
S$DATA(6)<S$SCR> = FROM.RSID
SCREEN FIELD;;6
SCREEN INPUT;;6;GOTO 100
IF (S$VALUE = "" OR S$VALUE = "???") AND DCOUNT(IWLO.SERIAL,VM) > 1 THEN
*     FROM.RSID = WHSE:"!":FROM.LOC
   S$SCR += 1
   SELID = ''
   CALL SERIAL.CONVERT.SEL(CONO,PROD,WHSE,FROM.LOC,SELID)
   SCREEN CLOSE
   S$SCR -= 1
   SCREEN FORMAT
   GOSUB 80000
   IF SELID # "" THEN FROM.RSID = SELID ELSE GOTO 150
   S$DATA(6)<S$SCR> = FROM.RSID
   SCREEN FIELD;;6
   SCREEN DISPLAY;;6
END ELSE
   FROM.RSID = S$VALUE
END
LOCATE FROM.RSID IN IWLO.SERIAL<1>,1 SETTING RSPTR ELSE
   ERRMSG = "Invalid Serial ID. Try again! "
   GOSUB 90000
   GOTO 149
END
MATREADU ISTK.REC FROM INV_SERIAL,CONO:FROM.RSID LOCKED
  ERRMSG='INV_SERIAL Record is locked by user - ':GETUSERNAME(STATUS())
  GOSUB 90000
  GOTO 149
END ELSE
   RELEASE INV_SERIAL,CONO:FROM.RSID
   ERRMSG = "Invalid Serial ID. Try again! "
   GOSUB 90000
   GOTO 149
END
GOSUB 30000
* IF CATG.TYPE = "L" THEN
*     QTY.ON.HAND = INT(((IWLO.CURR.WT<1,RSPTR>*ICR.MT1)/ICR.DV1)/ICR.DV2+0.5)
* END ELSE
*     QTY.ON.HAND = IWLO.CURR.SHEET<1,RSPTR>
* END
QTY.ON.HAND = CALC.STK.QTY(ISTK.CUR.QTY,MAT INV.CNV.REC,"","")
* WGT.ON.HAND = IWLO.CURR.WT<1,RSPTR>
WGT.ON.HAND = ISTK.CUR.QTY
CURR.WGT = WGT.ON.HAND
* SHT.ON.HAND = IWLO.CURR.SHEET<1,RSPTR>
SHT.ON.HAND = QTY.ON.HAND
UOM = ISTK.UOM
UCOST = ISTK.UNIT.COST
RECP = ISTK.RECP
*PERIOD = ISTK.RECP.PERIOD
PERIOD = CUR.PERIOD
AUDIT = ISTK.AUDIT.NO
PO.NO = ISTK.PO.NO
PO.LINE = ISTK.PO.LINE
SDATE = ISTK.POST.DATE

*
* READU BARCODE FROM CONTROL, CONO:"BARCODE.SEQ" ELSE BARCODE = 0
MAT RSCNV.REC = ""
GOSUB 40000
LINE.CNT = 0
REF.NO = ""
CURR.REF.NO = ""
OPT = "A"
GOTO 510
*
*---- GET OPERATOR REPLY
*
500 *
SCREEN FIELD;;21
SCREEN INPUT;;21
OPT = S$VALUE
510 *
BEGIN CASE
   CASE OPT = "E" OR OPT = "END"
      GOTO 100
   CASE OPT = "A" AND LINE.CNT < 999 ;* CSF22657
      MODE = "A"
      DONE = 0
      FOR REF.NO = LINE.CNT+1 TO 999 UNTIL DONE
         GOSUB 50000
         GOSUB 10000
         IF WGT.ON.HAND - SUM(RSCNV.WGT) =0 THEN
           DONE = 1
         END
         IF S$VALUE = "END" THEN
            DONE = 1
            GOSUB 700
         END ELSE
*           LINE.CNT = LINE.CNT + 1
            LINE.CNT = DCOUNT(RSCNV.ID,VM)
         END
         GOSUB 40000
      NEXT REF.NO
      REF.NO = LINE.CNT
      CURR.REF.NO = ""
      GOSUB 50000
   CASE OPT = "C" AND LINE.CNT > 0
      MODE = "C"
      GOSUB 600
      IF S$VALUE # "" AND S$VALUE # "END" THEN
         REF.NO = S$VALUE
         GOSUB 10000
         IF S$VALUE = "END" THEN
            CURR.REF.NO = ""
            GOSUB 50000
         END
         GOSUB 40000
      END
   CASE OPT = "D" AND LINE.CNT > 0
      MODE = "D"
      GOSUB 600
      IF S$VALUE # "" AND S$VALUE # "END" THEN
         REF.NO = S$VALUE
         GOSUB 700
         LINE.CNT = LINE.CNT - 1
         IF REF.NO > LINE.CNT THEN REF.NO = REF.NO - 1
         CURR.REF.NO = ""
         GOSUB 50000
         GOSUB 40000
      END
   CASE OPT = "I" AND LINE.CNT > 0
      MODE = "I"
      GOSUB 600
      IF S$VALUE # "" AND S$VALUE # "END" THEN
         REF.NO = S$VALUE
         GOSUB 800
         LINE.CNT = LINE.CNT + 1
         CURR.REF.NO = ""
         GOSUB 50000
         GOSUB 10000
         IF S$VALUE = "END" THEN
            GOSUB 700
            LINE.CNT = LINE.CNT - 1
            CURR.REF.NO = ""
            GOSUB 50000
         END
         GOSUB 40000
      END
   CASE OPT = "S" OR OPT = "SF"
      REF.NO = CURR.REF.NO + LINE.COUNT
      IF REF.NO > LINE.CNT THEN REF.NO = 1
      GOSUB 50000
   CASE OPT = "SR"
      REF.NO = CURR.REF.NO - LINE.COUNT
      IF REF.NO < 1 THEN REF.NO = 1
      GOSUB 50000
   CASE OPT = "ST"
      REF.NO = 1
      GOSUB 50000
   CASE OPT = "SB"
      REF.NO = LINE.CNT
      IF REF.NO < 1 THEN REF.NO = 1
      GOSUB 50000
   CASE OPT = "F" AND QTY.ON.HAND = SUM(RSCNV.QTY)
      SCREEN FIELD;;23
      SCREEN INPUT;;23;GOTO 500
      IF S$VALUE = "Y" THEN GOSUB 85000
      OLD.WEIGHT = WGT.ON.HAND
      NEW.WEIGHT = SUM(RSCNV.WGT)
      IF NEW.WEIGHT # OLD.WEIGHT THEN
         REM.WEIGHT = OLD.WEIGHT - NEW.WEIGHT
         MAXPTR = 1
         FOR REF = 1 TO LINE.CNT
            SKID.WEIGHT = RSCNV.WGT<1,REF>
            IF SKID.WEIGHT > RSCNV.WGT<1,MAXPTR> THEN MAXPTR = REF
            RSCNV.WGT<1,REF> = SKID.WEIGHT+INT((SKID.WEIGHT/NEW.WEIGHT)*REM.WEIGHT+0.5)
            RSCNV.SHT<1,REF> = INT(((RSCNV.WGT<1,REF>/ICR.DV1)*ICR.MT1)/ICR.DV2+0.5)
         NEXT REF
         NEW.WEIGHT = SUM(RSCNV.WGT)
         RSCNV.WGT<1,MAXPTR> = RSCNV.WGT<1,MAXPTR>+(OLD.WEIGHT-NEW.WEIGHT)
      END
      MATREADU INVR.REC FROM INV_RECEIPTS,CONO:RECP LOCKED
        ERRMSG='INV_RECEIPTS Record is locked by user - ':GETUSERNAME(STATUS())
        GOSUB 90000
        GOTO 100
      END ELSE
         RELEASE INV_RECEIPTS,CONO:RECP
         ERRMSG='Cannot read INV_RECEIPTS record ':RECP
         GOSUB 90000
         GOTO 100
      END
      MATREADU IRW.REC FROM INV_RECP_WHSE,CONO:RECP:"!":WHSE LOCKED
        ERRMSG='INV_RECP_WHSE Record is locked by user - ':GETUSERNAME(STATUS())
        GOSUB 90000
        GOTO 100
      END ELSE
         RELEASE INV_RECP_WHSE,CONO:RECP:"!":WHSE
         ERRMSG='Cannot read INV_RECP_WHSE record ':RECP:"!":WHSE
         GOSUB 90000
         GOTO 100
      END
      SAVE.LA.PO = ISTK.PO.NO
      SAVE.LA.USED = ISTK.LA.USED
      PREV.LOC = FROM.LOC
      FOR REF = 1 TO LINE.CNT
         TO.RSID = RSCNV.ID<1,REF>
         TO.LOC = RSCNV.LOC<1,REF>
         MATREADU ISTK.REC FROM INV_SERIAL,CONO:TO.RSID ELSE
            MAT ISTK.REC = ""
         END
         GOSUB GET.AUDIT.ID
         ISTK.PO.NO = TRAN
         ISTK.PO.LINE = "1"
         ISTK.PROD = PROD
         ISTK.WHSE = WHSE
         ISTK.LOC = TO.LOC
         ISTK.ORG.QTY = RSCNV.WGT<1,REF>
         ISTK.CUR.QTY = ISTK.ORG.QTY
         ISTK.RSVB.QTY = ISTK.CUR.QTY
         ISTK.ORG.STK.QTY = RSCNV.SHT<1,REF>
         ISTK.CUR.STK.QTY = RSCNV.SHT<1,REF>
         ISTK.MILL.ID = RSCNV.MILL<1,REF>
         ISTK.ENTRY.DATE = TODAY
         ISTK.EDIT.DATE = TODAY
         ISTK.UNIT.COST = UCOST
         ISTK.UOM = UOM
         ISTK.RECP = RECP
         ISTK.RECP.PERIOD = PERIOD
         AUDIT<1,-1> = INAH.SEQ
         INVR.AUDIT.NO<1,-1> = INAH.SEQ
         ISTK.MANIFEST.NO = PO.NO
         ISTK.POST.DATE = SDATE
** vv         MATWRITE ISTK.REC ON INV_SERIAL, CONO:TO.RSID
*---- UPDATE NEW LOCATION
         MATREADU IWLO.REC FROM INV.WHSE.LOC, CONO:PROD:"!":WHSE:"!":TO.LOC ELSE
            MAT IWLO.REC = ""
            LOCATE TO.LOC IN IWH.LOC<1>,1 BY "AL" SETTING LPTR ELSE
               IWH.LOC = INSERT(IWH.LOC,1,LPTR,0,TO.LOC)
            END
            MATWRITEU IWH.REC ON INV.WHSE, CONO:PROD:"!":WHSE
         END
         LOCATE TO.RSID IN IWLO.SERIAL<1>,1 SETTING NRP ELSE
            NRP = DCOUNT(IWLO.SERIAL,VM)+1
         END
*             IWLO.LA.PO<1,NRP> = SAVE.LA.PO
*             IWLO.LA.USED<1,NRP> = SAVE.LA.USED
         IWLO.SERIAL<1,NRP> = TO.RSID
         IF CATG.TYPE='L' OR CATG.TYPE='LR' OR CATG.TYPE='PC' THEN 
            ISTK.CUR.DIAM=CALC.DIAM(ISTK.CUR.QTY,ISTK.CUR.STK.QTY,MAT INV.REC)
            ISTK.ORG.DIAM=ISTK.CUR.DIAM
         END
         IWLO.LOC.ON.HAND += RSCNV.WGT<1,REF>
         MATWRITEU IWLO.REC ON INV.WHSE.LOC, CONO:PROD:"!":WHSE:"!":TO.LOC
*---- UPDATE ORIGINAL LOCATION
         MATREADU IWLO.REC FROM INV.WHSE.LOC, CONO:PROD:"!":WHSE:"!":FROM.LOC ELSE
            RELEASE INV.WHSE.LOC,CONO:PROD:"!":WHSE:"!":FROM.LOC
            ERRMSG='Cannot read From INV.WHSE.LOC record!'
            GOSUB 90000
            GOTO 100
         END
         IWLO.LOC.ON.HAND -= RSCNV.WGT<1,REF>
         IF IWLO.LOC.ON.HAND < 0 THEN
            ERRMSG='!!! INV.WHSE.LOC ':FROM.LOC:' has become negative !!!'
            GOSUB 90000
         END
         MATWRITEU IWLO.REC ON INV.WHSE.LOC, CONO:PROD:"!":WHSE:"!":FROM.LOC
*---- UPDATE AUDIT HISTORY
         MATREADU INAH.REC FROM INV_AUDIT_HIST, CONO:INAH.SEQ ELSE
            MAT INAH.REC = ""
         END
         INAH.TYPE = "O"
         INAH.SRC = "SC"
         INAH.TRAN = TRAN
         INAH.PROD = PROD
         INAH.WHSE = WHSE
         INAH.LOC = FROM.LOC
         INAH.SERIAL = FROM.RSID
         INAH.PERIOD = PERIOD
         INAH.DATE = TODAY
         INAH.UNIT.COST = UCOST
         INAH.QTY -= RSCNV.WGT<1,REF>
         INAH.CUR.QTY = CURR.WGT
         INAH.CUR.STK.QTY=CALC.STK.QTY(CURR.WGT,MAT INV.CNV.REC,'','')
         IF CATG.TYPE='L' OR CATG.TYPE='LR' OR CATG.TYPE='PC' THEN 
            INAH.CUR.DIAM=CALC.DIAM(INAH.CUR.QTY,INAH.CUR.STK.QTY,MAT INV.REC)
         END
         INAH.NEW.QTY=INAH.CUR.QTY+INAH.QTY
         CURR.WGT += INAH.QTY
         INAH.NEW.STK.QTY=CALC.STK.QTY(INAH.NEW.QTY,MAT INV.CNV.REC,'','')
         IF CATG.TYPE='L' OR CATG.TYPE='LR' OR CATG.TYPE='PC' THEN 
            INAH.NEW.DIAM=CALC.DIAM(INAH.CUR.QTY,INAH.CUR.STK.QTY,MAT INV.REC)
         END
         INAH.DV.DP.CC = DIV.CODE:"00000"
         INAH.OPER.ID = @LOGNAME
         INAH.SYS.DATE=DATE()
         INAH.SYS.TIME=TIME()
         MATWRITE INAH.REC ON INV_AUDIT_HIST,CONO:INAH.SEQ
         GOSUB GET.AUDIT.ID
         ISTK.AUDIT.NO = INAH.SEQ
         MATWRITE ISTK.REC ON INV_SERIAL, CONO:TO.RSID
         INAH.TYPE = "I"
         INAH.SERIAL = TO.RSID
         INAH.LOC = TO.LOC
         INAH.QTY = RSCNV.WGT<1,REF>
         INAH.CUR.QTY = 0
         INAH.NEW.QTY = INAH.QTY
         INAH.NEW.STK.QTY=CALC.STK.QTY(INAH.NEW.QTY,MAT INV.CNV.REC,'','')
         INAH.CUR.STK.QTY = 0
         INAH.CUR.DIAM = 0
         IF CATG.TYPE='L' OR CATG.TYPE='LR' OR CATG.TYPE='PC' THEN 
            INAH.NEW.DIAM=CALC.DIAM(INAH.CUR.QTY,INAH.CUR.STK.QTY,MAT INV.REC)
         END
         INAH.DV.DP.CC = DIV.CODE:"00000"
         INAH.OPER.ID = @LOGNAME
         INAH.SYS.DATE=DATE()
         INAH.SYS.TIME=TIME()
         INVR.AUDIT.NO<1,-1> = INAH.SEQ
*        AUDIT<1,-1> = INAH.SEQ Only need the FROM SEQ for orig ISTK REC
         MATWRITE INAH.REC ON INV_AUDIT_HIST,CONO:INAH.SEQ
         IRW.SERIAL.NO<1,-1> = TO.RSID
         INVR.SERIAL.NO<1,-1> = TO.RSID
      NEXT REF
      MATREADU IWLO.REC FROM INV.WHSE.LOC, CONO:PROD:"!":WHSE:"!":FROM.LOC ELSE NULL
      MATREADU ISTK.REC FROM INV_SERIAL,CONO:FROM.RSID THEN
        ISTK.AUDIT.NO = AUDIT
        ISTK.CUR.QTY -= SUM(RSCNV.WGT)
        ISTK.RSVB.QTY -= SUM(RSCNV.WGT)
        ISTK.CUR.STK.QTY =CALC.STK.QTY(ISTK.CUR.QTY,MAT INV.CNV.REC,"","")
        IF ISTK.CUR.QTY = 0 THEN
           MATWRITE ISTK.REC ON INV_SERIAL_DELETED,CONO:FROM.RSID
           DELETE INV_SERIAL,CONO:FROM.RSID
           LOCATE FROM.RSID IN IWLO.SERIAL<1>,1 SETTING SFND THEN
              DEL IWLO.SERIAL<1,SFND>
           END
           LOCATE FROM.RSID IN IRW.SERIAL.NO<1>,1 SETTING RFND THEN
              DEL IRW.SERIAL.NO<1,RFND>
           END
        END ELSE
           MATWRITE ISTK.REC ON INV_SERIAL,CONO:FROM.RSID
        END
      END ELSE RELEASE INV_SERIAL,CONO:FROM.RSID
      MATWRITEU IWLO.REC ON INV.WHSE.LOC, CONO:PROD:"!":WHSE:"!":FROM.LOC
      MATWRITE IRW.REC ON INV_RECP_WHSE,CONO:RECP:"!":WHSE
      MATWRITE INVR.REC ON INV_RECEIPTS,CONO:RECP
      IF NEW.SERIAL # "" THEN
        WRITE SERIAL.SEQ ON CONTROL,CONO:"ISTK.SEQ"
      END
      GOTO 100
   CASE OPT = "F"
      ERRMSG = "Balance must be zero before filing."
      GOSUB 90000
END CASE
IF OPT # "F" THEN
  GOTO 500
END ELSE GOTO 100
*
*---- GET LINE NUMBER
*
600 *
SCREEN FIELD;;22
S$MINV = CURR.REF.NO
S$MAXV = S$MINV + LINE.COUNT - 1
IF S$MAXV > LINE.CNT THEN S$MAXV = LINE.CNT
SCREEN INPUT;;22
RETURN
*
*---- DELETE MULTI-LINE DATA
*
700 *
RSCNV.ID = DELETE(RSCNV.ID,1,REF.NO,0)
RSCNV.LOC = DELETE(RSCNV.LOC,1,REF.NO,0)
RSCNV.QTY = DELETE(RSCNV.QTY,1,REF.NO,0)
RSCNV.WGT = DELETE(RSCNV.WGT,1,REF.NO,0)
RSCNV.SHT = DELETE(RSCNV.SHT,1,REF.NO,0)
RSCNV.MILL = DELETE(RSCNV.MILL,1,REF.NO,0)
GOSUB 81000
RETURN
*
*---- INSERT MULTI-LINE DATA
*
800 *
RSCNV.ID = INSERT(RSCNV.ID,1,REF.NO,0,"")
RSCNV.LOC = INSERT(RSCNV.LOC,1,REF.NO,0,"")
RSCNV.QTY = INSERT(RSCNV.QTY,1,REF.NO,0,"")
RSCNV.WGT = INSERT(RSCNV.WGT,1,REF.NO,0,"")
RSCNV.SHT = INSERT(RSCNV.SHT,1,REF.NO,0,"")
RSCNV.MILL = INSERT(RSCNV.MILL,1,REF.NO,0,"")
GOSUB 81000
RETURN
*
*---- GET MULTI-LINE DATA
*
10000 *
S$VAL = REF.NO
SCREEN DISPLAY;;11
10100 *
IF MODE = "A" OR MODE = "I" THEN
  IF CATG.BARCODE = "Y" THEN
   GOSUB GET.SERIAL.ID
*  TEMP.MF1 = GET.SERIAL.SEQ(CONO,CONTROL,INV_SERIAL)
   TEMP.MF1 = NEW.SERIAL
   S$DATA(12)<S$SCR,REF.NO> = TEMP.MF1
   S$VAL = REF.NO
   SCREEN DISPLAY;;12
  END ELSE
   S$O.R='R'
   S$VAL = REF.NO
   SCREEN FIELD;;12
   SCREEN INPUT;;12;GOTO 19950
   TEMP.MF1 = S$VALUE
  END
END ELSE
   TEMP.MF1 = RSCNV.ID<1,REF.NO>
END
10200 *
S$VAL = REF.NO
S$O.R='R'
SCREEN FIELD;;13
IF REF.NO > 1 THEN
   S$O.R = "O"
   S$DEFAULT = RSCNV.LOC<1,REF.NO-1>
END
SCREEN INPUT;;13;GOTO 19950
TEMP.MF2 = S$VALUE
10300 *
BEGIN CASE
   CASE REF.NO > 1 AND RSCNV.QTY<1,REF.NO> = ""
      S$DATA(14)<S$SCR,REF.NO> = OCONV(RSCNV.QTY<1,REF.NO-1>,ICR.CNV)
   CASE RSCNV.QTY<1,REF.NO> = ""
      S$DATA(14)<S$SCR,REF.NO> = ""
   CASE 1
      S$DATA(14)<S$SCR,REF.NO> = OCONV(RSCNV.QTY<1,REF.NO>,ICR.CNV)
END CASE
S$VAL = REF.NO
SCREEN FIELD;;14
SCREEN INPUT;;14;GOTO 19950
BEGIN CASE
   CASE S$VALUE <= 0
      ERRMSG = "Invalid quantity. Try again! "
      GOSUB 90000
      GOTO 10300
   CASE (CATG.TYPE = "L" OR CATG.TYPE = "RL" OR CATG.TYPE = "PC") AND INDEX(S$VALUE,".",1) > 0
      ERRMSG = "Invalid entry. Try again! "
      GOSUB 90000
      GOTO 10300
   CASE 1
      TEMP.MF3 = ICONV(S$VALUE,ICR.CNV)
      S$DATA(14)<S$SCR,REF.NO> = OCONV(TEMP.MF3,ICR.CNV)
      S$VAL = REF.NO
      SCREEN DISPLAY;;14
END CASE
TEMP.WGT = CALC.COST.QTY(TEMP.MF3,MAT INV.CNV.REC,"","")
IF WGT.ON.HAND - (SUM(RSCNV.WGT) + TEMP.WGT) < 0 THEN
   ERRMSG='Cannot allow quantity to become negative'
   GOSUB 90000
   TEMP.MF3=''
   GOTO 10300
END
10400 *
S$VAL = REF.NO
SCREEN FIELD;;15
SCREEN INPUT;;15;GOTO 19950
TEMP.MF4 = S$VALUE
19900 *
RSCNV.ID<1,REF.NO> = TEMP.MF1
RSCNV.LOC<1,REF.NO> = TEMP.MF2
RSCNV.QTY<1,REF.NO> = TEMP.MF3
RSCNV.WGT<1,REF.NO> = INT(((TEMP.MF3/ICR.MT1)*ICR.DV1)*ICR.DV2+0.5)
RSCNV.SHT<1,REF.NO> = INT(((RSCNV.WGT<1,REF.NO>/ICR.DV1)*ICR.MT1)/ICR.DV2+0.99)
RSCNV.MILL<1,REF.NO> = TEMP.MF4
RETURN
19950 *
IF MODE = "A" OR MODE = "I" THEN
*     BARCODE = BARCODE - 1
END
GOSUB 81000
RETURN
*
*---- GET CONVERSION FACTOR
*
30000 *
MAT INV.CNV.REC = ""
BEGIN CASE
   CASE INV.UNIT<1,2> = "SHT" AND INV.UNIT<1,3> = "LBS"
      ICR.CNV = "MD0"
      ICR.DV1 = INV.M.WT; ICR.MT1 = 1; ICR.DV2 = 1
   CASE INV.UNIT<1,2> = "PC" AND INV.UNIT<1,3> = "MSI"
      ICR.CNV = "MD0"
      ICR.DV1 = INV.PAP.WIDTH/100; ICR.MT1 = 10; ICR.DV2 = 1
   CASE INV.UNIT<1,2> = "FT" AND INV.UNIT<1,3> = "MSI"
      ICR.CNV = "MD0"
      ICR.DV1 = INV.PAP.WIDTH/100; ICR.MT1 = 100; ICR.DV2 = 12
   CASE 1
      ICR.CNV = "MD2"
      ICR.DV1 = 10; ICR.MT1 = 1; ICR.DV2 = 1
END CASE
RETURN
*
*---- COMPUTE AND DISPLAY ROLL BALANCE
*
40000 *
S$DATA(7)<S$SCR> = OCONV(QTY.ON.HAND-SUM(RSCNV.QTY),ICR.CNV)
SCREEN DISPLAY;;7
RETURN
*
*---- MULTI-LINE SCROLL ROUTINE
*
50000 *
START.REF.NO = 1 + INT((REF.NO-1)/LINE.COUNT)*LINE.COUNT
IF START.REF.NO = CURR.REF.NO THEN RETURN
CURR.REF.NO = START.REF.NO
S$VAL = START.REF.NO
S$CNT = DCOUNT(S$DATA(12)<S$SCR>,VM)
SCREEN MULTI;;C;11;12;13;14;15
RETURN
*
*---- LOAD SCREEN DATA
*
80000 *
80050 *
SCREEN DISPLAY;;ALL
RETURN
*
*---- LOAD SCREEN DATA (MULTI-LINE)
*
81000 *
S$DATA(12)<S$SCR> = RSCNV.ID
S$DATA(13)<S$SCR> = RSCNV.LOC
S$DATA(14)<S$SCR> = ""
FOR LPTR = 1 TO LINE.CNT
   S$DATA(14)<S$SCR,LPTR> = OCONV(RSCNV.QTY<1,LPTR>,ICR.CNV)
NEXT LPTR
S$DATA(15)<S$SCR> = RSCNV.MILL
RETURN
*
*---- PRINT SCREEN DATA
*
85000 *
PRINTER ON
PAGE.NO = 0
GOSUB 86000
FOR LPTR = 1 TO LINE.CNT
   IF PLINE.CNT > 55 THEN GOSUB 86000
   PLINE = LPTR"R#3"
   PLINE = PLINE:SP3:RSCNV.ID<1,LPTR>"L#8"
   PLINE = PLINE:SP3:RSCNV.LOC<1,LPTR>"L#4"
   PLINE = PLINE:SP3:OCONV(RSCNV.QTY<1,LPTR>,ICR.CNV)"R#8"
   PLINE = PLINE:SP3:RSCNV.MILL<1,LPTR>"L#25"
   PRINT PLINE
NEXT LPTR
PRINTER OFF
PRINTER CLOSE
ERRMSG = "Printing completed. Press <RETURN> to continue:"
GOSUB 90000
RETURN
*
*---- PRINT HEADINGS
*
86000 *
*PRINT CHAR(12)
PAGE.NO = PAGE.NO + 1
*HLINE1 = OCONV(TODAY,"D2/")"R#8"
*HLINE1 = HLINE1:SPACE(8):" S E R I A L   C O N V E R S I O N""L#40"
*HLINE1 = HLINE1:SPACE(8):"PAGE ":PAGE.NO
HLINE1 = HD1:PAGE.NO
HLINE2 = "Reference  : ":TRAN
HLINE3 = "Product ID : ":PROD"L#15"
HLINE3 = HLINE3:SPACE(3):INV.FULL.DESC"L#45"
HLINE4 = "Whse / Loc : ":WHSE"L#4":" / ":FROM.LOC"L#4"
HLINE4 = HLINE4:SPACE(10):"SERIAL : ":FROM.RSID"L#15"
PRINT HLINE1
PRINT HD2
PRINT
PRINT HLINE2
PRINT HLINE3
PRINT HLINE4
PRINT
PRINT
SLINE1 = "Ln#":SP3:" SERIAL ":SP3:"Loc ":SP3:"Quantity":SP3:"   Mill Identification   "
SLINE2 = "---":SP3:"--------":SP3:"----":SP3:"--------":SP3:"-------------------------"
PRINT SLINE1
PRINT SLINE2
PLINE.CNT = 9
RETURN
*
GET.AUDIT.ID: 
*
INAH.SEQ = GET.INAH.SEQ(CONO,CONTROL,INV_AUDIT_HIST)
RETURN
*
GET.SERIAL.ID:
*
IF NEW.SERIAL = '' THEN
  READU SERIAL.SEQ FROM CONTROL, CONO:"ISTK.SEQ" ELSE
    SERIAL.SEQ = 0
  END
END
FND=0
LOOP
  SERIAL.SEQ+=1
  IF SERIAL.SEQ > 9999999 THEN SERIAL.SEQ = 1
  SERIAL.SEQ =  SERIAL.SEQ"R%7"
  CALL CHECK.DIGIT("C",SERIAL.SEQ,"10RL",CKDIG,VALID)
  SERIAL.NO=SERIAL.SEQ:CKDIG
  ISTK.ID=CONO:SERIAL.NO
  IF VALID THEN
    IF RECORDLOCKED(INV_SERIAL_TEMP,ISTK.ID)=0 THEN   
      DELETE INV_SERIAL_TEMP,ISTK.ID                  
    END                                               
    READU CHECKREC FROM INV_SERIAL_TEMP,ISTK.ID LOCKED
      NULL                                            
    END ELSE                                          
      READU CHECKREC FROM INV_SERIAL,ISTK.ID THEN     
        RELEASE INV_SERIAL, ISTK.ID                   
        RELEASE INV_SERIAL_TEMP,ISTK.ID               
      END ELSE                                        
        READ CHECK.REC FROM INV_SERIAL_DELETED,ISTK.ID THEN
          RELEASE INV_SERIAL, ISTK.ID                   
          RELEASE INV_SERIAL_TEMP,ISTK.ID               
        END ELSE
          FND = 1                                       
        END                                             
      END                                               
    END
  END
UNTIL FND DO
  RELEASE INV_SERIAL,ISTK.ID
REPEAT
NEW.SERIAL = SERIAL.NO
RETURN
*
*---- ERROR ROUTINE
*
90000 ERR.TYPE=1;CALL SYSCOM(MAT SYSCOM.REC);RETURN
* 90000 *
*       PRINT @(0,23):CL:ERRMSG:
*       INPUT REPLY:
*       PRINT @(0,23):CL:
*       RETURN
*
*---- END OF PROGRAM
*
99999 *
SCREEN CLEAR;;D
PRINT @(-1)
END
