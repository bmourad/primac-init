*COPY>CPYLIB>COM1
*********************************************************************
* REVISION    - [08.1]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.
* SYSTEM      - PRIMAC
* SOURCE      - ICSBP
* PROGRAM     - INV.TRAN.HIST.INQ
*T25740 edvard 07/19/2001 * REV12
*T27366 adelgado 04/09/2003 * Allow to review serials found in
*                             INV_SERIAL_DELETED.
*T28953 lross 07/17/2006 * Add checks for ending period/date.
*ENDDOC
*********************************************************************
*
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>INV_AUDIT_HIST
*COPY>ICS.CPYLIB>INV_AUDIT_BAL
*COPY>ICS.CPYLIB>CATEGORY
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>PMC.CPYLIB>FISCAL
*COPY>ICS.CPYLIB>INV_SERIAL
*COPY>ICS.CPYLIB>INV_RECEIPTS
*COPY>ICS.CPYLIB>INV.HIST
*COPY>ICS.CPYLIB>INV.CNV
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>DIVISION
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>GEN.XREF
*COPY>CPYLIB>SYSCOM
*
  DEFFUN CALC.STK.QTY(COST.QTY,MAT INV.CNV.REC,ROND,LN)
*
**** SETUP FOR SYSTEM ERRMSGS
*
  SYS.TYPE=1
  CALL SYSCOM(MAT SYSCOM.REC)
*
**** OPEN FILES
*
  OPEN '','INV_AUDIT_BAL' TO INV_AUDIT_BAL ELSE ERRMSG='INV_AUDIT_BAL FILE IS MISSING'; GOTO 93000
  OPEN '','INV_AUDIT_HIST' TO INV_AUDIT_HIST ELSE ERRMSG='INV_AUDIT_HIST FILE IS MISSING'; GOTO 93000
  OPEN '','INV_SERIAL' TO INV_SERIAL ELSE ERRMSG='INV_SERIAL FILE IS MISSING'; GOTO 93000
  OPEN '','INV_SERIAL_DELETED' TO INV_SERIAL_DELETED ELSE ERRMSG='INV_SERIAL_DELETED FILE IS MISSING'; GOTO 93000    ;* T27366
  OPEN '','INV_RECEIPTS' TO INV_RECEIPTS ELSE ERRMSG='INV_RECEIPTS FILE IS MISSING'; GOTO 93000
  OPEN '','INVENTORY' TO INVENTORY ELSE ERRMSG='INVENTORY FILE IS MISSING'; GOTO 93000
  OPEN '','INV.WHSE' TO INV.WHSE ELSE ERRMSG='INV.WHSE FILE IS MISSING'; GOTO 93000
  OPEN '','COMPANY' TO COMPANY ELSE ERRMSG='COMPANY FILE IS MISSING'; GOTO 93000
  OPEN '','ICS.SCREENS' TO M.SCREENS ELSE ERRMSG='M.SCREENS FILE IS MISSING'; GOTO 93000
  OPEN '','CONTROL' TO CONTROL ELSE ERRMSG='CONTROL FILE IS MISSING'; GOTO 93000
  OPEN '','DIVISION' TO DIVISION ELSE ERRMSG='DIVISION FILE IS MISSING'; GOTO 93000
  OPEN '','INVENTORY.XREF' TO INVENTORY.XREF ELSE ERRMSG='INVENTORY.XREF FILE IS MISSING'; GOTO 93000
  OPEN '','PREFIX' TO PREFIX ELSE ERRMSG='PREFIX FILE IS MISSING'; GOTO 93000
  OPEN '','CATEGORY' TO CATEGORY ELSE ERRMSG='CATEGORY FILE IS MISSING'; GOTO 93000
  OPEN '','WAREHOUSE' TO WAREHOUSE ELSE ERRMSG='WAREHOUSE FILE IS MISSING'; GOTO 93000
*
***** GET COMPANY NAME
*
  SYSLIST=''
  MAT COMP.REC=''
  CONO=''
  CALL GET.CONO(CONO,MAT COMP.REC)
  IF CONO='END' THEN GOTO 99999
  MATREAD FISCAL.REC FROM CONTROL, CONO:"ICFISCAL" ELSE
    MAT FISCAL.REC=""
  END
*
**** SET UP GEN.XREF.REC
*
  MAT EDIT.COM.DRIVER=''
  MAT GEN.XREF.REC=''
  GXR.CO=CONO
  GXR.HEADING<1,1>='PRODUCT NUMBER'
  GXR.HEADING<1,2>='FULL DESCRIPTION'
  GXR.ATT<1,1>=0
  GXR.ATT<1,2>=2
  GXR.LEN<1,1>=15
  GXR.LEN<1,2>=45
  SER.EXISTS='' ; RECP.EXISTS='' ; PROD.EXISTS=''
*
  ECD.SCRN.CNT=1
  ECD.SCRN.NAME<1>='INV.TRAN.HIST.INQ'
  ECD.SCRN.NAME<2>='RECP.TRACK.INQ'
  ECD.SCRN.NAME<3>='RECP.TRAN.HIST.INQ'
  ECD.SCRN.NAME<4>='SER.TRACK.INQ'
  ECD.SCRN.NAME<5>='SER.TRAN.HIST.INQ'
  GOSUB ACTION.1
  ;*
  ;* Main Loop
  ;*
  DONE = 0
  LOOP
    ECD.SCRN.NO=1
    MAT SCV.REC=''
    GOSUB ACTION.6
    LINE.SPACE=2
    PAGE.SIZE=5
    BEGIN.PAGE=10
    OLD.START.LINE=0
    LINES=0
    LN=1
    CNV="MD0,"
    VALID.SOURCES="R":VM:"C":VM:"Q":VM:"A":VM:"T":VM:"S":VM:"U":VM:"D":VM:"P":VM:"SC"
*
    ESN=ECD.SCRN.NO
*
    PROD.SEL=""; PROD.DESC.SEL=""
    BPER.SEL=""; SOURCE.SEL=""
    TRANS.SEL=""; BEG.BAL.QTY=0
    SUPR.SEL=""; BEG.BAL.AMT=0
    EPER.SEL=""; EDATE.SEL=""
    BDATE.SEL=""; DIV.SEL=""
    GOSUB ENT.ITEM
    IF ECD.RET.VALUE="END" THEN GOTO 99999
    LIMIT=8
    EOL=0
    FOR REQUEST=1 TO LIMIT UNTIL EOL
      ON REQUEST GOSUB ENT.DIVISION,ENT.BEG.PERIOD,ENT.BEG.DATE,ENT.SOURCE,ENT.END.PERIOD,ENT.END.DATE,ENT.TRAN.TYPE,ENT.S.FLAG
      IF ECD.RET.VALUE="END" THEN EOL=1
    NEXT REQUEST
    IF ECD.RET.VALUE#"END" THEN
      GOSUB MAIN.PROMPT
    END
  UNTIL (DONE) REPEAT
*
  GOTO 99999
*
**************************************************************************
******* S U B R O U T I N E S ********************************************
**************************************************************************
*
**************
MAIN.PROMPT: 
**************
*
  MORE=1
  LOOP
    ECD.NUM=21; SCV.REC(ECD.NUM)<ESN>=""
    GOSUB ACTION.4
    OPTION=ECD.RET.VALUE
    BEGIN CASE
      CASE OPTION="END" OR OPTION="E"
        MORE=0
      CASE OPTION="P"
        PREV.PASS="FIRST-PASS"
        GOSUB PROCESS.SELECTION
      CASE OPTION="SI"
        ECD.NUM=28 ; GOSUB ACTION.4
        BEGIN CASE
          CASE ECD.RET.VALUE="END"
            MORE=0
          CASE ECD.RET.VALUE=""
            NULL
          CASE ECD.RET.VALUE < 1 OR ECD.RET.VALUE > LINES
            ERRMSG="** Invalid selection **"
            GOSUB 91000
          CASE SEL.SERIAL<ECD.RET.VALUE>=""
            ERRMSG="** Line ":ECD.RET.VALUE:" has no serial number **"
            GOSUB 91000
          CASE 1
            READV TEST FROM INV_SERIAL, CONO:SEL.SERIAL<ECD.RET.VALUE>, 1 THEN
              ECD.SCRN.NO=4
              XSTAT=1
              CALL SER.TRACK.INQ(CONO,SEL.SERIAL<ECD.RET.VALUE>,XSTAT)
              IF XSTAT THEN ECD.ACTION=99; CALL SCRN.EDIT
              ECD.SCRN.NO=1
              GOSUB ACTION.3
              LN=OLD.START.LINE; OLD.START.LINE=0; GOSUB DISP.LINES
            END ELSE
* T27366 v
              READV TEST FROM INV_SERIAL_DELETED, CONO:SEL.SERIAL<ECD.RET.VALUE>, 1 THEN
                ECD.SCRN.NO=4
                XSTAT=1
                CALL SER.TRACK.INQ(CONO,SEL.SERIAL<ECD.RET.VALUE>,XSTAT)
                IF XSTAT THEN ECD.ACTION=99; CALL SCRN.EDIT
                ECD.SCRN.NO=1
                GOSUB ACTION.3
                LN=OLD.START.LINE; OLD.START.LINE=0; GOSUB DISP.LINES
              END ELSE
* T27366 ^
                ERRMSG="Invalid serial number ":SEL.SERIAL<ECD.RET.VALUE>:" on line ":ECD.RET.VALUE
                GOSUB 91000
              END    ;* T27366
            END
        END CASE
      CASE OPTION[1,1]="S"
        GOSUB SCROLL
      CASE OPTION="RI"
        ECD.NUM=29 ; GOSUB ACTION.4
        BEGIN CASE
          CASE ECD.RET.VALUE="END"
            MORE=0
          CASE ECD.RET.VALUE=""
            NULL
          CASE ECD.RET.VALUE < 1 OR ECD.RET.VALUE > LINES
            ERRMSG="** Invalid selection **"
            GOSUB 91000
          CASE 1
            READV TEST FROM INV_RECEIPTS, CONO:SEL.RECP.ID<ECD.RET.VALUE>, 1 THEN
              ECD.SCRN.NO=2
              XSTAT=1
              CALL RECP.TRACK.INQ(CONO,SEL.RECP.ID<ECD.RET.VALUE>,XSTAT)
              IF XSTAT THEN ECD.ACTION=99; CALL SCRN.EDIT
              ECD.SCRN.NO=1
              GOSUB ACTION.3
              LN=OLD.START.LINE; OLD.START.LINE=0; GOSUB DISP.LINES
            END ELSE
              ERRMSG="Invalid receipt number ":SEL.RECP.ID<ECD.RET.VALUE>:" on line ":ECD.RET.VALUE
              GOSUB 91000
            END
        END CASE
      CASE NOT(NUM(OPTION))
        ERRMSG="Invalid entry, please re-enter"
        GOSUB 91000
      CASE 1
        ON OPTION GOSUB ENT.DIVISION,ENT.BEG.PERIOD,ENT.BEG.DATE,ENT.SOURCE,ENT.END.PERIOD,ENT.END.DATE,ENT.TRAN.TYPE,ENT.S.FLAG
    END CASE
  WHILE MORE DO REPEAT
  RETURN
*
*******************
PROCESS.SELECTION: 
*******************
*
  SEL.SOURCE='';  SEL.DATE=''
  SEL.RECP.ID=''; SEL.DIV=''
  SEL.WHSE='';    SEL.LOC=''
  SEL.SERIAL='';  SEL.QTY=''
  SEL.COST='';    SEL.PERIOD=''
  SEL.RECORD='';  SEL.OPER.ID=''
  SEL.EBAL.QTY=0; SEL.EBAL.AMT=0
  SEL.BBAL.QTY=0; SEL.BBAL.AMT=0
*
*BY.STMT=" BY PERIOD BY INAH_DATE BY WHSE_DIV BY INAH_RECP_ID BY INAH_SERIAL"
  BY.STMT=" BY PERIOD BY @ID BY INAH_DATE "
*
  BEGIN CASE
    CASE PROD.EXISTS
      STMT='SSELECT INV_AUDIT_HIST WITH PROD_IDX="':CONO:PROD.SEL:'" '
    CASE SER.EXISTS
      STMT='SSELECT INV_AUDIT_HIST WITH SERIAL_IDX="':CONO:SERIAL:'" '
    CASE RECP.EXISTS
      STMT='SSELECT INV_AUDIT_HIST WITH RECP_IDX="':CONO:RECP:'" '
  END CASE
  IF DIV.SEL # "ALL" THEN STMT=STMT:'AND WITH WHSE_DIV="':DIV.SEL:'" ' 
  IF BPER.SEL > FR.CURR.PER AND FR.CURR.PER # "" THEN
    NEW.PER=FR.CURR.PER
  END ELSE
    NEW.PER=BPER.SEL
  END
  IF NEW.PER THEN STMT=STMT : ' AND WITH PERIOD >= "':NEW.PER:'"'
  STMT=STMT : STMT.SOURCE
  IF EPER.SEL # "ALL" THEN STMT=STMT : ' AND WITH PERIOD <= "':EPER.SEL:'"'
  IF EDATE.SEL # "ALL" THEN STMT=STMT : ' AND WITH INAH_DATE <= "':OCONV(EDATE.SEL,"D2/"):'"'
  STMT=STMT : STMT.TRANS
  STMT=STMT : BY.STMT
  PERFORM STMT RTNLIST SYSLIST CAPTURING RESPONSE
*
  RESPONSE=""; DATA=1; LINES=0
  FIRST.TIME=1
  LOOP
    READNEXT SEL.ID FROM SYSLIST ELSE DATA=0
  WHILE DATA DO
    IF SEL.ID[4,1]='C' THEN
      ;* these are conversion created history records
      ;* that are linked to serial/receipt and show up
      ;* in serial/receipt tran history but should not
      ;* show up in tran history inq.
      NULL
    END ELSE
      MATREAD INAH.REC FROM INV_AUDIT_HIST, SEL.ID THEN
        ;* find the begining balance
        ;* for the period in which first 
        ;* transaction in select list occurs.
        ;*begining balances set in ENT.BEG.PERIOD are used
        ;*for the cases where there was no activity for the 
        ;*warehouse in the selected period and forward.
        LOCATE INAH.WHSE IN WHSE.ARR<1> SETTING WPOS THEN
          IF WHSE.ARR<2,WPOS>='' THEN
            TMP.KEY=CONO:PROD.SEL:"!":INAH.WHSE:"!":INAH.PERIOD
            GOSUB GET.BEG.BAL
          END
        END ELSE
          TMP.KEY=CONO:PROD.SEL:"!":INAH.WHSE:"!":INAH.PERIOD
          GOSUB GET.BEG.BAL                                           
        END
        IF FOUND.ITB THEN
          WHSE.ARR<2,WPOS>= 'FOUND'
          FOUND.ITB=0
        END
        IF BDATE.SEL # "ALL" THEN
          IF INAH.DATE < BDATE.SEL THEN
            SEL.BBAL.AMT += INAH.EXT.COST
            SEL.BBAL.QTY += INAH.QTY
            SEL.EBAL.QTY += INAH.QTY
            SEL.EBAL.AMT += INAH.EXT.COST
          END ELSE
            GOSUB BUILD.SEL.REC
          END
        END ELSE
          IF INAH.PERIOD < BPER.SEL THEN
            SEL.BBAL.AMT += INAH.EXT.COST
            SEL.BBAL.QTY += INAH.QTY
            SEL.EBAL.QTY += INAH.QTY
            SEL.EBAL.AMT += INAH.EXT.COST
          END ELSE
            GOSUB BUILD.SEL.REC
          END
        END
      END ELSE
        MAT INAH.REC=""
      END
    END
  REPEAT
  LN=1; OLD.START.LINE=0
*
  SEL.BBAL.AMT += BEG.BAL.AMT;  SEL.BBAL.QTY += BEG.BAL.QTY
  SEL.EBAL.AMT += BEG.BAL.AMT;  SEL.EBAL.QTY += BEG.BAL.QTY
*
  TMP=CALC.STK.QTY(SEL.BBAL.QTY,MAT INV.CNV.REC,'','')
  ECD.NUM=7
  SCV.REC(ECD.NUM)<ESN>=OCONV(TMP,ICR.CNV)
  GOSUB ACTION.5
  ECD.NUM=8
  SCV.REC(ECD.NUM)<ESN>=OCONV(SEL.BBAL.AMT, "MD2")
  GOSUB ACTION.5
  GOSUB DISP.LINES
  TMP=CALC.STK.QTY(SEL.EBAL.QTY,MAT INV.CNV.REC,'','')
  ECD.NUM=26
  SCV.REC(ECD.NUM)<ESN>=OCONV(TMP,ICR.CNV)
  GOSUB ACTION.5
  ECD.NUM=27;SCV.REC(ECD.NUM)<1>=OCONV(SEL.EBAL.AMT, ICR.CNV)
  GOSUB ACTION.5
  RETURN
*
**************
BUILD.SEL.REC: 
**************
*
  IF FIRST.TIME THEN
    FIRST.TIME=0
    FIRST.PERIOD=INAH.PERIOD
  END
  IF SUPR.SEL="Y" THEN
    ;*
    ;*---- Summarized detail
    ;*
    THIS.PASS=INAH.SRC:INAH.DATE:INAH.RECP.NO:INAH.DV.DP.CC[1,2]:INAH.WHSE:INAH.LOC:INAH.PERIOD:INAH.TRAN:INAH.OPER.ID
    IF THIS.PASS # PREV.PASS THEN
      LINES += 1
      SEL.SOURCE<LINES>=INAH.SRC
      SEL.DATE<LINES>=INAH.DATE
      SEL.RECP.ID<LINES>=INAH.RECP.NO
      SEL.DIV<LINES>=INAH.DV.DP.CC[1,2]
      SEL.WHSE<LINES>=INAH.WHSE
      SEL.LOC<LINES>=INAH.LOC
      SEL.SERIAL<LINES>=""
      SEL.QTY<LINES>=0
      SEL.COST<LINES>=0
      SEL.PERIOD<LINES>=INAH.PERIOD
      SEL.RECORD<LINES>=INAH.TRAN
      SEL.OPER.ID<LINES>=INAH.OPER.ID
      PREV.PASS=THIS.PASS
    END
    SEL.QTY<LINES> += INAH.QTY
    SEL.COST<LINES> += INAH.EXT.COST
    SEL.EBAL.QTY += INAH.QTY
    SEL.EBAL.AMT += INAH.EXT.COST
  END ELSE
    ;*
    ;*---- Transaction level detail
    ;*
    LINES += 1
    SEL.SOURCE<LINES>=INAH.SRC
    SEL.DATE<LINES>=INAH.DATE
    SEL.RECP.ID<LINES>=INAH.RECP.NO
    SEL.DIV<LINES>=INAH.DV.DP.CC[1,2]
    SEL.WHSE<LINES>=INAH.WHSE
    SEL.LOC<LINES>=INAH.LOC
    IF CATG.TRK.LVL='S' THEN
      SEL.SERIAL<LINES>=INAH.SERIAL
    END
    SEL.QTY<LINES>=INAH.QTY
    SEL.COST<LINES>=INAH.EXT.COST
    SEL.EBAL.QTY += INAH.QTY
    SEL.EBAL.AMT += INAH.EXT.COST
    SEL.PERIOD<LINES>=INAH.PERIOD
    SEL.RECORD<LINES>=INAH.TRAN
    SEL.OPER.ID<LINES>=INAH.OPER.ID
  END
  RETURN
*
*************
DISP.LINES: 
*************
*
  START.LINE=1 + INT((LN-1)/PAGE.SIZE)*PAGE.SIZE
  LAST.LINE=START.LINE + PAGE.SIZE - 1
  IF LAST.LINE > LINES THEN LAST.LINE=LINES
  IF START.LINE=OLD.START.LINE THEN GOTO 7090
  OLD.START.LINE=START.LINE
  CNT=1
  FOR N=START.LINE TO LAST.LINE
    SLN=BEGIN.PAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
    P_X=0 ; P_Y=SLN ; P_VALUE=N "R#3" ; P_OPT="CL"
    P_X := AM:4 ; P_Y := AM:SLN ; P_VALUE := AM:SEL.SOURCE<N> "L#2"
    P_X := AM:7  ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(SEL.DATE<N>,"D2/") "L#8"
    P_X := AM:16 ; P_Y := AM:SLN ; P_VALUE := AM:SEL.RECP.ID<N> "L#9"
    P_X := AM:26 ; P_Y := AM:SLN ; P_VALUE := AM:SEL.DIV<N> "L#3"
    P_X := AM:30 ; P_Y := AM:SLN ; P_VALUE := AM:SEL.WHSE<N> "L#4"
    P_X := AM:35 ; P_Y := AM:SLN ; P_VALUE := AM:SEL.LOC<N> "L#4"
    P_X := AM:40 ; P_Y := AM:SLN ; P_VALUE := AM:SEL.SERIAL<N> "L#15"
    ROND=0.5
    IF SEL.QTY<N> < 0 THEN ROND=-0.5
    P_X := AM:56 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(INT(((SEL.QTY<N>/ICR.DV1) * ICR.MT1) / ICR.DV2 + ROND), ICR.CNV) "MR#11"
    P_X := AM:68 ; P_Y := AM:SLN ; P_VALUE := AM:OCONV(SEL.COST<N>, "MD2") "MR#12"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    P_X=7  ; P_Y=SLN+1 ; P_VALUE=SEL.PERIOD<N> "L#8" ; P_OPT="CL"
    P_X := AM:16 ; P_Y := AM:SLN+1 ; P_VALUE := AM:SEL.RECORD<N> "L#9"
    P_X := AM:26 ; P_Y := AM:SLN+1 ; P_VALUE := AM:SEL.OPER.ID<N> "L#12"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    CNT=CNT + 1
  NEXT N
  FOR M=CNT TO PAGE.SIZE
    SLN=BEGIN.PAGE + LINE.SPACE * MOD(M-1,PAGE.SIZE)
    P_X =0 ; P_Y=SLN ; P_VALUE="" ; P_OPT="CL"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
    P_X =0 ; P_Y=SLN+1 ; P_VALUE="" ; P_OPT="CL"
    CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
  NEXT M
7090*
  RETURN
*
***************
SCROLL: 
***************
*
  BEGIN CASE
    CASE OPTION="S" OR OPTION="SF"
      LN=1 + INT((LN-1)/PAGE.SIZE) * PAGE.SIZE + PAGE.SIZE
      IF LN > LINES THEN LN=1
      GOSUB DISP.LINES
    CASE OPTION="SR"
      LN=1 + INT((LN-1)/PAGE.SIZE) * PAGE.SIZE - PAGE.SIZE
      IF LN < 1 THEN LN=1
      GOSUB DISP.LINES
    CASE OPTION="ST"
      LN=1
      GOSUB DISP.LINES
    CASE OPTION="SB"
      LN=LINES
      GOSUB DISP.LINES
    CASE OPTION[1,1]="S" AND NUM(OPTION[2,99])
      LN.NO=OPTION[2,99] + 0
      IF LN.NO < 1 OR LN.NO > LINES THEN
        ERRMSG="** Invalid selection **"
        GOSUB 91000
      END ELSE
        LN=LN.NO
        GOSUB DISP.LINES
      END
  END CASE
  RETURN
*
**********
ENT.ITEM: 
**********
*
  ECD.NUM=9 ; GOSUB ACTION.4
  BEGIN CASE
    CASE ECD.RET.VALUE="END"
      GOTO 1199
    CASE ECD.RET.VALUE=""
      ECD.NUM=10
      GOSUB ACTION.4
      BEGIN CASE
        CASE ECD.RET.VALUE="END"
          GOTO ENT.ITEM
        CASE ECD.RET.VALUE=""
          GOTO ENT.ITEM
        CASE 1
          GXR.XREF=INVENTORY.XREF
          GXR.FILE=INVENTORY
          GXR.LOC=1
          GXR.TOP.LINE='INVENTORY XREF SEARCH'
          GXR.ID=''
          GXR.SRCH.ID=ECD.RET.VALUE
          CALL GEN.XREF(MAT GEN.XREF.REC,PREFIX)
          GOSUB ACTION.2
          IF GXR.ID='' THEN
            ECD.NUM=10; SCV.REC(ECD.NUM)<1>=''; GOSUB ACTION.5
            GOTO ENT.ITEM
          END ELSE
            MATREAD INV.REC FROM INVENTORY, CONO:GXR.ID ELSE
              ERRMSG='PRODUCT NUMBER ':GXR.ID:' IS MISSING'
              GOSUB 91000
              ECD.NUM=9; SCV.REC(ECD.NUM)<1>=''; GOSUB ACTION.5
              GOTO ENT.ITEM
            END
            PROD.NUM=GXR.ID
            SCV.REC(9)<1>=PROD.NUM
            ECD.NUM=9; GOSUB ACTION.5
            PROD.SEL=PROD.NUM; PROD.DESC.SEL=INV.FULL.DESC
            PROD.EXISTS=1
          END
      END CASE
    CASE 1
      SER.EXISTS=1;RECP.EXISTS=1;PROD.EXISTS=1
      ITEM.NO=ECD.RET.VALUE
* T27366 v
*     MATREAD ISTK.REC FROM INV_SERIAL,CONO:ITEM.NO ELSE SER.EXISTS=0
      MATREAD ISTK.REC FROM INV_SERIAL,CONO:ITEM.NO ELSE
        MATREAD ISTK.REC FROM INV_SERIAL_DELETED,CONO:ITEM.NO ELSE SER.EXISTS=0
      END
* T27366 ^
      MATREAD INVR.REC FROM INV_RECEIPTS,CONO:ITEM.NO ELSE RECP.EXISTS=0
      MATREAD INV.REC FROM INVENTORY, CONO:ITEM.NO ELSE PROD.EXISTS=0
      EXISTS.SUM=SER.EXISTS+RECP.EXISTS+PROD.EXISTS
      BEGIN CASE
        CASE EXISTS.SUM=0
          ERRMSG='PRODUCT, SERIAL, AND RECEIPT ':ITEM.NO:' DOES NOT EXIST.'
          GOSUB 91000
          ECD.NUM=9; SCV.REC(ECD.NUM)<1>=''; GOSUB ACTION.5
          GOTO ENT.ITEM
        CASE EXISTS.SUM=1
          BEGIN CASE
            CASE PROD.EXISTS
              PROD.SEL=ITEM.NO; PROD.DESC.SEL=INV.FULL.DESC
            CASE SER.EXISTS
              PROD.SEL=ISTK.PROD
              SERIAL=ITEM.NO
              INV.ID=CONO:ISTK.PROD
              MATREAD INV.REC FROM INVENTORY,INV.ID ELSE
                ERRMSG="PRODUCT ":ISTK.PROD:" FOR SERIAL ":ITEM.NO:" IS MISSING."
                GOSUB 91000
                ECD.NUM=9; SCV.REC(ECD.NUM)<1>=''; GOSUB ACTION.5    
                GOTO ENT.ITEM                                        
              END
            CASE RECP.EXISTS
              PROD.SEL=INVR.PROD
              RECP=ITEM.NO
              INV.ID=CONO:INVR.PROD
              MATREAD INV.REC FROM INVENTORY,INV.ID ELSE
                ERRMSG="PRODUCT ":INVR.PROD:" FOR RECEIPT ":ITEM.NO:" IS MISSING."
                GOSUB 91000
                ECD.NUM=9; SCV.REC(ECD.NUM)<1>=''; GOSUB ACTION.5    
                GOTO ENT.ITEM                                        
              END
          END CASE
        CASE EXISTS.SUM>1
          ;* ASK WHICH ONE THEY WANT SERIAL,RECEIPT, OR PROD
      END CASE
  END CASE
  ECD.NUM=10; SCV.REC(ECD.NUM)<ECD.SCRN.NO>=PROD.SEL:"- ":INV.FULL.DESC
  GOSUB ACTION.5
  ECD.NUM=31; SCV.REC(ECD.NUM)<ECD.SCRN.NO>=INV.UNIT<1,2>
  GOSUB ACTION.5
  MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE ELSE
    ERRMSG="CATEGORY  ": CONO : INV.LINE :" IS MISSING"
    GOSUB 91000
    ECD.NUM=9; SCV.REC(ECD.NUM)<1>=''
    GOSUB ACTION.5
    GOTO ENT.ITEM
  END
*COPY>ICSBP>INV.UM.CNV
1199*
  RETURN
*
*************
ENT.DIVISION: 
*************
*
  ECD.NUM=20 ; GOSUB ACTION.4
  IF ECD.RET.VALUE='END' THEN RETURN
  IF ECD.RET.VALUE='E'   THEN RETURN
  IF ECD.RET.VALUE='ALL' THEN DIV.SEL=ECD.RET.VALUE; RETURN
  IF ECD.RET.VALUE # "00" THEN
    MATREAD DIV.REC FROM DIVISION, CONO:ECD.RET.VALUE ELSE
      ERRMSG='Invalid Division Number'
      GOSUB 91000; GOTO ENT.DIVISION
    END
  END
  DIV.SEL=ECD.RET.VALUE
  RETURN
*
*******************
ENT.BEG.PERIOD: 
*******************
*
  ECD.NUM=1; GOSUB ACTION.4 
  MAT ITB.REC=""
  IF ECD.RET.VALUE # "" AND ECD.RET.VALUE # "END" THEN
*  SEL.PERIOD=ECD.RET.VALUE
*T28953 v
    IF ECD.RET.VALUE > FR.CURR.PER<1,1> THEN
      ERRMSG='Cannot be later than current ICS Fiscal Period'
      GOSUB 91000
      GOTO ENT.BEG.PERIOD
    END
*T28953 ^
    BPER.SEL=ECD.RET.VALUE
    STMNT='SELECT WAREHOUSE WITH CONO="':CONO:'" '
    IF DIV.SEL # "ALL" AND DIV.SEL THEN
      STMNT := 'AND WITH WHS_DIV="':DIV.SEL:'" '
    END
    EXECUTE STMNT CAPTURING GARBAGE RETURNING ERRORS
    EOF=0
    BEG.BAL.QTY=0
    BEG.BAL.AMT=0
    WHSE.ARR=''
    LOOP
      READNEXT WHSE.KEY ELSE EOF=1
      WHNO=WHSE.KEY[4,99]
    UNTIL EOF DO
      LOCATE WHNO IN WHSE.ARR<1> SETTING WPOS ELSE
        TMP.KEY=CONO:PROD.SEL:'!':WHNO:'!':ECD.RET.VALUE
        GOSUB GET.BEG.BAL
      END
    REPEAT
  END
  RETURN
*
******************
ENT.BEG.DATE: 
******************
*
  ECD.NUM=25
  IF SCV.REC(ECD.NUM)<1>='' THEN SCV.REC(ECD.NUM)<1>="ALL"
  GOSUB ACTION.4 
  BDATE.SEL=SCV.REC(ECD.NUM)<1>
  IF ECD.RET.VALUE # "END" AND ECD.RET.VALUE # "ALL" AND ECD.RET.VALUE # "" THEN
    BDATE.SEL=ECD.RET.VALUE
  END
  IF TRIM(BDATE.SEL)="" THEN BDATE.SEL="ALL"
  RETURN
*
***************
ENT.SOURCE: 
***************
*
  ECD.NUM=2
  IF SCV.REC(ECD.NUM)<1>='' THEN SCV.REC(ECD.NUM)<1>="ALL"
  GOSUB ACTION.4 
  STMT.SOURCE=''
  SOURCE.SEL=SCV.REC(ECD.NUM)<1>
  IF ECD.RET.VALUE # "END" AND ECD.RET.VALUE # "" AND ECD.RET.VALUE # "ALL" THEN
    SOURCE.SEL=ECD.RET.VALUE
    CONVERT "," TO VM IN ECD.RET.VALUE
    SRCX=DCOUNT(ECD.RET.VALUE, VM)
    STMT.SOURCE='AND WITH INAH_SRC='
    FOR II=1 TO SRCX
      IF ECD.RET.VALUE <1,II>="U" THEN
        STMT.SOURCE=STMT.SOURCE : '"U" '
      END ELSE
        LOCATE ECD.RET.VALUE<1,II> IN VALID.SOURCES<1> SETTING POS ELSE
          ERRMSG="INVALID SOURCE ":ECD.RET.VALUE<1,II>
          ECD.NUM=2; SCV.REC(ECD.NUM)<1>=''
          GOSUB ACTION.5
          GOTO ENT.SOURCE
        END
        IF ECD.RET.VALUE<1,II>="SC" THEN
          STMT.SOURCE=STMT.SOURCE : '"':ECD.RET.VALUE<1,II>:'" '
        END ELSE
          STMT.SOURCE=STMT.SOURCE : '"I':ECD.RET.VALUE<1,II>:'" '
        END
      END
    NEXT II
  END
  RETURN
*
*********************
ENT.END.PERIOD: 
*********************
*
  ECD.NUM=3
  IF SCV.REC(ECD.NUM)<1>='' THEN SCV.REC(ECD.NUM)<1>="ALL"
  GOSUB ACTION.4 
  EPER.SEL=SCV.REC(ECD.NUM)<1>
  IF ECD.RET.VALUE # "END" AND ECD.RET.VALUE # "ALL" AND ECD.RET.VALUE # "" THEN
*T28953 v
    IF BPER.SEL # 'ALL' THEN
      IF ECD.RET.VALUE # 'ALL' THEN
        IF ECD.RET.VALUE < BPER.SEL THEN
          ERRMSG = 'Cannot be less than Begin Period ':BPER.SEL
          GOSUB 91000
          SCV.REC(ECD.NUM)<1>=''
          GOTO ENT.END.PERIOD
        END
      END
    END
*T28953 ^
    EPER.SEL=ECD.RET.VALUE
  END
  IF TRIM(EPER.SEL)="" THEN EPER.SEL="ALL"
  RETURN
*
*******************
ENT.END.DATE: 
*******************
*
  ECD.NUM=4
  IF SCV.REC(ECD.NUM)<1>='' THEN SCV.REC(ECD.NUM)<1>="ALL"
  GOSUB ACTION.4 
  EDATE.SEL=SCV.REC(ECD.NUM)<1>
  IF ECD.RET.VALUE # "END" AND ECD.RET.VALUE # "ALL" AND ECD.RET.VALUE # "" THEN
*T28953 v
    IF BDATE.SEL # 'ALL' THEN
      IF ECD.RET.VALUE # 'ALL' THEN
        IF ECD.RET.VALUE < BDATE.SEL THEN
          ERRMSG='Cannot be less than Begin Date ':OCONV(BDATE.SEL,'D2/')
          GOSUB 91000
          SCV.REC(ECD.NUM)<1>=''
          GOTO ENT.END.DATE
        END
      END
    END
*T28953 ^
    EDATE.SEL=ECD.RET.VALUE
  END
  IF TRIM(EDATE.SEL)="" THEN EDATE.SEL="ALL"
  RETURN
*
*******************
ENT.TRAN.TYPE: 
*******************
*
  ECD.NUM=5
  IF SCV.REC(ECD.NUM)<1>='' THEN SCV.REC(ECD.NUM)<1>="B"
  GOSUB ACTION.4 
  STMT.TRANS=''
  IF ECD.RET.VALUE # "END" AND ECD.RET.VALUE # "" THEN
    TRANS.SEL=ECD.RET.VALUE
    BEGIN CASE
      CASE TRANS.SEL # "B"
        STMT.TRANS='AND WITH IN_OUT="':TRANS.SEL:'" '
      CASE 1
        STMT.TRANS=''
    END CASE
  END
  RETURN
*
*************
ENT.S.FLAG: 
*************
*
  IF NOT(SER.EXISTS) THEN
    SER.TRK=""
    ECD.NUM=6
    GOSUB ACTION.4 
    IF CATG.TRK.LVL # "S" THEN
      IF ECD.RET.VALUE = "Y" THEN
        ERRMSG = "THIS ITEM IS NOT SERIALLY TRACKED."
        GOSUB 91000
      END
      ECD.NUM=6; SCV.REC(ECD.NUM)<1>="N"
      GOSUB ACTION.5
      SUPR.SEL="N"
    END ELSE IF ECD.RET.VALUE  # "END" THEN
      SUPR.SEL=ECD.RET.VALUE
    END
  END ELSE
    ECD.NUM=6 ; SCV.REC(ECD.NUM)<1>='N'
    GOSUB ACTION.5
    SUPR.SEL='N'
  END
  RETURN
*
**************
GET.BEG.BAL: 
**************
*
  FOUND.ITB=0
  MATREAD ITB.REC FROM INV_AUDIT_BAL, TMP.KEY THEN
    WHSE.ARR<1,WPOS>=OCONV(TMP.KEY,"G1!1")                     
    WHSE.ARR<2,WPOS>=''
    WHSE.ARR<3,WPOS>=ITB.BEG
    WHSE.ARR<4,WPOS>=ITB.BEG.AMT
    FOUND.ITB=1
  END
  BEG.BAL.QTY=SUM(WHSE.ARR<3>)
  BEG.BAL.AMT=SUM(WHSE.ARR<4>)
  RETURN
*
*************                           
ACTION.1: 
*************                           
*
  ECD.ACTION=1 ; CALL SCRN.EDIT ; RETURN
*************                           
ACTION.2: 
*************                           
  ECD.ACTION=2 ; CALL SCRN.EDIT ; RETURN
*************                           
ACTION.3: 
*************                           
  ECD.ACTION=3 ; CALL SCRN.EDIT ; RETURN
*************                           
ACTION.4: 
*************                           
  ECD.ACTION=4 ; CALL SCRN.EDIT ; RETURN
*************                           
ACTION.5: 
*************                           
  ECD.ACTION=5 ; CALL SCRN.EDIT ; RETURN
*************                           
ACTION.6: 
*************                           
  ECD.ACTION=6 ; CALL SCRN.EDIT ; RETURN
ACTION.7: 
*************                           
  ECD.ACTION=7 ; CALL SCRN.EDIT ; RETURN
**                                      
91000 ERR.TYPE=1;CALL SYSCOM(MAT SYSCOM.REC);RETURN
93000 ERR.TYPE=3;CALL SYSCOM(MAT SYSCOM.REC)
99999 END
