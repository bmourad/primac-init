*COPY>CPYLIB>COM1
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>ICS.CPYLIB>COM.INV.LINK  
*********************************************************************
* REVISION   -[08.0]
* Copyright 1982 by Computer Business Associates (Vercom Software, Inc.)
* SYSTEM     -PRIMAC
* SOURCE     -ICSBP
* PROGRAM    -RECP.QTY.ADJ
* BY         -EDVARD PITKA
* DATE       -06/15/87
* DESCRIPTION-This program used to adjust receipts quantity.
* MOD        -CSF10552 RWW 10.24.89
* MOD        -CSF 11812 RWW 022790
* MOD        -02/18/91-(NA)-Modified to calculate diameter when
*                                 using Barcode Inventory system.
* MOD        -TASK 17919 CLW 10/02/94 Accrual account
* TASK 20080 JR STORE DV DP CC IN ACCRUED.LIAB.HIST
* C26238 GAT 07/16/96 * FIX GLA PROBLEM
*T23278 markt 10/16/1998 * Check for divisional security
*T24814 aron 02/11/2000 * Make Line # 4 digits. Add SCROLL Features.
*T25740 edvard 07/23/2001  Complete rewrite of the program for Rev12.
*T26216 lanny 10/08/2001 * PO.JB.ALOC open qty not being updated.
*T25978 adelgado 02/18/2002 * Add the use of prompts (S,SR,SB,ST).
*T26126 adelgado 03/01/2002 * Implement the LOCKED clause for READU.
*T25740 epitka 04/04/2002 * Rev12
*T26497 adelgado 04/04/2002 * Add validation rule for Inter-Divisional
*                             Whse.
*T26556 adelgado 05/07/2002 * Fix re-display of receipt lines.
*T26821 epitka 08/23/2002 * Up the open qty even if recp. cost adj. was
*                           done on the receipt before the qty. adj.
*C40914 cmykleb 10/17/2002 * Correct problem with "G"enerally tracked
*                            products and prompting...
*C40918 cmykleb 10/18/2002 * Getting error message about qty being lower
*                            than reserved qty when it is not.
*T26938 epitka 10/22/2002 * IF QTY WAS ALLOCATED TO JOB AND ONLY PARTIAL
*                           RECEIPTS WAS DONE AND THEN RECEIPT QTY
*                           ADJUSTMENT PERFORMED ALOOCATION AND OPEN QTY
*                           WOULD NOT BE REDUCED.
*T27408 lross 05/01/2003 * DIFF.QTY IS (-) IF REDUCING RECEIPT, IN REV11
*                          IT WAS (+).
*T27569 thompson 07/16/2003 * PROBLEM WITH POINTER
*T27692 lross 09/10/2003 * Rounding issue and incorrect error msg.
*T27755 lross 10/15/2003 * DIFF.QTY being used incorrectly in PO Resv/
*                          Alloc routine.
*T27990 lross 03/05/2004 * ERRMSG passing in ICS.IWH.SUB.
*T28526 lross 04/18/2005 * Not always calculating Diameter.
*T28681 thompson 09/29/2005 * Fix problem with  Task 27990
*T28779 lross 02/09/2006 * Retain identity of multiple same Prod/Whse
*                          lines.
*T29006 lross 11/01/2006 * VEND.PROD.STATS gets updated prior to other
*                          errors detected and other files not updated.
*********************************************************************
*
*--- INSERT EQUATES
*
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.HIST
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>ICS.CPYLIB>INV.STATS
*COPY>ICS.CPYLIB>INV.CNV
*COPY>ICS.CPYLIB>CATEGORY
**COPY>ICS.CPYLIB>INV.REC.ADJ
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>PO
*COPY>APS.CPYLIB>VEND.STATS
*COPY>APS.CPYLIB>VEND.PO.STATS
*COPY>APS.CPYLIB>VEND.PROD.STATS
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>GEN.XREF
*COPY>CPYLIB>SYSCOM
*COPY>CPYLIB>CHAR
*COPY>POS.CPYLIB>ACCRUED.LIAB.HIST
*COPY>ICS.CPYLIB>INV_SERIAL
*COPY>ICS.CPYLIB>INV_RECEIPTS
*COPY>ICS.CPYLIB>INV_RECP_WHSE
*COPY>ICS.CPYLIB>INV_AUDIT_HIST
*COPY>ICS.CPYLIB>ICS.ID 
*COPY>ICS.CPYLIB>INV.JOB.STATS ;*T26216
*COPY>JCS.CPYLIB>JOB ;*T26216 
*
DEFFUN DIVISION.POSITION(COMP.NO,CONTROL.FILE,DIVISION.CODE)
DEFFUN CURRENT.PERIOD(COMP.NO,CONTROL.FILE,DIV.POS,FISCAL.FLAG)
DEFFUN CALC.DIAM(COST.QTY,STK.QTY,MAT INV.REC)
DEFFUN CALC.STK.QTY(COST.QTY,MAT INV.CNV.REC,LN,ROND)
DEFFUN CALC.COST.QTY(STK.QTY,MAT INV.CNV.REC,LN,ROND)
DEFFUN CALC.EXT.COST(COST.QTY,UNIT.COST,COST.WT,ROND)
OPEN.FLAG=1
*
MAT ORG.IWH.REC=''
*
DIM SAVE.ADJ.REC(10)
EQU SAJ.TOT.QTY     TO SAVE.ADJ.REC(1);* receipt new qty
EQU SAJ.QTY         TO SAVE.ADJ.REC(2);* receipts serial new qty
EQU SAJ.DIAM        TO SAVE.ADJ.REC(3);* receipts serial new diam
EQU SAJ.STK.QTY     TO SAVE.ADJ.REC(4);* receipts serial stk qty
EQU SAJ.PERIOD      TO SAVE.ADJ.REC(5);* posting period
DIM WORK.REC(10) ; MAT WORK.REC=''
EQU WRK.SER         TO WORK.REC(1);* SERIAL NO
EQU WRK.SER.LOC     TO WORK.REC(2);* (LN,S)
EQU WRK.SER.QTY     TO WORK.REC(3);* original recvd qty on the serial
EQU WRK.SER.RSV.QTY TO WORK.REC(4);* reservable qty
EQU WRK.SER.DIAM    TO WORK.REC(5)
EQU WRK.SER.STK.QTY TO WORK.REC(6)
EQU WRK.SER.DEL.FLG TO WORK.REC(7) ;*T27692
VAL.SELS=""
ERRMSG = ""
SYS.TYPE=1
CALL SYSCOM(MAT SYSCOM.REC)
*
*--- OPEN FILES
*
OPEN '','INVENTORY' TO INVENTORY ELSE
  ERRMSG='INVENTORY FILE IS MISSING'; GOTO 93000
END
OPEN '','WAREHOUSE' TO WAREHOUSE ELSE
  ERRMSG='WAREHOUSE FILE IS MISSING'; GOTO 93000
END
OPEN '','CATEGORY' TO CATEGORY ELSE
  ERRMSG='CATEGORY FILE IS MISSING'; GOTO 93000
END
OPEN '','INV.WHSE' TO INV.WHSE ELSE
  ERRMSG='INV.WHSE FILE IS MISSING'; GOTO 93000
END
OPEN '','INV.HIST' TO INV.HIST ELSE
  ERRMSG='INV.HIST FILE IS MISSING'; GOTO 93000
END
OPEN '','INV.WHSE.LOC' TO INV.WHSE.LOC ELSE
  ERRMSG='INV.WHSE.LOC FILE IS MISSING'; GOTO 93000
END
OPEN '','INV_SERIAL' TO INV_SERIAL ELSE
  ERRMSG='INV_SERIAL FILE IS MISSING'; GOTO 93000
END
*T27692 v
OPEN '','INV_SERIAL_DELETED' TO INV_SERIAL_DELETED ELSE
  ERRMSG='INV_SERIAL_DELETED FILE IS MISSING'; GOTO 93000
END
*T27692 ^
OPEN '','INV.STATS' TO INV.STATS ELSE
  ERRMSG='INV.STATS FILE IS MISSING'; GOTO 93000
END
OPEN '','INV_AUDIT_HIST' TO INV_AUDIT_HIST ELSE
  ERRMSG='INV_AUDIT_HIST FILE IS MISSING'; GOTO 93000
END
*OPEN '','INV.REC.ADJ' TO INV.REC.ADJ ELSE
*  ERRMSG='INV.REC.ADJ FILE IS MISSING'; GOTO 93000
*END
OPEN '','PREFIX' TO PREFIX ELSE
  ERRMSG='PREFIX FILE IS MISSING'; GOTO 93000
END
OPEN '','COMPANY' TO COMPANY ELSE
  ERRMSG='COMPANY FILE IS MISSING'; GOTO 93000
END
OPEN '','CONTROL' TO CONTROL ELSE
  ERRMSG='CONTROL FILE IS MISSING'; GOTO 93000
END
OPEN '','SECURITY' TO SECURITY ELSE
  ERRMSG='SECURITY FILE IS MISSING'; GOTO 93000
END
OPEN '','ICS.SCREENS' TO M.SCREENS ELSE
  ERRMSG='ICS.SCREENS FILE IS MISSING'; GOTO 93000
END
OPEN '','INVENTORY.XREF' TO INVENTORY.XREF ELSE
  ERRMSG='INVENTORY.XREF FILE IS MISSING'; GOTO 93000
END
OPEN '','ACCRUED.LIAB.HIST' TO ACCRUED.LIAB.HIST ELSE
  ERRMSG='ACCRUED.LIAB.HIST FILE IS MISSING'; GOTO 93000
END
OPEN '','INV.JOB.STATS' TO INV.JOB.STATS ELSE
  ERRMSG='INV.JOB.STATS FILE IS MISSING'; GOTO 93000
END
OPEN '','JOB' TO JOB ELSE
  ERRMSG = 'JOB FILE IS MISSING'; GOTO 93000 ;*T26216
END
*
*--- GET COMPANY NUMBER
*
MAT COMP.REC=''
CONO=''
CALL GET.CONO(CONO,MAT COMP.REC)
IF CONO='END' THEN GOTO 99999
IF CO.POS="Y" THEN
  OPEN '','PO' TO PO ELSE ERRMSG='PO FILE IS MISSING'; GOTO 93000
END
IF CO.APS.R.INTRF > 1 THEN
  OPEN '','VEND.STATS' TO VEND.STATS ELSE
    ERRMSG='VEND.STATS FILE IS MISSING'; GOTO 93000
  END
  OPEN '','VEND.PO.STATS' TO VEND.PO.STATS ELSE
    ERRMSG='VEND.PO.STATS FILE IS MISSING'; GOTO 93000
  END
  OPEN '','VEND.PROD.STATS' TO VEND.PROD.STATS ELSE
    ERRMSG='VEND.PROD.STATS FILE IS MISSING'; GOTO 93000
  END
END
*
GOSUB INITIALIZE
;*
;* Main Loop
;*
DONE=0
LOOP
  ERR=0 ; ERRMSG=''
  RELEASE
  MAT SCV.REC=""
  ECD.ACTION=6
  CALL SCRN.EDIT
  MAT SAVE.ADJ.REC=""
  LINES=0
  HDR.START=1          ;* T26556
  OLD.HDR.START.LINE=0
  GOSUB ENT.PRODUCT
UNTIL (DONE) DO
  IF PROD#'' THEN
    GOSUB ENT.WHSE
    IF NOT(ERR) THEN
      IWH.ID=CONO:PROD:'!':WHSE.NUM
      MATREADU IWH.REC FROM INV.WHSE,IWH.ID THEN
        DIV.POS=DIVISION.POSITION(CONO,CONTROL,WHS.DIV)
        BEGIN CASE 
          CASE DIV.POS<1,1>=''
            DIV.POS=DIV.POS<1,2>
          CASE DIV.POS<1,1>='-2'
            ERRMSG=DIV.POS<1,2>
            GOTO 93000
        END CASE
        INAH.PROD=PROD
        INAH.WHSE=WHSE.NUM
        ACTION=1; * build INV.WHSE fifo buckets 
        TMP.CNT='' ; LAST='' ; TMP.ARR=''
        PERIOD='' ; *include future posted receipts too.
        MAT ORG.IWH.REC=MAT IWH.REC
*T27990 CALL ICS.IWH.SUB(CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG)
        CALL ICS.IWH.SUB(CONO,PERIOD,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG,ERRMSG)
        IH.ID=CONO : PROD
        MATREADU IH.REC FROM INV.HIST, IH.ID ELSE
          MAT IH.REC=''
        END
        IF IWH.RECP.NO='' THEN
          RELEASE INV.WHSE,IWH.ID
          ERRMSG='NO RECEIPTS LOCATED FOR ':PROD:' IN WAREHOUSE ':WHSE.NUM
          GOSUB 91000
        END ELSE
          LINES=DCOUNT(IWH.RECP.NO,VM)
          LN=1
          GOSUB BUILD.HEADER.SCRN
          GOSUB DISP.HEADER.SCRN
          GOSUB HEADER.PROMPT
        END
      END ELSE
        RELEASE INV.WHSE,IWH.ID
        ERRMSG=IWH.ID:' IS NOT OF FILE. TRY AGAIN !'
        GOSUB 91000
      END
    END
  END
REPEAT
GOTO 99999
*
*************************************************************************
******** S U B R O U T I N E S ******************************************
*************************************************************************
*
****************
HEADER.PROMPT: 
****************
*
MORE=1
LOOP
  ERR=0
  ECD.NUM=5; ECD.MINV=HDR.START
  ECD.MAXV=HDR.START+HDR.PAGE.SIZE
  IF ECD.MAXV>DCOUNT(IWH.RECP.NO,VM) THEN
    ECD.MAXV=DCOUNT(IWH.RECP.NO,VM)
  END
  ECD.ACTION=4
  SCV.REC(ECD.NUM)<1>=''
  CALL SCRN.EDIT
  OPTION=ECD.RET.VALUE
  BEGIN CASE
    CASE OPTION='E' OR OPTION='END'
      RELEASE
      MORE=0
    CASE NUM(OPTION)
      SCV.REC(19)<ESN,LN>="";ECD.NUM=19; ECD.SUB.NUM=LN
      ECD.ACTION=5; CALL SCRN.EDIT
      LN=OPTION
      RECP.NO=IWH.RECP.NO<1,LN>
      INVR.ID=CONO:RECP.NO
      MATREADU INVR.REC FROM INV_RECEIPTS,INVR.ID ELSE
        ERRMSG='INV_RECEIPTS ':INVR.ID:' IS MISSING.'
        GOSUB 93000
      END
      IRW.ID=CONO:RECP.NO:"!":WHSE.NUM
      MATREADU IRW.REC FROM INV_RECP_WHSE,IRW.ID ELSE
        ERRMSG='INV_RECP_WHSE ':IRW.ID:' IS MISSING.'
        GOTO 93000
      END
*T27990 v
      IF INVR.ORG.WHSE # WHSE.NUM THEN
        ERRMSG='Cannot adjust - product moved after receipt!'
        GOSUB 91000
        CONTINUE
      END
*T27990 ^
*26938      BEGIN CASE
*26938        CASE IRW.RSVB.QTY <=0
*26938          ERRMSG="Cannot adjust receipt, entire quantity is either reserved or depleted"
*26938          GOSUB 91000 
*26938        CASE 1
      GOSUB ENT.ADJ.PERIOD
      IF NOT(ERR) THEN
        GOSUB DETAIL.SUB
      END
*26938      END CASE
    CASE OPTION[1,1]='S'
      GOSUB SCROLL.RECEIPTS
    CASE OPTION='F'
      IF SAJ.TOT.QTY # "" THEN GOSUB UPDATE.SUB ; *T28681
      MORE=0
  END CASE
WHILE MORE=1 DO REPEAT
RETURN
*
*****************
ENT.ADJ.PERIOD: 
******************
*
CUR.PERIOD=CURRENT.PERIOD(CONO,CONTROL,DIV.POS,"IC")
BEGIN CASE
  CASE CUR.PERIOD<1,1>=''
    CUR.PERIOD=CUR.PERIOD<1,2>
  CASE CUR.PERIOD<1,1>='-2'
    ERRMSG=CUR.PERIOD<1,2>
    GOSUB 93000
END CASE
EOI=0
LOOP
  PERIOD=''
  ECD.NUM=58 ; ECD.SUB.NUM=LN ; ECD.ACTION=4
  IF SAJ.PERIOD<LN> # "" THEN
    DEFAULT=SAJ.PERIOD<LN>;O.R="O"
  END ELSE
    IF CUR.PERIOD < IWH.RECP.PERIOD<1,LN> THEN
      DEFAULT=IWH.RECP.PERIOD<1,LN>
    END ELSE
      IF IWH.RECP.PERIOD<1,LN><CUR.PERIOD THEN
        DEFAULT=CUR.PERIOD;O.R="O"
      END ELSE
        DEFAULT=IWH.RECP.PERIOD<1,LN>;O.R='O'
      END
    END
  END
  ECD.MINV=DEFAULT ; ECD.MAXV=999999
  ECD.DEFAULT=DEFAULT
  CALL SCRN.EDIT
  BEGIN CASE
    CASE ECD.RET.VALUE='END' OR ECD.RET.VALUE='E'
      EOI=1;ERR=1
      SCV.REC(58)=SAJ.PERIOD<LN>
      ECD.NUM=58;ECD.SUB.NUM=LN;ECD.ACTION=5
      CALL SCRN.EDIT
    CASE 1
      ERR.FLG="";ERRMSG="" 
      CALL CHECK.PERIOD.DATE(CONO,"",ECD.RET.VALUE,DIV.CODE,ERR.FLG,ERRMSG,COMPANY,CONTROL)
      BEGIN CASE 
        CASE ERRMSG="" 
          SAJ.PERIOD<LN>=ECD.RET.VALUE
          EOI=1
        CASE ERR.FLG=0 
          SAJ.PERIOD<LN>=ECD.RET.VALUE
          GOSUB 91000
          EOI=1
        CASE ERR.FLG=1 
          GOSUB 91000
        CASE ERR.FLG=2 
          GOSUB 91000 ; EOI=1 ; ERR=1
      END CASE 
  END CASE
UNTIL (EOI) DO REPEAT
RETURN
*
******************
BUILD.HEADER.SCRN: 
******************
*
RCNT=DCOUNT(IWH.RECP.NO,VM)
S.ORIG=IWH.ORG.FI
S.RSV=IWH.RSV.FI
FOR R=1 TO RCNT
  SCV.REC(11)<ESN,R>=R
  SCV.REC(12)<ESN,R>=OCONV(IWH.RECV.FI<1,R>,"D2/")
  SCV.REC(15)<ESN,R>=OCONV(IWH.COST.FI<1,R>,'MD4')
  TMP=CALC.STK.QTY(S.RSV<1,R>,MAT INV.CNV.REC,'','')
  TMP=OCONV(TMP,ICR.CNV)
  SCV.REC(16)<ESN,R>=TMP
  TMP=CALC.STK.QTY(S.ORIG<1,R>,MAT INV.CNV.REC,'','')
  TMP=OCONV(TMP,ICR.CNV)
  SCV.REC(17)<ESN,R>=TMP
NEXT R
SCV.REC(13)<ESN>=IWH.PO.NO.FI
SCV.REC(57)<ESN>=IWH.RECP.PERIOD
SCV.REC(18)<ESN>=SAJ.TOT.QTY
SCV.REC(19)<ESN>=""
SCV.REC(59)<ESN>=IWH.RECP.NO
SCV.REC(14)<ESN>=IWH.VDR.FI
SCV.REC(58)<ESN>=SAJ.PERIOD
RETURN
*
*****************
DISP.HEADER.SCRN: 
*****************
*
HDR.START=1+INT((HDR.START-1)/HDR.PAGE.SIZE)*HDR.PAGE.SIZE 
ECD.NUM=11;ECD.SUB.NUM=HDR.START;ECD.ACTION=7;CALL SCRN.EDIT
ECD.NUM=12;ECD.SUB.NUM=HDR.START;ECD.ACTION=7;CALL SCRN.EDIT
ECD.NUM=13;ECD.SUB.NUM=HDR.START;ECD.ACTION=7;CALL SCRN.EDIT
ECD.NUM=57;ECD.SUB.NUM=HDR.START;ECD.ACTION=7;CALL SCRN.EDIT
ECD.NUM=15;ECD.SUB.NUM=HDR.START;ECD.ACTION=7;CALL SCRN.EDIT
ECD.NUM=16;ECD.SUB.NUM=HDR.START;ECD.ACTION=7;CALL SCRN.EDIT
ECD.NUM=17;ECD.SUB.NUM=HDR.START;ECD.ACTION=7;CALL SCRN.EDIT
ECD.NUM=18;ECD.SUB.NUM=HDR.START;ECD.ACTION=7;CALL SCRN.EDIT
ECD.NUM=59;ECD.SUB.NUM=HDR.START;ECD.ACTION=7;CALL SCRN.EDIT
ECD.NUM=14;ECD.SUB.NUM=HDR.START;ECD.ACTION=7;CALL SCRN.EDIT
ECD.NUM=58;ECD.SUB.NUM=HDR.START;ECD.ACTION=7;CALL SCRN.EDIT
RETURN
*
****************
SCROLL.RECEIPTS: 
****************
*
BEGIN CASE
  CASE OPTION='S'
    HDR.START=HDR.START+HDR.PAGE.SIZE
    IF HDR.START>LINES THEN HDR.START=1
    GOSUB DISP.HEADER.SCRN
  CASE OPTION='SB'                                       
    LN=LINES                                            
    HDR.START=LINES
    GOSUB DISP.HEADER.SCRN
  CASE OPTION='ST'                                       
    HDR.START=1
    GOSUB DISP.HEADER.SCRN
  CASE OPTION='SR'                                       
    HDR.START=HDR.START-HDR.PAGE.SIZE+1
    IF HDR.START<1 THEN HDR.START=1 
    GOSUB DISP.HEADER.SCRN
END CASE
RETURN
*
********************
DETAIL.SUB: 
********************
*
ERR=0 ; DET.START=1
ECD.NUM=19 ; ECD.SUB.NUM=LN 
SCV.REC(19)<ESN,LN>="<==" ; ECD.ACTION=5 ; CALL SCRN.EDIT
IF SAJ.TOT.QTY<LN>="" THEN
  SAJ.TOT.QTY<LN>=IWH.ORG.FI<1,LN>
END
GOSUB GET.DETAIL.DATA
GOSUB DISP.DETAIL.SCRN
GOSUB DETAIL.PROMPT
IF NOT(ERR) THEN
END
RETURN
*
*******************
GET.DETAIL.DATA: 
*******************
*
SCV.REC(21)<ESN>=''
SCV.REC(22)<ESN>='';SCV.REC(23)<ESN>='';SCV.REC(24)<ESN>=''
SCV.REC(25)<ESN>='';SCV.REC(26)<ESN>=''
SCNT=DCOUNT(IRW.SERIAL.NO,VM)
FOR S=1 TO SCNT
  ISTK.ID=CONO:IRW.SERIAL.NO<1,S>
*T27692 v
  ISTK.FND=1
  WRK.SER.DEL.FLG<LN,S>=0
* MATREAD ISTK.REC FROM INV_SERIAL,ISTK.ID THEN 
  MATREAD ISTK.REC FROM INV_SERIAL,ISTK.ID ELSE 
    ISTK.FND=0
    MATREAD ISTK.REC FROM INV_SERIAL_DELETED,ISTK.ID THEN
      ISTK.FND=1
      WRK.SER.DEL.FLG<LN,S> = 1
    END ELSE ISTK.FND=0
  END
  IF ISTK.FND THEN
*T27692 ^
    WRK.SER<LN,S>=IRW.SERIAL.NO<1,S>
    WRK.SER.LOC<LN,S>=ISTK.LOC
    WRK.SER.QTY<LN,S>=ISTK.ORG.QTY
    WRK.SER.RSV.QTY<LN,S>=ISTK.RSVB.QTY
    WRK.SER.DIAM<LN,S>=ISTK.CUR.DIAM
    WRK.SER.STK.QTY<LN,S>=ISTK.CUR.STK.QTY
    SCV.REC(20)<ESN,S>=S
    SCV.REC(21)<ESN,S>=ISTK.LOC
    IF CATG.TRK.LVL='S' THEN
      SCV.REC(22)<ESN,S>=IRW.SERIAL.NO<1,S>
    END
    DQTY=ISTK.ORG.QTY
    DQTY=CALC.STK.QTY(DQTY,MAT INV.CNV.REC,'','')
    DQTY=OCONV(DQTY,ICR.CNV)
    IF CATG.TRK.LVL='S' THEN
      SCV.REC(23)<ESN,S>=DQTY
      IF (DIA.FLAG) THEN
        SCV.REC(24)<ESN,S>=OCONV(ISTK.ORG.DIAM,'MD2')
        IF SAJ.QTY<LN,S> # '' THEN
          TMP=SAJ.QTY<LN,S>
          TMP=CALC.STK.QTY(TMP,MAT INV.CNV.REC,'','')
          SCV.REC(25)<ESN,S>=OCONV(TMP,ICR.CNV)
          SCV.REC(26)<ESN,S>=OCONV(SAJ.DIAM<LN,S>,"MD2")
        END
      END
    END ELSE
      SCV.REC(22)<ESN,S>=DQTY
      IF SAJ.QTY<LN,S>#'' THEN
        TMP=SAJ.QTY<LN,S>
        TMP=CALC.STK.QTY(TMP,MAT INV.CNV.REC,'','')
        SCV.REC(23)<ESN,S>=OCONV(TMP,ICR.CNV)
      END
    END
  END
NEXT S
RETURN
*
*******************
DISP.DETAIL.SCRN: 
*******************
*
DET.START=1+INT((DET.START-1)/DET.PAGE.SIZE)*DET.PAGE.SIZE  ;* T25978
ECD.NUM=20;ECD.SUB.NUM=DET.START;ECD.ACTION=7;CALL SCRN.EDIT
ECD.NUM=21;ECD.SUB.NUM=DET.START;ECD.ACTION=7;CALL SCRN.EDIT
ECD.NUM=22;ECD.SUB.NUM=DET.START;ECD.ACTION=7;CALL SCRN.EDIT
ECD.NUM=23;ECD.SUB.NUM=DET.START;ECD.ACTION=7;CALL SCRN.EDIT
ECD.NUM=24;ECD.SUB.NUM=DET.START;ECD.ACTION=7;CALL SCRN.EDIT
ECD.NUM=25;ECD.SUB.NUM=DET.START;ECD.ACTION=7;CALL SCRN.EDIT
ECD.NUM=26;ECD.SUB.NUM=DET.START;ECD.ACTION=7;CALL SCRN.EDIT
RETURN
*
**********************
DETAIL.PROMPT: 
**********************
*
EDP=0
LOOP
  ECD.NUM=6 ; ECD.ACTION=4  
  ECD.MINV=DET.START ; ECD.MAXV=DET.START+DET.PAGE.SIZE-1
  ECD.ACTION=4
  SCV.REC(ECD.NUM)<1>=''
  CALL SCRN.EDIT
  REQUEST=ECD.RET.VALUE
  BEGIN CASE
    CASE REQUEST='E' OR REQUEST='END' OR REQUEST=""
      EDP=1 ; ERR=1
    CASE NUM(REQUEST)
      SS=REQUEST
*T27692 v
      IF NOT(WRK.SER.DEL.FLG<LN,SS>) THEN
        GOSUB ENT.ADJUSTMENT
      END ELSE
        ERRMSG='Cannot adjust a completely used serial'
        GOSUB 91000
      END
*T27692 ^
    CASE REQUEST='S'
      DET.START=DET.START+DET.PAGE.SIZE
      IF DET.START>DCOUNT(IRW.SERIAL.NO,VM) THEN DET.START=1
      GOSUB DISP.DETAIL.SCRN
      ;* T25978 v
    CASE REQUEST='SR'
      DET.START -= DET.PAGE.SIZE
      IF DET.START < 1 THEN DET.START=1
      GOSUB DISP.DETAIL.SCRN
    CASE REQUEST='ST'
      DET.START=1
      GOSUB DISP.DETAIL.SCRN
    CASE REQUEST='SB'
      DET.START=DCOUNT(IRW.SERIAL.NO,VM)
      GOSUB DISP.DETAIL.SCRN
      ;* T25978 ^
  END CASE
UNTIL (EDP) DO REPEAT
RETURN
*
****************
ENT.ADJUSTMENT: 
****************
*
ERR=0
IWLO.ID=IWH.ID:"!":WRK.SER.LOC<LN,SS>
MATREAD IWLO.REC FROM INV.WHSE.LOC,IWLO.ID THEN
  IF CATG.TRK.LVL='S' THEN
*T27692 v
    IF NOT(WRK.SER.DEL.FLG<LN,SS>) THEN
      LOCATE WRK.SER<LN,SS> IN IWLO.SERIAL<1>,1 SETTING RLOC ELSE
        ERRMSG="SERIAL ID ":WRK.SER<LN,SS>:" IS MISSING FOR THIS LOCATION ":WRK.SER.LOC<LN,SS>
        GOSUB 91000 ; ERR=1
      END
    END
*T27692 ^
  END
  IF NOT(ERR) THEN
    EOA=0
    LOOP
      GOSUB ENT.ADJ.QTY
      IF NOT(ERR) THEN
        SAJ.TOT.QTY<LN>=""
        FOR S=1 TO SCNT
          IF SAJ.QTY<LN,S>="" THEN
            SAJ.TOT.QTY<LN>+=WRK.SER.QTY<LN,S>
          END ELSE
            SAJ.TOT.QTY<LN>+=SAJ.QTY<LN,S>
          END
        NEXT S
        IF (DIA.FLAG) THEN
          GOSUB GET.DIAM
        END
        IF SAJ.TOT.QTY<LN>="" THEN
          DISP.QTY=''
        END ELSE
          DISP.QTY=CALC.STK.QTY(SAJ.TOT.QTY<LN>,MAT INV.CNV.REC,'','')
          DISP.QTY=OCONV(DISP.QTY,ICR.CNV)
        END
        ECD.NUM=18 ; ECD.SUB.NUM=LN
        SCV.REC(18)<ESN,LN>=DISP.QTY
        ECD.ACTION=5 ; CALL SCRN.EDIT
      END
      IF NOT(ERR) THEN
        EOA=1
      END
    UNTIL (EOA) DO REPEAT
  END
END ELSE
  ERRMSG="LOCATION RECORD IS MISSING FOR THIS PRODUCT"
  GOSUB 91000
END
RETURN
*
*************
ENT.ADJ.QTY: 
*************
*
EOI=0
LOOP
  ERR=0
  IF ICR.CNV # "MD0" THEN
    SCALER=2
  END ELSE
    SCALER=0
  END
  IF SAJ.QTY<LN,SS> # "" THEN
    DEFAULT=SAJ.QTY<LN,SS>
    DEFAULT=CALC.STK.QTY(DEFAULT,MAT INV.CNV.REC,'','')
    DEFAULT=OCONV(DEFAULT,ICR.CNV)
    ECD.DEFAULT=DEFAULT
  END ELSE
    ECD.DEFAULT=''
  END
  IF CATG.TRK.LVL='S' THEN 
    IF (DIA.FLAG) THEN
      ECD.NUM=25
    END ELSE
      ECD.NUM=24
    END
  END ELSE
    ECD.NUM=23
  END
  SCV.REC(ECD.NUM)<ESN,SS>=ECD.DEFAULT
  ECD.SUB.NUM=SS ; ECD.MINV=0; ECD.MAXV=99999999999
  ECD.ACTION=4; CALL SCRN.EDIT
  VALUE=ECD.RET.VALUE
  BEGIN CASE
    CASE VALUE="END"
      IF (DIA.FLAG) AND SAJ.DIAM<LN,SS>='' THEN
        SAJ.QTY<LN,SS>=""
      END
      ERR=1 ; EOI=1 ; EOA=1
    CASE VALUE=""
      SAJ.QTY<LN,SS>=""
      SAJ.DIAM<LN,SS>=""
      ERR=1 ; EOI=1
    CASE 1
      VALUE=ICONV(VALUE,ICR.CNV)
      VALUE=CALC.COST.QTY(VALUE,MAT INV.CNV.REC,'','')
      DISP.VALUE=CALC.STK.QTY(VALUE,MAT INV.CNV.REC,'','')
      DISP.VALUE=OCONV(DISP.VALUE,ICR.CNV)
      SCV.REC(ECD.NUM)<ESN,SS>=DISP.VALUE 
      ECD.SUB.NUM=SS
      ECD.ACTION=5 ; CALL SCRN.EDIT
      IF VALUE>=WRK.SER.QTY<LN,SS> THEN
        SAJ.QTY<LN,SS>=VALUE
        VAL.SELS<LN,SS>=SS
        EOI=1
      END ELSE
        ;* check receipt reserves
        IF SAJ.QTY<LN,SS>="" THEN
          TEMP.QTY=SAJ.TOT.QTY<LN>-WRK.SER.QTY<LN,SS>
          TEMP.QTY +=VALUE-IWH.ORG.FI<1,LN> + IWH.RSV.FI<1,LN>
        END ELSE
          TEMP.QTY=SAJ.TOT.QTY<LN>-SAJ.QTY<LN,SS>
          TEMP.QTY +=(VALUE-IWH.ORG.FI<1,LN>+IWH.RSV.FI<1,LN>)
        END
*T27692 v
        IF (INV.UNIT<1,3>='MSI' AND ABS(TEMP.QTY) <= 50) OR ABS(TEMP.QTY) <= 9 THEN
          VALUE -= TEMP.QTY
          TEMP.QTY = 0
        END
        IF TEMP.QTY < 0 THEN
          DISP.QTY=IWH.RSV.FI<1,LN>
*         DISP.QTY = IWH.ORG.FI<1,LN> - IWH.RSV.FI<1,LN>
          DISP.QTY=CALC.STK.QTY(DISP.QTY,MAT INV.CNV.REC,'','')
          DISP.QTY=OCONV(DISP.QTY,ICR.CNV)
*         ERRMSG="Cannot adjust qty below reserved qty (":DISP.QTY:")"
*         ERRMSG="Cannot adjust below used + reserved qty (":DISP.QTY:")"
          ERRMSG="Cannot adjust qty below reservable qty (":DISP.QTY:")"
          GOSUB 91000 ; ERR=1
        END ELSE
          TOT.LOC.REC=0
          TOT.LOC=0
          TEMP.LOC=WRK.SER.LOC<LN,SS>
          FOR I=1 TO SCNT
            BEGIN CASE
              CASE I=SS
                TOT.LOC=TOT.LOC + VALUE
                TOT.LOC.REC+=WRK.SER.QTY<LN,I>
              CASE TEMP.LOC=WRK.SER.LOC<LN,I>
                IF SAJ.QTY<LN,I>="" THEN
                  TOT.LOC+=WRK.SER.QTY<LN,I>
                END ELSE
                  TOT.LOC+=SAJ.QTY<LN,I>
                END
                TOT.LOC.REC+=WRK.SER.QTY<LN,I>
              CASE 1
            END CASE
          NEXT I
          BEGIN CASE
            CASE TOT.LOC >= TOT.LOC.REC
            CASE TOT.LOC.REC-TOT.LOC <= IWLO.LOC.ON.HAND
            CASE 1
              ERRMSG='Location on-hand cannot be negative.'
              GOSUB 91000 ; ERR=1
          END CASE
          IF NOT(ERR) THEN
            ;*C40918 v
*                    IF WRK.SER.RSV.QTY<LN,SS>-VALUE < 0 THEN
            SEQ.QTY=WRK.SER.RSV.QTY<LN,SS>                               
            SEQ.QTY=CALC.STK.QTY(SEQ.QTY,MAT INV.CNV.REC,'','')
            CHECK.QTY=VALUE-SEQ.QTY
            IF WRK.SER.RSV.QTY<LN,SS> + CHECK.QTY LT 0 THEN
              ;*C40918 ^
              DISP.QTY=WRK.SER.RSV.QTY<LN,SS>                               
              DISP.QTY=CALC.STK.QTY(DISP.QTY,MAT INV.CNV.REC,'','')
              DISP.QTY=OCONV(DISP.QTY,ICR.CNV)                        
              ERRMSG="Cannot adjust qty. below reserved qty (":DISP.QTY:")"
              GOSUB 91000
            END ELSE
              SAJ.QTY<LN,SS>=VALUE
              VAL.SELS<LN,SS>=SS
              EOI=1
            END
          END
        END
      END
  END CASE
UNTIL (EOI) DO REPEAT
RETURN
*
************
GET.DIAM: 
************
*
EOI=0
LOOP
  COST.QTY=SAJ.QTY<LN,SS>
  IF SAJ.STK.QTY<LN,SS>='' THEN SAJ.STK.QTY<LN,SS>=CALC.STK.QTY(COST.QTY,MAT INV.CNV.REC,'','') ;*T28526
  STK.QTY=SAJ.STK.QTY<LN,SS>
  DIAM=""
*  IF CATG.TRK.LVL='S' THEN
  IF (DIA.FLAG) THEN
*    CALL CALC.DIAM(MAT INV.REC,COST.QTY,STK.QTY,DIAM)
    DIAM=CALC.DIAM(COST.QTY,STK.QTY,MAT INV.REC)
  END
  IF DIAM # "" THEN
    EOI=1
    VALUE=DIAM
    ECD.NUM=26 ; ECD.SUB.NUM=SS
    SCV.REC(26)<ESN,SS>=OCONV(VALUE,'MD2')
    ECD.ACTION=5 ; CALL SCRN.EDIT
  END ELSE
    IF SAJ.DIAM<LN,SS> # "" THEN
      DEFAULT=OCONV(SAJ.DIAM<LN,SS>, "MD2")
    END ELSE
      DEFAULT=''
    END
    ECD.DEFAULT=DEFAULT
    ECD.NUM=26 ; ECD.SUB.NUM=SS
    ECD.ACTION=4 ; CALL SCRN.EDIT
    VALUE=ECD.RET.VALUE
  END
  IF VALUE='END' THEN
    ERR=1; EOI=1
  END ELSE
    SAJ.DIAM<LN,SS>=VALUE
    EOI=1
  END
UNTIL (EOI) DO REPEAT
RETURN
*
*************
UPDATE.SUB: 
*************
*
MATREADU INV.STAT.REC FROM INV.STATS, IWH.ID ELSE MAT INV.STAT.REC=""
*T27990 FOR R=1 TO RCNT
FOR R=1 TO RCNT WHILE ERRMSG = ''
  ERRMSG=""
  IF SAJ.TOT.QTY<R> # '' THEN
    INVR.ID=CONO:IWH.RECP.NO<1,R>
    MATREADU INVR.REC FROM INV_RECEIPTS,INVR.ID THEN
      IRW.ID=CONO:IWH.RECP.NO<1,R>:"!":WHSE.NUM
      MATREADU IRW.REC FROM INV_RECP_WHSE,IRW.ID THEN
        IF CO.POS="Y" THEN
          GOSUB CHECK.PO
        END ELSE
          MAT PO.REC=""
          PO.FOUND=0
        END
        SCNT=DCOUNT(IRW.SERIAL.NO,VM) ;*T27692
        DIFFX=0  ;*T26216
        DIFF.ACCUM=0 ;*T29006
        FOR S=1 TO SCNT UNTIL ERRMSG
          MAT INAH.REC=''
          IF SAJ.QTY<R,S> # "" THEN 
            SELTN=VAL.SELS<R,S>
            IWLO.ID=CONO:PROD:"!":WHSE.NUM:"!":WRK.SER.LOC<R,S>
            MATREADU IWLO.REC FROM INV.WHSE.LOC, IWLO.ID THEN
              DIFF.QTY=SAJ.QTY<R,S>-WRK.SER.QTY<R,S>
              DIFFX+=DIFF.QTY
*T27408       IF DIFF.QTY > 0 THEN ROND=.5 ELSE ROND=0
              IF DIFF.QTY > 0 THEN ROND=.5 ELSE ROND=(-.5)
              DIFF.COST=CALC.EXT.COST(DIFF.QTY,IWH.COST.FI<1,R>,INV.COST.WT,ROND)
*T27408 v
*             GL.TOT+=DIFF.COST
              GL.TOT-=DIFF.COST
              IF IWLO.LOC.ON.HAND + DIFF.QTY < 0 THEN
                RELEASE INV.WHSE.LOC,IWLO.ID
                ERRMSG="LOCATION ":WRK.SER.LOC<R,S>:" CANNOT GO NEGATIVE"
                GOSUB 91000
              END ELSE
                LOCATE WRK.SER<R,S> IN IWLO.SERIAL<1>,1  SETTING SLOC ELSE
                  RELEASE INV.WHSE.LOC,IWLO.ID
                  ERRMSG='SERIAL ':WRK.SER<R,S>:' IS MISSING IN LOCATION RECORD. ':IWLO.ID
                  GOSUB 91000
                END
                IF ERRMSG='' THEN
                  ISTK.ID=CONO:WRK.SER<R,S>
                  MATREADU ISTK.REC FROM INV_SERIAL,ISTK.ID THEN
                    IF ISTK.RSVB.QTY+DIFF.QTY < 0 THEN
                      ERRMSG='Tracking unit ':WRK.SER<R,S>:' cannot go negative.'
                      GOSUB 91000
                    END ELSE
                      GOSUB SET.INAH
                      IWH.ORG.FI<1,R>=IWH.ORG.FI<1,R> + DIFF.QTY
                      IWH.RSV.FI<1,R>=IWH.RSV.FI<1,R> + DIFF.QTY
                      IWH.QTY.FI<1,R>=IWH.QTY.FI<1,R> + DIFF.QTY
                      ACTION=2
                      TMP.ARR=WRK.SER<R,S>
*T27990 v             CALL ICS.IWH.SUB(CONO,SAJ.PERIOD<R>,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG)
                      CALL ICS.IWH.SUB(CONO,SAJ.PERIOD<R>,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG,ERRMSG)
                      IF ERRMSG # '' THEN
                        GOSUB 91000
                        ACTION=9
                        CALL ICS.IWH.SUB(CONO,SAJ.PERIOD<R>,TMP.ARR,TMP.CNT,LAST,ACTION,OPEN.FLAG,ERRMSG)
                        CONTINUE
                      END
*T27990 ^
                      ;*
                      IWH.ON.HAND+=DIFF.QTY
                      IH.CNT=DCOUNT(IH.DATE,VM)
                      IDATE=DATE()
                      LOCATE IDATE IN IH.DATE<1> SETTING PP ELSE NULL
                      BEGIN CASE
                        CASE PP=IH.CNT
                          IH.AMOUNT<1,PP>=IH.AMOUNT<1,PP> + DIFF.QTY
                        CASE PP > IH.CNT
                          IH.AMOUNT<1,PP>=IH.AMOUNT<1,PP> + DIFF.QTY
                          IH.DATE<1,PP>=IDATE
                        CASE 1
                          IH.AMOUNT<1,PP>=IH.AMOUNT<1,PP> + DIFF.QTY
                      END CASE
                      IF (PO.FOUND) THEN
                        IWH.ON.ORDER=IWH.ON.ORDER-PO.QTY.OPEN<1,POLN>
                        IF IWH.ON.ORDER < 0 THEN IWH.ON.ORDER=0
                        GOSUB UPD.ISTAT.PO
                        IWH.ON.ORDER=IWH.ON.ORDER + PO.QTY.OPEN<1,POLN>
                        IF IWH.ON.ORDER < 0 THEN IWH.ON.ORDER=0
                      END
*T29006 v The original code was correct. However, we need to move this
*         out of the "S" loop and put it just before the NEXT R loop.
*T28779               IF CO.APS.R.INTRF > 2 THEN 
*                     IF CO.APS.R.INTRF >= 2 AND PO.FOUND THEN 
*                       GOSUB UPD.VEND.STATS
*                     END
*T29006 ^
                    END
                  END
                END
              END
            END ELSE
              RELEASE INV.WHSE.LOC, IWLO.ID
              ERRMSG='Location ':WRK.SER.LOC<R,S>:' is missing for this product.'
              GOSUB 91000
            END
          END
        NEXT S
        IF ERRMSG # '' THEN CONTINUE ;*T27990
        DIFF.ACCUM = DIFFX ;*T29006
*T27692 v Move IF from below
        IF PO.FOUND THEN
*T27569        OVERRECV = PO.TOT.RECEVED<1,PLOC> - PO.TOT.ONORD<1,PLOC>  
*T29006 v OVERRECV = PO.TOT.RECEVED<1,POLN> - PO.TOT.ONORD<1,POLN>   ;*T26569
          OVERRECV = ORIG.PO.TOT.RECEVED - PO.TOT.ONORD<1,POLN>
*T27569        UNDRALOC = PO.TOT.ONORD<1,PLOC> - SUM(PO.JB.ONORD<1,PLOC>)
          UNDRALOC = PO.TOT.ONORD<1,POLN> - SUM(PO.JB.ONORD<1,POLN>) ;*T26569
*       IF PO.FOUND THEN
          GOSUB UPD.ALLOC.RESV
          IF ERRMSG # '' THEN CONTINUE  ;*T28289
          MATWRITE PO.REC ON PO, CONO : INVR.PO
        END
        IF PO.ACCRUE='Y' THEN
          GOSUB UPD.ACCR
        END
*T29006 v The original code was correct. However, we need to move this
*         out of the "S" loop and put it just before the NEXT R loop.
        IF CO.APS.R.INTRF > 2 THEN 
          DIFF.QTY = DIFF.ACCUM
          GOSUB UPD.VEND.STATS
        END
*T29006 ^
      END ELSE
        RELEASE INV_RECP_WHSE,IRW.ID
        ERRMSG= 'INV_RECP_WHSE RECORD ':IRW.ID:' IS MISSING.'
        GOSUB 91000
      END
    END ELSE
      RELEASE INV_RECEIPTS,INVR.ID
      ERRMSG='INV_RECEIPTS RECORD ':INVR.ID:' IS MISSING.'
      GOSUB 91000
    END
  END
NEXT R
*T27990 v
IF ERRMSG = '' THEN
  IF CUR.PERIOD=INAH.PERIOD THEN
    CALL INV.AVG.COST.MAINT(MAT IWH.REC,INV.COST.WT,CUR.PERIOD)
  END
  ACTION=3                                                          
  INAH.PROD=PROD
  INAH.WHSE=WHSE.NUM
*T27990 CALL ICS.IWH.SUB (CONO,'','','','',ACTION,OPEN.FLAG)
  CALL ICS.IWH.SUB (CONO,'','','','',ACTION,OPEN.FLAG,ERRMSG)
  MATWRITE IH.REC ON INV.HIST, IH.ID
  IF ISTAT.PO="" AND ISTAT.JOB="" THEN
    DELETE INV.STATS, IWH.ID
  END ELSE
    MATWRITE INV.STAT.REC ON INV.STATS, IWH.ID
  END
END ELSE RELEASE
*T27990 ^
RETURN
*
**************
SET.INAH: 
**************
*
IF CATG.TYPE="L" OR CATG.TYPE="RL" OR CATG.TYPE="PC" THEN
  INAH.CUR.DIAM=WRK.SER.DIAM<R,S>
  IF INAH.CUR.DIAM<0 THEN INAH.CUR.DIAM=0
  INAH.NEW.DIAM=SAJ.DIAM<R,S>
  IF INAH.NEW.DIAM<0 THEN INAH.NEW.DIAM=0
END
IF CATG.TYPE # "L" THEN
*T27990  INAH.CUR.STK.QTY=WRK.SER.STK.QTY<R,S>
  INAH.CUR.STK.QTY=CALC.STK.QTY(WRK.SER.QTY<R,S>,MAT INV.CNV.REC,'','')
  INAH.NEW.STK.QTY=CALC.STK.QTY(SAJ.QTY<R,S>,MAT INV.CNV.REC,'','')
END
INAH.PROD=PROD
INAH.WHSE=WHSE.NUM
INAH.TYPE='A'
INAH.DATE=TODAY
INAH.SYS.DATE=TODAY
INAH.SYS.TIME=TIME()
INAH.SRC='IQ'
IF PO.ACCRUE='Y' THEN
  INAH.ACCT=CATG.INV
  INAH.ACCR.ACCT= CATG.ACCRU.LIAB
END
INAH.LOC=WRK.SER.LOC<R,S>
INAH.SERIAL=WRK.SER<R,S>
INAH.RECP.NO=IWH.RECP.NO<1,R>
INAH.CUR.QTY=WRK.SER.QTY<R,S>
INAH.NEW.QTY=SAJ.QTY<R,S>
INAH.QTY=INAH.NEW.QTY-INAH.CUR.QTY
INAH.EXT.COST=DIFF.COST
INAH.OPER.ID=@LOGNAME
INAH.UNIT.COST=INVR.UNIT.COST
INAH.PERIOD=SAJ.PERIOD<R>
INAH.DV.DP.CC= DV.DP.CC
INAH.TRAN= INVR.PO
INAH.JOB= INVR.VEND
RETURN
*
**************
CHECK.PO: 
**************
*
PO.FOUND=1
PO.ID=CONO:INVR.PO
MATREADU PO.REC FROM PO,PO.ID THEN
  POLN=INVR.PO.LN
  BEGIN CASE
    CASE PO.PROD.NUM<1,POLN> =''
      PLOC=0
    CASE WHSE.NUM # PO.WHSE<1,POLN>
      PLOC=0
    CASE 1
      PLOC=1
  END CASE
  IF PLOC=0 THEN
    MAT PO.REC=""
    PO.FOUND=0
    RELEASE PO,PO.ID
  END
END ELSE
  PO.FOUND=0
  MAT PO.REC = '' ;*T29006
  POLN=1 ;*T29006
END
*T29006 v
IF POLN # '' THEN
  ORIG.PO.TOT.RECEVED = PO.TOT.RECEVED<1,POLN>
END ELSE ORIG.PO.TOT.RECEVED = 0
*T29006 ^
RETURN
*
***************
UPD.ISTAT.PO: 
***************
*
LOCATE INVR.PO IN ISTAT.PO<1>,1 SETTING SFND ELSE
  ISTAT.PO<1,SFND>=INVR.PO
  ISTAT.PO.VEND<1,SFND>=INVR.VEND
  ISTAT.PO.DATE<1,SFND>=PO.DATE
  ISTAT.PO.QTY<1,SFND>=PO.QTY.OPEN<1,POLN>
  ISTAT.PO.JOB<1,SFND>=""
  ISTAT.PO.JOB.QTY<1,SFND>=""
  ISTAT.PO.JOB.AMT<1,SFND>=""
END
ISTAT.PO.QTY<1,SFND>=ISTAT.PO.QTY<1,SFND>-PO.QTY.OPEN<1,POLN>
IF PO.TOT.RECEVED<1,POLN>+DIFF.QTY<0 THEN
  PO.TOT.RECEVED<1,POLN>=0 
END ELSE 
  PO.TOT.RECEVED<1,POLN>=PO.TOT.RECEVED<1,POLN> + DIFF.QTY 
END
PO.QTY.OPEN<1,POLN>=PO.TOT.ONORD<1,POLN>-PO.TOT.CANCEL<1,POLN>-PO.TOT.RECEVED<1,POLN>
IF PO.QTY.OPEN<1,POLN> < 0 THEN PO.QTY.OPEN<1,POLN>=0
ISTAT.PO.QTY<1,SFND>=ISTAT.PO.QTY<1,SFND> + PO.QTY.OPEN<1,POLN>
IF ISTAT.PO.QTY<1,SFND>=0 THEN
  ISTAT.PO=DELETE(ISTAT.PO,1,SFND,0)
  ISTAT.PO.VEND=DELETE(ISTAT.PO.VEND,1,SFND,0)
  ISTAT.PO.DATE=DELETE(ISTAT.PO.DATE,1,SFND,0)
  ISTAT.PO.QTY=DELETE(ISTAT.PO.QTY,1,SFND,0)
  ISTAT.PO.JOB=DELETE(ISTAT.PO.JOB,1,SFND,0)
  ISTAT.PO.JOB.QTY=DELETE(ISTAT.PO.JOB.QTY,1,SFND,0)
  ISTAT.PO.JOB.AMT=DELETE(ISTAT.PO.JOB.AMT,1,SFND,0)
END
RETURN
*
***************
UPD.VEND.STATS: 
***************
*
VSTAT.ID=CONO : INVR.VEND :"!R"
VPS.ID=VSTAT.ID :"!": INVR.PO
*T28779 VPDS.ID=VPS.ID :"!": PROD : "!": WHSE.NUM
VPDS.ID=VPS.ID :"!": PROD : "!": WHSE.NUM:"@":PO.PROD.SEQ<1,POLN>
MATREADU VPDS.REC FROM VEND.PROD.STATS, VPDS.ID ELSE
  RELEASE VEND.PROD.STATS, VPDS.ID
  MAT VPDS.REC = ''
END
PTR=1
LOOP
  LOCATE IWH.RECV.FI<1,R> IN VPDS.REC.FI.DATE<1>,PTR SETTING DFND ELSE DFND=0
  BEGIN CASE
    CASE DFND=0
      PTR=0
    CASE IWH.COST.FI<1,R> # VPDS.REC.UN.COST<1,DFND>
      PTR=DFND + 1
    CASE VPDS.REC.QTY<1,DFND> + INT(DIFF.QTY/10) LT 0
      PTR=DFND + 1
    CASE 1
      PTR=0
  END CASE
WHILE PTR DO
REPEAT
IF DFND=0 THEN
  RELEASE VEND.PROD.STATS, VPDS.ID
  ERRMSG="Warning Vend.Prod.Stats was not adjusted!"
  GOSUB 91000
END ELSE
  MATREADU VPS.REC FROM VEND.PO.STATS, VPS.ID THEN
    PTR=1
    LOOP
      LOCATE PROD IN VPS.PROD<1>,PTR SETTING PFND ELSE PFND=0
      BEGIN CASE
        CASE PFND=0
          PTR=0
*T28779 CASE WHSE.NUM # VPS.WHSE<1,PFND>
        CASE WHSE.NUM:"@":PO.PROD.SEQ<1,POLN> # VPS.WHSE<1,PFND>
          PTR=PFND + 1
        CASE 1
          PTR=0
      END CASE
    WHILE PTR DO
    REPEAT
    IF PFND=0 THEN
      RELEASE VEND.PO.STATS, VPS.ID
      RELEASE VEND.PROD.STATS, VPDS.ID
    END ELSE
      MATREADU VSTAT.REC FROM VEND.STATS, VSTAT.ID ELSE
        MAT VSTAT.REC=""
      END
      LOCATE INVR.PO IN VSTAT.PO<1>,1 SETTING POFND ELSE POFND=0
      TEMP.AMT=INT(((INVR.UNIT.COST/100) * (VPDS.REC.QTY<1,DFND>/(INV.COST.WT/100)))/100 + .5)
      VPS.REC.AMT<1,PFND>=VPS.REC.AMT<1,PFND>-TEMP.AMT
      VPS.REC.QTY<1,PFND>=VPS.REC.QTY<1,PFND> + INT(DIFF.QTY/10)
      IF POFND THEN
        VSTAT.PO.RECV<1,POFND>=VSTAT.PO.RECV<1,POFND>-TEMP.AMT
      END
      VPDS.REC.QTY<1,DFND>=VPDS.REC.QTY<1,DFND> + INT(DIFF.QTY/10)
      IF VPDS.REC.QTY<1,DFND> < 0 THEN VPDS.REC.QTY<1,DFND>=0
      TEMP.AMT=INT(((IWH.COST.FI<1,R>/100) * (VPDS.REC.QTY<1,DFND>/(INV.COST.WT/100)))/100 + .5)
      VPS.REC.AMT<1,PFND>=VPS.REC.AMT<1,PFND> + TEMP.AMT
      IF VPS.REC.QTY<1,PFND> < 0 THEN
        VPS.REC.QTY<1,PFND>=0
        VPS.REC.AMT<1,PFND>=0
      END ELSE
        IF VPS.REC.AMT<1,PFND> < 0 THEN VPS.REC.AMT<1,PFND>=0
      END
      IF POFND THEN
        VSTAT.PO.RECV<1,POFND>=VSTAT.PO.RECV<1,POFND> + TEMP.AMT
        IF VSTAT.PO.RECV<1,POFND> < 0 THEN VSTAT.PO.RECV<1,POFND>=0
        MATWRITE VSTAT.REC ON VEND.STATS, VSTAT.ID
      END ELSE
        RELEASE VEND.STATS, VSTAT.ID
      END
      MATWRITE VPDS.REC ON VEND.PROD.STATS, VPDS.ID
      MATWRITE VPS.REC ON VEND.PO.STATS, VPS.ID
    END
  END ELSE
    RELEASE VEND.PO.STATS, VPS.ID
    RELEASE VEND.PROD.STATS, VPDS.ID
  END
END
ERRMSG='' ;*T29006
RETURN
*
******************
UPD.ACCR: 
******************
*
IF PO.ACCRUE="Y" THEN
  INAH.ACCR.ACCT=CATG.ACCRU.LIAB
  ;* Upate Accrued Liability History
  READU ALH.CT FROM CONTROL,CONO:"ALHCOUNTER" ELSE ALH.CT=0
  ALH.CT=ALH.CT + 1
  IF ALH.CT > 999999 THEN ALH.CT=1
  WRITE ALH.CT ON CONTROL,CONO:"ALHCOUNTER"
  MAT ALH.REC=""
  ALH.ID=CONO:STR("0",6-LEN(ALH.CT)):ALH.CT
  ALH.DATE=INAH.DATE
  ALH.REF="R*":INVR.PO:"*":PROD 
  ALH.SRC=INAH.SRC
  ALH.MON=INAH.PERIOD
  ALH.AMT=GL.TOT
  GL.TOT=0
*lross 10-24-02  ALH.ACCT=INAH.ACCT
  ALH.ACCT=INAH.ACCR.ACCT
  IF WHS.DIV THEN ALH.DV.DP.CC=WHS.DIV:"00":"000" ELSE ALH.DV.DP.CC = '0000000'
  MATWRITE ALH.REC ON ACCRUED.LIAB.HIST,ALH.ID
END
RETURN
*
*****************
UPD.ALLOC.RESV: 
*****************
*
*T27755 v
IF DIFFX < 0 THEN
* IF OVERRECV < 0 THEN DIFFX+=OVERRECV
  IF OVERRECV > 0 THEN DIFFX+=OVERRECV
* IF UNDRALOC < 0 THEN DIFFX += UNDRALOC
  IF UNDRALOC > 0 THEN DIFFX += UNDRALOC
END
*T27755 ^
JCNT=DCOUNT(PO.JOB.NO<1,POLN>,SM)
WRK.PO.JOB.NO=''; WRK.PO.JB.ONORD=''; WRK.PO.JB.RECEVED=''
WRK.PO.JB.OPEN=''
JJC=0
IF DIFFX+0 # 0 THEN ;*T28289
  IF DIFFX < 0 THEN
    FOR JJ=JCNT TO 1 STEP -1
      JJC += 1
      WRK.PO.JOB.NO<1,1,JJC>=PO.JOB.NO<1,POLN,JJ>
      WRK.PO.JB.ONORD<1,1,JJC>=PO.JB.ONORD<1,POLN,JJ>
      WRK.PO.JB.RECEVED<1,1,JJC>=PO.JB.RECEVED<1,POLN,JJ>
      WRK.PO.JB.OPEN<1,1,JJC>=PO.JB.OPEN<1,POLN,JJ>
    NEXT JJ
    PO.JOB.NO<1,POLN>=WRK.PO.JOB.NO
    PO.JB.ONORD<1,POLN>=WRK.PO.JB.ONORD
    PO.JB.RECEVED<1,POLN>=WRK.PO.JB.RECEVED
    PO.JB.OPEN<1,POLN>=WRK.PO.JB.OPEN
  END
  FOR JLOC=1 TO JCNT
    DIFFY=0
    PJOBNO=PO.JOB.NO<1,POLN,JLOC>
    TQTY=PO.JB.OPEN<1,POLN,JLOC>
    TCOST=IWH.COST.FI<1,R>
*T27755 v In this case Qty is positive so rounding must also be.
* NEW.COST=CALC.EXT.COST(TQTY,TCOST,INV.COST.WT,ROND)
    NEW.COST=CALC.EXT.COST(TQTY,TCOST,INV.COST.WT,+.5)
    LOCATE PJOBNO IN ISTAT.PO.JOB<1,SFND>,1 SETTING SJFND ELSE
      ISTAT.PO.JOB<1,SFND,SJFND>=PJOBNO
      ISTAT.PO.JOB.QTY<1,SFND,SJFND>=PO.JB.OPEN<1,POLN,JLOC>
      ISTAT.PO.JOB.AMT<1,SFND,SJFND>=NEW.COST
    END
    MATREADU INV.JS.REC FROM INV.JOB.STATS, IWH.ID:"!":PJOBNO ELSE
      MAT INV.JS.REC=''
    END
*T27755 v
    HOLD.IJS.RECP.NO = IJS.RECP.NO
    HOLD.IJS.FI.QTY = IJS.FI.QTY
*T27755 ^
    LOCATE INVR.PO IN IJS.PO<1>, 1 SETTING FNDP ELSE
      IJS.PO<1,FNDP>=INVR.PO
      IJS.JOB.ALOC=IJS.JOB.ALOC + PO.JB.OPEN<1,POLN,JLOC>
      IJS.PO.JOB.QTY<1,FNDP>=PO.JB.OPEN<1,POLN,JLOC>
      IJS.PO.JOB.AMT<1,FNDP>=NEW.COST
    END
    MATREADU JOB.REC FROM JOB, CONO:PJOBNO ELSE MAT JOB.REC=''
    PTR=1
    LOOP
      LOCATE PROD IN JOB.RESV.MATL<1>,PTR SETTING MLOC ELSE MLOC=0
      IF MLOC THEN
        IF JOB.RESV.WHSE<1,MLOC>=WHSE.NUM THEN
          PTR=0
        END ELSE
          PTR=MLOC + 1
        END
      END
    WHILE MLOC AND PTR DO REPEAT
    IF MLOC=0 THEN
      MLOC=DCOUNT(JOB.RESV.MATL,VM)+1
      JOB.RESV.MATL<1,MLOC>=PROD
      JOB.RESV.WHSE<1,MLOC>=WHSE.NUM
      JOB.RESV.DATE<1,MLOC>=DATE()
      JOB.ALOC.QTY<1,MLOC>=PO.JB.OPEN<1,POLN,JLOC>
      JOB.RESV.QTY<1,MLOC>=0
      JOB.USED.QTY<1,MLOC>=0
      JOB.ALOC.AMT<1,MLOC>=NEW.COST
      JOB.RESV.AMT<1,MLOC>=0
      JOB.USED.AMT<1,MLOC>=0
    END
    BEGIN CASE
      CASE DIFFX > 0
        IF PO.JB.OPEN<1,POLN,JLOC> >= DIFFX THEN
          PO.JB.RECEVED<1,POLN,JLOC> += DIFFX
          ISTAT.PO.JOB.QTY<1,SFND,SJFND> -= DIFFX
          IJS.PO.JOB.QTY<1,FNDP> -= DIFFX
          IJS.JOB.ALOC -= DIFFX
          TQTY=DIFFX
          TCOST=IWH.COST.FI<1,R>
          NEW.COST=CALC.EXT.COST(TQTY,TCOST,INV.COST.WT,ROND)
          ISTAT.PO.JOB.AMT<1,SFND,SJFND> -= NEW.COST
          IJS.PO.JOB.AMT<1,FNDP> -= NEW.COST
          JOB.ALOC.QTY<1,MLOC> -= DIFFX
          JOB.ALOC.AMT<1,MLOC> -= NEW.COST
          DIFFY=DIFFX
          DIFFX=0
        END ELSE
          IF PO.JB.OPEN<1,POLN,JLOC> > 0 THEN
            DIFFX -= PO.JB.OPEN<1,POLN,JLOC>
*T27755 v
*         DIFFY=PO.JB.OPEN<1,POLN,JLOC> * (-1)
            DIFFY=PO.JB.OPEN<1,POLN,JLOC>
*         PO.JB.RECEVED<1,POLN,JLOC> -= PO.JB.OPEN<1,POLN,JLOC>
            PO.JB.RECEVED<1,POLN,JLOC> += PO.JB.OPEN<1,POLN,JLOC>
            ISTAT.PO.JOB.QTY<1,SFND,SJFND> -= PO.JB.OPEN<1,POLN,JLOC>
            IJS.PO.JOB.QTY<1,FNDP> -= PO.JB.OPEN<1,POLN,JLOC>
            IJS.JOB.ALOC -= PO.JB.OPEN<1,POLN,JLOC>
            TQTY=PO.JB.OPEN<1,POLN,JLOC>
            TCOST=IWH.COST.FI<1,R>
            NEW.COST=CALC.EXT.COST(TQTY,TCOST,INV.COST.WT,ROND)
            ISTAT.PO.JOB.AMT<1,SFND,SJFND> -= NEW.COST
            IJS.PO.JOB.AMT<1,FNDP> -= NEW.COST
            JOB.ALOC.QTY<1,MLOC> -= PO.JB.OPEN<1,POLN,JLOC>
            JOB.ALOC.AMT<1,MLOC> -= NEW.COST
          END
        END
      CASE 1
        IF PO.JB.RECEVED<1,POLN,JLOC> >= ABS(DIFFX)  THEN
          PO.JB.RECEVED<1,POLN,JLOC> += DIFFX
          ISTAT.PO.JOB.QTY<1,SFND,SJFND> -= DIFFX
          IJS.PO.JOB.QTY<1,FNDP> -= DIFFX
          IJS.JOB.ALOC -= DIFFX
          TQTY=DIFFX
          TCOST=IWH.COST.FI<1,R>
          NEW.COST=CALC.EXT.COST(TQTY,TCOST,INV.COST.WT,ROND)
          ISTAT.PO.JOB.AMT<1,SFND,SJFND> -= NEW.COST
          IJS.PO.JOB.AMT<1,FNDP> -= NEW.COST
          JOB.ALOC.QTY<1,MLOC> -= DIFFX
          JOB.ALOC.AMT<1,MLOC> -= NEW.COST
          DIFFY=DIFFX
          DIFFX=0
        END ELSE
          IF PO.JB.RECEVED<1,POLN,JLOC> > 0 THEN
            ISTAT.PO.JOB.QTY<1,SFND,SJFND> += PO.JB.RECEVED<1,POLN,JLOC>
            IJS.PO.JOB.QTY<1,FNDP> += PO.JB.RECEVED<1,POLN,JLOC>
            IJS.JOB.ALOC += PO.JB.RECEVED<1,POLN,JLOC>
            TQTY=PO.JB.RECEVED<1,POLN,JLOC>
            TCOST=IWH.COST.FI<1,R>
*T27755 v NEW.COST=CALC.EXT.COST(TQTY,TCOST,INV.COST.WT,ROND)
            NEW.COST=CALC.EXT.COST(TQTY,TCOST,INV.COST.WT,+.5)
            ISTAT.PO.JOB.AMT<1,SFND,SJFND> += NEW.COST
            IJS.PO.JOB.AMT<1,FNDP> += NEW.COST
            JOB.ALOC.QTY<1,MLOC> += PO.JB.RECEVED<1,POLN,JLOC>
            JOB.ALOC.AMT<1,MLOC> += NEW.COST
*T27755 v DIFFX -= PO.JB.RECEVED<1,POLN,JLOC>
            DIFFX += PO.JB.RECEVED<1,POLN,JLOC>
*T27755 v DIFFY=PO.JB.RECEVED<1,POLN,JLOC>
            DIFFY=PO.JB.RECEVED<1,POLN,JLOC> * (-1)
            PO.JB.RECEVED<1,POLN,JLOC>=0
          END
        END
    END CASE
    PO.JB.OPEN<1,POLN,JLOC>=PO.JB.ONORD<1,POLN,JLOC>-PO.JB.RECEVED<1,POLN,JLOC>
    IF PO.JB.OPEN<1,POLN,JLOC> < 0 THEN PO.JB.OPEN<1,POLN,JLOC>=0
    RESV.QTY=DIFFY
    RESV.ARR=''
*COPY>JCSBP>FIFO.RESV.SUB
*   IF ERRMSG # '' THEN GOSUB 91000
    IF ERRMSG # '' THEN GOSUB 91000; RETURN  ;*T28289
    GOSUB SET.RESERVES
*T27755 v  JOB.RESV.QTY<1,MLOC>+=(DIFFY-RESV.QTY)
    IF DIFFY > 0 THEN TMP = DIFFY - RESV.QTY ELSE TMP = DIFFY + RESV.QTY
    JOB.RESV.QTY<1,MLOC> += TMP
*T27755 ^
    JOB.RESV.AMT<1,MLOC>+=STD.PRICE
    IF JOB.CUST # "" THEN
      JOB.ID=CONO:PJOBNO
      MATWRITE JOB.REC ON JOB,JOB.ID
    END ELSE
      RELEASE JOB,JOB.ID
    END
    IF ISTAT.PO.JOB.QTY<1,SFND,SJFND>=0 THEN
      ISTAT.PO.JOB=DELETE(ISTAT.PO.JOB,1,SFND,SJFND)
      ISTAT.PO.JOB.QTY=DELETE(ISTAT.PO.JOB.QTY,1,SFND,SJFND)
      ISTAT.PO.JOB.AMT=DELETE(ISTAT.PO.JOB.AMT,1,SFND,SJFND)
    END
    IF IJS.PO.JOB.QTY<1,FNDP>=0 THEN
      IJS.PO=DELETE(IJS.PO,1,FNDP,0)
      IJS.PO.JOB.QTY=DELETE(IJS.PO.JOB.QTY,1,FNDP,0)
      IJS.PO.JOB.AMT=DELETE(IJS.PO.JOB.AMT,1,FNDP,0)
    END
    IF IJS.JOB.ALOC+0=0 AND IJS.JOB.QTY+0=0 AND IJS.JOB.USED+0=0 AND IJS.PO="" AND IJS.REQ.QTY+0=0 THEN
      DELETE INV.JOB.STATS, IWH.ID:"!":PJOBNO
      LOCATE PJOBNO IN ISTAT.JOB<1>,1 SETTING ISJ THEN
        ISTAT.JOB=DELETE(ISTAT.JOB,1,ISJ,0)
      END
    END ELSE
      MATWRITE INV.JS.REC ON INV.JOB.STATS , IWH.ID:"!":PJOBNO
    END
  NEXT JLOC
  IF JJC THEN
    JJC=0
    FOR JJ=JCNT TO 1 STEP -1
      JJC += 1
      WRK.PO.JOB.NO<1,1,JJC>=PO.JOB.NO<1,POLN,JJ>
      WRK.PO.JB.ONORD<1,1,JJC>=PO.JB.ONORD<1,POLN,JJ>
      WRK.PO.JB.RECEVED<1,1,JJC>=PO.JB.RECEVED<1,POLN,JJ>
      WRK.PO.JB.OPEN<1,1,JJC>=PO.JB.OPEN<1,POLN,JJ>
    NEXT JJ
    PO.JOB.NO<1,POLN>=WRK.PO.JOB.NO
    PO.JB.ONORD<1,POLN>=WRK.PO.JB.ONORD
    PO.JB.RECEVED<1,POLN>=WRK.PO.JB.RECEVED
    PO.JB.OPEN<1,POLN>=WRK.PO.JB.OPEN
  END
  DIFFX=0
END ;*T28289
RETURN
*                                                         
******************                                        
SET.RESERVES: 
******************                                        
*                                                         
*T27692 v
*RCNT=DCOUNT(IJS.RECP.NO<1>,VM)                         
IRCNT=DCOUNT(IJS.RECP.NO<1>,VM)                         
*FOR RR=1 TO RCNT                                       
*T27755 v
BEGIN CASE
  CASE SUM(IJS.FI.QTY) >= SUM(HOLD.IJS.FI.QTY)
    FOR RR=1 TO IRCNT                                       
      RECP.NO=IJS.RECP.NO<1,RR>                           
      IRW.ID=CONO:RECP.NO:"!":WHSE.NUM
      MATREADU IRW.REC FROM INV_RECP_WHSE_TEMP,IRW.ID ELSE
        MATREADU IRW.REC FROM INV_RECP_WHSE,IRW.ID ELSE  
          MAT IRW.REC=''                                
        END                                              
      END                                                 
      LOCATE RECP.NO IN IWH.RECP.NO<1> SETTING RPOS THEN  
        IRW.RSVB.QTY=IWH.RSV.FI<1,RPOS>                  
        LOCATE PJOBNO IN IRW.JOB<1> SETTING JPOS THEN   
          DIFF=IJS.FI.QTY<1,RR>-IRW.JRSVD.QTY<1,JPOS>   
          IRW.JRSVD.QTY<1,JPOS>=IJS.FI.QTY<1,RR>        
        END ELSE                                         
          IRW.JOB<1,JPOS>=PJOBNO                       
          IRW.JRSVD.QTY<1,JPOS>+=IJS.FI.QTY<1,RR>       
          DIFF=IJS.FI.QTY<1,RR>                      
        END                                           
        MATWRITEU IRW.REC ON INV_RECP_WHSE_TEMP,IRW.ID
        LOCATE IRW.ID IN IID.IRW SETTING JUNK ELSE    
          IID.IRW<1,-1>=IRW.ID                       
        END                                           
      END                                              
    NEXT RR                                             
  CASE 1
    ORCNT=DCOUNT(HOLD.IJS.RECP.NO,VM)
    WORK.IJS.FI.QTY =''
    FOR RR = 1 TO IRCNT
      LOCATE IJS.RECP.NO<1,RR> IN HOLD.IJS.RECP.NO<1>,1 SETTING RRFND THEN
        WORK.IJS.FI.QTY<1,RRFND> = IJS.FI.QTY<1,RR>
      END
    NEXT RR
    FOR RR = 1 TO ORCNT
      RECP.NO=HOLD.IJS.RECP.NO<1,RR>                           
      IRW.ID=CONO:RECP.NO:"!":WHSE.NUM
      MATREADU IRW.REC FROM INV_RECP_WHSE_TEMP,IRW.ID ELSE
        MATREADU IRW.REC FROM INV_RECP_WHSE,IRW.ID ELSE  
          MAT IRW.REC=''                                
        END                                              
      END                                                 
      LOCATE RECP.NO IN IWH.RECP.NO<1> SETTING RPOS THEN  
        IRW.RSVB.QTY=IWH.RSV.FI<1,RPOS>                  
        LOCATE PJOBNO IN IRW.JOB<1> SETTING JPOS THEN   
          DIFF=WORK.IJS.FI.QTY<1,RR>-IRW.JRSVD.QTY<1,JPOS>   
          IRW.JRSVD.QTY<1,JPOS>+=DIFF        
        END ELSE                                         
          IRW.JOB<1,JPOS>=PJOBNO                       
          IRW.JRSVD.QTY<1,JPOS>+=WORK.IJS.FI.QTY<1,RR>       
        END                                           
        MATWRITEU IRW.REC ON INV_RECP_WHSE_TEMP,IRW.ID
        LOCATE IRW.ID IN IID.IRW SETTING JUNK ELSE    
          IID.IRW<1,-1>=IRW.ID                       
        END                                           
      END                                              
    NEXT RR                                             
END CASE
*T27755 ^
RETURN                                              
*
****************
GET.QTY.TYPE: 
****************
*
MAIN.HEAD=CL:'Ln Loc  '
H1="Ln"
H2="Loc"
H3="Serial Number"
H4=""
H5=""
H6=""
H7=""
REC.QTY.HEAD='Rec Qty ':INV.UNIT<1,2> "L#3"
ADJ.QTY.HEAD='New Qty ':INV.UNIT<1,2> "L#3"
DIA.FLAG=0
*COPY>ICSBP>INV.UM.CNV
BEGIN CASE
  CASE INV.UNIT<1,2>='SHT' AND INV.UNIT<1,3>='LBS'
    H4=REC.QTY.HEAD
    H5=ADJ.QTY.HEAD
  CASE INV.UNIT<1,2>='PC' AND INV.UNIT<1,3>='MSI'
    H4=REC.QTY.HEAD
    H5=ADJ.QTY.HEAD
  CASE INV.UNIT<1,2>='FT' AND INV.UNIT<1,3>='MSI'
    H4=REC.QTY.HEAD
    H5=ADJ.QTY.HEAD
  CASE 1
*T28526 v Move below out of this CASE group.
END CASE
    BEGIN CASE
      ;*C40914 v
*           CASE INV.PAP.TYPE="ROLL" OR INV.PAP.TYPE="LROLL" OR INV.PAP.TYPE="PCOAT"
      CASE INV.PAP.TYPE="ROLL" OR INV.PAP.TYPE="LROLL" OR INV.PAP.TYPE="PCOAT" AND CATG.TRK.LVL="S"
        ;*C40914 ^
        DIA.FLAG=1
        H4=REC.QTY.HEAD
        H5='Diameter'
        H6=ADJ.QTY.HEAD
        H7='Diameter'
      CASE 1
        H4=REC.QTY.HEAD
        H5=ADJ.QTY.HEAD
    END CASE
*T28516 END CASE
RETURN
*
****************
DISPLAY.HEADING: 
****************
*
ECD.NUM=50;SCV.REC(50)<ESN>=H1;ECD.ACTION=5;CALL SCRN.EDIT
ECD.NUM=51;SCV.REC(51)<ESN>=H2;ECD.ACTION=5;CALL SCRN.EDIT
IF CATG.TRK.LVL='S' THEN
  ECD.NUM=52;SCV.REC(52)<ESN>=H3;ECD.ACTION=5;CALL SCRN.EDIT
  ECD.NUM=53;SCV.REC(53)<ESN>=H4;ECD.ACTION=5;CALL SCRN.EDIT
  ECD.NUM=54;SCV.REC(54)<ESN>=H5;ECD.ACTION=5;CALL SCRN.EDIT
  ECD.NUM=55;SCV.REC(55)<ESN>=H6;ECD.ACTION=5;CALL SCRN.EDIT
  ECD.NUM=56;SCV.REC(56)<ESN>=H7;ECD.ACTION=5;CALL SCRN.EDIT
END ELSE
  ECD.NUM=52;SCV.REC(52)<ESN>=H4;ECD.ACTION=5;CALL SCRN.EDIT
  ECD.NUM=53;SCV.REC(53)<ESN>=H5;ECD.ACTION=5;CALL SCRN.EDIT
END
RETURN
*
*************
ENT.WHSE: 
*************
*
EOI=0
LOOP
  ECD.NUM=3
  IF WHSE.CNT=1 THEN
    WHSE.NUM=INV.WHSE.CODE<1,1>
    ECD.RET.VALUE=INV.WHSE.CODE<1,1>
    SCV.REC(ECD.NUM)<1>=WHSE.NUM
    ECD.ACTION=5
    CALL SCRN.EDIT
  END ELSE
    ECD.HMSG='WAREHOUSE-' : INV.WHSE.CODE<1,1>
    II=1
    FOR I=2 TO WHSE.CNT
      IF LEN(ECD.HMSG<1,1,II>) + LEN(INV.WHSE.CODE<1,I>) + 3 > 75 THEN
        II=II + 1
        ECD.HMSG<1,1,II>='WAREHOUSE-':INV.WHSE.CODE<1,I>
      END ELSE
        ECD.HMSG<1,1,II>=ECD.HMSG<1,1,II>:' , ':INV.WHSE.CODE<1,I>
      END
    NEXT I
    ECD.ACTION=4
    CALL SCRN.EDIT
  END
  IF ECD.RET.VALUE # 'END' THEN 
    ;* T26497 v
    IF CO.INTR.WHSE # '' AND ECD.RET.VALUE=CO.INTR.WHSE THEN
      ERRMSG='CAN NOT APPLY, USING AN INTER-DIVISIONAL WHSE IS RESTRICTED'
      GOSUB 91000 ; CONTINUE
    END
    ;* T26497 ^
    WHSE.NUM=ECD.RET.VALUE
    LOCATE WHSE.NUM IN INV.WHSE.CODE<1>,1 SETTING FND THEN
      WHSE.ID=CONO:WHSE.NUM
      MATREAD WHSE.REC FROM WAREHOUSE,WHSE.ID THEN
        IF WHS.DIV="" THEN WHS.DIV=GEN.DIV  
        DIV.CODE=WHS.DIV; USER.ID=UPCASE(@LOGNAME); ERRMSG=''
        DV.DP.CC=WHS.DIV:GEN.DEPT:GEN.CCTR    
        CALL CK.DIV.SEC.SUB(CONO,DIV.CODE,USER.ID,ERRMSG)
        IF ERRMSG # '' THEN
          GOSUB 91000
        END ELSE
          EOI=1
        END
      END ELSE
        ERRMSG='RECORD FOR WAREHOUSE ':WHSE.NUM:' IS MISSING.'
        GOSUB 91000
      END
    END ELSE
      ERRMSG="INVALID WAREHOUSE FOR THIS PRODUCT"
      GOSUB 91000
    END
  END ELSE
    ERR=1
    EOI=1
  END
UNTIL (EOI) DO REPEAT
RETURN
*
**************
ENT.PRODUCT: 
**************
*
EOI=0
LOOP
  ECD.NUM=1
  ECD.VALDAT.CODE=5             ;* T26126
  ECD.VALDAT.FILE=INVENTORY
  ECD.PREFIX.ID=CONO
  ECD.ACTION=4
  CALL SCRN.EDIT
  BEGIN CASE
    CASE ECD.RET.VALUE='END'
      EOI=1
      DONE=1
      ERRMSG=1
    CASE ECD.RET.VALUE # '' AND ECD.VALDAT.ITEM # ''
      PROD=ECD.RET.VALUE
      FOR I=1 TO INV.REC.SIZE
        INV.REC(I)=ECD.VALDAT.ITEM<I>
      NEXT I
      ECD.NUM=2
      SCV.REC(ECD.NUM)<1>=INV.FULL.DESC
      ECD.ACTION=5
      CALL SCRN.EDIT
    CASE 1
      ECD.NUM=2
      SCV.REC(ECD.NUM)<1>=''
      CALL SCRN.EDIT
      IF ECD.RET.VALUE # '' AND ECD.RET.VALUE # 'END' THEN 
        SCV.REC(ECD.NUM)<1>=''
        GXR.ID=''
        GXR.SRCH.ID=ECD.RET.VALUE
        CALL GEN.XREF(MAT GEN.XREF.REC,PREFIX)
        ECD.ACTION=2
        CALL SCRN.EDIT
        ECD.ACTION=3
        CALL SCRN.EDIT
        IF GXR.ID#'' THEN
          MATREAD INV.REC FROM INVENTORY, CONO:GXR.ID THEN
            EOI=1
            PROD=GXR.ID
            ECD.NUM=1
            SCV.REC(ECD.NUM)<1>=PROD
            ECD.ACTION=5
            CALL SCRN.EDIT
            ECD.NUM=2
            SCV.REC(ECD.NUM)<1>=INV.FULL.DESC
            ECD.ACTION=5
            CALL SCRN.EDIT
          END ELSE
            ERRMSG='CANNOT LOCATE PRODUCT-':GXR.ID
            GOSUB 91000
          END
        END
      END ELSE
        ERRMSG=1
      END
  END CASE
  IF NOT(ERRMSG) THEN
    IF INV.WHSE.CODE # '' THEN
      CATG.ID=CONO:INV.LINE
      MATREAD CATG.REC FROM CATEGORY,CATG.ID THEN
        IF CATG.MAJ.LINE='FNGD'  THEN
          ERRMSG="USE FINISHED GOOD RECEIPT ADJUSTMENT FOR THIS PRODUCT"
          GOSUB 91000 ; ERR=1
        END ELSE
          EM=''
          IF CATG.INV='' THEN EM='INVENTORY A/C'
          IF CATG.ACCRU.LIAB='' THEN
            IF EM # '' THEN EM=EM:' AND'
            EM=EM:' ACCRUED LIABILITY A/C'
          END
          IF EM # '' THEN
            ERRMSG=EM:' NOT SET UP FOR PRODUCT LINE ':INV.LINE
            ECD.ACTION=99 ; CALL SCRN.EDIT
            GOTO 93000
          END ELSE
            WHSE.CNT=DCOUNT(INV.WHSE.CODE,VM)
            IF INV.COST.WT + 0=0 THEN INV.COST.WT=100
            IF INV.SBR + 0=0 THEN INV.SBR=1
            GOSUB GET.QTY.TYPE
            GOSUB DISPLAY.HEADING
            EOI=1
          END
        END
      END ELSE
        ERRMSG='CANNOT LOCATE PRODUCT LINE-':INV.LINE
        GOSUB 91000
      END
    END ELSE
      ERRMSG='PRODUCT (':PROD:') IS NOT SETUP IN ANY WAREHOUSE'
      GOSUB 91000
    END
  END
UNTIL (EOI) DO REPEAT
RETURN
*
*******************
INITIALIZE: 
*******************
*
READ DIVISION.REC FROM CONTROL, CONO:"DIVISIONS" ELSE
  ERRMSG="DIVISIONS CONTROL FILE RECORD IS MISSING"; GOTO 93000
END
READ SECURITY.REC FROM CONTROL, CONO:"DIV.SECURITY" ELSE
  ERRMSG="DIV.SECURITY CONTROL FILE RECORD IS MISSING"; GOTO 93000
END
GEN.DIV="00";GEN.DEPT="00";GEN.CCTR="000" 
OPTION=''
REQUEST=""
HDR.START=1 ; DET.START=1
HDR.PAGE.SIZE=3; DET.PAGE.SIZE=3
MAT EDIT.COM.DRIVER=''
ECD.SCRN.CNT=1
ECD.SCRN.NAME<1>='RECP.QTY.ADJ'
ECD.ACTION=1
CALL SCRN.EDIT
ECD.SCRN.NO=1 ; ESN=1
EQU ESN TO ECD.SCRN.NO
MAT GEN.XREF.REC=''
GXR.CO=CONO
GXR.TOP.LINE='INVENTORY XREF SEARCH'
GXR.HEADING<1,1>='PRODUCT NUMBER'
GXR.HEADING<1,2>='FULL DESCRIPTION'
GXR.ATT<1,1>=0
GXR.ATT<1,2>=2
GXR.LEN<1,1>=15
GXR.LEN<1,2>=45
GXR.LOC=1
GXR.FILE=INVENTORY
GXR.XREF=INVENTORY.XREF
TODAY=DATE()
MAT SCV.REC=""
ECD.ACTION=2
CALL SCRN.EDIT
OPER.ID=@LOGNAME
GL.TOT=0
RETURN
*
*--- ERROR ROUTINE
*
91000*
ERR.TYPE=1
CALL SYSCOM(MAT SYSCOM.REC)
RETURN
92000*
ERR.TYPE=2
CALL SYSCOM(MAT SYSCOM.REC)
RETURN
93000*
ERR.TYPE=3
CALL SYSCOM(MAT SYSCOM.REC)
99999*
END
