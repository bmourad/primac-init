   SUBROUTINE JANUS.PHY.UPDATE(CONO, MAT INT.REC, INTERMEC.ID, PHY.XREF, INTERMEC.ERRS) 
*********************************************************************
*
* REVISION - [12.0]
*
* PROGRAM  - JANUS.PHY.UPDATE
*
* AUTHOR   - ALEJANDRO DELGADRO
*
* DATE     - 08/12/2002
*
* DESCRIPTION
*
* This program will process transactions received from the handheld
* bar code reader & read from the INTERMEC.TRAN file for Physical Inv Adj.
*
*T25934 adelgado 07/01/2002 * Allow Physical Inventory through Intermec
*                             Guns
*T27069 epitka 12/18/2002 * Allow use of diameter in physical inventory.
*T27904 cmykleb 04/09/2004 * Rev12 upgrade.
*T29032 cmyklebu 12/29/2006 * Move pgm from rev12 to rev14.
*********************************************************************
*COPY>CPYLIB>COM1
*COPY>ICS.CPYLIB>COM.INV.MAIN  
*COPY>ICS.CPYLIB>COM.INV.SERIAL
*COPY>ICS.CPYLIB>COM.INV.LINK  
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>EMPLOYEE
*COPY>PMC.CPYLIB>DIVISION
*COPY>ICS.CPYLIB>WAREHOUSE
*COPY>ICS.CPYLIB>INVENTORY
*COPY>ICS.CPYLIB>INV.WHSE
*COPY>ICS.CPYLIB>INV.WHSE.LOC
*COPY>ICS.CPYLIB>INV_SERIAL
*COPY>ICS.CPYLIB>INV_RECEIPTS
*COPY>ICS.CPYLIB>CATEGORY
*COPY>ICS.CPYLIB>INV.CNV
*COPY>ICS.CPYLIB>PHY.INV
*COPY>ICS.CPYLIB>DAILY_TRANSFER
*COPY>ICS.CPYLIB>TRANSFER
*COPY>ICS.CPYLIB>INTERMEC.TRAN 
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
   ROND='' ; POS=''
   DEFFUN CALC.COST.QTY(STK.QTY,MAT INV.CNV.REC,ROND,POS)
   DEFFUN CALC.STK.QTY(CST.QTY,MAT INV.CNV.REC,ROND,POS) ;*27069
   DEFFUN CALC.DIAM(COST.QTY,STK.QTY,MAT INV.REC)
   GEN.DIV = '00'
   DIM SAVE.PHYSI.REC(PHYSI.REC.SIZE)
   PHY.ID = CONO:Intermec.SEQ.NO
   BAD.TRANS = 0 ; DIAM = ''
   TEMP.PROD = '' ; TEMP.SERIAL = '' ; TEMP.RECP.NO = ''
   RECEIPT.ID = '' ; SERIAL.ID = '' ; PROD.ID = ''
   GOSUB VALIDATE.TRANS
   IF (BAD.TRANS) THEN RETURN
   GOSUB PROCESS.TRANS
   RELEASE PHY.INV, PHY.ID
   RETURN
*
****************
VALIDATE.TRANS: 
****************
*
   IF Intermec.SRP = '' THEN
      ERRMSG = 'BLANK SERIAL/RECEIPT/PRODUCT ENTERED FOR PHYSICAL JANUS UPDATE'
      GOSUB 9000 ; RETURN
   END
   ;*27069  IF Intermec.QTY = '' THEN
   ;*27069    ERRMSG = 'BLANK QUANTITY ENTERED FOR PHYSICAL JANUS UPDATE'
   ;*27069    GOSUB 9000 ; RETURN
   ;*27069  END
   MATREADU PHYSI.REC FROM PHY.INV,PHY.ID ELSE
      RELEASE
      ERRMSG = " PHY.INV RECORD MISSING FOR ":PHY.ID:" IN JANUS UPDATE"
      GOSUB 9000 ; RETURN
   END
   GOSUB VALIDATE.ITEM
   IF BAD.TRANS = 1 THEN RETURN
***COPY>ICSBP>INV.UM.CNV
*******
* COST TO STOCK = INT(((COST.QTY/ICR.DV1)*ICR.MT1)/ICR.DV2+.5)
* STOCK TO COST = INT(((STOCK.QTY/ICR.MT1)*ICR.DV1)*ICR.DV2+.5)
*
   MAT INV.CNV.REC = ""
   BEGIN CASE
      CASE INV.UNIT<1,2> = "SHT" AND INV.UNIT<1,3> = "LBS"
         ICR.CNV = "MD0"; ICR.CNV1 = "MD0,"
         ICR.DV1 = INV.M.WT; ICR.MT1 = 1; ICR.DV2 = 1
         ICR.TYPE = 3; ICR.SCAL = 0
      CASE INV.UNIT<1,2> = "PC" AND INV.UNIT<1,3> = "MSI"
         ICR.CNV = "MD0"; ICR.CNV1 = "MD0,"
         ICR.DV1 = INV.PAP.WIDTH/100; ICR.MT1 = 10; ICR.DV2 = 1
         ICR.TYPE = 3; ICR.SCAL = 0
      CASE INV.UNIT<1,2> = "FT" AND INV.UNIT<1,3> = "MSI"
         ICR.CNV = "MD0"; ICR.CNV1 = "MD0,"
         ICR.DV1 = INV.PAP.WIDTH/100; ICR.MT1 = 100; ICR.DV2 = 12
         ICR.TYPE = 3; ICR.SCAL = 0
      CASE INV.M.LINE = "FNGD"
         ICR.CNV = "MD0"; ICR.CNV1 = "MD0,"
         ICR.DV1 = 1; ICR.MT1 = 1; ICR.DV2 = 1000
         ICR.TYPE = 3; ICR.SCAL = 0
      CASE 1
         ICR.CNV = "MD2"; ICR.CNV1 = "MD2,"
         ICR.DV1 = 10; ICR.MT1 = 1; ICR.DV2 = 1
         ICR.TYPE = 4; ICR.SCAL = 2
   END CASE
*
   IF INV.COST.WT + 0 = 0 THEN INV.COST.WT = 100 
*******
   GOSUB VALIDATE.QTY
   RETURN
*
***************
VALIDATE.ITEM: 
***************
*
   FOUND = 0
   ;*   FIRST CHECK RECEIPT
   MATREAD INVR.REC FROM INV_RECEIPTS, CONO:Intermec.SRP THEN
      MATREAD INV.REC FROM INVENTORY, CONO:INVR.PROD THEN
         MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE THEN
            BEGIN CASE
               CASE CATG.TRK.LVL = 'R'
                  RECEIPT.ID = Intermec.SRP
                  TEMP.PROD = INVR.PROD
                  FOUND = 1
               CASE CATG.TRK.LVL = 'G'
                  ERRMSG = 'RECEIPT ENTERED, REQUIRES A PRODUCT NO. FOR GENERALLY TRACKED ITEM'
                  GOSUB 9000 ; RETURN
               CASE CATG.TRK.LVL = 'S'
                  ERRMSG = 'RECEIPT ENTERED, REQUIRES A SERIAL NO. FOR SERIALLY TRACKED ITEM'
                  GOSUB 9000 ; RETURN
            END CASE
         END
      END
   END
   ;*   CHECK PRODUCT
   IF FOUND  = 0 THEN
      MATREAD INV.REC FROM INVENTORY, CONO:Intermec.SRP THEN
         MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE THEN
            BEGIN CASE
               CASE CATG.TRK.LVL = 'R'
                  ERRMSG = 'PRODUCT ENTERED, REQUIRES A RECEIPT NO. FOR RECEIPT TRACKED ITEM'
                  GOSUB 9000 ; RETURN
               CASE CATG.TRK.LVL = 'S'
                  ERRMSG = 'PRODUCT ENTERED, REQUIRES A SERIAL NO. FOR SERIALLY TRACKED ITEM'
                  GOSUB 9000 ; RETURN
               CASE CATG.TRK.LVL = 'G'
                  PROD.ID = Intermec.SRP
                  FOUND = 1
                  TEMP.PROD = PROD.ID
            END CASE
         END ELSE
            ERRMSG = 'PRODUCT ENTERED, INVALID CATEGORY'
            GOSUB 9000 ; RETURN
         END
      END
   END
   ;*   NEXT CHECK SERIAL
   IF FOUND = 0 THEN
      MATREAD ISTK.REC FROM INV_SERIAL, CONO:Intermec.SRP THEN
         IF ISTK.POST.DATE = "" THEN
            ERRMSG = 'SERIAL ENTERED HAS NOT BEEN RECEIVED INTO INVENTORY'
            GOSUB 9000 ; RETURN
         END ELSE
            MATREAD INV.REC FROM INVENTORY, CONO:ISTK.PROD THEN
               MATREAD CATG.REC FROM CATEGORY, CONO:INV.LINE THEN
                  BEGIN CASE
                     CASE CATG.TRK.LVL = 'R'
                        ERRMSG = 'SERIAL ENTERED, REQUIRES A RECEIPT NO. FOR RECEIPT TRACKED ITEM'
                        GOSUB 9000 ; RETURN
                     CASE CATG.TRK.LVL = 'G'
                        ERRMSG = 'SERIAL ENTERED, REQUIRES A PRODUCT NO. FOR GENERALLY TRACKED ITEM'
                        GOSUB 9000 ; RETURN
                     CASE CATG.TRK.LVL = 'S'
                        SERIAL.ID = Intermec.SRP
                        FOUND = 1
                        TEMP.PROD = ISTK.PROD
                  END CASE
               END
            END
         END
      END
   END
   IF FOUND = 0 THEN
      ERRMSG = 'INVALID SERIAL/RECEIPT/PRODUCT ENTERED FOR JANUS UPDATE'
      GOSUB 9000
   END ELSE
      ;*27069 v
      IF Intermec.QTY='' THEN
         IF INV.PAP.TYPE='ROLL' OR INV.PAP.TYPE='LROLL' OR INV.PAP.TYPE='PCOAT' THEN
            IF Intermec.DIA # '' THEN
               DIAM=Intermec.DIA
               DIAM = ICONV(DIAM,'MD2') ; * T27904
*T27904 v
*              CALL CALC.QTY.FROM.DIAM(COST.QTY,DIAM,MAT INV.CNV.REC,MAT INV.REC)
               INV.UOM.STK = INV.UNIT<1,2>
               BEGIN CASE
                  CASE INV.PAP.TYPE = "ROLL"
                     STK.QTY = (((DIAM/100*DIAM/100)-(INV.CORE.DIA/100*INV.CORE.DIA/100))*100)
                     STK.QTY = INT((STK.QTY/100)*(INV.PAP.WIDTH/10000)*(INV.FACTOR/10000)/10*100+0.5)
                  CASE INV.PAP.TYPE = "LROLL" OR INV.PAP.TYPE = "PCOAT"
                     STK.QTY = (((DIAM/100*DIAM/100)-(INV.CORE.DIA/100*INV.CORE.DIA/100))*100)
                     BEGIN CASE
                        CASE INV.UOM.STK = "FT"
                           STK.QTY = INT((STK.QTY/100)*3.1416/4*(100000/INV.FACTOR)/12+0.5)
                        CASE INV.UOM.STK = "PC"
                           STK.QTY = INT((STK.QTY/100)*3.1416/4*(100000/INV.FACTOR)/10+0.5)
                     END CASE
               END CASE
               IF STK.QTY < 0 THEN STK.QTY = 0
*T27904 ^
            END ELSE
               ERRMSG=' DIAMETER/QUANTITY IS MISSING'
            END
         END ELSE
            ERRMSG = 'BLANK QUANTITY ENTERED FOR PHYSICAL JANUS UPDATE'
         END
      END
      ;*27069 ^
      BEGIN CASE
         CASE RECEIPT.ID # ''
            LOCATE RECEIPT.ID IN PHYSI.RECP.NO<1>,1 SETTING POS ELSE POS = 0
         CASE PROD.ID # ''
            LOCATE PROD.ID IN PHYSI.PRODUCT<1>,1 SETTING POS ELSE POS = 0
         CASE SERIAL.ID # ''
            LOCATE SERIAL.ID IN PHYSI.SERIAL<1>,1 SETTING POS ELSE POS = 0
         CASE 1
            POS = 0
      END CASE
      IF POS = 0 THEN
         POS = DCOUNT(PHYSI.PRODUCT,@VM)+1
         MODE = 'A'
      END ELSE
         MODE = 'C'
      END
   END
   RETURN
*
***************
VALIDATE.QTY: 
****************
*
   ;*27069 v
   IF Intermec.DIA # "" THEN
      ;* STK.QTY is already set in VALIDATE.ITEM above.
*     IF COST.QTY<ISTK.CUR.QTY-ISTK.RSVB.QTY THEN
*        ERRMSG = 'Cannot adjust serial below reserved qty. '
*        GOSUB 9000 ; RETURN
*     END
      ROND='' ; PSS=''
      COST.QTY=CALC.COST.QTY(STK.QTY,MAT INV.CNV.REC,ROND,PSS)
      COST.QTY=OCONV(COST.QTY,ICR.CNV)
*     Intermec.QTY=STK.QTY
      RETURN
   END
   ;*27069 ^
   BEGIN CASE
      CASE Intermec.QTY MATCHES "0N"
      CASE ICR.SCAL = 2 AND Intermec.QTY MATCHES "0N.1N"
      CASE ICR.SCAL = 2 AND Intermec.QTY MATCHES "0N.2N"
      CASE 1
         ERRMSG = 'INVALID QUANTITY FORMAT ENTERED FOR PHYSICAL JANUS UPDATE'
         GOSUB 9000 ; RETURN
   END CASE
   IF ICR.SCAL = 2 THEN
      Intermec.QTY = ICONV(Intermec.QTY,'MD2')
   END ELSE
      IF ICR.CNV = 'MD2' THEN Intermec.QTY= Intermec.QTY * 100
   END
   IF SERIAL.ID # '' THEN
      TMP = CALC.COST.QTY(Intermec.QTY,MAT INV.CNV.REC,'','')
      TMP.WGT=CALC.COST.QTY(Intermec.QTY,MAT INV.CNV.REC,'','')
      COST.QTY=TMP.WGT ; STK.QTY=Intermec.QTY
      DIAM=CALC.DIAM(COST.QTY,STK.QTY,MAT INV.REC)
   END
   RETURN
*
****************
PROCESS.TRANS: 
****************
*
   BEGIN CASE
      CASE CATG.TRK.LVL = 'S'
         IF PHYSI.WHSE # ISTK.WHSE OR PHYSI.LOC # ISTK.LOC THEN
*T27904 v
*           IF PHYSI.TRAN.TO # '' THEN
            IF PHYSI.TRAN.TO<1,POS> # '' THEN
*T27904 ^
               ERRMSG = 'SERIAL ENTERED HAS BEEN TRANSFERRED OUT TO WHSE ':ISTK.WHSE:' AND LOC ':ISTK.LOC
               GOSUB 9000 ; RETURN
            END
            MATREAD WHSE.REC FROM WAREHOUSE,CONO:PHYSI.WHSE THEN
               IF WHS.DIV='' THEN
                  FROM.DIV=GEN.DIV
               END ELSE
                  FROM.DIV=WHS.DIV
               END
            END
            MATREAD WHSE.REC FROM WAREHOUSE,CONO:ISTK.WHSE THEN
               IF WHS.DIV='' THEN
                  TO.DIV=GEN.DIV
               END ELSE
                  TO.DIV=WHS.DIV
               END
            END
            IF FROM.DIV # TO.DIV THEN
               ERRMSG = 'WAREHOUSE DIVISIONS DO NOT MATCH.  TRANSFER NOT POSSIBLE THROUGH JANUS UPDATE'
               GOSUB 9000 ; RETURN
            END ELSE
               GOSUB PROCESS.TRANSFER
               IF (BAD.TRANS) THEN RETURN
            END
         END
         TMP.QTY = ISTK.CUR.QTY+0
         TEMP.SERIAL = SERIAL.ID
         TEMP.RECP.NO = ISTK.RECP
      CASE CATG.TRK.LVL = 'R'
         TMP.QTY = PHYSI.PREV.QTY<1,POS> + 0
         TEMP.RECP.NO = RECEIPT.ID
      CASE 1
         TMP.QTY = PHYSI.PREV.QTY<1,POS> + 0
   END CASE
   PHYSI.STATUS<1,POS> = 'MAINT'
   PHYSI.JANUS.FLAG<1,POS> = 'Y'
   PHYSI.OPER.ID<1,POS> = Intermec.EMP
   ;*27069 v
   IF Intermec.DIA # '' THEN
*T27904 v
*     PHYSI.CURR.QTY<1,POS>=COST.QTY
*     PHYSI.CURR.DIA<1,POS>=ICONV(OCONV(DIAM,"MD3"),"MD2")
      PHYSI.CURR.QTY<1,POS>=STK.QTY * 10
      PHYSI.CURR.DIA<1,POS> = DIAM
*T27904 ^
   END ELSE
      PHYSI.CURR.QTY<1,POS>=CALC.COST.QTY(Intermec.QTY,MAT INV.CNV.REC,'','')
      PHYSI.CURR.DIA<1,POS> = DIAM
   END
   ;*27069 ^
   PHYSI.CURR.SQTY<1,POS> = Intermec.QTY
   IF PHYSI.PREV.SQTY<1,POS> = "" THEN PHYSI.PREV.SQTY<1,POS> = 0
   IF MODE = 'A' THEN
      PHYSI.PRODUCT<1,POS> = TEMP.PROD
      PHYSI.SERIAL<1,POS> = TEMP.SERIAL
      PHYSI.RECP.NO<1,POS> = TEMP.RECP.NO
      PHYSI.UNIT<1,POS> = INV.UNIT<1,2>
      PHYSI.DESC<1,POS> = INV.DESC
      IF CATG.TRK.LVL = 'S' THEN
         PHYSI.PREV.QTY<1,POS> = ISTK.CUR.QTY     
         PHYSI.PREV.DIA<1,POS> = ISTK.CUR.DIAM    
         PHYSI.PREV.SQTY<1,POS> = ISTK.CUR.STK.QTY
      END ELSE
         PHYSI.PREV.QTY<1,POS> = 0
      END
   END
   MATWRITE PHYSI.REC ON PHY.INV, PHY.ID
   RETURN
*
*******************
PROCESS.TRANSFER: 
*******************
*
   MAT TRAN.REC=''
   MAT D.TRAN.REC=''
   D.TRAN.PRT.DATE=Intermec.TDATE
   D.TRAN.EMP='JANUS'
   D.TRAN.SERIAL = SERIAL.ID
   D.TRAN.RECP = ISTK.RECP
   D.TRAN.PROD.NO= ISTK.PROD
   D.TRAN.FROM.WHSE = ISTK.WHSE
   D.TRAN.FROM.LOC = ISTK.LOC
   D.TRAN.TO.WHSE = PHYSI.WHSE
   D.TRAN.TO.LOC = PHYSI.LOC
   D.TRAN.QTY = ISTK.CUR.QTY
   D.TRAN.DATE.ENTER=Intermec.TDATE
   D.TRAN.PERIOD=PHYSI.PERIOD
   D.TRAN.TOT.QTY = ISTK.CUR.QTY
   D.TRAN.REASON.DESC = "PHYSICAL"
   D.TRAN.CODE='N'
   PROCESS.FLAG='Y' ; NEW.ERRMSG=''
   CALL TRAN.UPDATE(CONO,D.TRAN.CODE,MAT TRAN.REC,PROCESS.FLAG,CO.ICS.LOC.TRAN,NEW.ERRMSG)
   IF NEW.ERRMSG='' THEN
      ERRMSG = 'TRANSFER ERROR DURING JANUS UPDATE'
      GOSUB 9000
   END ELSE
      MAT SAVE.PHYSI.REC = MAT PHYSI.REC
      READ PHY.SEQ FROM PHY.XREF,CONO:D.TRAN.FROM.WHSE:"!":D.TRAN.FROM.LOC THEN
         MATREADU PHYSI.REC FROM PHY.INV,CONO:PHY.SEQ THEN
            SFND = 0
            REC.CNT = DCOUNT(PHYSI.PRODUCT,VM)
            FOR DD = 1 TO REC.CNT UNTIL (SFND)
               IF PHYSI.PRODUCT<1,DD> = TEMP.PROD THEN
                  IF PHYSI.SERIAL<1,DD> = SERIAL.ID THEN
                     IF PHYSI.RECP.NO<1,DD> = ISTK.RECP THEN
                        SFND = DD
                     END
                  END
               END
            NEXT DD
            IF SFND # 0 THEN
               PHYSI.TRAN.FROM<1,SFND> = D.TRAN.FROM.WHSE:'!':D.TRAN.FROM.LOC
               PHYSI.TRAN.TO<1,SFND> = D.TRAN.TO.WHSE:'!':D.TRAN.TO.LOC
               MATWRITE PHYSI.REC ON PHY.INV,CONO:PHY.SEQ
            END ELSE
               RELEASE PHY.INV,CONO:PHY.SEQ
            END
         END ELSE
            RELEASE PHY.INV,CONO:PHY.SEQ
         END
      END
      MAT PHYSI.REC = MAT SAVE.PHYSI.REC
      PHYSI.PREV.QTY<1,POS> = ISTK.CUR.QTY
      PHYSI.PREV.DIA<1,POS> = ISTK.CUR.DIAM
      PHYSI.PREV.SQTY<1,POS> = ISTK.CUR.STK.QTY
      PHYSI.PRODUCT<1,POS> = ISTK.PROD
      PHYSI.SERIAL<1,POS> = SERIAL.ID
      PHYSI.RECP.NO<1,POS> = ISTK.RECP
      PHYSI.UNIT<1,POS> = INV.UNIT<1,2>
      PHYSI.DESC<1,POS> = INV.DESC
   END
   RETURN
9000 * ERROR ROUTINE
   BAD.TRANS = 1
   Intermec.ERROR = ERRMSG                       
   MATWRITE INT.REC ON INTERMEC.ERRS, INTERMEC.ID
   RETURN
END
