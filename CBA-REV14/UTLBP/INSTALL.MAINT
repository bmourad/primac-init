* REVISION    - [08.0]
*COPY>CPYLIB>COMMON.INSTALL
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>CHAR
*
     PROCREAD ITEM ELSE
        ERRMSG = 'MUST RUN FROM A PROC'; GOTO 93000
     END
     VERB = ITEM<1>; VTYPE = ITEM<2>; VHEADING = ITEM<3>
*
*--- OPEN THE FILES
*
     OPEN '','UTL.SCREENS' TO M.SCREENS ELSE
        ERRMSG = 'CAN NOT OPEN UTL.SCREENS FILE'
        GOTO 93000
     END
     OPEN '','SYSTEM' TO SYSTEM ELSE
        ERRMSG = 'CAN NOT OPEN SYSTEM FILE'
        GOTO 93000
     END
     OPEN '','DL/ID' TO MD ELSE
        ERRMSG = 'CAN NOT OPEN MD FILE'
        GOTO 93000
     END
*
*--- INITIALIZATION
*
     MAT EDIT.COM.DRIVER = ""
     MAT SYS.ACCTS = ''
     O.SYS = ''
     ECD.RET.VALUES = ''
     LINE.SPACE = 1
     PAGE.SIZE = 13
     BEGIN.PAGE = 7
     ECD.SCRN.CNT = 2
     ECD.SCRN.NAME<1> = "INSTALL.MAINT"
     ECD.SCRN.NAME<2> = "FILES.MAINT.SUB"
     ECD.SCRN.NO = 1
     ECD.ACTION = 1; CALL SCREEN.EDIT
     ECD.ACTION = 2; CALL SCREEN.EDIT
*     PORT.ACCT = OCONV(0,"U50BB")
*     PORT = FIELD(PORT.ACCT," ",1)
*     ACCT = FIELD(PORT.ACCT," ",2)
     PORT = SYSTEM(18)
     ACCT = SYSTEM(19)
     PORT.ACCT = PORT:" ":ACCT
     IF FIELD(ACCT,"-",1) # 'CBA' THEN
        ERRMSG = 'MUST RUN FROM A CBA ACCOUNT'
        GOTO 93000
     END
     SYS = FIELD(ACCT,"-",2)
     IF SYS = '' THEN SYS = "PRIMAC"
     COMMAND = ''
     COMMAND<1,1> = 0; COMMAND<1,2> = 0; COMMAND<1,3> = 0
     BEGIN CASE
     CASE VTYPE = 'FILE'
        COMMAND<2,1> = 1
        COMMAND<2,2> = 1
     CASE VTYPE = 'DICT'
        COMMAND<2,1> = 1
        COMMAND<2,2> = 0
     CASE VTYPE = 'DATA'
        COMMAND<2,1> = 0
        COMMAND<2,2> = 1
     END CASE
     BEGIN CASE
     CASE VERB = 'ACCT'
        ACTION = 1
        COMMAND<1,1> = 1; COMMAND<1,3> = 1
        COMMAND<2,1> = 1; COMMAND<2,2> = 0
     CASE VERB = 'CAT'
        ACTION = 2
     CASE VERB = 'UPD'
        ACTION = 3
     CASE VERB = 'CPU'
        ACTION = 4
     CASE VERB = 'CRT'
        ACTION = 5
        COMMAND<1,1> = 1
     CASE VERB = 'CRC'
        ACTION = 5
        COMMAND<1,1> = 1; COMMAND<3,1> = 1
     CASE VERB = 'CLR'
        ACTION = 5
        COMMAND<1,2> = 1
     CASE VERB = 'CPY'
        ACTION = 5
        COMMAND<1,3> = 1
     CASE VERB = 'CCP'
        ACTION = 5
        COMMAND<1,2> = 1; COMMAND<1,3> = 1
     CASE 1
        ERRMSG = 'INVALID CALLING VERB'; GOTO 93000
     END CASE
     ECD.RET.VALUES<1,1> = VHEADING
     ECD.RET.VALUES<1,2> = SYS
     ECD.ACTION = 3; CALL SCREEN.EDIT
     ECD.NUM = 3
     BEGIN CASE
     CASE ACTION = 2
        ECD.RET.VALUES<1,ECD.NUM> = SYS
        ECD.ACTION = 5; CALL SCREEN.EDIT
        ECD.RET.VALUE = SYS
     CASE 1
        ECD.DEFAULT = SYS
        ECD.VALDAT.CODE = '2'; ECD.VALDAT.FILE = SYSTEM
        ECD.NUM = 3; ECD.ACTION = 4; CALL SCREEN.EDIT
        IF ECD.RET.VALUE = 'END' THEN GOTO 99999
     END CASE
     SYS.ACCTS(1,2) = ECD.RET.VALUE
     IF ECD.RET.VALUE = 'PRIMAC' THEN
        SYS.ACCTS(1,1) = 'CBA'
     END ELSE
        SYS.ACCTS(1,1) = 'CBA-' : SYS.ACCTS(1,2)
     END
     READ DUMMY FROM SYSTEM, SYS.ACCTS(1,1) ELSE
        ERRMSG = 'CBA BASE ACCOUNT IS MISSING FOR SYSTEM - ': SYS.ACCTS(1,2)
        GOTO 93000
     END
     ECD.NUM = 4
     BEGIN CASE
     CASE ACTION = 2
        ECD.RET.VALUES<1,ECD.NUM> = SYS
        ECD.ACTION = 5; CALL SCREEN.EDIT
        ECD.RET.VALUE = SYS
     CASE 1
        ECD.NUM = 4; ECD.ACTION = 4; CALL SCREEN.EDIT
        IF ECD.RET.VALUE = 'END' THEN GOTO 99999
     END CASE
     SYS.ACCTS(2,2) = ECD.RET.VALUE
     IF ECD.RET.VALUE = 'PRIMAC' THEN
        SYS.ACCTS(2,1) = 'CBA'
     END ELSE
        SYS.ACCTS(2,1) = 'CBA-':SYS.ACCTS(2,2)
     END
     LINES = 2
     DATA = 1
     SELECT SYSTEM
     LOOP
        READNEXT ID ELSE DATA = 0
     WHILE DATA DO
        BEGIN CASE
        CASE ID = SYS.ACCTS(1,1)
        CASE ID = SYS.ACCTS(1,2)
        CASE FIELD(ID,"-",1) = SYS.ACCTS(1,2)
           LINES = LINES + 1
           SYS.ACCTS(1,LINES) = ID
           SYS.ACCTS(2,LINES) = SYS.ACCTS(2,2) : '-' : FIELD(ID,'-',2)
        CASE 1
           O.SYS = INSERT(O.SYS,-1,0,0,ID)
        END CASE
     REPEAT
     IF SYS.ACCTS(1,2) # SYS.ACCTS(2,2) THEN
        FOR S = 1 TO 2
           LOCATE SYS.ACCTS(2,S) IN O.SYS,1 SETTING FND ELSE
              SYS.ACCTS(2,S) = SYS.ACCTS(1,S)
           END
        NEXT S
        S = 3
        LOOP WHILE SYS.ACCTS(1,S) # '' DO
           LOCATE SYS.ACCTS(2,S) IN O.SYS,1 SETTING FND ELSE
              FND = 0
              FOR SS = S TO LINES
                 SYS.ACCTS(1,SS) = SYS.ACCTS(1,SS+1)
                 SYS.ACCTS(2,SS) = SYS.ACCTS(2,SS+1)
              NEXT SS
              LINES = LINES - 1
           END
           IF FND THEN S = S + 1
        REPEAT
     END
     LN = 1; OLD.START.LINE = 0; GOSUB 10000
*
*--- ENTER OPTION
*
     QFILE = ''
     QFILE<1> = 'Q'
     QFILE<9> = 'L'
     QFILE<10> = '10'
     WRITE QFILE ON MD, 'F.ACCT.MD'
     WRITE QFILE ON MD, 'T.ACCT.MD'
     WRITE 'PQN' ON MD, 'INSTALL.MAINT.PROC'
     BLN = 0; ELN = 0
     LOOP
     ECD.NUM = 5
     ECD.RET.VALUES<ECD.SCRN.NO,ECD.NUM> = ''
     ECD.ACTION=4;CALL SCREEN.EDIT
     OPTION = ECD.RET.VALUE
     BEGIN CASE
     CASE OPTION = 'E' OR OPTION = 'END'
        ACTION = 0; BLN = 999
     CASE OPTION = "S"
        LN = LN + PAGE.SIZE
        IF LN > LINES THEN LN = 1
        GOSUB 10000
     CASE NUM(OPTION)
        IF OPTION >= 1 AND OPTION <= LINES THEN
           BLN = OPTION ; ELN = OPTION
        END ELSE
           ERRMSG = '** INVALID ACCOUNT NUMBER ***'
           GOSUB 91000
        END
     CASE OPTION = 'R'
        ECD.NUM = 6; ECD.ACTION = 4; CALL SCREEN.EDIT
        IF ECD.RET.VALUE # 'END' THEN
           IF ECD.RET.VALUE >= 1 AND ECD.RET.VALUE <= LINES THEN
              BLN = ECD.RET.VALUE
              ECD.NUM = 7; ECD.ACTION = 4; CALL SCREEN.EDIT
              IF ECD.RET.VALUE # 'END' THEN
                 IF ECD.RET.VALUE >= BLN AND ECD.RET.VALUE <= LINES THEN
                    ELN = ECD.RET.VALUE
                 END ELSE
                    BLN = 0
                    ERRMSG = '** INVALID ACCOUNT NUMBER ***'
                    GOSUB 91000
                 END
              END ELSE
                 BLN = 0
              END
           END ELSE
              ERRMSG = '** INVALID ACCOUNT NUMBER ***'
              GOSUB 91000
           END
        END
        ECD.RET.VALUES<1,6> = ''; ECD.RET.VALUES<1,7> = ''
     END CASE
     WHILE BLN = 0 DO REPEAT
     IF ACTION THEN
        ON ACTION GOSUB 1000,2000,3000,3000,4000
     END
     GOTO 99999
1000  ACTION = 4; GOSUB 3000
      ACTION = 2; GOSUB 2000
      RETURN
2000 FOR SPTR = BLN TO ELN WHILE ACTION
        CALL CATALOG.ACCT.SUB(ACTION,SPTR,MD)
     NEXT SPTR
     RETURN
3000 FOR SPTR = BLN TO ELN WHILE ACTION
        IF SYS.ACCTS(1,SPTR) # SYS.ACCTS(2,SPTR) THEN
           CALL UPDATE.MD.SUB(ACTION,SPTR,MD)
        END
     NEXT SPTR
     RETURN
4000 FOR I = 1 TO 4
        ECD.RET.VALUES<2,I> = ECD.RET.VALUES<1,I>
     NEXT I
     ECD.SCRN.NO = 2
     CALL FILES.MAINT.SUB(ACTION,COMMAND,ACCT,BLN,MD)
     RETURN
10000 START.LINE = 1 + INT((LN-1)/PAGE.SIZE) * PAGE.SIZE
      IF START.LINE = OLD.START.LINE THEN GOTO 19999
      OLD.START.LINE = START.LINE
      LAST.LINE = START.LINE + PAGE.SIZE - 1
      IF LAST.LINE > LINES THEN LAST.LINE = LINES
      CNT = 1
      FOR N = START.LINE TO LAST.LINE
         SLN = BEGIN.PAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
         PRINT @(0,SLN) : N "R#2" :
         PRINT @(3,SLN) : SYS.ACCTS(1,N) "L#30" :
         IF SYS.ACCTS(2,N) = '' THEN
            PRINT @(40,SLN) : CL :
         END ELSE
            PRINT @(40,SLN) : N "R#2" :
            PRINT @(43,SLN) : SYS.ACCTS(2,N) "L#30" :
         END
         CNT = CNT + 1
      NEXT N
      FOR M = CNT TO PAGE.SIZE
         SLN = BEGIN.PAGE + LINE.SPACE * MOD(M-1,PAGE.SIZE)
         PRINT @(0,SLN) : CL :
      NEXT M
19999 RETURN
90000 PRINT @(0,23) : ERRMSG : CL :
      RETURN
91000 PRINT @(0,23) : ERRMSG : CL :
      INPUT X :
      RETURN
93000 PRINT @(0,23) : ERRMSG : CL :
      INPUT X :
99999 READ PROC FROM MD, 'INSTALL.MAINT.PROC' ELSE
         PROC = 'PQN'
      END
      PTR = COUNT(PROC,AM) + 1
      PTR = PTR + 1; PROC<PTR> = 'F-C 1'
      PTR = PTR + 1; PROC<PTR> = 'F-OPEN 1 DL/ID'
      PTR = PTR + 1; PROC<PTR> = 'XCAN NOT OPEN DL/ID'
      PTR = PTR + 1; PROC<PTR> = 'F-READ 1 F.ACCT.MD'
      PTR = PTR + 1; PROC<PTR> = 'XCAN NOT READ DL/ID F.ACCT.MD'
      PTR = PTR + 1; PROC<PTR> = 'F-DELETE 1'
      PTR = PTR + 1; PROC<PTR> = 'F-READ 1 T.ACCT.MD'
      PTR = PTR + 1; PROC<PTR> = 'XCAN NOT READ DL/ID T.ACCT.MD'
      PTR = PTR + 1; PROC<PTR> = 'F-DELETE 1'
      PTR = PTR + 1; PROC<PTR> = 'F-READ 1 INSTALL.MAINT.PROC'
      PTR = PTR + 1; PROC<PTR> = 'XCAN NOT READ DL/ID INSTALL.MAINT.PROC'
      PTR = PTR + 1; PROC<PTR> = 'F-DELETE 1'
      PTR = PTR + 1; PROC<PTR> = 'MV %1 "RETURN"'
      PTR = PTR + 1; PROC<PTR> = 'HEASY.MENU'
      PTR = PTR + 1; PROC<PTR> = 'P'
      WRITE PROC ON MD, 'INSTALL.MAINT.PROC'
      END
