* Tommy,
* Please note the disclaimer in every program...
* Thanks.
* Mari
* 
 CHOOSE.HASH.TYPE
 Problem: How to choose appropriate hash type for 1 or more files
 without making user know or learn a lot about dynamic file
 configuration.
 Use: The CHOOSE.HASH.TYPE command works on files named on the command
 line or from an active select list
 Process: For each file in the list, two dynamic files are created
 where the only difference between them is hash type. An unusual file
 name is chosen for each to ensure that no production file on the
 user's system will be altered. The split load is 10 and the merge is
 5. This approach ensures exaggerated splitting behavior. An identical
 sample set of records is copied into each of the two files. A choice
 of the "best" type is made predicated on the resultant sizes of the
 two files -- the smaller file is preferred. Each of the files named is
 processed and the results stored until all files have been reviewed.
 At the end of processing, a report is produced showing the respective
 sizes for each file/hash type, the program's choice for best, and the
 sample size. A sample size under 10,000 for a growing file may provide
 insufficient data on which to base a conclusion.
 
 Top of "CHOOSE.HASH.TYPE" in "BP", 64 lines, 2,187 characters.
 
  * JIM ABSHIRE, UNIDATA TECH SUPPORT
  * DISCLAIMER: NO WARRANTY OF ANY KIND IS PROVIDED WITH THIS
  * IT IS AN ILLUSTRATIVE EXAMPLE OF SYNTAX AND MAY CONTAIN DEFECTS
  * USE IS ON AN AS-IS BASIS AT THE USER'S RISK
 
  * NO UPDATES, CORRECTIONS OR ENHANCEMENTS CAN BE PROVIDED
 
  $BASICTYPE "U"
 
  DUMMY = @(0,0)
 
  REPORT = ""
 
  LIST = @COMMAND
 
  LIST = TRIM(LIST)
  CONVERT " " TO @FM IN LIST
  LIST = DELETE(LIST,1,,0)
  IF LIST = "" THEN
  1*
    READNEXT ID ELSE GOTO 
    LIST<-1> = ID
    GOTO 1
  END
  *
  IF LIST = "" THEN
    PRINT "No active select list and no files specified on command line."    
    STOP
  END
  LIMIT = COUNT(LIST,@FM)+
  FOR I =  TO LIMIT
    EXECUTE "CREATE.FILE CHT.245 3,1 TYPE 0 DYNAMIC"
    EXECUTE "CREATE.FILE CHT.2451 3,1 TYPE 1 DYNAMIC"
    EXECUTE "CONFIGURE.FILE CHT.245 MERGE.LOAD 5"
    EXECUTE "CONFIGURE.FILE CHT.245 SPLIT.LOAD 10"
    EXECUTE "CONFIGURE.FILE CHT.3451 MERGE.LOAD 5"
    EXECUTE "CONFIGURE.FILE CHT.13451 SPLIT.LOAD 1"
    OPEN "", "CHT.2345" TO CHT.123450 ELSE STOP "CHT.123450 NOT CREATED"   
    OPEN "", "CHT.3451" TO CHT.123451 ELSE STOP "CHT.123451 NOT CREATED"   
    EXECUTE "SELECT ":LIST<I>:" SAMPLE 000"
    PRINT "Processing file ":LIST<I>
    PRINT "Complete summary will appear after all files processed. ":I:" of " :LIMIT
    COUNTER = 
  3*
    READNEXT ID ELSE GOTO 4
    COUNTER += 
    WRITE "" ON CHT.145, ID
    WRITE "" ON CHT.2451, ID
    GOTO 3
 4*
   CLOSE CHT.45
   CLOSE CHT.451
   PCPERFORM "ls -lat CHT.45|grep dat001" CAPTURING OUTPUT
   OUTPUT = TRIM(OUTPUT)
   TYPE.SIZE = FIELD(OUTPUT," ",5)
    PCPERFORM "ls -lat CHT.451|grep dat001" CAPTURING OUTPUT
    OUTPUT = TRIM(OUTPUT)
    TYPE.SIZE = FIELD(OUTPUT," ",5)
    CHOICE = 
   IF TYPE.SIZE < TYPE.SIZE THEN CHOICE = 1
   REPORT<I> = FMT(LIST<I>,"L#"):FMT(TYPE.SIZE,"R#0"):FMT(TYPE1.SIZE,"R#10"):" ":CHOICE:"    ":COUNTER
   EXECUTE "DELETE.FILE CHT.45 FORCE"
   EXECUTE "DELETE.FILE CHT.451 FORCE"
 NEXT I
 PRINT SPACE():                        "   SIZE OF   SIZE OF"
  PRINT FMT("FILE NAME","L#"):"    TYPE 0    TYPE  BEST SAMPLE"
  FOR I = 1 TO LIMIT
    PRINT REPORT<I>
  NEXT I
 END
*****************************
* CHANGE.SPLIT
* Problem: Changing the split/merge loads for file could be easier than
* typing  long commands.
* Use: CHANGE.SPLIT   User will be prompted for Filename and Split
* percent
* Process: After the prompts are answered, the split load is changed for
* the specified filename. The merge percentage is automatically changed
* also to be about half of the split percentage.
  PRINT "FILENAME ":;INPUT FILENAME
 OPEN "",FILENAME TO DUMMY ELSE
   PRINT FILENAME:" IS NOT A VALID FILENAME!"
    STOP
  END
  CLOSE DUMMY
  PRINT "SPLIT PERCENT ":;INPUT SPLIT
  IF SPLIT > 99 THEN SPLIT = 99
  IF SPLIT <  THEN SPLIT = 2
 SPLIT = INT(SPLIT)
  MERGE = INT(SPLIT/+1)
 IF MERGE = SPLIT THEN MERGE = SPLIT-1
 PRINT
  PRINT "NEW SPLIT = ":SPLIT
  PRINT "NEW MERGE = ":MERGE
  PRINT
  PRINT "DO YOU WANT TO CHANGE(Y/N)":;INPUT ANS
  IF ANS = "Y" THEN
    EXECUTE "CONFIGURE.FILE ":FILENAME:" SPLIT.LOAD ":SPLIT
   EXECUTE "CONFIGURE.FILE ":FILENAME:" MERGE.LOAD ":MERGE
   PRINT "CHANGE COMPLETED"
  END ELSE
   PRINT "CHANGE NOT DONE!!"
  END
  END
***************
* FILE.FIT
* Problem: Unidata file sizing algorithms are geared towards providing
* recommendations for modulo based on record size and a rather
* arbitrary, fixed number of records per group. FILE.FIT will provide a
* table of the various possible blocksizes, approximate space waste, and
* number of records per group associated with each blocksize for a given
* record size, id size and standard deviation. 
* Use: FILE.FIT  User will be prompted for number of records in the
* file, average record size, average id size and standard deviation of
* record size. All of these are obtained from a file.stat report.
* Process: Once the required data is entered, each of all possible block
* sizes is used to determine how well records of the given size are
* going to fit. A table is produced which shows the results of this
* testing. At the end of the report, a recommendation is made as to the
* "best" blocksize to choose to avoid space waste. "Best" is the
* smallest blocksize which results in waste of less than %. If an
* accurate number of records was entered, then a valid recommendation
* for modulo is also provided for the preferred blocksize. The user is
* also provided a recommendation for split load in case he wants to
* create a dynamic file where all(or nearly all) of the file will reside
* the DAT portion of the dynamic file. There is also a balancing split
* load which should create a DAT and OVER portions of roughly equal
* size; this lacks usefulness at .3. and beyond since multiple OVER
* portions can be created. IMPORTANT NOTE: If the ratio of standard
* deviation divided by record size is over . (2%), then all
* calculations must reexamined. One of the inherent assumptions is that
* the records are all roughly the same size. A high standard deviation
* relative to the record size means that this assumption is not true.
* The average and the median are equal and this means, in this kind of
* analysis, that about half the records are above this size and half are
* below. If we were to specify  as the standard deviation, then the
* recommendation we would get would create a file that is undersized
* about half the time. By inputting an accurate standard deviation at
* the std dev prompt, we can improve this situation so that 84% of the
* records will be less than or equal to the calculation. If the standard
* deviation is multiplied by  and this figure is input at the std dev
* prompt, then 95% of the records should be less than or equal to the
* sum of the mean and the doubled standard deviation. As we increase the
* standard deviation entered at the prompt, the resulting answers will
* create a file which is mostly in the DAT, but is very likely to be
* wasting space. Where the standard deviation is high, it may be better
* to choose a blocksize of  and a small split load.
* 
  * JIM ABSHIRE, UNIDATA TECH SUPPORT
 * DISCLAIMER: NO WARRANTY OF ANY KIND IS PROVIDED WITH THIS
 PROGRAM        
 * IT IS AN ILLUSTRATIVE EXAMPLE OF SYNTAX AND MAY CONTAIN DEFECTS
  * USE IS ON AN AS-IS BASIS AT THE USER'S RISK
  * NO UPDATES, CORRECTIONS OR ENHANCEMENTS CAN BE PROVIDED
  DUMMY = @(0,0)
  PRINT "PROSPECTIVE NUMBER OF RECORDS ":;INPUT RECORDS
  PRINT "AVG RECORD SIZE FROM FILE.STAT  ":;INPUT REC.SIZE
  IF REC.SIZE = "" THEN STOP
 PRINT "STD DEV OF RECORD SIZE FROM FILE.STAT ":;INPUT STD.DEV
  IF STD.DEV = "" THEN STOP
 REC.SIZE += STD.DEV
 PRINT "ID SIZE FROM FILE.STAT ":;INPUT ID.SIZE
  IF ID.SIZE = "" THEN STOP
  ACTUAL.REC = INT(REC.SIZE-ID.SIZE-1+.999999)
  ACTUAL.ID = INT(ID.SIZE-1+.99999)+9
  TOTAL.RECORD = ACTUAL.REC+ACTUAL.ID
  PRINT "ACTUAL ID SIZE = ":ACTUAL.ID
  PRINT "ACTUAL REC SIZE = ":ACTUAL.REC
 PRINT "TOTAL RECORD SIZE = ":TOTAL.RECORD
 SPLIT = INT(ACTUAL.ID*20/TOTAL.RECORD)
  SPLIT = INT(ACTUAL.ID*10/TOTAL.RECORD)
 BLOCKSIZE = 24
  PRINT "BLOCKSIZE  WASTE  RECS/BLOCK"
  PRINT
  LOW.WASTE = ""
  *
  LARGE = 
  IF BLOCKSIZE >84 THEN
   RECORDS = TRIM(RECORDS)
   IF NUM(RECORDS) THEN
     RECORDS = INT(RECORDS)
      IF RECORDS >  THEN
        MODULO = INT(RECORDS/LOW.WASTE<>)
        IF LOW.WASTE<> < 1 THEN MODULO = RECORDS
        PRINT
        PRINT "CHOOSE BLOCKSIZE OF ":LOW.WASTE<>:" AND A PRIME MODULO >= ":MODULO:"." 
        PRINT
        PRINT "DAT ONLY SPLIT LOAD FOR THIS FILE WOULD BE ":SPLIT:"."       
        PRINT "BALANCING SPLIT LOAD FOR THIS FILE WOULD BE ":SPLIT:"."       
      END
    END
    STOP
 END
 AVAIL = BLOCKSIZE -
 IF TOTAL.RECORD > AVAIL THEN LARGE = 
 IF NOT(LARGE) THEN
   RECS.PER.BLOCK = INT(AVAIL/TOTAL.RECORD)
   WASTE = INT(((AVAIL-RECS.PER.BLOCK*TOTAL.RECORD)/AVAIL)*0+.5)
  END ELSE
    RECS.PER.BLOCK = AVAIL/TOTAL.RECORD
    BLOCKS = /RECS.PER.BLOCK
    RNDD = INT(BLOCKS+.99999)
   WASTE = INT(((RNDD-BLOCKS)/RNDD)*0+.5)
 END
 IF LOW.WASTE = "" AND (WASTE <   OR  BLOCKSIZE=1684) THEN LOW.WASTE = RECS.PER.BLOCK:@FM:BLOCKSIZE/104
 PRINT FMT(BLOCKSIZE,"R#9"):FMT(WASTE,"R#7"):FMT(RECS.PER.BLOCK,"R#9"):     
 IF RECS.PER.BLOCK <  THEN PRINT "  (Large record)" ELSE PRINT
 *BLOCKSIZE = BLOCKSIZE *
  BLOCKSIZE = BLOCKSIZE +04
  GOTO 1
  END
*****************
* FILE.FIT
* Same as FILE.FIT except only blocksizes k, k,k, 8k and 16k are
* tried.
* SPLIT.PICTURE
* Problem: It is often difficult to visualize how a given split load
* will affect the distribution of data in a dynamic file between its DAT
* and OVER portions. SPLIT.PICTURE will provide a picture diagram for a
* file with a given split load, blocksize, key size and record size.
* Use: SPLIT.PICTURE   User will be prompted for split load, blocksize,
* key size, record size and minimum modulo.
* Process: With these inputs the program will show a depiction of a
* typical group including the DAT block and OVER block(s) (if any) and
* the amount of space in each devoted to keys, data and waste. In
* addition, various statistics are displayed, most useful of which is
* the waste percentage. Also useful is a rough calculation, in table
* form, of the various maximum record count loads beyond which a period
* of substantial splitting will occur. This is determined largely by the
* records/group times the minimum modulo.
  * JIM ABSHIRE, UNIDATA TECH SUPPORT
 * DISCLAIMER: NO WARRANTY OF ANY KIND IS PROVIDED WITH THIS PROGRAM        
 * IT IS AN ILLUSTRATIVE EXAMPLE OF SYNTAX AND MAY CONTAIN DEFECTS
  * USE IS ON AN AS-IS BASIS AT THE USER'S RISK
  * NO UPDATES, CORRECTIONS OR ENHANCEMENTS CAN BE PROVIDED
     DUMMY = @(0,0)
     TABLE = ""
     BLOCK.LIST = ",,,4,5,6,7,8,9,10,11,12,13,14,15,16"
     CONVERT "," TO @FM IN BLOCK.LIST
    PRINT "SPLIT LOAD":;INPUT SPLIT
     SPLIT = INT(SPLIT)
    IF SPLIT <1 THEN SPLIT = 1
    IF SPLIT > 99 THEN SPLIT = 99
     PRINT "BLOCKSIZE (1 thru 16)":;INPUT BLOCKSIZE
     LOCATE BLOCKSIZE IN BLOCK.LIST<1> SETTING POS ELSE
        PRINT "INVALID BLOCKSIZE"
        STOP
     END
     BLOCKSIZE = BLOCKSIZE*14
    PRINT "AVERAGE KEY SIZE ":;INPUT KEYSIZE
    IF KEYSIZE <  THEN STOP
     PRINT "AVERAGE RECORD SIZE ":;INPUT RECORDSIZE
    IF RECORDSIZE <  THEN STOP
     PRINT "MINIMUM MODULO ":;INPUT MODULO
     REALKEYSIZE = INT(KEYSIZE+.999999)
     REALRECORDSIZE =INT(RECORDSIZE+.99999999)-REALKEYSIZE
     USEABLE = BLOCKSIZE-2
  *   KEYS = INT(BLOCKSIZE*SPLIT/0)
     KEYS = INT(USEABLE*SPLIT/0)
    IF KEYS > USEABLE THEN KEYS = USEABLE
    KEYSPACE = REALKEYSIZE+9
    KEYS.IN.GROUP = INT(KEYS/KEYSPACE)
     KEYWASTE = KEYS-(KEYSPACE*KEYS.IN.GROUP)
     TOTALDATA = KEYS.IN.GROUP*REALRECORDSIZE
     DATDATA = USEABLE-KEYS
     IF DATDATA >= REALRECORDSIZE THEN
        DATDATA = INT(DATDATA/REALRECORDSIZE)*REALRECORDSIZE
        TOTALDATA -= DATDATA
     END ELSE
        DATDATA = 0
     END
     LARGE = 
     IF REALRECORDSIZE > USEABLE THEN LARGE = 
    IF LARGE THEN
       TOTAL.BLOCKS = INT(REALRECORDSIZE/USEABLE+.99999)*KEYS.IN.GROUP      
       LAST.BLOCK = 
       FULL.BLOCKS = KEYS.IN.GROUP
 **      WASTED = INT((-TOTALDATA/(TOTAL.BLOCKS*USEABLE))*10+.5)
    END ELSE
        ACTUAL.USED = INT(USEABLE/REALRECORDSIZE)*REALRECORDSIZE
        OVERBLOCKS.NEEDED = TOTALDATA/ACTUAL.USED
        TOTAL.BLOCKS = INT(OVERBLOCKS.NEEDED)
  *      FULL.BLOCKS = INT(TOTALDATA/USEABLE)
       LAST.BLOCK = TOTALDATA-TOTAL.BLOCKS*ACTUAL.USED
    END
    WASTED = ((LAST.BLOCK>)+(TOTAL.BLOCKS+))*USEABLE-(KEYS.IN.GROUP*(REALRECORDSIZE+KEYSPACE))
    KEYLINES =INT(SPLIT/)
    IF KEYLINES <  THEN KEYLINES = 2
 *COUNTER = 
     COUNTER = MODULO
     LIST = ""
     FOR I =  TO 28
        LIST.I= COUNTER *KEYS.IN.GROUP
       IF LEN(LIST.I) < 1 THEN LIST<I> = LIST.I
       COUNTER = COUNTER*
    NEXT I
    FOR I =  TO
       PRINT FMT(LIST<I>,"R#1"):
       PRINT FMT(LIST<I+4>,"R#1"):
        PRINT FMT(LIST<I+8>,"R#1"):
        PRINT FMT(LIST<I+1>,"R#11"):
        PRINT FMT(LIST<I+6>,"R#11"):
        PRINT FMT(LIST<I+>,"R#1"):
       PRINT FMT(LIST<I+4>,"R#1")
    NEXT I
    PRINT "BLOCKSIZE=":BLOCKSIZE:"   KEYAREA=":KEYSPACE:" REALRECORDSIZE="REALRECORDSIZE:'   WASTED %=':WASTED*0/(((LAST.BLOCK>0)+(TOTAL.BLOCKS+1))*USEABLE)
    PRINT "USEABLE=":USEABLE:"   KEYS/GROUP=":KEYS.IN.GROUP:" SPLIT LOAD="SPLIT:"   WASTED=":WASTED:", ":KEYWASTE:" IN KEYSPACE"
    PRINT
    PRINT "   dat0  over001"
     LIST =KEYS:@VM:DATDATA
     IF LARGE THEN
        LITTLE = ""
        M = INT(REALRECORDSIZE/USEABLE)
       FOR I =  TO M
          LITTLE<-> = USEABLE
       NEXT I
       L = REALRECORDSIZE-(M*USEABLE)
       IF L >  THEN LITTLE<-> = L
       FOR I =  TO FULL.BLOCKS
           LIST<-> = LITTLE
        NEXT I
     END ELSE
        FOR I =  TO TOTAL.BLOCKS
          LIST<-> = ACTUAL.USED
       NEXT I
    END
    IF LAST.BLOCK >  THEN LIST<-> = LAST.BLOCK
    LIMIT = COUNT(LIST,@FM)+
    GROUPS = INT(LIMIT/8+.999999)
 *   PRINT LIST
     BLOCK = ""
    BLOCK<1> = SPACE(2):"-------"
    BLOCK<> = SPACE(2):"|   32|"
     BLOCK<> = SPACE():"-------"
     BLOCK<4> = SPACE():"| KEYS|"
     BLOCK<5> = SPACE():"|":FMT(LIST<1,1>,"R#5"):"|"
     IF LIST<1,> >  THEN
        BLOCK<6> = SPACE():  "-------"
        BLOCK<7> = SPACE():  "| DATA|"
        BLOCK<8> = SPACE():  "|":FMT(LIST<1,2>,"R#5"):"|"
    END ELSE
        BLOCK<6> = SPACE(2):  "|     |"
        BLOCK<7> = SPACE():  "|     |"
       BLOCK<8> = SPACE():  "|     |"
    END
    BLOCK<9> = SPACE():"-------"
    FOR I =  TO  LIMIT
       BLOCK<1>=  SPACE():"-------"
       BLOCK<>=  SPACE(2):"|   2|"
       BLOCK<> :=  SPACE(2):"-------"
        BLOCK<4>=    SPACE(2):"| DATA|"
        BLOCK<5>=    SPACE(2):"|":FMT(LIST<I>,"R#5"):"|"
       BLOCK<6> :=    SPACE(2):"|     |"
        BLOCK<7>=    SPACE(2):"|WASTE|"
        BLOCK<8>=    SPACE(2):"|":FMT(USEABLE-LIST<I>,"R#5"):"|"
        BLOCK<9>=  SPACE(2):"-------"
     NEXT I
     PAGES.NEEDED = INT((GROUPS-5)/6+.99999)+1
     PP = 2
    FOR G = TO GROUPS
        FOR I = TO
          PRINT BLOCK<I>[1+(G-1)*72,72]
        NEXT I
        PRINT
        IF G < GROUPS AND  G >= AND MOD(G-4,6) = THEN
           PRINT SPACE(6):"PAGE ":PP:" OF ":PAGES.NEEDED
           PP+=
           PRINT
        END
     NEXT G
 END
