*COPY>CPYLIB>COM1
*COPY>PMC.CPYLIB>COM.COA
*********************************************************************
* REVISION    - [08.1]
* SYSTEM      - PRIMAC
* SOURCE      - GLSBP
* PROGRAM     - GLH.INQ
* BY          - WALID YAMOUT , C.B.A
* DATE        - 10/15/86
* DESCRIPTION -
*   This program is an inquiry for G/L activities
* TASK
*    18573 5/95 LLH 1-52 ACCOUNTING PERIODS
*
*T21238 lanny 11/19/1996 * If PERIOD (year) is changed from initial
*                          entry the correct COA BAL files are not
*                          re-opened.
*T21876 diane 05/13/1997 * Display xref description
******* renee 08/18/1997 * Transferring changes made to this program in
*                          Rev10b to Rev11 for T21331.
*T21331 rick  12/13/1996 * Problem displaying totals for last period of
*                          year
*T22401 lanny 02/04/1998 * Expand Lines to 9999
*T23450 cm 03/10/1999 * Found bug/error in base program when woring on
*                       this task.
*T26083 alex 09/05/2001 * Show the Open Balance and Ending Balance
*                         column data, even if there is no Debit/Credit
*                         activity for the period.
*T25978 adelgado 02/07/2002 * Add the use of prompts (S,SR,SB,ST).
*T27864 cmykleb 12/31/2003 * Correct problem when the department (DP)
*                            is changed and the previous department
*                            information is still displayed in the
*                            debit and credit columns.
*T26619 lross 10/01/2004 * Task not carried fwd to REV12.
*T29176 lross 03/31/2008 *  If "PR" option chosen and after accessing
*                           a prior year, user returns to current year,
*                           the current year files are not reopened so
*                           program is looking at wrong year data.
*ENDDOC
*********************************************************************
*
*--- INSERT FILES EQUETES
*
*COPY>PMC.CPYLIB>COMPANY
*COPY>PMC.CPYLIB>COA
*COPY>PMC.CPYLIB>COA.FILE.VARS
*COPY>PMC.CPYLIB>DIVISION
*COPY>PMC.CPYLIB>DEPARTMENT
*COPY>PMC.CPYLIB>COST.CNTR
*COPY>GLS.CPYLIB>GLM
*COPY>GLS.CPYLIB>COA.BAL
*COPY>GLS.CPYLIB>ACCT.TYPE
*COPY>GLS.CPYLIB>ACCT.CATG
*COPY>GLS.CPYLIB>ACCT.SUB.CATG
*COPY>GLS.CPYLIB>CATG.AND.SUB
*COPY>GLS.CPYLIB>GLHX
*COPY>CPYLIB>EDIT.COM
*COPY>CPYLIB>EDIT.COM.DRIVER
*COPY>CPYLIB>FILE.VARS
*COPY>CPYLIB>GEN.XREF
*COPY>CPYLIB>CHAR
*COPY>CPYLIB>SYSCOM
   MAT SYSCOM.REC =  ""; SYS.TYPE = 2
   ERRMSG = ""
*
*--- GET COMPANY
*
   MAT FILE.VARS = ""
   OPEN '','COMPANY' TO COMPANY ELSE ERRMSG = 'COMPANY FILE IS MISSING'; GOSUB 91000; GOTO 999999
   OPEN '','CONTROL' TO CONTROL ELSE ERRMSG = 'CONTROL FILE IS MISSING'; GOSUB 91000; GOTO 999999
   CONO = ""
   MAT COMP.REC = ""
   CALL GET.CONO(CONO,MAT COMP.REC)
   IF CONO = "END" THEN GOTO 999999
   READ FISCAL.REC FROM CONTROL, CONO : "FISCAL" ELSE FISCAL.REC = ""
   READ PERIOD.REC FROM CONTROL, CONO : "ACCT.PERIODS" ELSE 
      PERIOD.REC = ""
      PERIOD.REC<1> = 12
   END
   NUM.PERIODS = PERIOD.REC<1>
   PERIOD = FISCAL.REC<1>[5,2] + 0
   IF PERIOD < 1 OR PERIOD > NUM.PERIODS THEN
      ERRMSG = "INVALID PERIOD ":PERIOD
      GOSUB 91000
      GOTO 999999
   END
   PERIOD = FISCAL.REC<1>
   YEAR = PERIOD[1,4]
   IN.ACCT.LEN = LEN(CO.ACCT.PIC)
   BASE.LEN = FIELD(CO.ACCT.STRUC,"-",1)
   IF NOT(NUM(BASE.LEN)) OR BASE.LEN > IN.ACCT.LEN THEN
      ERRMSG = "ERROR IN THE ACCOUNT STRUCTURE"
      GOSUB 91000
      GOTO 999999
   END
*
*--- OPEN FILES
*
   OPEN '','GLS.SCREENS' TO M.SCREENS ELSE ERRMSG = 'GLS.SCREENS FILE IS MISSING'; GOSUB 91000; GOTO 999999
   OPEN '','PREFIX' TO PREFIX ELSE ERRMSG = 'PREFIX FILE IS MISSING'; GOSUB 91000; GOTO 999999
   OPEN '','GLHX' TO GLHX ELSE ERRMSG = 'GLHX FILE IS MISSING'; GOSUB 91000; GOTO 999999
   OPEN '','GLH' TO GLH ELSE ERRMSG = 'GLH FILE IS MISSING'; GOSUB 91000; GOTO 999999
   OPEN '','COA' TO COA ELSE ERRMSG = 'COA FILE IS MISSING'; GOSUB 91000; GOTO 999999
   OPEN '','COA.XREF' TO COA.XREF ELSE ERRMSG = 'COA.XREF FILE IS MISSING'; GOSUB 91000; GOTO 999999
   OPEN '','ACCT.TYPE' TO ACCT.TYPE ELSE ERRMSG = 'ACCT.TYPE FILE IS MISSING'; GOSUB 91000; GOTO 999999
   OPEN '','ACCT.CATG' TO ACCT.CATG ELSE ERRMSG = 'ACCT.CATG FILE IS MISSING'; GOSUB 91000; GOTO 999999
   OPEN '','ACCT.SUB.CATG' TO ACCT.SUB.CATG ELSE ERRMSG = 'ACCT.SUB.CATG FILE IS MISSING'; GOSUB 91000; GOTO 999999
   OPEN '','CATG.AND.SUB' TO CATG.AND.SUB ELSE ERRMSG = 'CATG.AND.SUB FILE IS MISSING'; GOSUB 91000; GOTO 999999
   OPEN '','DIVISION' TO DIVISION ELSE ERRMSG = 'DIVISION FILE IS MISSING'; GOSUB 91000; GOTO 999999
   OPEN '','DEPARTMENT' TO DEPARTMENT ELSE ERRMSG = 'DEPARTMENT FILE IS MISSING'; GOSUB 91000; GOTO 999999
   OPEN '','COST.CNTR' TO COST.CNTR ELSE ERRMSG = 'COST.CNTR FILE IS MISSING'; GOSUB 91000; GOTO 999999
   OPEN '','CO.COA.BAL' TO CO.COA.BAL ELSE ERRMSG = 'CO.COA.BAL FILE IS MISSING'; GOSUB 91000; GOTO 999999
   OPEN '','DV.COA.BAL' TO DV.COA.BAL ELSE ERRMSG = 'DV.COA.BAL FILE IS MISSING'; GOSUB 91000; GOTO 999999
   OPEN '','DP.COA.BAL' TO DP.COA.BAL ELSE ERRMSG = 'DP.COA.BAL FILE IS MISSING'; GOSUB 91000; GOTO 999999
   OPEN '','CC.COA.BAL' TO CC.COA.BAL ELSE ERRMSG = 'CC.COA.BAL FILE IS MISSING'; GOSUB 91000; GOTO 999999
*
*--- INITIALIZATION
*
   LINE.SPACE = 1
   BEGIN.PAGE = 11
   PAGE.SIZE = 9
   LINES = 0
   LN = 1
   OLD.START = 0
   GEN.DIV = "00"
   GEN.DEPT = "00"
   GEN.CCTR = "000"
   MAT GEN.XREF.REC = ""
   GXR.CO = CONO
   GXR.LOC = 0
   UNKNOWN = "UNKNOWN"
   ;* T26083 v
   ALL.DIV = ''
   ALL.DEPT = ''
   ALL.CCTR = ''
   ;* T26083 ^
*
*--- SCREEN
*
*  MAT EDIT.COM = ""
*  TYP = 0
*  CALL EDIT.SUB
   FILL = "#"
   MAT EDIT.COM.DRIVER = ""
   ECD.SCRN.CNT = 1
   ECD.SCRN.NAME<1> = "GLH.INQ"
   ECD.ACTION=1;CALL SCRN.EDIT
*
*--- MAIN PROCESS
*
100*
   ECD.SCRN.NO = 1
   MAT SCV.REC = ""
   ECD.ACTION=2;CALL SCRN.EDIT
110*
   PER = ""
   ACCT.NO = ""
   GOSUB 800
   IF ECD.RET.VALUE = "END" THEN
      IF PER = "" THEN
         ECD.ACTION = 99 ; CALL SCRN.EDIT
         GOTO 999999
      END ELSE
         GOTO 110
      END
   END
   GOSUB 4000
*
*--- ENTER OPTIONS
*
500*
   ECD.NUM = 9
   SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ''
   ECD.ACTION=4;CALL SCRN.EDIT
   OPTION = ECD.RET.VALUE
   BEGIN CASE
      CASE OPTION = "END" OR OPTION = "E"
         ECD.ACTION = 99 ; CALL SCRN.EDIT
         GOTO 999999
      CASE OPTION = "PR"
         GOSUB 800
         IF ECD.RET.VALUE # "END" THEN GOSUB 4000
      CASE OPTION = "AC"
         IF PER = "" THEN
            GOSUB 800
         END ELSE
            ALL.DIV = '' ; ALL.DEPT = '' ; ALL.CCTR = '' ; * T26083
            GOSUB 1000
         END
         IF ECD.RET.VALUE # "END" THEN GOSUB 4000
      CASE OPTION = "DV"
         IF PER = "" THEN
            GOSUB 800
         END ELSE
            ALL.DEPT = '' ; ALL.CCTR = '' ; * T27864
            IF ACCT.NO = "" THEN
               GOSUB 1000
            END ELSE
               GOSUB 1100
            END
         END
         IF ECD.RET.VALUE # "END" THEN GOSUB 4000
      CASE OPTION = "DP"
         IF PER = "" THEN
            GOSUB 800
         END ELSE
            ALL.CCTR = '' ; * T27864
            IF ACCT.NO = "" THEN
               GOSUB 1000
            END ELSE
               IF DIV.CODE = "" OR DIV.CODE = GEN.DIV THEN
                  GOSUB 1100
               END ELSE
                  GOSUB 1200
               END
            END
         END
         IF ECD.RET.VALUE # "END" THEN GOSUB 4000
      CASE OPTION = "CC"
         IF PER = "" THEN
            GOSUB 800
         END ELSE
            IF ACCT.NO = "" THEN
               GOSUB 1000
            END ELSE
               IF DIV.CODE = "" OR DIV.CODE = GEN.DIV THEN
                  GOSUB 1100
               END ELSE
                  IF DEPT.CODE = "" OR DEPT.CODE = GEN.DEPT THEN
                     GOSUB 1200
                  END ELSE
                     GOSUB 1300
                  END
               END
            END
         END
         IF ECD.RET.VALUE # "END" THEN GOSUB 4000
    * T25978 v
      CASE OPTION[1,1] = "S"
         BEGIN CASE
            CASE OPTION = 'S'
               LN = 1 + INT((LN - 1)/PAGE.SIZE) * PAGE.SIZE + PAGE.SIZE
               IF LN > LINES THEN LN = 1
               GOSUB 80000
            CASE OPTION[2,1] = "R"
               LN = 1 + INT((LN-1)/PAGE.SIZE) * PAGE.SIZE - PAGE.SIZE
               IF LN < 1 THEN LN = 1
               GOSUB 80000
            CASE OPTION[2,1] = "T"
               LN = 1
               GOSUB 80000
            CASE OPTION[2,1] = "B"
               LN = LINES
               GOSUB 80000
            CASE NUM(TRIM(OPTION[2,10]))
               TEMP = TRIM(OPTION[2,10])
               IF TEMP > 0  AND TEMP LE LINES THEN
                  LN = TEMP
                  GOSUB 80000
               END
         END CASE
    * T25978 ^
   END CASE
   GOTO 500
*---------------*
*  SUBROUTINES  *
*---------------*
*
*--- PERIOD
*
800*
   ECD.NUM = 14
   ECD.ACTION = 4
   CALL SCRN.EDIT
   BEGIN CASE
      CASE ECD.RET.VALUE = "END"
         PER = ""
         GOTO 1999
      CASE ECD.RET.VALUE >= PERIOD
         ERRMSG = "Cannot use period same or greater than current period"
         GOSUB 91000
         GOTO 800
*T26619 v
*     CASE ECD.RET.VALUE[1,4] < YEAR - 2
      CASE ECD.RET.VALUE[1,4] < YEAR - 3
*        ERRMSG = "Cannot go back more than two years."
         ERRMSG = "Cannot go back more than three years."
*T26619 ^
         GOSUB 91000
         GOTO 800
      CASE ECD.RET.VALUE[5,2] < 1 OR ECD.RET.VALUE[5,2] > NUM.PERIODS
         ERRMSG = "Invalid period"
         GOSUB 91000
         GOTO 800
   END CASE
*T21238 v
*  PER = ECD.RET.VALUE
*   IF PER[1,4] < YEAR THEN
*      OPN = CB.LYR + PER[5,2]
*   END ELSE
*      OPN = CB.OPN + PER[5,2]
*   END
*   IF PER[1,4] < YEAR THEN
   IF ECD.RET.VALUE[1,4] < YEAR THEN
*** TASK # 23450 ***
*      OPEN '','CO.COA':ECD.RET.VALUE TO CO.COA ELSE ERRMSG = 'CO.COA.BAL ':PER:' FILE IS MISSING'; GOSUB 91000; ECD.ACTION = 99 ; CALL SCRN.EDIT ; GOTO 999999
      OPEN '','CO.COA':ECD.RET.VALUE TO CO.COA.BAL ELSE ERRMSG = 'CO.COA.BAL ':ECD.RET.VALUE:' FILE IS MISSING'; GOSUB 91000; ECD.ACTION = 99 ; CALL SCRN.EDIT ; GOTO 999999
*** TASK # 23450 ***
      OPEN '','DV.COA':ECD.RET.VALUE TO DV.COA.BAL ELSE ERRMSG = 'DV.COA.BAL ':ECD.RET.VALUE:' FILE IS MISSING'; GOSUB 91000; ECD.ACTION = 99 ; CALL SCRN.EDIT ; GOTO 999999
      OPEN '','DP.COA':ECD.RET.VALUE TO DP.COA.BAL ELSE ERRMSG = 'DP.COA.BAL ':ECD.RET.VALUE:' FILE IS MISSING'; GOSUB 91000; ECD.ACTION = 99 ; CALL SCRN.EDIT ; GOTO 999999
      OPEN '','CC.COA':ECD.RET.VALUE TO CC.COA.BAL ELSE ERRMSG = 'CC.COA.BAL ':ECD.RET.VALUE:' FILE IS MISSING'; GOSUB 91000; ECD.ACTION = 99 ; CALL SCRN.EDIT ; GOTO 999999
*   END
*T26619 v below files were already opened.
*T29176 v Only if current year is not re-accessed after looking at a 
*         prior year's data.
   END ELSE
*     IF ECD.RET.VALUE # "" AND PER[1,4] # ECD.RET.VALUE[1,4] THEN
*        OPEN '','COA' TO COA ELSE ERRMSG = 'COA FILE IS MISSING'; GOSUB 91000; ECD.ACTION = 99 ; CALL SCRN.EDIT ; GOTO 999999
         OPEN '','CO.COA.BAL' TO CO.COA.BAL ELSE ERRMSG = 'CO.COA.BAL FILE IS MISSING'; GOSUB 91000; ECD.ACTION = 99 ; CALL SCRN.EDIT ; GOTO 999999
         OPEN '','DV.COA.BAL' TO DV.COA.BAL ELSE ERRMSG = 'DV.COA.BAL FILE IS MISSING'; GOSUB 91000; ECD.ACTION = 99 ; CALL SCRN.EDIT ; GOTO 999999
         OPEN '','DP.COA.BAL' TO DP.COA.BAL ELSE ERRMSG = 'DP.COA.BAL FILE IS MISSING'; GOSUB 91000; ECD.ACTION = 99 ; CALL SCRN.EDIT ; GOTO 999999
         OPEN '','CC.COA.BAL' TO CC.COA.BAL ELSE ERRMSG = 'CC.COA.BAL FILE IS MISSING'; GOSUB 91000; ECD.ACTION = 99 ; CALL SCRN.EDIT ; GOTO 999999
*     END
   END
*T26619 ^
*T29176 ^
   PER = ECD.RET.VALUE
*T21238 ^
   OPN = CB.OPN + PER[5,2]
*T21331 v
   IF PER = NUM.PERIODS THEN
      OPNVAL = 55
   END ELSE
      OPNVAL = OPN+1
   END
*T21331 ^
*
*--- ACCOUNT NUMBER
*
1000*
   MAT COA.REC = ""
   ECD.NUM = 1
   SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""  
   ECD.ACTION = 5
   CALL SCRN.EDIT
   ECD.DEFAULT = ACCT.NO
   ECD.MAXL = IN.ACCT.LEN
   ECD.ACTION = 4
   CALL SCRN.EDIT
   BEGIN CASE
      CASE ECD.RET.VALUE = "END"
         ACCT.NO = ""
         GOTO 1999
      CASE NOT(NUM(ECD.RET.VALUE))
         BEGIN CASE
            CASE ECD.RET.VALUE = "D"
               GXR.ACTION = ECD.RET.VALUE
               GOSUB 2000
            CASE ECD.RET.VALUE = "T"
               GXR.ACTION = "C"
               GOSUB 3000
            CASE 1
               ERRMSG = "** NUMERIC INPUT REQUIRED **"
               GOSUB 91000
               ECD.RET.VALUE = "END"
         END CASE
         IF ECD.RET.VALUE = "END" THEN GOTO 1000
         GXR.ID = ""
         GXR.SRCH.ID = ECD.RET.VALUE
         GXR.LOC = 1
         GXR.FILE = COA
         CALL COA.GEN.XREF(MAT GEN.XREF.REC,PREFIX)
         IF GXR.ACTION # "X" THEN
            ECD.ACTION = 2
            CALL SCRN.EDIT
            ECD.ACTION = 3
            CALL SCRN.EDIT
         END
         IF GXR.ID = "" THEN GOTO 1000
         ECD.RET.VALUE = GXR.ID
         ECD.NUM = 1
         SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ECD.RET.VALUE CO.ACCT.MASK
         ECD.ACTION = 5
         CALL SCRN.EDIT
         GXR.LOC = 0
      CASE LEN(ECD.RET.VALUE) < BASE.LEN
         ERRMSG = "MINIMUM LENGTH = ":BASE.LEN
         GOSUB 91000
         GOTO 1000
      CASE 1
         ECD.RET.VALUE = ECD.RET.VALUE : STR("0",IN.ACCT.LEN-LEN(ECD.RET.VALUE))
         SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ECD.RET.VALUE CO.ACCT.MASK
         ECD.ACTION = 5
         CALL SCRN.EDIT
   END CASE
   MATREAD COA.REC FROM COA, CONO : ECD.RET.VALUE ELSE
      ERRMSG = "Cannot locate account - " : ECD.RET.VALUE CO.ACCT.MASK
      GOSUB 91000
      GOTO 1000
   END
   READ ALL.DIV FROM GLHX, CONO : ECD.RET.VALUE : PER ELSE ALL.DIV = ""
* PRINT @(0,23):'ALL.DIV = (':ALL.DIV:')': ; INPUT ACK:
   XCNT = DCOUNT(ALL.DIV,AM)
   IF XCNT < 3 THEN
      ERRMSG = "No activities for account - " : ECD.RET.VALUE CO.ACCT.MASK
      GOSUB 91000
      * GOTO 1000    ;* T26083
   END
   ACCT.NO = ECD.RET.VALUE
*
*--- DIVISION
*
1100*
   ECD.NUM = 6
  * SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""   ;* 26083
   ECD.ACTION = 4
   CALL SCRN.EDIT
   IF ECD.RET.VALUE = "END" THEN
      DIV.CODE = ""
      GOTO 1999
   END
   IF ECD.RET.VALUE = "S" THEN
      DIV.CODE = ECD.RET.VALUE
      GOTO 1999
   END
   IF ECD.RET.VALUE = "" THEN
      XCODE = ""
      XDESC = ""
      XLINES = DCOUNT(ALL.DIV,AM)
      XLN = 0
      FOR TLN = 3 TO XLINES
         XLN = XLN + 1
         XCODE<XLN> = ALL.DIV<TLN>
*PRINT @(0,23):'XCODE = (':XCODE:')': ; INPUT ACK:
         IF XCODE<XLN> = GEN.DIV THEN
            MAT DIV.REC = ""
            DIV.DESC = "GENERAL DIVISION"
         END ELSE
            MATREAD DIV.REC FROM DIVISION, CONO : XCODE<XLN> ELSE
               MAT DIV.REC = ""
               DIV.DESC = UNKNOWN
            END
         END
         XDESC<XLN> = DIV.DESC
      NEXT TLN
      XLINES = XLN
      XLN = 1
      XOLD.START = 0
      GOSUB 85000
      GOSUB 50000
      IF ECD.RET.VALUE = "END" OR ECD.RET.VALUE = "N" THEN GOTO 1100
      ECD.RET.VALUE = ALL.DIV<ECD.RET.VALUE>
      ECD.NUM = 6
      SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ECD.RET.VALUE
      ECD.ACTION = 5
      CALL SCRN.EDIT
   END
   LOCATE ECD.RET.VALUE IN ALL.DIV,3 SETTING FND ELSE
      ERRMSG = "No activities for division - ":ECD.RET.VALUE
      GOSUB 91000
      ;* T26083 v
      * GOTO 1100
      GOTO 1199
      ;* T26083 ^
   END
   IF ECD.RET.VALUE = GEN.DIV THEN
      READ ALL.DEPT FROM GLHX, CONO : GEN.DIV : ACCT.NO : PER ELSE ALL.DEPT = ""
      XCNT = DCOUNT(ALL.DEPT,AM)
      IF XCNT < 3 THEN
         ERRMSG = "No activities for division - ":ECD.RET.VALUE
         GOSUB 91000
         ;* T26083 v
         * GOTO 1100
         GOTO 1199
         ;* T26083 ^
      END
      READ ALL.CCTR FROM GLHX, CONO : GEN.DIV : GEN.DEPT : ACCT.NO : PER ELSE ALL.CCTR = ""
      XCNT = DCOUNT(ALL.CCTR,AM)
      IF XCNT < 3 THEN
         ERRMSG = "No activities for division - ":ECD.RET.VALUE
         GOSUB 91000
         ;* T26083 v
         * GOTO 1100
         GOTO 1199
         ;* T26083 ^
      END
      READ LINE.CODE FROM GLHX, CONO : GEN.DIV : GEN.DEPT : GEN.CCTR : ACCT.NO : PER ELSE LINE.CODE = ""
      XCNT = DCOUNT(LINE.CODE,AM)
      IF XCNT < 3 THEN
         ERRMSG = "No activities for division - ":ECD.RET.VALUE
         GOSUB 91000
         ;* T26083 v
         * GOTO 1100
         GOTO 1199
         ;* T26083 ^
      END
      DIV.CODE = GEN.DIV
      DEPT.CODE = GEN.DEPT
      CCTR.CODE = GEN.CCTR
      GOTO 1999
   END ELSE
      READ ALL.DEPT FROM GLHX, CONO : ECD.RET.VALUE : ACCT.NO : PER ELSE ALL.DEPT = ""
      XCNT = DCOUNT(ALL.DEPT,AM)
      IF XCNT < 3 THEN
         ERRMSG = "No activities for division - ":ECD.RET.VALUE
         GOSUB 91000
         ;* T26083 v
         * GOTO 1100
         ;* T26083 ^
      END
   END
1199 * T26083
   DIV.CODE = ECD.RET.VALUE
*
*--- DEPARTMENT
*
1200*
   ECD.NUM = 7
  * SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""   ;* 26083
   ECD.ACTION = 4
   CALL SCRN.EDIT
   IF ECD.RET.VALUE = "END" THEN
      DEPT.CODE = ""
      GOTO 1999
   END
   IF ECD.RET.VALUE = "S" THEN
      DEPT.CODE = ECD.RET.VALUE
      GOTO 1999
   END
   IF ECD.RET.VALUE = "" THEN
      XCODE = ""
      XDESC = ""
      XLINES = DCOUNT(ALL.DEPT,AM)
      XLN = 0
      FOR TLN = 3 TO XLINES
         XLN = XLN + 1
         XCODE<XLN> = ALL.DEPT<TLN>
         IF XCODE<XLN> = GEN.DEPT THEN
            MAT DEPT.REC = ""
            DEPT.DESC = "GENERAL DEPARTMENT"
         END ELSE
            MATREAD DEPT.REC FROM DEPARTMENT, CONO : XCODE<XLN> ELSE
               MAT DEPT.REC = ""
               DEPT.DESC = UNKNOWN
            END
         END
         XDESC<XLN> = DEPT.DESC
      NEXT TLN
      XLINES = XLN
      XLN = 1
      XOLD.START = 0
      GOSUB 85000
      GOSUB 50000
      IF ECD.RET.VALUE = "END" OR ECD.RET.VALUE = "N" THEN GOTO 1200
      ECD.RET.VALUE = ALL.DEPT<ECD.RET.VALUE>
      ECD.NUM = 7
      SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ECD.RET.VALUE
      ECD.ACTION = 5
      CALL SCRN.EDIT
   END
   LOCATE ECD.RET.VALUE IN ALL.DEPT,3 SETTING FND ELSE
      ERRMSG = "No activities for department - ":ECD.RET.VALUE
      GOSUB 91000
      ;* T26083 v
      * GOTO 1200
      GOTO 1299
      ;* T26083 ^
   END
   IF ECD.RET.VALUE = GEN.DEPT THEN
      READ ALL.CCTR FROM GLHX, CONO : DIV.CODE : GEN.DEPT : ACCT.NO : PER ELSE ALL.CCTR = ""
      XCNT = DCOUNT(ALL.CCTR,AM)
      IF XCNT < 3 THEN
         ERRMSG = "No activities for department - ":ECD.RET.VALUE
         GOSUB 91000
         ;* T26083 v
         * GOTO 1200
         GOTO 1299
         ;* T26083 ^
      END
      READ LINE.CODE FROM GLHX, CONO : DIV.CODE : GEN.DEPT : GEN.CCTR : ACCT.NO : PER ELSE LINE.CODE = ""
      XCNT = DCOUNT(LINE.CODE,AM)
      IF XCNT < 3 THEN
         ERRMSG = "No activities for department - ":ECD.RET.VALUE
         GOSUB 91000
         ;* T26083 v
         * GOTO 1200
         GOTO 1299
         ;* T26083 ^
      END
      DEPT.CODE = GEN.DEPT
      CCTR.CODE = GEN.CCTR
      GOTO 1999
   END ELSE
      READ ALL.CCTR FROM GLHX, CONO : DIV.CODE : ECD.RET.VALUE : ACCT.NO : PER ELSE ALL.CCTR = ""
      XCNT = DCOUNT(ALL.CCTR,AM)
      IF XCNT < 3 THEN
         ERRMSG = "No activities for department - ":ECD.RET.VALUE
         GOSUB 91000
         * GOTO 1200    ;* T26083
      END
1299 * T26083
   END
   DEPT.CODE = ECD.RET.VALUE
*
*--- COST CENTER
*
1300*
   ECD.NUM = 8
  * SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""   ;* 26083
   ECD.ACTION = 4
   CALL SCRN.EDIT
   IF ECD.RET.VALUE = "END" THEN
      CCTR.CODE = ""
      GOTO 1999
   END
   IF ECD.RET.VALUE = "S" THEN
      CCTR.CODE = ECD.RET.VALUE
      GOTO 1999
   END
   IF ECD.RET.VALUE = "" THEN
      XCODE = ""
      XDESC = ""
      XLINES = DCOUNT(ALL.CCTR,AM)
      XLN = 0
      FOR TLN = 3 TO XLINES
         XLN = XLN + 1
         XCODE<XLN> = ALL.CCTR<TLN>
         IF XCODE<XLN> = GEN.CCTR THEN
            MAT CCTR.REC = ""
            CCTR.DESC = "GENERAL COST CENTER"
         END ELSE
            MATREAD CCTR.REC FROM COST.CNTR, CONO : XCODE<XLN> ELSE
               MAT CCTR.REC = ""
               CCTR.DESC = UNKNOWN
            END
         END
         XDESC<XLN> = CCTR.DESC
      NEXT XLN
      XLINES = XLN
      XLN = 1
      XOLD.START = 0
      GOSUB 85000
      GOSUB 50000
      IF ECD.RET.VALUE = "END" OR ECD.RET.VALUE = "N" THEN GOTO 1300
      ECD.RET.VALUE = ALL.CCTR<ECD.RET.VALUE>
      ECD.NUM = 8
      SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ECD.RET.VALUE
      ECD.ACTION = 5
      CALL SCRN.EDIT
   END
   LOCATE ECD.RET.VALUE IN ALL.CCTR,3 SETTING FND ELSE
      ERRMSG = "No activities for cost center - ":ECD.RET.VALUE
      GOSUB 91000
      ;* T26083 v
      * GOTO 1300
      GOTO 1399
      ;* T26083 ^
   END
   READ LINE.CODE FROM GLHX, CONO : DIV.CODE : DEPT.CODE : ECD.RET.VALUE : ACCT.NO : PER ELSE LINE.CODE = ""
   XCNT = DCOUNT(LINE.CODE,AM)
   IF XCNT < 3 THEN
      ERRMSG = "No activities for cost center - ":ECD.RET.VALUE
      GOSUB 91000
      * GOTO 1300    ;* T26083
   END
1399 * T26083
   CCTR.CODE = ECD.RET.VALUE
1999*
   RETURN
*
*--- GET COA.DESC
*
2000*
*   ECD.NUM = 12
*   ECD.ACTION = 4
*   CALL SCRN.EDIT
*   IF ECD.RET.VALUE # "END" THEN
*      COA.L.DESC = ECD.RET.VALUE
*   END
*   SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""
*   ECD.ACTION = 5
*   CALL SCRN.EDIT
   X=0;Y=21;TYP=11;O.R="O";MAXL=30
   PMSG =  "Account Description : "
   CALL EDIT.SUB
   IF VALUE # "END" THEN
      COA.L.DESC = VALUE
   END
   RETURN
*
*--- GET ACCOUNT TYPE
*
3000*
   ECD.NUM = 13
   ECD.ACTION = 4
   CALL SCRN.EDIT
   IF ECD.RET.VALUE # "END" THEN
      MATREAD AT.REC FROM ACCT.TYPE, ECD.RET.VALUE ELSE
         ERRMSG = "Cannot locate account type - ":ECD.RET.VALUE
         GOSUB 91000
         GOTO 3000
      END
      COA.TYPE = ECD.RET.VALUE
   END
   SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""
   ECD.ACTION = 5
   CALL SCRN.EDIT
   RETURN
*
*--- PROCESS AND PRINT
*
4000*
   P_X  = 0 ; P_Y = 23 ; P_VALUE = "PROCESSING" ; P_OPT = "CL"
   CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
   MATREAD CB.REC FROM CO.COA.BAL, CONO : ACCT.NO ELSE MAT CB.REC = ""
   SCV.REC(2)<ECD.SCRN.NO> = OCONV(CB.REC(OPN), "MD2Z,<")
   SCV.REC(3)<ECD.SCRN.NO> = OCONV(ALL.DIV<1>, "MD2Z,")
   SCV.REC(4)<ECD.SCRN.NO> = OCONV(ALL.DIV<2>, "MD2Z,")
   SCV.REC(5)<ECD.SCRN.NO> = OCONV(CB.REC(OPNVAL), "MD2Z,<")
   BEGIN CASE
      CASE DIV.CODE = "S"
         DIV.CODE = ""
         DEPT.CODE = ""
         CCTR.CODE = ""
         LINE.ID = ""
         LN = 0
         DVCNT = DCOUNT(ALL.DIV,AM)
         FOR DV = 3 TO DVCNT
            DIV = ALL.DIV<DV>
            READ ALL.DEPT FROM GLHX, CONO : DIV : ACCT.NO : PER ELSE ALL.DEPT = ""
            DPCNT = DCOUNT(ALL.DEPT,AM)
            FOR DP = 3 TO DPCNT
               DEPT = ALL.DEPT<DP>
               READ ALL.CCTR FROM GLHX, CONO : DIV : DEPT : ACCT.NO : PER ELSE ALL.CCTR = ""
               CCCNT = DCOUNT(ALL.CCTR,AM)
               FOR CC = 3 TO CCCNT
                  CCTR = ALL.CCTR<CC>
                  READ LINE.CODE FROM GLHX, CONO : DIV : DEPT : CCTR : ACCT.NO : PER ELSE LINE.CODE = ""
                  SSCNT = DCOUNT(LINE.CODE,AM)
                  FOR SS = 3 TO SSCNT
                     LN = LN + 1
                     LINE.ID<LN> = DIV : DEPT : CCTR : ACCT.NO : LINE.CODE<SS>
                  NEXT SS
               NEXT CC
            NEXT DP
         NEXT DV
         LINES = LN
      CASE DEPT.CODE = "S"
         DEPT.CODE = ""
         CCTR.CODE = ""
         DIV = DIV.CODE
         MATREAD CB.REC FROM DV.COA.BAL, CONO : DIV : ACCT.NO ELSE MAT CB.REC = ""
         SCV.REC(2)<ECD.SCRN.NO,2> = OCONV(CB.REC(OPN), "MD2Z,<")
         SCV.REC(3)<ECD.SCRN.NO,2> = OCONV(ALL.DEPT<1>, "MD2Z,")
         SCV.REC(4)<ECD.SCRN.NO,2> = OCONV(ALL.DEPT<2>, "MD2Z,")
         SCV.REC(5)<ECD.SCRN.NO,2> = OCONV(CB.REC(OPNVAL), "MD2Z,<")
         LINE.ID = ""
         LN = 0
         DPCNT = DCOUNT(ALL.DEPT,AM)
         FOR DP = 3 TO DPCNT
            DEPT = ALL.DEPT<DP>
            READ ALL.CCTR FROM GLHX, CONO : DIV : DEPT : ACCT.NO : PER ELSE ALL.CCTR = ""
            CCCNT = DCOUNT(ALL.CCTR,AM)
            FOR CC = 3 TO CCCNT
               CCTR = ALL.CCTR<CC>
               READ LINE.CODE FROM GLHX, CONO : DIV : DEPT : CCTR : ACCT.NO : PER ELSE LINE.CODE = ""
               SSCNT = DCOUNT(LINE.CODE,AM)
               FOR SS = 3 TO SSCNT
                  LN = LN + 1
                  LINE.ID<LN> = DIV : DEPT : CCTR : ACCT.NO : LINE.CODE<SS>
               NEXT SS
            NEXT CC
         NEXT DP
         LINES = LN
      CASE CCTR.CODE = "S"
         CCTR.CODE = ""
         DIV = DIV.CODE
         DEPT = DEPT.CODE
         MATREAD CB.REC FROM DV.COA.BAL, CONO : DIV : ACCT.NO ELSE MAT CB.REC = ""
         SCV.REC(2)<ECD.SCRN.NO,2> = OCONV(CB.REC(OPN), "MD2Z,<")
         SCV.REC(3)<ECD.SCRN.NO,2> = OCONV(ALL.DEPT<1>, "MD2Z,")
         SCV.REC(4)<ECD.SCRN.NO,2> = OCONV(ALL.DEPT<2>, "MD2Z,")
         SCV.REC(5)<ECD.SCRN.NO,2> = OCONV(CB.REC(OPNVAL), "MD2Z,<")
         MATREAD CB.REC FROM DP.COA.BAL, CONO : DIV : DEPT : ACCT.NO ELSE MAT CB.REC = ""
         SCV.REC(2)<ECD.SCRN.NO,3> = OCONV(CB.REC(OPN), "MD2Z,<")
         SCV.REC(3)<ECD.SCRN.NO,3> = OCONV(ALL.CCTR<1>, "MD2Z,")
         SCV.REC(4)<ECD.SCRN.NO,3> = OCONV(ALL.CCTR<2>, "MD2Z,")
         SCV.REC(5)<ECD.SCRN.NO,3> = OCONV(CB.REC(OPNVAL), "MD2Z,<")
         LINE.ID = ""
         LN = 0
         CCCNT = DCOUNT(ALL.CCTR,AM)
         FOR CC = 3 TO CCCNT
            CCTR = ALL.CCTR<CC>
            READ LINE.CODE FROM GLHX, CONO : DIV : DEPT : CCTR : ACCT.NO  : PER ELSE LINE.CODE = ""
            SSCNT = DCOUNT(LINE.CODE,AM)
            FOR SS = 3 TO SSCNT
               LN = LN + 1
               LINE.ID<LN> = DIV : DEPT : CCTR : ACCT.NO : LINE.CODE<SS>
            NEXT SS
         NEXT CC
         LINES = LN
      CASE 1
         MATREAD CB.REC FROM DV.COA.BAL, CONO : DIV.CODE : ACCT.NO ELSE MAT CB.REC = ""
         SCV.REC(2)<ECD.SCRN.NO,2> = OCONV(CB.REC(OPN), "MD2Z,<")
         SCV.REC(3)<ECD.SCRN.NO,2> = OCONV(ALL.DEPT<1>, "MD2Z,")
         SCV.REC(4)<ECD.SCRN.NO,2> = OCONV(ALL.DEPT<2>, "MD2Z,")
         SCV.REC(5)<ECD.SCRN.NO,2> = OCONV(CB.REC(OPNVAL), "MD2Z,<")
         MATREAD CB.REC FROM DP.COA.BAL, CONO : DIV.CODE : DEPT.CODE : ACCT.NO ELSE MAT CB.REC = ""
         SCV.REC(2)<ECD.SCRN.NO,3> = OCONV(CB.REC(OPN), "MD2Z,<")
         SCV.REC(3)<ECD.SCRN.NO,3> = OCONV(ALL.CCTR<1>, "MD2Z,")
         SCV.REC(4)<ECD.SCRN.NO,3> = OCONV(ALL.CCTR<2>, "MD2Z,")
         SCV.REC(5)<ECD.SCRN.NO,3> = OCONV(CB.REC(OPNVAL), "MD2Z,<")
         MATREAD CB.REC FROM CC.COA.BAL, CONO : DIV.CODE : DEPT.CODE : CCTR.CODE : ACCT.NO ELSE MAT CB.REC = ""
         SCV.REC(2)<ECD.SCRN.NO,4> = OCONV(CB.REC(OPN), "MD2Z,<")
         ;* T26083 v
         READ LINE.CODE FROM GLHX, CONO : DIV.CODE : DEPT.CODE : CCTR.CODE : ACCT.NO  : PER ELSE LINE.CODE = ""
         ;* T26083 ^
         SCV.REC(3)<ECD.SCRN.NO,4> = OCONV(LINE.CODE<1>, "MD2Z,")
         SCV.REC(4)<ECD.SCRN.NO,4> = OCONV(LINE.CODE<2>, "MD2Z,")
         SCV.REC(5)<ECD.SCRN.NO,4> = OCONV(CB.REC(OPNVAL), "MD2Z,<")
         LINES = DCOUNT(LINE.CODE,AM)
         LINE.ID = ""
         LN = 0
         FOR XLN = 3 TO LINES
            LN = LN + 1
            LINE.ID<LN> = DIV.CODE : DEPT.CODE : CCTR.CODE : ACCT.NO : LINE.CODE<XLN>
         NEXT XLN
         LINES = LN
   END CASE
   P_X  = 0 ; P_Y = 23 ; P_VALUE = "" ; P_OPT = "CL"
   CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
   ECD.NUM = 6
   SCV.REC(ECD.NUM)<ECD.SCRN.NO> = DIV.CODE
   ECD.ACTION = 5
   CALL SCRN.EDIT
   ECD.NUM = 7
   SCV.REC(ECD.NUM)<ECD.SCRN.NO> = DEPT.CODE
   ECD.ACTION = 5
   CALL SCRN.EDIT
   ECD.NUM = 8
   SCV.REC(ECD.NUM)<ECD.SCRN.NO> = CCTR.CODE
   ECD.ACTION = 5
   CALL SCRN.EDIT
   ECD.NUM = 2
   ECD.SUB.NUM = 1
   ECD.ACTION = 7
   CALL SCRN.EDIT
   ECD.NUM = 3
   ECD.SUB.NUM = 1
   ECD.ACTION = 7
   CALL SCRN.EDIT
   ECD.NUM = 4
   ECD.SUB.NUM = 1
   ECD.ACTION = 7
   CALL SCRN.EDIT
   ECD.NUM = 5
   ECD.SUB.NUM = 1
   ECD.ACTION = 7
   CALL SCRN.EDIT
   LN = 1
   OLD.START = 0
   GOSUB 80000
   RETURN
*
*--- GET LINE NUMBER
*
30000*
   ECD.MINV = 1
   ECD.MAXV = LINES
   ECD.NUM = 10
   ECD.ACTION = 4; CALL SCRN.EDIT
   RETURN
*
*--- XREF SELECTION
*
50000*
   ECD.NUM = 11
   SCV.REC(ECD.NUM)<ECD.SCRN.NO> = ""
   ECD.ACTION = 4
   CALL SCRN.EDIT
   BEGIN CASE
      CASE ECD.RET.VALUE = "END" OR ECD.RET.VALUE = "N"
         GOTO 59999
      CASE NUM(ECD.RET.VALUE)
         IF ECD.RET.VALUE < ST.LINE OR ECD.RET.VALUE > LST.LINE THEN
            ERRMSG = "* * * OUT OF RANGE * * *"
            GOSUB 91000
         END ELSE
            ECD.RET.VALUE = ECD.RET.VALUE + 2
            GOTO 59999
         END
      CASE ECD.RET.VALUE = "S"
         XLN = 1 + INT((XLN - 1)/PAGE.SIZE) * PAGE.SIZE + PAGE.SIZE
         IF XLN > XLINES THEN XLN = 1
         GOSUB 85000
    * T25978 v
      CASE ECD.RET.VALUE = 'SR'
         XLN = 1 + INT((XLN - 1)/PAGE.SIZE) * PAGE.SIZE - PAGE.SIZE
         IF XLN < 1 THEN XLN = 1
         GOSUB 85000
      CASE ECD.RET.VALUE = 'ST'
         XLN = 1
         GOSUB 85000
      CASE ECD.RET.VALUE = 'SB'
         XLN = LINES
         GOSUB 85000
    * T25978 ^
   END CASE
   GOTO 50000
59999*
   CNT = 1
   GOSUB 85500
   RETURN
*
*--- SCROLL
*
80000*
   ST.LINE = 1 + INT((LN-1)/PAGE.SIZE) * PAGE.SIZE
   LST.LINE = ST.LINE + PAGE.SIZE - 1
   IF LST.LINE > LINES THEN LST.LINE = LINES
   IF ST.LINE = OLD.START THEN RETURN
   OLD.START = ST.LINE
   CNT = 1
   FOR N = ST.LINE TO LST.LINE
      SSLN = BEGIN.PAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
      P_X  = 0 ; P_Y = SSLN ; P_VALUE = N "R#4" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      MATREAD GLM.REC FROM GLH, CONO : LINE.ID<N> ELSE
         MAT GLM.REC = ""
         GLM.DESC = LINE.ID<N>
      END
      P_X  = 5 ; P_Y = SSLN ; P_VALUE = GLM.DESC "L#35" ; P_OPT = ""
      P_X  := AM:41 ; P_Y := AM:SSLN ; P_VALUE := AM:OCONV(GLM.DATE, "D2/") "L#8"
      P_X  := AM:50 ; P_Y := AM:SSLN ; P_VALUE := AM:GLM.SRC "L#2"
      P_X  := AM:53 ; P_Y := AM:SSLN ; P_VALUE := AM:GLM.REF "L#8"
      P_X  := AM:62 ; P_Y := AM:SSLN ; P_VALUE := AM:OCONV(GLM.AMT, "MD2Z,<") "R#15"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      CNT = CNT + 1
   NEXT N
   FOR N = CNT TO PAGE.SIZE
      SSLN = BEGIN.PAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
      P_X  = 0 ; P_Y = SSLN ; P_VALUE = "" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
   NEXT N
   RETURN
*
*--- SCROLL XREF
*
85000*
   ST.LINE = 1 + INT((XLN-1)/PAGE.SIZE) * PAGE.SIZE
   LST.LINE = ST.LINE + PAGE.SIZE - 1
   IF LST.LINE > XLINES THEN LST.LINE = XLINES
   IF ST.LINE = XOLD.START THEN RETURN
   XOLD.START = ST.LINE
   CNT = 1
   FOR N = ST.LINE TO LST.LINE
      SSLN = BEGIN.PAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
      P_X  = 0 ; P_Y = SSLN ; P_VALUE = N "R#3" ; P_OPT = "CL"
      P_X  := AM:5 ; P_Y := AM:SSLN ; P_VALUE := AM:XCODE<N> "R#5":'  ':XDESC<N> "L#30"     ;* T21876
* T21876 P_X  := AM:6 ; P_Y := AM:SSLN ; P_VALUE := AM:XCODE<N> "L#3"
* T21876 P_X  := AM:8 ; P_Y := AM:SSLN ; P_VALUE := AM:XDESC<N> "L#30"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
      CNT = CNT + 1
   NEXT N
85500*
   FOR N = CNT TO PAGE.SIZE
      SSLN = BEGIN.PAGE + LINE.SPACE * MOD(N-1,PAGE.SIZE)
      P_X  = 0 ; P_Y = SSLN ; P_VALUE = "" ; P_OPT = "CL"
      CALL VSI_PLINE(P_X,P_Y,P_VALUE,P_OPT)
   NEXT N
   RETURN
*
*--- ERROR ROUTINE
*
91000 ERR.TYPE=1;CALL SYSCOM(MAT SYSCOM.REC);RETURN
* 91000*
*    PRINT @(0,23):ERRMSG:CL:
*    INPUT REPLY,1 :
*    PRINT @(0,23):CL:
*    RETURN
999999*
END
